--->|<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html lang="fr" xml:lang="fr" xmlns="http://www.w3.org/1999/xhtml">
 <head>
  <meta content="text/html; charset=utf-8" http-equiv="Content-Type"/>
  <meta content="Ametys CMS Open source (http://www.ametys.org)" name="generator"/>
  <meta content="UEM7RA8T0Yg2b_RFm-oXbShah5jBdF-A1Br8u4TeTq0" name="google-site-verification"/>
  <meta charset="utf-8"/>
  <title>
   [area1][mkey1][symbolx][pkey1][symbolx][area1][keyword1][bracketl1][area1][keywordx][bracketr1][symbolx][bracketl2][area1][keywordx][bracketr2][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx]
  </title>
  <meta content="[area1][mkey1][symbolx][pkey3][symbolx][area1][keyword1][bracketl1][area1][keywordx][bracketr1][symbolx][bracketl2][area1][keywordx][bracketr2][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx]" name="keywords"/>
  <meta content="[area1][mkey1][symbolx][pkey2][symbolx][area1][keyword1][bracketl1][area1][keywordx][bracketr1][symbolx][bracketl2][area1][keywordx][bracketr2][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx]" name="description"/>
  <meta content="Université Paris-Sud / Zee Agency" name="author"/>
  <meta content="[area1][mkey1][symbolx][pkey1][symbolx][area1][keyword1][bracketl1][area1][keywordx][bracketr1][symbolx][bracketl2][area1][keywordx][bracketr2][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx]" name="og:title"/>
  <meta content="[area1][mkey1][symbolx][pkey4][symbolx][area1][keyword1][bracketl1][area1][keywordx][bracketr1][symbolx][bracketl2][area1][keywordx][bracketr2][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx]" name="og:site_name"/>
  <meta content="website" name="og:type"/>
  <meta content="[area1][mkey1][symbolx][pkey2][symbolx][area1][keyword1][bracketl1][area1][keywordx][bracketr1][symbolx][bracketl2][area1][keywordx][bracketr2][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx]" name="og:description"/>
  <meta content="/skins/skinzee/resources/img/og-image.png" name="og:image"/>
  <meta content="L'Université Paris-Sud est une université de recherche réputée au niveau international dans les disciplines scientifiques et médicales" name="twitter:card"/>
  <meta content="Université Paris-Sud" name="twitter:site"/>
  <meta content="[area1][mkey1][symbolx][pkey1][symbolx][area1][keyword1][bracketl1][area1][keywordx][bracketr1][symbolx][bracketl2][area1][keywordx][bracketr2][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx]" name="twitter:title"/>
  <meta content="[area1][mkey1][symbolx][pkey2][symbolx][area1][keyword1][bracketl1][area1][keywordx][bracketr1][symbolx][bracketl2][area1][keywordx][bracketr2][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx]" name="twitter:description"/>
  <meta content="/skins/skinzee/resources/img/og-image.png" name="twitter:image"/>
  <meta content="IE=edge" http-equiv="X-UA-Compatible"/>
  <meta content="width=device-width, initial-scale=1.0" name="viewport"/>
  <meta content="True" name="HandheldFriendly"/>
  <meta content="320" name="MobileOptimized"/>
  <meta content="on" http-equiv="cleartype"/>
  <meta content="white" name="apple-mobile-web-app-status-bar-style"/>
  <meta content="#ffffff" name="msapplication-TileColor"/>
  <meta content="43194599497" property="fb:page_id"/>
  <meta content="1507716497" property="fb:admins"/>
  <meta content="194570054807" property="fb:app_id"/>
  <meta content="/skins/skinzee/resources/img/precomposed.png" name="msapplication-TileImage"/>
  <noscript>
   <p>
   </p>
  </noscript>
 </head>
 <body>
  <div class="l-access-wrapper">
   <div class="l-container">
    <div class="access">
     [linkx]
     
     <a class="access_link" href="h">
      Aller à la recherche
     </a>
     <a class="access_link" href="/fr/sitemap.html">
      <h1>
       [area1][mkey1][symbolx][pkeyx][symbolx][area1][keyword1][bracketl1][area1][keywordx][bracketr1][symbolx][bracketl2][area1][keywordx][bracketr2][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx]
      </h1>
      Plan du site
     </a>
    </div>
   </div>
  </div>
  <div class="l-off-canvas-wrapper" id="off-canvas-container">
   <div class="l-off-canvas_menu">
    <div class="nav nav--mobile" id="primary-mobile-nav">
     <div class="nav-level nav-level--d1">
      <div class="nav-back nav-back--d1">
       <a class="nav-back_link" href="#">
        <i class="icon-navigate-left">
        </i>
        <span>
         Retour
        </span>
       </a>
      </div>
      <ul class="nav-list">
       <li class="nav-list_item nav-list_item--d1 nav-list_item--i1 nav-list_item--is-branch ">
        [linkx]
        
        [ahref]
        
        <div class="nav-level nav-level--d2">
         <div class="nav-back nav-back--d2">
          [linkx]
          
         </div>
         <ul class="nav-list">
          <li class="nav-list_item nav-list_item--d2 nav-list_item--i1 nav-list_item--is-branch nav-list_item--is-leaf ">
           [linkx]
           
           <a class="nav-list_expander" href="#">
            <i class="icon-navigate-right">
            </i>
           </a>
           <div class="nav-level nav-level--d3">
            <div class="nav-back nav-back--d3">
             <a class="nav-back_link" href="#">
              <i class="icon-navigate-left">
              </i>
              <span>
               Retour
              </span>
             </a>
            </div>
            <ul class="nav-list">
             <li class="nav-list_item nav-list_item--d3 nav-list_item--i1 nav-list_item--is-leaf ">
              [linkx]
              
             </li>
             <li class="nav-list_item nav-list_item--d3 nav-list_item--i1 nav-list_item--is-leaf ">
              [ahref]
              
             </li>
             <li class="nav-list_item nav-list_item--d3 nav-list_item--i1 nav-list_item--is-leaf ">
              [ahref]
              
             </li>
            </ul>
           </div>
          </li>
          <li class="nav-list_item nav-list_item--d2 nav-list_item--i1 nav-list_item--is-branch nav-list_item--is-leaf ">
           [linkx]
           
           <a class="nav-list_expander" href="#">
            <i class="icon-navigate-right">
            </i>
           </a>
           <div class="nav-level nav-level--d3">
            <div class="nav-back nav-back--d3">
             <a class="nav-back_link" href="#">
              <i class="icon-navigate-left">
              </i>
              <span>
               Retour
              </span>
             </a>
            </div>
            <ul class="nav-list">
             <li class="nav-list_item nav-list_item--d3 nav-list_item--i1 nav-list_item--is-leaf ">
              [linkx]
              
             </li>
             <li class="nav-list_item nav-list_item--d3 nav-list_item--i1 nav-list_item--is-leaf ">
              [linkx]
              
             </li>
             <li class="nav-list_item nav-list_item--d3 nav-list_item--i1 nav-list_item--is-leaf ">
              [ahref]
              
             </li>
             <li class="nav-list_item nav-list_item--d3 nav-list_item--i1 nav-list_item--is-leaf ">
              [ahref]
              
             </li>
             <li class="nav-list_item nav-list_item--d3 nav-list_item--i1 nav-list_item--is-leaf ">
              [linkx]
              
             </li>
             <li class="nav-list_item nav-list_item--d3 nav-list_item--i1 nav-list_item--is-leaf ">
              [linkx]
              
             </li>
            </ul>
           </div>
          </li>
          <li class="nav-list_item nav-list_item--d2 nav-list_item--i1 nav-list_item--is-branch nav-list_item--is-leaf ">
           [ahref]
           
           <a class="nav-list_expander" href="#">
            <i class="icon-navigate-right">
            </i>
           </a>
           <div class="nav-level nav-level--d3">
            <div class="nav-back nav-back--d3">
             [ahref]
             
            </div>
            <ul class="nav-list">
             <li class="nav-list_item nav-list_item--d3 nav-list_item--i1 nav-list_item--is-leaf ">
              [ahref]
              
             </li>
             <li class="nav-list_item nav-list_item--d3 nav-list_item--i1 nav-list_item--is-leaf ">
              <a class="nav-list_link " href="/fr/universite/composantes/ufr-medecine.html">
               UFR Médecine
              </a>
             </li>
             <li class="nav-list_item nav-list_item--d3 nav-list_item--i1 nav-list_item--is-leaf ">
              [ahref]
              
             </li>
             <li class="nav-list_item nav-list_item--d3 nav-list_item--i1 nav-list_item--is-leaf ">
              [ahref]
              
             </li>
             <li class="nav-list_item nav-list_item--d3 nav-list_item--i1 nav-list_item--is-leaf ">
              <a class="nav-list_link " href="/fr/universite/composantes/ufr-staps.html">
               UFR STAPS
              </a>
             </li>
             <li class="nav-list_item nav-list_item--d3 nav-list_item--i1 nav-list_item--is-leaf ">
              [ahref]
              
             </li>
             <li class="nav-list_item nav-list_item--d3 nav-list_item--i1 nav-list_item--is-leaf ">
              <a class="nav-list_link " href="/fr/universite/composantes/iut-cachan.html">
               IUT Cachan
              </a>
             </li>
             <li class="nav-list_item nav-list_item--d3 nav-list_item--i1 nav-list_item--is-leaf ">
              <a class="nav-list_link " href="/fr/universite/composantes/iut-orsay.html">
               IUT Orsay
              </a>
             </li>
             <li class="nav-list_item nav-list_item--d3 nav-list_item--i1 nav-list_item--is-leaf ">
              [linkx]
              
             </li>
             <li class="nav-list_item nav-list_item--d3 nav-list_item--i1 nav-list_item--is-leaf ">
              <a class="nav-list_link " href="/fr/universite/composantes/osups.html">
               OSUPS
              </a>
             </li>
            </ul>
           </div>
          </li>
          <li class="nav-list_item nav-list_item--d2 nav-list_item--i1 nav-list_item--is-branch nav-list_item--is-leaf ">
           [ahref]
           
           <a class="nav-list_expander" href="#">
            <i class="icon-navigate-right">
            </i>
           </a>
           <div class="nav-level nav-level--d3">
            <div class="nav-back nav-back--d3">
             <a class="nav-back_link" href="#">
              <i class="icon-navigate-left">
              </i>
              <span>
               Retour
              </span>
             </a>
            </div>
            <ul class="nav-list">
             <li class="nav-list_item nav-list_item--d3 nav-list_item--i1 nav-list_item--is-leaf ">
              [ahref]
              
             </li>
             <li class="nav-list_item nav-list_item--d3 nav-list_item--i1 nav-list_item--is-leaf ">
              [linkx]
              
             </li>
            </ul>
           </div>
          </li>
          <li class="nav-list_item nav-list_item--d2 nav-list_item--i1 nav-list_item--is-branch nav-list_item--is-leaf ">
           <a class="nav-list_link " href="/fr/universite/grands-projets.html">
            Grands projets
           </a>
           <a class="nav-list_expander" href="#">
            <i class="icon-navigate-right">
            </i>
           </a>
           <div class="nav-level nav-level--d3">
            <div class="nav-back nav-back--d3">
             <a class="nav-back_link" href="#">
              <i class="icon-navigate-left">
              </i>
              <span>
               Retour
              </span>
             </a>
            </div>
            <ul class="nav-list">
             <li class="nav-list_item nav-list_item--d3 nav-list_item--i1 nav-list_item--is-leaf ">
              <a class="nav-list_link " href="/fr/universite/grands-projets/le-centre-de-physique-matiere-et-rayonnement.html">
               Le Centre de Physique, Matière et Rayonnement
              </a>
             </li>
             <li class="nav-list_item nav-list_item--d3 nav-list_item--i1 nav-list_item--is-leaf ">
              <a class="nav-list_link " href="/fr/universite/grands-projets/pole-biologie-pharmacie-chimie.html">
               Pôle Biologie – Pharmacie – Chimie
              </a>
             </li>
             <li class="nav-list_item nav-list_item--d3 nav-list_item--i1 nav-list_item--is-leaf ">
              [ahref]
              
             </li>
             <li class="nav-list_item nav-list_item--d3 nav-list_item--i1 nav-list_item--is-leaf ">
              <a class="nav-list_link " href="/fr/universite/grands-projets/physique-des-2-infinis-et-des-origines.html">
               Physique des 2 infinis et des origines
              </a>
             </li>
             <li class="nav-list_item nav-list_item--d3 nav-list_item--i1 nav-list_item--is-leaf ">
              [ahref]
              
             </li>
             <li class="nav-list_item nav-list_item--d3 nav-list_item--i1 nav-list_item--is-leaf ">
              <a class="nav-list_link " href="/fr/universite/grands-projets/newsletter-campus-patrimoine.html">
               Newsletter Campus &amp; Patrimoine
              </a>
             </li>
            </ul>
           </div>
          </li>
          <li class="nav-list_item nav-list_item--d2 nav-list_item--i1 nav-list_item--is-leaf ">
           [linkx]
           
          </li>
          <li class="nav-list_item nav-list_item--d2 nav-list_item--i1 nav-list_item--is-leaf ">
           <a class="nav-list_link " href="/fr/universite/prix.html">
            Prix et Distinctions
           </a>
          </li>
          <li class="nav-list_item nav-list_item--d2 nav-list_item--i1 nav-list_item--is-leaf ">
           [ahref]
           
          </li>
          <li class="nav-list_item nav-list_item--d2 nav-list_item--i1 nav-list_item--is-branch nav-list_item--is-leaf ">
           <a class="nav-list_link " href="/fr/universite/reseau-des-parisudiens.html">
            Le réseau des diplômés de Paris-Sud
           </a>
           <a class="nav-list_expander" href="#">
            <i class="icon-navigate-right">
            </i>
           </a>
           <div class="nav-level nav-level--d3">
            <div class="nav-back nav-back--d3">
             [ahref]
             
            </div>
            <ul class="nav-list">
             <li class="nav-list_item nav-list_item--d3 nav-list_item--i1 nav-list_item--is-leaf ">
              [ahref]
              
             </li>
             <li class="nav-list_item nav-list_item--d3 nav-list_item--i1 nav-list_item--is-leaf ">
              <a class="nav-list_link " href="/fr/universite/reseau-des-parisudiens/inscriptions-reseau-alumni-paris-sud.html">
               S'inscrire au réseau des diplômés
              </a>
             </li>
             <li class="nav-list_item nav-list_item--d3 nav-list_item--i1 nav-list_item--is-leaf ">
              [linkx]
              
             </li>
            </ul>
           </div>
          </li>
          <li class="nav-list_item nav-list_item--d2 nav-list_item--i1 nav-list_item--is-leaf ">
           <a class="nav-list_link " href="/fr/universite/le-jardin-botanique.html">
            Le jardin botanique
           </a>
          </li>
          <li class="nav-list_item nav-list_item--d2 nav-list_item--i1 nav-list_item--is-leaf ">
           <a class="nav-list_link " href="/fr/universite/developpement-durable.html">
            Développement durable
           </a>
          </li>
          <li class="nav-list_item nav-list_item--d2 nav-list_item--i1 nav-list_item--is-leaf ">
           [ahref]
           
          </li>
          <li class="nav-list_item nav-list_item--d2 nav-list_item--i1 nav-list_item--is-branch nav-list_item--is-leaf ">
           <a class="nav-list_link " href="/fr/universite/actes-administratifs.html">
            Actes administratifs
           </a>
           [linkx]
           
           <div class="nav-level nav-level--d3">
            <div class="nav-back nav-back--d3">
             [ahref]
             
            </div>
            <ul class="nav-list">
             <li class="nav-list_item nav-list_item--d3 nav-list_item--i1 nav-list_item--is-leaf ">
              <a class="nav-list_link " href="/fr/universite/actes-administratifs/delegations_de_signatures.html">
               Délégations de signatures
              </a>
             </li>
             <li class="nav-list_item nav-list_item--d3 nav-list_item--i1 nav-list_item--is-leaf ">
              <a class="nav-list_link " href="/fr/universite/actes-administratifs/section_disciplinaire.html">
               Section disciplinaire
              </a>
             </li>
            </ul>
           </div>
          </li>
         </ul>
        </div>
       </li>
       <li class="nav-list_item nav-list_item--d1 nav-list_item--i1 nav-list_item--is-branch ">
        <a class="nav-list_link " href="#">
         Recherche
        </a>
        [linkx]
        
        <div class="nav-level nav-level--d2">
         <div class="nav-back nav-back--d2">
          [ahref]
          
         </div>
         <ul class="nav-list">
          <li class="nav-list_item nav-list_item--d2 nav-list_item--i1 nav-list_item--is-leaf ">
           <a class="nav-list_link " href="/fr/recherche/la-recherche-a-paris-sud.html">
            La recherche à Paris-Sud
           </a>
          </li>
          <li class="nav-list_item nav-list_item--d2 nav-list_item--i1 nav-list_item--is-branch nav-list_item--is-leaf ">
           [linkx]
           
           [linkx]
           
           <div class="nav-level nav-level--d3">
            <div class="nav-back nav-back--d3">
             [linkx]
             
            </div>
            <ul class="nav-list">
             <li class="nav-list_item nav-list_item--d3 nav-list_item--i1 nav-list_item--is-leaf ">
              [area1][keywordx][area1][keywordx][area1][mkey1][area1][keywordx][symbolx][area1][keywordx][symbolx][bracketl6][area1][keywordx][bracketr6][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][bracketl7][area1][keywordx][bracketr7][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][linkx][area1][keywordx][area1][mkey1][pkeyx][area1][mkey1][area1][mkey1][pkeyx][linkx][linkx][pkeyx][ahref][area1][mkey1][ahref][area1][keywordx][symbolx][area1][keywordx][symbolx][bracketl8][area1][keywordx][bracketr8][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][area1][keywordx][ahref][area1][keywordx][area1][keywordx][area1][keywordx][symbolx][area1][keywordx][symbolx][bracketl9][area1][keywordx][bracketr9][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][pkeyx][pkeyx][area1][mkey1][linkx][ahref]
             </li>
             <li class="nav-list_item nav-list_item--d3 nav-list_item--i1 nav-list_item--is-leaf ">
              <a class="nav-list_link " href="/fr/recherche/ecoles-doctorales/contrat-doctoral.html">
               Contrat doctoral
              </a>
             </li>
             <li class="nav-list_item nav-list_item--d3 nav-list_item--i1 nav-list_item--is-leaf ">
              [ahref]
              
             </li>
             <li class="nav-list_item nav-list_item--d3 nav-list_item--i1 nav-list_item--is-leaf ">
              <a class="nav-list_link " href="/fr/recherche/ecoles-doctorales/documentation.html">
               Documentation
              </a>
             </li>
             <li class="nav-list_item nav-list_item--d3 nav-list_item--i1 nav-list_item--is-leaf ">
              [ahref]
              
             </li>
             <li class="nav-list_item nav-list_item--d3 nav-list_item--i1 nav-list_item--is-leaf ">
              [linkx]
              
             </li>
            </ul>
           </div>
          </li>
          <li class="nav-list_item nav-list_item--d2 nav-list_item--i1 nav-list_item--is-branch nav-list_item--is-leaf ">
           [linkx]
           
           [linkx]
           
           <div class="nav-level nav-level--d3">
            <div class="nav-back nav-back--d3">
             <a class="nav-back_link" href="#">
              <i class="icon-navigate-left">
              </i>
              <span>
               Retour
              </span>
             </a>
            </div>
            <ul class="nav-list">
             <li class="nav-list_item nav-list_item--d3 nav-list_item--i1 nav-list_item--is-leaf ">
              [ahref]
              
             </li>
            </ul>
           </div>
          </li>
          <li class="nav-list_item nav-list_item--d2 nav-list_item--i1 nav-list_item--is-leaf ">
           <a class="nav-list_link " href="/fr/recherche/laboratoires.html">
            Laboratoires
           </a>
          </li>
          <li class="nav-list_item nav-list_item--d2 nav-list_item--i1 nav-list_item--is-leaf ">
           [linkx]
           
          </li>
          <li class="nav-list_item nav-list_item--d2 nav-list_item--i1 nav-list_item--is-branch nav-list_item--is-leaf ">
           <a class="nav-list_link " href="/fr/recherche/investissements-d-avenir.html">
            Investissements d'avenir
           </a>
           [ahref]
           
           <div class="nav-level nav-level--d3">
            <div class="nav-back nav-back--d3">
             <a class="nav-back_link" href="#">
              <i class="icon-navigate-left">
              </i>
              <span>
               Retour
              </span>
             </a>
            </div>
            <ul class="nav-list">
             <li class="nav-list_item nav-list_item--d3 nav-list_item--i1 nav-list_item--is-leaf ">
              <a class="nav-list_link " href="/fr/recherche/investissements-d-avenir/les-labex-paris-sud.html">
               Les LabEx Paris-Sud
              </a>
             </li>
             <li class="nav-list_item nav-list_item--d3 nav-list_item--i1 nav-list_item--is-leaf ">
              <a class="nav-list_link " href="/fr/recherche/investissements-d-avenir/les-equipex-paris-sud.html">
               Les Equipex Paris-Sud
              </a>
             </li>
             <li class="nav-list_item nav-list_item--d3 nav-list_item--i1 nav-list_item--is-leaf ">
              [ahref]
              
             </li>
             <li class="nav-list_item nav-list_item--d3 nav-list_item--i1 nav-list_item--is-leaf ">
              [ahref]
              
             </li>
             <li class="nav-list_item nav-list_item--d3 nav-list_item--i1 nav-list_item--is-leaf ">
              [ahref]
              
             </li>
             <li class="nav-list_item nav-list_item--d3 nav-list_item--i1 nav-list_item--is-leaf ">
              [ahref]
              
             </li>
             <li class="nav-list_item nav-list_item--d3 nav-list_item--i1 nav-list_item--is-leaf ">
              [ahref]
              
             </li>
             <li class="nav-list_item nav-list_item--d3 nav-list_item--i1 nav-list_item--is-leaf ">
              [ahref]
              
             </li>
            </ul>
           </div>
          </li>
          <li class="nav-list_item nav-list_item--d2 nav-list_item--i1 nav-list_item--is-leaf ">
           [linkx]
           
          </li>
          <li class="nav-list_item nav-list_item--d2 nav-list_item--i1 nav-list_item--is-leaf ">
           [ahref]
           
          </li>
          <li class="nav-list_item nav-list_item--d2 nav-list_item--i1 nav-list_item--is-leaf ">
           <a class="nav-list_link " href="/fr/recherche/agenda.html">
            Agenda de la recherche
           </a>
          </li>
          <li class="nav-list_item nav-list_item--d2 nav-list_item--i1 nav-list_item--is-branch nav-list_item--is-leaf ">
           <a class="nav-list_link " href="/fr/recherche/les_appels_a_projet.html">
            Les Appels à Projet
           </a>
           <a class="nav-list_expander" href="#">
            <i class="icon-navigate-right">
            </i>
           </a>
           <div class="nav-level nav-level--d3">
            <div class="nav-back nav-back--d3">
             <a class="nav-back_link" href="#">
              <i class="icon-navigate-left">
              </i>
              <span>
               Retour
              </span>
             </a>
            </div>
            <ul class="nav-list">
             <li class="nav-list_item nav-list_item--d3 nav-list_item--i1 nav-list_item--is-leaf ">
              [linkx]
              
             </li>
             <li class="nav-list_item nav-list_item--d3 nav-list_item--i1 nav-list_item--is-leaf ">
              [ahref]
              
             </li>
            </ul>
           </div>
          </li>
          <li class="nav-list_item nav-list_item--d2 nav-list_item--i1 nav-list_item--is-leaf ">
           [ahref]
           
          </li>
         </ul>
        </div>
       </li>
       <li class="nav-list_item nav-list_item--d1 nav-list_item--i1 nav-list_item--is-branch ">
        <a class="nav-list_link " href="#">
         Formations
        </a>
        <a class="nav-list_expander" href="#">
         <i class="icon-navigate-right">
         </i>
        </a>
        <div class="nav-level nav-level--d2">
         <div class="nav-back nav-back--d2">
          <a class="nav-back_link" href="#">
           <i class="icon-navigate-left">
           </i>
           <span>
            Retour
           </span>
          </a>
         </div>
         <ul class="nav-list">
          <li class="nav-list_item nav-list_item--d2 nav-list_item--i1 nav-list_item--is-leaf ">
           [ahref]
           
          </li>
          <li class="nav-list_item nav-list_item--d2 nav-list_item--i1 nav-list_item--is-branch nav-list_item--is-leaf ">
           <a class="nav-list_link " href="/fr/formations/disciplines.html">
            Disciplines
           </a>
           [linkx]
           
           <div class="nav-level nav-level--d3">
            <div class="nav-back nav-back--d3">
             [ahref]
             
            </div>
            <ul class="nav-list">
             <li class="nav-list_item nav-list_item--d3 nav-list_item--i1 nav-list_item--is-leaf ">
              <a class="nav-list_link " href="/fr/formations/disciplines/chimie.html">
               Chimie
              </a>
             </li>
             <li class="nav-list_item nav-list_item--d3 nav-list_item--i1 nav-list_item--is-leaf ">
              [ahref]
              
             </li>
             <li class="nav-list_item nav-list_item--d3 nav-list_item--i1 nav-list_item--is-leaf ">
              [linkx]
              
             </li>
             <li class="nav-list_item nav-list_item--d3 nav-list_item--i1 nav-list_item--is-leaf ">
              [linkx]
              
             </li>
             <li class="nav-list_item nav-list_item--d3 nav-list_item--i1 nav-list_item--is-leaf ">
              [ahref]
              
             </li>
             <li class="nav-list_item nav-list_item--d3 nav-list_item--i1 nav-list_item--is-leaf ">
              <a class="nav-list_link " href="/fr/formations/disciplines/informatique.html">
               Informatique
              </a>
             </li>
             <li class="nav-list_item nav-list_item--d3 nav-list_item--i1 nav-list_item--is-leaf ">
              [linkx]
              
             </li>
             <li class="nav-list_item nav-list_item--d3 nav-list_item--i1 nav-list_item--is-leaf ">
              [ahref]
              
             </li>
             <li class="nav-list_item nav-list_item--d3 nav-list_item--i1 nav-list_item--is-leaf ">
              [ahref]
              
             </li>
             <li class="nav-list_item nav-list_item--d3 nav-list_item--i1 nav-list_item--is-leaf ">
              <a class="nav-list_link " href="/fr/formations/disciplines/sante.html">
               Santé
              </a>
             </li>
             <li class="nav-list_item nav-list_item--d3 nav-list_item--i1 nav-list_item--is-leaf ">
              <a class="nav-list_link " href="/fr/formations/disciplines/environnement.html">
               Sciences de la terre
              </a>
             </li>
             <li class="nav-list_item nav-list_item--d3 nav-list_item--i1 nav-list_item--is-leaf ">
              <a class="nav-list_link " href="/fr/formations/disciplines/biologie.html">
               Sciences de la vie
              </a>
             </li>
             <li class="nav-list_item nav-list_item--d3 nav-list_item--i1 nav-list_item--is-leaf ">
              [linkx]
              
             </li>
            </ul>
           </div>
          </li>
          <li class="nav-list_item nav-list_item--d2 nav-list_item--i1 nav-list_item--is-branch nav-list_item--is-leaf ">
           [ahref]
           
           <a class="nav-list_expander" href="#">
            <i class="icon-navigate-right">
            </i>
           </a>
           <div class="nav-level nav-level--d3">
            <div class="nav-back nav-back--d3">
             [ahref]
             
            </div>
            <ul class="nav-list">
             <li class="nav-list_item nav-list_item--d3 nav-list_item--i1 nav-list_item--is-leaf ">
              <a class="nav-list_link " href="/fr/formations/diplomes/mise-a-niveau-scientifique.html">
               Mise à niveau scientifique[ahref][area1][keywordx][linkx]<li>[linkx]</li>[ahref]
              </a>
             </li>
             <li class="nav-list_item nav-list_item--d3 nav-list_item--i1 nav-list_item--is-leaf ">
              [linkx]
              
             </li>
             <li class="nav-list_item nav-list_item--d3 nav-list_item--i1 nav-list_item--is-leaf ">
              <a class="nav-list_link " href="/fr/formations/diplomes/dut.html">
               DUT
              </a>
             </li>
             <li class="nav-list_item nav-list_item--d3 nav-list_item--i1 nav-list_item--is-leaf ">
              [linkx]
              
             </li>
             <li class="nav-list_item nav-list_item--d3 nav-list_item--i1 nav-list_item--is-leaf ">
              [linkx]
              
             </li>
             <li class="nav-list_item nav-list_item--d3 nav-list_item--i1 nav-list_item--is-leaf ">
              <a class="nav-list_link " href="/fr/formations/diplomes/doubles-licences.html">
               Doubles licences
              </a>
             </li>
             <li class="nav-list_item nav-list_item--d3 nav-list_item--i1 nav-list_item--is-leaf ">
              <a class="nav-list_link " href="/fr/formations/diplomes/licences-professionnelles.html">
               Licences professionnelles
              </a>
             </li>
             <li class="nav-list_item nav-list_item--d3 nav-list_item--i1 nav-list_item--is-leaf ">
              <a class="nav-list_link " href="/fr/formations/diplomes/masters.html">
               Masters
              </a>
             </li>
             <li class="nav-list_item nav-list_item--d3 nav-list_item--i1 nav-list_item--is-leaf ">
              [linkx]
              
             </li>
             <li class="nav-list_item nav-list_item--d3 nav-list_item--i1 nav-list_item--is-leaf ">
              [ahref]
              
             </li>
             <li class="nav-list_item nav-list_item--d3 nav-list_item--i1 nav-list_item--is-leaf ">
              [linkx]
              
             </li>
             <li class="nav-list_item nav-list_item--d3 nav-list_item--i1 nav-list_item--is-leaf ">
              [linkx]
              
             </li>
             <li class="nav-list_item nav-list_item--d3 nav-list_item--i1 nav-list_item--is-leaf ">
              [linkx]
              
             </li>
             <li class="nav-list_item nav-list_item--d3 nav-list_item--i1 nav-list_item--is-leaf ">
              [ahref]
              
             </li>
             <li class="nav-list_item nav-list_item--d3 nav-list_item--i1 nav-list_item--is-leaf ">
              [linkx]
              
             </li>
             <li class="nav-list_item nav-list_item--d3 nav-list_item--i1 nav-list_item--is-leaf ">
              <a class="nav-list_link " href="/fr/formations/diplomes/ue-sensibilisation-aux-notions-de-discrimination.html">
               UE sensibilisation aux notions de discrimination
              </a>
             </li>
             <li class="nav-list_item nav-list_item--d3 nav-list_item--i1 nav-list_item--is-leaf ">
              [ahref]
              
             </li>
            </ul>
           </div>
          </li>
          <li class="nav-list_item nav-list_item--d2 nav-list_item--i1 nav-list_item--is-leaf ">
           <a class="nav-list_link " href="/fr/formations/formations-internationales.html">
            Formations internationales
           </a>
          </li>
          <li class="nav-list_item nav-list_item--d2 nav-list_item--i1 nav-list_item--is-leaf ">
           [ahref]
           
          </li>
          <li class="nav-list_item nav-list_item--d2 nav-list_item--i1 nav-list_item--is-branch nav-list_item--is-leaf ">
           [ahref]
           
           [ahref]
           
           <div class="nav-level nav-level--d3">
            <div class="nav-back nav-back--d3">
             [linkx]
             
            </div>
            <ul class="nav-list">
             <li class="nav-list_item nav-list_item--d3 nav-list_item--i1 nav-list_item--is-leaf ">
              <a class="nav-list_link " href="/fr/formations/alternance-et-apprentissage/devenir_apprentis.html">
               Devenir apprenti
              </a>
             </li>
             <li class="nav-list_item nav-list_item--d3 nav-list_item--i1 nav-list_item--is-leaf ">
              [ahref]
              
             </li>
             <li class="nav-list_item nav-list_item--d3 nav-list_item--i1 nav-list_item--is-leaf ">
              <a class="nav-list_link " href="/fr/formations/alternance-et-apprentissage/les_formations_en_apprentissage.html">
               Les formations en apprentissage
              </a>
             </li>
             <li class="nav-list_item nav-list_item--d3 nav-list_item--i1 nav-list_item--is-leaf ">
              [linkx]
              
             </li>
             <li class="nav-list_item nav-list_item--d3 nav-list_item--i1 nav-list_item--is-leaf ">
              <a class="nav-list_link " href="/fr/formations/alternance-et-apprentissage/liens_utiles.html">
               Liens utiles
              </a>
             </li>
            </ul>
           </div>
          </li>
          <li class="nav-list_item nav-list_item--d2 nav-list_item--i1 nav-list_item--is-branch nav-list_item--is-leaf ">
           [linkx]
           
           <a class="nav-list_expander" href="#">
            <i class="icon-navigate-right">
            </i>
           </a>
           <div class="nav-level nav-level--d3">
            <div class="nav-back nav-back--d3">
             <a class="nav-back_link" href="#">
              <i class="icon-navigate-left">
              </i>
              <span>
               Retour
              </span>
             </a>
            </div>
            <ul class="nav-list">
             <li class="nav-list_item nav-list_item--d3 nav-list_item--i1 nav-list_item--is-leaf ">
              [ahref]
              
             </li>
             <li class="nav-list_item nav-list_item--d3 nav-list_item--i1 nav-list_item--is-leaf ">
              <a class="nav-list_link " href="/fr/formations/formation-continue/daeu.html">
               <h3>
                [area1][mkey1][symbolx][pkeyx][symbolx][area1][keyword1][bracketl1][area1][keywordx][bracketr1][symbolx][bracketl2][area1][keywordx][bracketr2][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx]
               </h3>
               DAEU
              </a>
             </li>
             <li class="nav-list_item nav-list_item--d3 nav-list_item--i1 nav-list_item--is-leaf ">
              [linkx]
              
             </li>
             <li class="nav-list_item nav-list_item--d3 nav-list_item--i1 nav-list_item--is-leaf ">
              <a class="nav-list_link " href="/fr/formations/formation-continue/contacts.html">
               Tarifs et financements
              </a>
             </li>
             <li class="nav-list_item nav-list_item--d3 nav-list_item--i1 nav-list_item--is-leaf ">
              <a class="nav-list_link " href="/fr/formations/formation-continue/liens_utiles.html">
               Liens utiles
              </a>
             </li>
            </ul>
           </div>
          </li>
          <li class="nav-list_item nav-list_item--d2 nav-list_item--i1 nav-list_item--is-branch nav-list_item--is-leaf ">
           <a class="nav-list_link " href="/fr/formations/vae.html">
            VAE
           </a>
           <a class="nav-list_expander" href="#">
            <i class="icon-navigate-right">
            </i>
           </a>
           <div class="nav-level nav-level--d3">
            <div class="nav-back nav-back--d3">
             <a class="nav-back_link" href="#">
              <i class="icon-navigate-left">
              </i>
              <span>
               Retour
              </span>
             </a>
            </div>
            <ul class="nav-list">
             <li class="nav-list_item nav-list_item--d3 nav-list_item--i1 nav-list_item--is-leaf ">
              <a class="nav-list_link " href="/fr/formations/vae/vap85.html">
               VAPP85
              </a>
             </li>
             <li class="nav-list_item nav-list_item--d3 nav-list_item--i1 nav-list_item--is-leaf ">
              [ahref]
              
             </li>
             <li class="nav-list_item nav-list_item--d3 nav-list_item--i1 nav-list_item--is-leaf ">
              [linkx]
              
             </li>
             <li class="nav-list_item nav-list_item--d3 nav-list_item--i1 nav-list_item--is-leaf ">
              [ahref]
              
             </li>
             <li class="nav-list_item nav-list_item--d3 nav-list_item--i1 nav-list_item--is-leaf ">
              [ahref]
              
             </li>
             <li class="nav-list_item nav-list_item--d3 nav-list_item--i1 nav-list_item--is-leaf ">
              <a class="nav-list_link " href="/fr/formations/vae/calendrier.html">
               Calendrier
              </a>
             </li>
             <li class="nav-list_item nav-list_item--d3 nav-list_item--i1 nav-list_item--is-leaf ">
              [linkx]
              
             </li>
             <li class="nav-list_item nav-list_item--d3 nav-list_item--i1 nav-list_item--is-leaf ">
              [linkx]
              
             </li>
            </ul>
           </div>
          </li>
          <li class="nav-list_item nav-list_item--d2 nav-list_item--i1 nav-list_item--is-leaf ">
           <a class="nav-list_link " href="/fr/formations/reussite-et-devenir-des-etudiants.html">
            Réussite et devenir des diplômés
           </a>
          </li>
          <li class="nav-list_item nav-list_item--d2 nav-list_item--i1 nav-list_item--is-branch nav-list_item--is-leaf ">
           [ahref]
           
           [ahref]
           
           <div class="nav-level nav-level--d3">
            <div class="nav-back nav-back--d3">
             [ahref]
             
            </div>
            <ul class="nav-list">
             <li class="nav-list_item nav-list_item--d3 nav-list_item--i1 nav-list_item--is-leaf ">
              [linkx]
              
             </li>
             <li class="nav-list_item nav-list_item--d3 nav-list_item--i1 nav-list_item--is-leaf ">
              <a class="nav-list_link " href="/fr/formations/orientation-et-insertion-professionnelle/reorientation.html">
               Réorientation
              </a>
             </li>
             <li class="nav-list_item nav-list_item--d3 nav-list_item--i1 nav-list_item--is-leaf ">
              <a class="nav-list_link " href="/fr/formations/orientation-et-insertion-professionnelle/ateliers-orientation-et-insertion-professionnelle.html">
               Ateliers
              </a>
             </li>
             <li class="nav-list_item nav-list_item--d3 nav-list_item--i1 nav-list_item--is-leaf ">
              [linkx]
              
             </li>
             <li class="nav-list_item nav-list_item--d3 nav-list_item--i1 nav-list_item--is-leaf ">
              <a class="nav-list_link " href="/fr/formations/orientation-et-insertion-professionnelle/evenements.html">
               Salons, forums et événements
              </a>
             </li>
             <li class="nav-list_item nav-list_item--d3 nav-list_item--i1 nav-list_item--is-leaf ">
              [ahref]
              
             </li>
             <li class="nav-list_item nav-list_item--d3 nav-list_item--i1 nav-list_item--is-leaf ">
              [ahref]
              
             </li>
            </ul>
           </div>
          </li>
          <li class="nav-list_item nav-list_item--d2 nav-list_item--i1 nav-list_item--is-branch nav-list_item--is-leaf ">
           <a class="nav-list_link " href="/fr/formations/entrepreneuriat-etudiant.html">
            Entrepreneuriat étudiant
           </a>
           <a class="nav-list_expander" href="#">
            <i class="icon-navigate-right">
            </i>
           </a>
           <div class="nav-level nav-level--d3">
            <div class="nav-back nav-back--d3">
             [ahref]
             
            </div>
            <ul class="nav-list">
             <li class="nav-list_item nav-list_item--d3 nav-list_item--i1 nav-list_item--is-leaf ">
              [linkx]
              
             </li>
             <li class="nav-list_item nav-list_item--d3 nav-list_item--i1 nav-list_item--is-leaf ">
              [ahref]
              
             </li>
             <li class="nav-list_item nav-list_item--d3 nav-list_item--i1 nav-list_item--is-leaf ">
              [linkx]
              
             </li>
             <li class="nav-list_item nav-list_item--d3 nav-list_item--i1 nav-list_item--is-leaf ">
              [linkx]
              
             </li>
             <li class="nav-list_item nav-list_item--d3 nav-list_item--i1 nav-list_item--is-leaf ">
              [linkx]
              
             </li>
            </ul>
           </div>
          </li>
          <li class="nav-list_item nav-list_item--d2 nav-list_item--i1 nav-list_item--is-leaf ">
           [linkx]
           
          </li>
          <li class="nav-list_item nav-list_item--d2 nav-list_item--i1 nav-list_item--is-branch nav-list_item--is-leaf ">
           [ahref]
           
           [linkx]
           
           <div class="nav-level nav-level--d3">
            <div class="nav-back nav-back--d3">
             <a class="nav-back_link" href="#">
              <i class="icon-navigate-left">
              </i>
              <span>
               Retour
              </span>
             </a>
            </div>
            <ul class="nav-list">
             <li class="nav-list_item nav-list_item--d3 nav-list_item--i1 nav-list_item--is-leaf ">
              <a class="nav-list_link " href="/fr/formations/evaluation-des-enseignements/dispositif-eee.html">
               Dispositif EEE
              </a>
             </li>
             <li class="nav-list_item nav-list_item--d3 nav-list_item--i1 nav-list_item--is-leaf ">
              [ahref]
              
             </li>
             <li class="nav-list_item nav-list_item--d3 nav-list_item--i1 nav-list_item--is-leaf ">
              <li>[area1][keywordx][symbolx][area1][keywordx][symbolx][bracketl3][area1][keywordx][bracketr3][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx]</li><li>[area1][keywordx][symbolx][area1][keywordx][symbolx][bracketl4][area1][keywordx][bracketr4][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx]</li>[ahref]
             </li>
             <li class="nav-list_item nav-list_item--d3 nav-list_item--i1 nav-list_item--is-leaf ">
              <a class="nav-list_link " href="/fr/formations/evaluation-des-enseignements/journee-problematiques-de-l-evaluation-des-enseignements.html">
               Journée problématiques de l'évaluation
              </a>
             </li>
            </ul>
           </div>
          </li>
          <li class="nav-list_item nav-list_item--d2 nav-list_item--i1 nav-list_item--is-leaf ">
           [ahref]
           
          </li>
         </ul>
        </div>
       </li>
       <li class="nav-list_item nav-list_item--d1 nav-list_item--i1 nav-list_item--is-branch ">
        <a class="nav-list_link " href="#">
         Vie étudiante
        </a>
        <a class="nav-list_expander" href="#">
         <i class="icon-navigate-right">
         </i>
        </a>
        <div class="nav-level nav-level--d2">
         <div class="nav-back nav-back--d2">
          [ahref]
          
         </div>
         <ul class="nav-list">
          <li class="nav-list_item nav-list_item--d2 nav-list_item--i1 nav-list_item--is-leaf ">
           [linkx]
           
          </li>
          <li class="nav-list_item nav-list_item--d2 nav-list_item--i1 nav-list_item--is-leaf ">
           <a class="nav-list_link " href="/fr/vie-etudiante/la-vie-etudiante-a-paris-sud.html">
            La vie étudiante à Paris-Sud
           </a>
          </li>
          <li class="nav-list_item nav-list_item--d2 nav-list_item--i1 nav-list_item--is-leaf ">
           [linkx]
           
          </li>
          <li class="nav-list_item nav-list_item--d2 nav-list_item--i1 nav-list_item--is-branch nav-list_item--is-leaf ">
           [ahref]
           
           [ahref]
           
           <div class="nav-level nav-level--d3">
            <div class="nav-back nav-back--d3">
             <a class="nav-back_link" href="#">
              <i class="icon-navigate-left">
              </i>
              <span>
               Retour
              </span>
             </a>
            </div>
            <ul class="nav-list">
             <li class="nav-list_item nav-list_item--d3 nav-list_item--i1 nav-list_item--is-leaf ">
              [ahref]
              
             </li>
             <li class="nav-list_item nav-list_item--d3 nav-list_item--i1 nav-list_item--is-leaf ">
              <a class="nav-list_link " href="/fr/vie-etudiante/inscriptions/inscription-secondaire-master.html">
               inscription secondaire master
              </a>
             </li>
            </ul>
           </div>
          </li>
          <li class="nav-list_item nav-list_item--d2 nav-list_item--i1 nav-list_item--is-leaf ">
           <a class="nav-list_link " href="/fr/vie-etudiante/scolarite.html">
            Scolarités
           </a>
          </li>
          <li class="nav-list_item nav-list_item--d2 nav-list_item--i1 nav-list_item--is-branch nav-list_item--is-leaf ">
           <a class="nav-list_link " href="/fr/vie-etudiante/vie-pratique.html">
            Vie pratique
           </a>
           <a class="nav-list_expander" href="#">
            <i class="icon-navigate-right">
            </i>
           </a>
           <div class="nav-level nav-level--d3">
            <div class="nav-back nav-back--d3">
             [linkx]
             
            </div>
            <ul class="nav-list">
             <li class="nav-list_item nav-list_item--d3 nav-list_item--i1 nav-list_item--is-leaf ">
              [ahref]
              
             </li>
             <li class="nav-list_item nav-list_item--d3 nav-list_item--i1 nav-list_item--is-leaf ">
              [ahref]
              
             </li>
             <li class="nav-list_item nav-list_item--d3 nav-list_item--i1 nav-list_item--is-leaf ">
              <a class="nav-list_link " href="/fr/vie-etudiante/vie-pratique/etudiants-en-situation-de-handicap.html">
               Etudiants en situation de handicap
              </a>
             </li>
             <li class="nav-list_item nav-list_item--d3 nav-list_item--i1 nav-list_item--is-leaf ">
              [linkx]
              
             </li>
             <li class="nav-list_item nav-list_item--d3 nav-list_item--i1 nav-list_item--is-leaf ">
              [ahref]
              
             </li>
             <li class="nav-list_item nav-list_item--d3 nav-list_item--i1 nav-list_item--is-leaf ">
              <a class="nav-list_link " href="/fr/vie-etudiante/vie-pratique/cesure-universitaire.html">
               Césure universitaire
              </a>
             </li>
             <li class="nav-list_item nav-list_item--d3 nav-list_item--i1 nav-list_item--is-leaf ">
              [ahref]
              
             </li>
             <li class="nav-list_item nav-list_item--d3 nav-list_item--i1 nav-list_item--is-leaf ">
              <a class="nav-list_link " href="/fr/vie-etudiante/vie-pratique/dates-de-rentree.html">
               Dates de rentrée
              </a>
             </li>
             <li class="nav-list_item nav-list_item--d3 nav-list_item--i1 nav-list_item--is-leaf ">
              [linkx]
              
             </li>
             <li class="nav-list_item nav-list_item--d3 nav-list_item--i1 nav-list_item--is-leaf ">
              [linkx]
              
             </li>
             <li class="nav-list_item nav-list_item--d3 nav-list_item--i1 nav-list_item--is-leaf ">
              <a class="nav-list_link " href="/fr/vie-etudiante/vie-pratique/application-mobile.html">
               Application mobile
              </a>
             </li>
             <li class="nav-list_item nav-list_item--d3 nav-list_item--i1 nav-list_item--is-leaf ">
              [ahref]
              
             </li>
            </ul>
           </div>
          </li>
          <li class="nav-list_item nav-list_item--d2 nav-list_item--i1 nav-list_item--is-branch nav-list_item--is-leaf ">
           [linkx]
           
           [ahref]
           
           <div class="nav-level nav-level--d3">
            <div class="nav-back nav-back--d3">
             <a class="nav-back_link" href="#">
              <i class="icon-navigate-left">
              </i>
              <span>
               Retour
              </span>
             </a>
            </div>
            <ul class="nav-list">
             <li class="nav-list_item nav-list_item--d3 nav-list_item--i1 nav-list_item--is-leaf ">
              <a class="nav-list_link " href="/fr/vie-etudiante/sport/sports-de-loisir-competition.html">
               Sports de loisir / compétition
              </a>
             </li>
             <li class="nav-list_item nav-list_item--d3 nav-list_item--i1 nav-list_item--is-leaf ">
              [ahref]
              
             </li>
             <li class="nav-list_item nav-list_item--d3 nav-list_item--i1 nav-list_item--is-leaf ">
              [linkx]
              
             </li>
             <li class="nav-list_item nav-list_item--d3 nav-list_item--i1 nav-list_item--is-leaf ">
              [linkx]
              
             </li>
             <li class="nav-list_item nav-list_item--d3 nav-list_item--i1 nav-list_item--is-leaf ">
              <a class="nav-list_link " href="/fr/vie-etudiante/sport/installations-sportives.html">
               Installations sportives
              </a>
             </li>
             <li class="nav-list_item nav-list_item--d3 nav-list_item--i1 nav-list_item--is-leaf ">
              [linkx]
              
             </li>
             <li class="nav-list_item nav-list_item--d3 nav-list_item--i1 nav-list_item--is-leaf ">
              [linkx]
              
             </li>
             <li class="nav-list_item nav-list_item--d3 nav-list_item--i1 nav-list_item--is-leaf ">
              [ahref]
              
             </li>
            </ul>
           </div>
          </li>
          <li class="nav-list_item nav-list_item--d2 nav-list_item--i1 nav-list_item--is-branch nav-list_item--is-leaf ">
           <a class="nav-list_link " href="/fr/vie-etudiante/culture.html">
            Culture
           </a>
           <a class="nav-list_expander" href="#">
            <i class="icon-navigate-right">
            </i>
           </a>
           <div class="nav-level nav-level--d3">
            <div class="nav-back nav-back--d3">
             <a class="nav-back_link" href="#">
              <i class="icon-navigate-left">
              </i>
              <span>
               Retour
              </span>
             </a>
            </div>
            <ul class="nav-list">
             <li class="nav-list_item nav-list_item--d3 nav-list_item--i1 nav-list_item--is-leaf ">
              [linkx]
              
             </li>
             <li class="nav-list_item nav-list_item--d3 nav-list_item--i1 nav-list_item--is-leaf ">
              <a class="nav-list_link " href="/fr/vie-etudiante/culture/ateliers-culturels-en-ue-option-notee-ou-point-bonus.html">
               Ateliers culturels en UE option notée ou point bonus
              </a>
             </li>
             <li class="nav-list_item nav-list_item--d3 nav-list_item--i1 nav-list_item--is-leaf ">
              [ahref]
              
             </li>
             <li class="nav-list_item nav-list_item--d3 nav-list_item--i1 nav-list_item--is-leaf ">
              <a class="nav-list_link " href="/fr/vie-etudiante/culture/ateliers-theatre.html">
               ateliers théâtre
              </a>
             </li>
             <li class="nav-list_item nav-list_item--d3 nav-list_item--i1 nav-list_item--is-leaf ">
              [ahref]
              
             </li>
             <li class="nav-list_item nav-list_item--d3 nav-list_item--i1 nav-list_item--is-leaf ">
              [linkx]
              
             </li>
             <li class="nav-list_item nav-list_item--d3 nav-list_item--i1 nav-list_item--is-leaf ">
              <a class="nav-list_link " href="/fr/vie-etudiante/culture/ateliers-arts-visuels.html">
               ateliers arts visuels
              </a>
             </li>
             <li class="nav-list_item nav-list_item--d3 nav-list_item--i1 nav-list_item--is-leaf ">
              [ahref]
              
             </li>
            </ul>
           </div>
          </li>
          <li class="nav-list_item nav-list_item--d2 nav-list_item--i1 nav-list_item--is-leaf ">
           [linkx]
           
          </li>
          <li class="nav-list_item nav-list_item--d2 nav-list_item--i1 nav-list_item--is-leaf ">
           <a class="nav-list_link " href="/fr/vie-etudiante/logement.html">
            Logement
           </a>
          </li>
          <li class="nav-list_item nav-list_item--d2 nav-list_item--i1 nav-list_item--is-branch nav-list_item--is-leaf ">
           [linkx]
           
           [ahref]
           
           <div class="nav-level nav-level--d3">
            <div class="nav-back nav-back--d3">
             [linkx]
             
            </div>
            <ul class="nav-list">
             <li class="nav-list_item nav-list_item--d3 nav-list_item--i1 nav-list_item--is-leaf ">
              [linkx]
              
             </li>
             <li class="nav-list_item nav-list_item--d3 nav-list_item--i1 nav-list_item--is-leaf ">
              [linkx]
              
             </li>
             <li class="nav-list_item nav-list_item--d3 nav-list_item--i1 nav-list_item--is-leaf ">
              [ahref]
              
             </li>
            </ul>
           </div>
          </li>
          <li class="nav-list_item nav-list_item--d2 nav-list_item--i1 nav-list_item--is-leaf ">
           <a class="nav-list_link " href="/fr/vie-etudiante/bu.html">
            Bibliothèques
           </a>
          </li>
          <li class="nav-list_item nav-list_item--d2 nav-list_item--i1 nav-list_item--is-branch nav-list_item--is-leaf ">
           [ahref]
           
           [ahref]
           
           <div class="nav-level nav-level--d3">
            <div class="nav-back nav-back--d3">
             [ahref]
             
            </div>
            <ul class="nav-list">
             <li class="nav-list_item nav-list_item--d3 nav-list_item--i1 nav-list_item--is-leaf ">
              <a class="nav-list_link " href="/fr/vie-etudiante/bourses/prets.html">
               Prets
              </a>
             </li>
             <li class="nav-list_item nav-list_item--d3 nav-list_item--i1 nav-list_item--is-leaf ">
              <a class="nav-list_link " href="/fr/vie-etudiante/bourses/partir.html">
               Aides à la mobilité
              </a>
             </li>
             <li class="nav-list_item nav-list_item--d3 nav-list_item--i1 nav-list_item--is-leaf ">
              [ahref]
              
             </li>
            </ul>
           </div>
          </li>
          <li class="nav-list_item nav-list_item--d2 nav-list_item--i1 nav-list_item--is-branch nav-list_item--is-leaf ">
           [ahref]
           
           <a class="nav-list_expander" href="#">
            <i class="icon-navigate-right">
            </i>
           </a>
           <div class="nav-level nav-level--d3">
            <div class="nav-back nav-back--d3">
             [ahref]
             
            </div>
            <ul class="nav-list">
             <li class="nav-list_item nav-list_item--d3 nav-list_item--i1 nav-list_item--is-leaf ">
              [linkx]
              
             </li>
            </ul>
           </div>
          </li>
         </ul>
        </div>
       </li>
       <li class="nav-list_item nav-list_item--d1 nav-list_item--i1 nav-list_item--is-branch ">
        [ahref]
        
        [ahref]
        
        <div class="nav-level nav-level--d2">
         <div class="nav-back nav-back--d2">
          <a class="nav-back_link" href="#">
           <i class="icon-navigate-left">
           </i>
           <span>
            Retour
           </span>
          </a>
         </div>
         <ul class="nav-list">
          <li class="nav-list_item nav-list_item--d2 nav-list_item--i1 nav-list_item--is-branch nav-list_item--is-leaf ">
           [ahref]
           
           <a class="nav-list_expander" href="#">
            <i class="icon-navigate-right">
            </i>
           </a>
           <div class="nav-level nav-level--d3">
            <div class="nav-back nav-back--d3">
             [linkx]
             
            </div>
            <ul class="nav-list">
             <li class="nav-list_item nav-list_item--d3 nav-list_item--i1 nav-list_item--is-leaf ">
              [linkx]
              
             </li>
             <li class="nav-list_item nav-list_item--d3 nav-list_item--i1 nav-list_item--is-leaf ">
              [ahref]
              
             </li>
            </ul>
           </div>
          </li>
          <li class="nav-list_item nav-list_item--d2 nav-list_item--i1 nav-list_item--is-branch nav-list_item--is-leaf ">
           <a class="nav-list_link " href="/fr/international/etudiants-de-paris-sud.html">
            Etudiants de Paris-Sud
           </a>
           [linkx]
           
           <div class="nav-level nav-level--d3">
            <div class="nav-back nav-back--d3">
             <a class="nav-back_link" href="#">
              <i class="icon-navigate-left">
              </i>
              <span>
               Retour
              </span>
             </a>
            </div>
            <ul class="nav-list">
             <li class="nav-list_item nav-list_item--d3 nav-list_item--i1 nav-list_item--is-leaf ">
              [linkx]
              
             </li>
             <li class="nav-list_item nav-list_item--d3 nav-list_item--i1 nav-list_item--is-leaf ">
              [linkx]
              
             </li>
             <li class="nav-list_item nav-list_item--d3 nav-list_item--i1 nav-list_item--is-leaf ">
              [linkx]
              
             </li>
             <li class="nav-list_item nav-list_item--d3 nav-list_item--i1 nav-list_item--is-leaf ">
              [linkx]
              
             </li>
             <li class="nav-list_item nav-list_item--d3 nav-list_item--i1 nav-list_item--is-leaf ">
              <a class="nav-list_link " href="/fr/international/etudiants-de-paris-sud/initiatives-etudiantes.html">
               Initiatives étudiantes
              </a>
             </li>
             <li class="nav-list_item nav-list_item--d3 nav-list_item--i1 nav-list_item--is-leaf ">
              [linkx]
              
             </li>
             <li class="nav-list_item nav-list_item--d3 nav-list_item--i1 nav-list_item--is-leaf ">
              <a class="nav-list_link " href="/fr/international/etudiants-de-paris-sud/tandem.html">
               Tandem
              </a>
             </li>
             <li class="nav-list_item nav-list_item--d3 nav-list_item--i1 nav-list_item--is-leaf ">
              [ahref]
              
             </li>
             <li class="nav-list_item nav-list_item--d3 nav-list_item--i1 nav-list_item--is-leaf ">
              [ahref]
              
             </li>
            </ul>
           </div>
          </li>
          <li class="nav-list_item nav-list_item--d2 nav-list_item--i1 nav-list_item--is-branch nav-list_item--is-leaf ">
           [linkx]
           
           <a class="nav-list_expander" href="#">
            <i class="icon-navigate-right">
            </i>
           </a>
           <div class="nav-level nav-level--d3">
            <div class="nav-back nav-back--d3">
             [ahref]
             
            </div>
            <ul class="nav-list">
             <li class="nav-list_item nav-list_item--d3 nav-list_item--i1 nav-list_item--is-leaf ">
              [ahref]
              
             </li>
             <li class="nav-list_item nav-list_item--d3 nav-list_item--i1 nav-list_item--is-leaf ">
              [ahref]
              
             </li>
             <li class="nav-list_item nav-list_item--d3 nav-list_item--i1 nav-list_item--is-leaf ">
              [ahref]
              
             </li>
             <li class="nav-list_item nav-list_item--d3 nav-list_item--i1 nav-list_item--is-leaf ">
              <a class="nav-list_link " href="/fr/international/etudiants-internationaux/stage-a-paris-sud.html">
               Stage à Paris-Sud
              </a>
             </li>
             <li class="nav-list_item nav-list_item--d3 nav-list_item--i1 nav-list_item--is-leaf ">
              [linkx]
              
             </li>
             <li class="nav-list_item nav-list_item--d3 nav-list_item--i1 nav-list_item--is-leaf ">
              [linkx]
              
             </li>
             <li class="nav-list_item nav-list_item--d3 nav-list_item--i1 nav-list_item--is-leaf ">
              <a class="nav-list_link " href="/fr/international/etudiants-internationaux/cours-de-francais.html">
               Cours de français
              </a>
             </li>
             <li class="nav-list_item nav-list_item--d3 nav-list_item--i1 nav-list_item--is-leaf ">
              [linkx]
              
             </li>
             <li class="nav-list_item nav-list_item--d3 nav-list_item--i1 nav-list_item--is-leaf ">
              [linkx]
              
             </li>
             <li class="nav-list_item nav-list_item--d3 nav-list_item--i1 nav-list_item--is-leaf ">
              [ahref]
              
             </li>
            </ul>
           </div>
          </li>
          <li class="nav-list_item nav-list_item--d2 nav-list_item--i1 nav-list_item--is-branch nav-list_item--is-leaf ">
           [ahref]
            [linkx][area1][mkey1][ahref][area1][mkey1][linkx][area1][keywordx][symbolx][area1][keywordx][symbolx][bracketl10][area1][keywordx][bracketr10][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][pkeyx][pkeyx][area1][keywordx][symbolx][area1][keywordx][symbolx][bracketl11][area1][keywordx][bracketr11][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][linkx][ahref][area1][keywordx][area1][mkey1][linkx][area1][keywordx][symbolx][area1][keywordx][symbolx][bracketl12][area1][keywordx][bracketr12][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][mkey1][linkx][area1][keywordx][area1][keywordx][symbolx][area1][keywordx][symbolx][bracketl13][area1][keywordx][bracketr13][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][pkeyx][pkeyx]
           
           [ahref]
           
           <div class="nav-level nav-level--d3">
            <div class="nav-back nav-back--d3">
             <a class="nav-back_link" href="#">
              [ahref][area1][keywordx][symbolx][area1][keywordx][symbolx][bracketl1][area1][keywordx][bracketr1][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][ahref][area1][keywordx][ahref][linkx][pkeyx][area1][mkey1][linkx][area1][keywordx][area1][keywordx][area1][mkey1][ahref][pkeyx][area1][mkey1][area1][mkey1][ahref][ahref]
             </a>
            </div>
            <ul class="nav-list">
             <li class="nav-list_item nav-list_item--d3 nav-list_item--i1 nav-list_item--is-leaf ">
              [ahref]
              
             </li>
             <li class="nav-list_item nav-list_item--d3 nav-list_item--i1 nav-list_item--is-leaf ">
              <a class="nav-list_link " href="/fr/international/enseignants-chercheurs/cooperation.html">
               Elaborer une coopération
              </a>
             </li>
             <li class="nav-list_item nav-list_item--d3 nav-list_item--i1 nav-list_item--is-leaf ">
              [ahref]
              
             </li>
             <li class="nav-list_item nav-list_item--d3 nav-list_item--i1 nav-list_item--is-leaf ">
              [ahref]
              
             </li>
            </ul>
           </div>
          </li>
          <li class="nav-list_item nav-list_item--d2 nav-list_item--i1 nav-list_item--is-leaf ">
           [linkx]
           
          </li>
          <li class="nav-list_item nav-list_item--d2 nav-list_item--i1 nav-list_item--is-branch nav-list_item--is-leaf ">
           <a class="nav-list_link " href="/fr/international/erasmus-international.html">
            Erasmus+ International
           </a>
           [ahref]
           
           <div class="nav-level nav-level--d3">
            <div class="nav-back nav-back--d3">
             [ahref]
             
            </div>
            <ul class="nav-list">
             <li class="nav-list_item nav-list_item--d3 nav-list_item--i1 nav-list_item--is-leaf ">
              [linkx]
              
             </li>
             <li class="nav-list_item nav-list_item--d3 nav-list_item--i1 nav-list_item--is-leaf ">
              [linkx]
              
             </li>
             <li class="nav-list_item nav-list_item--d3 nav-list_item--i1 nav-list_item--is-leaf ">
              [linkx]
              
             </li>
             <li class="nav-list_item nav-list_item--d3 nav-list_item--i1 nav-list_item--is-leaf ">
              [ahref]
              
             </li>
             <li class="nav-list_item nav-list_item--d3 nav-list_item--i1 nav-list_item--is-leaf ">
              [linkx]
              
             </li>
             <li class="nav-list_item nav-list_item--d3 nav-list_item--i1 nav-list_item--is-leaf ">
              [ahref]
              
             </li>
            </ul>
           </div>
          </li>
          <li class="nav-list_item nav-list_item--d2 nav-list_item--i1 nav-list_item--is-leaf ">
           [ahref]
           
          </li>
          <li class="nav-list_item nav-list_item--d2 nav-list_item--i1 nav-list_item--is-branch nav-list_item--is-leaf ">
           [ahref]
           
           <a class="nav-list_expander" href="#">
            <i class="icon-navigate-right">
            </i>
           </a>
           <div class="nav-level nav-level--d3">
            <div class="nav-back nav-back--d3">
             [linkx]
             
            </div>
            <ul class="nav-list">
             <li class="nav-list_item nav-list_item--d3 nav-list_item--i1 nav-list_item--is-leaf ">
              [linkx]
              
             </li>
             <li class="nav-list_item nav-list_item--d3 nav-list_item--i1 nav-list_item--is-leaf ">
              [linkx]
              
             </li>
            </ul>
           </div>
          </li>
         </ul>
        </div>
       </li>
       <li class="nav-list_item nav-list_item--d1 nav-list_item--i1 nav-list_item--is-branch ">
        <a class="nav-list_link " href="#">
         Science et société
        </a>
        [linkx]
        
        <div class="nav-level nav-level--d2">
         <div class="nav-back nav-back--d2">
          <a class="nav-back_link" href="#">
           <i class="icon-navigate-left">
           </i>
           <span>
            Retour
           </span>
          </a>
         </div>
         <ul class="nav-list">
          <li class="nav-list_item nav-list_item--d2 nav-list_item--i1 nav-list_item--is-leaf ">
           [ahref]
           
          </li>
          <li class="nav-list_item nav-list_item--d2 nav-list_item--i1 nav-list_item--is-leaf ">
           [ahref]
           
          </li>
          <li class="nav-list_item nav-list_item--d2 nav-list_item--i1 nav-list_item--is-leaf ">
           [ahref]
           
          </li>
          <li class="nav-list_item nav-list_item--d2 nav-list_item--i1 nav-list_item--is-leaf ">
           [ahref]
           
          </li>
         </ul>
        </div>
       </li>
      </ul>
     </div>
    </div>
   </div>
   <div class="l-off-canvas_content">
    <div class="l-minisearch-wrapper" id="minisearch-wrapper">
     <div class="minisearch active">
      <form action="/fr/moteur-de-recherche.html#nav" class="form" method="post">
       <div class="form_controls_suffix">
        <button class="form_field form_submit" type="submit">
         OK
        </button>
       </div>
       <div class="form_controls form_controls--suffixed">
       </div>
      </form>
     </div>
    </div>
    <div class="l-header-wrapper">
     <div class="l-container">
      <div class="header">
       <div class="iewarning">
        <p>
         [ahref]
         
        </p>
       </div>
       [ahref]
       
       <div class="header_icons" id="mobile-header-icons">
        [linkx]
        
        [linkx]
        
        [ahref]
        
        <a class="open-nav" href="v">
         <i class="icon-rows">
         </i>
        </a>
       </div>
       <div class="header-tools">
        <div class="dons">
         [linkx]
         
        </div>
        <div class="social_topune">
         [linkx]
         
         [ahref]
         
         [linkx]
         
         [ahref]
         
        </div>
        <div class="lang-picker">
         <a class="lang-picker_link lang-picker_link--fr active" href="/fr/index.html" lang="fr" title="Accéder à la version française">
          FR
         </a>
         [ahref]
         
        </div>
        <div class="dropdown menu-composantes">
         <label class="dropdown_trigger" for="menu-composantes-content-52cdf3795140b">
          <i class="icon-dropdown">
          </i>
          <span>
           Accès direct
          </span>
         </label>
         <ul class="dropdown_list">
          <li>
           [ahref]
           
          </li>
          <li>
           <a href="/fr/index.html">
            UFR Sciences[ahref][area1][mkey1][linkx]
           </a>
          </li>
          <li>
           [linkx]
           
          </li>
          <li>
           [linkx]
           
          </li>
          <li>
           <a href="/fr/index.html">
            UFR Pharmacie
           </a>
          </li>
          <li>
           [ahref]
           
          </li>
          <li>
           [ahref]
           
          </li>
          <li>
           <a href="/fr/index.html">
            IUT Cachan
           </a>
          </li>
          <li>
           [linkx]
           
          </li>
          <li>
           [linkx]
           
          </li>
         </ul>
        </div>
        <form action="/fr/moteur-de-recherche.html#nav" class="search-form inline-form" id="main-search" method="post">
         <fieldset class="search-form_fieldset">
          <legend class="search-form_legend">
           Rechercher sur le site
          </legend>
          <label class="search-form_label" for="main-search-field" title="Rechercher sur le site">
           Rechercher sur le site
          </label>
          <i aria-hidden="true" class="icon-search">
          </i>
          <button class="search-form_submit" type="submit">
           OK
          </button>
         </fieldset>
        </form>
       </div>
       <div class="nav nav--desktop nav--primary" id="primary-nav">
        <div class="nav-level nav-level--d1">
         [linkx][pkeyx][area1][keywordx][area1][keywordx][symbolx][area1][keywordx][symbolx][bracketl2][area1][keywordx][bracketr2][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][linkx][linkx][area1][keywordx][symbolx][area1][keywordx][symbolx][bracketl3][area1][keywordx][bracketr3][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][linkx][ahref][area1][mkey1][pkeyx][area1][keywordx][symbolx][area1][keywordx][symbolx][bracketl4][area1][keywordx][bracketr4][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][ahref][pkeyx][linkx][area1][keywordx][symbolx][area1][keywordx][symbolx][bracketl5][area1][keywordx][bracketr5][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx]
        </div>
       </div>
      </div>
     </div>
    </div>
    <div class="l-nav-overlay-wrapper">
     <div class="l-container">
      <div class="nav nav-overlay nav--desktop" id="primary-nav-overlay">
       <div class="nav-overlay_item" id="nav-overlay-1">
        [linkx]
        
        <ul class="nav-overlay_children">
         <li class="nav-overlay_child">
          [linkx]
          
         </li>
         <li class="nav-overlay_child">
          [ahref]
          
         </li>
         <li class="nav-overlay_child">
          [ahref]
          
         </li>
         <li class="nav-overlay_child">
          [ahref]
          
         </li>
         <li class="nav-overlay_child">
          <a class="nav-overlay_link" href="/fr/universite/grands-projets.html">
           Grands projets
          </a>
         </li>
         <li class="nav-overlay_child">
          [linkx]
          
         </li>
         <li class="nav-overlay_child">
          [ahref]
          
         </li>
         <li class="nav-overlay_child">
          [linkx]
          
         </li>
         <li class="nav-overlay_child">
          [linkx]
          
         </li>
         <li class="nav-overlay_child">
          [linkx]
          
         </li>
         <li class="nav-overlay_child">
          [linkx]
          
         </li>
         <li class="nav-overlay_child">
          [ahref]
          
         </li>
         <li class="nav-overlay_child">
          [linkx]
          
         </li>
        </ul>
       </div>
       <div class="nav-overlay_item" id="nav-overlay-2">
        <a class="nav-overlay_highlight">
         <div class="nav-overlay_highlight_title">
          Recherche
         </div>
         <div class="nav-overlay_highlight_picture">
         </div>
        </a>
        <ul class="nav-overlay_children">
         <li class="nav-overlay_child">
          [linkx]
          
         </li>
         <li class="nav-overlay_child">
          [ahref]
          
         </li>
         <li class="nav-overlay_child">
          [linkx]
          
         </li>
         <li class="nav-overlay_child">
          [linkx]
          
         </li>
         <li class="nav-overlay_child">
          [linkx]
          
         </li>
         <li class="nav-overlay_child">
          <a class="nav-overlay_link" href="/fr/recherche/investissements-d-avenir.html">
           Investissements d'avenir
          </a>
         </li>
         <li class="nav-overlay_child">
          [linkx]
          
         </li>
         <li class="nav-overlay_child">
          [linkx]
          
         </li>
         <li class="nav-overlay_child">
          [ahref]
          
         </li>
         <li class="nav-overlay_child">
          [linkx]
          
         </li>
         <li class="nav-overlay_child">
          [linkx]
          
         </li>
        </ul>
       </div>
       <div class="nav-overlay_item" id="nav-overlay-3">
        <a class="nav-overlay_highlight">
         <div class="nav-overlay_highlight_title">
          Formations
         </div>
         <div class="nav-overlay_highlight_picture">
         </div>
        </a>
        <ul class="nav-overlay_children">
         <li class="nav-overlay_child">
          <a class="nav-overlay_link" href="/fr/formations/les-formations-a-paris-sud.html">
           Les formations à Paris-Sud
          </a>
         </li>
         <li class="nav-overlay_child">
          [ahref]
          
         </li>
         <li class="nav-overlay_child">
          [linkx]
          
         </li>
         <li class="nav-overlay_child">
          [linkx]
          
         </li>
         <li class="nav-overlay_child">
          [ahref]
          
         </li>
         <li class="nav-overlay_child">
          <a class="nav-overlay_link" href="/fr/formations/alternance-et-apprentissage.html">
           Alternance et apprentissage
          </a>
         </li>
         <li class="nav-overlay_child">
          [linkx]
          
         </li>
         <li class="nav-overlay_child">
          <a class="nav-overlay_link" href="/fr/formations/vae.html">
           VAE
          </a>
         </li>
         <li class="nav-overlay_child">
          [ahref]
          
         </li>
         <li class="nav-overlay_child">
          <a class="nav-overlay_link" href="/fr/formations/orientation-et-insertion-professionnelle.html">
           Orientation Insertion Pro
          </a>
         </li>
         <li class="nav-overlay_child">
          [linkx]
          
         </li>
         <li class="nav-overlay_child">
          [linkx]
          
         </li>
         <li class="nav-overlay_child">
          [ahref]
          
         </li>
         <li class="nav-overlay_child">
          <a class="nav-overlay_link" href="/fr/formations/innovation-pedagogique.html">
           Innovation pédagogique
          </a>
         </li>
        </ul>
       </div>
       <div class="nav-overlay_item" id="nav-overlay-4">
        [ahref]
        
        <ul class="nav-overlay_children">
         <li class="nav-overlay_child">
          <a class="nav-overlay_link" href="/fr/vie-etudiante/maison-des-etudiants.html">
           Maison des étudiants
          </a>
         </li>
         <li class="nav-overlay_child">
          <a class="nav-overlay_link" href="/fr/vie-etudiante/la-vie-etudiante-a-paris-sud.html">
           La vie étudiante à Paris-Sud
          </a>
         </li>
         <li class="nav-overlay_child">
          [ahref]
          
         </li>
         <li class="nav-overlay_child">
          [ahref]
          
         </li>
         <li class="nav-overlay_child">
          [linkx]
          
         </li>
         <li class="nav-overlay_child">
          [ahref]
          
         </li>
         <li class="nav-overlay_child">
          [linkx]
          
         </li>
         <li class="nav-overlay_child">
          <a class="nav-overlay_link" href="/fr/vie-etudiante/culture.html">
           Culture
          </a>
         </li>
         <li class="nav-overlay_child">
          [ahref]
          
         </li>
         <li class="nav-overlay_child">
          [linkx]
          
         </li>
         <li class="nav-overlay_child">
          [ahref]
          
         </li>
         <li class="nav-overlay_child">
          <a class="nav-overlay_link" href="/fr/vie-etudiante/bu.html">
           Bibliothèques
          </a>
         </li>
         <li class="nav-overlay_child">
          [ahref]
          
         </li>
         <li class="nav-overlay_child">
          [ahref]
          
         </li>
        </ul>
       </div>
       <div class="nav-overlay_item" id="nav-overlay-5">
        <a class="nav-overlay_highlight">
         <div class="nav-overlay_highlight_title">
          International
         </div>
         <div class="nav-overlay_highlight_picture">
          [area1][mkey1]<li>[ahref]</li><li>[area1][keywordx]</li>
         </div>
        </a>
        <ul class="nav-overlay_children">
         <li class="nav-overlay_child">
          <a class="nav-overlay_link" href="/fr/international/politique-internationale.html">
           Politique Internationale
          </a>
         </li>
         <li class="nav-overlay_child">
          [ahref]
          
         </li>
         <li class="nav-overlay_child">
          [linkx]
          
         </li>
         <li class="nav-overlay_child">
          [ahref]
          
         </li>
         <li class="nav-overlay_child">
          [linkx]
          
         </li>
         <li class="nav-overlay_child">
          [linkx]
          
         </li>
         <li class="nav-overlay_child">
          [linkx]
          
         </li>
         <li class="nav-overlay_child">
          <a class="nav-overlay_link" href="/fr/international/organisation.html">
           Organisation et contacts
          </a>
         </li>
        </ul>
       </div>
       <div class="nav-overlay_item" id="nav-overlay-6">
        [linkx]
        
        <ul class="nav-overlay_children">
         <li class="nav-overlay_child">
          <a class="nav-overlay_link" href="/fr/science-et-societe/actions-et-projets-en-cours.html">
           Politique d'établissement
          </a>
         </li>
         <li class="nav-overlay_child">
          [linkx]
          
         </li>
         <li class="nav-overlay_child">
          [ahref]
          
         </li>
         <li class="nav-overlay_child">
          <a class="nav-overlay_link" href="/fr/science-et-societe/acteurs-et-partenaires.html">
           Acteurs et partenaires
          </a>
         </li>
        </ul>
       </div>
      </div>
     </div>
    </div>
    <div class="l-minimap-wrapper" id="minimap-wrapper">
     <div class="l-container">
      <div class="minimap">
       <div class="tool tool--minimap">
        [linkx]
        
        <div class="tool_content">
         <p>
          <a href="/_resources/Plancampus2013.pdf">
           Télécharger le plan (2Mo-PDF)
          </a>
         </p>
        </div>
       </div>
      </div>
     </div>
    </div>
    <div class="l-shortcut-wrapper" id="shortcut-wrapper">
     <div class="shortcut" id="shortcut">
      <div class="dropdown menu-composantes">
       <label class="dropdown_trigger" for="menu-composantes-content-52cdf379563bb">
        <i class="icon-dropdown">
        </i>
        <span>
         Accès direct
        </span>
       </label>
       <ul class="dropdown_list">
        <li>
         [ahref]
         
        </li>
        <li>
         <a href="/fr/index.html">
          UFR Sciences
         </a>
        </li>
        <li>
         <a href="/fr/index.html">
          UFR Droit Economie Gestion<li>[linkx]</li>[area1][keywordx][symbolx][area1][keywordx][symbolx][bracketl2][area1][keywordx][bracketr2][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx]<li>[pkeyx]</li>
         </a>
        </li>
        <li>
         <a href="/fr/index.html">
          UFR Médecine
         </a>
        </li>
        <li>
         [linkx]
         
        </li>
        <li>
         <a href="/fr/index.html">
          UFR STAPS
         </a>
        </li>
        <li>
         [ahref]
         
        </li>
        <li>
         [ahref]
         
        </li>
        <li>
         <a href="/fr/index.html">
          IUT Orsay
         </a>
        </li>
        <li>
         [linkx]
         
        </li>
       </ul>
      </div>
      <ul class="shortcut-list" id="shortcut-list">
       <li class="shortcut-list_item">
        <a class="shortcut-list_link" href="/" title="Intranet">
         <i class="icon-info">
         </i>
         <span>
          Intranet
         </span>
        </a>
       </li>
       <li class="shortcut-list_item">
        [linkx]
        
       </li>
       <li class="shortcut-list_item">
        [linkx]
        
       </li>
       <li class="shortcut-list_item">
        <a class="shortcut-list_link" href="/fr/formations/diplomes.html" title="Formations">
         <i class="icon-users">
         </i>
         <span>
          Formations
         </span>
        </a>
       </li>
      </ul>
     </div>
    </div>
    <div class="l-hero-wrapper">
     <div class="l-container">
      <div class="hero">
       <div class="hero_item hero_item--1 hero_item--mobile">
        <div class="hero_content">
         <a class="c2a-link" href="/fr/agenda.html" title="Agenda des évènements">
          <div class="c2a-link_text">
           <i class="c2a-link_icon icon-calendar">
           </i>
           <em>
            Agenda
           </em>
           <span>
            des évènements
           </span>
          </div>
         </a>
        </div>
       </div>
       <div class="hero_item hero_item--1 hero_item--mobile">
        <div class="hero_content">
         [ahref]
         
        </div>
        <div class="hero_offcontent">
         <div class="tool tool--annuaire">
          <a class="tool_title" href="#">
           <i class="icon-notebook">
           </i>
           <strong>
            Annuaire
           </strong>
          </a>
          <div class="tool_content">
           <form action="/pages-blanches/personnel.php?todo=search" class="form" id="annuaire-form-52d81c5816b50" method="post" role="form">
            <div class="form_group form_group--is-required">
             <label class="form_label" for="annuaire-form-52d81c5816b50-search">
              Saisissez un nom et/ou un prénom
             </label>
             <div class="form_controls">
             </div>
            </div>
            <div class="form_actions">
             <button class="btn btn--primary btn--small" type="submit">
              Rechercher
             </button>
            </div>
           </form>
          </div>
         </div>
        </div>
       </div>
       <div class="hero_item hero_item--1">
        <div class="hero_content">
         [linkx]
         
        </div>
       </div>
       <div class="hero_item hero_item--2">
        <div class="hero_content">
         <div class="profile-list">
          <div class="profile-list_title">
           Vous êtes...
          </div>
          <div class="profile-list_list">
           [linkx]
           
           [linkx]
           
           <a class="profile-list_link profile-list_link--staff" href="/fr/personnel.html">
            <i class="icon-profile">
            </i>
            <em>
             Personnel
            </em>
            <span>
             de l'Université
            </span>
           </a>
           [ahref]
           
           [linkx]
           
          </div>
         </div>
        </div>
       </div>
       <div class="hero_item hero_item--3">
        <div class="hero_content">
         <div class="carrousel">
          <div id="ametys-cms-zone-default">
           <div class="first last" id="ametys-cms-zone-default-item-N10059">
            <div class="ametys-cms-service filtered-contents filtered-contents-abstract feature-list-contents wrapper">
             <div class="carrousel_slides">
              <a class="carrousel_slide current" href="/fr/etablissement/actualites-2019/le-laboratoire-de-physique-des-solides-fait-peau-neuve.html" target="_blank">
              </a>
              [linkx]
              
              <a class="carrousel_slide next" href="/fr/formations/actualites-2019/generation-2024-une-etudiante-de-paris-sud-a-olympie.html" target="_blank">
              </a>
             </div>
             <div class="carrousel_controls">
              <a class="prev" href="#">
               <i class="icon-arrow-left">
               </i>
              </a>
              <a class="next" href="#" id="next" name="next">
               <i class="icon-arrow-right">
               </i>
              </a>
             </div>
             <div class="carrousel_captions">
              [ahref]
              
              <a class="carrousel_caption " href="/fr/formations/actualites-2019/la-fete-de-la-musique-c-est-le-21-juin-en-france-mais-c-est-toute-l-annee-au-cfmi.html" target="_blank">
               <div class="carrousel_caption_title">
                Formations
               </div>
               <div class="carrousel_caption_text">
                La fête de la musique c’est le 21 juin en France mais c’est toute l’année au CFMI
               </div>
               <span class="btn btn--primary">
                Lire la suite
               </span>
              </a>
              [ahref]
              
             </div>
             <div class="carrousel_pager">
              [ahref]
              
              <a class="" href="#">
               2
              </a>
              [linkx]
              
             </div>
            </div>
           </div>
          </div>
         </div>
        </div>
       </div>
      </div>
     </div>
    </div>
    <div class="l-main-wrapper l-main-wrapper--with-sidebar-second">
     <div class="l-container">
      <div class="l-main-grid">
       <div class="l-main" id="main-content" role="main">
        <div id="ametys-cms-zone-zone-1">
         <div class="first last" id="ametys-cms-zone-zone-1-item-N10319">
          <div class="ametys-cms-service filtered-contents filtered-contents-abstract feature-list-contents wrapper">
           <ul class="push-list" id="featureListOutput-3680101717717865">
            <li class="push-list_item ">
             [linkx]
             
            </li>
            <li class="push-list_item ">
             [ahref]
             
            </li>
            <li class="push-list_item ">
             <a class="push push--article has-tag-student" href="/fr/vie-etudiante/vie-pratique/cesure-universitaire.html">
              <div class="push_picture">
              </div>
              <div class="push_content">
               <div class="push_heading">
                <div class="push_title">
                 La césure à l'Université Paris-Sud : mode d'emploi
                </div>
               </div>
               <div class="push_footer">
                <i class="icon-record">
                </i>
                <span class="push_tag">
                 Vie étudiante
                </span>
               </div>
              </div>
             </a>
            </li>
            <li class="push-list_item ">
             <a class="push push--article has-tag-press" href="/fr/etablissement/actualites-2019/une-convention-de-mecenat-avec-air-liquide-pour-la-chaire-la-physique-autrement.html" target="_blank">
              <div class="push_picture">
              </div>
              <div class="push_content">
               <div class="push_heading">
                <div class="push_title">
                 Une convention de mécénat avec Air Liquide pour la chaire "La Physique autrement"
                </div>
               </div>
               <div class="push_footer">
                <i class="icon-record">
                </i>
                <span class="push_tag">
                 Actualités
                </span>
               </div>
              </div>
             </a>
            </li>
            <li class="push-list_item ">
             [linkx]
             
            </li>
            <li class="push-list_item ">
             [linkx]
             
            </li>
            <li class="push-list_item ">
             [linkx]
             
            </li>
            <li class="push-list_item ">
             [ahref]
             
            </li>
            <li class="push-list_item ">
             <a class="push push--article has-tag-student" href="/fr/vie-etudiante/vie-pratique/dates-de-rentree.html">
              <div class="push_picture">
              </div>
              <div class="push_content">
               <div class="push_heading">
                <div class="push_title">
                 Calendrier universitaire 2019-2020
                </div>
               </div>
               <div class="push_footer">
                <i class="icon-record">
                </i>
                <span class="push_tag">
                 Vie étudiante
                </span>
               </div>
              </div>
             </a>
            </li>
            <li class="push-list_item ">
             [linkx]
             
            </li>
            <li class="push-list_item ">
             <a class="push push--article has-tag-component" href="/fr/recherche/ecoles-doctorales/contrat-doctoral/recrutement-activites-hors-recherche.html">
              <div class="push_picture">
              </div>
              <div class="push_content">
               <div class="push_heading">
                <div class="push_title">
                 Recrutement de doctorants - Activités hors recherche
                </div>
               </div>
               <div class="push_footer">
                <i class="icon-record">
                </i>
                <span class="push_tag">
                 Recherche
                </span>
               </div>
              </div>
             </a>
            </li>
           </ul>
          </div>
         </div>
        </div>
        <div class="push-more">
         <hr/>
         [linkx]
         
        </div>
        <div class="article article--summary">
         <div class="article_picture">
          [linkx]
          
         </div>
         <div class="article_content">
          <div class="article_title">
           [ahref]
           
          </div>
          <div class="article_text">
           [ahref]
           
          </div>
          <div class="article_footer">
           <a class="article--highlight" href="/?s=pano42">
            <span class="btn--highlight btn btn--primary btn--small">
             Version PC
            </span>
           </a>
           [ahref]
           
           [linkx]
           
          </div>
         </div>
        </div>
       </div>
       <div class="l-sidebar l-sidebar--right">
        <div class="tools">
         <p>
         </p>
         <div class="tool">
          <div class="tool_content">
           [ahref]
           
          </div>
         </div>
         <div class="tool tool--agenda">
          <div id="ametys-cms-zone-agenda">
           <div class="first last" id="ametys-cms-zone-agenda-item-N10491">
            <div class="tool_title">
             <i class="icon-calendar">
             </i>
             <strong>
              Agenda
             </strong>
            </div>
            <div class="tool_content">
             <div class="agenda">
              <div class="calendar">
              </div>
              <div class="agenda_date" data-date="2019-04-01">
               <div class="agenda_date_title">
                01 avril 2019
                [ahref]
                
               </div>
               <ul class="agenda_event-list">
                <li class="agenda_event-item">
                 [linkx]
                 
                </li>
               </ul>
              </div>
              <div class="agenda_date" data-date="2019-04-02">
               <div class="agenda_date_title">
                02 avril 2019
                <a class="agenda_date_close" href="0">
                 <i class="icon-delete">
                 </i>
                </a>
               </div>
               <ul class="agenda_event-list">
                <li class="agenda_event-item">
                 <a class="agenda_event" data-end-time="2019-04-02" data-start-time="2019-04-02" href="/fr/agenda/evenements-2019/concert-de-printemps.html">
                  <div class="agenda_event_title">
                   Concert de printemps
                  </div>
                 </a>
                </li>
                <li class="agenda_event-item">
                 [linkx]
                 
                </li>
               </ul>
              </div>
              <div class="agenda_date" data-date="2019-04-03">
               <div class="agenda_date_title">
                03 avril 2019
                [ahref]
                
               </div>
               <ul class="agenda_event-list">
                <li class="agenda_event-item">
                 <a class="agenda_event" data-end-time="2019-04-03" data-start-time="2019-04-03" href="/fr/agenda/evenements-2019/jaces-2019.html">
                  <div class="agenda_event_picture">
                  </div>
                  <div class="agenda_event_title">
                   JOURNÉES DES ARTS ET DE LA CULTURE DANS L'ENSEIGNEMENT SUPÉRIEUR (JACES)
                  </div>
                 </a>
                </li>
               </ul>
              </div>
              <div class="agenda_date" data-date="2019-04-04">
               <div class="agenda_date_title">
                04 avril 2019
                <a class="agenda_date_close" href="0">
                 <i class="icon-delete">
                 </i>
                </a>
               </div>
               <ul class="agenda_event-list">
                <li class="agenda_event-item">
                 [ahref]
                 
                </li>
               </ul>
              </div>
              <div class="agenda_date" data-date="2019-04-05">
               <div class="agenda_date_title">
                05 avril 2019
                [linkx]
                
               </div>
               <ul class="agenda_event-list">
                <li class="agenda_event-item">
                 [linkx]
                 
                </li>
                <li class="agenda_event-item">
                 [ahref]
                 
                </li>
               </ul>
              </div>
              <div class="agenda_date" data-date="2019-04-06">
               <div class="agenda_date_title">
                06 avril 2019
                <a class="agenda_date_close" href="0">
                 <i class="icon-delete">
                 </i>
                </a>
               </div>
               <ul class="agenda_event-list">
                <li class="agenda_event-item">
                 <a class="agenda_event" data-end-time="2019-04-06" data-start-time="2019-04-06" href="/fr/agenda/evenements-2019/portes-ouvertes-du-centre-de-formation-des-musiciens-intervenants-d-orsay.html">
                  <div class="agenda_event_title">
                   Portes ouvertes du CFMI Ile-de-France
                  </div>
                 </a>
                </li>
               </ul>
              </div>
              <div class="agenda_date" data-date="2019-04-12">
               <div class="agenda_date_title">
                12 avril 2019
                [linkx]
                
               </div>
               <ul class="agenda_event-list">
                <li class="agenda_event-item">
                 <a class="agenda_event" data-end-time="2019-04-12" data-start-time="2019-04-12" href="/fr/formations/orientation-et-insertion-professionnelle/ateliers-orientation-et-insertion-professionnelle/matinales-de-l-insertion-professionnelle.html">
                  <div class="agenda_event_title">
                   Atelier 2 - Réussir sa lettre de motivation
                  </div>
                 </a>
                </li>
                <li class="agenda_event-item">
                 [ahref]
                 
                </li>
               </ul>
              </div>
              <div class="agenda_date" data-date="2019-04-14">
               <div class="agenda_date_title">
                14 avril 2019
                [linkx]
                
               </div>
               <ul class="agenda_event-list">
                <li class="agenda_event-item">
                 <a class="agenda_event" data-end-time="2019-04-14" data-start-time="2019-04-14" href="/fr/agenda/evenements-2019/concert-de-l-atelier-chorale-achor.html">
                  <div class="agenda_event_title">
                   Concert de l'Atelier Chorale ACHOR
                  </div>
                 </a>
                </li>
               </ul>
              </div>
              <div class="agenda_date" data-date="2019-04-15">
               <div class="agenda_date_title">
                15 avril 2019
                [ahref]
                
               </div>
               <ul class="agenda_event-list">
                <li class="agenda_event-item">
                 [linkx]
                 
                </li>
               </ul>
              </div>
              <div class="agenda_date" data-date="2019-04-16">
               <div class="agenda_date_title">
                16 avril 2019
                [linkx]
                
               </div>
               <ul class="agenda_event-list">
                <li class="agenda_event-item">
                 <a class="agenda_event" data-end-time="2019-04-16" data-start-time="2019-04-16" href="/fr/agenda/evenements-2019/semaine-du-developpement-durable.html">
                  [area1][keywordx][symbolx][area1][keywordx][symbolx][bracketl14][area1][keywordx][bracketr14][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][ahref][linkx][area1][mkey1][area1][mkey1][linkx][area1][keywordx][symbolx][area1][keywordx][symbolx][bracketl15][area1][keywordx][bracketr15][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][linkx][ahref][pkeyx][ahref][linkx][linkx][area1][mkey1][pkeyx][ahref][ahref][area1][keywordx]
                 </a>
                </li>
               </ul>
              </div>
              <div class="agenda_date" data-date="2019-04-17">
               <div class="agenda_date_title">
                17 avril 2019
                [linkx]
                
               </div>
               <ul class="agenda_event-list">
                <li class="agenda_event-item">
                 [linkx]
                 
                </li>
               </ul>
              </div>
              <div class="agenda_date" data-date="2019-04-18">
               <div class="agenda_date_title">
                18 avril 2019
                [linkx]
                
               </div>
               <ul class="agenda_event-list">
                <li class="agenda_event-item">
                 <a class="agenda_event" data-end-time="2019-04-18" data-start-time="2019-04-18" href="/fr/formations/orientation-et-insertion-professionnelle/evenements/les-rendez-vous-de-l-emploi-2019.html">
                  <div class="agenda_event_picture">
                  </div>
                  <div class="agenda_event_title">
                   Les rendez-vous de l'emploi 2019
                  </div>
                 </a>
                </li>
                <li class="agenda_event-item">
                 <a class="agenda_event" data-end-time="2019-04-18" data-start-time="2019-04-18" href="/fr/agenda/evenements-2019/semaine-du-developpement-durable.html">
                  <div class="agenda_event_picture">
                  </div>
                  <div class="agenda_event_title">
                   Semaine du développement soutenable
                  </div>
                  <div class="agenda_event_schedule">
                   <i class="icon-time">
                   </i>
                   L’Université Paris-Sud organise une semaine du développement durable du lundi 15 avril au vendredi 19 avril 2019. Retrouvez tous les événements prévus sur les campus.
                  </div>
                 </a>
                </li>
               </ul>
              </div>
              <div class="agenda_date" data-date="2019-04-19">
               <div class="agenda_date_title">
                19 avril 2019
                [ahref]
                
               </div>
               <ul class="agenda_event-list">
                <li class="agenda_event-item">
                 [linkx]
                 
                </li>
               </ul>
              </div>
              <div class="agenda_date" data-date="2019-05-14">
               <div class="agenda_date_title">
                14 mai 2019
                <a class="agenda_date_close" href="0">
                 <i class="icon-delete">
                 </i>
                </a>
               </div>
               <ul class="agenda_event-list">
                <li class="agenda_event-item">
                 <a class="agenda_event" data-end-time="2019-05-14" data-start-time="2019-05-14" href="/fr/formations/vae/reunions-d-informations.html">
                  <div class="agenda_event_title">
                   Réunion d'information sur la Validation des Acquis
                  </div>
                 </a>
                </li>
               </ul>
              </div>
              <div class="agenda_date" data-date="2019-05-16">
               <div class="agenda_date_title">
                16 mai 2019
                [ahref]
                
               </div>
               <ul class="agenda_event-list">
                <li class="agenda_event-item">
                 <a class="agenda_event" data-end-time="2019-05-16" data-start-time="2019-05-16" href="/fr/agenda/evenements-2019/viva-technology.html">
                  <div class="agenda_event_picture">
                  </div>
                  <div class="agenda_event_title">
                   Viva Technology
                  </div>
                 </a>
                </li>
                <li class="agenda_event-item">
                 <a class="agenda_event" data-end-time="2019-05-16" data-start-time="2019-05-16" href="/fr/agenda/evenements-2019/e-edition-du-basket-trophee-paris-saclay.html">
                  <div class="agenda_event_title">
                   5e édition du Basket Trophée Paris-Saclay
                  </div>
                 </a>
                </li>
               </ul>
              </div>
              <div class="agenda_date" data-date="2019-05-17">
               <div class="agenda_date_title">
                17 mai 2019
                [ahref]
                
               </div>
               <ul class="agenda_event-list">
                <li class="agenda_event-item">
                 [ahref]
                  <li>[area1][mkey1]</li>[pkeyx][pkeyx][ahref]<li>[linkx]</li>
                 
                </li>
               </ul>
              </div>
              <div class="agenda_date" data-date="2019-05-18">
               <div class="agenda_date_title">
                18 mai 2019
                <a class="agenda_date_close" href="0">
                 <i class="icon-delete">
                 </i>
                </a>
               </div>
               <ul class="agenda_event-list">
                <li class="agenda_event-item">
                 <a class="agenda_event" data-end-time="2019-05-18" data-start-time="2019-05-18" href="/fr/agenda/evenements-2019/viva-technology.html">
                  <div class="agenda_event_picture">
                  </div>
                  <div class="agenda_event_title">
                   Viva Technology
                  </div>
                 </a>
                </li>
               </ul>
              </div>
              <div class="agenda_date" data-date="2019-05-20">
               <div class="agenda_date_title">
                20 mai 2019
                <a class="agenda_date_close" href="0">
                 <i class="icon-delete">
                 </i>
                </a>
               </div>
               <ul class="agenda_event-list">
                <li class="agenda_event-item">
                 [linkx]
                 
                </li>
               </ul>
              </div>
              <div class="agenda_date" data-date="2019-05-21">
               <div class="agenda_date_title">
                21 mai 2019
                <a class="agenda_date_close" href="0">
                 <i class="icon-delete">
                 </i>
                </a>
               </div>
               <ul class="agenda_event-list">
                <li class="agenda_event-item">
                 <a class="agenda_event" data-end-time="2019-05-21" data-start-time="2019-05-21" href="/fr/agenda/evenements-2019/pint-of-science.html">
                  <div class="agenda_event_title">
                   Pint of Science
                  </div>
                 </a>
                </li>
               </ul>
              </div>
              <div class="agenda_date" data-date="2019-05-22">
               <div class="agenda_date_title">
                22 mai 2019
                [ahref]
                
               </div>
               <ul class="agenda_event-list">
                <li class="agenda_event-item">
                 [linkx]
                 
                </li>
               </ul>
              </div>
              <div class="agenda_date" data-date="2019-05-23">
               <div class="agenda_date_title">
                23 mai 2019
                [ahref]
                
               </div>
               <ul class="agenda_event-list">
                <li class="agenda_event-item">
                 [ahref]
                 
                </li>
               </ul>
              </div>
              <div class="agenda_date" data-date="2019-05-24">
               <div class="agenda_date_title">
                24 mai 2019
                <a class="agenda_date_close" href="0">
                 <i class="icon-delete">
                 </i>
                </a>
               </div>
               <ul class="agenda_event-list">
                <li class="agenda_event-item">
                 [ahref]
                 
                </li>
                <li class="agenda_event-item">
                 [linkx]
                 
                </li>
               </ul>
              </div>
              <div class="agenda_date" data-date="2019-06-04">
               <div class="agenda_date_title">
                04 juin 2019
                <a class="agenda_date_close" href="0">
                 <i class="icon-delete">
                 </i>
                </a>
               </div>
               <ul class="agenda_event-list">
                <li class="agenda_event-item">
                 <a class="agenda_event" data-end-time="2019-06-04" data-start-time="2019-06-04" href="/fr/agenda/evenements-2019/festival-de-robotique-de-cachan.html">
                  <div class="agenda_event_picture">
                  </div>
                  <div class="agenda_event_title">
                   Festival de robotique de Cachan
                  </div>
                 </a>
                </li>
               </ul>
              </div>
              <div class="agenda_date" data-date="2019-06-05">
               <div class="agenda_date_title">
                05 juin 2019
                <a class="agenda_date_close" href="0">
                 <i class="icon-delete">
                 </i>
                </a>
               </div>
               <ul class="agenda_event-list">
                <li class="agenda_event-item">
                 [ahref]
                 
                </li>
               </ul>
              </div>
              <div class="agenda_date" data-date="2019-06-06">
               <div class="agenda_date_title">
                06 juin 2019
                [ahref]
                
               </div>
               <ul class="agenda_event-list">
                <li class="agenda_event-item">
                 <a class="agenda_event" data-end-time="2019-06-06" data-start-time="2019-06-06" href="/fr/agenda/evenements-2019/festival-de-robotique-de-cachan.html">
                  <div class="agenda_event_picture">
                  </div>
                  <div class="agenda_event_title">
                   Festival de robotique de Cachan
                  </div>
                 </a>
                </li>
               </ul>
              </div>
              <div class="agenda_date" data-date="2019-06-07">
               <div class="agenda_date_title">
                07 juin 2019
                <[area1][keywordx]>
                </[area1][keywordx]>
               </div>
               <ul class="agenda_event-list">
                <li class="agenda_event-item">
                 [ahref]
                 
                </li>
               </ul>
              </div>
              <div class="agenda_date" data-date="2019-06-08">
               <div class="agenda_date_title">
                08 juin 2019
                [ahref]
                
               </div>
               <ul class="agenda_event-list">
                <li class="agenda_event-item">
                 [linkx]
                 
                </li>
               </ul>
              </div>
              <div class="agenda_date" data-date="2019-06-09">
               <div class="agenda_date_title">
                09 juin 2019
                [linkx]
                
               </div>
               <ul class="agenda_event-list">
                <li class="agenda_event-item">
                 [ahref]
                 
                </li>
               </ul>
              </div>
              <div class="agenda_date" data-date="2019-06-19">
               <div class="agenda_date_title">
                19 juin 2019
                <a class="agenda_date_close" href="0">
                 <i class="icon-delete">
                 </i>
                </a>
               </div>
               <ul class="agenda_event-list">
                <li class="agenda_event-item">
                 [linkx]
                 
                </li>
               </ul>
              </div>
              <div class="agenda_date" data-date="2019-06-21">
               <div class="agenda_date_title">
                21 juin 2019
                [linkx]
                
               </div>
               <ul class="agenda_event-list">
                <li class="agenda_event-item">
                 <a class="agenda_event" data-end-time="2019-06-21" data-start-time="2019-06-21" href="/fr/formations/orientation-et-insertion-professionnelle/ateliers-orientation-et-insertion-professionnelle/permanences-apec.html">
                  <div class="agenda_event_title">
                   Permanences APEC
                  </div>
                 </a>
                </li>
               </ul>
              </div>
              <div class="agenda_date" data-date="2019-06-26">
               <div class="agenda_date_title">
                26 juin 2019
                [ahref]
                
               </div>
               <ul class="agenda_event-list">
                <li class="agenda_event-item">
                 <a class="agenda_event" data-end-time="2019-06-26" data-start-time="2019-06-26" href="/fr/agenda/evenements-2019/meet-my-platform.html">
                  <div class="agenda_event_title">
                   Meet my platform
                  </div>
                 </a>
                </li>
               </ul>
              </div>
              <div class="agenda_date" data-date="2019-07-04">
               <div class="agenda_date_title">
                04 juillet 2019
                <a class="agenda_date_close" href="0">
                 <i class="icon-delete">
                 </i>
                </a>
               </div>
               <ul class="agenda_event-list">
                <li class="agenda_event-item">
                 <a class="agenda_event" data-end-time="2019-07-04" data-start-time="2019-07-04" href="/fr/agenda/evenements-2019/fete-des-personnels-de-l-universite.html">
                  <div class="agenda_event_title">
                   Fête des personnels de l'université
                  </div>
                 </a>
                </li>
               </ul>
              </div>
             </div>
            </div>
           </div>
          </div>
         </div>
         <div class="tool tool--graduate">
          <a class="tool_title" href="/fr/formations/diplomes.html">
           <i class="icon-graduate">
           </i>
           <strong>
            Nos formations
           </strong>
          </a>
          <div class="tool_content">
           <form action="/fr/formations/disciplines.html" class="form" id="graduate-form" method="post" role="form">
            <div class="form_group form_group--is-required">
             <label class="form_label" for="graduate-form-discipline">
              Par domaine
             </label>
             <div class="form_controls">
              <select class="form_field form_field--block" id="graduate-form-discipline" name="discipline">
               <option value="chimie">
                Chimie
               </option>
               <option value="informatique">
                Informatique
               </option>
               <option value="physique">
                Physique
               </option>
               <option value="mathematique">
                Mathématique
               </option>
               <option value="biologie">
                Biologie
               </option>
               <option value="sante">
                Santé (Pharmacie, Médecine)
               </option>
               <option value="environnement-et-energie">
                Environnement
               </option>
               <option value="environnement-et-energie">
                Energie
               </option>
               <option value="environnement">
                Sciences de la Terre
               </option>
               <option value="electronique-mecanique">
                Electronique
               </option>
               <option value="electronique-mecanique">
                Mécanique
               </option>
               <option value="droit-economie-gestion">
                Gestion
               </option>
               <option value="droit-economie-gestion">
                Economie
               </option>
               <option value="droit">
                Droit
               </option>
               <option value="droit-economie-gestion">
                Marketing
               </option>
               <option value="droit-economie-gestion">
                Ressources humaines
               </option>
               <option value="metiers-de-l-enseignement">
                Métiers de l'enseignement
               </option>
               <option value="sport">
                Sport et activités physiques
               </option>
              </select>
             </div>
            </div>
            <div class="form_actions">
             <button class="btn btn--primary btn--small" type="submit">
              Rechercher une formation
             </button>
            </div>
           </form>
           <form action="/fr/formations/diplomes.html" class="form" id="graduate-form" method="post" role="form">
            <div class="form_group form_group--is-required">
             <label class="form_label" for="graduate-form-diplome">
              Par diplôme
             </label>
             <div class="form_controls">
              <select class="form_field form_field--block" id="graduate-form-diplome" name="diplome">
               <option value="dut">
                DUT
               </option>
               <option value="deust">
                DEUST
               </option>
               <option selected="selected" value="licences">
                Licences
               </option>
               <option value="licences-professionnelles">
                Licences professionnelles
               </option>
               <option value="masters">
                Masters
               </option>
               <option value="magisteres">
                Magisteres
               </option>
               <option value="ingenieurs">
                Diplômes d'ingénieurs
               </option>
               <option value="doctorats">
                Doctorats
               </option>
               <option value="du">
                DU
               </option>
               <option value="c2i">
                C2i
               </option>
              </select>
             </div>
            </div>
            <div class="form_actions">
             <button class="btn btn--primary btn--small" type="submit">
              Rechercher une formation
             </button>
            </div>
           </form>
          </div>
         </div>
         <div class="tool tool--boutique">
          <div class="tool_content">
           <a class="c2a-link" href="/universite-paris-sud/" title="La boutique Paris-Sud">
            <div class="c2a-link_picture">
            </div>
            <div class="c2a-link_text">
             <em>
              Vêtements, accessoires...
             </em>
             <p>
              Sweats, t-shirts, tote bags, mugs... aux couleurs de l’Université Paris-Sud
             </p>
            </div>
           </a>
          </div>
         </div>
        </div>
       </div>
      </div>
     </div>
    </div>
    <div class="l-pre-footer-wrapper">
     <div class="l-container">
      <div class="pre-footer">
       <div class="social">
        <span class="social_text">
         Retrouvez nous sur :
        </span>
        <a class="social_link social_link--facebook" href="/UnivParisSud" title="Facebook">
         <i class="icon-facebook">
         </i>
        </a>
        <a class="social_link social_link--twitter" href="/u_psud" title="Twitter">
         <i class="icon-twitter">
         </i>
        </a>
        [linkx]
        
        <a class="social_link social_link--rss" href="/fr/flux-rss.html" target="_blank" title="Flux RSS">
         <i class="icon-social-rss">
         </i>
        </a>
       </div>
       <div class="newsletter">
        <form action="/fr/abonnement-newsletter.html" class="form newsletter_form" id="pre-footer-newsletter-form" method="post">
         <div class="form_group form_group--inline">
          <label class="label newsletter_label" for="pre-footer-newsletter-email">
           S'abonner à la newsletter
          </label>
          <div class="form_controls_suffix">
           <button class="form_field form_submit" type="submit">
            OK
           </button>
          </div>
          <div class="form_controls form_controls--suffixed">
          </div>
         </div>
        </form>
       </div>
      </div>
     </div>
    </div>
    <div class="l-footer-wrapper">
     <div class="l-container">
      <div class="footer">
       <div class="footer-sponsoring">
        <div class="footer-sponsor footer-sponsor--upsud">
         [ahref]
         
         <p class="footer-sponsor_text">
          Siège et Présidence Bât. 300 - 91405 Orsay cedex  I  FRANCE
          <br/>
          Tél. : +33 1 69 15 67 50
          <br/>
          Accès : RER B Orsay-Ville
         </p>
        </div>
        <div class="footer-sponsor footer-sponsor--gen2024">
         [linkx]
         
        </div>
        <div class="footer-sponsor footer-sponsor--leru">
         <a class="footer-sponsor_logo" href="/" title="LERU">
         </a>
        </div>
        <div class="footer-sponsor footer-sponsor--saclay">
         [linkx]
         
        </div>
        <div class="footer-sponsor footer-sponsor--fondation">
         [linkx]
         
        </div>
       </div>
       <ul class="footer-map">
        <li class="footer-map_item footer-map_item--i1">
         <a class="footer-map_title">
          Université
         </a>
         <ul class="footer-map_children">
          <li class="footer-map_child">
           <a class="footer-map_link" href="/fr/universite/presentation-de-l-universite.html">
            Présentation de l'université
           </a>
          </li>
          <li class="footer-map_child">
           [linkx]
           
          </li>
          <li class="footer-map_child">
           [ahref]
           
          </li>
          <li class="footer-map_child">
           [linkx]
           
          </li>
          <li class="footer-map_child">
           [ahref]
           
          </li>
          <li class="footer-map_child">
           [ahref]
           
          </li>
          <li class="footer-map_child">
           <a class="footer-map_link" href="/fr/universite/prix.html">
            Prix et Distinctions
           </a>
          </li>
          <li class="footer-map_child">
           <a class="footer-map_link" href="/fr/universite/chiffres-cles.html">
            Chiffres clés
           </a>
          </li>
          <li class="footer-map_child">
           [linkx]
           
          </li>
          <li class="footer-map_child">
           <a class="footer-map_link" href="/fr/universite/le-jardin-botanique.html">
            Le jardin botanique
           </a>
          </li>
          <li class="footer-map_child">
           [linkx]
           
          </li>
          <li class="footer-map_child">
           [ahref]
           
          </li>
          <li class="footer-map_child">
           <a class="footer-map_link" href="/fr/universite/actes-administratifs.html">
            Actes administratifs
           </a>
          </li>
         </ul>
        </li>
        <li class="footer-map_item footer-map_item--i2">
         <a class="footer-map_title">
          Recherche
         </a>
         <ul class="footer-map_children">
          <li class="footer-map_child">
           [area1][keywordx][symbolx][area1][keywordx][symbolx][bracketl16][area1][keywordx][bracketr16][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][mkey1][area1][keywordx][symbolx][area1][keywordx][symbolx][bracketl17][area1][keywordx][bracketr17][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx]<li>[area1][keywordx]</li>[pkeyx]
          </li>
          <li class="footer-map_child">
           [ahref]
           
          </li>
          <li class="footer-map_child">
           <a class="footer-map_link" href="/fr/recherche/habilitation-a-diriger-les-recherches.html">
            HDR
           </a>
          </li>
          <li class="footer-map_child">
           <a class="footer-map_link" href="/fr/recherche/laboratoires.html">
            Laboratoires
           </a>
          </li>
          <li class="footer-map_child">
           <a class="footer-map_link" href="/fr/recherche/plateformes-technologiques.html">
            Plateformes Technologiques
           </a>
          </li>
          <li class="footer-map_child">
           <a class="footer-map_link" href="/fr/recherche/investissements-d-avenir.html">
            Investissements d'avenir
           </a>
          </li>
          <li class="footer-map_child">
           [ahref]
           
          </li>
          <li class="footer-map_child">
           <a class="footer-map_link" href="/fr/recherche/valorisation.html">
            Valorisation/Innovation
           </a>
          </li>
          <li class="footer-map_child">
           [linkx]
           
          </li>
          <li class="footer-map_child">
           [linkx]
           
          </li>
          <li class="footer-map_child">
           [ahref]
           
          </li>
         </ul>
        </li>
        <li class="footer-map_item footer-map_item--i3">
         <a class="footer-map_title">
          Formations
         </a>
         <ul class="footer-map_children">
          <li class="footer-map_child">
           [ahref]
           
          </li>
          <li class="footer-map_child">
           <a class="footer-map_link" href="/fr/formations/disciplines.html">
            Disciplines
           </a>
          </li>
          <li class="footer-map_child">
           <a class="footer-map_link" href="/fr/formations/diplomes.html">
            Diplômes et préparation aux concours
           </a>
          </li>
          <li class="footer-map_child">
           [linkx]
           
          </li>
          <li class="footer-map_child">
           <a class="footer-map_link" href="/fr/formations/enseignement-des-langues.html">
            Enseignement des langues
           </a>
          </li>
          <li class="footer-map_child">
           [ahref]
           
          </li>
          <li class="footer-map_child">
           Formation Continue<li>[area1][keywordx]</li><li>[linkx]</li><li>[ahref]</li><li>[area1][mkey1]</li>
          </li>
          <li class="footer-map_child">
           <a class="footer-map_link" href="/fr/formations/vae.html">
            VAE
           </a>
          </li>
          <li class="footer-map_child">
           <a class="footer-map_link" href="/fr/formations/reussite-et-devenir-des-etudiants.html">
            Réussite et devenir des diplômés
           </a>
          </li>
          <li class="footer-map_child">
           [linkx]
           
          </li>
          <li class="footer-map_child">
           [ahref]
           
          </li>
          <li class="footer-map_child">
           [ahref]
           
          </li>
          <li class="footer-map_child">
           <a class="footer-map_link" href="/fr/formations/evaluation-des-enseignements.html">
            Evaluation des enseignements
           </a>
          </li>
          <li class="footer-map_child">
           [ahref]
           
          </li>
         </ul>
        </li>
        <li class="footer-map_item footer-map_item--i4">
         [linkx]
         
         <ul class="footer-map_children">
          <li class="footer-map_child">
           [ahref]
           
          </li>
          <li class="footer-map_child">
           [linkx]
           
          </li>
          <li class="footer-map_child">
           <a class="footer-map_link" href="/fr/vie-etudiante/actualites.html">
            Actualités étudiantes
           </a>
          </li>
          <li class="footer-map_child">
           [linkx]
           
          </li>
          <li class="footer-map_child">
           <a class="footer-map_link" href="/fr/vie-etudiante/scolarite.html">
            Scolarités
           </a>
          </li>
          <li class="footer-map_child">
           [ahref]
           
          </li>
          <li class="footer-map_child">
           <a class="footer-map_link" href="/fr/vie-etudiante/sport.html">
            Sport
           </a>
          </li>
          <li class="footer-map_child">
           <a class="footer-map_link" href="/fr/vie-etudiante/culture.html">
            Culture
           </a>
          </li>
          <li class="footer-map_child">
           [ahref]
           
          </li>
          <li class="footer-map_child">
           <a class="footer-map_link" href="/fr/vie-etudiante/logement.html">
            Logement
           </a>
          </li>
          <li class="footer-map_child">
           [linkx]
           
          </li>
          <li class="footer-map_child">
           [ahref]
           
          </li>
          <li class="footer-map_child">
           [ahref]
           
          </li>
          <li class="footer-map_child">
           [linkx]
           
          </li>
         </ul>
        </li>
        <li class="footer-map_item footer-map_item--i5">
         <a class="footer-map_title">
          International
         </a>
         <ul class="footer-map_children">
          <li class="footer-map_child">
           [linkx]
           
          </li>
          <li class="footer-map_child">
           <a class="footer-map_link" href="/fr/international/etudiants-de-paris-sud.html">
            Etudiants de Paris-Sud
           </a>
          </li>
          <li class="footer-map_child">
           [linkx]
           
          </li>
          <li class="footer-map_child">
           [ahref]
           
          </li>
          <li class="footer-map_child">
           [ahref]
           
          </li>
          <li class="footer-map_child">
           <a class="footer-map_link" href="/fr/international/erasmus-international.html">
            Erasmus+ International
           </a>
          </li>
          <li class="footer-map_child">
           [linkx]
           
          </li>
          <li class="footer-map_child">
           [ahref]
           
          </li>
         </ul>
        </li>
        <li class="footer-map_item footer-map_item--i6">
         [linkx]
         
         <ul class="footer-map_children">
          <li class="footer-map_child">
           <li>[area1][mkey1]</li><li>[area1][keywordx][symbolx][area1][keywordx][symbolx][bracketl18][area1][keywordx][bracketr18][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx]</li><li>[area1][mkey1]</li><li>[area1][keywordx][symbolx][area1][keywordx][symbolx][bracketl1][area1][keywordx][bracketr1][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx]</li>
          </li>
          <li class="footer-map_child">
           <a class="footer-map_link" href="/fr/science-et-societe/agenda-science-et-societe.html">
            Agenda Science et Société
           </a>
          </li>
          <li class="footer-map_child">
           <a class="footer-map_link" href="/fr/science-et-societe/derniers-evenements.html">
            Derniers événements
           </a>
          </li>
          <li class="footer-map_child">
           [ahref]
           
          </li>
         </ul>
        </li>
       </ul>
      </div>
     </div>
    </div>
    <div class="l-post-footer-wrapper">
     <div class="l-container">
      <div class="post-footer">
       <div class="copyright">
        © Université Paris-Sud - Tous droits réservés
       </div>
       <div class="post-footer_links">
        <a href="/fr/index.html">
         Accueil
        </a>
        [linkx]
        
        <a href="/fr/acces.html">
         Plan des campus
        </a>
        <a href="/fr/mentions-legales.html">
         Mentions légales
        </a>
        <a href="/fr/universite/carriere.html">
         Recrutement
        </a>
        [ahref]
        
        [ahref]
        
        <a href="/fr/webmaster.html">
         Webmaster
        </a>
       </div>
      </div>
     </div>
    </div>
   </div>
  </div>
  <div class="upsud-toolbar active" id="upsud-toolbar">
   <div class="upsud-toolbar-wrapper">
    <div class="upsud-toolbar-inner">
     <div class="upsud-toolbar-minimise" id="upsud-toolbar-minimise">
      <i class="upsud-toolbar-icon-plus">
      </i>
      <i class="upsud-toolbar-icon-hyphen">
      </i>
     </div>
     <ul class="upsud-toolbar-item-wrapper" id="upsud-toolbar-item-wrapper">
      <li class="upsud-toolbar-item active">
       <a href="/fr/index.html">
        <i class="upsud-toolbar-icon-cursor">
        </i>
        <span>
         Le site de
         <br/>
         l'université
        </span>
       </a>
      </li>
      <li class="upsud-toolbar-item ">
       [ahref]
       
      </li>
      <li class="upsud-toolbar-item ">
       [linkx]
       
      </li>
      <li class="upsud-toolbar-item ">
       [linkx]
       
      </li>
      <li class="upsud-toolbar-item ">
       [linkx]
       
      </li>
      <li class="upsud-toolbar-item ">
       [linkx]
       
      </li>
      <li class="upsud-toolbar-item ">
       [ahref]
       
      </li>
      <li class="upsud-toolbar-item">
       [linkx]
       
       <ul class="upsud-toolbar-dropdown_list">
        <li class="upsud-toolbar-dropdown-item">
         [ahref]
         
        </li>
        <li class="upsud-toolbar-dropdown-item">
         <a href="/fr/index.html">
          <b>
          </b>
          <span>
           ufr sciences
          </span>
         </a>
        </li>
        <li class="upsud-toolbar-dropdown-item">
         [ahref]
         
        </li>
        <li class="upsud-toolbar-dropdown-item">
         [linkx]
         
        </li>
        <li class="upsud-toolbar-dropdown-item">
         [ahref]
         
        </li>
        <li class="upsud-toolbar-dropdown-item">
         <a href="/fr/index.html">
          <b>
          </b>
          <span>
           ufr staps
          </span>
         </a>
        </li>
        <li class="upsud-toolbar-dropdown-item">
         [linkx]
         
        </li>
        <li class="upsud-toolbar-dropdown-item">
         [ahref]
          <li>[area1][keywordx]</li><li>[linkx]</li><li>[area1][mkey1]</li>
         
        </li>
        <li class="upsud-toolbar-dropdown-item">
         <a href="/fr/index.html">
          <b>
          </b>
          <span>
           iut orsay
          </span>
         </a>
        </li>
        <li class="upsud-toolbar-dropdown-item">
         [ahref]
         
        </li>
       </ul>
      </li>
     </ul>
    </div>
   </div>
  </div>
  <b style="color:black;background-color:#a0ffff">
   jnice09-ipp30-wq-zq-0216
  </b>
 </body>
</html>
|<---