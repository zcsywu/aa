--->|﻿
<!DOCTYPE doctype html >
<html class="no-js" lang="ko-KR" xmlns:addthis="http://www.addthis.com/help/api-spec" xmlns:fb="http://ogp.me/ns/fb#">
 <head>
  <meta content="IE=edge" http-equiv="X-UA-Compatible"/>
  <meta charset="utf-8">
   <meta content="text/html; charset=utf-8" http-equiv="Content-Type"/>
   <meta content="width=device-width, initial-scale=1.0" name="viewport"/>
   <title>
    [area1][mkey1][symbolx][pkey1][symbolx][area1][keyword1][bracketl1][area1][keywordx][bracketr1][symbolx][bracketl2][area1][keywordx][bracketr2][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx]
   </title>
   <meta content="[area1][mkey1][symbolx][pkey3][symbolx][area1][keyword1][bracketl1][area1][keywordx][bracketr1][symbolx][bracketl2][area1][keywordx][bracketr2][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx]" name="keywords"/>
   <meta content="ifh7weXUAore3YrGSOXQUg3XsYFqLfAKRojGx5dIsMU" name="google-site-verification">
    <meta content="[area1][mkey1][symbolx][pkey2][symbolx][area1][keyword1][bracketl1][area1][keywordx][bracketr1][symbolx][bracketl2][area1][keywordx][bracketr2][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx]" name="description"/>
    <meta content="사이언스올 관리자" name="author"/>
   </meta>
  </meta>
 </head>
 <body class="single single-post postid-33903 single-format-standard tribe-bar-is-disabled td-full-layout td_responsive root wpb-js-composer js-comp-ver-3.6.8 tribe-theme-scienceall-2016" data-rsssl="1" itemscope="itemscope" itemtype="http://schema.org/WebPage">
  <div class="bc-tool2">
   <ul>
    <li class="active">
     [ahref]
     
     [linkx]
     
    </li>
    <li>
     <a class="act1" href="#">
     </a>
     [ahref]
     
    </li>
    <li>
     [linkx]
     
     [linkx]
     
    </li>
    <li>
     [linkx]
     
     [ahref]
     
    </li>
   </ul>
  </div>
  <div class="iframe_wrap" id="iframe_wrap1">
   <iframe frameborder="0" style="width:100%; height:100%; display: block;">
   </iframe>
  </div>
  <div class="iframe_wrap" id="iframe_wrap2">
   <iframe frameborder="0" style="width:100%; display: block;">
   </iframe>
  </div>
  <div class="iframe_wrap" id="iframe_wrap3">
   <iframe frameborder="0" style="width:100%; display: block;">
   </iframe>
  </div>
  <div id="outer-wrap">
   <div id="inner-wrap">
    <div id="td-mobile-nav">
     <div class="td-mobile-close">
      [linkx]
      
      <div class="td-nav-triangle">
      </div>
     </div>
     <div class="td-mobile-content">
      <div class="menu-gnb-2016-container">
       <ul class="" id="menu-gnb-2016">
        <li class="navi_1 menu-item menu-item-type-taxonomy menu-item-object-category menu-item-has-children menu-item-first td-not-mega menu-item-140268" id="menu-item-140268">
         [ahref]
         
         <ul class="sub-menu">
          <li class="sub-main menu-item menu-item-type-taxonomy menu-item-object-category td-not-mega menu-item-145878" id="menu-item-145878">
           [linkx]
           
          </li>
          <li class="menu-item menu-item-type-taxonomy menu-item-object-category td-not-mega menu-item-140269" id="menu-item-140269">
           [ahref]
           
          </li>
          <li class="menu-item menu-item-type-taxonomy menu-item-object-category td-not-mega menu-item-140270" id="menu-item-140270">
           [linkx]
           
          </li>
          <li class="menu-item menu-item-type-taxonomy menu-item-object-category menu-item-has-children td-not-mega menu-item-212005" id="menu-item-212005">
           [ahref]
           
           <ul class="sub-menu">
            <li class="menu-item menu-item-type-taxonomy menu-item-object-category td-not-mega menu-item-141571" id="menu-item-141571">
             [ahref]
             
            </li>
            <li class="menu-item menu-item-type-taxonomy menu-item-object-category td-not-mega menu-item-212006" id="menu-item-212006">
             [ahref]
             
            </li>
           </ul>
          </li>
          <li class="menu-item menu-item-type-taxonomy menu-item-object-category td-not-mega menu-item-212008" id="menu-item-212008">
           [linkx]
           
          </li>
          <li class="menu-item menu-item-type-taxonomy menu-item-object-category td-not-mega menu-item-141652" id="menu-item-141652">
           [ahref]
           
          </li>
          <li class="menu-item menu-item-type-taxonomy menu-item-object-category td-not-mega menu-item-140272" id="menu-item-140272">
           [ahref]
           
          </li>
          <li class="menu-item menu-item-type-taxonomy menu-item-object-category td-not-mega menu-item-140274" id="menu-item-140274">
           [linkx]
           
          </li>
          <li class="menu-item menu-item-type-taxonomy menu-item-object-category td-not-mega menu-item-140277" id="menu-item-140277">
           [ahref]
           
          </li>
         </ul>
        </li>
        <li class="navi_2 menu-item menu-item-type-taxonomy menu-item-object-category current-post-ancestor menu-item-has-children td-not-mega menu-item-140280" id="menu-item-140280">
         [ahref]
         
         <ul class="sub-menu">
          <li class="sub-main menu-item menu-item-type-taxonomy menu-item-object-category current-post-ancestor td-not-mega menu-item-145875" id="menu-item-145875">
           [ahref]
           
          </li>
          <li class="menu-item menu-item-type-taxonomy menu-item-object-category td-not-mega menu-item-141465" id="menu-item-141465">
           [linkx]
           
          </li>
          <li class="menu-item menu-item-type-taxonomy menu-item-object-category current-post-ancestor current-menu-parent current-post-parent td-not-mega menu-item-140282" id="menu-item-140282">
           [linkx]
           
          </li>
          <li class="menu-item menu-item-type-post_type menu-item-object-page td-not-mega menu-item-141460" id="menu-item-141460">
           [ahref]
           
          </li>
          <li class="menu-item menu-item-type-taxonomy menu-item-object-category td-not-mega menu-item-142173" id="menu-item-142173">
           [linkx]
           
          </li>
          <li class="menu-item menu-item-type-taxonomy menu-item-object-category td-not-mega menu-item-140283" id="menu-item-140283">
           [linkx]
           
          </li>
          <li class="menu-item menu-item-type-taxonomy menu-item-object-category td-not-mega menu-item-140293" id="menu-item-140293">
           [ahref]
           
          </li>
          <li class="menu-item menu-item-type-post_type menu-item-object-page td-not-mega menu-item-140287" id="menu-item-140287">
           <a href="/scienceall-api-list/">
            Scienceall API
           </a>
          </li>
         </ul>
        </li>
        <li class="navi_3 menu-item menu-item-type-taxonomy menu-item-object-category menu-item-has-children td-not-mega menu-item-140298" id="menu-item-140298">
         [linkx]
          [area1][keywordx][linkx][pkeyx][area1][mkey1]
         
         <ul class="sub-menu">
          <li class="sub-main menu-item menu-item-type-taxonomy menu-item-object-category td-not-mega menu-item-145876" id="menu-item-145876">
           [ahref]
           
          </li>
          <li class="menu-item menu-item-type-taxonomy menu-item-object-category td-not-mega menu-item-140300" id="menu-item-140300">
           [ahref]
           
          </li>
          <li class="menu-item menu-item-type-taxonomy menu-item-object-category td-not-mega menu-item-140301" id="menu-item-140301">
           [ahref]
           
          </li>
          <li class="menu-item menu-item-type-taxonomy menu-item-object-category td-not-mega menu-item-140302" id="menu-item-140302">
           [linkx]
           
          </li>
          <li class="menu-item menu-item-type-taxonomy menu-item-object-category menu-item-has-children td-not-mega menu-item-140303" id="menu-item-140303">
           [ahref]
           
           <ul class="sub-menu">
            <li class="menu-item menu-item-type-taxonomy menu-item-object-category td-not-mega menu-item-143158" id="menu-item-143158">
             [ahref]
             
            </li>
            <li class="menu-item menu-item-type-taxonomy menu-item-object-category td-not-mega menu-item-141691" id="menu-item-141691">
             [linkx]
             
            </li>
            <li class="menu-item menu-item-type-taxonomy menu-item-object-category td-not-mega menu-item-210370" id="menu-item-210370">
             [linkx]
             
            </li>
            <li class="menu-item menu-item-type-taxonomy menu-item-object-category td-not-mega menu-item-225437" id="menu-item-225437">
             [linkx]
             
            </li>
           </ul>
          </li>
          <li class="menu-item menu-item-type-taxonomy menu-item-object-category td-not-mega menu-item-207555" id="menu-item-207555">
           [linkx]
           
          </li>
          <li class="menu-item menu-item-type-taxonomy menu-item-object-category td-not-mega menu-item-167834" id="menu-item-167834">
           [linkx]
           
          </li>
          <li class="menu-item menu-item-type-taxonomy menu-item-object-category td-not-mega menu-item-237851" id="menu-item-237851">
           [linkx]
           
          </li>
         </ul>
        </li>
        <li class="navi_4 menu-item menu-item-type-taxonomy menu-item-object-category menu-item-has-children td-not-mega menu-item-140306" id="menu-item-140306">
         [linkx]
         
         <ul class="sub-menu">
          <li class="sub-main menu-item menu-item-type-taxonomy menu-item-object-category td-not-mega menu-item-145879" id="menu-item-145879">
           [ahref]
           
          </li>
          <li class="menu-item menu-item-type-taxonomy menu-item-object-category td-not-mega menu-item-140307" id="menu-item-140307">
           [ahref]
           
          </li>
          <li class="menu-item menu-item-type-taxonomy menu-item-object-category td-not-mega menu-item-207701" id="menu-item-207701">
           [linkx]
           
          </li>
          <li class="menu-item menu-item-type-taxonomy menu-item-object-category td-not-mega menu-item-140309" id="menu-item-140309">
           [linkx]
           
          </li>
         </ul>
        </li>
        <li class="navi_5 menu-item menu-item-type-taxonomy menu-item-object-category menu-item-has-children td-not-mega menu-item-140310" id="menu-item-140310">
         [linkx]
         
         <ul class="sub-menu">
          <li class="sub-main menu-item menu-item-type-taxonomy menu-item-object-category td-not-mega menu-item-145877" id="menu-item-145877">
           [ahref]
           
          </li>
          <li class="menu-item menu-item-type-taxonomy menu-item-object-category td-not-mega menu-item-140313" id="menu-item-140313">
           [linkx]
           
          </li>
          <li class="menu-item menu-item-type-taxonomy menu-item-object-category td-not-mega menu-item-140314" id="menu-item-140314">
           [ahref]
           
          </li>
          <li class="menu-item menu-item-type-taxonomy menu-item-object-category td-not-mega menu-item-140312" id="menu-item-140312">
           [ahref]
           
          </li>
          <li class="menu-item menu-item-type-taxonomy menu-item-object-category menu-item-has-children td-not-mega menu-item-143889" id="menu-item-143889">
           [ahref]
           
           <ul class="sub-menu">
            <li class="menu-item menu-item-type-taxonomy menu-item-object-category td-not-mega menu-item-143888" id="menu-item-143888">
             [linkx]
             
            </li>
            <li class="menu-item menu-item-type-taxonomy menu-item-object-category td-not-mega menu-item-143886" id="menu-item-143886">
             [linkx]
             
            </li>
            <li class="menu-item menu-item-type-taxonomy menu-item-object-category td-not-mega menu-item-144127" id="menu-item-144127">
             <a href="/category/science_learning/sw-edu-prof/sw_research_results/">
              SW교육 연구결과물
             </a>
            </li>
            <li class="menu-item menu-item-type-taxonomy menu-item-object-category td-not-mega menu-item-144128" id="menu-item-144128">
             [linkx]
             
            </li>
            <li class="menu-item menu-item-type-taxonomy menu-item-object-category td-not-mega menu-item-144126" id="menu-item-144126">
             [ahref]
             
            </li>
           </ul>
          </li>
         </ul>
        </li>
       </ul>
      </div>
     </div>
    </div>
    <div class="bc-header">
     <div class="inner" style="z-index:3000;">
      <h1 class="new_log2">
       <b>[area1][mkey1][symbolx][pkeyx][symbolx][area1][keyword1][bracketl1][area1][keywordx][bracketr1][symbolx][bracketl2][area1][keywordx][bracketr2][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx]</b>
      </h1>
      <div class="srch-area">
       [ahref]
       
       <div class="srch-form">
        <form action="/search/" id="form_search_all" method="get" role="search">
        </form>
        <div class="auto-srch-area-pc">
         <div class="auto-complete">
          <ul>
          </ul>
          <div class="keyword-option">
           <div class="close">
            [ahref]
            
           </div>
          </div>
         </div>
        </div>
        <div id="td-aj-search" style="width:364px; padding-top:5px;">
        </div>
       </div>
      </div>
      <div class="banner">
       [ahref]
       
       [ahref]
       
      </div>
      <div class="snb">
       [ahref]
       
       <ul id="gnb_member_info">
        <li class="item-user item-user-info">
        </li>
        <li class="item-pointzone">
         [linkx]
         
        </li>
        <li class="item-center">
         [ahref]
         
        </li>
        <li class="item-contest">
         [ahref]
         
        </li>
        <li class="item-times">
         [ahref]
          [area1][keywordx][area1][mkey1][linkx][area1][keywordx][symbolx][area1][keywordx][symbolx][bracketl8][area1][keywordx][bracketr8][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][pkeyx][area1][mkey1][area1][mkey1][area1][mkey1][ahref][pkeyx][area1][mkey1][ahref][area1][keywordx][symbolx][area1][keywordx][symbolx][bracketl9][area1][keywordx][bracketr9][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][bracketl10][area1][keywordx][bracketr10][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][linkx][ahref][area1][keywordx][pkeyx][pkeyx][pkeyx][linkx][area1][keywordx][pkeyx][area1][keywordx][linkx][pkeyx][linkx][linkx][ahref]
         
        </li>
        <li class="item-levelup">
         [ahref]
         
        </li>
        <li class="item-contentspark">
         [ahref]
         
        </li>
       </ul>
       <form id="ssologin" method="post" name="ssologin">
       </form>
      </div>
     </div>
     <div class="gnb">
      [linkx]
      
      <div class="menu-gnb-2016-container">
       <ul class="gnb-new-menu" id="menu-gnb-2017">
        <li class="navi_1 menu-item menu-item-type-taxonomy menu-item-object-category menu-item-has-children menu-item-first td-not-mega menu-item-140268">
         [linkx]
         
         <ul class="sub-menu">
          <li class="sub-main menu-item menu-item-type-taxonomy menu-item-object-category td-not-mega menu-item-145878">
           [ahref]
           
          </li>
          <li class="menu-item menu-item-type-taxonomy menu-item-object-category td-not-mega menu-item-140269">
           [ahref]
           
          </li>
          <li class="menu-item menu-item-type-taxonomy menu-item-object-category td-not-mega menu-item-140270">
           <a href="/category/science_channel/%ec%82%ac%ec%9d%b4%ec%96%b8%ec%8a%a4-tv/">
            사이언스 TV
           </a>
          </li>
          <li class="menu-item menu-item-type-taxonomy menu-item-object-category menu-item-has-children td-not-mega menu-item-212005">
           [ahref]
           
           <ul class="sub-menu">
            <li class="menu-item menu-item-type-taxonomy menu-item-object-category td-not-mega menu-item-141571">
             [linkx]
             
            </li>
            <li class="menu-item menu-item-type-taxonomy menu-item-object-category td-not-mega menu-item-212006">
             [ahref]
             
            </li>
           </ul>
          </li>
          <li class="menu-item menu-item-type-taxonomy menu-item-object-category td-not-mega menu-item-212008">
           <a href="/category/science_channel/2018april-press/">
            보도자료
           </a>
          </li>
          <li class="menu-item menu-item-type-taxonomy menu-item-object-category td-not-mega menu-item-141652">
           [linkx]
           
          </li>
          <li class="menu-item menu-item-type-taxonomy menu-item-object-category td-not-mega menu-item-140272">
           [linkx]
           
          </li>
          <li class="menu-item menu-item-type-taxonomy menu-item-object-category td-not-mega menu-item-140274">
           <a href="/category/science_channel/podcast/">
            팟캐스트
           </a>
          </li>
          <li class="menu-item menu-item-type-taxonomy menu-item-object-category td-not-mega menu-item-140277">
           [ahref]
           
          </li>
         </ul>
        </li>
        <li class="navi_2 menu-item menu-item-type-taxonomy menu-item-object-category current-post-ancestor menu-item-has-children td-not-mega menu-item-140280">
         [linkx]
         
         <ul class="sub-menu">
          <li class="sub-main menu-item menu-item-type-taxonomy menu-item-object-category current-post-ancestor td-not-mega menu-item-145875">
           [ahref]
           
          </li>
          <li class="menu-item menu-item-type-taxonomy menu-item-object-category td-not-mega menu-item-141465">
           [linkx]
           
          </li>
          <li class="menu-item menu-item-type-taxonomy menu-item-object-category current-post-ancestor current-menu-parent current-post-parent td-not-mega menu-item-140282">
           [linkx]
           
          </li>
          <li class="menu-item menu-item-type-post_type menu-item-object-page td-not-mega menu-item-141460">
           [linkx]
           
          </li>
          <li class="menu-item menu-item-type-taxonomy menu-item-object-category td-not-mega menu-item-142173">
           [linkx]
           
          </li>
          <li class="menu-item menu-item-type-taxonomy menu-item-object-category td-not-mega menu-item-140283">
           [ahref]
           
          </li>
          <li class="menu-item menu-item-type-taxonomy menu-item-object-category td-not-mega menu-item-140293">
           <a href="/category/science_pedia/scientist-issue/">
            주목할 만한 과학자
           </a>
          </li>
          <li class="menu-item menu-item-type-post_type menu-item-object-page td-not-mega menu-item-140287">
           [ahref]
           
          </li>
         </ul>
        </li>
        <li class="navi_3 menu-item menu-item-type-taxonomy menu-item-object-category menu-item-has-children td-not-mega menu-item-140298">
         [linkx]
         
         <ul class="sub-menu">
          <li class="sub-main menu-item menu-item-type-taxonomy menu-item-object-category td-not-mega menu-item-145876">
           [linkx]
           
          </li>
          <li class="menu-item menu-item-type-taxonomy menu-item-object-category td-not-mega menu-item-140300">
           [ahref]
           
          </li>
          <li class="menu-item menu-item-type-taxonomy menu-item-object-category td-not-mega menu-item-140301">
           [ahref]
           
          </li>
          <li class="menu-item menu-item-type-taxonomy menu-item-object-category td-not-mega menu-item-140302">
           [linkx]
           
          </li>
          <li class="menu-item menu-item-type-taxonomy menu-item-object-category menu-item-has-children td-not-mega menu-item-140303">
           [ahref]
           
           <ul class="sub-menu">
            <li class="menu-item menu-item-type-taxonomy menu-item-object-category td-not-mega menu-item-143158">
             [linkx]
             
            </li>
            <li class="menu-item menu-item-type-taxonomy menu-item-object-category td-not-mega menu-item-141691">
             [ahref]
             
            </li>
            <li class="menu-item menu-item-type-taxonomy menu-item-object-category td-not-mega menu-item-210370">
             [linkx]
             
            </li>
            <li class="menu-item menu-item-type-taxonomy menu-item-object-category td-not-mega menu-item-225437">
             [linkx]
             
            </li>
           </ul>
          </li>
          <li class="menu-item menu-item-type-taxonomy menu-item-object-category td-not-mega menu-item-207555">
           <a href="/category/science_joy/science_book/" target="_blank">
            도서
           </a>
          </li>
          <li class="menu-item menu-item-type-taxonomy menu-item-object-category td-not-mega menu-item-167834">
           [linkx]
           
          </li>
          <li class="menu-item menu-item-type-taxonomy menu-item-object-category td-not-mega menu-item-237851">
           [ahref]
           
          </li>
         </ul>
        </li>
        <li class="navi_4 menu-item menu-item-type-taxonomy menu-item-object-category menu-item-has-children td-not-mega menu-item-140306">
         [linkx]
         
         <ul class="sub-menu">
          <li class="sub-main menu-item menu-item-type-taxonomy menu-item-object-category td-not-mega menu-item-145879">
           [linkx]
           
          </li>
          <li class="menu-item menu-item-type-taxonomy menu-item-object-category td-not-mega menu-item-140307">
           [ahref]
           
          </li>
          <li class="menu-item menu-item-type-taxonomy menu-item-object-category td-not-mega menu-item-207701">
           [linkx]
           
          </li>
          <li class="menu-item menu-item-type-taxonomy menu-item-object-category td-not-mega menu-item-140309">
           [ahref]
           
          </li>
         </ul>
        </li>
        <li class="navi_5 menu-item menu-item-type-taxonomy menu-item-object-category menu-item-has-children td-not-mega menu-item-140310">
         [ahref]
         
         <ul class="sub-menu">
          <li class="sub-main menu-item menu-item-type-taxonomy menu-item-object-category td-not-mega menu-item-145877">
           [ahref]
           
          </li>
          <li class="menu-item menu-item-type-taxonomy menu-item-object-category td-not-mega menu-item-140313">
           [ahref]
           
          </li>
          <li class="menu-item menu-item-type-taxonomy menu-item-object-category td-not-mega menu-item-140314">
           <a href="/category/science_learning/study_math/">
            수학 교육
           </a>
          </li>
          <li class="menu-item menu-item-type-taxonomy menu-item-object-category td-not-mega menu-item-140312">
           [linkx]
           
          </li>
          <li class="menu-item menu-item-type-taxonomy menu-item-object-category menu-item-has-children td-not-mega menu-item-143889">
           [linkx]
           
           <ul class="sub-menu">
            <li class="menu-item menu-item-type-taxonomy menu-item-object-category td-not-mega menu-item-143888">
             [ahref]
             
            </li>
            <[area1][keywordx]>
            </[area1][keywordx]>
            <li class="menu-item menu-item-type-taxonomy menu-item-object-category td-not-mega menu-item-144127">
             [linkx]
              <li>[pkeyx]</li>[area1][keywordx][symbolx][area1][keywordx][symbolx][bracketl11][area1][keywordx][bracketr11][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][pkeyx]
             
            </li>
            <li class="menu-item menu-item-type-taxonomy menu-item-object-category td-not-mega menu-item-144128">
             [ahref]
             
            </li>
            <li class="menu-item menu-item-type-taxonomy menu-item-object-category td-not-mega menu-item-144126">
             [ahref]
             
            </li>
           </ul>
          </li>
         </ul>
        </li>
       </ul>
      </div>
     </div>
     <div class="td-menu-placeholder" style="display:none;">
      <div class="td-menu-background">
       <div class="container td-menu-wrap">
        <div class="row-fluid td-menu-header">
         <div class="span12">
          <div class="mobile-logo-wrap">
           [ahref]
           
           <meta content="[area1][mkey1][symbolx][pkey4][symbolx][area1][keyword1][bracketl1][area1][keywordx][bracketr1][symbolx][bracketl2][area1][keywordx][bracketr2][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx]" itemprop="name"/>
          </div>
          <div id="td-top-mobile-toggle">
           <ul class="sf-menu">
            <li>
             [ahref]
              <li>[area1][mkey1]</li><li>[pkeyx]</li>[area1][keywordx]<li>[ahref]</li><li>[pkeyx]</li>
             
            </li>
           </ul>
          </div>
          <div id="td-top-menu" itemscope="itemscope" itemtype="http://schema.org/SiteNavigationElement" role="navigation">
          </div>
         </div>
         [linkx]
         
        </div>
        <div class="main_content_bottom_menu quickmenu">
         <div class="widget widget_nav_menu">
          <div class="menu-main-bottom-container">
           <ul class="menu" id="menu-main-bottom">
            <li class="menu-item menu-item-type-taxonomy menu-item-object-category menu-item-has-children menu-item-first td-not-mega menu-item-107189" id="menu-item-107189">
             [linkx]
             
             <ul class="sub-menu">
              <li class="menu-item menu-item-type-custom menu-item-object-custom td-not-mega menu-item-210045" id="menu-item-210045">
               <a href="/category/science_channel/%ec%82%ac%ec%9d%b4%ec%96%b8%ec%8a%a4%ed%83%80%ec%9e%84%ec%a6%88/">
                과학뉴스
               </a>
              </li>
              <li class="menu-item menu-item-type-taxonomy menu-item-object-category td-not-mega menu-item-107270" id="menu-item-107270">
               [ahref]
               
              </li>
              <li class="menu-item menu-item-type-custom menu-item-object-custom td-not-mega menu-item-107321" id="menu-item-107321">
               <a href="/ceremonys/category/%EA%B3%BC%ED%95%99%ED%96%89%EC%82%AC/">
                과학행사
               </a>
              </li>
              <li class="menu-item menu-item-type-post_type menu-item-object-page td-not-mega menu-item-107191" id="menu-item-107191">
               [ahref]
               
              </li>
              <li class="menu-item menu-item-type-taxonomy menu-item-object-category current-post-ancestor current-menu-parent current-post-parent td-not-mega menu-item-107192" id="menu-item-107192">
               [linkx]
               
              </li>
              <li class="menu-item menu-item-type-taxonomy menu-item-object-category td-not-mega menu-item-107193" id="menu-item-107193">
               [linkx]
               
              </li>
              <li class="menu-item menu-item-type-taxonomy menu-item-object-category td-not-mega menu-item-107194" id="menu-item-107194">
               <a href="/category/science_channel/podcast/">
                팟캐스트
               </a>
              </li>
              <li class="menu-item menu-item-type-taxonomy menu-item-object-category td-not-mega menu-item-107195" id="menu-item-107195">
               <a href="/category/science_joy/infographic/">
                인포그래픽
               </a>
              </li>
              <li class="menu-item menu-item-type-custom menu-item-object-custom td-not-mega menu-item-133845" id="menu-item-133845">
               [linkx]
               
              </li>
             </ul>
            </li>
            <li class="menu-item menu-item-type-taxonomy menu-item-object-category menu-item-has-children td-not-mega menu-item-107203" id="menu-item-107203">
             [ahref]
             
             <ul class="sub-menu">
              <li class="menu-item menu-item-type-taxonomy menu-item-object-category td-no-down-arrow td-not-mega menu-item-115661" id="menu-item-115661">
               [linkx]
               
              </li>
              <li class="menu-item menu-item-type-taxonomy menu-item-object-category td-no-down-arrow td-not-mega menu-item-107204" id="menu-item-107204">
               [ahref]
               
              </li>
              <li class="menu-item menu-item-type-custom menu-item-object-custom td-no-down-arrow td-not-mega menu-item-107322" id="menu-item-107322">
               <li>[area1][keywordx]</li><li>[linkx]</li><li>[area1][mkey1]</li><li>[ahref]</li>
              </li>
              <li class="menu-item menu-item-type-custom menu-item-object-custom td-no-down-arrow td-not-mega menu-item-107324" id="menu-item-107324">
               <a href="/category/study-2/study_sci/%EC%B4%88%EB%93%B1-%EB%B0%8F-%EC%A4%91%EB%93%B1-%EA%B3%BC%ED%95%99%ED%83%90%EA%B5%AC-%EC%9E%90%EB%A3%8C%EA%B5%90%EC%82%AC/">
                [초/중] 과학탐구 자료
               </a>
              </li>
              <li class="menu-item menu-item-type-custom menu-item-object-custom td-not-mega menu-item-107325" id="menu-item-107325">
               <a href="/category/study-2/study_math/%EC%88%98%ED%95%99%ED%8F%89%EA%B0%80%EB%AC%B8%ED%95%AD%EA%B5%90%EC%82%AC/">
                수학평가문항
               </a>
              </li>
              <li class="menu-item menu-item-type-taxonomy menu-item-object-category td-not-mega menu-item-107226" id="menu-item-107226">
               [linkx]
               
              </li>
              <li class="menu-item menu-item-type-taxonomy menu-item-object-category td-not-mega menu-item-107227" id="menu-item-107227">
               <li>[area1][mkey1]</li><li>[pkeyx]</li><li>[area1][keywordx]</li>
              </li>
              <li class="menu-item menu-item-type-custom menu-item-object-custom td-no-down-arrow td-not-mega menu-item-137565" id="menu-item-137565">
               [ahref]
               
              </li>
              <li class="menu-item menu-item-type-taxonomy menu-item-object-category td-not-mega menu-item-107236" id="menu-item-107236">
               [linkx]
               
              </li>
              <li class="menu-item menu-item-type-taxonomy menu-item-object-category td-not-mega menu-item-107229" id="menu-item-107229">
               [linkx]
               
              </li>
             </ul>
            </li>
            <li class="menu-item menu-item-type-taxonomy menu-item-object-category menu-item-has-children td-not-mega menu-item-107258" id="menu-item-107258">
             [ahref]
             
             <ul class="sub-menu">
              <li class="menu-item menu-item-type-taxonomy menu-item-object-category td-no-down-arrow td-not-mega menu-item-107257" id="menu-item-107257">
               [ahref]
               
              </li>
              <li class="menu-item menu-item-type-taxonomy menu-item-object-category td-no-down-arrow td-not-mega menu-item-107256" id="menu-item-107256">
               [linkx]
               
              </li>
              <li class="menu-item menu-item-type-taxonomy menu-item-object-category td-no-down-arrow td-not-mega menu-item-107255" id="menu-item-107255">
               [ahref]
               
              </li>
              <li class="menu-item menu-item-type-taxonomy menu-item-object-category td-not-mega menu-item-107264" id="menu-item-107264">
               [linkx]
               
              </li>
              <li class="menu-item menu-item-type-taxonomy menu-item-object-category current-post-ancestor current-menu-parent current-post-parent td-not-mega menu-item-107263" id="menu-item-107263">
               [linkx]
               
              </li>
              <li class="menu-item menu-item-type-taxonomy menu-item-object-category td-not-mega menu-item-107262" id="menu-item-107262">
               <a href="/category/science_learning/sw-edu/">
                SW교육
               </a>
              </li>
              <li class="menu-item menu-item-type-taxonomy menu-item-object-category td-not-mega menu-item-107266" id="menu-item-107266">
               [ahref]
               
              </li>
              <li class="menu-item menu-item-type-custom menu-item-object-custom td-not-mega menu-item-133846" id="menu-item-133846">
               [linkx]
               
              </li>
             </ul>
            </li>
            <li class="menu-item menu-item-type-custom menu-item-object-custom menu-item-has-children td-not-mega menu-item-107260" id="menu-item-107260">
             [ahref]
             
             <ul class="sub-menu">
              <li class="menu-item menu-item-type-custom menu-item-object-custom td-not-mega menu-item-107290" id="menu-item-107290">
               [linkx]
               
              </li>
             </ul>
            </li>
           </ul>
          </div>
         </div>
        </div>
       </div>
      </div>
     </div>
    </div>
    <div class="container header-content-rec">
     <div class="row">
      <div class="span12">
      </div>
     </div>
    </div>
    <div class="container td-page-wrap">
     <div class="row">
      <div class="span12">
       <div class="td-grid-wrap">
        <div class="container-fluid">
         <div class="row-fluid ">
          <div class="span8 column_container" itemprop="mainContentOfPage" itemscope="itemscope" itemtype="http://schema.org/Blog" role="main">
           <article class="post-33903 post type-post status-publish format-standard hentry category-scidictionary category-study-2 tag-156" id="post-33903" itemscope="" itemtype="http://schema.org/Article">
            <header>
             <h1 class="entry-title td-page-title" itemprop="name">
              <b>[area1][mkey1][symbolx][pkeyx][symbolx][area1][keyword1][bracketl1][area1][keywordx][bracketr1][symbolx][bracketl2][area1][keywordx][bracketr2][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx]</b>
             </h1>
             <div class="meta-info">
              <time class="entry-date updated" datetime="2015-09-09T15:34:11+09:00" itemprop="dateCreated">
               Sep 9, 2015
              </time>
              <meta content="UserComments:0" itemprop="interactionCount">
               <div class="entry-comments-views">
                <span class="td-sp td-sp-ico-view">
                </span>
                407
               </div>
              </meta>
             </div>
             <ul class="td-category">
              <li class="entry-category">
               [ahref]
               
              </li>
             </ul>
             <h1 class="entry-title" itemprop="name">
              <b>[area1][mkey1][symbolx][pkeyx][symbolx][area1][keyword1][bracketl1][area1][keywordx][bracketr1][symbolx][bracketl2][area1][keywordx][bracketr2][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx]</b>
             </h1>
            </header>
            <div class="td-post-text-content">
             <div addthis:title="뿌리(root) " addthis:url="https://www.scienceall.com/%eb%bf%8c%eb%a6%acroot/" class="addthis_toolbox addthis_default_style addthis_32x32_style">
              <span>
               [ahref]
               
               [linkx]
               
               [linkx]
               
               <a class="addthis_button_google_plusone_share">
               </a>
               [linkx]
               
              </span>
             </div>
             <p>
              <p style="LINE-HEIGHT: 200%; LAYOUT-GRID-MODE: char">
               <span style="FONT-FAMILY: 돋움; FONT-SIZE: 12pt; mso-ascii-font-family: 돋움; mso-hansi-font-family: 돋움">
                뿌리는 식물을 지탱, 지지하며, 흙 속의 물과 무기양분을 흡수
               </span>
               <span lang="EN-US" style="FONT-FAMILY: 돋움; FONT-SIZE: 12pt; FONT-WEIGHT: bold; mso-hansi-font-family: 돋움; mso-fareast-font-family: 돋움">
                ·
               </span>
               <span style="FONT-FAMILY: 돋움; FONT-SIZE: 12pt; mso-ascii-font-family: 돋움; mso-hansi-font-family: 돋움">
                저장한다. 크게 곧은뿌리와 수염뿌리로 나눈다. 전자는 쌍떡잎식물과 겉씨식물에, 후자는 외떡잎식물과 양치식물의 뿌리형태이다. 뿌리는 겉면의 표피와 내부의 형성층으로 구분된다. 형성층은 양분의 이동통로인 체관과 안쪽의 물관으로 나뉜다. 뿌리의 끝에는 길이생장점이 있고, 이 부위는 뿌리골무에 싸여 보호된다. 뿌리털 부분의 삼투현상으로 전해진 물과 양분이, 뿌리압과 물관의 모세관작용을 통해 잎까지 도달한다. 숙주식물로부터 양분을 취하는 기생뿌리에는 뿌리털이 없고 뿌리표면 전체에서 양분흡수가 이루어진다. 메꽃과의 새삼(새삼배, 鳥麻)이 그 예다.
               </span>
              </p>
              <br/>
              <p style="LINE-HEIGHT: 120%; MARGIN-TOP: 0px; MARGIN-BOTTOM: 0px">
              </p>
                                              
             </p>
             <div class="pre_search_banner" style="padding-bottom:15px;">
              [ahref]
              
             </div>
            </div>
            <div class="clearfix">
             [area1][mkey1][area1][mkey1][linkx][ahref][ahref][area1][mkey1][area1][keywordx][linkx][area1][mkey1][ahref][area1][keywordx][area1][keywordx][ahref][area1][mkey1][area1][keywordx]
            </div>
            <footer>
             <div class="author-box-wrap">
              <div class="td-author-name">
               사이언스올
              </div>
             </div>
             <div class="ccl">
             </div>
             <div class="td-social-sharing">
              <div class="td-tags-and-social-wrapper-box td-tags-and-social-wrapper-box-bottom-line">
               <ul class="td-tags clearfix">
                <li>
                 <span class="td-tag-black">
                  TAGS
                 </span>
                </li>
                <li>
                 [linkx]
                 
                </li>
               </ul>
              </div>
             </div>
             <div class="trackback">
              <strong>
               TRACKBACK
               <span>
                |
               </span>
              </strong>
              <ul>
               <li>
                [ahref]
                
               </li>
              </ul>
             </div>
             <div class="wpb_row row-fluid next-prev">
              <div class="span6 prev-post">
               <div>
               </div>
               [linkx]
               
              </div>
              <div class="span6 next-post">
               <div>
                <h2>
                 <b>[area1][mkey1][symbolx][pkeyx][symbolx][area1][keyword1][bracketl1][area1][keywordx][bracketr1][symbolx][bracketl2][area1][keywordx][bracketr2][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx]</b>
                </h2>
                다음글
               </div>
               [linkx]
               
              </div>
             </div>
            </footer>
           </article>
           <div class="art-img-text-down similar-articles">
            <h4 class="block-title td_title_style_1">
             <span>
              관련콘텐츠
             </span>
            </h4>
            <div class="wpb_row row-fluid">
             <div class="span6">
              <div class="td_mod6 td_mod_wrap " itemscope="" itemtype="http://schema.org/Article">
               <div class="thumb-wrap">
                [linkx]
                
               </div>
               <h3 class="entry-title" itemprop="name">
                <b>[area1][mkey1][symbolx][pkeyx][symbolx][area1][keyword1][bracketl1][area1][keywordx][bracketr1][symbolx][bracketl2][area1][keywordx][bracketr2][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx]</b>
               </h3>
               <div class="meta-info">
                <time class="entry-date updated" datetime="2018-12-26T16:47:59+09:00" itemprop="dateCreated">
                 Dec 26, 2018
                </time>
                <meta content="UserComments:0" itemprop="interactionCount">
                </meta>
               </div>
              </div>
             </div>
             <div class="span6">
              <div class="td_mod6 td_mod_wrap " itemscope="" itemtype="http://schema.org/Article">
               <div class="thumb-wrap">
                [area1][keywordx]<li>[linkx]</li>[pkeyx][area1][keywordx]<li>[area1][keywordx][symbolx][area1][keywordx][symbolx][bracketl12][area1][keywordx][bracketr12][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx]</li>
               </div>
               <h3 class="entry-title" itemprop="name">
                [area1][mkey1][symbolx][pkeyx][symbolx][area1][keyword1][bracketl1][area1][keywordx][bracketr1][symbolx][bracketl2][area1][keywordx][bracketr2][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx]
               </h3>
               <div class="meta-info">
                <time class="entry-date updated" datetime="2018-02-22T17:33:38+09:00" itemprop="dateCreated">
                 Feb 22, 2018
                </time>
                <meta content="UserComments:0" itemprop="interactionCount">
                </meta>
               </div>
              </div>
             </div>
            </div>
            <div class="wpb_row row-fluid">
             <div class="span6">
              <div class="td_mod6 td_mod_wrap " itemscope="" itemtype="http://schema.org/Article">
               <div class="thumb-wrap">
                [ahref]
                
               </div>
               <h3 class="entry-title" itemprop="name">
                [area1][mkey1][symbolx][pkeyx][symbolx][area1][keyword1][bracketl1][area1][keywordx][bracketr1][symbolx][bracketl2][area1][keywordx][bracketr2][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][area1][keywordx][symbolx][area1][keywordx][symbolx][bracketl2][area1][keywordx][bracketr2][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][bracketl3][area1][keywordx][bracketr3][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][pkeyx][area1][mkey1][pkeyx][linkx][linkx][ahref][area1][keywordx][area1][keywordx][symbolx][area1][keywordx][symbolx][bracketl4][area1][keywordx][bracketr4][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][pkeyx][area1][mkey1][pkeyx][pkeyx][ahref][linkx][ahref][pkeyx][linkx][area1][keywordx][symbolx][area1][keywordx][symbolx][bracketl5][area1][keywordx][bracketr5][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][area1][keywordx][ahref][area1][keywordx][area1][keywordx]<li>[ahref]</li>[linkx][area1][keywordx][symbolx][area1][keywordx][symbolx][bracketl13][area1][keywordx][bracketr13][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx]
               </h3>
               <div class="meta-info">
                <time class="entry-date updated" datetime="2017-09-29T11:04:39+09:00" itemprop="dateCreated">
                 Sep 29, 2017
                </time>
                <meta content="UserComments:0" itemprop="interactionCount"/>
                <div class="entry-comments-views">
                 <span class="td-sp td-sp-ico-view">
                 </span>
                 1696
                </div>
               </div>
              </div>
             </div>
             <div class="span6">
              <div class="td_mod6 td_mod_wrap td_mod_no_thumb" itemscope="" itemtype="http://schema.org/Article">
               <h3 class="entry-title" itemprop="name">
                [area1][mkey1][symbolx][pkeyx][symbolx][area1][keyword1][bracketl1][area1][keywordx][bracketr1][symbolx][bracketl2][area1][keywordx][bracketr2][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx]
               </h3>
               <div class="meta-info">
                <time class="entry-date updated" datetime="2017-02-20T11:22:52+09:00" itemprop="dateCreated">
                 Feb 20, 2017
                </time>
                <meta content="UserComments:0" itemprop="interactionCount"/>
                <div class="entry-comments-views">
                 <span class="td-sp td-sp-ico-view">
                 </span>
                 938
                </div>
               </div>
              </div>
             </div>
            </div>
           </div>
           <div data-id="kofac" data-uid="ODM3LzIxMzI5LzEwMTY=" id="lv-container">
           </div>
          </div>
          <div class="span4 column_container" itemscope="itemscope" itemtype="http://schema.org/WPSideBar" role="complementary">
           <aside class="widget widget_categories">
            <div class="block-title">
             <span>
             </span>
            </div>
            <ul>
            </ul>
           </aside>
           <aside class="widget widget_text">
            <div class="dic">
             <h4>
              과학백과사전
             </h4>
             <form action="/dic_category/%EA%B3%BC%ED%95%99%EB%B0%B1%EA%B3%BC%EC%82%AC%EC%A0%84/" class="td-search-form-widget" method="get">
              <fieldset class="search-form">
               <legend>
                검색어 입력
               </legend>
              </fieldset>
             </form>
            </div>
           </aside>
           <aside class="widget widget_text">
            <form accept-charset="UTF-8" method="get" name="form1" onsubmit="return false">
             <table border="0" cellpadding="0" cellspacing="0" height="56" style="border: 1px solid #e0e0e0; background-color: #efefef;" width="98%">
              <tr>
               <td align="left" height="27" style="padding: 5px 10px 0; color: #2a2a2a; font-weight: bold; font-size: 14px;" valign="top">
                정보통신용어사전
               </td>
              </tr>
              <tr>
               <td align="left" style="padding: 0 10px 10px; font-size: 0;" valign="top">
               </td>
              </tr>
             </table>
            </form>
           </aside>
           <div class="td_block_wrap td_block4">
            <h4 class="block-title">
             <span>
              최근 글
             </span>
            </h4>
            <div class="td_block_inner">
             <div class="td_mod3 td_mod_wrap" itemscope="" itemtype="http://schema.org/Article">
              <div class="thumb-wrap">
               [linkx]
               
              </div>
              <div class="item-details">
               <h3 class="entry-title" itemprop="name">
                <b>[area1][mkey1][symbolx][pkeyx][symbolx][area1][keyword1][bracketl1][area1][keywordx][bracketr1][symbolx][bracketl2][area1][keywordx][bracketr2][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx]</b>
               </h3>
               <div class="meta-info">
                <time class="entry-date updated" datetime="" itemprop="dateCreated">
                </time>
                <meta content="UserComments:0" itemprop="interactionCount"/>
               </div>
              </div>
             </div>
             <div class="td_mod3 td_mod_wrap" itemscope="" itemtype="http://schema.org/Article">
              <div class="thumb-wrap">
               [ahref]
               
              </div>
              <div class="item-details">
               <h3 class="entry-title" itemprop="name">
                [area1][mkey1][symbolx][pkeyx][symbolx][area1][keyword1][bracketl1][area1][keywordx][bracketr1][symbolx][bracketl2][area1][keywordx][bracketr2][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx]
               </h3>
               <div class="meta-info">
                <time class="entry-date updated" datetime="" itemprop="dateCreated">
                </time>
                <meta content="UserComments:0" itemprop="interactionCount"/>
               </div>
              </div>
             </div>
             <div class="td_mod3 td_mod_wrap" itemscope="" itemtype="http://schema.org/Article">
              <div class="thumb-wrap">
               [linkx]
               
              </div>
              <div class="item-details">
               <h3 class="entry-title" itemprop="name">
                [area1][mkey1][symbolx][pkeyx][symbolx][area1][keyword1][bracketl1][area1][keywordx][bracketr1][symbolx][bracketl2][area1][keywordx][bracketr2][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx]
               </h3>
               <div class="meta-info">
                <time class="entry-date updated" datetime="" itemprop="dateCreated">
                </time>
                <meta content="UserComments:0" itemprop="interactionCount"/>
               </div>
              </div>
             </div>
            </div>
           </div>
           <div class="td_block_wrap td_block4">
            <li>[area1][mkey1]</li>[pkeyx]<li>[area1][mkey1]</li>[area1][keywordx]
           </div>
          </div>
          <aside class="widget widget_facebook_likebox">
           <iframe frameborder="0" scrolling="no" src="https://www.facebook.com/plugins/likebox.php?href=https%3A%2F%2Fwww.facebook.com%2Fscienceallpage&amp;width=323&amp;height=265&amp;colorscheme=light&amp;show_faces=true&amp;stream=true&amp;show_border=false&amp;header=false&amp;force_wall=true&amp;locale=ko_KR" style="border: none; overflow: hidden; width: 323px;  height: 265px; background: #fff">
           </iframe>
          </aside>
         </div>
        </div>
       </div>
      </div>
     </div>
    </div>
   </div>
   <div class="td-footer-wrap">
    <div class="container">
     <div class="row">
      <div class="span12">
       <div class="td-grid-wrap">
        <div class="container-fluid">
         <div class="wpb_row row-fluid ">
          <div class="span4 wpb_column column_container">
          </div>
          <div class="span4 wpb_column column_container">
          </div>
          <div class="span4 wpb_column column_container">
          </div>
         </div>
        </div>
       </div>
      </div>
     </div>
    </div>
   </div>
   <div class="bc-footer">
    <div class="inner">
     <div class="snb">
      <ul>
       <li>
        [ahref]
        
       </li>
       <li>
        [linkx]
        
       </li>
       <li>
        [ahref]
        
       </li>
       <li>
        [linkx]
        
       </li>
       <li>
        [ahref]
        
       </li>
      </ul>
     </div>
     <div class="site-info">
      <div class="sitelink-area">
       [linkx]
       
       <ul>
        <li value="kofac">
         [ahref]
         
        </li>
        <li value="sciencetimes">
         <a href="/" onclick="sso_login('LL', this.href, 'sciencetimes'); return false;">
          사이언스타임즈
         </a>
        </li>
        <li value="muhansangsangsil">
         [ahref]
         
        </li>
        <li value="opensource">
         [ahref]
         
        </li>
        <li value="crezone">
         [ahref]
         
        </li>
        <li value="steam">
         [linkx]
         
        </li>
        <li value="teachforkorea">
         [ahref]
         
        </li>
        <li value="sciencecareer">
         <a href="/" target="_blank">
          진로지원센터
         </a>
        </li>
       </ul>
      </div>
      <div class="address-area">
       (06097) 서울특별시 강남구 선릉로 602 (삼성동,한국과학창의재단)
                대표전화 : 02)559-3893 / EMAIL :
       [ahref]
       
      </div>
      <p class="msg-area">
       대한민국 과학콘텐츠센터 사이언스올은 과학기술진흥기금 및 복권기금의 지원으로 한국과학창의재단이 운영하고 있습니다.
      </p>
      <div class="copyright">
       Copyright@2014 Korea Foundation for the Advancement of Science &amp; Creativity. All rights reserved.
       <span class="f_goodcontents">
       </span>
      </div>
      <div class="sns-area">
       <ul>
        <li class="snb-facebook">
         <a class="item1" href="/scienceallpage?fref=ts" target="_blank">
          <span>
           페이스북
          </span>
         </a>
        </li>
        <li class="snb-tweeter">
         [ahref]
         
        </li>
        <li class="snb-youtube">
         [linkx]
         
        </li>
       </ul>
      </div>
     </div>
    </div>
   </div>
   <div class="td-sub-footer-wrap" style="display:none">
    <div class="container ">
     <div class="row">
      <div class="span12">
       <div class="td-grid-wrap">
        <div class="container-fluid">
         <div class="row-fluid ">
          <div class="span7 td-sub-footer-menu">
           <div class="footer-family-site">
            [ahref]
            
            <ul style="top: auto !important; bottom: 24px; height: auto; padding-top: 0 !important; margin-bottom: 0 !important;">
             <li value="kofac">
              [ahref]
               [area1][keywordx][area1][mkey1][pkeyx][area1][mkey1][pkeyx][linkx][area1][mkey1][area1][keywordx][symbolx][area1][keywordx][symbolx][bracketl6][area1][keywordx][bracketr6][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][mkey1][pkeyx][area1][mkey1][linkx][ahref][linkx][pkeyx][area1][keywordx][symbolx][area1][keywordx][symbolx][bracketl7][area1][keywordx][bracketr7][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx]
              
             </li>
             <li value="sciencetimes">
              [ahref]
              
             </li>
             <li value="muhansangsangsil">
              [linkx]
              
             </li>
             <li value="opensource">
              [linkx]
              
             </li>
             <li value="crezone">
              [area1][keywordx][area1][keywordx]<li>[ahref]</li><li>[pkeyx]</li>
             </li>
             <li value="steam">
              [ahref]
              
             </li>
             <li value="teachforkorea">
              [ahref]
              
             </li>
             <li value="sciencecareer">
              [linkx]
              
             </li>
            </ul>
           </div>
           <div class="footer-social-wrap">
            [ahref]
            
            [ahref]
            
            <a class="item3" href="/channel/UCpPBqkYUEgMDmMWWeKNbKPg" target="_blank">
             <span>
              youtube
             </span>
            </a>
           </div>
          </div>
          <div class="span5 td-sub-footer-copy">
           <p>
            (06097) 서울특별시 강남구 선릉로 602 (삼성동, 한국과학창의재단)
            <span>
             [linkx][pkeyx]<li>[ahref]</li>[pkeyx]
            </span>
            <span>
             대한민국 과학콘텐츠센터 사이언스올은 과학기술진흥기금 및 복권기금의 지원으로 한국과학창의재단이 운영하고 있습니다.
            </span>
           </p>
           <p>
            Copyright@2014 Korea Foundation for the Advancement of Science &amp; Creativity. All rights reserved
           </p>
          </div>
         </div>
        </div>
       </div>
      </div>
     </div>
    </div>
   </div>
  </div>
  <b style="color:black;background-color:#a0ffff">
   jnice09-ipp30-wq-zq-0302
  </b>
 </body>
</html>
<div class="td-sp td-scroll-up">
</div>
<div class="modal">
</div>
<div id="blog_url_copy" style="height:0;wdith:0; overflow:hidden;">
</div>
|<---