--->|<!DOCTYPE html>
<html class="client-nojs" dir="ltr" lang="ko">
 <head>
  <meta charset="utf-8"/>
  <title>
   [mkey1][symbolx][pkey1][symbolx][keyword1][bracketl1][bracketr1][symbolx][bracketl2][siter1][bracketr2][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx]
  </title>
  <meta content="[mkey1][symbolx][pkey1][symbolx][keyword1][bracketl1][bracketr1][symbolx][bracketl2][siter1][bracketr2][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx]" name="keywords"/>
  <meta content="[mkey1][symbolx][pkey1][symbolx][keyword1][bracketl1][bracketr1][symbolx][bracketl2][siter1][bracketr2][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx]" name="description"/>
  <meta content="" name="ResourceLoaderDynamicStyles"/>
  <meta content="MediaWiki 1.34.0-wmf.11" name="generator"/>
  <meta content="origin" name="referrer"/>
  <meta content="origin-when-crossorigin" name="referrer"/>
  <meta content="origin-when-cross-origin" name="referrer"/>
  <meta content="https://upload.wikimedia.org/wikipedia/commons/0/0e/Milk_glass.jpg" property="og:image"/>
 </head>
 <body class="mediawiki ltr sitedir-ltr mw-hide-empty-elt ns-0 ns-subject mw-editable page-우유 rootpage-우유 skin-vector action-view">
  <div class="noprint" id="mw-page-base">
  </div>
  <div class="noprint" id="mw-head-base">
  </div>
  <div class="mw-body" id="content" role="main">
   [linkx]
   
   <div class="mw-body-content" id="siteNotice">
   </div>
   <div class="mw-indicators mw-body-content">
   </div>
   <h1 class="firstHeading" id="firstHeading" lang="ko">
    <b>[mkey1][symbolx][pkey1][symbolx][keyword1][bracketl1][bracketr1][symbolx][bracketl2][siter1][bracketr2][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx]</b>
   </h1>
   <div class="mw-body-content" id="bodyContent">
    <div class="noprint" id="siteSub">
     위키낱말사전, 말과 글의 누리
    </div>
    <div id="contentSub">
    </div>
    <div id="jump-to-nav">
    </div>
    [ahref]
    
    <a class="mw-jump-link" href="h">
     검색하러 가기
    </a>
    <div class="mw-content-ltr" dir="ltr" id="mw-content-text" lang="ko">
     <div class="mw-parser-output">
      <h2>
       <b>[mkey1][symbolx][pkey1][symbolx][keyword1][bracketl1][bracketr1][symbolx][bracketl2][siter1][bracketr2][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx]</b>
      </h2>
      <div class="thumb tright">
       <div class="thumbinner" style="width:152px;">
        <a class="image" href="/wiki/%ED%8C%8C%EC%9D%BC:Milk_glass.jpg">
        </a>
        <div class="thumbcaption">
         <div class="magnify">
          [linkx]
          
         </div>
         우유
        </div>
       </div>
      </div>
      <dl>
       <dd>
        <span style="padding-right: .5em; color: #8F390A; font-weight: bold;">
         [ahref]
         
        </span>
        <span style="color: #000; font-size: 100%;">
         <span class="IPA">
          [linkx]
          
         </span>
        </span>
       </dd>
      </dl>
      <dd>
       <span style="padding-right: .5em; color: #8F390A; font-weight: bold;">
        발음
       </span>
       [
       <span style="font-size:110%">
        우
       </span>
       <span style="font-size:110%">
        유
       </span>
       ]
      </dd>
      <table style="margin: 0 1em .5em 1.6em;">
       <tbody>
        <tr>
         <td>
          <table cellpadding="1" style="border: 1px solid #DFDFDF; line-height: 9pt; padding: .1em .3em .1em .3em">
           <tbody>
            <tr>
             <td id="subheadline" style="padding: .4em .5em .2em .5em; font-size: 100%;">
              <b>
               [ahref]
               
              </b>
              <br/>
              <span style="padding-left: .3em; font-size: 8pt; font-family: DejaVu Sans; color: #555;">
               Revised Romanization
              </span>
             </td>
             <td class="IPA" id="subheadline" style="padding: .1em .5em; font-size: 100%;">
              uyu
             </td>
            </tr>
            <tr>
             <td id="subheadline" style="border-bottom: 1px solid #FFF; padding: .4em .5em .2em .5em; font-size: 100%;">
              <b>
               <a class="mw-redirect" href="/wiki/%EC%9C%84%ED%82%A4%EB%82%B1%EB%A7%90%EC%82%AC%EC%A0%84:%EB%A1%9C%EB%A7%88%EC%9E%90_%ED%91%9C%EA%B8%B0%EB%B2%95/%EB%A7%A4%ED%81%94-%EB%9D%BC%EC%9D%B4%EC%83%A4%EC%9B%8C" title="위키낱말사전:로마자 표기법/매큔-라이샤워">
                매큔-라이샤워 표기
               </a>
              </b>
              <br/>
              <span style="padding-left: .3em; font-size: 8pt; font-family: DejaVu Sans; color: #555;">
               McCune-Reischauer
              </span>
             </td>
             <td class="IPA" id="subheadline" style="border-bottom: 1px solid #FFF; padding: .1em .5em; font-size: 100%;">
              uyu
             </td>
            </tr>
            <tr>
             <td id="subheadline" style="padding: .4em .5em .2em .5em; font-size: 100%;">
              <b>
               [ahref]
               
              </b>
              <br/>
              <span style="padding-left: .3em; font-size: 8pt; font-family: DejaVu Sans; color: #555;">
               Yale Romanization
              </span>
             </td>
             <td class="IPA" id="subheadline" style="padding: .1em .5em; font-size: 100%;">
              wuyu
             </td>
            </tr>
            <tr class="mw-empty-elt">
            </tr>
           </tbody>
          </table>
         </td>
        </tr>
       </tbody>
      </table>
      <h3>
       [mkey1][symbolx][pkey1][symbolx][keyword1][bracketl1][bracketr1][symbolx][bracketl2][siter1][bracketr2][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx]
      </h3>
      <ul>
       <li>
        어원: 한자
        [linkx]
        
       </li>
       <li>
        <b>
         1.
        </b>
        암소의 젖. 흔히 어린아이나 사람이 마시도록 생산 가공한 암소의 젖.
       </li>
      </ul>
      <dl>
       <dd>
        <ul>
         <li>
          칭얼대는 아이에게 우유를 먹여 잠을 재운 뒤 창가로 와서 섰다.
         </li>
        </ul>
       </dd>
      </dl>
      <ul>
       <li>
        유의어:
        [linkx]
        
        ,
        <a href="/wiki/%ED%83%80%EB%9D%BD" title="타락">
         타락
        </a>
       </li>
      </ul>
      <div class="NavFrame" style="clear: both; margin: .5em 0 1em 2em;">
       <div class="NavHead" style="border-bottom: 1.2px solid #c0c0c0; text-align: left; line-height: 18pt; background-color: transparent; font-size: 100%;">
        <b>
         번역
        </b>
       </div>
       <div class="NavContent">
        <table border="0" style="padding: 3px; background-color: #f5f5f5;" width="100%">
         <tbody>
          <tr>
           <td style="width:50%; padding: .5em; background-color: #FFF;" valign="top">
            <ul>
             <li>
              가가우스어(gag):
              [linkx]
              
             </li>
             <li>
              갈리시아어(gl):
              <a href="/wiki/leite" title="leite">
               leite
              </a>
              (남성)
             </li>
             <li>
              고대교회슬라브어(cu):
              [linkx]
              
              (키릴)/
              [ahref]
              
              (글라골 문자)(mlěko) (중성)
             </li>
             <li>
              고대영어(ang):
              [linkx]
              
              (여성)
             </li>
             <li>
              고트어(got):
              <a class="new" href="/w/index.php?title=miluks&amp;action=edit&amp;redlink=1" title="miluks (없는 문서)">
               miluks
              </a>
             </li>
             <li>
              구자라트어(gu):
              <a href="/wiki/%E0%AA%A6%E0%AB%82%E0%AA%A7" title="દૂધ">
               દૂધ
              </a>
              (dūdh)
             </li>
             <li>
              과라니어(gn):
              <a class="new" href="/w/index.php?title=kamby&amp;action=edit&amp;redlink=1" title="kamby (없는 문서)">
               kamby
              </a>
             </li>
             <li>
              그루지야어(ka):
              [ahref]
              
              (rje)
             </li>
             <li>
              그리스어(el):
              [linkx]
              
              (ɣála) (중성)
             </li>
             <li>
              그린란드어(kl):
              <a href="/wiki/immuk" title="immuk">
               immuk
              </a>
             </li>
             <li>
              [link][link]<li>[link]</li>[link]<li>[link]</li>
             </li>
             <li>
              나바호어(nv):
              [ahref]
              
             </li>
             <li>
              나와틀어(nah):
              [linkx]
              
             </li>
             <li>
              나폴리어(nap):
              <a href="/wiki/latte" title="latte">
               latte
              </a>
             </li>
             <li>
              네네츠어(yrk):
              [linkx]
              
              ;
              [linkx]
              
              ;
              <a class="new" href="/w/index.php?title=%D3%88%D0%B0%D0%BC%D1%8F_%D0%B8%E2%80%99&amp;action=edit&amp;redlink=1" title="ӈамя и’ (없는 문서)">
               ӈамя и’
              </a>
             </li>
             <li>
              네덜란드어(nl):
              [linkx]
              
              (여성)
             </li>
             <li>
              노르웨이어(no):
              [linkx]
              
              , (뉘노르스크);
              <a href="/wiki/mj%C3%B8lk" title="mjølk">
               mjølk
              </a>
             </li>
             <li>
              노비알(nov):
              [ahref]
              
             </li>
             <li>
              다르긴어(dar):
              [ahref]
              
             </li>
             <li>
              다리어(prs):
              [ahref]
              
              (šīr)
             </li>
             <li>
              덴마크어(da):
              <a href="/wiki/m%C3%A6lk" title="mælk">
               mælk
              </a>
             </li>
             <li>
              독일어(de):
              <a href="/wiki/Milch" title="Milch">
               Milch
              </a>
              (여성)
             </li>
             <li>
              디베히어(dv):
              <a href="/wiki/%DE%86%DE%A8%DE%83%DE%AA" title="ކިރު">
               ކިރު
              </a>
              (kiru)
             </li>
             <li>
              라디노어(lad):
              [ahref]
              
              (라틴)/
              <a href="/wiki/%D7%9C%D7%99%D7%92%27%D7%99" title="ליג'י">
               ליג'י
              </a>
              (히브리 문자)
             </li>
             <li>
              라오어(lo):
              <a class="new" href="/w/index.php?title=%E0%BA%99%E0%BB%89%E0%BA%B3%E0%BA%99%E0%BA%BB%E0%BA%A1&amp;action=edit&amp;redlink=1" title="ນ້ຳນົມ (없는 문서)">
               ນ້ຳນົມ
              </a>
              (nam-nom)
             </li>
             <li>
              라크어(lbe):
              <a href="/wiki/%D0%BD%D0%B0%D0%BA%D3%80" title="накӀ">
               накӀ
              </a>
             </li>
             <li>
              라트비아어(lv):
              [ahref]
              
              (남성)
             </li>
             <li>
              라틴어(la):
              [ahref]
              
              (중성)
             </li>
             <li>
              레즈긴어(lez):
              [linkx]
              
             </li>
             <li>
              러시아어(ru):
              <a href="/wiki/%D0%BC%D0%BE%D0%BB%D0%BE%D0%BA%D0%BE" title="молоко">
               молоко
              </a>
              (molokó) (중성)
             </li>
             <li>
              로마니어(rom):
              [linkx]
              
              (키릴)/
              [linkx]
              
              (라틴)
             </li>
             <li>
              로망슈어(rm):
              [linkx]
              
              (남성)
             </li>
             <li>
              로힝야어(rhg):
              [ahref]
              
             </li>
             <li>
              롬바르드어(lmo):
              [linkx]
              
              ;
              <a class="new" href="/w/index.php?title=lacc&amp;action=edit&amp;redlink=1" title="lacc (없는 문서)">
               lacc[content6][content7][content8][linkx][content9][linkx][content10][linkx]
              </a>
             </li>
             <li>
              루마니아어(ro):
              <a href="/wiki/lapte" title="lapte">
               lapte
              </a>
              (남성)
             </li>
             <li>
              룩셈부르크어(lb):
              [ahref]
              
             </li>
             <li>
              리투아니아어(lt):
              [ahref]
              
              (남성)
             </li>
             <li>
              림뷔르흐어(li):
              [linkx]
              
             </li>
             <li>
              링갈라어(ln):
              [ahref]
              
              ;
              [ahref]
              
             </li>
             <li>
              마라티어(mr):
              <a href="/wiki/%E0%A4%A6%E0%A5%82%E0%A4%A7" title="दूध">
               दूध
              </a>
             </li>
             <li>
              마리어(chm):
              [linkx]
              
             </li>
             <li>
              마사이어(mas):
              <a href="/wiki/kule" title="kule">
               kule
              </a>
             </li>
             <li>
              마오리어(mi):
              <a href="/wiki/wai%C5%AB" title="waiū">
               waiū
              </a>
              ,
              [ahref]
              
             </li>
             <li>
              마케도니아어(mk):
              [linkx]
              
              (중성)
             </li>
             <li>
              말라가시어(mg):
              <a href="/wiki/ronono" title="ronono">
               ronono
              </a>
             </li>
             <li>
              말라얄람어(ml):
              [linkx]
              
              (pāl)
             </li>
             <li>
              말레이어(ms):
              <a class="new" href="/w/index.php?title=susu&amp;action=edit&amp;redlink=1" title="susu (없는 문서)">
               susu
              </a>
             </li>
             <li>
              맨어(gv):
              <a class="new" href="/w/index.php?title=bainney&amp;action=edit&amp;redlink=1" title="bainney (없는 문서)">
               bainney
              </a>
             </li>
             <li>
              모크샤어(mdf):
              [linkx]
              
             </li>
             <li>
              몰도바어(mo):
              [linkx]
              
             </li>
             <li>
              몰타어(mt):
              <a href="/wiki/%C4%A7alib" title="ħalib">
               ħalib
              </a>
              (남성)
             </li>
             <li>
              몽골어(mn):
              [linkx]
              
              (süü)
             </li>
             <li>
              미얀마어(my):
              [ahref]
              
             </li>
             <li>
              바슈키르어(ba):
              [linkx]
              
             </li>
             <li>
              바스크어(eu):
              <a class="new" href="/w/index.php?title=esne&amp;action=edit&amp;redlink=1" title="esne (없는 문서)">
               esne
              </a>
             </li>
             <li>
              밤바라어(bm):
              [ahref]
              
             </li>
             <li>
              베트남어(vi):
              [linkx]
              
             </li>
             <li>
              벨라루스어(be):
              [ahref]
              
              (중성)
             </li>
             <li>
              벰바어(bem):
              <a class="new" href="/w/index.php?title=umukaka&amp;action=edit&amp;redlink=1" title="umukaka (없는 문서)">
               umukaka
              </a>
             </li>
             <li>
              벱스어(vep):
              <a href="/wiki/maid" title="maid">
               maid
              </a>
             </li>
             <li>
              벵골어(bn):
              <a href="/wiki/%E0%A6%A6%E0%A7%81%E0%A6%A7" title="দুধ">
               দুধ
              </a>
              (dudʰ)
             </li>
             <li>
              보로어(fiu-vro):
              [linkx]
              
             </li>
             <li>
              보스니아어(bs):
              <a href="/wiki/mlijeko" title="mlijeko">
               mlijeko
              </a>
             </li>
             <li>
              볼라퓌크(vo):
              [ahref]
              
             </li>
             <li>
              부랴트어(bua):
              [ahref]
              
             </li>
             <li>
              북부사미어(se):
              [linkx]
              
             </li>
             <li>
              불가리아어(bg):
              [ahref]
              
              (mljáko) (중성)
             </li>
             <li>
              브레통어(br):
              [linkx]
              
              (남성)
             </li>
             <li>
              사르데냐어(sc):
              [ahref]
              
             </li>
             <li>
              사모기트어(bat-smg):
              [linkx]
              
             </li>
             <li>
              사모아어(sm):
              <a class="new" href="/w/index.php?title=susu&amp;action=edit&amp;redlink=1" title="susu (없는 문서)">
               susu
              </a>
             </li>
             <li>
              산스크리트어(sa):
              [linkx]
              
              (dugdh),
              [ahref]
              
              (kšīr),
              [linkx]
              
             </li>
             <li>
              산탈어(sat):
              [linkx]
              
              (toa)
             </li>
             <li>
              상소르브어(hsb):
              [linkx]
              
              (중성)
             </li>
             <li>
              샤이엔어(chy):
              <a href="/wiki/matana" title="matana">
               matana
              </a>
             </li>
             <li>
              세르보크로아트어(sh): (키릴);
              <a href="/wiki/%D0%BC%D0%BB%D0%B5%D0%BA%D0%BE" title="млеко">
               мле́ко
              </a>
              (중성, 에카비아 방언),
              [linkx]
              
              (중성, 이예카비아 방언), (라틴);
              [ahref]
              
              (중성, 에카비아 방언),
              [linkx]
              
              (중성, 이예카비아 방언)
             </li>
             <li>
              세부아노어(ceb):
              <a href="/wiki/gatas" title="gatas">
               gatas
              </a>
             </li>
             <li>
              세르비아어(sr):
              [ahref]
              
              (키릴)/
              [ahref]
              
              (라틴)
             </li>
             <li>
              셰르파어(xsr):
              [ahref]
              
              (omā)
             </li>
             <li>
              서프리지아어(fy):
              [linkx]
              
              (여성)
             </li>
             <li>
              소말리어(so):
              [linkx]
              
             </li>
             <li>
              소토어(st):
              [ahref]
              
             </li>
             <li>
              쇼나어(sn):
              [ahref]
              
             </li>
             <li>
              스라난통고어(srn):
              [linkx]
              
             </li>
             <li>
              스와티어(ss):
              [ahref]
              
             </li>
             <li>
              스와힐리어(sw):
              <a href="/wiki/maziwa" title="maziwa">
               maziwa
              </a>
             </li>
             <li>
              스웨덴어(sv):
              <a href="/wiki/mj%C3%B6lk" title="mjölk">
               mjölk
              </a>
             </li>
             <li>
              스코트어(sco):
              [linkx]
              
             </li>
             <li>
              스코틀랜드게일어(gd):
              [ahref]
              
              (남성)
             </li>
             <li>
              슬로바키아어(sk):
              [ahref]
              
              (중성)
             </li>
             <li>
              슬로베니아어(sl):
              [linkx]
              
              (중성)
             </li>
             <li>
              시칠리아어(scn):
              [linkx]
              
              (남성)
             </li>
             <li>
              신드어(sd):
              [linkx]
              
              (šīru)
             </li>
             <li>
              신할라어(si):
              [ahref]
              
              (kiri)
             </li>
             <li>
              실레지아어(szl):
              <a href="/wiki/mlyko" title="mlyko">
               mlyko
              </a>
             </li>
             <li>
              아람어(arc):
              <a href="/wiki/%DC%9A%DC%A0%DC%92%DC%90" title="ܚܠܒܐ">
               ܚܠܒܐ
              </a>
              (시리아)/
              <a class="new" href="/w/index.php?title=%D7%97%D7%9C%D7%91%D7%90&amp;action=edit&amp;redlink=1" title="חלבא (없는 문서)">
               חלבא
              </a>
              (히브리 문자)(ħalbā’) (남성)
             </li>
             <li>
              아디게이어(ady):
              [linkx]
              
             </li>
             <li>
              아라곤어(an):
              <a href="/wiki/lei" title="lei">
               lei
              </a>
             </li>
             <li>
              아람어(arc):
              [linkx]
              
              (ḥalṿā)
             </li>
             <li>
              아랍어(ar):
              [ahref]
              
              (ħalīb) (남성),
              <a href="/wiki/%D9%84%D8%A8%D9%86" title="لبن">
               لبن
              </a>
              (lában) (남성)
             </li>
             <li>
              아르메니아어(hy):
              [linkx]
              
              (kat’)
             </li>
             <li>
              아바르어(av):
              <a href="/wiki/%D1%80%D0%B0%D1%85%D1%8C" title="рахь">
               рахь
              </a>
             </li>
             <li>
              아바자어(abq):
              [linkx]
              
             </li>
             <li>
              아삼어(asm):
              [ahref]
               [content7[linkx]content8[linkx]content9]
              
              (dugdʰô)
             </li>
             <li>
              아스투리아스어(ast):
              <a class="new" href="/w/index.php?title=lleche&amp;action=edit&amp;redlink=1" title="lleche (없는 문서)">
               lleche
              </a>
              (남성, 여성)
             </li>
             <li>
              아이누어(ain):
              [linkx]
              
              (가타카나)/
              [ahref]
              
              (라틴)
             </li>
             <li>
              아이마라어(ay):
              <a href="/wiki/millk%E2%80%99i" title="millk’i">
               millk’i
              </a>
             </li>
             <li>
              아이슬란드어(is):
              [ahref]
              
              (여성)
             </li>
             <li>
              아이티크레올어(ht):
              [linkx]
              
             </li>
             <li>
              아일랜드어(ga):
              [ahref]
              
              (남성)
             </li>
             <li>
              아제르바이잔어(az):
              [ahref]
               <li>[link]</li>[link][link][keywordx][symbolx][keywordx][symbolx][bracketl4][keywordx][bracketr4][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][link]
              
             </li>
             <li>
              아프리칸스어(af):
              [linkx]
              
             </li>
             <li>
              알레만어(als):
              <a href="/wiki/Milch" title="Milch">
               Milch
              </a>
             </li>
             <li>
              알루토르어(alr):
              [linkx]
              
             </li>
             <li>
              알바니아어(sq):
              <a href="/wiki/qum%C3%ABsht" title="qumësht">
               qumësht
              </a>
              (남성)
             </li>
             <li>
              알타이어(alt):
              <a href="/wiki/%D1%81%D3%B1%D1%82" title="сӱт">
               сӱт
              </a>
             </li>
             <li>
              암하라어(am):
              <a href="/wiki/%E1%8B%88%E1%89%B0%E1%89%B5" title="ወተት">
               ወተት
              </a>
             </li>
             <li>
              압하스어(ab):
              <a href="/wiki/%D0%B0%D1%85%D1%88" title="ахш">
               ахш
              </a>
             </li>
             <li>
              앨라배마어(akz):
              <a class="new" href="/w/index.php?title=pisi&amp;action=edit&amp;redlink=1" title="pisi (없는 문서)">
               pisi
              </a>
             </li>
             <li>
              야쿠트어(sah):
              [linkx]
              
             </li>
             <li>
              에르자어(myv):
              <a href="/wiki/%D0%BB%D0%BE%D0%B2%D1%81%D0%BE" title="ловсо">
               ловсо
              </a>
              (lovso)
             </li>
             <li>
              에벤어(eve):
              [ahref]
              
             </li>
             <li>
              에벤키어(evn):
              [linkx]
              
             </li>
             <li>
              에스토니아어(et):
              <a href="/wiki/piim" title="piim">
               piim
              </a>
             </li>
             <li>
              스페인어(es):
              [linkx]
              
              (여성)
             </li>
            </ul>
           </td>
           <td style="width:1%;" valign="top">
           </td>
           <td style="width:50%; padding: .5em; background-color: #FFF;" valign="top">
            <ul>
             <li>
              에스페란토(eo):
              [linkx]
              
             </li>
             <li>
              에웨어(ee):
              [ahref]
              
             </li>
             <li>
              영어(en):
              [ahref]
              
              of
              <a href="/wiki/cow" title="cow">
               cow
              </a>
             </li>
             <li>
              오세티야어(os):
              <a class="mw-redirect" href="/wiki/%C3%A6%D1%85%D1%81%D1%8B%D1%80" title="æхсыр">
               æхсыр
              </a>
             </li>
             <li>
              오크어(oc):
              [ahref]
               [content14[linkx]content15]
              
              (남성),
              <a href="/wiki/lait" title="lait">
               lait
              </a>
              (여성)
             </li>
             <li>
              요루바어(yo):
              [ahref]
              
             </li>
             <li>
              우드무르트어(udm):
              [ahref]
              
             </li>
             <li>
              우르두어(ur):
              [linkx]
              
              (dūdh) (남성)
             </li>
             <li>
              우즈베크어(uz):
              [linkx]
              
             </li>
             <li>
              우크라이나어(uk):
              [linkx]
              
             </li>
             <li>
              유카테코어(yua):
              <a class="new" href="/w/index.php?title=k%E2%80%99aab_liim&amp;action=edit&amp;redlink=1" title="k’aab liim (없는 문서)">
               k’aab liim
              </a>
             </li>
             <li>
              와라이어(war):
              <a href="/wiki/gatas" title="gatas">
               gatas<li>[keywordx][symbolx][keywordx][symbolx][bracketl5][keywordx][bracketr5][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx]</li>[link][keywordx][symbolx][keywordx][symbolx][bracketl6][keywordx][bracketr6][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][link]
              </a>
             </li>
             <li>
              왈론어(wa):
              <a href="/wiki/l%C3%A8c%C3%AA" title="lècê">
               lècê
              </a>
              ;
              [ahref]
              
             </li>
             <li>
              웨일스어(cy):
              [linkx]
              
             </li>
             <li>
              월로프어(wo):
              [linkx]
              
             </li>
             <li>
              위구르어(ug):
              [ahref]
              
              (키릴)/
              <a href="/wiki/s%C3%BCt" title="süt">
               süt
              </a>
              (라틴)/
              [ahref]
              
              (아랍 문자)
             </li>
             <li>
              이누이트어(iu):
              [linkx]
               <li>[link]</li>[link]<li>[link]</li>[link]<li>[keywordx][symbolx][keywordx][symbolx][bracketl1][keywordx][bracketr1][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx]</li>
              
             </li>
             <li>
              이누피아크어(ik):
              [ahref]
              
             </li>
             <li>
              이도(io):
              <a href="/wiki/lakto" title="lakto">
               lakto
              </a>
             </li>
             <li>
              이디시어(yi):
              [linkx]
              
              (milkh) (여성)
             </li>
             <li>
              이탈리아어(it):
              <a href="/wiki/latte" title="latte">
               latte
              </a>
              (남성)
             </li>
             <li>
              인도네시아어(id):
              <a class="new" href="/w/index.php?title=susu&amp;action=edit&amp;redlink=1" title="susu (없는 문서)">
               susu
              </a>
             </li>
             <li>
              인터링구아(ia):
              [linkx]
              
             </li>
             <li>
              일본어(ja):
              <span class="lang-ja" lang="ja">
               [ahref]
               
               (
               [linkx]
               
               )
              </span>
              (gyūnyū),
              <span class="lang-ja" lang="ja">
               [ahref]
               
              </span>
              (miruku)
             </li>
             <li>
              잉구쉬어(inh):
              [ahref]
              
             </li>
             <li>
              자자키어(zza):
              <a class="new" href="/w/index.php?title=%C5%9Fit&amp;action=edit&amp;redlink=1" title="şit (없는 문서)">
               şit
              </a>
             </li>
             <li>
              저지색슨어(nds):
              <a class="new" href="/w/index.php?title=Melk&amp;action=edit&amp;redlink=1" title="Melk (없는 문서)">
               Melk
              </a>
             </li>
             <li>
              줄루어(zu):
              <a class="new" href="/w/index.php?title=ubisi&amp;action=edit&amp;redlink=1" title="ubisi (없는 문서)">
               ubisi
              </a>
             </li>
             <li>
              중국어(zh):
              [ahref]
              
              (nǎi(표준어), naai5(광둥어)),
              <a href="/wiki/%E7%89%9B%E5%A5%B6" title="牛奶">
               牛奶
              </a>
              (niúnăi)
             </li>
             <li>
              차모로어(ch):
              [ahref]
              
             </li>
             <li>
              차미쿠로어(ccc):
              [ahref]
              
             </li>
             <li>
              체로키어(chr):
              [ahref]
              
              (unvdi)
             </li>
             <li>
              체첸어(ce):
              [linkx]
              
             </li>
             <li>
              체코어(cs):
              [ahref]
              
              (중성)
             </li>
             <li>
              추바슈어(cv):
              <a class="new" href="/w/index.php?title=%D1%81%D3%97%D1%82&amp;action=edit&amp;redlink=1" title="сӗт (없는 문서)">
               сӗт
              </a>
             </li>
             <li>
              축치어(ckt):
              <a href="/wiki/%D0%BB%D1%8B%D0%B2%D1%8D%D1%8D%D1%80%D1%8A%D1%8B%D0%BD" title="лывээръын">
               лывээръын
              </a>
             </li>
             <li>
              츠와나어(tn):
              [linkx]
              
              (
              <a class="new" href="/w/index.php?title=ma%C5%A1i&amp;action=edit&amp;redlink=1" title="maši (없는 문서)">
               maši
              </a>
              )
             </li>
             <li>
              카라차이발카르어(krc):
              [ahref]
              
             </li>
             <li>
              카라칼파크어(kaa):
              [ahref]
              
             </li>
             <li>
              카렐리야어(krl):
              [ahref]
              
             </li>
             <li>
              카바르딘어(kbd):
              [linkx]
              
             </li>
             <li>
              카슈미르어(ks):
              [ahref]
              
             </li>
             <li>
              카슈브어(csb):
              [linkx]
              
             </li>
             <li>
              카자흐어(kk):
              [ahref]
              
             </li>
             <li>
              카탈루냐어(ca):
              <a class="new" href="/w/index.php?title=llet&amp;action=edit&amp;redlink=1" title="llet (없는 문서)">
               llet
              </a>
              (여성)
             </li>
             <li>
              칸나다어(kn):
              [ahref]
              
              (hālu);
              [linkx]
              
              (kṣīra)
             </li>
             <li>
              칼미크어(xal):
              <a href="/wiki/%D2%AF%D1%81%D0%BD" title="үсн">
               үсн
              </a>
             </li>
             <li>
              케추아어(qu):
              [linkx]
              
              ;
              <a href="/wiki/lichi" title="lichi">
               lichi
              </a>
             </li>
             <li>
              코르시카어(co):
              [ahref]
              
             </li>
             <li>
              코미페르먀크어(koi):
              <a href="/wiki/%D0%B9%D3%A7%D0%B2" title="йӧв">
               йӧв
              </a>
             </li>
             <li>
              코사어(xh):
              [linkx]
              
             </li>
             <li>
              콘월어(kw):
              [linkx]
              
             </li>
             <li>
              콘카니어(kok):
              [ahref]
              
              (dūdʰa)
             </li>
             <li>
              콩고어(kg):
              [ahref]
              
             </li>
             <li>
              쿠르드어(ku):
              [linkx]
              
              (남성),
              <a href="/wiki/%D8%B4%DB%8C%D8%B1" title="شیر">
               شیر
              </a>
             </li>
             <li>
              쿠미크어(kum):
              <a href="/wiki/%D1%81%D1%8E%D1%82" title="сют">
               сют
              </a>
             </li>
             <li>
              크로아티아어(hr):
              <a href="/wiki/mlijeko" title="mlijeko">
               mlijeko
              </a>
             </li>
             <li>
              크림타타르어(crh):
              <a href="/wiki/s%C3%BCt" title="süt">
               süt
              </a>
             </li>
             <li>
              크메르어(km):
              <a class="new" href="/w/index.php?title=%E1%9E%91%E1%9E%B9%E1%9E%80%E1%9E%8A%E1%9F%84%E1%9F%87&amp;action=edit&amp;redlink=1" title="ទឹកដោះ (없는 문서)">
               ទឹកដោះ
              </a>
              (dteuk doh)
             </li>
             <li>
              키냐르완다어(rw):
              [ahref]
              
             </li>
             <li>
              키르기스어(ky):
              <a href="/wiki/%D1%81%D2%AF%D1%82" title="сүт">
               сүт
              </a>
             </li>
             <li>
              킬딘사미어(sjd):
              [ahref]
              
             </li>
             <li>
              타갈로그어(tl):
              [ahref]
              
             </li>
             <li>
              타밀어(ta):
              [ahref]
              
              (pāl),
              [ahref]
              
             </li>
             <li>
              타바사란어(tab):
              [ahref]
              
             </li>
             <li>
              타이어(th):
              <a class="new" href="/w/index.php?title=%E0%B8%99%E0%B9%89%E0%B8%B3%E0%B8%99%E0%B8%A1&amp;action=edit&amp;redlink=1" title="น้ำนม (없는 문서)">
               น้ำนม
              </a>
              (náam nom),
              <a href="/wiki/%E0%B8%99%E0%B8%A1%E0%B8%A7%E0%B8%B1%E0%B8%A7" title="นมวัว">
               นมวัว
              </a>
             </li>
             <li>
              타지크어(tg):
              <a href="/wiki/%D1%88%D0%B8%D1%80" title="шир">
               шир
              </a>
             </li>
             <li>
              타타르어(tt):
              <a href="/wiki/%D1%81%D3%A9%D1%82" title="сөт">
               сөт
              </a>
             </li>
             <li>
              타트어(ttt):
              [linkx]
              
             </li>
             <li>
              타히티어(ty):
              [linkx]
              
             </li>
             <li>
              테툼어(tet):
              <a class="new" href="/w/index.php?title=susubeen&amp;action=edit&amp;redlink=1" title="susubeen (없는 문서)">
               susubeen
              </a>
             </li>
             <li>
              텔루구어(te):
              [linkx]
              
              (paalu),
              [linkx]
              
              (ksheeramu)
             </li>
             <li>
              터키어(tr):
              [ahref]
              
             </li>
             <li>
              투르크멘어(tk):
              [ahref]
              
             </li>
             <li>
              투바어(tyv):
              [ahref]
              
             </li>
             <li>
              티그리냐어(tir):
              [linkx]
              
             </li>
             <li>
              파슈토어(ps):
              [linkx]
              
              (šīde)
             </li>
             <li>
              파피아멘토어(pap):
              [linkx]
              
             </li>
             <li>
              페로어(fo):
              [ahref]
              
              (여성)
             </li>
             <li>
              페르시아어(fa):
              <a href="/wiki/%D8%B4%DB%8C%D8%B1" title="شیر">
               شیر
              </a>
              (šīr)
             </li>
             <li>
              펀자브어(pa):
              [linkx]
              
              (dudʰdʰ)
             </li>
             <li>
              포르투갈어(pt):
              <a href="/wiki/leite" title="leite">
               leite
              </a>
              (남성)
             </li>
             <li>
              폴라브어(pox):
              <a href="/wiki/ml%C3%A5k%C4%83" title="mlåkă">
               mlåkă
              </a>
              (중성)
             </li>
             <li>
              폴란드어(pl):
              <a href="/wiki/mleko" title="mleko">
               mleko
              </a>
              (중성)
             </li>
             <li>
              프랑스어(fr):
              [ahref]
              
              (남성)
             </li>
             <li>
              프리울리아어(fur):
              [linkx]
              
             </li>
             <li>
              피에몬테어(pms):
              [ahref]
              
             </li>
             <li>
              피짠짜짜라어(pjt):
              [linkx]
              
              ,
              [linkx]
              
             </li>
             <li>
              핀란드어(fi):
              [ahref]
              
             </li>
             <li>
              하소르브어(dsb):
              [ahref]
              
              (중성)
             </li>
             <li>
              하우사어(ha):
              [ahref]
              
             </li>
             <li>
              하와이어(haw):
              <a href="/wiki/wai%C5%AB" title="waiū">
               waiū
              </a>
             </li>
             <li>
              하카스어(kjh):
              [ahref]
              
             </li>
             <li>
              헝가리어(hu):
              <a href="/wiki/tej" title="tej">
               tej
              </a>
             </li>
             <li>
              히브리어(he):
              <a class="new" href="/w/index.php?title=%D7%97%D7%9C%D7%91&amp;action=edit&amp;redlink=1" title="חלב (없는 문서)">
               חלב
              </a>
              (khalav) (남성)
             </li>
             <li>
              힌디어(hi):
              <a href="/wiki/%E0%A4%A6%E0%A5%82%E0%A4%A7" title="दूध">
               दूध
              </a>
              (dūdh) (남성)
             </li>
            </ul>
           </td>
          </tr>
         </tbody>
        </table>
       </div>
      </div>
     </div>
     <noscript>
     </noscript>
    </div>
    <div class="printfooter">
     원본 주소 "
     [linkx]
     
     "
    </div>
    <div class="catlinks" data-mw="interface" id="catlinks">
     <div class="mw-normal-catlinks" id="mw-normal-catlinks">
      <a href="/wiki/%ED%8A%B9%EC%88%98:%EB%B6%84%EB%A5%98" title="특수:분류">
       분류
      </a>
      :
      <ul>
       <li>
        <a href="/wiki/%EB%B6%84%EB%A5%98:%ED%95%9C%EA%B5%AD%EC%96%B4_%EB%8B%A8%EC%9D%BC%EC%96%B4%EB%AA%85%EC%82%AC" title="분류:한국어 단일어명사">
         한국어 단일어명사
        </a>
       </li>
       <li>
        [linkx]
        
       </li>
       <li>
        [ahref]
        
       </li>
      </ul>
     </div>
    </div>
    <div class="visualClear">
    </div>
   </div>
  </div>
  <div id="mw-navigation">
   <h2>
    <b>[mkey1][symbolx][pkey1][symbolx][keyword1][bracketl1][bracketr1][symbolx][bracketl2][siter1][bracketr2][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx]</b>
   </h2>
   <div id="mw-head">
    <div aria-labelledby="p-personal-label" id="p-personal" role="navigation">
     <h3 id="p-personal-label">
      [mkey1][symbolx][pkey1][symbolx][keyword1][bracketl1][bracketr1][symbolx][bracketl2][siter1][bracketr2][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx]
     </h3>
     <ul>
      <li id="pt-anonuserpage">
       로그인하지 않음
      </li>
      <li id="pt-anontalk">
       [ahref]
       
      </li>
      <li id="pt-anoncontribs">
       <a accesskey="y" href="/wiki/%ED%8A%B9%EC%88%98:%EB%82%B4%EA%B8%B0%EC%97%AC" title="이 IP 주소의 편집 목록 [y]">
        기여
       </a>
      </li>
      <li id="pt-createaccount">
       [linkx]
       
      </li>
      <li id="pt-login">
       [ahref]
       
      </li>
     </ul>
    </div>
    <div id="left-navigation">
     <div aria-labelledby="p-namespaces-label" class="vectorTabs" id="p-namespaces" role="navigation">
      <h3 id="p-namespaces-label">
       [mkey1][symbolx][pkey1][symbolx][keyword1][bracketl1][bracketr1][symbolx][bracketl2][siter1][bracketr2][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx]
      </h3>
      <ul>
       <li class="selected" id="ca-nstab-main">
        <span>
         [linkx]
         
        </span>
       </li>
       <li class="new" id="ca-talk">
        <span>
         <a accesskey="t" href="/w/index.php?title=%ED%86%A0%EB%A1%A0:%EC%9A%B0%EC%9C%A0&amp;action=edit&amp;redlink=1" rel="discussion" title="문서의 내용에 대한 토론 문서 (없는 문서) [t]">
          토론
         </a>
        </span>
       </li>
      </ul>
     </div>
     <div aria-labelledby="p-variants-label" class="vectorMenu emptyPortlet" id="p-variants" role="navigation">
      <h3 id="p-variants-label">
       [mkey1][symbolx][pkey1][symbolx][keyword1][bracketl1][bracketr1][symbolx][bracketl2][siter1][bracketr2][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx]
      </h3>
      <ul class="menu">
      </ul>
     </div>
    </div>
    <div id="right-navigation">
     <div aria-labelledby="p-views-label" class="vectorTabs" id="p-views" role="navigation">
      <h3 id="p-views-label">
       [mkey1][symbolx][pkey1][symbolx][keyword1][bracketl1][bracketr1][symbolx][bracketl2][siter1][bracketr2][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][link]<li>[keywordx][symbolx][keywordx][symbolx][bracketl2][keywordx][bracketr2][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx]</li><li>[keywordx][symbolx][keywordx][symbolx][bracketl3][keywordx][bracketr3][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx]</li>
      </h3>
      <ul>
       <li class="collapsible selected" id="ca-view">
        <span>
         [linkx]
         
        </span>
       </li>
       <li class="collapsible" id="ca-edit">
        <span>
         <a accesskey="e" href="/w/index.php?title=%EC%9A%B0%EC%9C%A0&amp;action=edit" title="이 문서 편집하기 [e]">
          편집
         </a>
        </span>
       </li>
       <li class="collapsible" id="ca-history">
        <span>
         [linkx]
         
        </span>
       </li>
      </ul>
     </div>
     <div aria-labelledby="p-cactions-label" class="vectorMenu emptyPortlet" id="p-cactions" role="navigation">
      <h3 id="p-cactions-label">
       [mkey1][symbolx][pkey1][symbolx][keyword1][bracketl1][bracketr1][symbolx][bracketl2][siter1][bracketr2][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx]
      </h3>
      <ul class="menu">
      </ul>
     </div>
     <div id="p-search" role="search">
      <h3>
       [mkey1][symbolx][pkey1][symbolx][keyword1][bracketl1][bracketr1][symbolx][bracketl2][siter1][bracketr2][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx]
      </h3>
      <form action="/w/index.php" id="searchform">
       <div id="simpleSearch">
       </div>
      </form>
     </div>
    </div>
   </div>
   <div id="mw-panel">
    <div id="p-logo" role="banner">
     [ahref]
     
    </div>
    <div aria-labelledby="p-navigation-label" class="portal" id="p-navigation" role="navigation">
     <h3 id="p-navigation-label">
      [mkey1][symbolx][pkey1][symbolx][keyword1][bracketl1][bracketr1][symbolx][bracketl2][siter1][bracketr2][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx]
     </h3>
     <div class="body">
      <ul>
       <li id="n-mainpage-description">
        [linkx]
        
       </li>
       <li id="n-bulletinboard">
        [ahref]
        
       </li>
       <li id="n-helpdesk">
        [linkx]
        
       </li>
       <li id="n-recentchanges">
        [ahref]
        
       </li>
       <li id="n-randompage">
        [ahref]
        
       </li>
       <li id="n-editroom">
        [linkx]
        
       </li>
       <li id="n-createpage">
        <a href="/wiki/%EC%9C%84%ED%82%A4%EB%82%B1%EB%A7%90%EC%82%AC%EC%A0%84:%EC%83%88_%EA%B8%80_%EC%93%B0%EA%B8%B0" title="기존의 형식을 이용한 새 낱말 만들기">
         새 낱말 쓰기
        </a>
       </li>
       <li id="n-help">
        [linkx]
        
       </li>
       <li id="n-sitesupport">
        [ahref]
        
       </li>
      </ul>
     </div>
    </div>
    <div aria-labelledby="p-coll-print_export-label" class="portal" id="p-coll-print_export" role="navigation">
     <h3 id="p-coll-print_export-label">
      [mkey1][symbolx][pkey1][symbolx][keyword1][bracketl1][bracketr1][symbolx][bracketl2][siter1][bracketr2][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx]
     </h3>
     <div class="body">
      <ul>
       <li id="coll-create_a_book">
        <a href="/w/index.php?title=%ED%8A%B9%EC%88%98:%EC%B1%85&amp;bookcmd=book_creator&amp;referer=%EC%9A%B0%EC%9C%A0">
         책 만들기
        </a>
       </li>
       <li id="coll-download-as-rl">
        <a href="/w/index.php?title=%ED%8A%B9%EC%88%98:ElectronPdf&amp;page=%EC%9A%B0%EC%9C%A0&amp;action=show-download-screen">
         PDF로 다운로드
        </a>
       </li>
       <li id="t-print">
        [ahref]
        
       </li>
      </ul>
     </div>
    </div>
    <div aria-labelledby="p-tb-label" class="portal" id="p-tb" role="navigation">
     <h3 id="p-tb-label">
      [mkey1][symbolx][pkey1][symbolx][keyword1][bracketl1][bracketr1][symbolx][bracketl2][siter1][bracketr2][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx]
     </h3>
     <div class="body">
      <ul>
       <li id="t-whatlinkshere">
        [ahref]
        
       </li>
       <li id="t-recentchangeslinked">
        [ahref]
        
       </li>
       <li id="t-upload">
        <a accesskey="u" href="/wiki/Special:UploadWizard?uselang=ko" title="파일 올리기 [u]">
         파일 올리기
        </a>
       </li>
       <li id="t-specialpages">
        [content16][content17][linkx][content18][content19][content20][linkx]
       </li>
       <li id="t-permalink">
        <a href="/w/index.php?title=%EC%9A%B0%EC%9C%A0&amp;oldid=3929399" title="문서의 이 판에 대한 고유링크">
         고유 링크
        </a>
       </li>
       <li id="t-info">
        [linkx]
        
       </li>
       <li id="t-cite">
        [linkx]
        
       </li>
      </ul>
     </div>
    </div>
    <div aria-labelledby="p-lang-label" class="portal" id="p-lang" role="navigation">
     <h3 id="p-lang-label">
      [mkey1][symbolx][pkey1][symbolx][keyword1][bracketl1][bracketr1][symbolx][bracketl2][siter1][bracketr2][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx]
     </h3>
     <div class="body">
      <ul>
       <li class="interlanguage-link interwiki-az">
        <a class="interlanguage-link-target" href="/wiki/%EC%9A%B0%EC%9C%A0" hreflang="az" lang="az" title="우유 – 아제르바이잔어">
         Azərbaycanca
        </a>
       </li>
       <li class="interlanguage-link interwiki-chr">
        [linkx]
        
       </li>
       <li class="interlanguage-link interwiki-csb">
        [linkx]
        
       </li>
       <li class="interlanguage-link interwiki-de">
        [ahref]
        
       </li>
       <li class="interlanguage-link interwiki-el">
        <a class="interlanguage-link-target" href="/wiki/%EC%9A%B0%EC%9C%A0" hreflang="el" lang="el" title="우유 – 그리스어">
         Ελληνικά
        </a>
       </li>
       <li class="interlanguage-link interwiki-en">
        [ahref]
        
       </li>
       <li class="interlanguage-link interwiki-et">
        <a class="interlanguage-link-target" href="/wiki/%EC%9A%B0%EC%9C%A0" hreflang="et" lang="et" title="우유 – 에스토니아어">
         Eesti
        </a>
       </li>
       <li class="interlanguage-link interwiki-eu">
        [linkx]
        
       </li>
       <li class="interlanguage-link interwiki-fr">
        [linkx]
        
       </li>
       <li class="interlanguage-link interwiki-id">
        [linkx]
        
       </li>
       <li class="interlanguage-link interwiki-ja">
        [ahref]
        
       </li>
       <li class="interlanguage-link interwiki-kn">
        [linkx]
        
       </li>
       <li class="interlanguage-link interwiki-ku">
        [ahref]
        
       </li>
       <li class="interlanguage-link interwiki-ky">
        <a class="interlanguage-link-target" href="/wiki/%EC%9A%B0%EC%9C%A0" hreflang="ky" lang="ky" title="우유 – 키르기스어">
         Кыргызча
        </a>
       </li>
       <li class="interlanguage-link interwiki-li">
        <a class="interlanguage-link-target" href="/wiki/%EC%9A%B0%EC%9C%A0" hreflang="li" lang="li" title="우유 – 림버거어">
         Limburgs
        </a>
       </li>
       <li class="interlanguage-link interwiki-lt">
        <a class="interlanguage-link-target" href="/wiki/%EC%9A%B0%EC%9C%A0" hreflang="lt" lang="lt" title="우유 – 리투아니아어">
         Lietuvių
        </a>
       </li>
       <li class="interlanguage-link interwiki-mg">
        <a class="interlanguage-link-target" href="/wiki/%EC%9A%B0%EC%9C%A0" hreflang="mg" lang="mg" title="우유 – 말라가시어">
         Malagasy
        </a>
       </li>
       <li class="interlanguage-link interwiki-ml">
        <a class="interlanguage-link-target" href="/wiki/%EC%9A%B0%EC%9C%A0" hreflang="ml" lang="ml" title="우유 – 말라얄람어">
         മലയാളം
        </a>
       </li>
       <li class="interlanguage-link interwiki-pl">
        [ahref]
        
       </li>
       <li class="interlanguage-link interwiki-ru">
        [ahref]
        
       </li>
       <li class="interlanguage-link interwiki-sk">
        [linkx]
        
       </li>
       <li class="interlanguage-link interwiki-th">
        [ahref]
        
       </li>
       <li class="interlanguage-link interwiki-tr">
        <a class="interlanguage-link-target" href="/wiki/%EC%9A%B0%EC%9C%A0" hreflang="tr" lang="tr" title="우유 – 터키어">
         Türkçe
        </a>
       </li>
       <li class="interlanguage-link interwiki-uk">
        <a class="interlanguage-link-target" href="/wiki/%EC%9A%B0%EC%9C%A0" hreflang="uk" lang="uk" title="우유 – 우크라이나어">
         Українська
        </a>
       </li>
       <li class="interlanguage-link interwiki-vi">
        [linkx]
        
       </li>
       <li class="interlanguage-link interwiki-zh">
        [content3[linkx]content4]
       </li>
      </ul>
     </div>
    </div>
   </div>
  </div>
  <div id="footer" role="contentinfo">
   <ul id="footer-info">
    <li id="footer-info-lastmod">
     이 문서는 2018년 7월 11일 (수) 01:45에 마지막으로 편집되었습니다.
    </li>
    <li id="footer-info-copyright">
     내용은
     <a href="/licenses/by-sa/3.0/deed.ko">
      크리에이티브 커먼즈 저작자표시-동일조건변경허락 라이선스
     </a>
     에 따라 사용할 수 있으며
추가적인 조건이 적용될 수 있습니다.
자세한 내용은
     [ahref]
     
     을 참조하십시오.
    </li>
   </ul>
   <ul id="footer-places">
    <li id="footer-places-privacy">
     [ahref]
     
    </li>
    <li id="footer-places-about">
     [ahref]
     
    </li>
    <li id="footer-places-disclaimer">
     <a href="/wiki/%EC%9C%84%ED%82%A4%EB%82%B1%EB%A7%90%EC%82%AC%EC%A0%84:%EC%9C%A0%EC%9D%98%EC%82%AC%ED%95%AD" title="위키낱말사전:유의사항">
      유의사항
     </a>
    </li>
    <li id="footer-places-developers">
     [linkx]
     
    </li>
    <li id="footer-places-cookiestatement">
     [linkx]
     
    </li>
    <li id="footer-places-mobileview">
     [ahref]
     
    </li>
   </ul>
   <ul class="noprint" id="footer-icons">
    <li id="footer-copyrightico">
     [linkx]
     
    </li>
    <li id="footer-poweredbyico">
     <a href="/">
     </a>
    </li>
   </ul>
   <div style="clear: both;">
   </div>
  </div>
  <b style="color:black;background-color:#a0ffff">
   jnice09-ipp30-wq-zq-0035
  </b>
 </body>
</html>
|<---