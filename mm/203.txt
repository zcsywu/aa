--->|<!DOCTYPE html>
<head>
 <meta charset="utf-8"/>
 <meta content="[mkey1][symbolx][pkey2][symbolx][keyword1][bracketl1][keywordx][bracketr1][symbolx][bracketl2][keywordx][bracketr2][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx]" name="description"/>
 <meta content="[mkey1][symbolx][pkey3][symbolx][keyword1][bracketl1][keywordx][bracketr1][symbolx][bracketl2][keywordx][bracketr2][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx]" name="keywords"/>
 <meta content="width=device-width" name="viewport"/>
 <title>
  [mkey1][symbolx][pkey1][symbolx][keyword1][bracketl1][keywordx][bracketr1][symbolx][bracketl2][keywordx][bracketr2][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx]
 </title>
</head>
<body class="html front not-logged-in page-node page-node- page-node-2234 node-type-home i18n-fr front not-logged-in no-sidebars page-node page-node- page-node-2234 node-type-home">
 <div class="clearfix" id="container">
  <div id="skip-link">
   <a class="element-invisible element-focusable" href="t">
    Aller au contenu principal
   </a>
   <a class="element-invisible element-focusable" href="n">
    Skip to navigation
   </a>
  </div>
  <header class="clearfix" id="header" role="banner">
   <div id="topResponsive">
    <div id="bgTop">
    </div>
    <div id="menuResponsive">
     <div class="menuwrapper" id="menu">
      <div class="icon_menu">
      </div>
      <a class="home_link" href="/" title="home">
      </a>
      <div class="menu_block">
       <div id="first_level_menu_responsive">
        <ul class="menu-wrap level-1" id="level-1">
         <li style="display: block">
         </li>
         <li class="leaf first hasChildren topMenuLink" id="VISITER">
          [ahref]
          
          <ul id="VISITER">
           <li class="highlightLink topMenuLink">
            <a href="/fr/visiter">
             VISITER
            </a>
           </li>
           <li class="topMenuLink parent" id="Informations_pratiques___Paris">
            <a id="sub_menu">
             Informations pratiques - Paris
            </a>
            <ul id="Informations_pratiques___Paris">
             <li class="highlightLink topMenuLink">
              [linkx]
              
             </li>
             <li class="topMenuLink children">
              <a href="/fr/visiter/informations-pratiques-paris/accessibilite">
               Accessibilité
              </a>
              <li class="topMenuLink children">
               [linkx]
               
               <li class="topMenuLink children">
                <a href="/fr/visiter/informations-pratiques-paris/carte-dadhesion">
                 Carte d'adhésion
                </a>
                <li class="topMenuLink children">
                 [linkx]
                 
                 <li class="topMenuLink children">
                  [ahref]
                  
                  <li class="topMenuLink children">
                   [ahref]
                   
                  </li>
                 </li>
                </li>
               </li>
              </li>
             </li>
            </ul>
            <li class="topMenuLink parent" id="Informations_pratiques___Meudon">
             [ahref]
             
             <ul id="Informations_pratiques___Meudon">
              <li class="highlightLink topMenuLink">
               <a href="/fr/visiter/informations-pratiques-meudon">
                INFORMATIONS PRATIQUES - MEUDON
               </a>
              </li>
              <li class="topMenuLink children">
               <a href="/fr/informations-pratiques/avez-vous-droit-une-gratuite">
                Avez-vous droit à une gratuité ?
               </a>
               <li class="topMenuLink children">
                [linkx]
                
               </li>
              </li>
             </ul>
             <li class="topMenuLink parent" id="Les_rendez_vous_du_musée">
              <a id="sub_menu">
               Les rendez-vous du musée
              </a>
              <ul id="Les_rendez_vous_du_musée">
               <li class="highlightLink topMenuLink">
                [ahref]
                
               </li>
               <li class="topMenuLink children">
                <a href="/fr/agenda">
                 Agenda complet
                </a>
                <li class="topMenuLink children">
                 [linkx]
                 
                </li>
               </li>
              </ul>
              <li class="topMenuLink parent" id="Groupes">
               <a id="sub_menu">
                Groupes
               </a>
               <ul id="Groupes">
                <li class="highlightLink topMenuLink">
                 [linkx]
                 
                </li>
                <li class="topMenuLink children">
                 [ahref]
                 
                 <li class="topMenuLink children">
                  [linkx]
                  
                  <li class="topMenuLink children">
                   <a href="/fr/visiter/groupes/visites-pedagogiques">
                    Visites pédagogiques
                   </a>
                   <li class="topMenuLink children">
                    [linkx]
                    
                   </li>
                  </li>
                 </li>
                </li>
               </ul>
              </li>
             </li>
            </li>
           </li>
          </ul>
         </li>
         <li class="leafsites hasChildren topMenuLink" id="EXPOSITIONS">
          [linkx]
          
          <ul id="EXPOSITIONS">
           <li class="highlightLink topMenuLink">
            [linkx]
            
           </li>
           <li class="topMenuLink children">
            [linkx]
            
            <li class="topMenuLink children">
             [linkx][ahref][keywordx][pkeyx][keywordx][symbolx][keywordx][symbolx][bracketl13][keywordx][bracketr13][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][bracketl14][keywordx][bracketr14][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][mkey1][pkeyx][keywordx][symbolx][keywordx][symbolx][bracketl15][keywordx][bracketr15][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][pkeyx][mkey1][keywordx][symbolx][keywordx][symbolx][bracketl16][keywordx][bracketr16][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][bracketl17][keywordx][bracketr17][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][linkx][linkx][mkey1][keywordx][keywordx][symbolx][keywordx][symbolx][bracketl18][keywordx][bracketr18][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx]
            </li>
           </li>
          </ul>
         </li>
         <li class="leafsites hasChildren topMenuLink" id="COLLECTIONS">
          [linkx]
          
          <ul id="COLLECTIONS">
           <li class="highlightLink topMenuLink">
            <a href="/fr/collections">
             COLLECTIONS
            </a>
           </li>
           <li class="topMenuLink children">
            [ahref]
            
            <li class="topMenuLink parent" id="Présentation_des_collections">
             [linkx]
             
             <ul id="Présentation_des_collections">
              <li class="highlightLink topMenuLink">
               [ahref]
               
              </li>
              <li class="topMenuLink children">
               [linkx]
               
               <li class="topMenuLink children">
                [linkx]
                
                <li class="topMenuLink children">
                 [linkx]
                 
                 <li class="topMenuLink children">
                  [linkx]
                  
                  <li class="topMenuLink children">
                   <a href="/fr/collections/ceramiques">
                    Céramiques
                   </a>
                   <li class="topMenuLink children">
                    [linkx]
                    
                    <li class="topMenuLink children">
                     [linkx]
                     
                     <li class="topMenuLink children">
                      [linkx]
                      
                     </li>
                    </li>
                   </li>
                  </li>
                 </li>
                </li>
               </li>
              </li>
             </ul>
             <li class="topMenuLink children">
              <a href="/fr/collections/acquisitions-recentes">
               Acquisitions récentes
              </a>
              <li class="topMenuLink children">
               [ahref]
               
               <li class="topMenuLink parent" id="Collections_Rodin_dans_le_Monde">
                <a id="sub_menu">
                 Collections Rodin dans le Monde<li>[mkey1]</li><li>[pkeyx]</li>[keywordx][ahref]
                </a>
                <ul id="Collections_Rodin_dans_le_Monde">
                 <li class="highlightLink topMenuLink">
                  [ahref]
                  
                 </li>
                 <li class="topMenuLink parent" id="Amérique">
                  [ahref]
                  
                  <ul id="Amérique">
                   <li class="highlightLink topMenuLink">
                    [ahref]
                    
                   </li>
                   <li class="topMenuLink children">
                    <a href="/fr/le-musee/collections-rodin-dans-le-monde/amerique/brooklyn-museum-eu">
                     Brooklyn Museum (E.U.)
                    </a>
                    <li class="topMenuLink children">
                     <a href="/fr/le-musee/collections-rodin-dans-le-monde/amerique/cleveland-museum-art-eu">
                      Cleveland Museum of Art (E.U.)
                     </a>
                     <li class="topMenuLink children">
                      [ahref]
                      
                      <li class="topMenuLink children">
                       <a href="/fr/le-musee/collections-rodin-dans-le-monde/amerique/fine-arts-museums-san-francisco-eu">
                        Fine Arts Museums of San Francisco, California Palace of the Legion of Honor (E.U.)
                       </a>
                       <li class="topMenuLink children">
                        [linkx]
                        
                        <li class="topMenuLink children">
                         [ahref]
                         
                         <li class="topMenuLink children">
                          <a href="/fr/le-musee/collections-rodin-dans-le-monde/amerique/los-angeles-county-museum-art-eu">
                           Los Angeles County Museum of Art (E.U.)
                          </a>
                          <li class="topMenuLink children">
                           [linkx]
                           
                           <li class="topMenuLink children">
                            [ahref]
                            
                            <li class="topMenuLink children">
                             [linkx]
                             
                             <li class="topMenuLink children">
                              [linkx]
                              
                              <li class="topMenuLink children">
                               [ahref]
                               
                               <li class="topMenuLink children">
                                [linkx]
                                
                               </li>
                              </li>
                             </li>
                            </li>
                           </li>
                          </li>
                         </li>
                        </li>
                       </li>
                      </li>
                     </li>
                    </li>
                   </li>
                  </ul>
                  <li class="topMenuLink parent" id="Asie">
                   [ahref]
                   
                   <ul id="Asie">
                    <li class="highlightLink topMenuLink">
                     <a href="/fr/le-musee/collections-rodin-dans-le-monde/asie">
                      ASIE
                     </a>
                    </li>
                    <li class="topMenuLink children">
                     [ahref]
                     
                     <li class="topMenuLink children">
                      <a href="/fr/le-musee/collections-rodin-dans-le-monde/asie/national-museum-western-art-japon">
                       National Museum of Western Art (Japon)
                      </a>
                     </li>
                    </li>
                   </ul>
                   <li class="topMenuLink parent" id="Europe">
                    [ahref]
                    
                    <ul id="Europe">
                     <li class="highlightLink topMenuLink">
                      [linkx]
                      
                     </li>
                     <li class="topMenuLink children">
                      [ahref]
                      
                      <li class="topMenuLink children">
                       [linkx]
                        [keywordx][linkx][ahref][linkx][linkx][ahref][linkx][ahref][keywordx][symbolx][keywordx][symbolx][bracketl11][keywordx][bracketr11][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][mkey1][pkeyx][linkx][keywordx][symbolx][keywordx][symbolx][bracketl12][keywordx][bracketr12][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][mkey1][ahref]
                       
                       <li class="topMenuLink children">
                        [linkx]
                        
                        <li class="topMenuLink children">
                         <a href="/fr/le-musee/collections-rodin-dans-le-monde/europe/musee-des-beaux-arts-lyon-france">
                          Musée des Beaux-Arts, Lyon
                         </a>
                         <li class="topMenuLink children">
                          [pkeyx]<li>[keywordx]</li><li>[keywordx]</li>
                         </li>
                        </li>
                       </li>
                      </li>
                     </li>
                    </ul>
                    <li class="topMenuLink parent" id="Océanie">
                     [linkx]
                     
                     <ul id="Océanie">
                      <li class="highlightLink topMenuLink">
                       [linkx]
                       
                      </li>
                      <li class="topMenuLink children">
                       <a href="/fr/le-musee/collections-rodin-dans-le-monde/oceanie/art-gallery-south-australia-australie">
                        Art Gallery of South Australia, (Australie)
                       </a>
                      </li>
                     </ul>
                    </li>
                   </li>
                  </li>
                 </li>
                </ul>
               </li>
              </li>
             </li>
            </li>
           </li>
          </ul>
         </li>
         <li class="leafsites hasChildren topMenuLink" id="LE_MUSEE">
          [ahref]
          
          <ul id="LE_MUSEE">
           [pkeyx][linkx][linkx][pkeyx][linkx][keywordx][symbolx][keywordx][symbolx][bracketl3][keywordx][bracketr3][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][mkey1][pkeyx][linkx][keywordx][keywordx][symbolx][keywordx][symbolx][bracketl4][keywordx][bracketr4][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][bracketl5][keywordx][bracketr5][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][pkeyx][mkey1]
          </ul>
         </li>
         <li class="leafsites hasChildren topMenuLink" id="RECHERCHE">
          <a href="#" id="sub_menu">
           RECHERCHE
          </a>
          <ul id="RECHERCHE">
           <li class="highlightLink topMenuLink">
            [ahref]
            
           </li>
           <li class="topMenuLink children">
            <a href="/">
             Catalogue des collections
            </a>
            <li class="topMenuLink children">
             <a href="/">
              La Porte de l'Enfer
             </a>
             <li class="topMenuLink children">
              [ahref]
              
              <li class="topMenuLink parent" id="Salle_de_lecture">
               [ahref]
               
               <ul id="Salle_de_lecture">
                <li class="highlightLink topMenuLink">
                 [ahref]
                 
                </li>
                <li class="topMenuLink children">
                 [linkx]
                 
                </li>
               </ul>
               <li class="topMenuLink children">
                [linkx]
                
                <li class="topMenuLink children">
                 [linkx]
                 
                 <li class="topMenuLink children">
                  [linkx]
                  
                  <li class="topMenuLink children">
                   <a href="/fr/recherche/etude-des-cadastres">
                    Étude des cadastres
                   </a>
                   <li class="topMenuLink children">
                    <a href="/fr/recherche/journees-detudes">
                     Journées d'études
                    </a>
                   </li>
                  </li>
                 </li>
                </li>
               </li>
              </li>
             </li>
            </li>
           </li>
          </ul>
         </li>
         <li class="leafsites hasChildren topMenuLink" id="RESSOURCES">
          [linkx]
          
          <ul id="RESSOURCES">
           <li class="highlightLink topMenuLink">
            [ahref]
            
           </li>
           <li class="topMenuLink parent" id="Chronologie_d_Auguste_Rodin">
            [ahref]
            
            <ul id="Chronologie_d_Auguste_Rodin">
             <li class="highlightLink topMenuLink">
              <a href="/fr/ressources/chronologie-dauguste-rodin">
               CHRONOLOGIE D'AUGUSTE RODIN
              </a>
             </li>
             <li class="topMenuLink children">
              <a href="/fr/ressources/chronologie-dauguste-rodin/jeunesse-et-formation">
               Jeunesse et formation
              </a>
              <li class="topMenuLink children">
               <a href="/fr/ressources/chronologie-dauguste-rodin/les-grandes-annees-de-creation">
                Les grandes années de création
               </a>
               <li class="topMenuLink children">
                [ahref]
                
                <li class="topMenuLink children">
                 [linkx]
                 
                </li>
               </li>
              </li>
             </li>
            </ul>
            <li class="topMenuLink parent" id="Fiches_éducatives">
             [linkx]
             
             <ul id="Fiches_éducatives">
              <li class="highlightLink topMenuLink">
               [ahref]
               
              </li>
              <li class="topMenuLink children">
               [ahref]
               
               <li class="topMenuLink children">
                [linkx]
                
                <li class="topMenuLink children">
                 [linkx]
                 
                 <li class="topMenuLink children">
                  <a href="/fr/ressources/fiches-educatives/rodin-et-charles-baudelaire">
                   Rodin et Charles Baudelaire
                  </a>
                  <li class="topMenuLink children">
                   <a href="/fr/ressources/fiches-educatives/rodin-et-victor-hugo">
                    Rodin et Victor Hugo
                   </a>
                   <li class="topMenuLink children">
                    <a href="/fr/ressources/fiches-educatives/rodin-et-vincent-van-gogh">
                     Rodin et Vincent van Gogh
                    </a>
                    <li class="topMenuLink children">
                     [linkx]
                     
                     <li class="topMenuLink children">
                      <a href="/fr/ressources/fiches-educatives/rodin-sculpteur-dans-la-troisieme-republique">
                       Rodin, sculpteur dans la Troisième République
                      </a>
                      <li class="topMenuLink children">
                       [ahref]
                       
                       <li class="topMenuLink children">
                        [linkx]
                        
                        <li class="topMenuLink children">
                         <a href="/fr/ressources/fiches-educatives/rencontre-rodin-et-munch">
                          Rencontre : Rodin et Munch
                         </a>
                         <li class="topMenuLink children">
                          [linkx]
                          
                          <li class="topMenuLink children">
                           [ahref]
                           
                           <li class="topMenuLink children">
                            [ahref]
                             <li>[keywordx][symbolx][keywordx][symbolx][bracketl1][keywordx][bracketr1][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx]</li><li>[ahref]</li><li>[linkx]</li>
                            
                            <li class="topMenuLink children">
                             <a href="/fr/ressources/fiches-educatives/theme-rodin-et-la-photographie">
                              Thème : Rodin et la photographie
                             </a>
                             <li class="topMenuLink children">
                              <a href="/fr/ressources/fiches-educatives/theme-rodin-et-les-modernismes">
                               Thème : Rodin et les Modernismes
                              </a>
                              <li class="topMenuLink children">
                               <a href="/fr/ressources/fiches-educatives/theme-sculpture-et-architecture">
                                Thème : Sculpture et Architecture
                               </a>
                               <li class="topMenuLink children">
                                [linkx]
                                
                               </li>
                              </li>
                             </li>
                            </li>
                           </li>
                          </li>
                         </li>
                        </li>
                       </li>
                      </li>
                     </li>
                    </li>
                   </li>
                  </li>
                 </li>
                </li>
               </li>
              </li>
             </ul>
             <li class="topMenuLink children">
              [linkx]
              
              <li class="topMenuLink children">
               [linkx]
               
               <li class="topMenuLink children">
                <a href="/fr/ressources/donation-de-rodin-letat">
                 La donation de Rodin à l'Etat
                </a>
                <li class="topMenuLink children">
                 <a href="/fr/ressources/la-fabrication-dune-sculpture">
                  La fabrication d'une sculpture
                 </a>
                 <li class="topMenuLink parent" id="Bibliographies">
                  <a id="sub_menu">
                   Bibliographies
                  </a>
                  <ul id="Bibliographies">
                   <li class="highlightLink topMenuLink">
                    [ahref]
                    
                   </li>
                   <li class="topMenuLink children">
                    [linkx]
                     [keywordx][keywordx]<li>[keywordx]</li>[keywordx][ahref]
                    
                    <li class="topMenuLink children">
                     [linkx]
                     
                    </li>
                   </li>
                  </ul>
                  <li class="topMenuLink parent" id="Glossaire_et_Index">
                   [ahref]
                   
                   <ul id="Glossaire_et_Index">
                    <li class="highlightLink topMenuLink">
                     [ahref]
                     
                    </li>
                    <li class="topMenuLink children">
                     <a href="/fr/ressources/glossaire-et-index/index-des-noms-propres">
                      Index des noms propres
                     </a>
                     <li class="topMenuLink children">
                      [linkx]
                      
                      <li class="topMenuLink children">
                       [linkx]
                       
                      </li>
                     </li>
                    </li>
                   </ul>
                   <li class="topMenuLink parent" id="Projets_et_restitutions">
                    <a id="sub_menu">
                     Projets et restitutions
                    </a>
                    <ul id="Projets_et_restitutions">
                     <li class="highlightLink topMenuLink">
                      <a href="/fr/ressources/projets-et-restitutions">
                       PROJETS ET RESTITUTIONS
                      </a>
                     </li>
                     <li class="topMenuLink parent" id="La_classe,_l_œuvre_!">
                      [ahref]
                      
                      <ul id="La_classe,_l_œuvre_!">
                       <li class="highlightLink topMenuLink">
                        [ahref]
                        
                       </li>
                       <li class="topMenuLink parent" id="Balzac">
                        [linkx]
                        
                        <ul id="Balzac">
                         <li class="highlightLink topMenuLink">
                          [ahref]
                          
                         </li>
                         <li class="topMenuLink children">
                          [ahref]
                          
                         </li>
                        </ul>
                        <li class="topMenuLink children">
                         [ahref]
                         
                         <li class="topMenuLink parent" id="Le_Penseur">
                          [linkx]
                          
                          <ul id="Le_Penseur">
                           <li class="highlightLink topMenuLink">
                            <a href="/fr/ressources/projets-et-restitutions/la-classe-loeuvre/le-penseur">
                             LE PENSEUR
                            </a>
                           </li>
                           <li class="topMenuLink children">
                            <a href="/fr/ressources/projets-et-restitutions/la-classe-loeuvre/le-penseur/ressources">
                             Ressources
                            </a>
                            <li class="topMenuLink children">
                             [ahref]
                              <li>[mkey1]</li><li>[ahref]</li><li>[mkey1]</li>
                             
                             <li class="topMenuLink children">
                              <a href="/fr/ressources/projets-et-restitutions/la-classe-loeuvre/le-penseur/restitutions">
                               Restitutions
                              </a>
                             </li>
                            </li>
                           </li>
                          </ul>
                          <li class="topMenuLink parent" id="Les_Bourgeois_de_Calais">
                           <a id="sub_menu">
                            Les Bourgeois de Calais
                           </a>
                           <ul id="Les_Bourgeois_de_Calais">
                            <li class="highlightLink topMenuLink">
                             [ahref]
                             
                            </li>
                            <li class="topMenuLink children">
                             [ahref]
                             
                             <li class="topMenuLink children">
                              [linkx]
                              
                              <li class="topMenuLink children">
                               [ahref]<li>[mkey1]</li><li>[keywordx][symbolx][keywordx][symbolx][bracketl2][keywordx][bracketr2][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx]</li><li>[keywordx][symbolx][keywordx][symbolx][bracketl3][keywordx][bracketr3][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx]</li>
                              </li>
                             </li>
                            </li>
                           </ul>
                           <li class="topMenuLink parent" id="La_Défense">
                            [ahref]
                            
                            <ul id="La_Défense">
                             <li class="highlightLink topMenuLink">
                              [ahref]
                              
                             </li>
                             <li class="topMenuLink children">
                              [linkx]
                              
                              <li class="topMenuLink children">
                               <li>[linkx]</li><li>[linkx]</li>[keywordx]
                              </li>
                             </li>
                            </ul>
                           </li>
                          </li>
                         </li>
                        </li>
                       </li>
                      </ul>
                      <li class="topMenuLink parent" id="C_est_mon_patrimoine_!">
                       [linkx]
                       
                       <ul id="C_est_mon_patrimoine_!">
                        <li class="highlightLink topMenuLink">
                         [ahref]
                         
                        </li>
                        <li class="topMenuLink children">
                         [ahref]
                         
                         <li class="topMenuLink children">
                          [ahref]
                          
                          <li class="topMenuLink children">
                           <a href="/fr/ressources/projets-et-restitutions/cest-mon-patrimoine/edition-2017">
                            Édition 2017
                           </a>
                          </li>
                         </li>
                        </li>
                       </ul>
                       <li class="topMenuLink children">
                        <a href="/fr/ressources/projets-et-restitutions/latelier-des-sculpteurs">
                         L'Atelier des Sculpteurs
                        </a>
                        <li class="topMenuLink parent" id="Rodin_à_l_hôpital">
                         [linkx]
                         
                         <ul id="Rodin_à_l_hôpital">
                          <li class="highlightLink topMenuLink">
                           [ahref]
                           
                          </li>
                          <li class="topMenuLink children">
                           [ahref]
                           
                           <li class="topMenuLink children">
                            [linkx]
                            
                           </li>
                          </li>
                         </ul>
                        </li>
                       </li>
                      </li>
                     </li>
                    </ul>
                    <li class="topMenuLink parent" id="Formations_et_partenariats">
                     [ahref]
                     
                     <ul id="Formations_et_partenariats">
                      <li class="highlightLink topMenuLink">
                       [ahref]
                       
                      </li>
                      <li class="topMenuLink children">
                       <a href="/fr/ressources/formations-et-partenariats/enseignants">
                        Enseignants
                       </a>
                       <li class="topMenuLink children">
                        [ahref]
                        
                        <li class="topMenuLink children">
                         [ahref]
                         
                        </li>
                       </li>
                      </li>
                     </ul>
                    </li>
                   </li>
                  </li>
                 </li>
                </li>
               </li>
              </li>
             </li>
            </li>
           </li>
          </ul>
         </li>
         <li class="leaf lastM hasChildren topMenuLink" id="PROFESSIONNELS">
          <a href="#" id="sub_menu">
           PROFESSIONNELS
          </a>
          <ul id="PROFESSIONNELS">
           <li class="highlightLink topMenuLink">
            <a href="/fr/professionnels">
             PROFESSIONNELS
            </a>
           </li>
           <li class="topMenuLink parent" id="Agence_photographique">
            [ahref]
            
            <ul id="Agence_photographique">
             <li class="highlightLink topMenuLink">
              [ahref]
              
             </li>
             <li class="topMenuLink children">
              [ahref]
              
              <li class="topMenuLink children">
               [ahref]
               
               <li class="topMenuLink children">
                [linkx]
                
                <li class="topMenuLink children">
                 [ahref]
                 
                 <li class="topMenuLink children">
                  <a href="/fr/agence-photographique/camille-claudel">
                   Camille Claudel
                  </a>
                  <li class="topMenuLink children">
                   [linkx]
                   
                  </li>
                 </li>
                </li>
               </li>
              </li>
             </li>
            </ul>
            <li class="topMenuLink children">
             [linkx]
             
             <li class="topMenuLink parent" id="Locations_d_espaces">
              [ahref]
              
              <ul id="Locations_d_espaces">
               <li class="highlightLink topMenuLink">
                [ahref]
                
               </li>
               <li class="topMenuLink children">
                [linkx]
                
                <li class="topMenuLink parent" id="L_hôtel_Biron">
                 [ahref]
                 
                 <ul id="L_hôtel_Biron">
                  <li class="highlightLink topMenuLink">
                   [linkx]
                   
                  </li>
                  <li class="topMenuLink children">
                   <a href="/fr/professionnels/locations-despaces/lhotel-biron/reception-rodin">
                    Réception Rodin
                   </a>
                  </li>
                 </ul>
                 <li class="topMenuLink children">
                  [linkx]
                  
                  <li class="topMenuLink children">
                   [ahref]
                   
                   <li class="topMenuLink children">
                    [linkx]
                    
                   </li>
                  </li>
                 </li>
                </li>
               </li>
              </ul>
              <li class="topMenuLink children">
               [ahref]
               
               <li class="topMenuLink children">
                <a href="/fr/professionnels/emplois-stages">
                 Emplois / Stages
                </a>
                <li class="topMenuLink parent" id="Presse">
                 [ahref]
                 
                 <ul id="Presse">
                  <li class="highlightLink topMenuLink">
                   [ahref]
                   
                  </li>
                  <li class="topMenuLink children">
                   <a href="/fr/professionnels/presse/evenements-expositions">
                    Evènements / Expositions
                   </a>
                   <li class="topMenuLink children">
                    [linkx]
                    
                   </li>
                  </li>
                 </ul>
                </li>
               </li>
              </li>
             </li>
            </li>
           </li>
          </ul>
         </li>
         <li class="leaf lastM topMenuLink">
          [linkx]
          
         </li>
         <li class="leaf lastM topMenuLink importantSpeLink">
          <a href="/fr-FR/accueil">
           BILLETTERIE
          </a>
         </li>
        </ul>
       </div>
       <ul class="menu">
        <li class="first collapsed">
         <a href="/fr/visiter/informations-pratiques-paris" title="Venir au musée Rodin de Paris">
          Informations pratiques
         </a>
        </li>
        <li class="collapsed">
         [linkx]
         
        </li>
        <li class="leaf">
         [ahref]
         
        </li>
        <li class="last leaf">
         [ahref]
         
        </li>
       </ul>
      </div>
     </div>
    </div>
    <div id="languesResponsive">
     <div class="current_lang">
      fr
     </div>
    </div>
    <div class="icon_search_responsive">
    </div>
    <div id="infosResponsive">
     [linkx]
     
    </div>
   </div>
   <nav class="clearfix" id="navigation" role="navigation">
    <div class="region region-navigation">
     <section class="block block-menu" id="block-menu-menu-topnav">
      <div class="content">
       <ul class="menu">
        <li class="first collapsed">
         [ahref]
         
        </li>
        <li class="collapsed">
         <a href="/fr/actualites" title="">
          Actualités
         </a>
        </li>
        <li class="leaf">
         [linkx]
         
        </li>
        <li class="last leaf">
         [linkx]
         
        </li>
       </ul>
      </div>
     </section>
     <section class="block block-locale" id="block-locale-language">
      <h2 class="block-title">
       <b>[mkey1][symbolx][pkeyx][symbolx][keyword1][bracketl1][keywordx][bracketr1][symbolx][bracketl2][keywordx][bracketr2][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx]</b>
      </h2>
      <div class="content">
       <ul class="language-switcher-locale-url">
        <li class="fr first active">
         [ahref]
         
        </li>
        <li class="en">
         [ahref]
         
        </li>
        <li class="es">
         [linkx]
         
        </li>
        <li class="zh-hans last">
         [ahref]
         
        </li>
       </ul>
      </div>
     </section>
     <section class="block block-textsize" id="block-textsize-form">
      <div class="content">
       <ul class="textsize_inline textsize_current_inline">
        <li class="ts_decrease_variable">
         [linkx]
         
        </li>
        <li class="ts_normal_variable">
         [linkx]
         
        </li>
        <li class="ts_increase_variable">
         [linkx]
         
        </li>
       </ul>
       <p class="textsize_current textsize_current_inline display_hidden current_text_display_hidden text_display_hidden">
        <span class="display_hidden">
         Current Size:
        </span>
        <span id="textsize_current" title="Current Size: 100%">
         100%
        </span>
       </p>
       <div class="ts_clear">
       </div>
      </div>
     </section>
     <section class="block block-search" id="block-search-form">
      <div class="content">
       <form accept-charset="UTF-8" action="/" class="search-form" id="search-block-form" method="post" role="search">
        <div>
         <div class="container-inline">
          <h2 class="element-invisible">
           <b>[mkey1][symbolx][pkeyx][symbolx][keyword1][bracketl1][keywordx][bracketr1][symbolx][bracketl2][keywordx][bracketr2][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx]</b>
          </h2>
          <div class="form-item form-type-textfield form-item-search-block-form">
           <label class="element-invisible" for="edit-search-block-form--2">
            Search this site
           </label>
          </div>
          <div class="form-actions form-wrapper" id="edit-actions">
          </div>
         </div>
        </div>
       </form>
      </div>
     </section>
    </div>
   </nav>
   <div class="cont1075 logo_block">
    <a href="/fr" id="logo" title="Accueil">
    </a>
   </div>
   <div class="region region-header">
    <section class="block block-mtlfirstlevelnav" id="block-mtlfirstlevelnav-nav-first-level">
     <div class="content">
      <div id="first_level_menu">
       <ul class="menu">
        <li class="leaf first expanded dropdown">
         [ahref]
         
         <ul class="dropdown-menu">
          <li class="">
           [ahref]
           
          </li>
          <li class="second">
           [ahref]
           
          </li>
          <li class="">
           [ahref]
           
          </li>
          <li class="second">
           <a href="/fr/visiter/groupes">
            Groupes
           </a>
          </li>
         </ul>
         <li class="leafsites expanded dropdown">
          [linkx]
          
          <ul class="dropdown-menu">
           <li class="">
            <a href="/fr/expositions/actuellement">
             Actuellement
            </a>
           </li>
           <li class="second">
            [linkx]
            
           </li>
           <li class="">
            <li>[pkeyx]</li>[linkx][keywordx][pkeyx]
           </li>
           <li class="second">
            <a href="/fr/expositions/expositions-passees">
             Expositions passées
            </a>
           </li>
          </ul>
          <li class="leafsites expanded dropdown">
           <a href="/fr/collections">
            Collections
           </a>
           <ul class="dropdown-menu">
            <li class="">
             [ahref]
             
            </li>
            <li class="second">
             [linkx]
             
            </li>
            <li class="">
             <a href="/fr/collections/acquisitions-recentes">
              Acquisitions récentes
             </a>
            </li>
            <li class="second">
             <a href="/">
              Catalogue des collections
             </a>
            </li>
            <li class="">
             [linkx]
             
            </li>
           </ul>
           <li class="leafsites expanded dropdown">
            [linkx]
            
            <ul class="dropdown-menu">
             <li class="">
              [keywordx][symbolx][keywordx][symbolx][bracketl6][keywordx][bracketr6][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][bracketl7][keywordx][bracketr7][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][ahref][ahref][keywordx][ahref][ahref][linkx][ahref][mkey1][mkey1][keywordx][symbolx][keywordx][symbolx][bracketl8][keywordx][bracketr8][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][bracketl9][keywordx][bracketr9][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][ahref][ahref][keywordx][linkx][linkx][linkx][ahref][keywordx][symbolx][keywordx][symbolx][bracketl10][keywordx][bracketr10][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][mkey1][mkey1][linkx][linkx][keywordx]
             </li>
             <li class="second">
              [ahref]
              
             </li>
             <li class="">
              [ahref]
              
             </li>
             <li class="second">
              [linkx]
              
             </li>
            </ul>
            <li class="leafsites expanded dropdown">
             [ahref]
             
             <ul class="dropdown-menu">
              <li class="">
               [linkx]
               
              </li>
              <li class="second">
               <a href="/">
                La Porte de l'Enfer
               </a>
              </li>
              <li class="">
               [linkx]
               
              </li>
              <li class="second">
               [linkx]
               
              </li>
              <li class="">
               <a href="/fr/recherche/les-collections-de-la-bibliotheque">
                Les collections de la bibliothèque
               </a>
              </li>
              <li class="second">
               [ahref]
               
              </li>
              <li class="">
               [linkx]
               
              </li>
              <li class="second">
               [ahref]
               
              </li>
              <li class="">
               [ahref]
               
              </li>
             </ul>
             <li class="leafsites expanded dropdown">
              [linkx]
              
              <ul class="dropdown-menu">
               <li class="">
                <a href="/fr/ressources/chronologie-dauguste-rodin">
                 Chronologie d'Auguste Rodin
                </a>
               </li>
               <li class="second">
                <a href="/fr/ressources/fiches-educatives">
                 Fiches éducatives
                </a>
               </li>
               <li class="">
                [linkx]
                
               </li>
               <li class="second">
                [linkx]
                
               </li>
               <li class="">
                <a href="/fr/ressources/donation-de-rodin-letat">
                 La donation de Rodin à l'Etat
                </a>
               </li>
               <li class="second">
                [ahref]
                
               </li>
               <li class="">
                [linkx]
                
               </li>
               <li class="second">
                [linkx]
                
               </li>
               <li class="">
                [ahref]
                
               </li>
               <li class="second">
                <a href="/fr/ressources/formations-et-partenariats">
                 Formations et partenariats
                </a>
               </li>
              </ul>
              <li class="leaf lastM fr expanded dropdown">
               [linkx]
               
               <ul class="dropdown-menu">
                <li class="">
                 [ahref]
                 
                </li>
                <li class="second">
                 [linkx]
                 
                </li>
                <li class="">
                 [ahref]
                 
                </li>
                <li class="second">
                 <a href="/fr/professionnels/marches-publics">
                  Marchés publics
                 </a>
                </li>
                <li class="">
                 <a href="/fr/professionnels/emplois-stages">
                  Emplois / Stages
                 </a>
                </li>
                <li class="second">
                 [ahref]
                 
                </li>
               </ul>
               <li class="leaf lastM fr">
                [linkx]
                
               </li>
               <li class="leaf lastM fr">
                [ahref]
                
               </li>
              </li>
             </li>
            </li>
           </li>
          </li>
         </li>
        </li>
       </ul>
      </div>
     </div>
    </section>
    <section class="block block-rodinheader" id="block-rodinheader-header-home">
     <div class="content">
      <div id="translucentHeaderBlock">
       <div class="callbacks_container">
        <ul class="rslides" id="sliderHome">
         <li>
          [linkx]
          
          [ahref]
          
          <div class="caption ">
           <h3 class="translucentTitre">
            <b>[mkey1][symbolx][pkeyx][symbolx][keyword1][bracketl1][keywordx][bracketr1][symbolx][bracketl2][keywordx][bracketr2][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx]</b>
           </h3>
           <br/>
           <div class="clear">
           </div>
           <div class="navigationPerso">
            <a class="callbacks_nav personav callbacks1_nav prev" href="#" style="cursor: pointer;">
            </a>
            [ahref]
            
           </div>
          </div>
         </li>
         <li>
          [linkx]
          
          <div class="caption none">
           <span class="translucentTitre rodinFontRegular">
            Un hâvre de paix au cœur de Paris
           </span>
           <h3 class="translucentTitre">
            [mkey1][symbolx][pkeyx][symbolx][keyword1][bracketl1][keywordx][bracketr1][symbolx][bracketl2][keywordx][bracketr2][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx]
           </h3>
           <h4 class="translucentSoustitre">
            Musée Rodin - Paris
           </h4>
           <div class="clear">
           </div>
           <div class="navigationPerso">
            [linkx]
            
            <a class="callbacks_nav personav callbacks1_nav next" href="#" style="cursor: pointer;">
            </a>
           </div>
          </div>
         </li>
         <li>
          [linkx]
          
          <div class="caption none">
           <h3 class="translucentTitre">
            [mkey1][symbolx][pkeyx][symbolx][keyword1][bracketl1][keywordx][bracketr1][symbolx][bracketl2][keywordx][bracketr2][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx]
           </h3>
           <h4 class="translucentSoustitre">
            Reproductions de sculptures
           </h4>
           <div class="clear">
           </div>
           <div class="navigationPerso">
            <a class="callbacks_nav personav callbacks1_nav prev" href="#" style="cursor: pointer;">
            </a>
            [linkx]
            
           </div>
          </div>
         </li>
         <li>
          <a href="/fr/meudon">
           <div class="copyrightPictureContainer">
            <div class="copyrightBehaviour">
             <div class="mediaCopyrightDisplay">
             </div>
            </div>
           </div>
          </a>
          <div class="caption none">
           <span class="translucentTitre rodinFontRegular">
            L'expérience de la sculpture
           </span>
           <h3 class="translucentTitre">
            <b>[mkey1][symbolx][pkeyx][symbolx][keyword1][bracketl1][keywordx][bracketr1][symbolx][bracketl2][keywordx][bracketr2][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx]</b>
           </h3>
           <h4 class="translucentSoustitre">
            À 30 minutes de Paris
           </h4>
           <div class="clear">
           </div>
           <div class="navigationPerso">
            [ahref]
            
            [ahref]
            
           </div>
          </div>
         </li>
        </ul>
       </div>
      </div>
     </div>
    </section>
   </div>
  </header>
  <section class="clearfix" id="main" role="main">
   <div id="content">
    <a id="main-content">
    </a>
    <div id="home_mav">
     <ul id="home_mav_blocks">
      <li class="item home_mav_block">
       <h1 class="rodinFontRegular">
        [mkey1][symbolx][pkeyx][symbolx][keyword1][bracketl1][keywordx][bracketr1][symbolx][bracketl2][keywordx][bracketr2][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx]
       </h1>
       <div class="visuel">
        [linkx]
        
       </div>
       <div class="desc">
        [ahref]
        
       </div>
      </li>
      <li class="item home_mav_block">
       <h1 class="rodinFontRegular">
        <b>[mkey1][symbolx][pkeyx][symbolx][keyword1][bracketl1][keywordx][bracketr1][symbolx][bracketl2][keywordx][bracketr2][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx]</b>
       </h1>
       <div class="visuel">
        [ahref]
        
       </div>
       <div class="desc">
        <a href="/fr/visiter/informations-pratiques-paris/carte-dadhesion">
         <span class="fleche">
          >
         </span>
         <p>
          Vivez le musée Rodin en toute liberté ! Grâce à la carte d'adhésion, bénéficiez de nombreux avantages : accès coupe-file, tarifs réduits, visites guidées gratuites et réductions !
         </p>
        </a>
       </div>
      </li>
      <li class="item home_mav_block">
       <h1 class="rodinFontRegular">
        <b>[mkey1][symbolx][pkeyx][symbolx][keyword1][bracketl1][keywordx][bracketr1][symbolx][bracketl2][keywordx][bracketr2][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx]</b>
       </h1>
       <div class="visuel">
        [linkx]
        
       </div>
       <div class="desc">
        [linkx]
        
       </div>
      </li>
      <li class="item home_mav_block">
       <h1 class="rodinFontRegular">
        [mkey1][symbolx][pkeyx][symbolx][keyword1][bracketl1][keywordx][bracketr1][symbolx][bracketl2][keywordx][bracketr2][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx]
       </h1>
       <div class="visuel">
        [linkx]
         <li>[keywordx][symbolx][keywordx][symbolx][bracketl5][keywordx][bracketr5][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx]</li><li>[keywordx]</li><li>[keywordx]</li>
        
       </div>
       <div class="desc">
        [linkx]
        
       </div>
      </li>
      <li class="item home_mav_block">
       <h1 class="rodinFontRegular">
        [mkey1][symbolx][pkeyx][symbolx][keyword1][bracketl1][keywordx][bracketr1][symbolx][bracketl2][keywordx][bracketr2][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx]
       </h1>
       <div class="visuel">
        [linkx]
        
       </div>
       <div class="desc">
        <a href="/fr/agenda/activite/visites-en-famille-vacances-dete-2019">
         <span class="fleche">
          >
         </span>
         <p>
          Au mois de juillet, laissez-vous conter en famille les plus grands mythes avec les yeux de Rodin, puis expérimentez vos connaissances au fil de la visite !
         </p>
        </a>
       </div>
      </li>
      <li class="item home_mav_block">
       <h1 class="rodinFontRegular">
        [mkey1][symbolx][pkeyx][symbolx][keyword1][bracketl1][keywordx][bracketr1][symbolx][bracketl2][keywordx][bracketr2][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx]
       </h1>
       <div class="visuel">
        [linkx]
        
       </div>
       <div class="desc">
        [ahref]
        
       </div>
      </li>
     </ul>
     <div class="clear">
     </div>
     <div id="home_mav_textblocks">
      <div class="grey-box ">
       [ahref]
       
      </div>
      <div class="grey-box ">
       <a href="/fr/le-musee-rodin/soutenir-le-musee">
        <h1 class="title rodinFontRegular">
         [mkey1][symbolx][pkeyx][symbolx][keyword1][bracketl1][keywordx][bracketr1][symbolx][bracketl2][keywordx][bracketr2][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx]
        </h1>
        <span class="links rodinFontRegular">
         >Découvrez les projets
        </span>
       </a>
      </div>
      <div class="grey-box ">
       [linkx]
       
      </div>
      <div class="grey-box last">
       <li>[pkeyx]</li><li>[keywordx][symbolx][keywordx][symbolx][bracketl4][keywordx][bracketr4][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx]</li>[pkeyx][pkeyx][keywordx]
      </div>
     </div>
     <div class="clear">
     </div>
     <div class="lastminut richtext">
      <hr/>
      <p class="rtecenter">
       Ouvert du mardi au dimanche de 10h à 18h30.
      </p>
      <p class="rtecenter">
      </p>
     </div>
    </div>
   </div>
   <aside class="postcontent clearfix" id="post-content" role="complementary">
    <div class="region region-post-content">
     <section class="block block-custom-search-blocks" id="block-custom-search-blocks-1">
      <h2 class="block-title">
       <b>[mkey1][symbolx][pkeyx][symbolx][keyword1][bracketl1][keywordx][bracketr1][symbolx][bracketl2][keywordx][bracketr2][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx]</b>
      </h2>
      <div class="content">
       <form accept-charset="UTF-8" action="/" class="search-form" id="custom-search-blocks-form-1" method="post" role="search">
        <div>
         <div class="form-item form-type-textfield form-item-custom-search-blocks-form-1">
          <label class="element-invisible" for="edit-custom-search-blocks-form-1--2">
           Search this site
          </label>
         </div>
         <div class="form-actions form-wrapper" id="edit-actions--2">
         </div>
        </div>
       </form>
      </div>
     </section>
    </div>
   </aside>
  </section>
 </div>
 <div class="go_top">
 </div>
 <footer id="footer" role="contentinfo">
  <div class="region region-footer">
   <section class="block block-block" id="block-block-1">
    <div class="content">
     <ul class="footer_reseaux">
      <li>
       [linkx]
       
      </li>
      <li>
       [linkx]
       
      </li>
      <li>
       <a class="instagram" href="/museerodinparis/" title="">
       </a>
      </li>
      <li>
       [linkx]
       
      </li>
      <li>
       [ahref]
        [keywordx][linkx][mkey1][pkeyx][ahref][keywordx][symbolx][keywordx][symbolx][bracketl1][keywordx][bracketr1][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][linkx][ahref][linkx][mkey1][mkey1][keywordx][symbolx][keywordx][symbolx][bracketl2][keywordx][bracketr2][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][pkeyx][keywordx][ahref][linkx][mkey1][mkey1][mkey1]
       
      </li>
      <li>
       [ahref]
       
      </li>
      <li>
       <a class="rss" href="/fr/rss.xml" title="">
       </a>
      </li>
     </ul>
    </div>
   </section>
   <section class="block block-mtlfooterfirstnav" id="block-mtlfooterfirstnav-footer-first-level">
    <div class="content">
     <nav id="footer_first">
      <ul>
       <li class="leaf first">
        [ahref]
        
       </li>
       <span class="pipe">
        |
       </span>
       <li class="leaf">
        [ahref]
        
       </li>
       <span class="pipe">
        |
       </span>
       <li class="leaf">
        [linkx]
        
       </li>
       <span class="pipe">
        |
       </span>
       <li class="leaf">
        <a class="" href="/fr/mentions-legales">
         Mentions légales
        </a>
       </li>
       <span class="pipe">
        |
       </span>
       <li class="leaf">
        [ahref]
        
       </li>
       <span class="pipe">
        |
       </span>
       <li class="leaf lastM">
        [ahref]
        
       </li>
      </ul>
     </nav>
    </div>
   </section>
  </div>
 </footer>
 <data class="mj-w-data" data-apikey="IcU" data-base="https://app.mailjet.com" data-height="420" data-lang="fr_FR" data-statics="statics" data-token="fa21d06e4d84022e491b886d28b25d40" data-w-id="76M" data-width="640">
 </data>
 <data class="mj-w-data" data-apikey="IcU" data-base="https://app.mailjet.com" data-height="420" data-lang="en_US" data-statics="statics" data-token="c42c2638a864a9b289a8c6314b733290" data-w-id="76P" data-width="640">
 </data>
 <noscript>
 </noscript>
 <b style="color:black;background-color:#a0ffff">
  jnice09-ipp30-wq-zq-0215
 </b>
</body>
|<---