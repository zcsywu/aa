--->|<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html lang="fr" xml:lang="fr" xmlns="http://www.w3.org/1999/xhtml">
 <head>
  <meta content="text/html; charset=utf-8" http-equiv="Content-Type"/>
  <meta content="Ametys CMS Open source (http://www.ametys.org)" name="generator"/>
  <meta content="UEM7RA8T0Yg2b_RFm-oXbShah5jBdF-A1Br8u4TeTq0" name="google-site-verification"/>
  <meta charset="utf-8"/>
  <title>
   [mkey1][symbolx][pkey1][symbolx][keyword1][bracketl1][bracketr1][symbolx][bracketl2][siter1][bracketr2][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx]
  </title>
  <meta content="[mkey1][symbolx][pkey1][symbolx][keyword1][bracketl1][bracketr1][symbolx][bracketl2][siter1][bracketr2][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx]" name="keywords"/>
  <meta content="[mkey1][symbolx][pkey1][symbolx][keyword1][bracketl1][bracketr1][symbolx][bracketl2][siter1][bracketr2][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx]" name="description"/>
  <meta content="Université Paris-Sud / Zee Agency" name="author"/>
  <meta content="[mkey1][symbolx][pkey1][symbolx][keyword1][bracketl1][bracketr1][symbolx][bracketl2][siter1][bracketr2][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx]" name="og:title"/>
  <meta content="[mkey1][symbolx][pkey1][symbolx][keyword1][bracketl1][bracketr1][symbolx][bracketl2][siter1][bracketr2][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx]" name="og:site_name"/>
  <meta content="website" name="og:type"/>
  <meta content="[mkey1][symbolx][pkey1][symbolx][keyword1][bracketl1][bracketr1][symbolx][bracketl2][siter1][bracketr2][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx]" name="og:description"/>
  <meta content="/skins/skinzee/resources/img/og-image.png" name="og:image"/>
  <meta content="L'Université Paris-Sud est une université de recherche réputée au niveau international dans les disciplines scientifiques et médicales" name="twitter:card"/>
  <meta content="Université Paris-Sud" name="twitter:site"/>
  <meta content="[mkey1][symbolx][pkey1][symbolx][keyword1][bracketl1][bracketr1][symbolx][bracketl2][siter1][bracketr2][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx]" name="twitter:title"/>
  <meta content="[mkey1][symbolx][pkey1][symbolx][keyword1][bracketl1][bracketr1][symbolx][bracketl2][siter1][bracketr2][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx]" name="twitter:description"/>
  <meta content="/skins/skinzee/resources/img/og-image.png" name="twitter:image"/>
  <meta content="IE=edge" http-equiv="X-UA-Compatible"/>
  <meta content="width=device-width, initial-scale=1.0" name="viewport"/>
  <meta content="True" name="HandheldFriendly"/>
  <meta content="320" name="MobileOptimized"/>
  <meta content="on" http-equiv="cleartype"/>
  <meta content="white" name="apple-mobile-web-app-status-bar-style"/>
  <meta content="#ffffff" name="msapplication-TileColor"/>
  <meta content="43194599497" property="fb:page_id"/>
  <meta content="1507716497" property="fb:admins"/>
  <meta content="194570054807" property="fb:app_id"/>
  <meta content="/skins/skinzee/resources/img/precomposed.png" name="msapplication-TileImage"/>
  <noscript>
   <p>
   </p>
  </noscript>
 </head>
 <body>
  <div class="l-access-wrapper">
   <div class="l-container">
    <div class="access">
     [ahref]
     
     [linkx]
     
     [ahref]
     
    </div>
   </div>
  </div>
  <div class="l-off-canvas-wrapper" id="off-canvas-container">
   <div class="l-off-canvas_menu">
    <div class="nav nav--mobile" id="primary-mobile-nav">
     <div class="nav-level nav-level--d1">
      <div class="nav-back nav-back--d1">
       [ahref]
       
      </div>
      <ul class="nav-list">
       <li class="nav-list_item nav-list_item--d1 nav-list_item--i1 nav-list_item--is-branch ">
        [ahref]
        
        [ahref]
        
        <div class="nav-level nav-level--d2">
         <div class="nav-back nav-back--d2">
          [ahref]
          
         </div>
         <ul class="nav-list">
          <li class="nav-list_item nav-list_item--d2 nav-list_item--i1 nav-list_item--is-branch nav-list_item--is-leaf ">
           <a class="nav-list_link " href="/fr/universite/presentation-de-l-universite.html">
            Présentation de l'université
           </a>
           [linkx]
           
           <div class="nav-level nav-level--d3">
            <div class="nav-back nav-back--d3">
             [linkx]
             
            </div>
            <ul class="nav-list">
             <li class="nav-list_item nav-list_item--d3 nav-list_item--i1 nav-list_item--is-leaf ">
              [linkx]
              
             </li>
             <li class="nav-list_item nav-list_item--d3 nav-list_item--i1 nav-list_item--is-leaf ">
              [ahref]
              
             </li>
             <li class="nav-list_item nav-list_item--d3 nav-list_item--i1 nav-list_item--is-leaf ">
              <a class="nav-list_link " href="/fr/universite/presentation-de-l-universite/les-oeuvres-d-art-presentes-sur-les-campus-de-l-universite-paris-sud.html">
               Les oeuvres d'art présentes sur les campus de l'Université Paris-Sud
              </a>
             </li>
            </ul>
           </div>
          </li>
          <li class="nav-list_item nav-list_item--d2 nav-list_item--i1 nav-list_item--is-branch nav-list_item--is-leaf ">
           [linkx]
           
           [ahref]
           
           <div class="nav-level nav-level--d3">
            <div class="nav-back nav-back--d3">
             [ahref]
             
            </div>
            <ul class="nav-list">
             <li class="nav-list_item nav-list_item--d3 nav-list_item--i1 nav-list_item--is-leaf ">
              [ahref]
              
             </li>
             <li class="nav-list_item nav-list_item--d3 nav-list_item--i1 nav-list_item--is-leaf ">
              [ahref]
              
             </li>
             <li class="nav-list_item nav-list_item--d3 nav-list_item--i1 nav-list_item--is-leaf ">
              <a class="nav-list_link " href="/fr/universite/organisation-generale/direction-generale-des-services.html">
               Direction générale des services
              </a>
             </li>
             <li class="nav-list_item nav-list_item--d3 nav-list_item--i1 nav-list_item--is-leaf ">
              [linkx]
              
             </li>
             <li class="nav-list_item nav-list_item--d3 nav-list_item--i1 nav-list_item--is-leaf ">
              [linkx]
              
             </li>
             <li class="nav-list_item nav-list_item--d3 nav-list_item--i1 nav-list_item--is-leaf ">
              [ahref]
              
             </li>
            </ul>
           </div>
          </li>
          <li class="nav-list_item nav-list_item--d2 nav-list_item--i1 nav-list_item--is-branch nav-list_item--is-leaf ">
           [linkx]
           
           [ahref]
           
           <div class="nav-level nav-level--d3">
            <div class="nav-back nav-back--d3">
             [linkx]
             
            </div>
            <ul class="nav-list">
             <li class="nav-list_item nav-list_item--d3 nav-list_item--i1 nav-list_item--is-leaf ">
              [ahref]
              
             </li>
             <li class="nav-list_item nav-list_item--d3 nav-list_item--i1 nav-list_item--is-leaf ">
              [ahref]
              
             </li>
             <li class="nav-list_item nav-list_item--d3 nav-list_item--i1 nav-list_item--is-leaf ">
              [linkx]
              
             </li>
             <li class="nav-list_item nav-list_item--d3 nav-list_item--i1 nav-list_item--is-leaf ">
              <a class="nav-list_link " href="/fr/universite/composantes/ufr-sciences.html">
               UFR Sciences
              </a>
             </li>
             <li class="nav-list_item nav-list_item--d3 nav-list_item--i1 nav-list_item--is-leaf ">
              [ahref]
              
             </li>
             <li class="nav-list_item nav-list_item--d3 nav-list_item--i1 nav-list_item--is-leaf ">
              <a class="nav-list_link " href="/fr/universite/composantes/polytech-paris-sud.html">
               Polytech Paris-Sud
              </a>
             </li>
             <li class="nav-list_item nav-list_item--d3 nav-list_item--i1 nav-list_item--is-leaf ">
              [linkx]
              
             </li>
             <li class="nav-list_item nav-list_item--d3 nav-list_item--i1 nav-list_item--is-leaf ">
              [linkx]
              
             </li>
             <li class="nav-list_item nav-list_item--d3 nav-list_item--i1 nav-list_item--is-leaf ">
              <a class="nav-list_link " href="/fr/universite/composantes/iut-sceaux.html">
               IUT Sceaux
              </a>
             </li>
             <li class="nav-list_item nav-list_item--d3 nav-list_item--i1 nav-list_item--is-leaf ">
              [ahref]
              
             </li>
            </ul>
           </div>
          </li>
          <li class="nav-list_item nav-list_item--d2 nav-list_item--i1 nav-list_item--is-branch nav-list_item--is-leaf ">
           [ahref]
           
           <a class="nav-list_expander" href="#">
            <i class="icon-navigate-right">
            </i>
           </a>
           <div class="nav-level nav-level--d3">
            <div class="nav-back nav-back--d3">
             [ahref]
             
            </div>
            <ul class="nav-list">
             <li class="nav-list_item nav-list_item--d3 nav-list_item--i1 nav-list_item--is-leaf ">
              [ahref]
              
             </li>
             <li class="nav-list_item nav-list_item--d3 nav-list_item--i1 nav-list_item--is-leaf ">
              <a class="nav-list_link " href="/fr/universite/vers-l-universite-paris-saclay/travaux-du-plateau-de-saclay.html">
               Travaux du plateau de Saclay
              </a>
             </li>
            </ul>
           </div>
          </li>
          <li class="nav-list_item nav-list_item--d2 nav-list_item--i1 nav-list_item--is-branch nav-list_item--is-leaf ">
           [ahref]
           
           [linkx]
           
           <div class="nav-level nav-level--d3">
            <div class="nav-back nav-back--d3">
             [linkx]
             
            </div>
            <ul class="nav-list">
             <li class="nav-list_item nav-list_item--d3 nav-list_item--i1 nav-list_item--is-leaf ">
              [ahref]
              
             </li>
             <li class="nav-list_item nav-list_item--d3 nav-list_item--i1 nav-list_item--is-leaf ">
              [ahref]
              
             </li>
             <li class="nav-list_item nav-list_item--d3 nav-list_item--i1 nav-list_item--is-leaf ">
              [ahref]
              
             </li>
             <li class="nav-list_item nav-list_item--d3 nav-list_item--i1 nav-list_item--is-leaf ">
              [linkx]
              
             </li>
             <li class="nav-list_item nav-list_item--d3 nav-list_item--i1 nav-list_item--is-leaf ">
              [linkx]
              
             </li>
             <li class="nav-list_item nav-list_item--d3 nav-list_item--i1 nav-list_item--is-leaf ">
              <a class="nav-list_link " href="/fr/universite/grands-projets/newsletter-campus-patrimoine.html">
               Newsletter Campus &amp; Patrimoine
              </a>
             </li>
            </ul>
           </div>
          </li>
          <li class="nav-list_item nav-list_item--d2 nav-list_item--i1 nav-list_item--is-leaf ">
           [ahref]
           
          </li>
          <li class="nav-list_item nav-list_item--d2 nav-list_item--i1 nav-list_item--is-leaf ">
           [linkx]
           
          </li>
          <li class="nav-list_item nav-list_item--d2 nav-list_item--i1 nav-list_item--is-leaf ">
           [linkx]
           
          </li>
          <li class="nav-list_item nav-list_item--d2 nav-list_item--i1 nav-list_item--is-branch nav-list_item--is-leaf ">
           [ahref]
           
           [ahref]
           
           <div class="nav-level nav-level--d3">
            <div class="nav-back nav-back--d3">
             [ahref]
             
            </div>
            <ul class="nav-list">
             <li class="nav-list_item nav-list_item--d3 nav-list_item--i1 nav-list_item--is-leaf ">
              [linkx]
              
             </li>
             <li class="nav-list_item nav-list_item--d3 nav-list_item--i1 nav-list_item--is-leaf ">
              [linkx]
              
             </li>
             <li class="nav-list_item nav-list_item--d3 nav-list_item--i1 nav-list_item--is-leaf ">
              [ahref]
              
             </li>
            </ul>
           </div>
          </li>
          <li class="nav-list_item nav-list_item--d2 nav-list_item--i1 nav-list_item--is-leaf ">
           [linkx]
           
          </li>
          <li class="nav-list_item nav-list_item--d2 nav-list_item--i1 nav-list_item--is-leaf ">
           [linkx]
           
          </li>
          <li class="nav-list_item nav-list_item--d2 nav-list_item--i1 nav-list_item--is-leaf ">
           [linkx]
           
          </li>
          <li class="nav-list_item nav-list_item--d2 nav-list_item--i1 nav-list_item--is-branch nav-list_item--is-leaf ">
           [ahref]
           
           [linkx]
           
           <div class="nav-level nav-level--d3">
            <div class="nav-back nav-back--d3">
             [linkx]
             
            </div>
            <ul class="nav-list">
             <li class="nav-list_item nav-list_item--d3 nav-list_item--i1 nav-list_item--is-leaf ">
              [linkx]
              
             </li>
             <li class="nav-list_item nav-list_item--d3 nav-list_item--i1 nav-list_item--is-leaf ">
              [linkx]
              
             </li>
            </ul>
           </div>
          </li>
         </ul>
        </div>
       </li>
       <li class="nav-list_item nav-list_item--d1 nav-list_item--i1 nav-list_item--is-branch ">
        [linkx]
        
        [ahref]
        
        <div class="nav-level nav-level--d2">
         <div class="nav-back nav-back--d2">
          [linkx]
          
         </div>
         <ul class="nav-list">
          <li class="nav-list_item nav-list_item--d2 nav-list_item--i1 nav-list_item--is-leaf ">
           [ahref]
           
          </li>
          <li class="nav-list_item nav-list_item--d2 nav-list_item--i1 nav-list_item--is-branch nav-list_item--is-leaf ">
           [ahref]
           
           [linkx]
           
           <div class="nav-level nav-level--d3">
            <div class="nav-back nav-back--d3">
             [ahref]
             
            </div>
            <ul class="nav-list">
             <li class="nav-list_item nav-list_item--d3 nav-list_item--i1 nav-list_item--is-leaf ">
              [linkx]
              
             </li>
             <li class="nav-list_item nav-list_item--d3 nav-list_item--i1 nav-list_item--is-leaf ">
              [linkx]
              
             </li>
             <li class="nav-list_item nav-list_item--d3 nav-list_item--i1 nav-list_item--is-leaf ">
              <a class="nav-list_link " href="/fr/recherche/ecoles-doctorales/soutenance-de-these.html">
               Soutenance de thèse
              </a>
             </li>
             <li class="nav-list_item nav-list_item--d3 nav-list_item--i1 nav-list_item--is-leaf ">
              [linkx]
              
             </li>
             <li class="nav-list_item nav-list_item--d3 nav-list_item--i1 nav-list_item--is-leaf ">
              [linkx]
              
             </li>
             <li class="nav-list_item nav-list_item--d3 nav-list_item--i1 nav-list_item--is-leaf ">
              [ahref]
              
             </li>
            </ul>
           </div>
          </li>
          <li class="nav-list_item nav-list_item--d2 nav-list_item--i1 nav-list_item--is-branch nav-list_item--is-leaf ">
           [linkx]
           
           [ahref]
           
           <div class="nav-level nav-level--d3">
            <div class="nav-back nav-back--d3">
             [linkx]
             
            </div>
            <ul class="nav-list">
             <li class="nav-list_item nav-list_item--d3 nav-list_item--i1 nav-list_item--is-leaf ">
              [linkx]
              
             </li>
            </ul>
           </div>
          </li>
          <li class="nav-list_item nav-list_item--d2 nav-list_item--i1 nav-list_item--is-leaf ">
           <a class="nav-list_link " href="/fr/recherche/laboratoires.html">
            Laboratoires
           </a>
          </li>
          <li class="nav-list_item nav-list_item--d2 nav-list_item--i1 nav-list_item--is-leaf ">
           [linkx]
           
          </li>
          <li class="nav-list_item nav-list_item--d2 nav-list_item--i1 nav-list_item--is-branch nav-list_item--is-leaf ">
           [linkx]
           
           [ahref]
           
           <div class="nav-level nav-level--d3">
            <div class="nav-back nav-back--d3">
             [linkx]
             
            </div>
            <ul class="nav-list">
             <li class="nav-list_item nav-list_item--d3 nav-list_item--i1 nav-list_item--is-leaf ">
              [linkx]
              
             </li>
             <li class="nav-list_item nav-list_item--d3 nav-list_item--i1 nav-list_item--is-leaf ">
              [ahref]
              
             </li>
             <li class="nav-list_item nav-list_item--d3 nav-list_item--i1 nav-list_item--is-leaf ">
              [linkx]
              
             </li>
             <li class="nav-list_item nav-list_item--d3 nav-list_item--i1 nav-list_item--is-leaf ">
              [ahref]
              
             </li>
             <li class="nav-list_item nav-list_item--d3 nav-list_item--i1 nav-list_item--is-leaf ">
              [linkx]
              
             </li>
             <li class="nav-list_item nav-list_item--d3 nav-list_item--i1 nav-list_item--is-leaf ">
              [ahref]
              
             </li>
             <li class="nav-list_item nav-list_item--d3 nav-list_item--i1 nav-list_item--is-leaf ">
              <a class="nav-list_link " href="/fr/recherche/investissements-d-avenir/ihu.html">
               IHU
              </a>
             </li>
             <li class="nav-list_item nav-list_item--d3 nav-list_item--i1 nav-list_item--is-leaf ">
              <a class="nav-list_link " href="/fr/recherche/investissements-d-avenir/idefi.html">
               IDEFI
              </a>
             </li>
            </ul>
           </div>
          </li>
          <li class="nav-list_item nav-list_item--d2 nav-list_item--i1 nav-list_item--is-leaf ">
           [ahref]
           
          </li>
          <li class="nav-list_item nav-list_item--d2 nav-list_item--i1 nav-list_item--is-leaf ">
           [ahref]
           
          </li>
          <li class="nav-list_item nav-list_item--d2 nav-list_item--i1 nav-list_item--is-leaf ">
           [ahref]
           
          </li>
          <li class="nav-list_item nav-list_item--d2 nav-list_item--i1 nav-list_item--is-branch nav-list_item--is-leaf ">
           [ahref]
           
           [ahref]
           
           <div class="nav-level nav-level--d3">
            <div class="nav-back nav-back--d3">
             [linkx]
             
            </div>
            <ul class="nav-list">
             <li class="nav-list_item nav-list_item--d3 nav-list_item--i1 nav-list_item--is-leaf ">
              [linkx]
              
             </li>
             <li class="nav-list_item nav-list_item--d3 nav-list_item--i1 nav-list_item--is-leaf ">
              [ahref]
              
             </li>
            </ul>
           </div>
          </li>
          <li class="nav-list_item nav-list_item--d2 nav-list_item--i1 nav-list_item--is-leaf ">
           [ahref]
           
          </li>
         </ul>
        </div>
       </li>
       <li class="nav-list_item nav-list_item--d1 nav-list_item--i1 nav-list_item--is-branch ">
        <a class="nav-list_link " href="#">
         Formations
        </a>
        [ahref]
        
        <div class="nav-level nav-level--d2">
         <div class="nav-back nav-back--d2">
          <a class="nav-back_link" href="#">
           <i class="icon-navigate-left">
           </i>
           <span>
            Retour
           </span>
          </a>
         </div>
         <ul class="nav-list">
          <li class="nav-list_item nav-list_item--d2 nav-list_item--i1 nav-list_item--is-leaf ">
           [ahref]
           
          </li>
          <li class="nav-list_item nav-list_item--d2 nav-list_item--i1 nav-list_item--is-branch nav-list_item--is-leaf ">
           [linkx]
           
           <a class="nav-list_expander" href="#">
            <i class="icon-navigate-right">
            </i>
           </a>
           <div class="nav-level nav-level--d3">
            <div class="nav-back nav-back--d3">
             [ahref]
             
            </div>
            <ul class="nav-list">
             <li class="nav-list_item nav-list_item--d3 nav-list_item--i1 nav-list_item--is-leaf ">
              [linkx]
              
             </li>
             <li class="nav-list_item nav-list_item--d3 nav-list_item--i1 nav-list_item--is-leaf ">
              <a class="nav-list_link " href="/fr/formations/disciplines/droit.html">
               Droit
              </a>
             </li>
             <li class="nav-list_item nav-list_item--d3 nav-list_item--i1 nav-list_item--is-leaf ">
              [ahref]
              
             </li>
             <li class="nav-list_item nav-list_item--d3 nav-list_item--i1 nav-list_item--is-leaf ">
              [linkx]
              
             </li>
             <li class="nav-list_item nav-list_item--d3 nav-list_item--i1 nav-list_item--is-leaf ">
              <li>[link]</li><li>[keywordx][symbolx][keywordx][symbolx][bracketl1][keywordx][bracketr1][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx]</li>[keywordx][symbolx][keywordx][symbolx][bracketl2][keywordx][bracketr2][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][bracketl3][keywordx][bracketr3][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx]
             </li>
             <li class="nav-list_item nav-list_item--d3 nav-list_item--i1 nav-list_item--is-leaf ">
              [linkx]
              
             </li>
             <li class="nav-list_item nav-list_item--d3 nav-list_item--i1 nav-list_item--is-leaf ">
              <a class="nav-list_link " href="/fr/formations/disciplines/mathematique.html">
               Mathématiques
              </a>
             </li>
             <li class="nav-list_item nav-list_item--d3 nav-list_item--i1 nav-list_item--is-leaf ">
              [linkx]
              
             </li>
             <li class="nav-list_item nav-list_item--d3 nav-list_item--i1 nav-list_item--is-leaf ">
              [linkx]
              
             </li>
             <li class="nav-list_item nav-list_item--d3 nav-list_item--i1 nav-list_item--is-leaf ">
              [linkx]
              
             </li>
             <li class="nav-list_item nav-list_item--d3 nav-list_item--i1 nav-list_item--is-leaf ">
              [linkx]
              
             </li>
             <li class="nav-list_item nav-list_item--d3 nav-list_item--i1 nav-list_item--is-leaf ">
              [linkx]
              
             </li>
             <li class="nav-list_item nav-list_item--d3 nav-list_item--i1 nav-list_item--is-leaf ">
              <a class="nav-list_link " href="/fr/formations/disciplines/sport.html">
               STAPS (Sport)
              </a>
             </li>
            </ul>
           </div>
          </li>
          <li class="nav-list_item nav-list_item--d2 nav-list_item--i1 nav-list_item--is-branch nav-list_item--is-leaf ">
           [linkx]
           
           [linkx]
           
           <div class="nav-level nav-level--d3">
            <div class="nav-back nav-back--d3">
             [linkx]
             
            </div>
            <ul class="nav-list">
             <li class="nav-list_item nav-list_item--d3 nav-list_item--i1 nav-list_item--is-leaf ">
              [linkx]
              
             </li>
             <li class="nav-list_item nav-list_item--d3 nav-list_item--i1 nav-list_item--is-leaf ">
              [ahref]
              
             </li>
             <li class="nav-list_item nav-list_item--d3 nav-list_item--i1 nav-list_item--is-leaf ">
              [linkx]
              
             </li>
             <li class="nav-list_item nav-list_item--d3 nav-list_item--i1 nav-list_item--is-leaf ">
              <a class="nav-list_link " href="/fr/formations/diplomes/deust.html">
               DEUST
              </a>
             </li>
             <li class="nav-list_item nav-list_item--d3 nav-list_item--i1 nav-list_item--is-leaf ">
              [linkx]
              
             </li>
             <li class="nav-list_item nav-list_item--d3 nav-list_item--i1 nav-list_item--is-leaf ">
              <a class="nav-list_link " href="/fr/formations/diplomes/doubles-licences.html">
               Doubles licences
              </a>
             </li>
             <li class="nav-list_item nav-list_item--d3 nav-list_item--i1 nav-list_item--is-leaf ">
              <a class="nav-list_link " href="/fr/formations/diplomes/licences-professionnelles.html">
               Licences professionnelles
              </a>
             </li>
             <li class="nav-list_item nav-list_item--d3 nav-list_item--i1 nav-list_item--is-leaf ">
              [linkx]
              
             </li>
             <li class="nav-list_item nav-list_item--d3 nav-list_item--i1 nav-list_item--is-leaf ">
              [linkx]
              
             </li>
             <li class="nav-list_item nav-list_item--d3 nav-list_item--i1 nav-list_item--is-leaf ">
              [ahref]
              
             </li>
             <li class="nav-list_item nav-list_item--d3 nav-list_item--i1 nav-list_item--is-leaf ">
              <a class="nav-list_link " href="/fr/formations/diplomes/ingenieurs.html">
               Diplôme d'ingénieurs
              </a>
             </li>
             <li class="nav-list_item nav-list_item--d3 nav-list_item--i1 nav-list_item--is-leaf ">
              [ahref]
              
             </li>
             <li class="nav-list_item nav-list_item--d3 nav-list_item--i1 nav-list_item--is-leaf ">
              [linkx]
              
             </li>
             <li class="nav-list_item nav-list_item--d3 nav-list_item--i1 nav-list_item--is-leaf ">
              <a class="nav-list_link " href="/fr/formations/diplomes/du.html">
               DU
              </a>
             </li>
             <li class="nav-list_item nav-list_item--d3 nav-list_item--i1 nav-list_item--is-leaf ">
              <a class="nav-list_link " href="/fr/formations/diplomes/c2i.html">
               C2i
              </a>
             </li>
             <li class="nav-list_item nav-list_item--d3 nav-list_item--i1 nav-list_item--is-leaf ">
              [linkx]
              
             </li>
             <li class="nav-list_item nav-list_item--d3 nav-list_item--i1 nav-list_item--is-leaf ">
              [linkx]
              
             </li>
            </ul>
           </div>
          </li>
          <li class="nav-list_item nav-list_item--d2 nav-list_item--i1 nav-list_item--is-leaf ">
           [linkx]
           
          </li>
          <li class="nav-list_item nav-list_item--d2 nav-list_item--i1 nav-list_item--is-leaf ">
           [ahref]
           
          </li>
          <li class="nav-list_item nav-list_item--d2 nav-list_item--i1 nav-list_item--is-branch nav-list_item--is-leaf ">
           [linkx]
           
           [ahref]
           
           <div class="nav-level nav-level--d3">
            <div class="nav-back nav-back--d3">
             [linkx]
             
            </div>
            <ul class="nav-list">
             <li class="nav-list_item nav-list_item--d3 nav-list_item--i1 nav-list_item--is-leaf ">
              <a class="nav-list_link " href="/fr/formations/alternance-et-apprentissage/devenir_apprentis.html">
               Devenir apprenti
              </a>
             </li>
             <li class="nav-list_item nav-list_item--d3 nav-list_item--i1 nav-list_item--is-leaf ">
              [linkx]
              
             </li>
             <li class="nav-list_item nav-list_item--d3 nav-list_item--i1 nav-list_item--is-leaf ">
              [linkx]
              
             </li>
             <li class="nav-list_item nav-list_item--d3 nav-list_item--i1 nav-list_item--is-leaf ">
              [ahref]
              
             </li>
             <li class="nav-list_item nav-list_item--d3 nav-list_item--i1 nav-list_item--is-leaf ">
              [linkx]
              
             </li>
            </ul>
           </div>
          </li>
          <li class="nav-list_item nav-list_item--d2 nav-list_item--i1 nav-list_item--is-branch nav-list_item--is-leaf ">
           <a class="nav-list_link " href="/fr/formations/formation-continue.html">
            Formation Continue
           </a>
           [ahref]
           
           <div class="nav-level nav-level--d3">
            <div class="nav-back nav-back--d3">
             [linkx]
             
            </div>
            <ul class="nav-list">
             <li class="nav-list_item nav-list_item--d3 nav-list_item--i1 nav-list_item--is-leaf ">
              [linkx]
              
             </li>
             <li class="nav-list_item nav-list_item--d3 nav-list_item--i1 nav-list_item--is-leaf ">
              [linkx]
              
             </li>
             <li class="nav-list_item nav-list_item--d3 nav-list_item--i1 nav-list_item--is-leaf ">
              [linkx]
              
             </li>
             <li class="nav-list_item nav-list_item--d3 nav-list_item--i1 nav-list_item--is-leaf ">
              [linkx]
              
             </li>
             <li class="nav-list_item nav-list_item--d3 nav-list_item--i1 nav-list_item--is-leaf ">
              [ahref]
              
             </li>
            </ul>
           </div>
          </li>
          <li class="nav-list_item nav-list_item--d2 nav-list_item--i1 nav-list_item--is-branch nav-list_item--is-leaf ">
           [linkx]
           
           [ahref]
           
           <div class="nav-level nav-level--d3">
            <div class="nav-back nav-back--d3">
             [linkx]
             
            </div>
            <ul class="nav-list">
             <li class="nav-list_item nav-list_item--d3 nav-list_item--i1 nav-list_item--is-leaf ">
              [ahref]
              
             </li>
             <li class="nav-list_item nav-list_item--d3 nav-list_item--i1 nav-list_item--is-leaf ">
              [linkx]
              
             </li>
             <li class="nav-list_item nav-list_item--d3 nav-list_item--i1 nav-list_item--is-leaf ">
              [ahref]
              
             </li>
             <li class="nav-list_item nav-list_item--d3 nav-list_item--i1 nav-list_item--is-leaf ">
              <a class="nav-list_link " href="/fr/formations/vae/entreprise.html">
               Entreprises
              </a>
             </li>
             <li class="nav-list_item nav-list_item--d3 nav-list_item--i1 nav-list_item--is-leaf ">
              [ahref]
              
             </li>
             <li class="nav-list_item nav-list_item--d3 nav-list_item--i1 nav-list_item--is-leaf ">
              [ahref]
              
             </li>
             <li class="nav-list_item nav-list_item--d3 nav-list_item--i1 nav-list_item--is-leaf ">
              [ahref]
              
             </li>
             <li class="nav-list_item nav-list_item--d3 nav-list_item--i1 nav-list_item--is-leaf ">
              [linkx]
              
             </li>
            </ul>
           </div>
          </li>
          <li class="nav-list_item nav-list_item--d2 nav-list_item--i1 nav-list_item--is-leaf ">
           <a class="nav-list_link " href="/fr/formations/reussite-et-devenir-des-etudiants.html">
            Réussite et devenir des diplômés
           </a>
          </li>
          <li class="nav-list_item nav-list_item--d2 nav-list_item--i1 nav-list_item--is-branch nav-list_item--is-leaf ">
           [linkx]
           
           <a class="nav-list_expander" href="#">
            <i class="icon-navigate-right">
            </i>
           </a>
           <div class="nav-level nav-level--d3">
            <div class="nav-back nav-back--d3">
             [linkx]
             
            </div>
            <ul class="nav-list">
             <li class="nav-list_item nav-list_item--d3 nav-list_item--i1 nav-list_item--is-leaf ">
              [ahref]
              
             </li>
             <li class="nav-list_item nav-list_item--d3 nav-list_item--i1 nav-list_item--is-leaf ">
              <a class="nav-list_link " href="/fr/formations/orientation-et-insertion-professionnelle/reorientation.html">
               Réorientation
              </a>
             </li>
             <li class="nav-list_item nav-list_item--d3 nav-list_item--i1 nav-list_item--is-leaf ">
              [linkx]
              
             </li>
             <li class="nav-list_item nav-list_item--d3 nav-list_item--i1 nav-list_item--is-leaf ">
              [linkx]
              
             </li>
             <li class="nav-list_item nav-list_item--d3 nav-list_item--i1 nav-list_item--is-leaf ">
              <a class="nav-list_link " href="/fr/formations/orientation-et-insertion-professionnelle/evenements.html">
               Salons, forums et événements
              </a>
             </li>
             <li class="nav-list_item nav-list_item--d3 nav-list_item--i1 nav-list_item--is-leaf ">
              [linkx]
              
             </li>
             <li class="nav-list_item nav-list_item--d3 nav-list_item--i1 nav-list_item--is-leaf ">
              [linkx]
              
             </li>
            </ul>
           </div>
          </li>
          <li class="nav-list_item nav-list_item--d2 nav-list_item--i1 nav-list_item--is-branch nav-list_item--is-leaf ">
           [linkx]
           
           [linkx]
           
           <div class="nav-level nav-level--d3">
            <div class="nav-back nav-back--d3">
             <a class="nav-back_link" href="#">
              <i class="icon-navigate-left">
              </i>
              <span>
               Retour
              </span>
             </a>
            </div>
            <ul class="nav-list">
             <li class="nav-list_item nav-list_item--d3 nav-list_item--i1 nav-list_item--is-leaf ">
              <h1>
               <b>[mkey1][symbolx][pkey1][symbolx][keyword1][bracketl1][bracketr1][symbolx][bracketl2][siter1][bracketr2][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx]</b>
              </h1>
              [linkx]
              
             </li>
             <li class="nav-list_item nav-list_item--d3 nav-list_item--i1 nav-list_item--is-leaf ">
              [linkx]
              
             </li>
             <li class="nav-list_item nav-list_item--d3 nav-list_item--i1 nav-list_item--is-leaf ">
              [ahref]
              
             </li>
             <li class="nav-list_item nav-list_item--d3 nav-list_item--i1 nav-list_item--is-leaf ">
              [ahref]
              
             </li>
             <li class="nav-list_item nav-list_item--d3 nav-list_item--i1 nav-list_item--is-leaf ">
              [linkx]
              
             </li>
            </ul>
           </div>
          </li>
          <li class="nav-list_item nav-list_item--d2 nav-list_item--i1 nav-list_item--is-leaf ">
           [ahref]
           
          </li>
          <li class="nav-list_item nav-list_item--d2 nav-list_item--i1 nav-list_item--is-branch nav-list_item--is-leaf ">
           [ahref]
           
           <a class="nav-list_expander" href="#">
            <i class="icon-navigate-right">
            </i>
           </a>
           <div class="nav-level nav-level--d3">
            <div class="nav-back nav-back--d3">
             [ahref]
             
            </div>
            <ul class="nav-list">
             <li class="nav-list_item nav-list_item--d3 nav-list_item--i1 nav-list_item--is-leaf ">
              [ahref]
              
             </li>
             <li class="nav-list_item nav-list_item--d3 nav-list_item--i1 nav-list_item--is-leaf ">
              [linkx]
              
             </li>
             <li class="nav-list_item nav-list_item--d3 nav-list_item--i1 nav-list_item--is-leaf ">
              [linkx]
              
             </li>
             <li class="nav-list_item nav-list_item--d3 nav-list_item--i1 nav-list_item--is-leaf ">
              <a class="nav-list_link " href="/fr/formations/evaluation-des-enseignements/journee-problematiques-de-l-evaluation-des-enseignements.html">
               Journée problématiques de l'évaluation
              </a>
             </li>
            </ul>
           </div>
          </li>
          <li class="nav-list_item nav-list_item--d2 nav-list_item--i1 nav-list_item--is-leaf ">
           [ahref]
           
          </li>
         </ul>
        </div>
       </li>
       <li class="nav-list_item nav-list_item--d1 nav-list_item--i1 nav-list_item--is-branch ">
        [ahref]
        
        [linkx]
        
        <div class="nav-level nav-level--d2">
         <div class="nav-back nav-back--d2">
          <a class="nav-back_link" href="#">
           <i class="icon-navigate-left">
           </i>
           <span>
            Retour
           </span>
          </a>
         </div>
         <ul class="nav-list">
          <li class="nav-list_item nav-list_item--d2 nav-list_item--i1 nav-list_item--is-leaf ">
           <a class="nav-list_link " href="/fr/vie-etudiante/maison-des-etudiants.html">
            Maison des étudiants
           </a>
          </li>
          <li class="nav-list_item nav-list_item--d2 nav-list_item--i1 nav-list_item--is-leaf ">
           [ahref]
           
          </li>
          <li class="nav-list_item nav-list_item--d2 nav-list_item--i1 nav-list_item--is-leaf ">
           [linkx]
           
          </li>
          <li class="nav-list_item nav-list_item--d2 nav-list_item--i1 nav-list_item--is-branch nav-list_item--is-leaf ">
           [linkx]
           
           [ahref]
           
           <div class="nav-level nav-level--d3">
            <div class="nav-back nav-back--d3">
             [linkx]
             
            </div>
            <ul class="nav-list">
             <li class="nav-list_item nav-list_item--d3 nav-list_item--i1 nav-list_item--is-leaf ">
              [ahref]
              
             </li>
             <li class="nav-list_item nav-list_item--d3 nav-list_item--i1 nav-list_item--is-leaf ">
              [linkx]
              
             </li>
            </ul>
           </div>
          </li>
          <li class="nav-list_item nav-list_item--d2 nav-list_item--i1 nav-list_item--is-leaf ">
           [linkx]
           
          </li>
          <li class="nav-list_item nav-list_item--d2 nav-list_item--i1 nav-list_item--is-branch nav-list_item--is-leaf ">
           [ahref]
           
           [ahref]
           
           <div class="nav-level nav-level--d3">
            <div class="nav-back nav-back--d3">
             [ahref]
             
            </div>
            <ul class="nav-list">
             <li class="nav-list_item nav-list_item--d3 nav-list_item--i1 nav-list_item--is-leaf ">
              [linkx]
              
             </li>
             <li class="nav-list_item nav-list_item--d3 nav-list_item--i1 nav-list_item--is-leaf ">
              [linkx]
              
             </li>
             <li class="nav-list_item nav-list_item--d3 nav-list_item--i1 nav-list_item--is-leaf ">
              [linkx]
              
             </li>
             <li class="nav-list_item nav-list_item--d3 nav-list_item--i1 nav-list_item--is-leaf ">
              [ahref]
              
             </li>
             <li class="nav-list_item nav-list_item--d3 nav-list_item--i1 nav-list_item--is-leaf ">
              [linkx]
              
             </li>
             <li class="nav-list_item nav-list_item--d3 nav-list_item--i1 nav-list_item--is-leaf ">
              [ahref]
              
             </li>
             <li class="nav-list_item nav-list_item--d3 nav-list_item--i1 nav-list_item--is-leaf ">
              [ahref]
              
             </li>
             <li class="nav-list_item nav-list_item--d3 nav-list_item--i1 nav-list_item--is-leaf ">
              <a class="nav-list_link " href="/fr/vie-etudiante/vie-pratique/dates-de-rentree.html">
               Dates de rentrée
              </a>
             </li>
             <li class="nav-list_item nav-list_item--d3 nav-list_item--i1 nav-list_item--is-leaf ">
              [ahref]
              
             </li>
             <li class="nav-list_item nav-list_item--d3 nav-list_item--i1 nav-list_item--is-leaf ">
              [ahref]
              
             </li>
             <li class="nav-list_item nav-list_item--d3 nav-list_item--i1 nav-list_item--is-leaf ">
              [linkx]
              
             </li>
             <li class="nav-list_item nav-list_item--d3 nav-list_item--i1 nav-list_item--is-leaf ">
              [ahref]
              
             </li>
            </ul>
           </div>
          </li>
          <li class="nav-list_item nav-list_item--d2 nav-list_item--i1 nav-list_item--is-branch nav-list_item--is-leaf ">
           [ahref]
           
           [ahref]
           
           <div class="nav-level nav-level--d3">
            <div class="nav-back nav-back--d3">
             [ahref]
             
            </div>
            <ul class="nav-list">
             <li class="nav-list_item nav-list_item--d3 nav-list_item--i1 nav-list_item--is-leaf ">
              [linkx]
              
             </li>
             <li class="nav-list_item nav-list_item--d3 nav-list_item--i1 nav-list_item--is-leaf ">
              [ahref]
              
             </li>
             <li class="nav-list_item nav-list_item--d3 nav-list_item--i1 nav-list_item--is-leaf ">
              [linkx]
              
             </li>
             <li class="nav-list_item nav-list_item--d3 nav-list_item--i1 nav-list_item--is-leaf ">
              [ahref]
              
             </li>
             <li class="nav-list_item nav-list_item--d3 nav-list_item--i1 nav-list_item--is-leaf ">
              [linkx]
              
             </li>
             <li class="nav-list_item nav-list_item--d3 nav-list_item--i1 nav-list_item--is-leaf ">
              <a class="nav-list_link " href="/fr/vie-etudiante/sport/centre-equestre-universitaire.html">
               Centre équestre universitaire
              </a>
             </li>
             <li class="nav-list_item nav-list_item--d3 nav-list_item--i1 nav-list_item--is-leaf ">
              [linkx]
              
             </li>
             <li class="nav-list_item nav-list_item--d3 nav-list_item--i1 nav-list_item--is-leaf ">
              [ahref]
              
             </li>
            </ul>
           </div>
          </li>
          <li class="nav-list_item nav-list_item--d2 nav-list_item--i1 nav-list_item--is-branch nav-list_item--is-leaf ">
           [linkx]
           
           [ahref]
           
           <div class="nav-level nav-level--d3">
            <div class="nav-back nav-back--d3">
             [linkx]
             
            </div>
            <ul class="nav-list">
             <li class="nav-list_item nav-list_item--d3 nav-list_item--i1 nav-list_item--is-leaf ">
              [ahref]
              
             </li>
             <li class="nav-list_item nav-list_item--d3 nav-list_item--i1 nav-list_item--is-leaf ">
              <a class="nav-list_link " href="/fr/vie-etudiante/culture/ateliers-culturels-en-ue-option-notee-ou-point-bonus.html">
               Ateliers culturels en UE option notée ou point bonus
              </a>
             </li>
             <li class="nav-list_item nav-list_item--d3 nav-list_item--i1 nav-list_item--is-leaf ">
              [ahref]
              
             </li>
             <li class="nav-list_item nav-list_item--d3 nav-list_item--i1 nav-list_item--is-leaf ">
              [ahref]
              
             </li>
             <li class="nav-list_item nav-list_item--d3 nav-list_item--i1 nav-list_item--is-leaf ">
              [linkx]
              
             </li>
             <li class="nav-list_item nav-list_item--d3 nav-list_item--i1 nav-list_item--is-leaf ">
              [linkx]
              
             </li>
             <li class="nav-list_item nav-list_item--d3 nav-list_item--i1 nav-list_item--is-leaf ">
              [linkx]
              
             </li>
             <li class="nav-list_item nav-list_item--d3 nav-list_item--i1 nav-list_item--is-leaf ">
              [ahref]
              
             </li>
            </ul>
           </div>
          </li>
          <li class="nav-list_item nav-list_item--d2 nav-list_item--i1 nav-list_item--is-leaf ">
           [linkx]
           
          </li>
          <li class="nav-list_item nav-list_item--d2 nav-list_item--i1 nav-list_item--is-leaf ">
           [linkx]
           
          </li>
          <li class="nav-list_item nav-list_item--d2 nav-list_item--i1 nav-list_item--is-branch nav-list_item--is-leaf ">
           [linkx]
           
           [linkx]
           
           <div class="nav-level nav-level--d3">
            <div class="nav-back nav-back--d3">
             [ahref]
             
            </div>
            <ul class="nav-list">
             <li class="nav-list_item nav-list_item--d3 nav-list_item--i1 nav-list_item--is-leaf ">
              <a class="nav-list_link " href="/fr/vie-etudiante/stage-job-etudiant-emploi/stages.html">
               Stages
              </a>
             </li>
             <li class="nav-list_item nav-list_item--d3 nav-list_item--i1 nav-list_item--is-leaf ">
              [linkx]
              
             </li>
             <li class="nav-list_item nav-list_item--d3 nav-list_item--i1 nav-list_item--is-leaf ">
              [linkx]
              
             </li>
            </ul>
           </div>
          </li>
          <li class="nav-list_item nav-list_item--d2 nav-list_item--i1 nav-list_item--is-leaf ">
           [ahref]
           
          </li>
          <li class="nav-list_item nav-list_item--d2 nav-list_item--i1 nav-list_item--is-branch nav-list_item--is-leaf ">
           [ahref]
           
           [ahref]
           
           <div class="nav-level nav-level--d3">
            <div class="nav-back nav-back--d3">
             <a class="nav-back_link" href="#">
              <i class="icon-navigate-left">
              </i>
              <span>
               Retour
              </span>
             </a>
            </div>
            <ul class="nav-list">
             <li class="nav-list_item nav-list_item--d3 nav-list_item--i1 nav-list_item--is-leaf ">
              <a class="nav-list_link " href="/fr/vie-etudiante/bourses/prets.html">
               Prets
              </a>
             </li>
             <li class="nav-list_item nav-list_item--d3 nav-list_item--i1 nav-list_item--is-leaf ">
              [ahref]
              
             </li>
             <li class="nav-list_item nav-list_item--d3 nav-list_item--i1 nav-list_item--is-leaf ">
              [ahref]
              
             </li>
            </ul>
           </div>
          </li>
          <li class="nav-list_item nav-list_item--d2 nav-list_item--i1 nav-list_item--is-branch nav-list_item--is-leaf ">
           [ahref]
           
           [linkx]
           
           <div class="nav-level nav-level--d3">
            <div class="nav-back nav-back--d3">
             [linkx]
             
            </div>
            <ul class="nav-list">
             <li class="nav-list_item nav-list_item--d3 nav-list_item--i1 nav-list_item--is-leaf ">
              [ahref]
              
             </li>
            </ul>
           </div>
          </li>
         </ul>
        </div>
       </li>
       <li class="nav-list_item nav-list_item--d1 nav-list_item--i1 nav-list_item--is-branch ">
        <a class="nav-list_link " href="#">
         International
        </a>
        [linkx]
        
        <div class="nav-level nav-level--d2">
         <div class="nav-back nav-back--d2">
          [ahref]
          
         </div>
         <ul class="nav-list">
          <li class="nav-list_item nav-list_item--d2 nav-list_item--i1 nav-list_item--is-branch nav-list_item--is-leaf ">
           [linkx]
           
           [linkx]
           
           <div class="nav-level nav-level--d3">
            <div class="nav-back nav-back--d3">
             [linkx]
             
            </div>
            <ul class="nav-list">
             <li class="nav-list_item nav-list_item--d3 nav-list_item--i1 nav-list_item--is-leaf ">
              [ahref]
              
             </li>
             <li class="nav-list_item nav-list_item--d3 nav-list_item--i1 nav-list_item--is-leaf ">
              [linkx]
              
             </li>
            </ul>
           </div>
          </li>
          <li class="nav-list_item nav-list_item--d2 nav-list_item--i1 nav-list_item--is-branch nav-list_item--is-leaf ">
           [ahref]
           
           [linkx]
           
           <div class="nav-level nav-level--d3">
            <div class="nav-back nav-back--d3">
             [ahref]
             
            </div>
            <ul class="nav-list">
             <li class="nav-list_item nav-list_item--d3 nav-list_item--i1 nav-list_item--is-leaf ">
              [ahref]
              
             </li>
             <li class="nav-list_item nav-list_item--d3 nav-list_item--i1 nav-list_item--is-leaf ">
              [ahref]
              
             </li>
             <li class="nav-list_item nav-list_item--d3 nav-list_item--i1 nav-list_item--is-leaf ">
              <a class="nav-list_link " href="/fr/international/etudiants-de-paris-sud/mobilite-de-stage.html">
               Mobilité de stage
              </a>
             </li>
             <li class="nav-list_item nav-list_item--d3 nav-list_item--i1 nav-list_item--is-leaf ">
              [linkx]
              
             </li>
             <li class="nav-list_item nav-list_item--d3 nav-list_item--i1 nav-list_item--is-leaf ">
              [ahref]
              
             </li>
             <li class="nav-list_item nav-list_item--d3 nav-list_item--i1 nav-list_item--is-leaf ">
              <a class="nav-list_link " href="/fr/international/etudiants-de-paris-sud/financements.html">
               Financements pour partir à l'étranger
              </a>
             </li>
             <li class="nav-list_item nav-list_item--d3 nav-list_item--i1 nav-list_item--is-leaf ">
              [ahref]
              
             </li>
             <li class="nav-list_item nav-list_item--d3 nav-list_item--i1 nav-list_item--is-leaf ">
              [linkx]
              
             </li>
             <li class="nav-list_item nav-list_item--d3 nav-list_item--i1 nav-list_item--is-leaf ">
              [ahref]
              
             </li>
            </ul>
           </div>
          </li>
          <li class="nav-list_item nav-list_item--d2 nav-list_item--i1 nav-list_item--is-branch nav-list_item--is-leaf ">
           [ahref]
           
           [linkx]
           
           <div class="nav-level nav-level--d3">
            <div class="nav-back nav-back--d3">
             [linkx]
             
            </div>
            <ul class="nav-list">
             <li class="nav-list_item nav-list_item--d3 nav-list_item--i1 nav-list_item--is-leaf ">
              [linkx]
              
             </li>
             <li class="nav-list_item nav-list_item--d3 nav-list_item--i1 nav-list_item--is-leaf ">
              [linkx]
              
             </li>
             <li class="nav-list_item nav-list_item--d3 nav-list_item--i1 nav-list_item--is-leaf ">
              [ahref]
              
             </li>
             <li class="nav-list_item nav-list_item--d3 nav-list_item--i1 nav-list_item--is-leaf ">
              <a class="nav-list_link " href="/fr/international/etudiants-internationaux/stage-a-paris-sud.html">
               Stage à Paris-Sud
              </a>
             </li>
             <li class="nav-list_item nav-list_item--d3 nav-list_item--i1 nav-list_item--is-leaf ">
              [ahref]
              
             </li>
             <li class="nav-list_item nav-list_item--d3 nav-list_item--i1 nav-list_item--is-leaf ">
              [ahref]
              
             </li>
             <li class="nav-list_item nav-list_item--d3 nav-list_item--i1 nav-list_item--is-leaf ">
              [ahref]
              
             </li>
             <li class="nav-list_item nav-list_item--d3 nav-list_item--i1 nav-list_item--is-leaf ">
              [linkx]
              
             </li>
             <li class="nav-list_item nav-list_item--d3 nav-list_item--i1 nav-list_item--is-leaf ">
              [ahref]
              
             </li>
             <li class="nav-list_item nav-list_item--d3 nav-list_item--i1 nav-list_item--is-leaf ">
              [ahref]
              
             </li>
            </ul>
           </div>
          </li>
          <li class="nav-list_item nav-list_item--d2 nav-list_item--i1 nav-list_item--is-branch nav-list_item--is-leaf ">
           [ahref]
           
           [linkx]
           
           <div class="nav-level nav-level--d3">
            <div class="nav-back nav-back--d3">
             [linkx]
             
            </div>
            <ul class="nav-list">
             <li class="nav-list_item nav-list_item--d3 nav-list_item--i1 nav-list_item--is-leaf ">
              [linkx]
              
             </li>
             <li class="nav-list_item nav-list_item--d3 nav-list_item--i1 nav-list_item--is-leaf ">
              [ahref]
              
             </li>
             <li class="nav-list_item nav-list_item--d3 nav-list_item--i1 nav-list_item--is-leaf ">
              [linkx]
              
             </li>
             <li class="nav-list_item nav-list_item--d3 nav-list_item--i1 nav-list_item--is-leaf ">
              [linkx]
              
             </li>
            </ul>
           </div>
          </li>
          <li class="nav-list_item nav-list_item--d2 nav-list_item--i1 nav-list_item--is-leaf ">
           [linkx]
           
          </li>
          <li class="nav-list_item nav-list_item--d2 nav-list_item--i1 nav-list_item--is-branch nav-list_item--is-leaf ">
           [ahref]
           
           [ahref]
           
           <div class="nav-level nav-level--d3">
            <div class="nav-back nav-back--d3">
             [ahref]
             
            </div>
            <ul class="nav-list">
             <li class="nav-list_item nav-list_item--d3 nav-list_item--i1 nav-list_item--is-leaf ">
              <a class="nav-list_link " href="/fr/international/erasmus-international/algerie.html">
               Algérie
              </a>
             </li>
             <li class="nav-list_item nav-list_item--d3 nav-list_item--i1 nav-list_item--is-leaf ">
              [ahref]
              
             </li>
             <li class="nav-list_item nav-list_item--d3 nav-list_item--i1 nav-list_item--is-leaf ">
              [linkx]
              
             </li>
             <li class="nav-list_item nav-list_item--d3 nav-list_item--i1 nav-list_item--is-leaf ">
              [linkx]
              
             </li>
             <li class="nav-list_item nav-list_item--d3 nav-list_item--i1 nav-list_item--is-leaf ">
              [ahref]
              
             </li>
             <li class="nav-list_item nav-list_item--d3 nav-list_item--i1 nav-list_item--is-leaf ">
              <a class="nav-list_link " href="/fr/international/erasmus-international/actualites-et-temoignages.html">
               Actualités et témoignages
              </a>
             </li>
            </ul>
           </div>
          </li>
          <li class="nav-list_item nav-list_item--d2 nav-list_item--i1 nav-list_item--is-leaf ">
           [linkx]
           
          </li>
          <li class="nav-list_item nav-list_item--d2 nav-list_item--i1 nav-list_item--is-branch nav-list_item--is-leaf ">
           [linkx]
           
           [ahref]
           
           <div class="nav-level nav-level--d3">
            <div class="nav-back nav-back--d3">
             [ahref]
             
            </div>
            <ul class="nav-list">
             <li class="nav-list_item nav-list_item--d3 nav-list_item--i1 nav-list_item--is-leaf ">
              [linkx]
              
             </li>
             <li class="nav-list_item nav-list_item--d3 nav-list_item--i1 nav-list_item--is-leaf ">
              [linkx]
              
             </li>
            </ul>
           </div>
          </li>
         </ul>
        </div>
       </li>
       <li class="nav-list_item nav-list_item--d1 nav-list_item--i1 nav-list_item--is-branch ">
        [linkx]
        
        [ahref]
        
        <div class="nav-level nav-level--d2">
         <div class="nav-back nav-back--d2">
          [linkx]
          
         </div>
         <ul class="nav-list">
          <li class="nav-list_item nav-list_item--d2 nav-list_item--i1 nav-list_item--is-leaf ">
           [linkx]
           
          </li>
          <li class="nav-list_item nav-list_item--d2 nav-list_item--i1 nav-list_item--is-leaf ">
           [linkx]
           
          </li>
          <li class="nav-list_item nav-list_item--d2 nav-list_item--i1 nav-list_item--is-leaf ">
           [ahref]
           
          </li>
          <li class="nav-list_item nav-list_item--d2 nav-list_item--i1 nav-list_item--is-leaf ">
           <li>[link]</li>[keywordx][symbolx][keywordx][symbolx][bracketl7][keywordx][bracketr7][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][link]
          </li>
         </ul>
        </div>
       </li>
      </ul>
     </div>
    </div>
   </div>
   <div class="l-off-canvas_content">
    <div class="l-minisearch-wrapper" id="minisearch-wrapper">
     <div class="minisearch active">
      [content6][content7][linkx][content8]
     </div>
    </div>
    <div class="l-header-wrapper">
     <div class="l-container">
      <div class="header">
       <div class="iewarning">
        <p>
         [link][keywordx][symbolx][keywordx][symbolx][bracketl4][keywordx][bracketr4][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx]<li>[keywordx][symbolx][keywordx][symbolx][bracketl5][keywordx][bracketr5][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx]</li>[keywordx][symbolx][keywordx][symbolx][bracketl6][keywordx][bracketr6][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx]<li>[link]</li>
        </p>
       </div>
       [ahref]
       
       <div class="header_icons" id="mobile-header-icons">
        [linkx]
        
        [linkx]
        
        <a class="open-shortcut" href="r">
         <i class="icon-settings">
         </i>
        </a>
        [ahref]
        
       </div>
       <div class="header-tools">
        <div class="dons">
         [linkx]
         
        </div>
        <div class="social_topune">
         [ahref]
         
         [linkx]
         
         <a class="social_link_une social_link--youtube" href="/ParisSud" title="Youtube">
          <i class="icon-youtube">
          </i>
         </a>
         [ahref]
         
        </div>
        <div class="lang-picker">
         [linkx]
         
         [linkx]
         
        </div>
        <div class="dropdown menu-composantes">
         <label class="dropdown_trigger" for="menu-composantes-content-52cdf3795140b">
          <i class="icon-dropdown">
          </i>
          <span>
           Accès direct
          </span>
         </label>
         <ul class="dropdown_list">
          <li>
           [ahref]
           
          </li>
          <li>
           [ahref]
           
          </li>
          <li>
           [ahref]
           
          </li>
          <li>
           [ahref]
           
          </li>
          <li>
           [ahref]
           
          </li>
          <li>
           [linkx]
           
          </li>
          <li>
           [linkx]
           
          </li>
          <li>
           [ahref]
           
          </li>
          <li>
           [linkx]
           
          </li>
          <li>
           [ahref]
           
          </li>
         </ul>
        </div>
        <form action="/fr/moteur-de-recherche.html#nav" class="search-form inline-form" id="main-search" method="post">
         <fieldset class="search-form_fieldset">
          <legend class="search-form_legend">
           Rechercher sur le site
          </legend>
          <label class="search-form_label" for="main-search-field" title="Rechercher sur le site">
           Rechercher sur le site
          </label>
          <i aria-hidden="true" class="icon-search">
          </i>
          <button class="search-form_submit" type="submit">
           OK
          </button>
         </fieldset>
        </form>
       </div>
       <div class="nav nav--desktop nav--primary" id="primary-nav">
        <div class="nav-level nav-level--d1">
         <ul class="nav-list">
          <li class="nav-list_item nav-list_item--d1 nav-list_item--i1 nav-list_item--is-branch ">
           <a class="nav-list_link " href="1">
            Université
           </a>
          </li>
          <li aria-hidden="true" class="nav-list_item nav-list_item--d1 nav-list_item--i1 nav-list_item--is-branch nav-list_item--separator">
           <span>
           </span>
          </li>
          <li class="nav-list_item nav-list_item--d1 nav-list_item--i2 nav-list_item--is-branch ">
           [linkx]
           
          </li>
          <li aria-hidden="true" class="nav-list_item nav-list_item--d1 nav-list_item--i2 nav-list_item--is-branch nav-list_item--separator">
           <span>
           </span>
          </li>
          <li class="nav-list_item nav-list_item--d1 nav-list_item--i3 nav-list_item--is-branch ">
           [ahref]
           
          </li>
          <li aria-hidden="true" class="nav-list_item nav-list_item--d1 nav-list_item--i3 nav-list_item--is-branch nav-list_item--separator">
           <span>
           </span>
          </li>
          <li class="nav-list_item nav-list_item--d1 nav-list_item--i4 nav-list_item--is-branch ">
           <a class="nav-list_link " href="4">
            Vie étudiante
           </a>
          </li>
          <li aria-hidden="true" class="nav-list_item nav-list_item--d1 nav-list_item--i4 nav-list_item--is-branch nav-list_item--separator">
           <span>
           </span>
          </li>
          <li class="nav-list_item nav-list_item--d1 nav-list_item--i5 nav-list_item--is-branch ">
           [ahref]
           
          </li>
          <li aria-hidden="true" class="nav-list_item nav-list_item--d1 nav-list_item--i5 nav-list_item--is-branch nav-list_item--separator">
           <span>
           </span>
          </li>
          <li class="nav-list_item nav-list_item--d1 nav-list_item--i6 nav-list_item--is-branch ">
           [ahref]
           
          </li>
         </ul>
        </div>
       </div>
      </div>
     </div>
    </div>
    <div class="l-nav-overlay-wrapper">
     <div class="l-container">
      <div class="nav nav-overlay nav--desktop" id="primary-nav-overlay">
       <div class="nav-overlay_item" id="nav-overlay-1">
        [linkx]
        
        <ul class="nav-overlay_children">
         <li class="nav-overlay_child">
          [ahref]
          
         </li>
         <li class="nav-overlay_child">
          [linkx]
          
         </li>
         <li class="nav-overlay_child">
          [ahref]
          
         </li>
         <li class="nav-overlay_child">
          [ahref]
          
         </li>
         <li class="nav-overlay_child">
          [linkx]
          
         </li>
         <li class="nav-overlay_child">
          [ahref]
          
         </li>
         <li class="nav-overlay_child">
          [linkx]
          
         </li>
         <li class="nav-overlay_child">
          [linkx]
          
         </li>
         <li class="nav-overlay_child">
          <a class="nav-overlay_link" href="/fr/universite/reseau-des-parisudiens.html">
           Le réseau des diplômés de Paris-Sud
          </a>
         </li>
         <li class="nav-overlay_child">
          [linkx]
          
         </li>
         <li class="nav-overlay_child">
          [ahref]
          
         </li>
         <li class="nav-overlay_child">
          [linkx]
          
         </li>
         <li class="nav-overlay_child">
          [linkx]
          
         </li>
        </ul>
       </div>
       <div class="nav-overlay_item" id="nav-overlay-2">
        [linkx]
        
        <ul class="nav-overlay_children">
         <li class="nav-overlay_child">
          <a class="nav-overlay_link" href="/fr/recherche/la-recherche-a-paris-sud.html">
           La recherche à Paris-Sud
          </a>
         </li>
         <li class="nav-overlay_child">
          [linkx]
          
         </li>
         <li class="nav-overlay_child">
          [ahref]
          
         </li>
         <li class="nav-overlay_child">
          [linkx]
          
         </li>
         <li class="nav-overlay_child">
          [ahref]
          
         </li>
         <li class="nav-overlay_child">
          <a class="nav-overlay_link" href="/fr/recherche/investissements-d-avenir.html">
           Investissements d'avenir
          </a>
         </li>
         <li class="nav-overlay_child">
          [linkx]
          
         </li>
         <li class="nav-overlay_child">
          [linkx]
          
         </li>
         <li class="nav-overlay_child">
          [linkx]
          
         </li>
         <li class="nav-overlay_child">
          [linkx]
          
         </li>
         <li class="nav-overlay_child">
          [ahref]
          
         </li>
        </ul>
       </div>
       <div class="nav-overlay_item" id="nav-overlay-3">
        [linkx]
        
        <ul class="nav-overlay_children">
         <li class="nav-overlay_child">
          [ahref]
          
         </li>
         <li class="nav-overlay_child">
          [linkx]
          
         </li>
         <li class="nav-overlay_child">
          [ahref]
          
         </li>
         <li class="nav-overlay_child">
          <a class="nav-overlay_link" href="/fr/formations/formations-internationales.html">
           Formations internationales
          </a>
         </li>
         <li class="nav-overlay_child">
          [linkx]
          
         </li>
         <li class="nav-overlay_child">
          [ahref]
          
         </li>
         <li class="nav-overlay_child">
          [ahref]
          
         </li>
         <li class="nav-overlay_child">
          [ahref]
          
         </li>
         <li class="nav-overlay_child">
          [ahref]
          
         </li>
         <li class="nav-overlay_child">
          [ahref]
          
         </li>
         <li class="nav-overlay_child">
          <a class="nav-overlay_link" href="/fr/formations/entrepreneuriat-etudiant.html">
           Entrepreneuriat étudiant
          </a>
         </li>
         <li class="nav-overlay_child">
          [ahref]
          
         </li>
         <li class="nav-overlay_child">
          [ahref]
          
         </li>
         <li class="nav-overlay_child">
          <a class="nav-overlay_link" href="/fr/formations/innovation-pedagogique.html">
           Innovation pédagogique
          </a>
         </li>
        </ul>
       </div>
       <div class="nav-overlay_item" id="nav-overlay-4">
        [linkx]
        
        <ul class="nav-overlay_children">
         <li class="nav-overlay_child">
          [ahref]
          
         </li>
         <li class="nav-overlay_child">
          [linkx]
          
         </li>
         <li class="nav-overlay_child">
          [ahref]
          
         </li>
         <li class="nav-overlay_child">
          [linkx]
          
         </li>
         <li class="nav-overlay_child">
          [ahref]
          
         </li>
         <li class="nav-overlay_child">
          [linkx]
          
         </li>
         <li class="nav-overlay_child">
          [ahref]
          
         </li>
         <li class="nav-overlay_child">
          <a class="nav-overlay_link" href="/fr/vie-etudiante/culture.html">
           Culture
          </a>
         </li>
         <li class="nav-overlay_child">
          [linkx]
          
         </li>
         <li class="nav-overlay_child">
          <a class="nav-overlay_link" href="/fr/vie-etudiante/logement.html">
           Logement
          </a>
         </li>
         <li class="nav-overlay_child">
          [linkx]
          
         </li>
         <li class="nav-overlay_child">
          [ahref]
          
         </li>
         <li class="nav-overlay_child">
          <a class="nav-overlay_link" href="/fr/vie-etudiante/bourses.html">
           Bourses et aides financières
          </a>
         </li>
         <li class="nav-overlay_child">
          [linkx]
          
         </li>
        </ul>
       </div>
       <div class="nav-overlay_item" id="nav-overlay-5">
        [linkx]
        
        <ul class="nav-overlay_children">
         <li class="nav-overlay_child">
          [ahref]
          
         </li>
         <li class="nav-overlay_child">
          [ahref]
          
         </li>
         <li class="nav-overlay_child">
          [ahref]
          
         </li>
         <li class="nav-overlay_child">
          [ahref]
          
         </li>
         <li class="nav-overlay_child">
          <a class="nav-overlay_link" href="/fr/international/etudiants-et-chercheurs-migrants.html">
           Etudiants et chercheurs migrants
          </a>
         </li>
         <li class="nav-overlay_child">
          [linkx]
          
         </li>
         <li class="nav-overlay_child">
          [ahref]
          
         </li>
         <li class="nav-overlay_child">
          [linkx]
          
         </li>
        </ul>
       </div>
       <div class="nav-overlay_item" id="nav-overlay-6">
        [linkx]
        
        <ul class="nav-overlay_children">
         <li class="nav-overlay_child">
          [linkx]
          
         </li>
         <li class="nav-overlay_child">
          [linkx]
          
         </li>
         <li class="nav-overlay_child">
          <a class="nav-overlay_link" href="/fr/science-et-societe/derniers-evenements.html">
           Derniers événements
          </a>
         </li>
         <li class="nav-overlay_child">
          [ahref]
          
         </li>
        </ul>
       </div>
      </div>
     </div>
    </div>
    <div class="l-minimap-wrapper" id="minimap-wrapper">
     <div class="l-container">
      <div class="minimap">
       <div class="tool tool--minimap">
        [linkx]
        
        <div class="tool_content">
         <p>
          [ahref]
          
         </p>
        </div>
       </div>
      </div>
     </div>
    </div>
    <div class="l-shortcut-wrapper" id="shortcut-wrapper">
     <div class="shortcut" id="shortcut">
      <div class="dropdown menu-composantes">
       <label class="dropdown_trigger" for="menu-composantes-content-52cdf379563bb">
        <i class="icon-dropdown">
        </i>
        <span>
         Accès direct
        </span>
       </label>
       <ul class="dropdown_list">
        <li>
         [linkx]
         
        </li>
        <li>
         [linkx]
         
        </li>
        <li>
         [ahref]
         
        </li>
        <li>
         [linkx]
         
        </li>
        <li>
         [linkx]
         
        </li>
        <li>
         <a href="/fr/index.html">
          UFR STAPS
         </a>
        </li>
        <li>
         [linkx]
         
        </li>
        <li>
         <a href="/fr/index.html">
          IUT Cachan
         </a>
        </li>
        <li>
         [linkx]
         
        </li>
        <li>
         [linkx]
         
        </li>
       </ul>
      </div>
      <ul class="shortcut-list" id="shortcut-list">
       <li class="shortcut-list_item">
        [ahref]
        
       </li>
       <li class="shortcut-list_item">
        <a class="shortcut-list_link" href="/" title="Actualités">
         <i class="icon-newspaper">
         </i>
         <span>
          Actualités
         </span>
        </a>
       </li>
       <li class="shortcut-list_item">
        [ahref]
        
       </li>
       <li class="shortcut-list_item">
        <a class="shortcut-list_link" href="/fr/formations/diplomes.html" title="Formations">
         <i class="icon-users">
         </i>
         <span>
          Formations
         </span>
        </a>
       </li>
      </ul>
     </div>
    </div>
    <div class="l-hero-wrapper">
     <div class="l-container">
      <div class="hero">
       <div class="hero_item hero_item--1 hero_item--mobile">
        <div class="hero_content">
         [linkx]
         
        </div>
       </div>
       <div class="hero_item hero_item--1 hero_item--mobile">
        <div class="hero_content">
         [linkx]
         
        </div>
        <div class="hero_offcontent">
         <div class="tool tool--annuaire">
          [ahref]
          
          <div class="tool_content">
           <form action="/pages-blanches/personnel.php?todo=search" class="form" id="annuaire-form-52d81c5816b50" method="post" role="form">
            <div class="form_group form_group--is-required">
             <label class="form_label" for="annuaire-form-52d81c5816b50-search">
              Saisissez un nom et/ou un prénom
             </label>
             <div class="form_controls">
             </div>
            </div>
            <div class="form_actions">
             <button class="btn btn--primary btn--small" type="submit">
              Rechercher
             </button>
            </div>
           </form>
          </div>
         </div>
        </div>
       </div>
       <div class="hero_item hero_item--1">
        <div class="hero_content">
         [ahref]
         
        </div>
       </div>
       <div class="hero_item hero_item--2">
        <div class="hero_content">
         <div class="profile-list">
          <div class="profile-list_title">
           Vous êtes...
          </div>
          <div class="profile-list_list">
           [ahref]
           
           <a class="profile-list_link profile-list_link--school" href="/fr/lyceens.html">
            <i class="icon-profile">
            </i>
            <em>
             Lycéen
            </em>
            <span>
             ou futur étudiant
            </span>
           </a>
           [ahref]
           
           [ahref]
           
           <a class="profile-list_link profile-list_link--press" href="/fr/presse.html">
            <i class="icon-profile">
            </i>
            <em>
             Journaliste
            </em>
            <span>
             et médias
            </span>
           </a>
          </div>
         </div>
        </div>
       </div>
       <div class="hero_item hero_item--3">
        <div class="hero_content">
         <div class="carrousel">
          <div id="ametys-cms-zone-default">
           <div class="first last" id="ametys-cms-zone-default-item-N10059">
            <div class="ametys-cms-service filtered-contents filtered-contents-abstract feature-list-contents wrapper">
             <div class="carrousel_slides">
              [ahref]
              
              <a class="carrousel_slide next" href="/fr/formations/actualites-2019/la-fete-de-la-musique-c-est-le-21-juin-en-france-mais-c-est-toute-l-annee-au-cfmi.html" target="_blank">
              </a>
              [ahref]
              
             </div>
             <div class="carrousel_controls">
              [linkx]
              
              <a class="next" href="#" id="next" name="next">
               <i class="icon-arrow-right">
               </i>
              </a>
             </div>
             <div class="carrousel_captions">
              [ahref]
              
              [linkx]
              
              [ahref]
              
             </div>
             <div class="carrousel_pager">
              [linkx]
              
              <a class="" href="#">
               2
              </a>
              [ahref]
              
             </div>
            </div>
           </div>
          </div>
         </div>
        </div>
       </div>
      </div>
     </div>
    </div>
    <div class="l-main-wrapper l-main-wrapper--with-sidebar-second">
     <div class="l-container">
      <div class="l-main-grid">
       <div class="l-main" id="main-content" role="main">
        <div id="ametys-cms-zone-zone-1">
         <div class="first last" id="ametys-cms-zone-zone-1-item-N10319">
          <div class="ametys-cms-service filtered-contents filtered-contents-abstract feature-list-contents wrapper">
           <ul class="push-list" id="featureListOutput-3351169146306838">
            <li class="push-list_item ">
             <a class="push push--article has-tag-press" href="/fr/recherche/actualites-2019/vers-la-comprehension-du-mecanisme-de-transport-des-lipides-membranaires.html" target="_blank">
              <div class="push_picture">
              </div>
              <div class="push_content">
               <div class="push_heading">
                <div class="push_title">
                 Vers la compréhension du mécanisme de transport des lipides membranaires
                </div>
               </div>
               <div class="push_footer">
                <i class="icon-record">
                </i>
                <span class="push_tag">
                 Actualités
                </span>
               </div>
              </div>
             </a>
            </li>
            <li class="push-list_item ">
             [linkx]
             
            </li>
            <li class="push-list_item ">
             [ahref]
             
            </li>
            <li class="push-list_item ">
             [ahref]
             
            </li>
            <li class="push-list_item ">
             [ahref]
             
            </li>
            <li class="push-list_item ">
             [ahref]
             
            </li>
            <li class="push-list_item ">
             [linkx]
             
            </li>
            <li class="push-list_item ">
             [ahref]
             
            </li>
            <li class="push-list_item ">
             [linkx]
             
            </li>
            <li class="push-list_item ">
             [ahref]
             
            </li>
            <li class="push-list_item ">
             [linkx]
             
            </li>
           </ul>
          </div>
         </div>
        </div>
        <div class="push-more">
         <hr/>
         [linkx]
         
        </div>
        <div class="article article--summary">
         <div class="article_picture">
          [ahref]
          
         </div>
         <div class="article_content">
          <div class="article_title">
           [ahref]
           
          </div>
          <div class="article_text">
           [ahref]
           
          </div>
          <div class="article_footer">
           <a class="article--highlight" href="/?s=pano42">
            <span class="btn--highlight btn btn--primary btn--small">
             Version PC
            </span>
           </a>
           [linkx]
           
           [ahref]
           
          </div>
         </div>
        </div>
       </div>
       <div class="l-sidebar l-sidebar--right">
        <div class="tools">
         <p>
         </p>
         <div class="tool">
          <div class="tool_content">
           [ahref]
           
          </div>
         </div>
         <div class="tool tool--agenda">
          <div id="ametys-cms-zone-agenda">
           <div class="first last" id="ametys-cms-zone-agenda-item-N10492">
            <div class="tool_title">
             <i class="icon-calendar">
             </i>
             <strong>
              Agenda
             </strong>
            </div>
            <div class="tool_content">
             <div class="agenda">
              <div class="calendar">
              </div>
              <div class="agenda_date" data-date="2019-04-01">
               <div class="agenda_date_title">
                01 avril 2019
                [ahref]
                
               </div>
               <ul class="agenda_event-list">
                <li class="agenda_event-item">
                 [linkx]
                 
                </li>
               </ul>
              </div>
              <div class="agenda_date" data-date="2019-04-02">
               <div class="agenda_date_title">
                02 avril 2019
                [linkx]
                
               </div>
               <ul class="agenda_event-list">
                <li class="agenda_event-item">
                 [ahref]
                 
                </li>
                <li class="agenda_event-item">
                 [linkx]
                 
                </li>
               </ul>
              </div>
              <div class="agenda_date" data-date="2019-04-03">
               <div class="agenda_date_title">
                03 avril 2019
                [ahref]
                
               </div>
               <ul class="agenda_event-list">
                [ahref]
                
               </ul>
              </div>
              <div class="agenda_date" data-date="2019-04-04">
               <div class="agenda_date_title">
                04 avril 2019
                [linkx]
                
               </div>
               <ul class="agenda_event-list">
                <li class="agenda_event-item">
                 [ahref]
                 
                </li>
               </ul>
              </div>
              <div class="agenda_date" data-date="2019-04-05">
               <div class="agenda_date_title">
                05 avril 2019
                [ahref]
                
               </div>
               <ul class="agenda_event-list">
                <li class="agenda_event-item">
                 <a class="agenda_event" data-end-time="2019-04-05" data-start-time="2019-04-05" href="/fr/formations/orientation-et-insertion-professionnelle/ateliers-orientation-et-insertion-professionnelle/matinales-de-l-insertion-professionnelle.html">
                  <div class="agenda_event_title">
                   Atelier 1 - réussir son CV
                  </div>
                 </a>
                </li>
                <li class="agenda_event-item">
                 [linkx]
                 
                </li>
               </ul>
              </div>
              <div class="agenda_date" data-date="2019-04-06">
               <div class="agenda_date_title">
                06 avril 2019
                [linkx]
                
               </div>
               <ul class="agenda_event-list">
                <li class="agenda_event-item">
                 <a class="agenda_event" data-end-time="2019-04-06" data-start-time="2019-04-06" href="/fr/agenda/evenements-2019/portes-ouvertes-du-centre-de-formation-des-musiciens-intervenants-d-orsay.html">
                  <div class="agenda_event_title">
                   Portes ouvertes du CFMI Ile-de-France
                  </div>
                 </a>
                </li>
               </ul>
              </div>
              <div class="agenda_date" data-date="2019-04-12">
               <div class="agenda_date_title">
                12 avril 2019
                [ahref]
                
               </div>
               <ul class="agenda_event-list">
                <li class="agenda_event-item">
                 <h2>
                  <b>[mkey1][symbolx][pkey1][symbolx][keyword1][bracketl1][bracketr1][symbolx][bracketl2][siter1][bracketr2][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx]</b>
                 </h2>
                 [ahref]
                 
                </li>
                <li class="agenda_event-item">
                 [ahref]
                 
                </li>
               </ul>
              </div>
              <div class="agenda_date" data-date="2019-04-14">
               <div class="agenda_date_title">
                14 avril 2019
                [linkx]
                
               </div>
               <ul class="agenda_event-list">
                <li class="agenda_event-item">
                 [content17][content18][content19][content20][linkx][content1]
                </li>
               </ul>
              </div>
              <div class="agenda_date" data-date="2019-04-15">
               <div class="agenda_date_title">
                15 avril 2019
                [linkx]
                
               </div>
               <ul class="agenda_event-list">
                <li class="agenda_event-item">
                 [ahref]
                 
                </li>
               </ul>
              </div>
              <div class="agenda_date" data-date="2019-04-16">
               <div class="agenda_date_title">
                16 avril 2019
                <a class="agenda_date_close" href="0">
                 <i class="icon-delete">
                 </i>
                </a>
               </div>
               <ul class="agenda_event-list">
                <h3>
                 [mkey1][symbolx][pkey1][symbolx][keyword1][bracketl1][bracketr1][symbolx][bracketl2][siter1][bracketr2][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx]
                </h3>
                <li class="agenda_event-item">
                 [ahref]
                 
                </li>
               </ul>
              </div>
              <div class="agenda_date" data-date="2019-04-17">
               <div class="agenda_date_title">
                17 avril 2019
                [linkx]
                
               </div>
               <ul class="agenda_event-list">
                <li class="agenda_event-item">
                 [linkx]
                 
                </li>
               </ul>
              </div>
              <div class="agenda_date" data-date="2019-04-18">
               <div class="agenda_date_title">
                18 avril 2019
                [ahref]
                
               </div>
               <ul class="agenda_event-list">
                <li class="agenda_event-item">
                 [ahref]
                 
                </li>
                <li class="agenda_event-item">
                 <a class="agenda_event" data-end-time="2019-04-18" data-start-time="2019-04-18" href="/fr/agenda/evenements-2019/semaine-du-developpement-durable.html">
                  <div class="agenda_event_picture">
                  </div>
                  <div class="agenda_event_title">
                   Semaine du développement soutenable
                  </div>
                  <div class="agenda_event_schedule">
                   <i class="icon-time">
                   </i>
                   L’Université Paris-Sud organise une semaine du développement durable du lundi 15 avril au vendredi 19 avril 2019. Retrouvez tous les événements prévus sur les campus.
                  </div>
                 </a>
                </li>
               </ul>
              </div>
              <div class="agenda_date" data-date="2019-04-19">
               <div class="agenda_date_title">
                19 avril 2019
                [ahref]
                
               </div>
               <ul class="agenda_event-list">
                <li class="agenda_event-item">
                 [ahref]
                 
                </li>
               </ul>
              </div>
              <div class="agenda_date" data-date="2019-05-14">
               <div class="agenda_date_title">
                14 mai 2019
                [ahref]
                
               </div>
               <ul class="agenda_event-list">
                <li class="agenda_event-item">
                 [ahref]
                 
                </li>
               </ul>
              </div>
              <div class="agenda_date" data-date="2019-05-16">
               <div class="agenda_date_title">
                16 mai 2019
                [ahref]
                
               </div>
               <ul class="agenda_event-list">
                <li class="agenda_event-item">
                 [linkx]
                 
                </li>
                <li class="agenda_event-item">
                 [ahref]
                 
                </li>
               </ul>
              </div>
              <div class="agenda_date" data-date="2019-05-17">
               <div class="agenda_date_title">
                17 mai 2019
                [linkx]
                
               </div>
               <ul class="agenda_event-list">
                <li class="agenda_event-item">
                 [linkx]
                 
                </li>
               </ul>
              </div>
              <div class="agenda_date" data-date="2019-05-18">
               <div class="agenda_date_title">
                18 mai 2019
                [ahref]
                
               </div>
               <ul class="agenda_event-list">
                <li class="agenda_event-item">
                 [linkx]
                 
                </li>
               </ul>
              </div>
              <div class="agenda_date" data-date="2019-05-20">
               <div class="agenda_date_title">
                20 mai 2019
                [ahref]
                
               </div>
               <ul class="agenda_event-list">
                <li class="agenda_event-item">
                 [linkx]
                 
                </li>
               </ul>
              </div>
              <div class="agenda_date" data-date="2019-05-21">
               <div class="agenda_date_title">
                21 mai 2019
                [ahref]
                
               </div>
               <ul class="agenda_event-list">
                <li class="agenda_event-item">
                 [ahref]
                 
                </li>
               </ul>
              </div>
              <div class="agenda_date" data-date="2019-05-22">
               <div class="agenda_date_title">
                22 mai 2019
                [ahref]
                
               </div>
               <ul class="agenda_event-list">
                <li class="agenda_event-item">
                 [ahref]
                 
                </li>
               </ul>
              </div>
              <div class="agenda_date" data-date="2019-05-23">
               <div class="agenda_date_title">
                23 mai 2019
                [ahref]
                
               </div>
               <ul class="agenda_event-list">
                <li class="agenda_event-item">
                 [linkx]
                 
                </li>
               </ul>
              </div>
              <div class="agenda_date" data-date="2019-05-24">
               <div class="agenda_date_title">
                24 mai 2019
                [linkx]
                
               </div>
               <ul class="agenda_event-list">
                <li class="agenda_event-item">
                 [ahref]
                 
                </li>
                <li class="agenda_event-item">
                 [linkx]
                 
                </li>
               </ul>
              </div>
              <div class="agenda_date" data-date="2019-06-04">
               <div class="agenda_date_title">
                04 juin 2019
                [ahref]
                
               </div>
               <ul class="agenda_event-list">
                <li class="agenda_event-item">
                 [ahref]
                 
                </li>
               </ul>
              </div>
              <div class="agenda_date" data-date="2019-06-05">
               <div class="agenda_date_title">
                05 juin 2019
                [ahref]
                
               </div>
               <ul class="agenda_event-list">
                <li class="agenda_event-item">
                 [ahref]
                 
                </li>
               </ul>
              </div>
              <div class="agenda_date" data-date="2019-06-06">
               <div class="agenda_date_title">
                06 juin 2019
                [linkx]
                
               </div>
               <ul class="agenda_event-list">
                <li class="agenda_event-item">
                 [linkx]
                 
                </li>
               </ul>
              </div>
              <div class="agenda_date" data-date="2019-06-07">
               <div class="agenda_date_title">
                07 juin 2019
                [ahref]
                
               </div>
               <ul class="agenda_event-list">
                <li class="agenda_event-item">
                 <a class="agenda_event" data-end-time="2019-06-07" data-start-time="2019-06-07" href="/fr/agenda/evenements-2019/festival-de-robotique-de-cachan.html">
                  <div class="agenda_event_picture">
                  </div>
                  <div class="agenda_event_title">
                   Festival de robotique de Cachan
                  </div>
                 </a>
                </li>
               </ul>
              </div>
              <div class="agenda_date" data-date="2019-06-08">
               <div class="agenda_date_title">
                08 juin 2019
                [linkx]
                
               </div>
               <ul class="agenda_event-list">
                <li class="agenda_event-item">
                 <a class="agenda_event" data-end-time="2019-06-08" data-start-time="2019-06-08" href="/fr/agenda/evenements-2019/festival-de-robotique-de-cachan.html">
                  <div class="agenda_event_picture">
                   [content20][content1][linkx][content2][content3][content4][linkx]
                  </div>
                  <div class="agenda_event_title">
                   Festival de robotique de Cachan
                  </div>
                 </a>
                </li>
               </ul>
              </div>
              <div class="agenda_date" data-date="2019-06-09">
               <div class="agenda_date_title">
                09 juin 2019
                [ahref]
                
               </div>
               <ul class="agenda_event-list">
                <li class="agenda_event-item">
                 <a class="agenda_event" data-end-time="2019-06-09" data-start-time="2019-06-09" href="/fr/agenda/evenements-2019/festival-de-robotique-de-cachan.html">
                  <div class="agenda_event_picture">
                  </div>
                  <div class="agenda_event_title">
                   Festival de robotique de Cachan
                  </div>
                 </a>
                </li>
               </ul>
              </div>
              <div class="agenda_date" data-date="2019-06-19">
               <div class="agenda_date_title">
                19 juin 2019
                [ahref]
                 <li>[link]</li><li>[keywordx][symbolx][keywordx][symbolx][bracketl8][keywordx][bracketr8][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx]</li><li>[keywordx][symbolx][keywordx][symbolx][bracketl9][keywordx][bracketr9][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx]</li>[keywordx][symbolx][keywordx][symbolx][bracketl10][keywordx][bracketr10][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx]
                
               </div>
               <ul class="agenda_event-list">
                <li class="agenda_event-item">
                 [linkx]
                 
                </li>
               </ul>
              </div>
              <div class="agenda_date" data-date="2019-06-21">
               <div class="agenda_date_title">
                21 juin 2019
                [linkx]
                
               </div>
               <ul class="agenda_event-list">
                <li class="agenda_event-item">
                 [ahref]
                 
                </li>
               </ul>
              </div>
              <div class="agenda_date" data-date="2019-06-26">
               <div class="agenda_date_title">
                26 juin 2019
                [linkx]
                
               </div>
               <ul class="agenda_event-list">
                <li class="agenda_event-item">
                 [ahref]
                 
                </li>
               </ul>
              </div>
              <div class="agenda_date" data-date="2019-07-04">
               <div class="agenda_date_title">
                04 juillet 2019
                [linkx]
                
               </div>
               <ul class="agenda_event-list">
                <li class="agenda_event-item">
                 [ahref]
                 
                </li>
               </ul>
              </div>
             </div>
            </div>
           </div>
          </div>
         </div>
         <div class="tool tool--graduate">
          [linkx]
          
          <div class="tool_content">
           <form action="/fr/formations/disciplines.html" class="form" id="graduate-form" method="post" role="form">
            <div class="form_group form_group--is-required">
             <label class="form_label" for="graduate-form-discipline">
              Par domaine
             </label>
             <div class="form_controls">
              <select class="form_field form_field--block" id="graduate-form-discipline" name="discipline">
               <option value="chimie">
                Chimie
               </option>
               <option value="informatique">
                Informatique
               </option>
               <option value="physique">
                Physique
               </option>
               <option value="mathematique">
                Mathématique
               </option>
               <option value="biologie">
                Biologie
               </option>
               <option value="sante">
                Santé (Pharmacie, Médecine)
               </option>
               <option value="environnement-et-energie">
                Environnement
               </option>
               <option value="environnement-et-energie">
                Energie
               </option>
               <option value="environnement">
                Sciences de la Terre
               </option>
               <option value="electronique-mecanique">
                Electronique
               </option>
               <option value="electronique-mecanique">
                Mécanique
               </option>
               <option value="droit-economie-gestion">
                Gestion
               </option>
               <option value="droit-economie-gestion">
                Economie
               </option>
               <option value="droit">
                Droit
               </option>
               <option value="droit-economie-gestion">
                Marketing
               </option>
               <option value="droit-economie-gestion">
                Ressources humaines
               </option>
               <option value="metiers-de-l-enseignement">
                Métiers de l'enseignement
               </option>
               <option value="sport">
                Sport et activités physiques
               </option>
              </select>
             </div>
            </div>
            <div class="form_actions">
             <button class="btn btn--primary btn--small" type="submit">
              Rechercher une formation
             </button>
            </div>
           </form>
           <form action="/fr/formations/diplomes.html" class="form" id="graduate-form" method="post" role="form">
            <div class="form_group form_group--is-required">
             <label class="form_label" for="graduate-form-diplome">
              Par diplôme
             </label>
             <div class="form_controls">
              <select class="form_field form_field--block" id="graduate-form-diplome" name="diplome">
               <option value="dut">
                DUT
               </option>
               <option value="deust">
                DEUST
               </option>
               <option selected="selected" value="licences">
                Licences
               </option>
               <option value="licences-professionnelles">
                Licences professionnelles
               </option>
               <option value="masters">
                Masters
               </option>
               <option value="magisteres">
                Magisteres
               </option>
               <option value="ingenieurs">
                Diplômes d'ingénieurs
               </option>
               <option value="doctorats">
                Doctorats
               </option>
               <option value="du">
                DU
               </option>
               <option value="c2i">
                C2i
               </option>
              </select>
             </div>
            </div>
            <div class="form_actions">
             <button class="btn btn--primary btn--small" type="submit">
              Rechercher une formation
             </button>
            </div>
           </form>
          </div>
         </div>
         <div class="tool tool--boutique">
          <div class="tool_content">
           [linkx]
           
          </div>
         </div>
        </div>
       </div>
      </div>
     </div>
    </div>
    <div class="l-pre-footer-wrapper">
     <div class="l-container">
      <div class="pre-footer">
       [link][link][link]
      </div>
     </div>
    </div>
    <div class="l-footer-wrapper">
     <div class="l-container">
      <div class="footer">
       <div class="footer-sponsoring">
        <div class="footer-sponsor footer-sponsor--upsud">
         [ahref]
         
         <p class="footer-sponsor_text">
          Siège et Présidence Bât. 300 - 91405 Orsay cedex  I  FRANCE
          <br/>
          Tél. : +33 1 69 15 67 50
          <br/>
          Accès : RER B Orsay-Ville
         </p>
        </div>
        <div class="footer-sponsor footer-sponsor--gen2024">
         [linkx]
         
        </div>
        <div class="footer-sponsor footer-sponsor--leru">
         [linkx]
         
        </div>
        <div class="footer-sponsor footer-sponsor--saclay">
         [linkx]
         
        </div>
        <div class="footer-sponsor footer-sponsor--fondation">
         [linkx]
         
        </div>
       </div>
       <ul class="footer-map">
        <li class="footer-map_item footer-map_item--i1">
         [ahref]
         
         <ul class="footer-map_children">
          <li class="footer-map_child">
           [linkx]
           
          </li>
          <li class="footer-map_child">
           [linkx]
           
          </li>
          <li class="footer-map_child">
           [linkx]
           
          </li>
          <li class="footer-map_child">
           [linkx]
           
          </li>
          <li class="footer-map_child">
           [ahref]
           
          </li>
          <li class="footer-map_child">
           [linkx]
           
          </li>
          <li class="footer-map_child">
           [ahref]
           
          </li>
          <li class="footer-map_child">
           [linkx]
           
          </li>
          <li class="footer-map_child">
           [ahref]
           
          </li>
          <li class="footer-map_child">
           <a class="footer-map_link" href="/fr/universite/le-jardin-botanique.html">
            Le jardin botanique
           </a>
          </li>
          <li class="footer-map_child">
           [linkx]
           
          </li>
          <li class="footer-map_child">
           [linkx]
           
          </li>
          <li class="footer-map_child">
           [ahref]
           
          </li>
         </ul>
        </li>
        <li class="footer-map_item footer-map_item--i2">
         [linkx]
         
         <ul class="footer-map_children">
          <li class="footer-map_child">
           [ahref]
           
          </li>
          <li class="footer-map_child">
           [ahref]
           
          </li>
          <li class="footer-map_child">
           [linkx]
           
          </li>
          <li class="footer-map_child">
           [ahref]
           
          </li>
          <li class="footer-map_child">
           [linkx]
           
          </li>
          <li class="footer-map_child">
           [linkx]
           
          </li>
          <li class="footer-map_child">
           [ahref]
           
          </li>
          <li class="footer-map_child">
           [linkx]
           
          </li>
          <li class="footer-map_child">
           [linkx]
           
          </li>
          <li class="footer-map_child">
           [linkx]
           
          </li>
          <li class="footer-map_child">
           [linkx]
           
          </li>
         </ul>
        </li>
        <li class="footer-map_item footer-map_item--i3">
         <a class="footer-map_title">
          Formations
         </a>
         <ul class="footer-map_children">
          <li class="footer-map_child">
           [linkx]
           
          </li>
          <li class="footer-map_child">
           [ahref]
           
          </li>
          <li class="footer-map_child">
           [linkx]
           
          </li>
          <li class="footer-map_child">
           [ahref]
           
          </li>
          <li class="footer-map_child">
           [ahref]
           
          </li>
          <li class="footer-map_child">
           [linkx]
           
          </li>
          <li class="footer-map_child">
           <a class="footer-map_link" href="/fr/formations/formation-continue.html">
            Formation Continue
           </a>
          </li>
          <li class="footer-map_child">
           [linkx]
           
          </li>
          <li class="footer-map_child">
           [ahref]
           
          </li>
          <li class="footer-map_child">
           [content19][content20][linkx][content1]
          </li>
          <li class="footer-map_child">
           [linkx]
           
          </li>
          <li class="footer-map_child">
           [linkx]
           
          </li>
          <li class="footer-map_child">
           [ahref]
           
          </li>
          <li class="footer-map_child">
           [ahref]
           
          </li>
         </ul>
        </li>
        <li class="footer-map_item footer-map_item--i4">
         [ahref]
         
         <ul class="footer-map_children">
          <li class="footer-map_child">
           <a class="footer-map_link" href="/fr/vie-etudiante/maison-des-etudiants.html">
            Maison des étudiants
           </a>
          </li>
          <li class="footer-map_child">
           [linkx]
           
          </li>
          <li class="footer-map_child">
           [linkx]
           
          </li>
          <li class="footer-map_child">
           [ahref]
           
          </li>
          <li class="footer-map_child">
           [ahref]
           
          </li>
          <li class="footer-map_child">
           [linkx]
           
          </li>
          <li class="footer-map_child">
           [ahref]
           
          </li>
          <li class="footer-map_child">
           [linkx]
           
          </li>
          <li class="footer-map_child">
           [linkx]
           
          </li>
          <li class="footer-map_child">
           [ahref]
           
          </li>
          <li class="footer-map_child">
           [linkx]
           
          </li>
          <li class="footer-map_child">
           [ahref]
           
          </li>
          <li class="footer-map_child">
           [ahref]
           
          </li>
          <li class="footer-map_child">
           [ahref]
           
          </li>
         </ul>
        </li>
        <li class="footer-map_item footer-map_item--i5">
         <a class="footer-map_title">
          International
         </a>
         <ul class="footer-map_children">
          <li class="footer-map_child">
           [linkx]
           
          </li>
          <li class="footer-map_child">
           [ahref]
           
          </li>
          <li class="footer-map_child">
           [linkx]
           
          </li>
          <li class="footer-map_child">
           <a class="footer-map_link" href="/fr/international/enseignants-chercheurs.html">
            Enseignants Chercheurs
           </a>
          </li>
          <li class="footer-map_child">
           [ahref]
           
          </li>
          <li class="footer-map_child">
           [ahref]
           
          </li>
          <li class="footer-map_child">
           [ahref]
           
          </li>
          <li class="footer-map_child">
           [linkx]
           
          </li>
         </ul>
        </li>
        <li class="footer-map_item footer-map_item--i6">
         [linkx]
         
         <ul class="footer-map_children">
          <li class="footer-map_child">
           [ahref]
           
          </li>
          <li class="footer-map_child">
           [ahref]
           
          </li>
          <li class="footer-map_child">
           [linkx]
           
          </li>
          <li class="footer-map_child">
           [linkx]
           
          </li>
         </ul>
        </li>
       </ul>
      </div>
     </div>
    </div>
    <div class="l-post-footer-wrapper">
     <div class="l-container">
      <div class="post-footer">
       <div class="copyright">
        © Université Paris-Sud - Tous droits réservés
       </div>
       <div class="post-footer_links">
        [linkx]
        
        [ahref]
        
        <a href="/fr/acces.html">
         Plan des campus
        </a>
        [ahref]
        
        [ahref]
        
        [linkx]
        
        [linkx]
        
        <a href="/fr/webmaster.html">
         Webmaster
        </a>
       </div>
      </div>
     </div>
    </div>
   </div>
  </div>
  <div class="upsud-toolbar active" id="upsud-toolbar">
   <div class="upsud-toolbar-wrapper">
    <div class="upsud-toolbar-inner">
     <div class="upsud-toolbar-minimise" id="upsud-toolbar-minimise">
      <i class="upsud-toolbar-icon-plus">
      </i>
      <i class="upsud-toolbar-icon-hyphen">
      </i>
     </div>
     <ul class="upsud-toolbar-item-wrapper" id="upsud-toolbar-item-wrapper">
      <li class="upsud-toolbar-item active">
       [linkx]
       
      </li>
      <li class="upsud-toolbar-item ">
       [ahref]
       
      </li>
      <li class="upsud-toolbar-item ">
       [linkx]
       
      </li>
      <li class="upsud-toolbar-item ">
       [ahref]
       
      </li>
      <li class="upsud-toolbar-item ">
       <a href="/fr/index.html">
        <i class="upsud-toolbar-icon-calendar-check">
        </i>
        <span>
         Bibliothèque
        </span>
       </a>
      </li>
      <li class="upsud-toolbar-item ">
       [linkx]
       
      </li>
      <li class="upsud-toolbar-item ">
       [linkx]
       
      </li>
      <li class="upsud-toolbar-item">
       [ahref]
        [content5][content6][linkx][content7][linkx][content8]
       
       <ul class="upsud-toolbar-dropdown_list">
        <li class="upsud-toolbar-dropdown-item">
         [linkx]
         
        </li>
        <li class="upsud-toolbar-dropdown-item">
         [ahref]
         
        </li>
        <li class="upsud-toolbar-dropdown-item">
         <a href="/fr/index.html">
          <b>
          </b>
          <span>
           ufr droit economie gestion
          </span>
         </a>
        </li>
        <li class="upsud-toolbar-dropdown-item">
         [ahref]
         
        </li>
        <li class="upsud-toolbar-dropdown-item">
         [ahref]
         
        </li>
        <li class="upsud-toolbar-dropdown-item">
         [ahref]
         
        </li>
        <li class="upsud-toolbar-dropdown-item">
         <a href="/fr/index.html">
          <b>
          </b>
          <span>
           polytech paris-sud
          </span>
         </a>
        </li>
        <li class="upsud-toolbar-dropdown-item">
         [ahref]
         
        </li>
        <li class="upsud-toolbar-dropdown-item">
         <a href="/fr/index.html">
          <b>
          </b>
          <span>
           iut orsay
          </span>
         </a>
        </li>
        <li class="upsud-toolbar-dropdown-item">
         [ahref]
         
        </li>
       </ul>
      </li>
     </ul>
    </div>
   </div>
  </div>
  <b style="color:black;background-color:#a0ffff">
   jnice09-ipp30-wq-zq-0210
  </b>
 </body>
</html>
|<---