--->|<!DOCTYPE html>
<html dir="ltr" lang="fr" prefix="content: http://purl.org/rss/1.0/modules/content/  dc: http://purl.org/dc/terms/  foaf: http://xmlns.com/foaf/0.1/  og: http://ogp.me/ns#  rdfs: http://www.w3.org/2000/01/rdf-schema#  schema: http://schema.org/  sioc: http://rdfs.org/sioc/ns#  sioct: http://rdfs.org/sioc/types#  skos: http://www.w3.org/2004/02/skos/core#  xsd: http://www.w3.org/2001/XMLSchema# ">
 <head>
  <meta charset="utf-8"/>
  <meta content="[area1][mkey1][symbolx][pkey1][symbolx][area1][keyword1][bracketl1][area1][keywordx][bracketr1][symbolx][bracketl2][area1][keywordx][bracketr2][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx]" name="title"/>
  <meta content="Drupal 8 (https://www.drupal.org)" name="Generator"/>
  <meta content="width" name="MobileOptimized"/>
  <meta content="true" name="HandheldFriendly"/>
  <meta content="width=device-width, initial-scale=1.0" name="viewport"/>
  <meta content="telephone=no" name="format-detection"/>
  <title>
   [area1][mkey1][symbolx][pkey1][symbolx][area1][keyword1][bracketl1][area1][keywordx][bracketr1][symbolx][bracketl2][area1][keywordx][bracketr2][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx]
  </title>
  <meta content="[area1][mkey1][symbolx][pkey3][symbolx][area1][keyword1][bracketl1][area1][keywordx][bracketr1][symbolx][bracketl2][area1][keywordx][bracketr2][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx]" name="keywords"/>
  <meta content="[area1][mkey1][symbolx][pkey2][symbolx][area1][keyword1][bracketl1][area1][keywordx][bracketr1][symbolx][bracketl2][area1][keywordx][bracketr2][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx]" name="description"/>
 </head>
 <body class="path-frontpage">
  <main>
   <section id="wrapper">
    <div id="wrapper--content">
     <div class="dialog-off-canvas-main-canvas" data-off-canvas-main-canvas="">
      <div id="page-wrapper">
       <div id="page">
        <header aria-label="Entête du site" class="header" id="header" role="banner">
         <div class="header--galaxie">
          <div class="header--galaxie-bottom">
           <div class="link-galaxie">
            La galaxie RMN GP[area1][mkey1][area1][keywordx][linkx][area1][keywordx][area1][keywordx][symbolx][area1][keywordx][symbolx][bracketl15][area1][keywordx][bracketr15][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][linkx][area1][mkey1][pkeyx][area1][mkey1][ahref][area1][mkey1][pkeyx][area1][keywordx][area1][mkey1]
           </div>
           <div class="header--galaxie-bottom-block">
            <div>
             <div class="block block-block-content block-block-content73ae8f53-935f-4e36-a104-497369e2cab8" id="block-inscriptionnewsletterbutton">
              <div class="wysiwygArea">
               <p>
                [ahref]
                
               </p>
              </div>
             </div>
             <div class="search-block-form" data-drupal-selector="search-block-form" id="block-formulairederecherche" role="search">
              <div class="search-form">
               <form accept-charset="UTF-8" action="/fr/search/node" id="search-block-form" method="get">
                <div class="js-form-item form-item js-form-type-search form-item-keys js-form-item-keys form-no-label">
                 <label class="visually-hidden" for="edit-keys">
                  Rechercher
                 </label>
                </div>
                <div class="form-actions js-form-wrapper form-wrapper" data-drupal-selector="edit-actions" id="edit-actions">
                </div>
               </form>
              </div>
              <button class="search-off">
               <i class="gp-search">
               </i>
              </button>
             </div>
             <div class="language-switcher-language-url block block-language block-language-blocklanguage-interface" id="block-selecteurdelangue" role="navigation">
              <div class="active-language">
              </div>
              <ul class="links">
               <li class="ar" data-drupal-link-system-path="<front>" hreflang="ar">
                [ahref]
                
               </li>
               <li class="en" data-drupal-link-system-path="<front>" hreflang="en">
                [linkx]
                
               </li>
               <li class="fr is-active" data-drupal-link-system-path="<front>" hreflang="fr">
                <a class="language-link is-active" data-drupal-link-system-path="<front>" href="/fr" hreflang="fr">
                 Français
                </a>
               </li>
               <li class="de" data-drupal-link-system-path="<front>" hreflang="de">
                [linkx]
                
               </li>
               <li class="it" data-drupal-link-system-path="<front>" hreflang="it">
                [linkx]
                
               </li>
               <li class="pt" data-drupal-link-system-path="<front>" hreflang="pt">
                [linkx]
                
               </li>
               <li class="ru" data-drupal-link-system-path="<front>" hreflang="ru">
                [linkx]
                
               </li>
               <li class="es" data-drupal-link-system-path="<front>" hreflang="es">
                [ahref]
                
               </li>
              </ul>
             </div>
            </div>
           </div>
          </div>
          <div class="header--galaxie-top">
           <div>
            <nav aria-labelledby="block-lagalaxiermngp-menu" id="block-lagalaxiermngp" role="navigation">
             <h2 class="visually-hidden" id="block-lagalaxiermngp-menu">
              <b>[area1][mkey1][symbolx][pkeyx][symbolx][area1][keyword1][bracketl1][area1][keywordx][bracketr1][symbolx][bracketl2][area1][keywordx][bracketr2][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx]</b>
             </h2>
             <ul class="menu">
              <li class="menu-item menu-item--expanded">
               [linkx]
               
               <ul class="menu">
                <li class="menu-item">
                 [ahref]
                 
                </li>
                <li class="menu-item">
                 [linkx]
                 
                </li>
                <li class="menu-item">
                 [ahref]
                 
                </li>
               </ul>
              </li>
              <li class="menu-item menu-item--expanded">
               [ahref][linkx][ahref]<li>[ahref]</li>[pkeyx]
              </li>
              <li class="menu-item menu-item--expanded">
               [linkx]
               
               <ul class="menu">
                <li class="menu-item">
                 [ahref]
                 
                </li>
                <li class="menu-item">
                 [linkx]
                 
                </li>
               </ul>
              </li>
              <li class="menu-item menu-item--expanded">
               [ahref]
               
               <ul class="menu">
                <li class="menu-item">
                 [ahref]
                 
                </li>
                <li class="menu-item">
                 [linkx]
                 
                </li>
               </ul>
              </li>
             </ul>
            </nav>
           </div>
          </div>
         </div>
         <div class="header--main">
          <div>
           <div class="block block-system block-system-branding-block" id="block-rmngp-branding">
            [ahref]
            
           </div>
           <div class="block block-block-content block-block-content73ae8f53-935f-4e36-a104-497369e2cab8" id="block-inscriptionnewsletterbutton-2">
            <div class="wysiwygArea">
             <p>
              [ahref]
              
             </p>
            </div>
           </div>
           <div class="language-switcher-language-url block block-language block-language-blocklanguage-interface" id="block-selecteurdelangue-2" role="navigation">
            <div class="active-language">
            </div>
            <ul class="links">
             <li class="ar" data-drupal-link-system-path="<front>" hreflang="ar">
              <li>[area1][mkey1]</li>[area1][mkey1]<li>[area1][keywordx]</li><li>[area1][mkey1]</li><li>[linkx]</li>
             </li>
             <li class="en" data-drupal-link-system-path="<front>" hreflang="en">
              [ahref]
              
             </li>
             <li class="fr is-active" data-drupal-link-system-path="<front>" hreflang="fr">
              [ahref]
              
             </li>
             <li class="de" data-drupal-link-system-path="<front>" hreflang="de">
              [ahref]
              
             </li>
             <li class="it" data-drupal-link-system-path="<front>" hreflang="it">
              [ahref]
              
             </li>
             <li class="pt" data-drupal-link-system-path="<front>" hreflang="pt">
              [ahref]
              
             </li>
             <li class="ru" data-drupal-link-system-path="<front>" hreflang="ru">
              [linkx]
               [ahref][pkeyx][pkeyx][ahref][area1][keywordx][symbolx][area1][keywordx][symbolx][bracketl5][area1][keywordx][bracketr5][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][pkeyx][area1][keywordx][symbolx][area1][keywordx][symbolx][bracketl6][area1][keywordx][bracketr6][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][ahref][area1][keywordx][symbolx][area1][keywordx][symbolx][bracketl7][area1][keywordx][bracketr7][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][ahref][ahref][area1][mkey1][area1][keywordx][symbolx][area1][keywordx][symbolx][bracketl8][area1][keywordx][bracketr8][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][pkeyx][pkeyx][area1][mkey1][pkeyx]
              
             </li>
             <li class="es" data-drupal-link-system-path="<front>" hreflang="es">
              <a class="language-link" data-drupal-link-system-path="<front>" href="/es" hreflang="es">
               Español
              </a>
             </li>
            </ul>
           </div>
          </div>
         </div>
         <div class="header--nav">
          <div class="burger">
           <span>
           </span>
           <span>
           </span>
           <span>
           </span>
          </div>
          <div>
           <div class="search-block-form" data-drupal-selector="search-block-form-2" id="block-formulairederecherche-2" role="search">
            <div class="search-form">
             <form accept-charset="UTF-8" action="/fr/search/node" id="search-block-form--2" method="get">
              <div class="js-form-item form-item js-form-type-search form-item-keys js-form-item-keys form-no-label">
               <label class="visually-hidden" for="edit-keys--2">
                Rechercher
               </label>
              </div>
              <div class="form-actions js-form-wrapper form-wrapper" data-drupal-selector="edit-actions" id="edit-actions--2">
              </div>
             </form>
            </div>
            <button class="search-off">
             <i class="gp-search">
             </i>
            </button>
           </div>
           <nav aria-labelledby="block-rmngp-main-menu-menu" id="block-rmngp-main-menu" role="navigation">
            <h2 class="visually-hidden" id="block-rmngp-main-menu-menu">
             [area1][mkey1][symbolx][pkeyx][symbolx][area1][keyword1][bracketl1][area1][keywordx][bracketr1][symbolx][bracketl2][area1][keywordx][bracketr2][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx]
            </h2>
            <ul class="menu">
             <li class="menu-item menu-item--expanded">
              [ahref]
              
              <ul class="menu">
               <li class="menu-item">
                <a href="/fr/evenement/la-lune">
                 Expo La Lune
                </a>
               </li>
               <li class="menu-item">
                [linkx]
                
               </li>
               <li class="menu-item">
                [linkx]
                 [linkx]<li>[area1][keywordx][symbolx][area1][keywordx][symbolx][bracketl18][area1][keywordx][bracketr18][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx]</li><li>[area1][keywordx]</li>
                
               </li>
              </ul>
             </li>
             <li class="menu-item">
              [ahref]
              
             </li>
             <li class="menu-item">
              [linkx]
              
             </li>
             <li class="menu-item menu-item--expanded">
              [linkx]
              
              <ul class="menu">
               <li class="menu-item">
                [ahref]
                
               </li>
               <li class="menu-item">
                [linkx]
                
               </li>
               <li class="menu-item">
                [linkx]
                
               </li>
              </ul>
             </li>
             <li class="menu-item">
              [linkx]
              
             </li>
             <li class="menu-item">
              [ahref]
              
             </li>
            </ul>
           </nav>
           <nav aria-labelledby="block-navigationsecondaire-menu" id="block-navigationsecondaire" role="navigation">
            <h2 class="visually-hidden" id="block-navigationsecondaire-menu">
             [area1][mkey1][symbolx][pkeyx][symbolx][area1][keyword1][bracketl1][area1][keywordx][bracketr1][symbolx][bracketl2][area1][keywordx][bracketr2][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx]
            </h2>
            <ul class="menu">
             <li class="menu-item menu-item--expanded">
              [linkx]
              
              <ul class="menu">
               <li class="menu-item">
                [ahref]
                
               </li>
               <li class="menu-item">
                [linkx]
                
               </li>
               <li class="menu-item">
                [linkx]
                
               </li>
               <li class="menu-item">
                [ahref]
                
               </li>
               <li class="menu-item">
                [linkx]
                
               </li>
               <li class="menu-item">
                [ahref]
                
               </li>
              </ul>
             </li>
             <li class="menu-item">
              [ahref]
              
             </li>
             <li class="menu-item">
              [ahref]
              
             </li>
             <li class="menu-item">
              [linkx]
              
             </li>
            </ul>
           </nav>
           <div class="block block-block-content block-block-content68b75f2f-57cb-4013-a22e-c41c276c3550" id="block-reseauxsociaux">
            <span class="follow">
             Suivez nous
            </span>
            <div>
             <div>
              [linkx]
              
             </div>
             <div>
              [linkx]
              
             </div>
             <div>
              [linkx]
              
             </div>
            </div>
           </div>
           <div class="block block-rmngp-social-header block-youtube-last-videos" id="block-videosyoutubeheader">
            <div class="detail-social">
             <div class="detail-social-yt">
              <div class="channel-info">
               <h3>
                <b>[area1][mkey1][symbolx][pkeyx][symbolx][area1][keyword1][bracketl1][area1][keywordx][bracketr1][symbolx][bracketl2][area1][keywordx][bracketr2][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx]</b>
               </h3>
               <p class="subscribe">
                [ahref]
                
               </p>
              </div>
              <div class="video">
               <div class="thumbnail">
                [ahref]
                
               </div>
               <div class="video-info">
                <h4>
                 [ahref]
                 
                </h4>
                <p>
                 [ahref]
                 
                </p>
               </div>
              </div>
              <div class="video">
               <div class="thumbnail">
                [ahref]
                
               </div>
               <div class="video-info">
                <h4>
                 [ahref]
                 
                </h4>
                <p>
                 [linkx]
                 
                </p>
               </div>
              </div>
              <div class="video">
               <div class="thumbnail">
                [linkx]
                
               </div>
               <div class="video-info">
                <h4>
                 [area1][keywordx][symbolx][area1][keywordx][symbolx][bracketl1][area1][keywordx][bracketr1][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][bracketl2][area1][keywordx][bracketr2][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][pkeyx][area1][keywordx][linkx][pkeyx][ahref][area1][mkey1][area1][keywordx][pkeyx][area1][keywordx][symbolx][area1][keywordx][symbolx][bracketl3][area1][keywordx][bracketr3][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][bracketl4][area1][keywordx][bracketr4][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][linkx][ahref]
                </h4>
                <p>
                 [linkx]
                 
                </p>
               </div>
              </div>
              <p class="discover">
               [ahref]
               
              </p>
             </div>
            </div>
           </div>
           <div class="block block-block-content block-block-contentb9839fd7-65c1-4202-9e3b-bd660e246c8b" id="block-detailsocialheader">
            <div class="wysiwygArea">
             <div class="detail-social">
              <div class="detail-social-tw">
               [ahref]
               
              </div>
              <div class="detail-social-fb">
               <iframe allowtransparency="true" frameborder="0" height="500" scrolling="no" src="https://www.facebook.com/plugins/page.php?href=https%3A%2F%2Fwww.facebook.com%2FGrandPalais.RMN%2F&amp;tabs=timeline&amp;width=340&amp;height=500&amp;small_header=true&amp;adapt_container_width=true&amp;hide_cover=false&amp;show_facepile=false&amp;appId=251400344896938" style="border:none;overflow:hidden" width="340">
               </iframe>
              </div>
             </div>
            </div>
           </div>
          </div>
         </div>
         <div class="breadcrumb">
          <div class="layout-container">
           <ul class="accessibility">
            <li>
             <button class="print" onclick="window.print()">
              <i class="gp-print">
              </i>
             </button>
            </li>
            <li>
             <button class="minustext">
              <i class="gp-letterLess">
              </i>
             </button>
            </li>
            <li>
             <button class="plustext">
              <i class="gp-letterMore">
              </i>
             </button>
            </li>
           </ul>
          </div>
         </div>
        </header>
        <div class="highlighted">
         <aside class="layout-container section clearfix" role="complementary">
          <div>
           <div class="hidden" data-drupal-messages-fallback="">
           </div>
          </div>
         </aside>
        </div>
        <div class="layout-main clearfix" id="main">
         <div class="layout-main-wrapper layout-container clearfix" id="main-wrapper">
          <h1>
           [area1][mkey1][symbolx][pkeyx][symbolx][area1][keyword1][bracketl1][area1][keywordx][bracketr1][symbolx][bracketl2][area1][keywordx][bracketr2][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx]
          </h1>
          <div id="main-content">
           <div class="column main-content" id="content" role="main">
            <section class="section">
             <div>
              <div class="block--carroussel-hp">
               <div>
                <div>
                 <article about="/fr/article/derniere-nocturne-gratuite-pour-les-moins-de-26-ans-au-grand-palais-ce-mercredi-3-juillet" data-history-node-id="50912" role="article">
                  <div class="visuel" style="background-image: url(/sites/default/files/field_magazine_carousel_thumb/carou_264_bosphore.png)">
                  </div>
                  <div class="content">
                   <li>[ahref]</li>[ahref]<li>[area1][keywordx]</li><li>[area1][keywordx][symbolx][area1][keywordx][symbolx][bracketl17][area1][keywordx][bracketr17][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx]</li>[area1][mkey1]
                  </div>
                 </article>
                </div>
                <div>
                 <article about="/fr/article/mooon-la-soiree-du-grand-palais-pour-feter-les-50-ans-des-premiers-pas-de-lhomme-sur-la" data-history-node-id="50905" role="article">
                  <div class="visuel" style="background-image: url(/sites/default/files/field_magazine_carousel_thumb/carou_mooon.png)">
                  </div>
                  <div class="content">
                   <h2>
                    [area1][mkey1][symbolx][pkeyx][symbolx][area1][keyword1][bracketl1][area1][keywordx][bracketr1][symbolx][bracketl2][area1][keywordx][bracketr2][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx]
                   </h2>
                   <div class="info">
                    <li>[pkeyx]</li><li>[linkx]</li><li>[ahref]</li>
                   </div>
                  </div>
                 </article>
                </div>
                <div>
                 <article about="/fr/article/3-raisons-de-visiter-lexpo-la-lune" data-history-node-id="50817" role="article">
                  <div class="visuel" style="background-image: url(/sites/default/files/field_magazine_thumbnail/carou_balune.png)">
                  </div>
                  <div class="content">
                   <h2>
                    [area1][mkey1][symbolx][pkeyx][symbolx][area1][keyword1][bracketl1][area1][keywordx][bracketr1][symbolx][bracketl2][area1][keywordx][bracketr2][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx]
                   </h2>
                   <div class="info">
                    <div class="intro">
                     <div>
                      Le Grand Palais a décroché la lune pour vous! De l'Antiquité à l'art contemporain, plus de 190 oeuvres sont à découvrir jusqu'au 22 juillet 2019.
                      <br/>
                      On vous présente trois des multiples bonnes raisons de visiter en famille, seul.e ou à plusieurs l'exposition "La Lune. Du voyage réel aux voyages imaginaires".
                     </div>
                    </div>
                   </div>
                  </div>
                 </article>
                </div>
                <div>
                 <article about="/fr/article/reservez-vos-billets-pour-un-automne-2019-haut-en-couleurs-au-grand-palais" data-history-node-id="50911" role="article">
                  <div class="visuel" style="background-image: url(/sites/default/files/field_magazine_thumbnail/carou_diapogreco.png)">
                  </div>
                  <div class="content">
                   <h2>
                    <b>[area1][mkey1][symbolx][pkeyx][symbolx][area1][keyword1][bracketl1][area1][keywordx][bracketr1][symbolx][bracketl2][area1][keywordx][bracketr2][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx]</b>
                   </h2>
                   <div class="info">
                    <div class="intro">
                     <div>
                      Toulouse-Lautrec et Greco seront les hôtes du Grand Palais cet automne, réservez vos billets dès maintenant !
                     </div>
                    </div>
                   </div>
                  </div>
                 </article>
                </div>
                <div>
                 <article about="/fr/article/reservez-vos-cours-histoires-dart-pour-la-saison-2019-2020" data-history-node-id="50859" role="article">
                  <div class="video">
                   <div>
                    <div class="paragraph paragraph--type--video paragraph--view-mode--default">
                     <div>
                      <video id="cvideo" poster="https://www.grandpalais.fr/sites/default/files/2019-06/carou_Motion_HDA2019_20.png" preload="none" style="height:auto;width:100%;max-width:100%;">
                       <source src="https://www.grandpalais.fr/sites/default/files/03_Peinture_1180x620.mp4"/>
                      </video>
                      <div class="player-overlay play-icon" style="touch-action: manipulation;">
                      </div>
                     </div>
                    </div>
                   </div>
                   <div class="content">
                    <h2>
                     <b>[area1][mkey1][symbolx][pkeyx][symbolx][area1][keyword1][bracketl1][area1][keywordx][bracketr1][symbolx][bracketl2][area1][keywordx][bracketr2][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx]</b>
                    </h2>
                   </div>
                  </div>
                 </article>
                </div>
               </div>
               <p class="moreLink">
                [ahref]
                
               </p>
              </div>
              <div class="block block-system block-system-main-block" id="block-rmngp-rmn-gp-system-main">
              </div>
              <div class="views-element-container block block-views block-views-blockfil-d-info-block-1" id="block-views-block-fil-d-info-block-1">
               <div>
                <div class="js-view-dom-id-c68e5ad95f05ab62f46919c98ef2d03d9c9217f15ba345352bc57de8dd8489dc">
                 <div class="view-content">
                  <div class="views-row">
                   <div class="views-field views-field-field-breve-date">
                    <div class="field-content">
                     19 juin 2019
                    </div>
                   </div>
                   <div class="views-field views-field-body">
                    <div class="field-content">
                     <p>
                      Informez-vous, exprimez-vous :
                      [linkx]
                      
                      .
                     </p>
                    </div>
                   </div>
                  </div>
                  <div class="views-row">
                   <div class="views-field views-field-field-breve-date">
                    <div class="field-content">
                     11 juin 2019
                    </div>
                   </div>
                   <div class="views-field views-field-body">
                    <div class="field-content">
                     <p>
                      <span style="color:#ff0000;">
                       [ahref]
                       
                       les conditions d'accès au Grand Palais conformément au plan Vigipirate niveau sécurité renforcée - risque attentat
                      </span>
                     </p>
                    </div>
                   </div>
                  </div>
                 </div>
                </div>
               </div>
              </div>
              <div id="block-programmeshp">
               <h2>
                <b>[area1][mkey1][symbolx][pkeyx][symbolx][area1][keyword1][bracketl1][area1][keywordx][bracketr1][symbolx][bracketl2][area1][keywordx][bracketr2][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx]</b>
               </h2>
               <div>
                <div>
                 <article class="manifestation">
                  <div class="illustration">
                   <div>
                    [linkx]
                    
                   </div>
                   <div class="manifestation-type">
                    <div>
                     <div>
                      Grand Palais, Galeries nationales
                     </div>
                    </div>
                   </div>
                   [ahref]
                    <li>[area1][mkey1]</li><li>[area1][keywordx]</li>[area1][keywordx][symbolx][area1][keywordx][symbolx][bracketl2][area1][keywordx][bracketr2][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx]
                   
                  </div>
                  <h3>
                   <b>[area1][mkey1][symbolx][pkeyx][symbolx][area1][keyword1][bracketl1][area1][keywordx][bracketr1][symbolx][bracketl2][area1][keywordx][bracketr2][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx]</b>
                  </h3>
                  <h4>
                   Du voyage réel aux voyages imaginaires
                  </h4>
                  <p class="manifestation-dates">
                   du 3 avril 2019 au  22 juillet 2019
                  </p>
                 </article>
                </div>
                <div>
                 <article class="manifestation">
                  <div class="illustration">
                   <div>
                    [ahref]
                    
                   </div>
                   <div class="manifestation-type">
                    <div>
                     <div>
                      Grand Palais, Nef
                     </div>
                    </div>
                   </div>
                   [ahref]
                   
                  </div>
                  <h3>
                   <b>[area1][mkey1][symbolx][pkeyx][symbolx][area1][keyword1][bracketl1][area1][keywordx][bracketr1][symbolx][bracketl2][area1][keywordx][bracketr2][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx]</b>
                  </h3>
                  <h4>
                   Nuit cosmique
                  </h4>
                  <p class="manifestation-dates">
                   20 juillet 2019
                  </p>
                 </article>
                </div>
                <div>
                 <article class="manifestation">
                  <div class="illustration">
                   <div>
                    [ahref]
                    
                   </div>
                   <div class="manifestation-type">
                    <div>
                     <div>
                      Grand Palais, Auditorium
                     </div>
                    </div>
                   </div>
                   [ahref]
                   
                  </div>
                  <h3>
                   [area1][mkey1][symbolx][pkeyx][symbolx][area1][keyword1][bracketl1][area1][keywordx][bracketr1][symbolx][bracketl2][area1][keywordx][bracketr2][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx]
                  </h3>
                  <h4>
                  </h4>
                  <p class="manifestation-dates">
                   15 septembre 2018 / 16 septembre 2018 / 22 septembre 2018 ...
                  </p>
                 </article>
                </div>
                <div>
                 <article class="manifestation">
                  <div class="illustration">
                   <div>
                    [ahref]
                    
                   </div>
                   <div class="manifestation-type">
                    <div>
                     <div>
                      Grand Palais, Galerie sud-est
                     </div>
                    </div>
                   </div>
                   [linkx]
                   
                  </div>
                  <h3>
                   <b>[area1][mkey1][symbolx][pkeyx][symbolx][area1][keyword1][bracketl1][area1][keywordx][bracketr1][symbolx][bracketl2][area1][keywordx][bracketr2][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx]</b>
                  </h3>
                  <h4>
                  </h4>
                  <p class="manifestation-dates">
                   du 16 octobre 2019 au  10 février 2020
                  </p>
                 </article>
                </div>
                <div>
                 <article class="manifestation">
                  <div class="illustration">
                   <div>
                    [linkx]
                    
                   </div>
                   <div class="manifestation-type">
                    <div>
                     <div>
                      Grand Palais, Galeries nationales
                     </div>
                    </div>
                   </div>
                   [linkx]
                   
                  </div>
                  <h3>
                   <b>[area1][mkey1][symbolx][pkeyx][symbolx][area1][keyword1][bracketl1][area1][keywordx][bracketr1][symbolx][bracketl2][area1][keywordx][bracketr2][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx]</b>
                  </h3>
                  <h4>
                   Résolument moderne
                  </h4>
                  <p class="manifestation-dates">
                   du 9 octobre 2019 au  27 janvier 2020
                  </p>
                 </article>
                </div>
               </div>
               <p class="moreLink">
                [linkx]
                
               </p>
              </div>
              <div class="views-element-container block block-views block-views-blockquestions-home-block-1" id="block-views-block-questions-home-block-1">
               <div>
                <div class="js-view-dom-id-fc69146a821842bfc18759c207d0e2d821a9426779e61bd4f33f49c4d32ff9b5">
                 <header>
                  <h2>
                   <b>[area1][mkey1][symbolx][pkeyx][symbolx][area1][keyword1][bracketl1][area1][keywordx][bracketr1][symbolx][bracketl2][area1][keywordx][bracketr2][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx]</b>
                  </h2>
                  <div class="switch">
                   <p class="selected">
                    [area1][keywordx][symbolx][area1][keywordx][symbolx][bracketl16][area1][keywordx][bracketr16][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx]<li>[pkeyx]</li><li>[ahref]</li>[linkx][area1][keywordx]
                   </p>
                   <ul class="select">
                    <li>
                     <span class="active current-item" id="visitors">
                      Visiteurs
                     </span>
                    </li>
                    <li>
                     <span id="jeune-public">
                      Jeune public
                     </span>
                    </li>
                    <li>
                     <span id="sesame">
                      Sésame
                     </span>
                    </li>
                   </ul>
                  </div>
                 </header>
                 <div class="item-list">
                  <ul>
                   <li>
                    <span class="views-field views-field-field-collection-questions">
                     <span class="field-content">
                      <div class="paragraph paragraph--type--questions-collection paragraph--view-mode--default">
                       <div class="question-list">
                        <div class="question-items">
                         <div class="question-item">
                          <article about="/fr/question/achetez" class="question" data-history-node-id="3521" role="article">
                           <div class="item-question">
                            <div>
                             <span class="image">
                             </span>
                            </div>
                            <div class="desc-item">
                             <h2>
                              [area1][mkey1][symbolx][pkeyx][symbolx][area1][keyword1][bracketl1][area1][keywordx][bracketr1][symbolx][bracketl2][area1][keywordx][bracketr2][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx]
                             </h2>
                             <div class="wysiwygArea">
                              <p>
                               vos billets (seul, en famille, en groupe...)
                              </p>
                             </div>
                            </div>
                           </div>
                          </article>
                         </div>
                         <div class="question-item">
                          <article about="/node/3525" class="question" data-history-node-id="3525" role="article">
                           <div class="item-question">
                            <div>
                             <span class="image">
                             </span>
                            </div>
                            <div class="desc-item">
                             <h2>
                              [area1][mkey1][symbolx][pkeyx][symbolx][area1][keyword1][bracketl1][area1][keywordx][bracketr1][symbolx][bracketl2][area1][keywordx][bracketr2][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx]
                             </h2>
                             <div class="wysiwygArea">
                              <p>
                               aux pass-expos Sésame
                              </p>
                             </div>
                            </div>
                           </div>
                          </article>
                         </div>
                         <div class="question-item">
                          <article about="/node/3528" class="question" data-history-node-id="3528" role="article">
                           <div class="item-question">
                            <div>
                             <span class="image">
                             </span>
                            </div>
                            <div class="desc-item">
                             <h2>
                              <b>[area1][mkey1][symbolx][pkeyx][symbolx][area1][keyword1][bracketl1][area1][keywordx][bracketr1][symbolx][bracketl2][area1][keywordx][bracketr2][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx]</b>
                             </h2>
                             <div class="wysiwygArea">
                              <p>
                               des livres, cadeaux, objets d'art...
                              </p>
                             </div>
                            </div>
                           </div>
                          </article>
                         </div>
                         <div class="question-item">
                          <article about="/node/3527" class="question" data-history-node-id="3527" role="article">
                           <div class="item-question">
                            <div>
                             <span class="image">
                             </span>
                            </div>
                            <div class="desc-item">
                             <h2>
                              <b>[area1][mkey1][symbolx][pkeyx][symbolx][area1][keyword1][bracketl1][area1][keywordx][bracketr1][symbolx][bracketl2][area1][keywordx][bracketr2][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx]</b>
                             </h2>
                             <div class="wysiwygArea">
                              <p>
                               au Grand Palais, ses restaurants...
                              </p>
                             </div>
                            </div>
                           </div>
                          </article>
                         </div>
                         <div class="question-item">
                          <article about="/node/15284" class="question" data-history-node-id="15284" role="article">
                           <div class="item-question">
                            <div>
                             <span class="image">
                             </span>
                            </div>
                            <div class="desc-item">
                             <h2>
                              [area1][mkey1][symbolx][pkeyx][symbolx][area1][keyword1][bracketl1][area1][keywordx][bracketr1][symbolx][bracketl2][area1][keywordx][bracketr2][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx]
                             </h2>
                             <div class="wysiwygArea">
                              <p>
                               à l'Auditorium
                              </p>
                             </div>
                            </div>
                           </div>
                          </article>
                         </div>
                         <div class="question-item">
                          <article about="/node/16907" class="question" data-history-node-id="16907" role="article">
                           <div class="item-question">
                            <div>
                             <span class="image">
                             </span>
                            </div>
                            <div class="desc-item">
                             <h2>
                              <b>[area1][mkey1][symbolx][pkeyx][symbolx][area1][keyword1][bracketl1][area1][keywordx][bracketr1][symbolx][bracketl2][area1][keywordx][bracketr2][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx]</b>
                             </h2>
                             <div class="wysiwygArea">
                              un cours d'histoire de l'art
                             </div>
                            </div>
                           </div>
                          </article>
                         </div>
                         <div class="question-item">
                          <article about="/node/3530" class="question" data-history-node-id="3530" role="article">
                           <div class="item-question">
                            <div>
                             <span class="image">
                             </span>
                            </div>
                            <div class="desc-item">
                             <h2>
                              [area1][mkey1][symbolx][pkeyx][symbolx][area1][keyword1][bracketl1][area1][keywordx][bracketr1][symbolx][bracketl2][area1][keywordx][bracketr2][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx]
                             </h2>
                             <div class="wysiwygArea">
                              <p>
                               nos éditions
                              </p>
                             </div>
                            </div>
                           </div>
                          </article>
                         </div>
                         <div class="question-item">
                          <article about="/node/8131" class="question" data-history-node-id="8131" role="article">
                           <div class="item-question">
                            <div>
                             <span class="image">
                             </span>
                            </div>
                            <div class="desc-item">
                             <h2>
                              <b>[area1][mkey1][symbolx][pkeyx][symbolx][area1][keyword1][bracketl1][area1][keywordx][bracketr1][symbolx][bracketl2][area1][keywordx][bracketr2][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx]</b>
                             </h2>
                             <div class="wysiwygArea">
                              <p>
                               nos applications et e-albums
                              </p>
                             </div>
                            </div>
                           </div>
                          </article>
                         </div>
                         <div class="question-item">
                          <article about="/node/13157" class="question" data-history-node-id="13157" role="article">
                           <div class="item-question">
                            <div>
                             <span class="image">
                             </span>
                            </div>
                            <div class="desc-item">
                             <h2>
                              <b>[area1][mkey1][symbolx][pkeyx][symbolx][area1][keyword1][bracketl1][area1][keywordx][bracketr1][symbolx][bracketl2][area1][keywordx][bracketr2][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx]</b>
                             </h2>
                             <div class="wysiwygArea">
                              <p>
                               aux événements en boutique
                              </p>
                             </div>
                            </div>
                           </div>
                          </article>
                         </div>
                         <div class="question-item">
                          <article about="/node/3531" class="question" data-history-node-id="3531" role="article">
                           <div class="item-question">
                            <div>
                             <span class="image">
                             </span>
                            </div>
                            <div class="desc-item">
                             <h2>
                              [area1][mkey1][symbolx][pkeyx][symbolx][area1][keyword1][bracketl1][area1][keywordx][bracketr1][symbolx][bracketl2][area1][keywordx][bracketr2][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx]
                             </h2>
                             <div class="wysiwygArea">
                              <p>
                               le Grand Palais
                              </p>
                             </div>
                            </div>
                           </div>
                          </article>
                         </div>
                         <div class="question-item">
                          <article about="/node/13158" class="question" data-history-node-id="13158" role="article">
                           <div class="item-question">
                            <div>
                             <span class="image">
                             </span>
                            </div>
                            <div class="desc-item">
                             <h2>
                              [area1][mkey1][symbolx][pkeyx][symbolx][area1][keyword1][bracketl1][area1][keywordx][bracketr1][symbolx][bracketl2][area1][keywordx][bracketr2][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx]
                             </h2>
                             <div class="wysiwygArea">
                              nos contenus audiovisuels
                             </div>
                            </div>
                           </div>
                          </article>
                         </div>
                         <div class="question-item">
                          <article about="/fr/question/telechargez-16" class="question" data-history-node-id="16713" role="article">
                           <div class="item-question">
                            <div>
                             <span class="image">
                             </span>
                            </div>
                            <div class="desc-item">
                             <h2>
                              <b>[area1][mkey1][symbolx][pkeyx][symbolx][area1][keyword1][bracketl1][area1][keywordx][bracketr1][symbolx][bracketl2][area1][keywordx][bracketr2][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx]</b>
                             </h2>
                             <div class="wysiwygArea">
                              <p>
                               l'offre pédagogique de l'automne 2018
                              </p>
                             </div>
                            </div>
                           </div>
                          </article>
                         </div>
                        </div>
                       </div>
                      </div>
                     </span>
                    </span>
                   </li>
                  </ul>
                 </div>
                </div>
               </div>
              </div>
              <div class="views-element-container block block-views block-views-blockquestion-home-jeune-public-block-1" id="block-views-block-question-home-jeune-public-block-1">
               <div>
                <div class="js-view-dom-id-39b5fc0fb809dee7d3480bce6d845b22df7a90045377206c683b7d8a4ba5ead8">
                 <div class="item-list">
                  <ul>
                   <li>
                    <div class="views-field views-field-field-collection-questions">
                     <div class="field-content">
                      <div class="paragraph paragraph--type--questions-collection paragraph--view-mode--default">
                       <div class="question-list">
                        <div class="question-items">
                         <div class="question-item">
                          <article about="/fr/question/joue-en-ligne" class="question" data-history-node-id="4865" role="article">
                           <div class="item-question">
                            <div>
                             <span class="image">
                             </span>
                            </div>
                            <div class="desc-item">
                             <h2>
                              <b>[area1][mkey1][symbolx][pkeyx][symbolx][area1][keyword1][bracketl1][area1][keywordx][bracketr1][symbolx][bracketl2][area1][keywordx][bracketr2][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx]</b>
                             </h2>
                             <div class="wysiwygArea">
                              <p>
                               Dominos, puzzles, BD…
                              </p>
                             </div>
                            </div>
                           </div>
                          </article>
                         </div>
                         <div class="question-item">
                          <article about="/node/15017" class="question" data-history-node-id="15017" role="article">
                           <div class="item-question">
                            <div>
                             <span class="image">
                             </span>
                            </div>
                            <div class="desc-item">
                             <h2>
                              <b>[area1][mkey1][symbolx][pkeyx][symbolx][area1][keyword1][bracketl1][area1][keywordx][bracketr1][symbolx][bracketl2][area1][keywordx][bracketr2][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx]</b>
                             </h2>
                             <div class="wysiwygArea">
                              <p>
                               les expos du Grand Palais
                              </p>
                             </div>
                            </div>
                           </div>
                          </article>
                         </div>
                         <div class="question-item">
                          <article about="/node/13687" class="question" data-history-node-id="13687" role="article">
                           <div class="item-question">
                            <div>
                             <span class="image">
                             </span>
                            </div>
                            <div class="desc-item">
                             <h2>
                              [area1][mkey1][symbolx][pkeyx][symbolx][area1][keyword1][bracketl1][area1][keywordx][bracketr1][symbolx][bracketl2][area1][keywordx][bracketr2][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx]
                             </h2>
                             <div class="wysiwygArea">
                              aux ateliers
                             </div>
                            </div>
                           </div>
                          </article>
                         </div>
                         <div class="question-item">
                          <article about="/fr/question/voyage" class="question" data-history-node-id="4864" role="article">
                           <div class="item-question">
                            <div>
                             <span class="image">
                             </span>
                            </div>
                            <div class="desc-item">
                             [area1][keywordx][symbolx][area1][keywordx][symbolx][bracketl1][area1][keywordx][bracketr1][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx]<li>[area1][mkey1]</li>[area1][mkey1]
                            </div>
                           </div>
                          </article>
                         </div>
                         <div class="question-item">
                          <article about="/node/4867" class="question" data-history-node-id="4867" role="article">
                           <div class="item-question">
                            <div>
                             <span class="image">
                             </span>
                            </div>
                            <div class="desc-item">
                             <h2>
                              <b>[area1][mkey1][symbolx][pkeyx][symbolx][area1][keyword1][bracketl1][area1][keywordx][bracketr1][symbolx][bracketl2][area1][keywordx][bracketr2][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx]</b>
                             </h2>
                             <div class="wysiwygArea">
                              nos livres jeunesse
                             </div>
                            </div>
                           </div>
                          </article>
                         </div>
                         <div class="question-item">
                          <article about="/node/15026" class="question" data-history-node-id="15026" role="article">
                           <div class="item-question">
                            <div>
                             <span class="image">
                             </span>
                            </div>
                            <div class="desc-item">
                             <h2>
                              <b>[area1][mkey1][symbolx][pkeyx][symbolx][area1][keyword1][bracketl1][area1][keywordx][bracketr1][symbolx][bracketl2][area1][keywordx][bracketr2][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx]</b>[area1][keywordx]<li>[area1][keywordx]</li>[area1][keywordx]<li>[pkeyx]</li>[pkeyx]
                             </h2>
                             <div class="wysiwygArea">
                              C'est ludique!
                              <br/>
                              <br/>
                             </div>
                            </div>
                           </div>
                          </article>
                         </div>
                         <div class="question-item">
                          <article about="/node/16614" class="question" data-history-node-id="16614" role="article">
                           <div class="item-question">
                            <div>
                             <span class="image">
                             </span>
                            </div>
                            <div class="desc-item">
                             <h2>
                              [area1][mkey1][symbolx][pkeyx][symbolx][area1][keyword1][bracketl1][area1][keywordx][bracketr1][symbolx][bracketl2][area1][keywordx][bracketr2][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx]
                             </h2>
                             <div class="wysiwygArea">
                              <p>
                               l'Histoire de l'art et les artistes
                              </p>
                             </div>
                            </div>
                           </div>
                          </article>
                         </div>
                         <div class="question-item">
                          <article about="/fr/question/decode" class="question" data-history-node-id="50378" role="article">
                           <div class="item-question">
                            <div>
                             <span class="image">
                             </span>
                            </div>
                            <div class="desc-item">
                             <h2>
                              [area1][mkey1][symbolx][pkeyx][symbolx][area1][keyword1][bracketl1][area1][keywordx][bracketr1][symbolx][bracketl2][area1][keywordx][bracketr2][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx]
                             </h2>
                             <div class="wysiwygArea">
                              <p>
                               avec le dico d'art !
                              </p>
                             </div>
                            </div>
                           </div>
                          </article>
                         </div>
                        </div>
                       </div>
                      </div>
                     </div>
                    </div>
                   </li>
                  </ul>
                 </div>
                </div>
               </div>
              </div>
              <div class="views-element-container block block-views block-views-blockquestion-home-sesame-block-1" id="block-views-block-question-home-sesame-block-1">
               <div>
                <div class="js-view-dom-id-91b519c9e7f4e5ad342a255071bcda762c389e9ce1c75d0af6a2cd831521c393">
                 <div class="item-list">
                  <ul>
                   <li>
                    <div class="views-field views-field-field-collection-questions">
                     <div class="field-content">
                      <div class="paragraph paragraph--type--questions-collection paragraph--view-mode--default">
                       <div class="question-list">
                        <div class="question-items">
                         <div class="question-item">
                          <article about="/node/3525" class="question" data-history-node-id="3525" role="article">
                           <div class="item-question">
                            <div>
                             <span class="image">
                             </span>
                            </div>
                            <div class="desc-item">
                             <h2>
                              [area1][mkey1][symbolx][pkeyx][symbolx][area1][keyword1][bracketl1][area1][keywordx][bracketr1][symbolx][bracketl2][area1][keywordx][bracketr2][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx]
                             </h2>
                             <div class="wysiwygArea">
                              <p>
                               aux pass-expos Sésame
                              </p>
                             </div>
                            </div>
                           </div>
                          </article>
                         </div>
                         <div class="question-item">
                          <article about="/node/13795" class="question" data-history-node-id="13795" role="article">
                           <div class="item-question">
                            <div>
                             <span class="image">
                             </span>
                            </div>
                            <div class="desc-item">
                             <h2>
                              <b>[area1][mkey1][symbolx][pkeyx][symbolx][area1][keyword1][bracketl1][area1][keywordx][bracketr1][symbolx][bracketl2][area1][keywordx][bracketr2][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx]</b>
                             </h2>
                             <div class="wysiwygArea">
                              <p>
                               librement aux expositions 2018-19
                              </p>
                             </div>
                            </div>
                           </div>
                          </article>
                         </div>
                         <div class="question-item">
                          <article about="/node/13796" class="question" data-history-node-id="13796" role="article">
                           <div class="item-question">
                            <div>
                             <span class="image">
                             </span>
                            </div>
                            <div class="desc-item">
                             <h2>
                              <b>[area1][mkey1][symbolx][pkeyx][symbolx][area1][keyword1][bracketl1][area1][keywordx][bracketr1][symbolx][bracketl2][area1][keywordx][bracketr2][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx]</b>
                             </h2>
                             <div class="wysiwygArea">
                              <p>
                               de vos avantages Sésame
                              </p>
                             </div>
                            </div>
                           </div>
                          </article>
                         </div>
                        </div>
                       </div>
                      </div>
                     </div>
                    </div>
                   </li>
                  </ul>
                 </div>
                </div>
               </div>
              </div>
              <div class="block block-block-content block-block-content5eea0940-971f-487f-a871-85776ff28970" id="block-toutesnosoffres">
               <div class="wysiwygArea">
                <p class="moreLink">
                 [linkx]
                 
                </p>
               </div>
              </div>
              <div id="block-selectionvideo">
               [area1][mkey1][pkeyx][area1][mkey1][linkx][area1][keywordx][area1][keywordx][symbolx][area1][keywordx][symbolx][bracketl9][area1][keywordx][bracketr9][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][pkeyx][linkx][linkx][ahref][pkeyx][ahref][ahref][pkeyx][ahref][area1][mkey1][pkeyx][area1][keywordx][area1][keywordx][area1][keywordx][ahref][area1][mkey1][linkx][area1][keywordx][symbolx][area1][keywordx][symbolx][bracketl10][area1][keywordx][bracketr10][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][area1][mkey1]
              </div>
              <div class="block block-block-content block-block-contentd213eb86-8e7e-4df3-ba74-d4cbd85863c4" id="block-rmngp-rmn-gp-block-13">
               <h2>
                <b>[area1][mkey1][symbolx][pkeyx][symbolx][area1][keyword1][bracketl1][area1][keywordx][bracketr1][symbolx][bracketl2][area1][keywordx][bracketr2][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx]</b>
               </h2>
               <div class="wysiwygArea">
                <div id="social-media">
                 <div class="twitter">
                  <h3 class="gp-tw">
                   <b>[area1][mkey1][symbolx][pkeyx][symbolx][area1][keyword1][bracketl1][area1][keywordx][bracketr1][symbolx][bracketl2][area1][keywordx][bracketr2][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx]</b>
                  </h3>
                  [ahref]
                  
                 </div>
                 <div class="facebook">
                  <h3 class="gp-fb">
                   [area1][mkey1][symbolx][pkeyx][symbolx][area1][keyword1][bracketl1][area1][keywordx][bracketr1][symbolx][bracketl2][area1][keywordx][bracketr2][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx]
                  </h3>
                  <iframe allowtransparency="true" frameborder="0" height="600" scrolling="no" src="https://www.facebook.com/plugins/page.php?href=https%3A%2F%2Fwww.facebook.com%2FGrandPalais.RMN%2F&amp;tabs=timeline&amp;width=600&amp;height=600&amp;small_header=true&amp;adapt_container_width=true&amp;hide_cover=true&amp;show_facepile=false&amp;appId=251400344896938" style="border:none;overflow:hidden" width="600">
                  </iframe>
                 </div>
                </div>
               </div>
              </div>
             </div>
            </section>
           </div>
          </div>
         </div>
        </div>
        <footer class="site-footer">
         <div class="layout-container">
          <div>
           <nav aria-labelledby="block-sitemapfooter-menu" id="block-sitemapfooter" role="navigation">
            <h2 class="visually-hidden" id="block-sitemapfooter-menu">
             [area1][mkey1][symbolx][pkeyx][symbolx][area1][keyword1][bracketl1][area1][keywordx][bracketr1][symbolx][bracketl2][area1][keywordx][bracketr2][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx]
            </h2>
            <ul class="menu">
             <li class="menu-item menu-item--expanded">
              [ahref]
              
              <ul class="menu">
               <li class="menu-item">
                [pkeyx][area1][keywordx][symbolx][area1][keywordx][symbolx][bracketl11][area1][keywordx][bracketr11][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][pkeyx][area1][keywordx][symbolx][area1][keywordx][symbolx][bracketl12][area1][keywordx][bracketr12][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][pkeyx][ahref][ahref][area1][mkey1][area1][keywordx][linkx][linkx][ahref][linkx][area1][keywordx][symbolx][area1][keywordx][symbolx][bracketl13][area1][keywordx][bracketr13][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][area1][keywordx][symbolx][area1][keywordx][symbolx][bracketl14][area1][keywordx][bracketr14][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx]
               </li>
               <li class="menu-item">
                [linkx]
                
               </li>
              </ul>
             </li>
             <li class="menu-item">
              [linkx]
              
             </li>
             <li class="menu-item menu-item--expanded">
              [ahref]
              
              <ul class="menu">
               <[area1][keywordx]>
               </[area1][keywordx]>
               <li class="menu-item">
                [linkx]
                
               </li>
               <li class="menu-item">
                [linkx]
                
               </li>
               <li class="menu-item">
                [linkx]
                
               </li>
               <li class="menu-item">
                [ahref]
                
               </li>
               <li class="menu-item">
                [linkx]
                
               </li>
              </ul>
             </li>
             <li class="menu-item menu-item--expanded">
              [ahref]
              
              <ul class="menu">
               <li class="menu-item">
                [linkx]
                
               </li>
               <li class="menu-item">
                [linkx]
                
               </li>
               <li class="menu-item">
                [ahref]
                
               </li>
              </ul>
             </li>
             <li class="menu-item">
              [linkx]
              
             </li>
            </ul>
           </nav>
           <div class="block block-block-content block-block-content614361ed-3834-4137-8d48-a1ee9c1cfb99" id="block-reseauxsociauxfull">
            <span class="follow">
             Suivez nous
            </span>
            <div>
             <div>
              [ahref]
              
             </div>
             <div>
              [ahref]
              
             </div>
             <div>
              [linkx]
              
             </div>
             <div>
              [ahref]
              
             </div>
             <div>
              [ahref]
              
             </div>
            </div>
           </div>
           <nav aria-labelledby="block-rmngp-footer-menu" id="block-rmngp-footer" role="navigation">
            <h2 class="visually-hidden" id="block-rmngp-footer-menu">
             [area1][mkey1][symbolx][pkeyx][symbolx][area1][keyword1][bracketl1][area1][keywordx][bracketr1][symbolx][bracketl2][area1][keywordx][bracketr2][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx]
            </h2>
            <ul class="menu">
             <li class="menu-item">
              [linkx]
              
             </li>
             <li class="menu-item">
              [linkx]
              
             </li>
             <li class="menu-item">
              [linkx]
              
             </li>
             <li class="menu-item">
              [linkx]
               <li>[pkeyx]</li>[ahref]<li>[pkeyx]</li>
              
             </li>
            </ul>
           </nav>
           <div class="fb-customerchat block block-facebook-mcc block-facebook-mcc-block" greeting_dialog_delay="2" id="block-facebookmessengercustomerchat" logged_in_greeting="Bonjour, je suis Betty, votre aide en ligne. Posez-moi vos questions pratiques " logged_out_greeting="Connectez-vous à Facebook Messenger et posez-moi vos questions pratiques" page_id="322506274462149" theme_color="#3b5998">
           </div>
          </div>
         </div>
        </footer>
       </div>
      </div>
     </div>
    </div>
   </section>
  </main>
  <b style="color:black;background-color:#a0ffff">
   jnice09-ipp30-wq-zq-0230
  </b>
 </body>
</html>
|<---