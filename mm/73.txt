--->|<!DOCTYPE html>
<html class="v2" dir="ltr" lang="en">
 <head>
  <meta content="width=1100" name="viewport"/>
  <meta content="text/html; charset=utf-8" http-equiv="Content-Type"/>
  <meta content="blogger" name="generator"/>
  <meta content="[mkey1][symbolx][pkey1][symbolx][keyword1][bracketl1][bracketr1][symbolx][bracketl2][siter1][bracketr2][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx]" property="og:url"/>
  <meta content="[mkey1][symbolx][pkey1][symbolx][keyword1][bracketl1][bracketr1][symbolx][bracketl2][siter1][bracketr2][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx]" property="og:title"/>
  <meta content="[mkey1][symbolx][pkey1][symbolx][keyword1][bracketl1][bracketr1][symbolx][bracketl2][siter1][bracketr2][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx]" property="og:description"/>
  <title>
   [mkey1][symbolx][pkey1][symbolx][keyword1][bracketl1][bracketr1][symbolx][bracketl2][siter1][bracketr2][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx]
  </title>
  <meta content="[mkey1][symbolx][pkey1][symbolx][keyword1][bracketl1][bracketr1][symbolx][bracketl2][siter1][bracketr2][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx]" name="keywords"/>
  <meta content="[mkey1][symbolx][pkey1][symbolx][keyword1][bracketl1][bracketr1][symbolx][bracketl2][siter1][bracketr2][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx]" name="description"/>
  <noscript>
  </noscript>
 </head>
 <body class="loading variant-wide">
  <div class="navbar section" id="navbar" name="Navbar">
   <div class="widget Navbar" data-version="1" id="Navbar1">
    <div id="navbar-iframe-container">
    </div>
   </div>
  </div>
  <div class="body-fauxcolumns">
   <div class="fauxcolumn-outer body-fauxcolumn-outer">
    <div class="cap-top">
     <div class="cap-left">
     </div>
     <div class="cap-right">
     </div>
    </div>
    <div class="fauxborder-left">
     <li>[keywordx][symbolx][keywordx][symbolx][bracketl6][keywordx][bracketr6][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx]</li><li>[link]</li><li>[keywordx][symbolx][keywordx][symbolx][bracketl7][keywordx][bracketr7][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx]</li>[keywordx][symbolx][keywordx][symbolx][bracketl8][keywordx][bracketr8][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx]
    </div>
    <div class="cap-bottom">
     <div class="cap-left">
     </div>
     <div class="cap-right">
     </div>
    </div>
   </div>
  </div>
  <div class="content">
   <div class="content-fauxcolumns">
    <div class="fauxcolumn-outer content-fauxcolumn-outer">
     <div class="cap-top">
      <div class="cap-left">
      </div>
      <div class="cap-right">
      </div>
     </div>
     <div class="fauxborder-left">
      <div class="fauxborder-right">
      </div>
      <div class="fauxcolumn-inner">
      </div>
     </div>
     <div class="cap-bottom">
      <div class="cap-left">
      </div>
      <div class="cap-right">
      </div>
     </div>
    </div>
   </div>
   <div class="content-outer">
    <div class="content-cap-top cap-top">
     <div class="cap-left">
     </div>
     <div class="cap-right">
     </div>
    </div>
    <div class="fauxborder-left content-fauxborder-left">
     <div class="fauxborder-right content-fauxborder-right">
     </div>
     <div class="content-inner">
      <header>
       <div class="header-outer">
        <div class="header-cap-top cap-top">
         <div class="cap-left">
         </div>
         <div class="cap-right">
         </div>
        </div>
        <div class="fauxborder-left header-fauxborder-left">
         <div class="fauxborder-right header-fauxborder-right">
         </div>
         <div class="region-inner header-inner">
          <div class="header section" id="header" name="Header">
           <div class="widget Header" data-version="1" id="Header1">
            <div id="header-inner">
             <div class="titlewrapper">
              <h1 class="title">
               <b>[mkey1][symbolx][pkey1][symbolx][keyword1][bracketl1][bracketr1][symbolx][bracketl2][siter1][bracketr2][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx]</b>
              </h1>
             </div>
             <div class="descriptionwrapper">
              <p class="description">
               <span>
                Things I notice while studying the Korean language
               </span>
              </p>
             </div>
            </div>
           </div>
          </div>
         </div>
        </div>
        <div class="header-cap-bottom cap-bottom">
         <div class="cap-left">
         </div>
         <div class="cap-right">
         </div>
        </div>
       </div>
      </header>
      <div class="tabs-outer">
       <div class="tabs-cap-top cap-top">
        <div class="cap-left">
        </div>
        <div class="cap-right">
        </div>
       </div>
       <div class="fauxborder-left tabs-fauxborder-left">
        <div class="fauxborder-right tabs-fauxborder-right">
        </div>
        <div class="region-inner tabs-inner">
         <div class="tabs no-items section" id="crosscol" name="Cross-Column">
         </div>
         <div class="tabs no-items section" id="crosscol-overflow" name="Cross-Column 2">
         </div>
        </div>
       </div>
       <div class="tabs-cap-bottom cap-bottom">
        <div class="cap-left">
        </div>
        <div class="cap-right">
         [content8][content9][linkx][content10][linkx][content11][content12]<li>[keywordx][symbolx][keywordx][symbolx][bracketl1][keywordx][bracketr1][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx]</li>[keywordx][symbolx][keywordx][symbolx][bracketl2][keywordx][bracketr2][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][link][link]
        </div>
       </div>
      </div>
      <div class="main-outer">
       <div class="main-cap-top cap-top">
        <div class="cap-left">
        </div>
        <div class="cap-right">
        </div>
       </div>
       <div class="fauxborder-left main-fauxborder-left">
        <div class="fauxborder-right main-fauxborder-right">
        </div>
        <div class="region-inner main-inner">
         <div class="columns fauxcolumns">
          <div class="fauxcolumn-outer fauxcolumn-center-outer">
           <div class="cap-top">
            <div class="cap-left">
            </div>
            <div class="cap-right">
            </div>
           </div>
           <div class="fauxborder-left">
            <div class="fauxborder-right">
            </div>
            <div class="fauxcolumn-inner">
            </div>
           </div>
           <div class="cap-bottom">
            <div class="cap-left">
             [content8][content9][linkx]
            </div>
            <div class="cap-right">
            </div>
           </div>
          </div>
          <div class="fauxcolumn-outer fauxcolumn-left-outer">
           <div class="cap-top">
            <div class="cap-left">
            </div>
            <div class="cap-right">
            </div>
           </div>
           <div class="fauxborder-left">
            <div class="fauxborder-right">
            </div>
            <div class="fauxcolumn-inner">
            </div>
           </div>
           <div class="cap-bottom">
            <div class="cap-left">
            </div>
            <div class="cap-right">
            </div>
           </div>
          </div>
          <div class="fauxcolumn-outer fauxcolumn-right-outer">
           <div class="cap-top">
            <div class="cap-left">
            </div>
            <div class="cap-right">
            </div>
           </div>
           <div class="fauxborder-left">
            <div class="fauxborder-right">
            </div>
            <div class="fauxcolumn-inner">
            </div>
           </div>
           <div class="cap-bottom">
            <div class="cap-left">
            </div>
            <div class="cap-right">
            </div>
           </div>
          </div>
          <div class="columns-inner">
           <div class="column-center-outer">
            <div class="column-center-inner">
             <div class="main section" id="main" name="Main">
              <div class="widget Blog" data-version="1" id="Blog1">
               <div class="blog-posts hfeed">
                <div class="date-outer">
                 <h2 class="date-header">
                  [mkey1][symbolx][pkey1][symbolx][keyword1][bracketl1][bracketr1][symbolx][bracketl2][siter1][bracketr2][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx]
                 </h2>
                 <div class="date-posts">
                  <div class="post-outer">
                   <div class="post hentry uncustomized-post-template" itemprop="blogPost" itemscope="itemscope" itemtype="http://schema.org/BlogPosting">
                    <meta content="9424060" itemprop="blogId"/>
                    <meta content="1091290421452876884" itemprop="postId"/>
                    [linkx]
                    
                    <h3 class="post-title entry-title" itemprop="name">
                     [mkey1][symbolx][pkey1][symbolx][keyword1][bracketl1][bracketr1][symbolx][bracketl2][siter1][bracketr2][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx]
                    </h3>
                    <div class="post-header">
                     <div class="post-header-line-1">
                     </div>
                    </div>
                    <div class="post-body entry-content" id="post-body-1091290421452876884" itemprop="description articleBody">
                     <b>
                      ANSWER:
                     </b>
                     a father who dotes on his daughter
                     <br/>
                     <br/>
                     딸바보 literally means "daughter's (딸) fool (바보)." It is a cute slang expression used to describe a father who loves his daughter so much that he often indulges her.
                     <br/>
                     <br/>
                     For a good list of Korean internet slang expressions, go
                     [ahref]
                     
                     .
                     <br/>
                     <br/>
                     Here are a few more from the list. I may add more later.
                     <br/>
                     <br/>
                     <ul>
                      <li>
                       <b>
                        <span style="color: #783f04;">
                         검은 머리 외국인
                        </span>
                       </b>
                       "a black-haired foreigner": It refers to foreign nationals with Korean ancestry, such as Korean-Americans. For many Koreans, the stereotypical foreigner has blue eyes and blond hair, not the brown eyes and black hair that most Koreans have.
                       <br/>
                      </li>
                      <li>
                       <b>
                        <span style="color: #783f04;">
                         귀요미
                        </span>
                       </b>
                       "cute; cute person": 귀엽다 is an adjective that means
                       <i>
                        cute
                       </i>
                       or
                       <i>
                        pretty
                       </i>
                       , and 귀염 is a noun form of that adjective. When the pure Korean suffix 이--which can mean
                       <i>
                        person
                       </i>
                       ,
                       <i>
                        animal
                       </i>
                       , or
                       <i>
                        thing
                       </i>
                       --is added to 귀염, it becomes 귀염이, which means 귀여운 사람 and can be translated as
                       <i>
                        a cute person
                       </i>
                       or
                       <i>
                        a cutie,
                       </i>
                       though Koreans would normally say 귀염둥이. When 귀염이 is pronounced, it is pronounced as /귀여미/, but for this slang term, the 여 is changed to the stronger 요 sound for greater emphasis, resulting in 귀요미. It can also be made into an adjective by adding -하다 to form 귀요미하다. Therefore, instead of using 귀여운 삼람 to refer to
                       <i>
                        a cute person[content1[linkx]content2[linkx]content3]
                       </i>
                       , you can also use either 귀요미 or 귀요미한 사람, but remember that the latter two are considered slang.
                       <br/>
                      </li>
                      <li>
                       <b>
                        <span style="color: #783f04;">
                         꿀잼
                        </span>
                       </b>
                       "sweet fun": 꿀 means
                       <i>
                        honey
                       </i>
                       or
                       <i>
                        sweet
                       </i>
                       , but here "sweet" is being used in a similar way that many Americans use "sweet" to mean
                       <i>
                        very good
                       </i>
                       or
                       <i>
                        extremely good
                       </i>
                       . 잼 is a reduced form of the pure Korean word 재미,which means
                       <i>
                        fun
                       </i>
                       or
                       <i>
                        interesting,
                       </i>
                       so 꿀쨈 literally means "
                       <i>
                        extremely good
                       </i>
                       (꿀)
                       <i>
                        fun
                       </i>
                       (잼)" or
                       <i>
                        extremely interesting
                       </i>
                       , which is usually expressed in Korean as 아주 재미있다, or by younger Koreans as 완전 재미있다. Younger Koreans seem to use 완전 as an adverb (완전히) meaning
                       <i>
                        totally
                       </i>
                       , similar to how some Americans use "totally" to mean
                       <i>
                        very
                       </i>
                       or
                       <i>
                        extremely
                       </i>
                       . By the way, 꿀잼 should be pronounced as /꿀쨈/ because of the influence of the preceding ㄹ.
                       <br/>
                      </li>
                      <li>
                       <span style="color: #783f04;">
                        <b>
                         네가지
                        </b>
                       </span>
                       "ill-mannered": 네가지 means 싸가지, which is also slang. The 싸 is 싸가지 sounds similar enough to the Sino-Korean word for
                       <i>
                        four
                       </i>
                       (사) that it is replaced with the pure Korean word for
                       <i>
                        four
                       </i>
                       (네) to slyly hide its negative meaning, which is
                       <i>
                        ill-mannered
                       </i>
                       or
                       <i>
                        ill-bred
                       </i>
                       . Actually, 싸가지 comes from 싹수, which means
                       <i>
                        good omen
                       </i>
                       or
                       <i>
                        promising
                       </i>
                       , but Koreans almost always say 싸가지 없다, not 싸가지 있다, unless they are joking, so when they just say 싸가지, they mean 싸가지 없다,  which is similar in meaning to 버릇없다 or 인정머리 없다.
                       <br/>
                       <br/>
                       The word 싹수 can be reduced to 싹, so 싹 can also mean
                       <i>
                        good omen
                       </i>
                       or
                       <i>
                        promising
                       </i>
                       , but 싹 is also the pure Korean word for
                       <i>
                        sprout
                       </i>
                       , so 싹 있다 can also mean, "There are sprouts," something a Korean farmer might say when he sees his crops sprouting in his field, which would be a
                       <i>
                        promising sign
                       </i>
                       or
                       <i>
                        good omen
                       </i>
                       , and this may be the origin of 싹수 있다.
                       <br/>
                       <br/>
                       The pure Korean suffix -아지 can be attached to certain nouns to degrade or belittle those nouns, so if Korean farmers see their fields sprouting, they would likely be happy and say, 싹 있다, "There are sprouts," but if they do not see their fields sprouting, they would likely be unhappy and might belittle their unsprouted sprouts by saying, "싹아지 없다," which is pronounced as /싸가지 없다/ and translated as "There are no damn sprouts."
                       <br/>
                      </li>
                      <li>
                       <b>
                        <span style="color: #783f04;">
                         노잼
                        </span>
                       </b>
                       "boring": 노잼 is a combination of the sound of the English word "no" and a reduced form of the Korean word "재미," which means
                       <i>
                        fun
                       </i>
                       or
                       <i>
                        interesting
                       </i>
                       , so 노잼 literally means "
                       <i>
                        no
                       </i>
                       (노)
                       <i>
                        fun
                       </i>
                       (잼)" or
                       <i>
                        not interesting
                       </i>
                       . Koreans would normally say, 재미 없다.
                       <br/>
                      </li>
                      <li>
                       <b>
                        <span style="color: #783f04;">
                         몸짱
                        </span>
                       </b>
                       "the best body": 몸 means
                       <i>
                        body
                       </i>
                       , and 짱 supposedly comes from the Chinese character 將 (장), which means
                       <i>
                        general
                       </i>
                       or
                       <i>
                        leader
                       </i>
                       . Supposedly, 장 was changed to 짱 just to give it more force or emphasis. Therefore, 몸짱 would literally translate as "body (몸) leader (짱)."
                       <br/>
                       <br/>
                       Personally, I wonder if 짱 may have come from 가장, which means
                       <i>
                        the most
                       </i>
                       , so 몸짱 in Korean would mean 몸이 가장, just the first part of the intended phrase. Listeners would be expected to complete the phrase in their minds, which would be 몸이 가장 예쁜 여자, "a woman with the most beautiful body." And maybe the 장 in 가장 changed to 짱 to compensate for dropping the 가.
                       <br/>
                       <br/>
                       Anyway, regardless of its origin, the suffix -짱 means something like
                       <i>
                        the best
                       </i>
                       or
                       <i>
                        the leader
                       </i>
                       . 짱 can also be attached to certain other words, including 싸움짱 or 쌈짱 (
                       <i>
                        the best fighter
                       </i>
                       ), 힘짱 (
                       <i>
                        the strongest person
                       </i>
                       ), or 공부짱 (
                       <i>
                        the best studier / the best student
                       </i>
                       ).
                       <br/>
                      </li>
                      <li>
                       <b>
                        <span style="color: #783f04;">
                         반품남 / 반품녀
                        </span>
                       </b>
                       "divorced man / divorced woman": 반품 means
                       <i>
                        returned merchandise
                       </i>
                       , so 반품남 literally means
                       <i>
                        a man who is returned merchandize
                       </i>
                       , which means his wife no longer wanted him and got a divorce. 반품녀 literally means
                       <i>
                        a woman who is returned merchandise
                       </i>
                       , which is slang for
                       <i>
                        a divorced woman
                       </i>
                       .
                       <br/>
                      </li>
                      <li>
                       <span style="color: #783f04;">
                        <b>
                         양이집사 / 양집사
                        </b>
                       </span>
                       "a cat butler": These two slang words are shortened versions of 고양이 집사, which literally means "
                       <i>
                        cat
                       </i>
                       (고양이)
                       <i>
                        butler
                       </i>
                       (집사)." It refers to a person with a pet cat that often seems more like the master of the house than its owner, who seems more like the "cat's butler."
                       [ahref]
                       
                      </li>
                      <li>
                       <b>
                        <span style="color: #783f04;">
                         품절남 / 품절녀
                        </span>
                       </b>
                       <span style='background-color: transparent; color: black; display: inline; float: none; font-family: "times new roman"; font-size: 16px; font-style: normal; font-variant: normal; font-weight: 400; letter-spacing: normal; text-align: left; text-decoration: none; text-indent: 0px; text-transform: none; white-space: normal; word-spacing: 0px;'>
                        "married man / married woman": 품절 means
                       </span>
                       <i style='background-color: transparent; color: black; font-family: "times new roman"; font-style: italic; font-variant: normal; font-weight: 400; letter-spacing: normal; text-align: left; text-decoration: none; text-indent: 0px; text-transform: none; white-space: normal; word-spacing: 0px;'>
                        sold-out
                       </i>
                       <span style='background-color: transparent; color: black; display: inline; float: none; font-family: "times new roman"; font-size: 16px; font-style: normal; font-variant: normal; font-weight: 400; letter-spacing: normal; text-align: left; text-decoration: none; text-indent: 0px; text-transform: none; white-space: normal; word-spacing: 0px;'>
                        or
                       </span>
                       <i style='background-color: transparent; color: black; font-family: "times new roman"; font-style: italic; font-variant: normal; font-weight: 400; letter-spacing: normal; text-align: left; text-decoration: none; text-indent: 0px; text-transform: none; white-space: normal; word-spacing: 0px;'>
                        out-of-stock
                       </i>
                       <span style='background-color: transparent; color: black; display: inline; float: none; font-family: "times new roman"; font-size: 16px; font-style: normal; font-variant: normal; font-weight: 400; letter-spacing: normal; text-align: left; text-decoration: none; text-indent: 0px; text-transform: none; white-space: normal; word-spacing: 0px;'>
                        , such as a product in a store, so 품절남 literally means "
                        <i>
                         an out-of-stock
                        </i>
                        (품절)
                        <i>
                         man
                        </i>
                        (남)," which refers to a man who is already married and, therefore, unavailable for a romantic relationship. 품절녀 literally means "
                        <i>
                         an out-of-stock
                        </i>
                        (품절)
                        <i>
                         woman
                        </i>
                        (녀)," which is slang for
                        <i>
                         a married woman
                        </i>
                        .
                        <br/>
                       </span>
                       <b>
                       </b>
                       <i>
                       </i>
                       <u>
                       </u>
                       <sub>
                       </sub>
                       <sup>
                       </sup>
                       <strike>
                       </strike>
                      </li>
                      <li>
                       <b>
                        <span style="color: #783f04;">
                         핵꿀팁
                        </span>
                       </b>
                       "very good tip": 핵 means
                       <i>
                        nuclear
                       </i>
                       , 꿀 means
                       <i>
                        honey
                       </i>
                       , and 팁 comes from the English word "tip," which means
                       <i>
                        a piece of advice
                       </i>
                       . Honey is sweet and very good, so 꿀팁 can be translated as
                       <i>
                        a sweet tip
                       </i>
                       or
                       <i>
                        a very good tip
                       </i>
                       . Koreans seem to use 꿀 the same way many Americans use "sweet" to mean
                       <i>
                        very good
                       </i>
                       or
                       <i>
                        extremely good
                       </i>
                       . A nuclear explosion is an extreme event, so 핵 is being used here as an adverb meaning
                       <i>
                        extremely
                       </i>
                       or
                       <i>
                        very
                       </i>
                       . Therefore, 핵꿀팁 can translate as "
                       <i>
                        extremely
                       </i>
                       (핵)
                       <i>
                        good
                       </i>
                       (꿀)
                       <i>
                        tip
                       </i>
                       (팁). On your Facebook page, for example, if you wanted to list in Korean
                       <i>
                        ten great tips
                       </i>
                       for doing something, you could title the list as "핵꿀팁 10개."
                      </li>
                     </ul>
                     <br/>
                     <div style="clear: both;">
                     </div>
                    </div>
                    <div class="post-footer">
                     <div class="post-footer-line post-footer-line-1">
                      <span class="post-author vcard">
                       Posted by
                       <span class="fn" itemprop="author" itemscope="itemscope" itemtype="http://schema.org/Person">
                        <meta content="[mkey1][symbolx][pkey1][symbolx][keyword1][bracketl1][bracketr1][symbolx][bracketl2][siter1][bracketr2][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx]" itemprop="url"/>
                        [ahref]
                        
                       </span>
                      </span>
                      <span class="post-timestamp">
                       at
                       <meta content="[mkey1][symbolx][pkey1][symbolx][keyword1][bracketl1][bracketr1][symbolx][bracketl2][siter1][bracketr2][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx]" itemprop="url"/>
                       [linkx]
                       
                      </span>
                      <span class="reaction-buttons">
                       <table border="0" cellpadding="0" cellspacing="0" width="100%">
                        <tr>
                         <td class="reactions-label-cell" nowrap="nowrap" valign="top" width="1%">
                          <span class="reactions-label">
                           Reactions:
                          </span>
                         </td>
                         <td>
                          <iframe allowtransparency="true" class="reactions-iframe" frameborder="0" name="reactions" scrolling="no" src="https://www.blogger.com/blog-post-reactions.g?options=%5BHelpful%5D&amp;textColor=%23666666#https://koreanlanguagenotes.blogspot.com/2018/09/what-does-mean_8.html">
                          </iframe>
                         </td>
                        </tr>
                       </table>
                      </span>
                      <span class="post-comment-link">
                      </span>
                      <span class="post-backlinks post-comment-link">
                      </span>
                      <span class="post-icons">
                       <span class="item-action">
                        [ahref]
                        
                       </span>
                       <span class="item-control blog-admin pid-440086206">
                        <a href="/post-edit.g?blogID=9424060&amp;postID=1091290421452876884&amp;from=pencil" title="Edit Post">
                        </a>
                       </span>
                      </span>
                      <div class="post-share-buttons goog-inline-block">
                       [linkx]
                       
                       <a class="goog-inline-block share-button sb-blog" href="/share-post.g?blogID=9424060&amp;postID=1091290421452876884&amp;target=blog" onclick='window.open(this.href, "_blank", "height=270,width=475"); return false;' target="_blank" title="BlogThis!">
                        <span class="share-button-link-text">
                         BlogThis!
                        </span>
                       </a>
                       [ahref]
                       
                       [linkx]
                       
                       [linkx]
                       
                      </div>
                     </div>
                     <div class="post-footer-line post-footer-line-2">
                      <span class="post-labels">
                      </span>
                     </div>
                     <div class="post-footer-line post-footer-line-3">
                      <span class="post-location">
                      </span>
                     </div>
                    </div>
                   </div>
                   <div class="comments" id="comments">
                    [ahref]
                    
                    <h4>
                     No comments:
                    </h4>
                    <div id="Blog1_comments-block-wrapper">
                     <dl class="avatar-comment-indent" id="comments-block">
                     </dl>
                    </div>
                    <p class="comment-footer">
                     <div class="comment-form">
                      [ahref]
                      
                      <h4 id="comment-post-message">
                       Post a Comment
                      </h4>
                      <p>
                      </p>
                      [linkx]
                      
                      <iframe allowtransparency="true" class="blogger-iframe-colorize blogger-comment-from-post" frameborder="0" height="410px" id="comment-editor" name="comment-editor" src="" width="100%">
                      </iframe>
                     </div>
                    </p>
                    <div id="backlinks-container">
                     <div id="Blog1_backlinks-container">
                      [linkx]
                      
                      <h4>
                      </h4>
                      <p class="comment-footer">
                       [linkx]
                       
                      </p>
                     </div>
                    </div>
                   </div>
                  </div>
                 </div>
                </div>
               </div>
               <div class="blog-pager" id="blog-pager">
                <span id="blog-pager-newer-link">
                 [linkx]
                 
                </span>
                <span id="blog-pager-older-link">
                 [ahref]
                 
                </span>
                [ahref]
                
               </div>
               <div class="clear">
               </div>
               <div class="post-feeds">
                <div class="feed-links">
                 Subscribe to:
                 [linkx]
                 
                </div>
               </div>
              </div>
             </div>
            </div>
           </div>
           <div class="column-left-outer">
            <div class="column-left-inner">
             <aside>
              <div class="sidebar section" id="sidebar-left-1">
               [link][keywordx][symbolx][keywordx][symbolx][bracketl3][keywordx][bracketr3][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][bracketl4][keywordx][bracketr4][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx]<li>[link]</li><li>[link]</li>[link][link][link]
              </div>
             </aside>
            </div>
           </div>
           <div class="column-right-outer">
            <div class="column-right-inner">
             <aside>
             </aside>
            </div>
           </div>
          </div>
          <div style="clear: both">
          </div>
         </div>
        </div>
       </div>
       <div class="main-cap-bottom cap-bottom">
        <div class="cap-left">
        </div>
        <div class="cap-right">
        </div>
       </div>
      </div>
      <footer>
       <div class="footer-outer">
        <div class="footer-cap-top cap-top">
         <div class="cap-left">
         </div>
         <div class="cap-right">
         </div>
        </div>
        <div class="fauxborder-left footer-fauxborder-left">
         <div class="fauxborder-right footer-fauxborder-right">
         </div>
         <div class="region-inner footer-inner">
          <div class="foot no-items section" id="footer-1">
          </div>
          <table border="0" cellpadding="0" cellspacing="0" class="section-columns columns-2">
           <tbody>
            <tr>
             <td class="first columns-cell">
              <div class="foot no-items section" id="footer-2-1">
              </div>
             </td>
             <td class="columns-cell">
              <div class="foot no-items section" id="footer-2-2">
              </div>
             </td>
            </tr>
           </tbody>
          </table>
          <div class="foot section" id="footer-3" name="Footer">
           <div class="widget Attribution" data-version="1" id="Attribution1">
            <div class="widget-content" style="text-align: center;">
             Simple theme. Theme images by
             [linkx]
              <li>[link]</li><li>[link]</li><li>[keywordx][symbolx][keywordx][symbolx][bracketl5][keywordx][bracketr5][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx]</li>
             
             . Powered by
             <a href="m" target="_blank">
              Blogger
             </a>
             .
            </div>
            <div class="clear">
            </div>
            <span class="widget-item-control">
             <span class="item-control blog-admin">
              [ahref]
              
             </span>
            </span>
            <div class="clear">
            </div>
           </div>
          </div>
         </div>
        </div>
        <div class="footer-cap-bottom cap-bottom">
         <div class="cap-left">
         </div>
         <div class="cap-right">
         </div>
        </div>
       </div>
      </footer>
     </div>
    </div>
    <div class="content-cap-bottom cap-bottom">
     <div class="cap-left">
     </div>
     <div class="cap-right">
     </div>
    </div>
   </div>
  </div>
  <b style="color:black;background-color:#a0ffff">
   jnice09-ipp30-wq-zq-0076
  </b>
 </body>
</html>|<---