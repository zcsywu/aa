--->|<!DOCTYPE html>
<html class="client-nojs" dir="ltr" lang="ko">
 <head>
  <meta charset="utf-8"/>
  <title>
   [mkey1][symbolx][pkey1][symbolx][keyword1][bracketl1][bracketr1][symbolx][bracketl2][siter1][bracketr2][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx]
  </title>
  <meta content="" name="ResourceLoaderDynamicStyles"/>
  <meta content="MediaWiki 1.31.2" name="generator"/>
  <meta content="[mkey1][symbolx][pkey1][symbolx][keyword1][bracketl1][bracketr1][symbolx][bracketl2][siter1][bracketr2][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx]" name="description"/>
  <meta content="[mkey1][symbolx][pkey1][symbolx][keyword1][bracketl1][bracketr1][symbolx][bracketl2][siter1][bracketr2][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx]" name="keywords"/>
  <meta content="[mkey1][symbolx][pkey1][symbolx][keyword1][bracketl1][bracketr1][symbolx][bracketl2][siter1][bracketr2][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx]" property="og:title"/>
  <meta content="website" property="og:type"/>
  <meta content="https://gamepedia.cursecdn.com/minecraft_ko_gamepedia/b/bc/Wiki.png?version=2ef7cae78dfce8c991f568461b72add7" property="og:image"/>
  <meta content="[mkey1][symbolx][pkey1][symbolx][keyword1][bracketl1][bracketr1][symbolx][bracketl2][siter1][bracketr2][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx]" property="og:url"/>
  <meta content="[mkey1][symbolx][pkey1][symbolx][keyword1][bracketl1][bracketr1][symbolx][bracketl2][siter1][bracketr2][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx]" property="og:site_name"/>
  <meta content="width=device-width, initial-scale=1" name="viewport"/>
  <meta content="Gamepedia" itemprop="author"/>
 </head>
 <body class="mediawiki ltr sitedir-ltr mw-hide-empty-elt ns-0 ns-subject page-도구 rootpage-도구 skin-hydra action-view site-minecraft-gamepedia show-ads">
  <div id="netbar">
   <div class="netbar-flex">
    <div class="netbar-box left logo">
     [ahref]
     
    </div>
    <div class="netbar-box left">
     [ahref]
     
    </div>
    <div class="netbar-box left officialwiki">
     <a href="/index.php?title=Special:AllSites&amp;filter=official">
     </a>
    </div>
    <div class="netbar-spacer">
    </div>
    <div class="netbar-box right">
     [linkx]
     
    </div>
    <div class="netbar-box right">
     [ahref]
     
    </div>
   </div>
  </div>
  <div class="with-siderail" id="global-wrapper">
   <div class="noprint" id="mw-page-base">
   </div>
   <div class="noprint" id="mw-head-base">
   </div>
   <div id="pageWrapper">
    <div class="mw-body" id="content" itemprop="articleBody" role="main">
     [ahref]
     
     <div class="mw-body-content" id="siteNotice">
      <div dir="ltr" id="localNotice" lang="ko">
       <div class="mw-parser-output">
        <div class="bigsign" style="text-align:center; line-height:100%; display: inline-block">
         <p>
          새로 오신 분들은
          [ahref]
          
          를 꼭 읽어주세요.
         </p>
         <p>
          문서의
          [ahref]
          
          ·
          [linkx]
          
          과
          [ahref]
          
          을 도와주시면 마인크래프트 위키에 큰 힘이 됩니다.
         </p>
        </div>
       </div>
      </div>
     </div>
     <div class="mw-indicators mw-body-content">
     </div>
     <div id="atflb">
      <div id="cdm-zone-01">
      </div>
     </div>
     <h1 class="firstHeading" id="firstHeading" itemprop="name" lang="ko">
      <b>[mkey1][symbolx][pkey1][symbolx][keyword1][bracketl1][bracketr1][symbolx][bracketl2][siter1][bracketr2][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx]</b>
     </h1>
     <div class="mw-body-content" id="bodyContent">
      <div class="noprint" id="siteSub">
       Minecraft Wiki
      </div>
      <div id="contentSub">
      </div>
      <div class="mw-jump" id="jump-to-nav">
       이동:
       [linkx]
       
       ,
       [ahref]
       
      </div>
      <div class="mw-content-ltr" dir="ltr" id="mw-content-text" lang="ko">
       <div class="mw-parser-output">
        <p>
         <b>
          도구
         </b>
         (Tool)이란 플레이어가 들고 사용하면, 어떤 행동들을 더 빠르고 더 효율적으로 수행하거나, 맨손으로는 얻을 수 없는 재료를 수집할 수 있는 아이템이다. 또한 정보를 수집하는 아이템이나 완전히 새로운 행동을 수행할 수 있는 도구도 있다.
         <a href="/%EC%8B%9C%EA%B3%84" title="시계">
          시계
         </a>
         ,
         [ahref]
         
         과
         [linkx]
         
         (비었을 때)를 제외하고, 도구는 보관함에서 쌓기가 불가능하다. 도구는 수리할 수 있다. 수리에 관한 자세한 정보는
         [linkx]
         
         를 볼 것.
        </p>
        <div class="toc" id="toc">
         <div class="toctitle" dir="ltr" lang="ko">
          <h2>
           <b>[mkey1][symbolx][pkey1][symbolx][keyword1][bracketl1][bracketr1][symbolx][bracketl2][siter1][bracketr2][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx]</b>
          </h2>
         </div>
         <ul>
          <li class="toclevel-1 tocsection-1">
           <a href="5">
            <span class="tocnumber">
             1
            </span>
            <span class="toctext">
             획득 방법
            </span>
           </a>
           <ul>
            <li class="toclevel-2 tocsection-2">
             <a href="9">
              <span class="tocnumber">
               1.1
              </span>
              <span class="toctext">
               몹
              </span>
             </a>
            </li>
            <li class="toclevel-2 tocsection-3">
             [ahref]
             
            </li>
           </ul>
          </li>
          <li class="toclevel-1 tocsection-4">
           [linkx]
           
           <ul>
            <li class="toclevel-2 tocsection-5">
             [ahref]
             
            </li>
            <li class="toclevel-2 tocsection-6">
             [ahref]
             
            </li>
            <li class="toclevel-2 tocsection-7">
             [linkx]
             
            </li>
           </ul>
          </li>
          <li class="toclevel-1 tocsection-8">
           [linkx]
           
          </li>
          <li class="toclevel-1 tocsection-9">
           <a href="C">
            <span class="tocnumber">
             4
            </span>
            <span class="toctext">
             역사
            </span>
           </a>
          </li>
          <li class="toclevel-1 tocsection-10">
           [linkx]
           
          </li>
          <li class="toclevel-1 tocsection-11">
           [linkx]
           
          </li>
          <li class="toclevel-1 tocsection-12">
           <a href="0">
            <span class="tocnumber">
             7
            </span>
            <span class="toctext">
             함께 보기
            </span>
           </a>
          </li>
         </ul>
        </div>
        <h2>
         [mkey1][symbolx][pkey1][symbolx][keyword1][bracketl1][bracketr1][symbolx][bracketl2][siter1][bracketr2][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx]
        </h2>
        <h3>
         [mkey1][symbolx][pkey1][symbolx][keyword1][bracketl1][bracketr1][symbolx][bracketl2][siter1][bracketr2][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx]
        </h3>
        <div class="dablink" style="padding-top: 0.5em; padding-left: 2em; padding-bottom: 0.5em; margin-bottom: 0.5em">
         이 부분의 본문은
         <b>
          [linkx]
          
         </b>
         입니다.
        </div>
        <p>
         일부 도구는 해당 장비를 가지고 있는 몹을 죽여서 얻을 수 있다.
        </p>
        <h3>
         [mkey1][symbolx][pkey1][symbolx][keyword1][bracketl1][bracketr1][symbolx][bracketl2][siter1][bracketr2][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx]
        </h3>
        <p>
         모든 도구는 제작을 통해 얻을 수 있다.
        </p>
        <table class="wikitable sortable collapsible" data-description="제작방법">
         <tbody>
          <tr>
           <th>
            이름
           </th>
           <th>
            재료
           </th>
           <th class="unsortable">
            [ahref]
            
            방법
           </th>
           <th class="unsortable">
            설명
           </th>
          </tr>
          <tr>
           <th>
            [linkx]
            
           </th>
           <td>
            [linkx]
            
            +
            <br/>
            [ahref]
            
           </td>
           <td style="padding:1px">
            <div>
             <span class="mcui mcui-Crafting_Table">
              <span class="mcui-input">
               <span class="mcui-row">
                <span class="invslot">
                </span>
                <span class="invslot">
                </span>
                <span class="invslot">
                </span>
               </span>
               <span class="mcui-row">
                <span class="invslot">
                 <span class="invslot-item">
                  [linkx]
                  
                 </span>
                </span>
                <span class="invslot">
                 <span class="invslot-item">
                  [ahref]
                  
                 </span>
                </span>
                <span class="invslot">
                </span>
               </span>
               <span class="mcui-row">
                <span class="invslot">
                </span>
                <span class="invslot">
                </span>
                <span class="invslot">
                </span>
               </span>
              </span>
              <span class="mcui-arrow">
               <br/>
              </span>
              <span class="mcui-output">
               <span class="invslot invslot-large">
                <span class="invslot-item">
                 [ahref]
                 
                </span>
               </span>
              </span>
              <span class="mcui-icons">
               <span class="mcui-shapeless" title="이 제작법은 일정한 형태가 없으므로, 재료 아이템을 제작 격자 내의 아무 곳에 배치할 수 있습니다.">
                <br/>
               </span>
              </span>
             </span>
            </div>
           </td>
           <td>
           </td>
          </tr>
          <tr>
           <th>
            [ahref]
            
           </th>
           <td>
            손상된
            [linkx]
            
           </td>
           <td style="padding:1px">
            <div>
             <span class="mcui mcui-Crafting_Table">
              <span class="mcui-input">
               <span class="mcui-row">
                <span class="invslot">
                </span>
                <span class="invslot">
                </span>
                <span class="invslot">
                </span>
               </span>
               <span class="mcui-row">
                <span class="invslot">
                 <span class="invslot-item">
                  <a class="new" href="/index.php?title=Damaged_Flint_and_Steel&amp;action=edit&amp;redlink=1" title="Damaged Flint and Steel (없는 문서)">
                   <span class="sprite inv-sprite" style="background-image:url(/media/4/44/InvSprite.png?version=51e185f2c422dd241cb261fceaae3977);background-position:-640px -3520px" title="Flint and Steel">
                    <br/>
                   </span>
                  </a>
                 </span>
                </span>
                <span class="invslot">
                 <span class="invslot-item">
                  [linkx]
                  
                 </span>
                </span>
                <span class="invslot">
                </span>
               </span>
               <span class="mcui-row">
                <span class="invslot">
                </span>
                <span class="invslot">
                </span>
                <span class="invslot">
                </span>
               </span>
              </span>
              <span class="mcui-arrow">
               <br/>
              </span>
              <span class="mcui-output">
               <span class="invslot invslot-large">
                <span class="invslot-item">
                 [linkx]
                 
                </span>
               </span>
              </span>
              <span class="mcui-icons">
               <span class="mcui-shapeless" title="이 제작법은 일정한 형태가 없으므로, 재료 아이템을 제작 격자 내의 아무 곳에 배치할 수 있습니다.">
                <br/>
               </span>
              </span>
             </span>
            </div>
           </td>
           <td>
            부싯돌과 부시 두 개의 내구도가 합쳐진 뒤 5%의 내구도가 추가된다.
           </td>
          </tr>
          <tr>
           <th>
            [linkx]
            
           </th>
           <td>
            [linkx]
            
            +
            <br/>
            [linkx]
            
           </td>
           <td style="padding:1px">
            <div>
             <span class="mcui mcui-Crafting_Table">
              <span class="mcui-input">
               <span class="mcui-row">
                <span class="invslot">
                </span>
                <span class="invslot">
                 <span class="invslot-item">
                  <a href="/%EC%B2%A0%EA%B4%B4" title="철괴">
                   <span class="sprite inv-sprite" style="background-image:url(/media/4/44/InvSprite.png?version=51e185f2c422dd241cb261fceaae3977);background-position:-896px -3488px" title="철괴">
                    <br/>
                   </span>
                  </a>
                 </span>
                </span>
                <span class="invslot">
                </span>
               </span>
               <span class="mcui-row">
                <span class="invslot">
                 <span class="invslot-item">
                  [linkx]
                  
                 </span>
                </span>
                <span class="invslot">
                 <span class="invslot-item">
                  [linkx]
                  
                 </span>
                </span>
                <span class="invslot">
                 <span class="invslot-item">
                  [ahref]
                  
                 </span>
                </span>
               </span>
               <span class="mcui-row">
                <span class="invslot">
                </span>
                <span class="invslot">
                 <span class="invslot-item">
                  [ahref]
                  
                 </span>
                </span>
                <span class="invslot">
                </span>
               </span>
              </span>
              <span class="mcui-arrow">
               <br/>
              </span>
              <span class="mcui-output">
               <span class="invslot invslot-large">
                <span class="invslot-item">
                 <a href="/%EB%82%98%EC%B9%A8%EB%B0%98" title="나침반">
                  <span class="sprite inv-sprite" style="background-image:url(/media/4/44/InvSprite.png?version=51e185f2c422dd241cb261fceaae3977);background-position:-672px -1152px" title="나침반">
                   <br/>
                  </span>
                 </a>
                </span>
               </span>
              </span>
             </span>
            </div>
           </td>
           <td>
           </td>
          </tr>
          <tr>
           <th>
            [ahref]
            
           </th>
           <td>
            <a href="/%EC%8B%A4" title="실">
             실
            </a>
            +
            <br/>
            [linkx]
            
           </td>
           <td style="padding:1px">
            <div>
             <span class="mcui mcui-Crafting_Table">
              <span class="mcui-input">
               <span class="mcui-row">
                <span class="invslot">
                 <span class="invslot-item">
                  [linkx]
                  
                 </span>
                </span>
                <span class="invslot">
                 <span class="invslot-item">
                  [ahref]
                  
                 </span>
                </span>
                <span class="invslot">
                 [link]<li>[link]</li><li>[link]</li>
                </span>
               </span>
               <span class="mcui-row">
                <span class="invslot">
                 <span class="invslot-item">
                  <a href="/%EC%8B%A4" title="실">
                   <span class="sprite inv-sprite" style="background-image:url(/media/4/44/InvSprite.png?version=51e185f2c422dd241cb261fceaae3977);background-position:-320px -3520px" title="실">
                    <br/>
                   </span>
                  </a>
                 </span>
                </span>
                <span class="invslot">
                 <span class="invslot-item">
                  [linkx]
                  
                 </span>
                </span>
                <span class="invslot">
                </span>
               </span>
               <span class="mcui-row">
                <span class="invslot">
                </span>
                <span class="invslot">
                </span>
                <span class="invslot">
                 <span class="invslot-item">
                  [ahref]
                  
                 </span>
                </span>
               </span>
              </span>
              <span class="mcui-arrow">
               <br/>
              </span>
              <span class="mcui-output">
               <span class="invslot invslot-large">
                <span class="invslot-item">
                 [ahref]
                 
                </span>
               </span>
              </span>
             </span>
            </div>
           </td>
           <td>
           </td>
          </tr>
          <tr>
           <th>
            [linkx]
            
           </th>
           <td>
            [ahref]
            
            +
            <br/>
            [ahref]
            
           </td>
           <td style="padding:1px">
            <div>
             <span class="mcui mcui-Crafting_Table">
              <span class="mcui-input">
               <span class="mcui-row">
                <span class="invslot">
                </span>
                <span class="invslot">
                </span>
                <span class="invslot">
                 <span class="invslot-item">
                  [ahref]
                  
                 </span>
                </span>
               </span>
               <span class="mcui-row">
                <span class="invslot">
                </span>
                <span class="invslot">
                 <span class="invslot-item">
                  [linkx]
                  
                 </span>
                </span>
                <span class="invslot">
                 <span class="invslot-item">
                  [ahref]
                  
                 </span>
                </span>
               </span>
               <span class="mcui-row">
                <span class="invslot">
                 <span class="invslot-item">
                  <a href="/%EB%A7%89%EB%8C%80%EA%B8%B0" title="막대기">
                   <span class="sprite inv-sprite" style="background-image:url(/media/4/44/InvSprite.png?version=51e185f2c422dd241cb261fceaae3977);background-position:-608px -1120px" title="막대기">
                    <br>
                     [keywordx][symbolx][keywordx][symbolx][bracketl9][keywordx][bracketr9][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx]<li>[link]</li>[keywordx][symbolx][keywordx][symbolx][bracketl10][keywordx][bracketr10][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx]<li>[keywordx][symbolx][keywordx][symbolx][bracketl11][keywordx][bracketr11][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx]</li><li>[link]</li>
                    </br>
                   </span>
                  </a>
                 </span>
                </span>
                <span class="invslot">
                </span>
                <span class="invslot">
                 <span class="invslot-item">
                  [linkx]
                  
                 </span>
                </span>
               </span>
              </span>
              <span class="mcui-arrow">
               <br/>
              </span>
              <span class="mcui-output">
               <span class="invslot invslot-large">
                <span class="invslot-item">
                 [ahref]
                 
                </span>
               </span>
              </span>
             </span>
            </div>
           </td>
           <td>
           </td>
          </tr>
          <tr>
           <th>
            [linkx]
            
           </th>
           <td>
            손상된
            [linkx]
            
           </td>
           <td style="padding:1px">
            <div>
             <span class="mcui mcui-Crafting_Table">
              <span class="mcui-input">
               <span class="mcui-row">
                <span class="invslot">
                </span>
                <span class="invslot">
                </span>
                <span class="invslot">
                </span>
               </span>
               <span class="mcui-row">
                <span class="invslot">
                 <span class="invslot-item">
                  [ahref]
                  
                 </span>
                </span>
                <span class="invslot">
                 <span class="invslot-item">
                  [linkx]
                  
                 </span>
                </span>
                <span class="invslot">
                </span>
               </span>
               <span class="mcui-row">
                <span class="invslot">
                </span>
                <span class="invslot">
                </span>
                <span class="invslot">
                </span>
               </span>
              </span>
              <span class="mcui-arrow">
               <br/>
              </span>
              <span class="mcui-output">
               <span class="invslot invslot-large">
                <span class="invslot-item">
                 [ahref]
                 
                </span>
               </span>
              </span>
              <span class="mcui-icons">
               <span class="mcui-shapeless" title="이 제작법은 일정한 형태가 없으므로, 재료 아이템을 제작 격자 내의 아무 곳에 배치할 수 있습니다.">
                <br/>
               </span>
              </span>
             </span>
            </div>
           </td>
           <td>
            두 낚시대의 내구도가 합쳐지고, 추가로 5%의 내구도가 추가된다.
           </td>
          </tr>
          <tr>
           <th>
            [ahref]
            
           </th>
           <td>
            모든
            [ahref]
            
            또는
            <br/>
            [ahref]
            
            또는
            <br/>
            <a href="/%EC%B2%A0%EA%B4%B4" title="철괴">
             철괴
            </a>
            또는
            <br/>
            <a href="/%EA%B8%88%EA%B4%B4" title="금괴">
             금괴
            </a>
            또는
            <br/>
            [ahref]
            
            +
            <br/>
            <a href="/%EB%A7%89%EB%8C%80%EA%B8%B0" title="막대기">
             막대기
            </a>
           </td>
           <td style="padding:1px">
            <div>
             <span class="mcui mcui-Crafting_Table">
              [content7[linkx]content8[linkx]content9[linkx]content10]
             </span>
            </div>
           </td>
           <td>
           </td>
          </tr>
          <tr>
           <th>
            [linkx]
            
           </th>
           <td>
            손상된 일치하는
            <a href="/%EA%B3%A1%EA%B4%AD%EC%9D%B4" title="곡괭이">
             곡괭이
            </a>
           </td>
           <td style="padding:1px">
            <div>
             <span class="mcui mcui-Crafting_Table">
              <span class="mcui-input">
               <span class="mcui-row">
                <span class="invslot">
                </span>
                <span class="invslot">
                </span>
                <span class="invslot">
                </span>
               </span>
               <span class="mcui-row">
                <span class="invslot animated">
                 <span class="invslot-item animated-active">
                  [ahref]
                  
                 </span>
                 <span class="invslot-item">
                  [ahref]
                  
                 </span>
                 <span class="invslot-item">
                  [ahref]
                  
                 </span>
                 <span class="invslot-item">
                  [linkx]
                  
                 </span>
                 <span class="invslot-item">
                  [linkx]
                  
                 </span>
                </span>
                <span class="invslot animated">
                 <span class="invslot-item animated-active">
                  [linkx]
                  
                 </span>
                 <span class="invslot-item">
                  [ahref]
                  
                 </span>
                 <span class="invslot-item">
                  [ahref]
                  
                 </span>
                 <span class="invslot-item">
                  [ahref]
                  
                 </span>
                 <span class="invslot-item">
                  [linkx]
                  
                 </span>
                </span>
                <span class="invslot">
                </span>
               </span>
               <span class="mcui-row">
                <span class="invslot">
                </span>
                <span class="invslot">
                </span>
                <span class="invslot">
                </span>
               </span>
              </span>
              <span class="mcui-arrow">
               <br/>
              </span>
              <span class="mcui-output">
               <span class="invslot animated invslot-large">
                <span class="invslot-item animated-active" data-minetip-text="/&amp;7When in main hand:/&amp;#160;&amp;21.2 Attack Speed/&amp;#160;&amp;22 Attack Damage">
                 <a href="/%EA%B3%A1%EA%B4%AD%EC%9D%B4" title="곡괭이">
                  <span class="sprite inv-sprite" style="background-image:url(/media/4/44/InvSprite.png?version=51e185f2c422dd241cb261fceaae3977);background-position:-160px -3584px" title="Wooden Pickaxe">
                   <br/>
                  </span>
                 </a>
                </span>
                <span class="invslot-item" data-minetip-text="/&amp;7When in main hand:/&amp;#160;&amp;21.2 Attack Speed/&amp;#160;&amp;23 Attack Damage">
                 [linkx]
                 
                </span>
                <span class="invslot-item" data-minetip-text="/&amp;7When in main hand:/&amp;#160;&amp;21.2 Attack Speed/&amp;#160;&amp;24 Attack Damage">
                 [ahref]
                 
                </span>
                <span class="invslot-item" data-minetip-text="/&amp;7When in main hand:/&amp;#160;&amp;21.2 Attack Speed/&amp;#160;&amp;22 Attack Damage">
                 [ahref]
                 
                </span>
                <span class="invslot-item" data-minetip-text="/&amp;7When in main hand:/&amp;#160;&amp;21.2 Attack Speed/&amp;#160;&amp;25 Attack Damage">
                 <a href="/%EA%B3%A1%EA%B4%AD%EC%9D%B4" title="곡괭이">
                  <span class="sprite inv-sprite" style="background-image:url(/media/4/44/InvSprite.png?version=51e185f2c422dd241cb261fceaae3977);background-position:-256px -3552px" title="Diamond Pickaxe">
                   <br/>
                  </span>
                 </a>
                </span>
               </span>
              </span>
              <span class="mcui-icons">
               <span class="mcui-shapeless" title="이 제작법은 일정한 형태가 없으므로, 재료 아이템을 제작 격자 내의 아무 곳에 배치할 수 있습니다.">
                <br/>
               </span>
              </span>
             </span>
            </div>
           </td>
           <td>
            두 곡괭이의 내구도가 합쳐지고, 5% 가 추가된다.
           </td>
          </tr>
          <tr>
           <th>
            삽
           </th>
           <td>
            모든
            <a href="/%EB%82%98%EB%AC%B4_%ED%8C%90%EC%9E%90" title="나무 판자">
             나무 판자
            </a>
            또는
            <br/>
            <a href="/%EC%A1%B0%EC%95%BD%EB%8F%8C" title="조약돌">
             조약돌
            </a>
            또는
            <br/>
            [linkx]
            
            또는
            <br/>
            [ahref]
            
            또는
            <br/>
            <a href="/%EB%8B%A4%EC%9D%B4%EC%95%84%EB%AA%AC%EB%93%9C" title="다이아몬드">
             다이아몬드
            </a>
            +
            <br/>
            [linkx]
            
           </td>
           <td style="padding:1px">
            <div>
             <span class="mcui mcui-Crafting_Table">
              <span class="mcui-input">
               <span class="mcui-row">
                <span class="invslot">
                </span>
                <span class="invslot animated">
                 <span class="animated-subframe animated-active">
                  <span class="invslot-item animated-active">
                   <a class="mw-redirect" href="/%EC%B0%B8%EB%82%98%EB%AC%B4_%ED%8C%90%EC%9E%90" title="참나무 판자">
                    <span class="sprite inv-sprite" style="background-image:url(/media/4/44/InvSprite.png?version=51e185f2c422dd241cb261fceaae3977);background-position:-192px -896px" title="참나무 판자">
                     <br/>
                    </span>
                   </a>
                  </span>
                  <span class="invslot-item">
                   [linkx]
                   
                  </span>
                  <span class="invslot-item">
                   [ahref]
                   
                  </span>
                  <span class="invslot-item">
                   <a class="new" href="/index.php?title=%EC%A0%95%EA%B8%80_%EB%82%98%EB%AC%B4_%ED%8C%90%EC%9E%90&amp;action=edit&amp;redlink=1" title="정글 나무 판자 (없는 문서)">
                    <span class="sprite inv-sprite" style="background-image:url(/media/4/44/InvSprite.png?version=51e185f2c422dd241cb261fceaae3977);background-position:-992px -864px" title="정글 나무 판자">
                     <br/>
                    </span>
                   </a>
                  </span>
                  <span class="invslot-item">
                   [linkx]
                   
                  </span>
                  <span class="invslot-item">
                   [linkx]
                   
                  </span>
                 </span>
                 <span class="invslot-item">
                  [ahref]
                  
                 </span>
                 <span class="invslot-item">
                  [linkx]
                  
                 </span>
                 <span class="invslot-item">
                  [ahref]
                  
                 </span>
                 <span class="invslot-item">
                  [ahref]
                  
                 </span>
                </span>
                <span class="invslot">
                </span>
               </span>
               <span class="mcui-row">
                <span class="invslot">
                </span>
                <span class="invslot">
                 <span class="invslot-item">
                  [linkx]
                  
                 </span>
                </span>
                <span class="invslot">
                </span>
               </span>
               <span class="mcui-row">
                <span class="invslot">
                </span>
                <span class="invslot">
                 <span class="invslot-item">
                  [linkx]
                  
                 </span>
                </span>
                <span class="invslot">
                </span>
               </span>
              </span>
              <span class="mcui-arrow">
               <br/>
              </span>
              <span class="mcui-output">
               <span class="invslot animated invslot-large">
                <span class="invslot-item animated-active" data-minetip-text="/&amp;7When in main hand:/&amp;#160;&amp;21 Attack Speed/&amp;#160;&amp;22.5 Attack Damage">
                 <a href="/%EC%82%BD" title="삽">
                  <span class="sprite inv-sprite" style="background-image:url(/media/4/44/InvSprite.png?version=51e185f2c422dd241cb261fceaae3977);background-position:-192px -3584px" title="Wooden Shovel">
                   <br/>
                  </span>
                 </a>
                </span>
                <span class="invslot-item" data-minetip-text="/&amp;7When in main hand:/&amp;#160;&amp;21 Attack Speed/&amp;#160;&amp;23.5 Attack Damage">
                 <a href="/%EC%82%BD" title="삽">
                  <span class="sprite inv-sprite" style="background-image:url(/media/4/44/InvSprite.png?version=51e185f2c422dd241cb261fceaae3977);background-position:-64px -3584px" title="Stone Shovel">
                   <br/>
                  </span>
                 </a>
                </span>
                <span class="invslot-item" data-minetip-text="/&amp;7When in main hand:/&amp;#160;&amp;21 Attack Speed/&amp;#160;&amp;24.5 Attack Damage">
                 [ahref]
                 
                </span>
                <span class="invslot-item" data-minetip-text="/&amp;7When in main hand:/&amp;#160;&amp;21 Attack Speed/&amp;#160;&amp;22.5 Attack Damage">
                 [ahref]
                 
                </span>
                <span class="invslot-item" data-minetip-text="/&amp;7When in main hand:/&amp;#160;&amp;21 Attack Speed/&amp;#160;&amp;25.5 Attack Damage">
                 [linkx]
                 
                </span>
               </span>
              </span>
             </span>
            </div>
           </td>
           <td>
           </td>
          </tr>
          <tr>
           <th>
            삽
           </th>
           <td>
            손상된 일치하는 삽
           </td>
           <td style="padding:1px">
            <div>
             <span class="mcui mcui-Crafting_Table">
              <span class="mcui-input">
               <span class="mcui-row">
                <span class="invslot">
                </span>
                <span class="invslot">
                </span>
                <span class="invslot">
                </span>
               </span>
               <span class="mcui-row">
                <span class="invslot animated">
                 <span class="invslot-item animated-active">
                  <a class="new" href="/index.php?title=Damaged_Wooden_Shovel&amp;action=edit&amp;redlink=1" title="Damaged Wooden Shovel (없는 문서)">
                   <span class="sprite inv-sprite" style="background-image:url(/media/4/44/InvSprite.png?version=51e185f2c422dd241cb261fceaae3977);background-position:-160px -3552px" title="Wooden Shovel">
                    <br/>
                   </span>
                  </a>
                 </span>
                 <span class="invslot-item">
                  [linkx]
                  
                 </span>
                 <span class="invslot-item">
                  <a class="new" href="/index.php?title=Damaged_Iron_Shovel&amp;action=edit&amp;redlink=1" title="Damaged Iron Shovel (없는 문서)">
                   <span class="sprite inv-sprite" style="background-image:url(/media/4/44/InvSprite.png?version=51e185f2c422dd241cb261fceaae3977);background-position:-896px -3520px" title="Iron Shovel">
                    <br/>
                   </span>
                  </a>
                 </span>
                 <span class="invslot-item">
                  [linkx]
                  
                 </span>
                 <span class="invslot-item">
                  [linkx]
                  
                 </span>
                </span>
                <span class="invslot animated">
                 <span class="invslot-item animated-active">
                  [ahref]
                  
                 </span>
                 <span class="invslot-item">
                  <a class="new" href="/index.php?title=Damaged_Stone_Shovel&amp;action=edit&amp;redlink=1" title="Damaged Stone Shovel (없는 문서)">
                   <span class="sprite inv-sprite" style="background-image:url(/media/4/44/InvSprite.png?version=51e185f2c422dd241cb261fceaae3977);background-position:-32px -3552px" title="Stone Shovel">
                    <br/>
                   </span>
                  </a>
                 </span>
                 <span class="invslot-item">
                  [ahref]
                  
                 </span>
                 <span class="invslot-item">
                  <li>[link]</li><li>[keywordx][symbolx][keywordx][symbolx][bracketl8][keywordx][bracketr8][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx]</li><li>[link]</li>[link]
                 </span>
                 <span class="invslot-item">
                  [linkx]
                  
                 </span>
                </span>
                <span class="invslot">
                </span>
               </span>
               <span class="mcui-row">
                <span class="invslot">
                </span>
                <span class="invslot">
                </span>
                <span class="invslot">
                </span>
               </span>
              </span>
              <span class="mcui-arrow">
               <br/>
              </span>
              <span class="mcui-output">
               <span class="invslot animated invslot-large">
                <span class="invslot-item animated-active" data-minetip-text="/&amp;7When in main hand:/&amp;#160;&amp;21 Attack Speed/&amp;#160;&amp;22.5 Attack Damage">
                 <a href="/%EC%82%BD" title="삽">
                  <span class="sprite inv-sprite" style="background-image:url(/media/4/44/InvSprite.png?version=51e185f2c422dd241cb261fceaae3977);background-position:-192px -3584px" title="Wooden Shovel">
                   <br/>
                  </span>
                 </a>
                </span>
                <span class="invslot-item" data-minetip-text="/&amp;7When in main hand:/&amp;#160;&amp;21 Attack Speed/&amp;#160;&amp;23.5 Attack Damage">
                 [linkx]
                 
                </span>
                <span class="invslot-item" data-minetip-text="/&amp;7When in main hand:/&amp;#160;&amp;21 Attack Speed/&amp;#160;&amp;24.5 Attack Damage">
                 <a href="/%EC%82%BD" title="삽">
                  <span class="sprite inv-sprite" style="background-image:url(/media/4/44/InvSprite.png?version=51e185f2c422dd241cb261fceaae3977);background-position:-768px -3552px" title="Iron Shovel">
                   <br/>
                  </span>
                 </a>
                </span>
                <span class="invslot-item" data-minetip-text="/&amp;7When in main hand:/&amp;#160;&amp;21 Attack Speed/&amp;#160;&amp;22.5 Attack Damage">
                 [linkx]
                 
                </span>
                <span class="invslot-item" data-minetip-text="/&amp;7When in main hand:/&amp;#160;&amp;21 Attack Speed/&amp;#160;&amp;25.5 Attack Damage">
                 [ahref]
                 
                </span>
               </span>
              </span>
              <span class="mcui-icons">
               <span class="mcui-shapeless" title="이 제작법은 일정한 형태가 없으므로, 재료 아이템을 제작 격자 내의 아무 곳에 배치할 수 있습니다.">
                <br/>
               </span>
              </span>
             </span>
            </div>
           </td>
           <td>
            두 삽의 내구도가 합쳐지고, 보너스로 5%가 추가된다.
           </td>
          </tr>
          <tr>
           <th>
            도끼
           </th>
           <td>
            모든
            [ahref]
            
            또는
            <br/>
            [ahref]
            
            또는
            <br/>
            [ahref]
            
            또는
            <br/>
            [ahref]
            
            또는
            <br/>
            [linkx]
            
            +
            <br/>
            [ahref]
            
           </td>
           <td style="padding:1px">
            <div>
             <span class="mcui mcui-Crafting_Table">
              <span class="mcui-input">
               <span class="mcui-row">
                <span class="invslot animated">
                 <span class="animated-subframe animated-active">
                  <span class="invslot-item animated-active">
                   [ahref]
                   
                  </span>
                  <span class="invslot-item">
                   [linkx]
                   
                  </span>
                  <span class="invslot-item">
                   <a class="mw-redirect" href="/%EC%9E%90%EC%9E%91%EB%82%98%EB%AC%B4_%ED%8C%90%EC%9E%90" title="자작나무 판자">
                    <span class="sprite inv-sprite" style="background-image:url(/media/4/44/InvSprite.png?version=51e185f2c422dd241cb261fceaae3977);background-position:-832px -832px" title="자작나무 판자">
                     <br/>
                    </span>
                   </a>
                  </span>
                  <span class="invslot-item">
                   <a class="new" href="/index.php?title=%EC%A0%95%EA%B8%80_%EB%82%98%EB%AC%B4_%ED%8C%90%EC%9E%90&amp;action=edit&amp;redlink=1" title="정글 나무 판자 (없는 문서)">
                    <span class="sprite inv-sprite" style="background-image:url(/media/4/44/InvSprite.png?version=51e185f2c422dd241cb261fceaae3977);background-position:-992px -864px" title="정글 나무 판자">
                     <br/>
                    </span>
                   </a>
                  </span>
                  <span class="invslot-item">
                   <a class="mw-redirect" href="/%EC%95%84%EC%B9%B4%EC%8B%9C%EC%95%84%EB%82%98%EB%AC%B4_%ED%8C%90%EC%9E%90" title="아카시아나무 판자">
                    <span class="sprite inv-sprite" style="background-image:url(/media/4/44/InvSprite.png?version=51e185f2c422dd241cb261fceaae3977);background-position:-672px -832px" title="아카시아나무 판자">
                     <br>
                      <li>[keywordx][symbolx][keywordx][symbolx][bracketl4][keywordx][bracketr4][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx]</li>[keywordx][symbolx][keywordx][symbolx][bracketl5][keywordx][bracketr5][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx]<li>[link]</li><li>[keywordx][symbolx][keywordx][symbolx][bracketl6][keywordx][bracketr6][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx]</li>[keywordx][symbolx][keywordx][symbolx][bracketl7][keywordx][bracketr7][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx]
                     </br>
                    </span>
                   </a>
                  </span>
                  <span class="invslot-item">
                   [linkx]
                   
                  </span>
                 </span>
                 <span class="invslot-item">
                  [ahref]
                  
                 </span>
                 <span class="invslot-item">
                  [ahref]
                  
                 </span>
                 <span class="invslot-item">
                  <a href="/%EA%B8%88%EA%B4%B4" title="금괴">
                   <span class="sprite inv-sprite" style="background-image:url(/media/4/44/InvSprite.png?version=51e185f2c422dd241cb261fceaae3977);background-position:-800px -3488px" title="금괴">
                    <br/>
                   </span>
                  </a>
                 </span>
                 <span class="invslot-item">
                  [ahref]
                  
                 </span>
                </span>
                <span class="invslot animated">
                 <span class="animated-subframe animated-active">
                  <span class="invslot-item animated-active">
                   [linkx]
                   
                  </span>
                  <span class="invslot-item">
                   [linkx]
                   
                  </span>
                  <span class="invslot-item">
                   [linkx]
                   
                  </span>
                  <span class="invslot-item">
                   [ahref]
                   
                  </span>
                  <span class="invslot-item">
                   [ahref]
                   
                  </span>
                  <span class="invslot-item">
                   [ahref]
                   
                  </span>
                 </span>
                 <span class="invslot-item">
                  [ahref]
                  
                 </span>
                 <span class="invslot-item">
                  <a href="/%EC%B2%A0%EA%B4%B4" title="철괴">
                   <span class="sprite inv-sprite" style="background-image:url(/media/4/44/InvSprite.png?version=51e185f2c422dd241cb261fceaae3977);background-position:-896px -3488px" title="철괴">
                    <br/>
                   </span>
                  </a>
                 </span>
                 <span class="invslot-item">
                  [ahref]
                  
                 </span>
                 <span class="invslot-item">
                  [ahref]
                  
                 </span>
                </span>
                <span class="invslot">
                </span>
               </span>
               <span class="mcui-row">
                <span class="invslot animated">
                 <span class="animated-subframe animated-active">
                  <span class="invslot-item animated-active">
                   [linkx]
                   
                  </span>
                  <span class="invslot-item">
                   <a class="mw-redirect" href="/%EA%B0%80%EB%AC%B8%EB%B9%84%EB%82%98%EB%AC%B4_%ED%8C%90%EC%9E%90" title="가문비나무 판자">
                    <span class="sprite inv-sprite" style="background-image:url(/media/4/44/InvSprite.png?version=51e185f2c422dd241cb261fceaae3977);background-position:-0px -928px" title="가문비나무 판자">
                     <br/>
                    </span>
                   </a>
                  </span>
                  <span class="invslot-item">
                   [linkx]
                   
                  </span>
                  <span class="invslot-item">
                   [linkx]
                   
                  </span>
                  <span class="invslot-item">
                   [linkx]
                   
                  </span>
                  <span class="invslot-item">
                   [ahref]
                   
                  </span>
                 </span>
                 <span class="invslot-item">
                  [ahref]
                  
                 </span>
                 <span class="invslot-item">
                  [ahref]
                  
                 </span>
                 <span class="invslot-item">
                  [ahref]
                  
                 </span>
                 <span class="invslot-item">
                  <a href="/%EB%8B%A4%EC%9D%B4%EC%95%84%EB%AA%AC%EB%93%9C" title="다이아몬드">
                   <span class="sprite inv-sprite" style="background-image:url(/media/4/44/InvSprite.png?version=51e185f2c422dd241cb261fceaae3977);background-position:-608px -3488px" title="다이아몬드">
                    <br/>
                   </span>
                  </a>
                 </span>
                </span>
                <span class="invslot">
                 <span class="invslot-item">
                  [ahref]
                  
                 </span>
                </span>
                <span class="invslot">
                </span>
               </span>
               <span class="mcui-row">
                <span class="invslot">
                </span>
                <span class="invslot">
                 <span class="invslot-item">
                  <a href="/%EB%A7%89%EB%8C%80%EA%B8%B0" title="막대기">
                   <span class="sprite inv-sprite" style="background-image:url(/media/4/44/InvSprite.png?version=51e185f2c422dd241cb261fceaae3977);background-position:-608px -1120px" title="막대기">
                    <br/>
                   </span>
                  </a>
                 </span>
                </span>
                <span class="invslot">
                </span>
               </span>
              </span>
              <span class="mcui-arrow">
               <br/>
              </span>
              <span class="mcui-output">
               <span class="invslot animated invslot-large">
                [keywordx][symbolx][keywordx][symbolx][bracketl1][keywordx][bracketr1][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx]<li>[link]</li><li>[keywordx][symbolx][keywordx][symbolx][bracketl2][keywordx][bracketr2][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx]</li>[keywordx][symbolx][keywordx][symbolx][bracketl3][keywordx][bracketr3][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx]
               </span>
              </span>
             </span>
            </div>
           </td>
           <td>
           </td>
          </tr>
          <tr>
           <th>
            도끼
           </th>
           <td>
            손상된, 일치하는 도끼
           </td>
           <td style="padding:1px">
            <div>
             <span class="mcui mcui-Crafting_Table">
              <span class="mcui-input">
               <span class="mcui-row">
                <span class="invslot">
                 [content5[linkx]content6]
                </span>
                <span class="invslot">
                </span>
                <span class="invslot">
                </span>
               </span>
               <span class="mcui-row">
                <span class="invslot animated">
                 <span class="invslot-item animated-active">
                  <a class="new" href="/index.php?title=Damaged_Wooden_Axe&amp;action=edit&amp;redlink=1" title="Damaged Wooden Axe (없는 문서)">
                   <span class="sprite inv-sprite" style="background-image:url(/media/4/44/InvSprite.png?version=51e185f2c422dd241cb261fceaae3977);background-position:-64px -3552px" title="Wooden Axe">
                    <br/>
                   </span>
                  </a>
                 </span>
                 <span class="invslot-item">
                  [ahref]
                  
                 </span>
                 <span class="invslot-item">
                  [linkx]
                  
                 </span>
                 <span class="invslot-item">
                  [linkx]
                  
                 </span>
                 <span class="invslot-item">
                  [ahref]
                  
                 </span>
                </span>
                <span class="invslot animated">
                 <span class="invslot-item animated-active">
                  [ahref]
                  
                 </span>
                 <span class="invslot-item">
                  [linkx]
                  
                 </span>
                 <span class="invslot-item">
                  <a class="new" href="/index.php?title=Damaged_Iron_Axe&amp;action=edit&amp;redlink=1" title="Damaged Iron Axe (없는 문서)">
                   <span class="sprite inv-sprite" style="background-image:url(/media/4/44/InvSprite.png?version=51e185f2c422dd241cb261fceaae3977);background-position:-800px -3520px" title="Iron Axe">
                    <br/>
                   </span>
                  </a>
                 </span>
                 <span class="invslot-item">
                  [linkx]
                  
                 </span>
                 <span class="invslot-item">
                  [linkx]
                  
                 </span>
                </span>
                <span class="invslot">
                </span>
               </span>
               <span class="mcui-row">
                <span class="invslot">
                </span>
                <span class="invslot">
                </span>
                <span class="invslot">
                </span>
               </span>
              </span>
              <span class="mcui-arrow">
               <br/>
              </span>
              <span class="mcui-output">
               <span class="invslot animated invslot-large">
                <span class="invslot-item animated-active" data-minetip-text="/&amp;7When in main hand:/&amp;#160;&amp;20.8 Attack Speed/&amp;#160;&amp;27 Attack Damage">
                 [ahref]
                 
                </span>
                <span class="invslot-item" data-minetip-text="/&amp;7When in main hand:/&amp;#160;&amp;20.8 Attack Speed/&amp;#160;&amp;29 Attack Damage">
                 <a href="/%EB%8F%84%EB%81%BC" title="도끼">
                  <span class="sprite inv-sprite" style="background-image:url(/media/4/44/InvSprite.png?version=51e185f2c422dd241cb261fceaae3977);background-position:-992px -3552px" title="Stone Axe">
                   <br/>
                  </span>
                 </a>
                </span>
                <span class="invslot-item" data-minetip-text="/&amp;7When in main hand:/&amp;#160;&amp;20.9 Attack Speed/&amp;#160;&amp;29 Attack Damage">
                 [ahref]
                 
                </span>
                <span class="invslot-item" data-minetip-text="/&amp;7When in main hand:/&amp;#160;&amp;21 Attack Speed/&amp;#160;&amp;27 Attack Damage">
                 [linkx]
                 
                </span>
                <span class="invslot-item" data-minetip-text="/&amp;7When in main hand:/&amp;#160;&amp;21 Attack Speed/&amp;#160;&amp;29 Attack Damage">
                 <a href="/%EB%8F%84%EB%81%BC" title="도끼">
                  <span class="sprite inv-sprite" style="background-image:url(/media/4/44/InvSprite.png?version=51e185f2c422dd241cb261fceaae3977);background-position:-192px -3552px" title="Diamond Axe">
                   <br/>
                  </span>
                 </a>
                </span>
               </span>
              </span>
              <span class="mcui-icons">
               <span class="mcui-shapeless" title="이 제작법은 일정한 형태가 없으므로, 재료 아이템을 제작 격자 내의 아무 곳에 배치할 수 있습니다.">
                <br/>
               </span>
              </span>
             </span>
            </div>
           </td>
           <td>
            두 도끼의 내구도가 합쳐지고, 보너스로 5% 가 추가된다.
           </td>
          </tr>
          <tr>
           <th>
            <a href="/%EC%8B%9C%EA%B3%84" title="시계">
             시계
            </a>
           </th>
           <td>
            [linkx]
            
            +
            <br/>
            [linkx]
            
           </td>
           <td style="padding:1px">
            <div>
             <span class="mcui mcui-Crafting_Table">
              <span class="mcui-input">
               <span class="mcui-row">
                <span class="invslot">
                </span>
                <span class="invslot">
                 <span class="invslot-item">
                  [ahref]
                  
                 </span>
                </span>
                <span class="invslot">
                </span>
               </span>
               <span class="mcui-row">
                <span class="invslot">
                 <span class="invslot-item">
                  [ahref]
                  
                 </span>
                </span>
                <span class="invslot">
                 <span class="invslot-item">
                  [linkx]
                  
                 </span>
                </span>
                <span class="invslot">
                 [content8[linkx]content9[linkx]content10]
                </span>
               </span>
               <span class="mcui-row">
                <span class="invslot">
                </span>
                <span class="invslot">
                 <span class="invslot-item">
                  [ahref]
                  
                 </span>
                </span>
                <span class="invslot">
                </span>
               </span>
              </span>
              <span class="mcui-arrow">
               <br/>
              </span>
              <span class="mcui-output">
               <span class="invslot invslot-large">
                <span class="invslot-item">
                 <a href="/%EC%8B%9C%EA%B3%84" title="시계">
                  <span class="sprite inv-sprite" style="background-image:url(/media/4/44/InvSprite.png?version=51e185f2c422dd241cb261fceaae3977);background-position:-640px -1152px" title="시계">
                   <br/>
                  </span>
                 </a>
                </span>
               </span>
              </span>
             </span>
            </div>
           </td>
           <td>
           </td>
          </tr>
          <tr>
           <th>
            [ahref]
            
           </th>
           <td>
            모든
            [ahref]
            
            또는
            <br/>
            <a href="/%EC%A1%B0%EC%95%BD%EB%8F%8C" title="조약돌">
             조약돌
            </a>
            또는
            <br/>
            <a href="/%EC%B2%A0%EA%B4%B4" title="철괴">
             철괴
            </a>
            또는
            <br/>
            [ahref]
            
            또는
            <br/>
            [ahref]
            
            +
            <br/>
            <a href="/%EB%A7%89%EB%8C%80%EA%B8%B0" title="막대기">
             막대기
            </a>
           </td>
           <td style="padding:1px">
            <div>
             <span class="mcui mcui-Crafting_Table">
              <span class="mcui-input">
               <span class="mcui-row">
                <span class="invslot animated">
                 <span class="animated-subframe animated-active">
                  <span class="invslot-item animated-active">
                   [ahref]
                   
                  </span>
                  <span class="invslot-item">
                   <a class="mw-redirect" href="/%EA%B0%80%EB%AC%B8%EB%B9%84%EB%82%98%EB%AC%B4_%ED%8C%90%EC%9E%90" title="가문비나무 판자">
                    <span class="sprite inv-sprite" style="background-image:url(/media/4/44/InvSprite.png?version=51e185f2c422dd241cb261fceaae3977);background-position:-0px -928px" title="가문비나무 판자">
                     <br/>
                    </span>
                   </a>
                  </span>
                  <span class="invslot-item">
                   [ahref]
                   
                  </span>
                  <span class="invslot-item">
                   [ahref]
                   
                  </span>
                  <span class="invslot-item">
                   [ahref]
                   
                  </span>
                  <span class="invslot-item">
                   [linkx]
                   
                  </span>
                 </span>
                 <span class="invslot-item">
                  <a href="/%EC%A1%B0%EC%95%BD%EB%8F%8C" title="조약돌">
                   <span class="sprite inv-sprite" style="background-image:url(/media/4/44/InvSprite.png?version=51e185f2c422dd241cb261fceaae3977);background-position:-960px -3328px" title="조약돌">
                    <br>
                     [content19[linkx]content20[linkx]content1]
                    </br>
                   </span>
                  </a>
                 </span>
                 <span class="invslot-item">
                  [linkx]
                  
                 </span>
                 <span class="invslot-item">
                  <a href="/%EA%B8%88%EA%B4%B4" title="금괴">
                   <span class="sprite inv-sprite" style="background-image:url(/media/4/44/InvSprite.png?version=51e185f2c422dd241cb261fceaae3977);background-position:-800px -3488px" title="금괴">
                    <br/>
                   </span>
                  </a>
                 </span>
                 <span class="invslot-item">
                  [linkx]
                  
                 </span>
                </span>
                <span class="invslot animated">
                 <span class="animated-subframe animated-active">
                  <span class="invslot-item animated-active">
                   [linkx]
                   
                  </span>
                  <span class="invslot-item">
                   <a class="mw-redirect" href="/%EA%B0%80%EB%AC%B8%EB%B9%84%EB%82%98%EB%AC%B4_%ED%8C%90%EC%9E%90" title="가문비나무 판자">
                    <span class="sprite inv-sprite" style="background-image:url(/media/4/44/InvSprite.png?version=51e185f2c422dd241cb261fceaae3977);background-position:-0px -928px" title="가문비나무 판자">
                     <br/>
                    </span>
                   </a>
                  </span>
                  <span class="invslot-item">
                   [ahref]
                   
                  </span>
                  <span class="invslot-item">
                   [linkx]
                   
                  </span>
                  <span class="invslot-item">
                   [linkx]
                   
                  </span>
                  <span class="invslot-item">
                   [linkx]
                   
                  </span>
                 </span>
                 <span class="invslot-item">
                  [linkx]
                  
                 </span>
                 <span class="invslot-item">
                  [linkx]
                  
                 </span>
                 <span class="invslot-item">
                  [linkx]
                  
                 </span>
                 <span class="invslot-item">
                  <a href="/%EB%8B%A4%EC%9D%B4%EC%95%84%EB%AA%AC%EB%93%9C" title="다이아몬드">
                   <span class="sprite inv-sprite" style="background-image:url(/media/4/44/InvSprite.png?version=51e185f2c422dd241cb261fceaae3977);background-position:-608px -3488px" title="다이아몬드">
                    <br/>
                   </span>
                  </a>
                 </span>
                </span>
                <span class="invslot">
                </span>
               </span>
               <span class="mcui-row">
                <span class="invslot">
                </span>
                <span class="invslot">
                 <span class="invslot-item">
                  [ahref]
                  
                 </span>
                </span>
                <span class="invslot">
                </span>
               </span>
               <span class="mcui-row">
                <span class="invslot">
                </span>
                <span class="invslot">
                 <span class="invslot-item">
                  [linkx]
                  
                 </span>
                </span>
                <span class="invslot">
                </span>
               </span>
              </span>
              <span class="mcui-arrow">
               <br/>
              </span>
              <span class="mcui-output">
               <span class="invslot animated invslot-large">
                <span class="invslot-item animated-active" data-minetip-text="/&amp;7When in main hand:/&amp;#160;&amp;21 Attack Speed/&amp;#160;&amp;21 Attack Damage">
                 <a href="/%EA%B4%AD%EC%9D%B4" title="괭이">
                  <span class="sprite inv-sprite" style="background-image:url(/media/4/44/InvSprite.png?version=51e185f2c422dd241cb261fceaae3977);background-position:-128px -3584px" title="Wooden Hoe">
                   <br/>
                  </span>
                 </a>
                </span>
                <span class="invslot-item" data-minetip-text="/&amp;7When in main hand:/&amp;#160;&amp;22 Attack Speed/&amp;#160;&amp;21 Attack Damage">
                 [ahref]
                 
                </span>
                <span class="invslot-item" data-minetip-text="/&amp;7When in main hand:/&amp;#160;&amp;23 Attack Speed/&amp;#160;&amp;21 Attack Damage">
                 [linkx]
                 
                </span>
                <span class="invslot-item" data-minetip-text="/&amp;7When in main hand:/&amp;#160;&amp;21 Attack Speed/&amp;#160;&amp;21 Attack Damage">
                 [ahref]
                 
                </span>
                <span class="invslot-item" data-minetip-text="/&amp;7When in main hand:/&amp;#160;&amp;24 Attack Speed/&amp;#160;&amp;21 Attack Damage">
                 [ahref]
                 
                </span>
               </span>
              </span>
             </span>
            </div>
           </td>
           <td>
           </td>
          </tr>
          <tr>
           <th>
            [linkx]
            
           </th>
           <td>
            손상된, 일치하는 괭이
           </td>
           <td style="padding:1px">
            <div>
             <span class="mcui mcui-Crafting_Table">
              <span class="mcui-input">
               <span class="mcui-row">
                <span class="invslot">
                </span>
                <span class="invslot">
                </span>
                <span class="invslot">
                </span>
               </span>
               <span class="mcui-row">
                <span class="invslot animated">
                 <span class="invslot-item animated-active">
                  <a class="new" href="/index.php?title=Damaged_Wooden_Hoe&amp;action=edit&amp;redlink=1" title="Damaged Wooden Hoe (없는 문서)">
                   <span class="sprite inv-sprite" style="background-image:url(/media/4/44/InvSprite.png?version=51e185f2c422dd241cb261fceaae3977);background-position:-96px -3552px" title="Wooden Hoe">
                    <br/>
                   </span>
                  </a>
                 </span>
                 <span class="invslot-item">
                  <a class="new" href="/index.php?title=Damaged_Stone_Hoe&amp;action=edit&amp;redlink=1" title="Damaged Stone Hoe (없는 문서)">
                   <span class="sprite inv-sprite" style="background-image:url(/media/4/44/InvSprite.png?version=51e185f2c422dd241cb261fceaae3977);background-position:-992px -3520px" title="Stone Hoe">
                    <br/>
                   </span>
                  </a>
                 </span>
                 <span class="invslot-item">
                  [ahref]
                  
                 </span>
                 <span class="invslot-item">
                  <a class="new" href="/index.php?title=Damaged_Golden_Hoe&amp;action=edit&amp;redlink=1" title="Damaged Golden Hoe (없는 문서)">
                   <span class="sprite inv-sprite" style="background-image:url(/media/4/44/InvSprite.png?version=51e185f2c422dd241cb261fceaae3977);background-position:-704px -3520px" title="Golden Hoe">
                    <br/>
                   </span>
                  </a>
                 </span>
                 <span class="invslot-item">
                  [ahref]
                  
                 </span>
                </span>
                <span class="invslot animated">
                 <span class="invslot-item animated-active">
                  <a class="new" href="/index.php?title=Damaged_Wooden_Hoe&amp;action=edit&amp;redlink=1" title="Damaged Wooden Hoe (없는 문서)">
                   <span class="sprite inv-sprite" style="background-image:url(/media/4/44/InvSprite.png?version=51e185f2c422dd241cb261fceaae3977);background-position:-96px -3552px" title="Wooden Hoe">
                    <br/>
                   </span>
                  </a>
                 </span>
                 <span class="invslot-item">
                  [ahref]
                  
                 </span>
                 <span class="invslot-item">
                  <a class="new" href="/index.php?title=Damaged_Iron_Hoe&amp;action=edit&amp;redlink=1" title="Damaged Iron Hoe (없는 문서)">
                   <span class="sprite inv-sprite" style="background-image:url(/media/4/44/InvSprite.png?version=51e185f2c422dd241cb261fceaae3977);background-position:-832px -3520px" title="Iron Hoe">
                    <br/>
                   </span>
                  </a>
                 </span>
                 <span class="invslot-item">
                  [ahref]
                  
                 </span>
                 <span class="invslot-item">
                  [ahref]
                  
                 </span>
                </span>
                <span class="invslot">
                </span>
               </span>
               <span class="mcui-row">
                <span class="invslot">
                </span>
                <span class="invslot">
                </span>
                <span class="invslot">
                </span>
               </span>
              </span>
              <span class="mcui-arrow">
               <br>
                [content9[linkx]content10[linkx]content11[linkx]content12]
               </br>
              </span>
              <span class="mcui-output">
               <span class="invslot animated invslot-large">
                <span class="invslot-item animated-active" data-minetip-text="/&amp;7When in main hand:/&amp;#160;&amp;21 Attack Speed/&amp;#160;&amp;21 Attack Damage">
                 <a href="/%EA%B4%AD%EC%9D%B4" title="괭이">
                  <span class="sprite inv-sprite" style="background-image:url(/media/4/44/InvSprite.png?version=51e185f2c422dd241cb261fceaae3977);background-position:-128px -3584px" title="Wooden Hoe">
                   <br/>
                  </span>
                 </a>
                </span>
                <span class="invslot-item" data-minetip-text="/&amp;7When in main hand:/&amp;#160;&amp;22 Attack Speed/&amp;#160;&amp;21 Attack Damage">
                 <a href="/%EA%B4%AD%EC%9D%B4" title="괭이">
                  <span class="sprite inv-sprite" style="background-image:url(/media/4/44/InvSprite.png?version=51e185f2c422dd241cb261fceaae3977);background-position:-0px -3584px" title="Stone Hoe">
                   <br/>
                  </span>
                 </a>
                </span>
                <span class="invslot-item" data-minetip-text="/&amp;7When in main hand:/&amp;#160;&amp;23 Attack Speed/&amp;#160;&amp;21 Attack Damage">
                 [ahref]
                 
                </span>
                <span class="invslot-item" data-minetip-text="/&amp;7When in main hand:/&amp;#160;&amp;21 Attack Speed/&amp;#160;&amp;21 Attack Damage">
                 [linkx]
                 
                </span>
                <span class="invslot-item" data-minetip-text="/&amp;7When in main hand:/&amp;#160;&amp;24 Attack Speed/&amp;#160;&amp;21 Attack Damage">
                 [linkx]
                 
                </span>
               </span>
              </span>
              <span class="mcui-icons">
               <span class="mcui-shapeless" title="이 제작법은 일정한 형태가 없으므로, 재료 아이템을 제작 격자 내의 아무 곳에 배치할 수 있습니다.">
                <br/>
               </span>
              </span>
             </span>
            </div>
           </td>
           <td>
            두 괭이의 내구도가 합쳐지고, 보너스로 5%가 추가된다.
           </td>
          </tr>
          <tr>
           <th>
            [linkx]
            
           </th>
           <td>
            [linkx]
            
           </td>
           <td style="padding:1px">
            <div>
             <span class="mcui mcui-Crafting_Table">
              <span class="mcui-input">
               <span class="mcui-row">
                <span class="invslot">
                </span>
                <span class="invslot">
                </span>
                <span class="invslot">
                </span>
               </span>
               <span class="mcui-row">
                <span class="invslot">
                </span>
                <span class="invslot">
                 <span class="invslot-item">
                  [linkx]
                  
                 </span>
                </span>
                <span class="invslot">
                </span>
               </span>
               <span class="mcui-row">
                <span class="invslot">
                 <span class="invslot-item">
                  <a href="/%EC%B2%A0%EA%B4%B4" title="철괴">
                   <span class="sprite inv-sprite" style="background-image:url(/media/4/44/InvSprite.png?version=51e185f2c422dd241cb261fceaae3977);background-position:-896px -3488px" title="철괴">
                    <br/>
                   </span>
                  </a>
                 </span>
                </span>
                <span class="invslot">
                </span>
                <span class="invslot">
                </span>
               </span>
              </span>
              <span class="mcui-arrow">
               <br/>
              </span>
              <span class="mcui-output">
               <span class="invslot invslot-large">
                <span class="invslot-item">
                 [linkx]
                 
                </span>
               </span>
              </span>
             </span>
            </div>
           </td>
           <td>
           </td>
          </tr>
          <tr>
           <th>
            [ahref]
            
           </th>
           <td>
            손상된
            [ahref]
            
           </td>
           <td style="padding:1px">
            <div>
             <span class="mcui mcui-Crafting_Table">
              <span class="mcui-input">
               <span class="mcui-row">
                <span class="invslot">
                </span>
                <span class="invslot">
                </span>
                <span class="invslot">
                </span>
               </span>
               <span class="mcui-row">
                <span class="invslot">
                 <span class="invslot-item">
                  [ahref]
                  
                 </span>
                </span>
                <span class="invslot">
                 <span class="invslot-item">
                  [linkx]
                  
                 </span>
                </span>
                <span class="invslot">
                </span>
               </span>
               <span class="mcui-row">
                <span class="invslot">
                </span>
                <span class="invslot">
                </span>
                <span class="invslot">
                </span>
               </span>
              </span>
              <span class="mcui-arrow">
               <br/>
              </span>
              <span class="mcui-output">
               <span class="invslot invslot-large">
                <span class="invslot-item">
                 [linkx]
                 
                </span>
               </span>
              </span>
              <span class="mcui-icons">
               <span class="mcui-shapeless" title="이 제작법은 일정한 형태가 없으므로, 재료 아이템을 제작 격자 내의 아무 곳에 배치할 수 있습니다.">
                <br/>
               </span>
              </span>
             </span>
            </div>
           </td>
           <td>
            두 가위의 내구도가 합쳐지고, 추가로 5%의 내구도가 더해된다.
            <sup class="nowrap">
             [
             <i>
              <span title="이 문장은 마인크래프트 다음 버전에는 적용되지 않는다.">
              </span>
              [linkx]
              
              이전에만
             </i>
             ]
            </sup>
           </td>
          </tr>
         </tbody>
        </table>
        <p>
         <br/>
        </p>
        <h2>
         [mkey1][symbolx][pkey1][symbolx][keyword1][bracketl1][bracketr1][symbolx][bracketl2][siter1][bracketr2][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx]
        </h2>
        <h3>
         [mkey1][symbolx][pkey1][symbolx][keyword1][bracketl1][bracketr1][symbolx][bracketl2][siter1][bracketr2][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx]
        </h3>
        <div class="dablink" style="padding-top: 0.5em; padding-left: 2em; padding-bottom: 0.5em; margin-bottom: 0.5em">
         이 부분의 본문은
         <b>
          [linkx]
          
         </b>
         입니다.
        </div>
        <p>
         많은 블록은 채굴에 가장 효율적인 도구가 있다. 일부 블록은 특정 도구가 있어야만 채굴할 수 있다. 도구의 재질도 채굴 속도에 영향을 미친다. 효율은 일반적으로 나무, 돌, 철, 다이아몬드, 황금 순으로 높아진다.
        </p>
        <h3>
         [mkey1][symbolx][pkey1][symbolx][keyword1][bracketl1][bracketr1][symbolx][bracketl2][siter1][bracketr2][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx]
        </h3>
        <div class="dablink" style="padding-top: 0.5em; padding-left: 2em; padding-bottom: 0.5em; margin-bottom: 0.5em">
         이 부분의 본문은
         <b>
          [ahref]
          
         </b>
         입니다.
        </div>
        <p>
         모든 도구는 각각 내구도가 다르다. 도구의 내구도는 재료에 의해 영향을 받는다. 내구도는 일반적으로 황금, 나무, 돌, 철, 다이아몬드 순으로 좋다.
        </p>
        <p>
         일부 도구는 블록 채굴 도구가 아니다. 괭이, 활, 낚싯대, 당근 낚싯대, 부싯돌과 부시, 양동이 등이 이에 해당한다. 이들 도구를 사용하여 블록을 깨뜨리는 것은 효율이 맨손과 동일하지만, 이런 도구를 사용한다고 별도로 내구도가 줄지는 않는다. 즉, 도구는 올바른 용도에 사용할 때만 내구도가 줄어든다.
        </p>
        <h3>
         [mkey1][symbolx][pkey1][symbolx][keyword1][bracketl1][bracketr1][symbolx][bracketl2][siter1][bracketr2][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx]
        </h3>
        <div class="dablink" style="padding-top: 0.5em; padding-left: 2em; padding-bottom: 0.5em; margin-bottom: 0.5em">
         이 부분의 본문은
         <b>
          [linkx]
          
         </b>
         입니다.
        </div>
        <p>
         모든 철 도구 또는 금 도구는 화로에서 제련하면 각각
         <a href="/%EC%B2%A0_%EC%A1%B0%EA%B0%81" title="철 조각">
          철 조각
         </a>
         과
         <a href="/%EA%B8%88_%EC%A1%B0%EA%B0%81" title="금 조각">
          금 조각
         </a>
         이 만들어진다.
        </p>
        <table class="wikitable sortable collapsible" data-description="제련방법">
         <tbody>
          <tr>
           <th>
            이름
           </th>
           <th>
            재료
           </th>
           <th class="unsortable">
            <a href="/%EC%A0%9C%EB%A0%A8" title="제련">
             제련
            </a>
            방법
           </th>
          </tr>
          <tr>
           <th>
            [linkx]
            
           </th>
           <td>
            모든
            [ahref]
            
            +
            <br/>
            모든
            [linkx]
            
           </td>
           <td style="padding:1px">
            <div>
             <span class="mcui mcui-Furnace">
              <span class="mcui-input">
               <span class="invslot animated">
                <span class="invslot-item animated-active" data-minetip-text="/&amp;7When in main hand:/&amp;#160;&amp;21.2 Attack Speed/&amp;#160;&amp;24 Attack Damage">
                 [ahref]
                 
                </span>
                <span class="invslot-item" data-minetip-text="/&amp;7When in main hand:/&amp;#160;&amp;20.9 Attack Speed/&amp;#160;&amp;29 Attack Damage">
                 [ahref]
                 
                </span>
                <span class="invslot-item" data-minetip-text="/&amp;7When in main hand:/&amp;#160;&amp;21 Attack Speed/&amp;#160;&amp;24.5 Attack Damage">
                 [linkx]
                 
                </span>
                <span class="invslot-item" data-minetip-text="/&amp;7When in main hand:/&amp;#160;&amp;23 Attack Speed/&amp;#160;&amp;21 Attack Damage">
                 [ahref]
                 
                </span>
               </span>
               <span class="mcui-fuel">
                <br/>
               </span>
               <span class="invslot animated">
                <span class="invslot-item animated-active">
                 [linkx]
                 
                </span>
                <span class="invslot-item">
                 [ahref]
                 
                </span>
                <span class="invslot-item">
                 [linkx]
                 
                </span>
                <span class="invslot-item">
                 <a class="mw-redirect" href="/%EC%B0%B8%EB%82%98%EB%AC%B4_%ED%8C%90%EC%9E%90" title="참나무 판자">
                  <span class="sprite inv-sprite" style="background-image:url(/media/4/44/InvSprite.png?version=51e185f2c422dd241cb261fceaae3977);background-position:-192px -896px" title="Wood Planks">
                   <br/>
                  </span>
                 </a>
                </span>
                <span class="invslot-item">
                 [linkx]
                 
                </span>
               </span>
              </span>
              <span class="mcui-arrow">
               <br/>
              </span>
              <span class="mcui-output">
               <span class="invslot invslot-large">
                <span class="invslot-item">
                 [ahref]
                 
                </span>
               </span>
              </span>
             </span>
            </div>
           </td>
          </tr>
          <tr>
           <th>
            <a href="/%EA%B8%88_%EC%A1%B0%EA%B0%81" title="금 조각">
             금 조각
            </a>
           </th>
           <td>
            모든
            [ahref]
            
            +
            <br/>
            모든
            [linkx]
            
           </td>
           <td style="padding:1px">
            <div>
             <span class="mcui mcui-Furnace">
              <span class="mcui-input">
               <span class="invslot animated">
                <span class="invslot-item animated-active" data-minetip-text="/&amp;7When in main hand:/&amp;#160;&amp;21.2 Attack Speed/&amp;#160;&amp;22 Attack Damage">
                 [ahref]
                 
                </span>
                <span class="invslot-item" data-minetip-text="/&amp;7When in main hand:/&amp;#160;&amp;21 Attack Speed/&amp;#160;&amp;27 Attack Damage">
                 [linkx]
                 
                </span>
                <span class="invslot-item" data-minetip-text="/&amp;7When in main hand:/&amp;#160;&amp;21 Attack Speed/&amp;#160;&amp;22.5 Attack Damage">
                 [linkx]
                 
                </span>
                <span class="invslot-item" data-minetip-text="/&amp;7When in main hand:/&amp;#160;&amp;21 Attack Speed/&amp;#160;&amp;21 Attack Damage">
                 <a href="/%EA%B4%AD%EC%9D%B4" title="괭이">
                  <span class="sprite inv-sprite" style="background-image:url(/media/4/44/InvSprite.png?version=51e185f2c422dd241cb261fceaae3977);background-position:-576px -3552px" title="Golden Hoe">
                   <br/>
                  </span>
                 </a>
                </span>
               </span>
               <span class="mcui-fuel">
                <br/>
               </span>
               <span class="invslot animated">
                <span class="invslot-item animated-active">
                 [ahref]
                 
                </span>
                <span class="invslot-item">
                 [ahref]
                 
                </span>
                <span class="invslot-item">
                 [linkx]
                 
                </span>
                <span class="invslot-item">
                 [linkx]
                 
                </span>
                <span class="invslot-item">
                 [linkx]
                 
                </span>
               </span>
              </span>
              <span class="mcui-arrow">
               <br/>
              </span>
              <span class="mcui-output">
               <span class="invslot invslot-large">
                <span class="invslot-item">
                 [ahref]
                 
                </span>
               </span>
              </span>
             </span>
            </div>
           </td>
          </tr>
         </tbody>
        </table>
        <h2>
         [mkey1][symbolx][pkey1][symbolx][keyword1][bracketl1][bracketr1][symbolx][bracketl2][siter1][bracketr2][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx]
        </h2>
        <div class="dablink" style="padding-top: 0.5em; padding-left: 2em; padding-bottom: 0.5em; margin-bottom: 0.5em">
         참고 : 이 동영상은 오래되었다. 1.6.1에서
         <a href="/%EB%81%88" title="끈">
          끈
         </a>
         이 도구로 추가되었다.
        </div>
        <div style="text-align:center">
         <div class="thumb embedvideo autoResize" style="width: 433px;">
          <div class="embedvideo autoResize" style="">
           <div class="embedvideowrap" style="width: 425px;">
            <iframe allowfullscreen="true" frameborder="0" height="239" src="//www.youtube.com/embed/7kl83Bzt7ZA?" width="425">
            </iframe>
           </div>
          </div>
         </div>
        </div>
        <h2>
         <b>[mkey1][symbolx][pkey1][symbolx][keyword1][bracketl1][bracketr1][symbolx][bracketl2][siter1][bracketr2][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx]</b>
        </h2>
        <table class="wikitable" data-description="History">
         <tbody>
          <tr>
           <th colspan="6">
            [linkx]
            
           </th>
          </tr>
          <tr>
           <th class="nowrap" colspan="3" rowspan="1">
            [linkx]
            
           </th>
           <th class="nowrap" colspan="2" rowspan="1">
            <a class="new" href="/index.php?title=Java_12w18a&amp;action=edit&amp;redlink=1" title="Java 12w18a (없는 문서)">
             12w18a
            </a>
           </th>
           <td>
            Wooden tools became able to be used as
            [linkx]
            
            for
            [linkx]
            
            in case players didn't want to repair them or finish using them.
           </td>
          </tr>
          <tr>
           <th class="nowrap" colspan="5" rowspan="1">
            [ahref]
            
           </th>
           <td>
            Instead of replacing the barehanded damage (
            <span class="nowrap">
             1 (
             <span class="nowrap" title="1">
              [linkx]
              
             </span>
             )
            </span>
            ), pickaxes, shovels, axes and swords now add their damage onto the barehanded damage.
           </td>
          </tr>
          <tr>
           <th class="nowrap" colspan="3" rowspan="1">
            [ahref]
            
           </th>
           <th class="nowrap" colspan="2" rowspan="1">
            [ahref]
            
           </th>
           <td>
            Golden and iron tools now smelt down into one of their respective nuggets.
           </td>
          </tr>
          <tr>
           <th colspan="6">
            [linkx]
            
           </th>
          </tr>
          <tr>
           <th class="nowrap" colspan="3" rowspan="1">
            [ahref]
            
           </th>
           <th class="nowrap" colspan="2" rowspan="1">
            ?
           </th>
           <td>
            Tools cannot be repaired by crafting.
           </td>
          </tr>
          <tr>
           <th colspan="6">
            [ahref]
            
           </th>
          </tr>
          <tr>
           <th class="nowrap" colspan="5" rowspan="1">
            [ahref]
            
           </th>
           <td>
            Added stone tools and shears.
           </td>
          </tr>
          <tr>
           <th class="nowrap" colspan="5" rowspan="1">
            [ahref]
            
           </th>
           <td>
            Added wooden tools.
           </td>
          </tr>
          <tr>
           <th class="nowrap" colspan="5" rowspan="1">
            [ahref]
            
           </th>
           <td>
            Added iron, diamond, and golden tools.
           </td>
          </tr>
          <tr>
           <th class="nowrap" colspan="5" rowspan="1">
            [ahref]
            
           </th>
           <td>
            Added bows.
           </td>
          </tr>
          <tr>
           <th class="nowrap" colspan="5" rowspan="1">
            [linkx]
            
           </th>
           <td>
            Added flint and steel and all hoe types.
           </td>
          </tr>
          <tr>
           <th class="nowrap" colspan="5" rowspan="1">
            [linkx]
            
           </th>
           <td>
            Added buckets.
           </td>
          </tr>
          <tr>
           <th class="nowrap" colspan="5" rowspan="1">
            [ahref]
            
           </th>
           <td>
            Flint and steel will now ignite creepers.
           </td>
          </tr>
          <tr>
           <th class="nowrap" colspan="3" rowspan="1">
            [linkx]
            
           </th>
           <th class="nowrap" colspan="2" rowspan="1">
            [ahref]
            
           </th>
           <td>
            Added flint and steel and shears to the creative inventory.
           </td>
          </tr>
          <tr>
           <th class="nowrap" colspan="3" rowspan="1">
            [linkx]
            
           </th>
           <th class="nowrap" colspan="2" rowspan="1">
            [ahref]
            
           </th>
           <td>
            Added fishing rod.
           </td>
          </tr>
          <tr>
           <th class="nowrap" colspan="3" rowspan="1">
            [linkx]
            
           </th>
           <th class="nowrap" colspan="2" rowspan="1">
            [linkx]
            
           </th>
           <td>
            Added carrot on a stick and leads.
           </td>
          </tr>
          <tr>
           <th colspan="6">
            [ahref]
            
           </th>
          </tr>
          <tr>
           <th class="nowrap" colspan="3" rowspan="1">
            <a class="new" href="/index.php?title=%ED%8F%AC%EC%BC%93_%EC%97%90%EB%94%94%EC%85%98_1.1.0&amp;action=edit&amp;redlink=1" title="포켓 에디션 1.1.0 (없는 문서)">
             1.1.0
            </a>
           </th>
           <th class="nowrap" colspan="2" rowspan="1">
            [linkx]
            
           </th>
           <td>
            Golden and iron tools now smelt down into one of their respective nuggets.
           </td>
          </tr>
          <tr>
           <th colspan="6">
            [linkx]
            
           </th>
          </tr>
          <tr>
           <th class="nowrap" rowspan="1">
            [ahref]
            
           </th>
           <th class="nowrap" rowspan="1">
            [ahref]
            
           </th>
           <th class="nowrap" rowspan="1">
            [linkx]
            
           </th>
           <th class="nowrap" rowspan="1">
            [linkx]
            
           </th>
           <th class="nowrap" rowspan="1">
            [ahref]
            
           </th>
           <td>
            Golden and iron tools now smelt down into one of their respective nuggets.
           </td>
          </tr>
         </tbody>
        </table>
        <h2>
         [mkey1][symbolx][pkey1][symbolx][keyword1][bracketl1][bracketr1][symbolx][bracketl2][siter1][bracketr2][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx]
        </h2>
        <p>
         “도구”에 관련된 문제점은
         [linkx]
         
         에서 관리된다. 그곳에서 문제점을 보고하면 된다.
        </p>
        <h2>
         [mkey1][symbolx][pkey1][symbolx][keyword1][bracketl1][bracketr1][symbolx][bracketl2][siter1][bracketr2][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx]
        </h2>
        <ul>
         <li>
          콘솔 에디션 제작 화면에서는 황금 도구가 다이아몬드 도구보다 더 높이 위치한다.
         </li>
         <li>
          나무 도구는 내구도에 관계없이 화로에서 연료로 사용할 수 있다. 즉, 내구도가 1만 남은 나무 도구도 화로에서 연료로 사용할 수 있다.
         </li>
        </ul>
        <h2>
         <b>[mkey1][symbolx][pkey1][symbolx][keyword1][bracketl1][bracketr1][symbolx][bracketl2][siter1][bracketr2][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx]</b>
        </h2>
        <ul>
         <li>
          [linkx]
          
         </li>
         <li>
          [linkx]
          
         </li>
        </ul>
        <div class="load-page loadbox-navbox" data-page="Template:Items/content" style="background-color: white; border: 1px solid #CCC; margin-bottom: 0.5em; padding: 0 0.5em;">
         <p>
          <span id=".5B.5B.EC.95.84.EC.9D.B4.ED.85.9C.5D.5D">
           <b>
            [linkx]
            
           </b>
          </span>
         </p>
         <div class="load-page-content noscript">
          <div class="dablink" style="padding-top: 0.5em; padding-left: 2em; padding-bottom: 0.5em; margin-bottom: 0.5em">
           참조:
           [linkx]
           
           <span class="mw-editsection-like" title="편집: Template:Items/content">
            [
            [linkx]
            
            ]
           </span>
          </div>
         </div>
        </div>
       </div>
      </div>
      <div class="printfooter">
       원본 주소 "
       [linkx]
       
       "
      </div>
      <div class="catlinks" data-mw="interface" id="catlinks">
       <div class="mw-normal-catlinks" id="mw-normal-catlinks">
        <a href="/%ED%8A%B9%EC%88%98:%EB%B6%84%EB%A5%98" title="특수:분류">
         분류
        </a>
        :
        <ul>
         <li>
          [linkx]
          
         </li>
         <li>
          [linkx]
          
         </li>
         <li>
          <a class="new" href="/index.php?title=%EB%B6%84%EB%A5%98:Inaccurate_videos&amp;action=edit&amp;redlink=1" title="분류:Inaccurate videos (없는 문서)">
           Inaccurate videos
          </a>
         </li>
         <li>
          [linkx]
          
         </li>
         <li>
          [linkx]
          
         </li>
         <li>
          <a href="/%EB%B6%84%EB%A5%98:%EC%95%84%EC%9D%B4%ED%85%9C" title="분류:아이템">
           아이템
          </a>
         </li>
         <li>
          [ahref]
          
         </li>
        </ul>
       </div>
      </div>
      <div class="visualClear">
      </div>
     </div>
     <div id="siderail_minecraft_ko_gamepedia">
      <div id="atfmrec_minecraft_ko_gamepedia">
       <div id="cdm-zone-02">
       </div>
      </div>
      <div id="middlemrec_minecraft_ko_gamepedia">
       [linkx]
       
      </div>
      <div id="btfmrec_minecraft_ko_gamepedia">
       <div id="cdm-zone-06">
       </div>
      </div>
     </div>
     <div class="visualClear">
     </div>
     <div id="btfheroContainer">
      <div id="btfhero_container">
       <div id="twitchnet-liveontwitch" style="margin: 0 auto; width: 90%; max-width: 776px; height: 270px;">
       </div>
      </div>
     </div>
     <div id="btflb">
      <div id="cdm-zone-04">
      </div>
     </div>
    </div>
    <div id="mw-navigation">
     <h2>
      [mkey1][symbolx][pkey1][symbolx][keyword1][bracketl1][bracketr1][symbolx][bracketl2][siter1][bracketr2][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx]
     </h2>
     <div id="mw-head">
      <div id="left-navigation">
       <div aria-labelledby="p-namespaces-label" class="vectorTabs" id="p-namespaces" role="navigation">
        <h3 id="p-namespaces-label">
         [mkey1][symbolx][pkey1][symbolx][keyword1][bracketl1][bracketr1][symbolx][bracketl2][siter1][bracketr2][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx]
        </h3>
        <ul>
         <li class="selected" id="ca-nstab-main">
          <span>
           <a accesskey="c" href="/%EB%8F%84%EA%B5%AC" title="본문 보기 [c]">
            문서
           </a>
          </span>
         </li>
         <li class="new" id="ca-talk">
          <span>
           [ahref]
           
          </span>
         </li>
        </ul>
       </div>
       <div aria-labelledby="p-variants-label" class="vectorMenu emptyPortlet" id="p-variants" role="navigation">
        <h3 id="p-variants-label">
         [mkey1][symbolx][pkey1][symbolx][keyword1][bracketl1][bracketr1][symbolx][bracketl2][siter1][bracketr2][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx]
        </h3>
        <div class="menu">
         <ul>
         </ul>
        </div>
       </div>
       <div aria-labelledby="p-sharing-label" class="vectorMenu" id="p-sharing" role="navigation">
        <h3 id="p-cactions-label">
         [mkey1][symbolx][pkey1][symbolx][keyword1][bracketl1][bracketr1][symbolx][bracketl2][siter1][bracketr2][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx]
        </h3>
        <div class="menu">
         <div id="socialIconImages">
          [linkx]
          
          <a href="/sharer/sharer.php?u=https%3A%2F%2Fminecraft-ko.gamepedia.com%2F%25EB%258F%2584%25EA%25B5%25AC" target="_blank">
          </a>
          <a href="/submit?url=https%3A%2F%2Fminecraft-ko.gamepedia.com%2F%25EB%258F%2584%25EA%25B5%25AC&amp;title=Check+out+%EB%8F%84%EA%B5%AC+on+Minecraft+Wiki+via+%40CurseGamepedia%3A+https%3A%2F%2Fminecraft-ko.gamepedia.com%2F%25EB%258F%2584%25EA%25B5%25AC" target="_blank">
          </a>
          [linkx]
          
          [ahref]
          
         </div>
        </div>
       </div>
      </div>
      <div id="right-navigation">
       <div aria-labelledby="p-views-label" class="vectorTabs" id="p-views" role="navigation">
        <h3 id="p-views-label">
         [mkey1][symbolx][pkey1][symbolx][keyword1][bracketl1][bracketr1][symbolx][bracketl2][siter1][bracketr2][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx]
        </h3>
        <ul>
         <li class="collapsible selected" id="ca-view">
          <span>
           <a href="/%EB%8F%84%EA%B5%AC">
            보기
           </a>
          </span>
         </li>
         <li class="collapsible" id="ca-ve-edit">
          <span>
           [ahref]
           
          </span>
         </li>
         <li class="collapsible" id="ca-edit">
          <span>
           [linkx]
           
          </span>
         </li>
         <li class="collapsible" id="ca-history">
          <span>
           [linkx]
           
          </span>
         </li>
        </ul>
       </div>
       <div aria-labelledby="p-cactions-label" class="vectorMenu emptyPortlet" id="p-cactions" role="navigation">
        <h3 id="p-cactions-label">
         [mkey1][symbolx][pkey1][symbolx][keyword1][bracketl1][bracketr1][symbolx][bracketl2][siter1][bracketr2][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx]
        </h3>
        <div class="menu">
         <ul>
         </ul>
        </div>
       </div>
       <div id="p-search" role="search">
        <h3>
         [mkey1][symbolx][pkey1][symbolx][keyword1][bracketl1][bracketr1][symbolx][bracketl2][siter1][bracketr2][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx]
        </h3>
        <form action="/index.php" id="searchform">
         <div id="simpleSearch">
         </div>
        </form>
       </div>
      </div>
     </div>
     <div id="mw-panel">
      <div id="p-logo" role="banner">
       [linkx]
       
      </div>
      <div aria-labelledby="p-navigation-label" class="portal" id="p-navigation" role="navigation">
       <h3 id="p-navigation-label">
        [mkey1][symbolx][pkey1][symbolx][keyword1][bracketl1][bracketr1][symbolx][bracketl2][siter1][bracketr2][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx]
       </h3>
       <div class="body">
        <ul>
         <li id="n-mainpage-description">
          <a accesskey="z" href="/Minecraft_Wiki" title="대문으로 가기 [z]">
           대문
          </a>
         </li>
         <li id="n-recentchanges">
          [ahref]
          
         </li>
         <li id="n-randompage">
          [ahref]
          
         </li>
         <li id="n-portal">
          [linkx]
          
         </li>
         <li id="n-.EA.B4.80.EB.A6.AC.EC.9E.90-.EC.9A.94.EC.B2.AD">
          [linkx]
          
         </li>
         <li id="n-.EC.9C.84.ED.82.A4-.EA.B7.9C.EC.A0.95">
          [linkx]
          
         </li>
         <li id="n-help">
          [linkx]
          
         </li>
        </ul>
       </div>
      </div>
      <div aria-labelledby="p-.EC.9C.A0.EC.9A.A9.ED.95.9C_.EB.AC.B8.EC.84.9C-label" class="portal" id="p-.EC.9C.A0.EC.9A.A9.ED.95.9C_.EB.AC.B8.EC.84.9C" role="navigation">
       <h3 id="p-.EC.9C.A0.EC.9A.A9.ED.95.9C_.EB.AC.B8.EC.84.9C-label">
        [mkey1][symbolx][pkey1][symbolx][keyword1][bracketl1][bracketr1][symbolx][bracketl2][siter1][bracketr2][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx]
       </h3>
       <div class="body">
        <ul>
         <li id="n-.EB.B8.94.EB.A1.9D">
          [ahref]
          
         </li>
         <li id="n-.EC.95.84.EC.9D.B4.ED.85.9C">
          <a href="/%EC%95%84%EC%9D%B4%ED%85%9C">
           아이템
          </a>
         </li>
         <li id="n-.EC.A0.9C.EC.9E.91.EB.B2.95">
          <a href="/%EC%A0%9C%EC%9E%91%EB%B2%95">
           제작법
          </a>
         </li>
         <li id="n-.EC.A0.9C.EB.A0.A8">
          [linkx]
          
         </li>
         <li id="n-.EB.A7.88.EB.B2.95.EB.B6.80.EC.97.AC">
          <a href="/%EB%A7%88%EB%B2%95%EB%B6%80%EC%97%AC">
           마법부여
          </a>
         </li>
         <li id="n-.EB.AC.BC.EC.95.BD-.EC.96.91.EC.A1.B0">
          <a href="/%EB%AC%BC%EC%95%BD_%EC%96%91%EC%A1%B0">
           물약 양조
          </a>
         </li>
         <li id="n-.EB.AA.B9">
          [ahref]
          
         </li>
         <li id="n-.EA.B1.B0.EB.9E.98">
          [linkx]
          
         </li>
         <li id="n-.EB.A0.88.EB.93.9C.EC.8A.A4.ED.86.A4-.ED.9A.8C.EB.A1.9C">
          [ahref]
          
         </li>
         <li id="n-.EB.A6.AC.EC.86.8C.EC.8A.A4-.ED.8C.A9">
          <a href="/%EB%A6%AC%EC%86%8C%EC%8A%A4_%ED%8C%A9">
           리소스 팩
          </a>
         </li>
         <li id="n-.EB.AA.A8.EB.93.9C">
          [ahref]
          
         </li>
        </ul>
       </div>
      </div>
      <div aria-labelledby="p-Gamepedia-label" class="portal" id="p-Gamepedia" role="navigation">
       <h3 id="p-Gamepedia-label">
        [mkey1][symbolx][pkey1][symbolx][keyword1][bracketl1][bracketr1][symbolx][bracketl2][siter1][bracketr2][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx]
       </h3>
       <div class="body">
        <ul>
         <li id="n-.EC.A7.80.EC.9B.90">
          [linkx]
          
         </li>
         <li id="n-.EB.B6.80.EC.A0.81.EC.A0.88-.EA.B4.91.EA.B3.A0-.EC.8B.A0.EA.B3.A0">
          [linkx]
          
         </li>
         <li id="n-.EB.8F.84.EC.9B.80.EB.A7.90-.EC.9C.84.ED.82.A4">
          [ahref]
          
         </li>
         <li id="n-.EC.97.B0.EB.9D.BD">
          <a href="/How_to_contact_Gamepedia">
           연락
          </a>
         </li>
        </ul>
       </div>
      </div>
      <div aria-labelledby="p-tb-label" class="portal" id="p-tb" role="navigation">
       <h3 id="p-tb-label">
        [mkey1][symbolx][pkey1][symbolx][keyword1][bracketl1][bracketr1][symbolx][bracketl2][siter1][bracketr2][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx]
       </h3>
       <div class="body">
        <ul>
         <li id="t-whatlinkshere">
          [linkx]
          
         </li>
         <li id="t-recentchangeslinked">
          [linkx]
          
         </li>
         <li id="t-specialpages">
          [linkx]
          
         </li>
         <li id="t-print">
          [linkx]
          
         </li>
         <li id="t-permalink">
          [ahref]
          
         </li>
         <li id="t-info">
          [linkx]
          
         </li>
        </ul>
       </div>
      </div>
      <div aria-labelledby="p-lang-label" class="portal" id="p-lang" role="navigation">
       <h3 id="p-lang-label">
        [mkey1][symbolx][pkey1][symbolx][keyword1][bracketl1][bracketr1][symbolx][bracketl2][siter1][bracketr2][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx]
       </h3>
       <div class="body">
        <ul>
         <li class="interlanguage-link interwiki-en">
          [linkx]
          
         </li>
         <li class="interlanguage-link interwiki-cs">
          [linkx]
          
         </li>
         <li class="interlanguage-link interwiki-de">
          [linkx]
          
         </li>
         <li class="interlanguage-link interwiki-es">
          <a class="interlanguage-link-target" href="/Herramientas" hreflang="es" lang="es" title="Herramientas – español">
           Español
          </a>
         </li>
         <li class="interlanguage-link interwiki-fr">
          [linkx]
          
         </li>
         <li class="interlanguage-link interwiki-hu">
          [linkx]
          
         </li>
         <li class="interlanguage-link interwiki-it">
          [ahref]
          
         </li>
         <li class="interlanguage-link interwiki-ja">
          <a class="interlanguage-link-target" href="/%E9%81%93%E5%85%B7" hreflang="ja" lang="ja" title="道具 – 日本語">
           日本語
          </a>
         </li>
         <li class="interlanguage-link interwiki-nl">
          [ahref]
          
         </li>
         <li class="interlanguage-link interwiki-pl">
          [linkx]
          
         </li>
         <li class="interlanguage-link interwiki-pt">
          [linkx]
          
         </li>
         <li class="interlanguage-link interwiki-ru">
          [linkx]
          
         </li>
         <li class="interlanguage-link interwiki-zh">
          <a class="interlanguage-link-target" href="/%E5%B7%A5%E5%85%B7" hreflang="zh" lang="zh" title="工具 – 中文">
           中文
          </a>
         </li>
        </ul>
       </div>
      </div>
      <div aria-labelledby="p-socialProfiles-label" class="portal" id="p-socialProfiles" role="navigation">
       <h3 id="p-socialProfiles-label">
        [mkey1][symbolx][pkey1][symbolx][keyword1][bracketl1][bracketr1][symbolx][bracketl2][siter1][bracketr2][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx]
       </h3>
       <div class="body">
        <div class="socialSidebar">
         <div class="socialLink twitter">
          [ahref]
          
         </div>
         <div class="socialLink facebook">
          [ahref]
          
         </div>
         <div class="socialLink twitch">
          [linkx]
          
         </div>
        </div>
       </div>
      </div>
     </div>
    </div>
    <div id="footer" role="contentinfo">
     <ul id="footer-info">
      <li id="footer-info-lastmod">
       이 문서는 2019년 4월 2일 (화) 17:11에 마지막으로 편집되었습니다.
      </li>
      <li id="footer-info-copyright">
       별도로 명시하지 않은 경우, 내용은
       [linkx]
       
       에 따라 사용할 수 있습니다.
       <br/>
       Minecraft content and materials are trademarks and copyrights of Mojang and its licensors.  All rights reserved.
       <br/>
       This site is a part of Wikia, Inc. and is not affiliated with Mojang.
      </li>
     </ul>
     <ul id="footer-places">
      <li id="footer-places-about">
       <a href="/Minecraft_Wiki:%EC%86%8C%EA%B0%9C" title="Minecraft Wiki:소개">
        Minecraft Wiki 소개
       </a>
      </li>
      <li id="footer-places-disclaimer">
       [linkx]
       
      </li>
      <li id="footer-places-mobileview">
       [linkx]
       
      </li>
     </ul>
     <ul class="noprint" id="footer-icons">
      <li id="footer-copyrightico">
       [linkx]
       
      </li>
      <li id="footer-poweredbyico">
       [linkx]
       
       [linkx]
       
      </li>
     </ul>
     <div style="clear: both;">
     </div>
    </div>
   </div>
   <div id="footer-push">
   </div>
  </div>
  <div id="footer-and-prefooter">
   <div id="gamepedia-footer">
    <div class="footer-wrapper-gp">
     <div class="footer-box footer-logo">
      [ahref]
      
     </div>
     <div class="footer-box footer-social">
      <ul class="social">
       <li>
        [linkx]
        
       </li>
       <li>
        [ahref]
        
       </li>
       <li>
        [linkx]
        
       </li>
      </ul>
     </div>
     <div class="footer-box footer-links mobile-split">
      <ul>
       <li>
        [ahref]
        
       </li>
       <li>
        [ahref]
        
       </li>
       <li>
        [linkx]
        
       </li>
      </ul>
     </div>
    </div>
   </div>
   <footer class="show-ads" id="curse-footer" role="complimentary">
    <div class="footer-wrapper">
     <div class="footer-box footer-ad">
      <div class="ad-placement ad-main-med-rect-footer">
       <div id="cdm-zone-03">
       </div>
      </div>
     </div>
     <div class="footer-box footer-logo">
      <a href="m" target="_blank">
      </a>
     </div>
     <div class="footer-box footer-properties">
      <h2>
       [mkey1][symbolx][pkey1][symbolx][keyword1][bracketl1][bracketr1][symbolx][bracketl2][siter1][bracketr2][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx]
      </h2>
      <ul class="properties mobile-split">
       <li>
        [linkx]
        
       </li>
       <li>
        [ahref]
        
       </li>
       <li>
        [ahref]
        
       </li>
       <li>
        [linkx]
        
       </li>
       <li>
        [linkx]
        
       </li>
      </ul>
     </div>
     <div class="footer-box footer-social">
      <h2>
       <b>[mkey1][symbolx][pkey1][symbolx][keyword1][bracketl1][bracketr1][symbolx][bracketl2][siter1][bracketr2][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx]</b>
      </h2>
      <ul class="social">
       <li>
        [linkx]
        
       </li>
       <li>
        [linkx]
        
       </li>
       <li>
        [ahref]
        
       </li>
       <li>
        [ahref]
        
       </li>
       <li>
        [linkx]
        
       </li>
      </ul>
     </div>
     <div class="footer-box footer-overview">
      <h2>
       <b>[mkey1][symbolx][pkey1][symbolx][keyword1][bracketl1][bracketr1][symbolx][bracketl2][siter1][bracketr2][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx]</b>
      </h2>
      <ul class="mobile-split">
       <li>
        [ahref]
        
       </li>
       <li>
        [ahref]
        
       </li>
       <li>
        [ahref]
        
       </li>
       <li>
        [linkx]
        
       </li>
       <li>
        <a href="/curse-terms-of-service">
         Terms of Service
        </a>
       </li>
       <li>
        [linkx]
        
       </li>
      </ul>
     </div>
     <div class="footer-box footer-community">
      <h2>
       <b>[mkey1][symbolx][pkey1][symbolx][keyword1][bracketl1][bracketr1][symbolx][bracketl2][siter1][bracketr2][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx]</b>
      </h2>
      <ul class="mobile-split">
       <li>
        [linkx]
        
       </li>
       <li>
        [linkx]
        
       </li>
       <li>
        [linkx]
        
       </li>
      </ul>
     </div>
     <div class="footer-box footer-advertise">
      <h2>
       <b>[mkey1][symbolx][pkey1][symbolx][keyword1][bracketl1][bracketr1][symbolx][bracketl2][siter1][bracketr2][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx]</b>
      </h2>
      <ul class="mobile-split">
       <li>
        [ahref]
        
       </li>
       <li>
        <a href="/mediakit#contact">
         Contact Us
        </a>
       </li>
      </ul>
     </div>
    </div>
    <div class="footer-post">
     Minecraft Wiki is a Fandom Gaming Community.
     <hr/>
     <span class="footer-post-mobile">
      <a href="/index.php?title=%EB%8F%84%EA%B5%AC&amp;mobileaction=toggle_view_mobile">
       View Mobile Site
      </a>
     </span>
    </div>
   </footer>
  </div>
  <noscript>
  </noscript>
  <noscript>
   <div>
   </div>
  </noscript>
  <div id="cdm-zone-end">
  </div>
  <b style="color:black;background-color:#a0ffff">
   jnice09-ipp30-wq-zq-0435
  </b>
 </body>
</html>
|<---