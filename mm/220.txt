--->|<!DOCTYPE html>
<html dir="ltr" lang="fr" prefix="content: http://purl.org/rss/1.0/modules/content/  dc: http://purl.org/dc/terms/  foaf: http://xmlns.com/foaf/0.1/  og: http://ogp.me/ns#  rdfs: http://www.w3.org/2000/01/rdf-schema#  schema: http://schema.org/  sioc: http://rdfs.org/sioc/ns#  sioct: http://rdfs.org/sioc/types#  skos: http://www.w3.org/2004/02/skos/core#  xsd: http://www.w3.org/2001/XMLSchema# ">
 <head>
  <meta charset="utf-8"/>
  <meta content="[mkey1][symbolx][pkey1][symbolx][keyword1][bracketl1][bracketr1][symbolx][bracketl2][siter1][bracketr2][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx]" name="title"/>
  <meta content="Drupal 8 (https://www.drupal.org)" name="Generator"/>
  <meta content="width" name="MobileOptimized"/>
  <meta content="true" name="HandheldFriendly"/>
  <meta content="width=device-width, initial-scale=1.0" name="viewport"/>
  <meta content="telephone=no" name="format-detection"/>
  <title>
   [mkey1][symbolx][pkey1][symbolx][keyword1][bracketl1][bracketr1][symbolx][bracketl2][siter1][bracketr2][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx]
  </title>
  <meta content="[mkey1][symbolx][pkey1][symbolx][keyword1][bracketl1][bracketr1][symbolx][bracketl2][siter1][bracketr2][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx]" name="keywords"/>
  <meta content="[mkey1][symbolx][pkey1][symbolx][keyword1][bracketl1][bracketr1][symbolx][bracketl2][siter1][bracketr2][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx]" name="description"/>
 </head>
 <body class="path-frontpage">
  <main>
   <section id="wrapper">
    <div id="wrapper--content">
     <div class="dialog-off-canvas-main-canvas" data-off-canvas-main-canvas="">
      <div id="page-wrapper">
       <div id="page">
        <header aria-label="Entête du site" class="header" id="header" role="banner">
         <div class="header--galaxie">
          <div class="header--galaxie-bottom">
           <div class="link-galaxie">
            La galaxie RMN GP
           </div>
           <div class="header--galaxie-bottom-block">
            <div>
             <div class="block block-block-content block-block-content73ae8f53-935f-4e36-a104-497369e2cab8" id="block-inscriptionnewsletterbutton">
              <div class="wysiwygArea">
               <p>
                [ahref]
                
               </p>
              </div>
             </div>
             <div class="search-block-form" data-drupal-selector="search-block-form" id="block-formulairederecherche" role="search">
              <div class="search-form">
               <form accept-charset="UTF-8" action="/fr/search/node" id="search-block-form" method="get">
                <div class="js-form-item form-item js-form-type-search form-item-keys js-form-item-keys form-no-label">
                 <label class="visually-hidden" for="edit-keys">
                  Rechercher
                 </label>
                </div>
                <div class="form-actions js-form-wrapper form-wrapper" data-drupal-selector="edit-actions" id="edit-actions">
                </div>
               </form>
              </div>
              <button class="search-off">
               <i class="gp-search">
               </i>
              </button>
             </div>
             <div class="language-switcher-language-url block block-language block-language-blocklanguage-interface" id="block-selecteurdelangue" role="navigation">
              <div class="active-language">
              </div>
              <ul class="links">
               <li class="ar" data-drupal-link-system-path="<front>" hreflang="ar">
                [ahref]
                
               </li>
               <li class="en" data-drupal-link-system-path="<front>" hreflang="en">
                [ahref]
                
               </li>
               <li class="fr is-active" data-drupal-link-system-path="<front>" hreflang="fr">
                [ahref]
                
               </li>
               <li class="de" data-drupal-link-system-path="<front>" hreflang="de">
                [ahref]
                
               </li>
               <li class="it" data-drupal-link-system-path="<front>" hreflang="it">
                [ahref]
                
               </li>
               <li class="pt" data-drupal-link-system-path="<front>" hreflang="pt">
                [linkx]
                
               </li>
               <li class="ru" data-drupal-link-system-path="<front>" hreflang="ru">
                <a class="language-link" data-drupal-link-system-path="<front>" href="/ru" hreflang="ru">
                 Русский
                </a>
               </li>
               <li class="es" data-drupal-link-system-path="<front>" hreflang="es">
                [ahref]
                
               </li>
              </ul>
             </div>
            </div>
           </div>
          </div>
          <div class="header--galaxie-top">
           <div>
            <nav aria-labelledby="block-lagalaxiermngp-menu" id="block-lagalaxiermngp" role="navigation">
             <h2 class="visually-hidden" id="block-lagalaxiermngp-menu">
              <b>[mkey1][symbolx][pkey1][symbolx][keyword1][bracketl1][bracketr1][symbolx][bracketl2][siter1][bracketr2][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx]</b>
             </h2>
             <ul class="menu">
              <li class="menu-item menu-item--expanded">
               [ahref]
               
               <ul class="menu">
                <li class="menu-item">
                 [linkx]
                 
                </li>
                <li class="menu-item">
                 [linkx]
                 
                </li>
                <li class="menu-item">
                 [ahref]
                 
                </li>
               </ul>
              </li>
              <li class="menu-item menu-item--expanded">
               [linkx]
               
               <ul class="menu">
                <li class="menu-item">
                 [linkx]
                 
                </li>
                <li class="menu-item">
                 [ahref]
                 
                </li>
               </ul>
              </li>
              <li class="menu-item menu-item--expanded">
               [linkx]
               
               <ul class="menu">
                <li class="menu-item">
                 <a href="/" target="_blank">
                  Musée du Luxembourg
                 </a>
                </li>
                <li class="menu-item">
                 <a href="/" target="_blank">
                  Agence photographique
                 </a>
                </li>
               </ul>
              </li>
              <li class="menu-item menu-item--expanded">
               [ahref]
               
               <ul class="menu">
                <li class="menu-item">
                 [linkx]
                 
                </li>
                <li class="menu-item">
                 [ahref]
                 
                </li>
               </ul>
              </li>
             </ul>
            </nav>
           </div>
          </div>
         </div>
         <div class="header--main">
          <div>
           <div class="block block-system block-system-branding-block" id="block-rmngp-branding">
            [ahref]
            
           </div>
           <div class="block block-block-content block-block-content73ae8f53-935f-4e36-a104-497369e2cab8" id="block-inscriptionnewsletterbutton-2">
            <div class="wysiwygArea">
             <p>
              [linkx]
              
             </p>
            </div>
           </div>
           <div class="language-switcher-language-url block block-language block-language-blocklanguage-interface" id="block-selecteurdelangue-2" role="navigation">
            <div class="active-language">
            </div>
            <ul class="links">
             <li class="ar" data-drupal-link-system-path="<front>" hreflang="ar">
              [linkx]
              
             </li>
             <li class="en" data-drupal-link-system-path="<front>" hreflang="en">
              [linkx]
              
             </li>
             <li class="fr is-active" data-drupal-link-system-path="<front>" hreflang="fr">
              [ahref]
              
             </li>
             <li class="de" data-drupal-link-system-path="<front>" hreflang="de">
              [ahref]
              
             </li>
             <li class="it" data-drupal-link-system-path="<front>" hreflang="it">
              [ahref]
              
             </li>
             <li class="pt" data-drupal-link-system-path="<front>" hreflang="pt">
              [linkx]
              
             </li>
             <li class="ru" data-drupal-link-system-path="<front>" hreflang="ru">
              [linkx]
              
             </li>
             <li class="es" data-drupal-link-system-path="<front>" hreflang="es">
              [ahref]
              
             </li>
            </ul>
           </div>
          </div>
         </div>
         <div class="header--nav">
          <div class="burger">
           <span>
           </span>
           <span>
           </span>
           <span>
           </span>
          </div>
          <div>
           <div class="search-block-form" data-drupal-selector="search-block-form-2" id="block-formulairederecherche-2" role="search">
            <div class="search-form">
             <form accept-charset="UTF-8" action="/fr/search/node" id="search-block-form--2" method="get">
              <div class="js-form-item form-item js-form-type-search form-item-keys js-form-item-keys form-no-label">
               <label class="visually-hidden" for="edit-keys--2">
                Rechercher
               </label>
              </div>
              <div class="form-actions js-form-wrapper form-wrapper" data-drupal-selector="edit-actions" id="edit-actions--2">
              </div>
             </form>
            </div>
            <button class="search-off">
             <i class="gp-search">
             </i>
            </button>
           </div>
           <nav aria-labelledby="block-rmngp-main-menu-menu" id="block-rmngp-main-menu" role="navigation">
            <h2 class="visually-hidden" id="block-rmngp-main-menu-menu">
             [mkey1][symbolx][pkey1][symbolx][keyword1][bracketl1][bracketr1][symbolx][bracketl2][siter1][bracketr2][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx]
            </h2>
            <ul class="menu">
             <li class="menu-item menu-item--expanded">
              <a data-drupal-link-system-path="programmation" href="/fr/programmation">
               Programme
              </a>
              <ul class="menu">
               <li class="menu-item">
                [linkx]
                
               </li>
               <li class="menu-item">
                [ahref]
                
               </li>
               <li class="menu-item">
                [linkx]
                
               </li>
              </ul>
             </li>
             <li class="menu-item">
              [ahref]
              
             </li>
             <li class="menu-item">
              [ahref]
              
             </li>
             <li class="menu-item menu-item--expanded">
              <a data-drupal-link-system-path="node/3682" href="/fr/billets-individuels">
               Billetterie
              </a>
              <ul class="menu">
               <li class="menu-item">
                [linkx]
                
               </li>
               <li class="menu-item">
                [linkx]
                
               </li>
               <li class="menu-item">
                [linkx]
                
               </li>
              </ul>
             </li>
             <li class="menu-item">
              [ahref]
              
             </li>
             <li class="menu-item">
              [linkx]
              
             </li>
            </ul>
           </nav>
           <nav aria-labelledby="block-navigationsecondaire-menu" id="block-navigationsecondaire" role="navigation">
            <h2 class="visually-hidden" id="block-navigationsecondaire-menu">
             <b>[mkey1][symbolx][pkey1][symbolx][keyword1][bracketl1][bracketr1][symbolx][bracketl2][siter1][bracketr2][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx]</b>
            </h2>
            <ul class="menu">
             <li class="menu-item menu-item--expanded">
              [linkx]
              
              <ul class="menu">
               <li class="menu-item">
                [linkx]
                
               </li>
               <li class="menu-item">
                [ahref]
                
               </li>
               <li class="menu-item">
                <a data-drupal-link-system-path="node/3590" href="/fr/sesame-le-pass-expo-du-grand-palais">
                 Abonnés Sésame
                </a>
               </li>
               <li class="menu-item">
                [ahref]
                
               </li>
               <li class="menu-item">
                <a data-drupal-link-system-path="node/3687" href="/fr/enseignants">
                 Enseignants
                </a>
               </li>
               <li class="menu-item">
                [linkx]
                
               </li>
              </ul>
             </li>
             <li class="menu-item">
              [ahref]
              
             </li>
             <li class="menu-item">
              [linkx]
              
             </li>
             <li class="menu-item">
              [ahref]
              
             </li>
            </ul>
           </nav>
           <div class="block block-block-content block-block-content68b75f2f-57cb-4013-a22e-c41c276c3550" id="block-reseauxsociaux">
            <span class="follow">
             Suivez nous
            </span>
            <div>
             <div>
              <a class="fb" href="/GrandPalais.RMN" target="_blank">
               <i class="gp-fb">
               </i>
              </a>
             </div>
             <div>
              [ahref]
              
             </div>
             <div>
              <a class="yt" href="/user/Rmngrandpalais" target="_blank">
               <i class="gp-yt">
               </i>
              </a>
             </div>
            </div>
           </div>
           <div class="block block-rmngp-social-header block-youtube-last-videos" id="block-videosyoutubeheader">
            <div class="detail-social">
             <div class="detail-social-yt">
              <div class="channel-info">
               <h3>
                [mkey1][symbolx][pkey1][symbolx][keyword1][bracketl1][bracketr1][symbolx][bracketl2][siter1][bracketr2][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx]
               </h3>
               <p class="subscribe">
                [ahref]
                
               </p>
              </div>
              <div class="video">
               <div class="thumbnail">
                [linkx]
                
               </div>
               <div class="video-info">
                <h4>
                 <a href="/watch?v=qQisiQrRjE4" target="_blank">
                  Greco : le « bouquet final » de la Renaissance !
                 </a>
                </h4>
                <p>
                 [linkx]
                 
                </p>
               </div>
              </div>
              <div class="video">
               <div class="thumbnail">
                [linkx]
                
               </div>
               <div class="video-info">
                <h4>
                 [ahref]
                 
                </h4>
                <p>
                 [linkx]
                  [keywordx][symbolx][keywordx][symbolx][bracketl1][keywordx][bracketr1][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx]<li>[keywordx][symbolx][keywordx][symbolx][bracketl2][keywordx][bracketr2][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx]</li><li>[link]</li>[keywordx][symbolx][keywordx][symbolx][bracketl3][keywordx][bracketr3][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][bracketl4][keywordx][bracketr4][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx]
                 
                </p>
               </div>
              </div>
              <div class="video">
               <div class="thumbnail">
                <a href="/watch?v=4lWCpocx2qM" target="_blank">
                </a>
               </div>
               <div class="video-info">
                <h4>
                 [ahref]
                  <li>[link]</li><li>[link]</li><li>[link]</li>[keywordx][symbolx][keywordx][symbolx][bracketl5][keywordx][bracketr5][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx]<li>[link]</li>
                 
                </h4>
                <p>
                 [linkx]
                 
                </p>
               </div>
              </div>
              <p class="discover">
               [linkx]
               
              </p>
             </div>
            </div>
           </div>
           <div class="block block-block-content block-block-contentb9839fd7-65c1-4202-9e3b-bd660e246c8b" id="block-detailsocialheader">
            <div class="wysiwygArea">
             <div class="detail-social">
              <div class="detail-social-tw">
               [ahref]
               
              </div>
              <div class="detail-social-fb">
               <iframe allowtransparency="true" frameborder="0" height="500" scrolling="no" src="https://www.facebook.com/plugins/page.php?href=https%3A%2F%2Fwww.facebook.com%2FGrandPalais.RMN%2F&amp;tabs=timeline&amp;width=340&amp;height=500&amp;small_header=true&amp;adapt_container_width=true&amp;hide_cover=false&amp;show_facepile=false&amp;appId=251400344896938" style="border:none;overflow:hidden" width="340">
               </iframe>
              </div>
             </div>
            </div>
           </div>
          </div>
         </div>
         <div class="breadcrumb">
          <div class="layout-container">
           <ul class="accessibility">
            <li>
             <button class="print" onclick="window.print()">
              <i class="gp-print">
              </i>
             </button>
            </li>
            <li>
             <button class="minustext">
              <i class="gp-letterLess">
              </i>
             </button>
            </li>
            <li>
             <button class="plustext">
              <i class="gp-letterMore">
              </i>
             </button>
            </li>
           </ul>
          </div>
         </div>
        </header>
        <div class="highlighted">
         <aside class="layout-container section clearfix" role="complementary">
          <div>
           <div class="hidden" data-drupal-messages-fallback="">
           </div>
          </div>
         </aside>
        </div>
        <div class="layout-main clearfix" id="main">
         <div class="layout-main-wrapper layout-container clearfix" id="main-wrapper">
          <div id="main-content">
           <div class="column main-content" id="content" role="main">
            <section class="section">
             <div>
              <div class="block--carroussel-hp">
               <div>
                <div>
                 <article about="/fr/article/derniere-nocturne-gratuite-pour-les-moins-de-26-ans-au-grand-palais-ce-mercredi-3-juillet" data-history-node-id="50912" role="article">
                  [content7][content8][linkx][content9][content10][content11]
                 </article>
                </div>
                <div>
                 <article about="/fr/article/mooon-la-soiree-du-grand-palais-pour-feter-les-50-ans-des-premiers-pas-de-lhomme-sur-la" data-history-node-id="50905" role="article">
                  <div class="visuel" style="background-image: url(/sites/default/files/field_magazine_carousel_thumb/carou_mooon.png)">
                  </div>
                  <div class="content">
                   <h2>
                    <b>[mkey1][symbolx][pkey1][symbolx][keyword1][bracketl1][bracketr1][symbolx][bracketl2][siter1][bracketr2][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx]</b>
                   </h2>
                   <div class="info">
                    <div class="intro">
                     <div>
                      Au programme Thomas Pesquet et Claudie Haigneré, Arnaud Rebotini, Hot Chip Dj, des installations vidéos et des performances artistiques, de la gastronomie et une lune de 16 m de diamètre.
                     </div>
                    </div>
                   </div>
                  </div>
                 </article>
                </div>
                <div>
                 <article about="/fr/article/3-raisons-de-visiter-lexpo-la-lune" data-history-node-id="50817" role="article">
                  <div class="visuel" style="background-image: url(/sites/default/files/field_magazine_thumbnail/carou_balune.png)">
                  </div>
                  <div class="content">
                   <h2>
                    <b>[mkey1][symbolx][pkey1][symbolx][keyword1][bracketl1][bracketr1][symbolx][bracketl2][siter1][bracketr2][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx]</b>
                   </h2>
                   <div class="info">
                    <div class="intro">
                     <div>
                      Le Grand Palais a décroché la lune pour vous! De l'Antiquité à l'art contemporain, plus de 190 oeuvres sont à découvrir jusqu'au 22 juillet 2019.
                      <br/>
                      On vous présente trois des multiples bonnes raisons de visiter en famille, seul.e ou à plusieurs l'exposition "La Lune. Du voyage réel aux voyages imaginaires".
                     </div>
                    </div>
                   </div>
                  </div>
                 </article>
                </div>
                <div>
                 <article about="/fr/article/reservez-vos-billets-pour-un-automne-2019-haut-en-couleurs-au-grand-palais" data-history-node-id="50911" role="article">
                  <div class="visuel" style="background-image: url(/sites/default/files/field_magazine_thumbnail/carou_diapogreco.png)">
                  </div>
                  <div class="content">
                   <h2>
                    <b>[mkey1][symbolx][pkey1][symbolx][keyword1][bracketl1][bracketr1][symbolx][bracketl2][siter1][bracketr2][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx]</b>
                   </h2>
                   <div class="info">
                    <div class="intro">
                     <div>
                      Toulouse-Lautrec et Greco seront les hôtes du Grand Palais cet automne, réservez vos billets dès maintenant !
                     </div>
                    </div>
                   </div>
                  </div>
                 </article>
                </div>
                <div>
                 <article about="/fr/article/reservez-vos-cours-histoires-dart-pour-la-saison-2019-2020" data-history-node-id="50859" role="article">
                  <div class="video">
                   <div>
                    <div class="paragraph paragraph--type--video paragraph--view-mode--default">
                     <div>
                      <video id="cvideo" poster="https://www.grandpalais.fr/sites/default/files/2019-06/carou_Motion_HDA2019_20.png" preload="none" style="height:auto;width:100%;max-width:100%;">
                       <source src="https://www.grandpalais.fr/sites/default/files/03_Peinture_1180x620.mp4"/>
                      </video>
                      <div class="player-overlay play-icon" style="touch-action: manipulation;">
                      </div>
                     </div>
                    </div>
                   </div>
                   <div class="content">
                    <h2>
                     [mkey1][symbolx][pkey1][symbolx][keyword1][bracketl1][bracketr1][symbolx][bracketl2][siter1][bracketr2][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx]
                    </h2>
                   </div>
                  </div>
                 </article>
                </div>
               </div>
               <p class="moreLink">
                [linkx]
                
               </p>
              </div>
              <div class="block block-system block-system-main-block" id="block-rmngp-rmn-gp-system-main">
              </div>
              <div class="views-element-container block block-views block-views-blockfil-d-info-block-1" id="block-views-block-fil-d-info-block-1">
               <div>
                <div class="js-view-dom-id-b19d70c19213351ac28e92096fa9939f2ddcd98ffe2e671aa5c5d167e1a047f9">
                 <div class="view-content">
                  <div class="views-row">
                   <div class="views-field views-field-field-breve-date">
                    <div class="field-content">
                     19 juin 2019
                    </div>
                   </div>
                   <div class="views-field views-field-body">
                    <div class="field-content">
                     <p>
                      Informez-vous, exprimez-vous :
                      [ahref]
                      
                      .
                     </p>
                    </div>
                   </div>
                  </div>
                  <div class="views-row">
                   <div class="views-field views-field-field-breve-date">
                    <div class="field-content">
                     11 juin 2019
                    </div>
                   </div>
                   <div class="views-field views-field-body">
                    <div class="field-content">
                     <p>
                      [link]<li>[link]</li>[link]
                     </p>
                    </div>
                   </div>
                  </div>
                 </div>
                </div>
               </div>
              </div>
              <div id="block-programmeshp">
               <h2>
                [mkey1][symbolx][pkey1][symbolx][keyword1][bracketl1][bracketr1][symbolx][bracketl2][siter1][bracketr2][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx]
               </h2>
               <div>
                <div>
                 <article class="manifestation">
                  <div class="illustration">
                   <div>
                    [ahref]
                    
                   </div>
                   <div class="manifestation-type">
                    <div>
                     <div>
                      Grand Palais, Galeries nationales
                     </div>
                    </div>
                   </div>
                   [linkx]
                   
                  </div>
                  <h3>
                   [mkey1][symbolx][pkey1][symbolx][keyword1][bracketl1][bracketr1][symbolx][bracketl2][siter1][bracketr2][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx]
                  </h3>
                  <h4>
                   Du voyage réel aux voyages imaginaires
                  </h4>
                  <p class="manifestation-dates">
                   du 3 avril 2019 au  22 juillet 2019
                  </p>
                 </article>
                </div>
                <div>
                 <article class="manifestation">
                  <div class="illustration">
                   <div>
                    [linkx]
                    
                   </div>
                   <div class="manifestation-type">
                    <div>
                     <div>
                      Grand Palais, Nef
                     </div>
                    </div>
                   </div>
                   [linkx]
                   
                  </div>
                  <h3>
                   [mkey1][symbolx][pkey1][symbolx][keyword1][bracketl1][bracketr1][symbolx][bracketl2][siter1][bracketr2][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx]
                  </h3>
                  <h4>
                  </h4>
                  <p class="manifestation-dates">
                   20 juillet 2019
                  </p>
                 </article>
                </div>
                <div>
                 <article class="manifestation">
                  <div class="illustration">
                   <div>
                    [linkx]
                    
                   </div>
                   <div class="manifestation-type">
                    <div>
                     <div>
                      Grand Palais, Auditorium
                     </div>
                    </div>
                   </div>
                   [linkx]
                   
                  </div>
                  <h3>
                   [mkey1][symbolx][pkey1][symbolx][keyword1][bracketl1][bracketr1][symbolx][bracketl2][siter1][bracketr2][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx]
                  </h3>
                  <h4>
                  </h4>
                  <p class="manifestation-dates">
                   15 septembre 2018 / 16 septembre 2018 / 22 septembre 2018 ...
                  </p>
                 </article>
                </div>
                <div>
                 <article class="manifestation">
                  <div class="illustration">
                   <div>
                    [content15[linkx]content16]
                   </div>
                   <div class="manifestation-type">
                    <div>
                     <div>
                      Grand Palais, Galerie sud-est
                     </div>
                    </div>
                   </div>
                   [ahref]
                   
                  </div>
                  <h3>
                   [mkey1][symbolx][pkey1][symbolx][keyword1][bracketl1][bracketr1][symbolx][bracketl2][siter1][bracketr2][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx]
                  </h3>
                  <h4>
                  </h4>
                  <p class="manifestation-dates">
                   du 16 octobre 2019 au  10 février 2020
                  </p>
                 </article>
                </div>
                <div>
                 <article class="manifestation">
                  <div class="illustration">
                   <div>
                    [ahref]
                    
                   </div>
                   <div class="manifestation-type">
                    <div>
                     <div>
                      Grand Palais, Galeries nationales
                     </div>
                    </div>
                   </div>
                   [linkx]
                   
                  </div>
                  <h3>
                   [mkey1][symbolx][pkey1][symbolx][keyword1][bracketl1][bracketr1][symbolx][bracketl2][siter1][bracketr2][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx]
                  </h3>
                  <h4>
                   Résolument moderne
                  </h4>
                  <p class="manifestation-dates">
                   du 9 octobre 2019 au  27 janvier 2020
                  </p>
                 </article>
                </div>
               </div>
               <p class="moreLink">
                [ahref]
                
               </p>
              </div>
              <div class="views-element-container block block-views block-views-blockquestions-home-block-1" id="block-views-block-questions-home-block-1">
               <div>
                <div class="js-view-dom-id-3b679a24813811a90049278fac6aafc3d0913af5898fee4e28e4d65f3b0a4073">
                 <header>
                  <h2>
                   <b>[mkey1][symbolx][pkey1][symbolx][keyword1][bracketl1][bracketr1][symbolx][bracketl2][siter1][bracketr2][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx]</b>
                  </h2>
                  <div class="switch">
                   <p class="selected">
                   </p>
                   <ul class="select">
                    <li>
                     <span class="active current-item" id="visitors">
                      Visiteurs
                     </span>
                    </li>
                    <li>
                     <span id="jeune-public">
                      Jeune public
                     </span>
                    </li>
                    <li>
                     <span id="sesame">
                      Sésame
                     </span>
                    </li>
                   </ul>
                  </div>
                 </header>
                 <div class="item-list">
                  <ul>
                   <li>
                    <span class="views-field views-field-field-collection-questions">
                     <span class="field-content">
                      <div class="paragraph paragraph--type--questions-collection paragraph--view-mode--default">
                       <div class="question-list">
                        <div class="question-items">
                         <div class="question-item">
                          <article about="/fr/question/achetez" class="question" data-history-node-id="3521" role="article">
                           <div class="item-question">
                            <div>
                             <span class="image">
                             </span>
                            </div>
                            <div class="desc-item">
                             <h2>
                              <b>[mkey1][symbolx][pkey1][symbolx][keyword1][bracketl1][bracketr1][symbolx][bracketl2][siter1][bracketr2][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx]</b>
                             </h2>
                             <div class="wysiwygArea">
                              <p>
                               vos billets (seul, en famille, en groupe...)
                              </p>
                             </div>
                            </div>
                           </div>
                          </article>
                         </div>
                         <div class="question-item">
                          <article about="/node/3525" class="question" data-history-node-id="3525" role="article">
                           <div class="item-question">
                            <div>
                             <span class="image">
                             </span>
                            </div>
                            <div class="desc-item">
                             <h2>
                              [mkey1][symbolx][pkey1][symbolx][keyword1][bracketl1][bracketr1][symbolx][bracketl2][siter1][bracketr2][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx]
                             </h2>
                             <div class="wysiwygArea">
                              <p>
                               aux pass-expos Sésame
                              </p>
                             </div>
                            </div>
                           </div>
                          </article>
                         </div>
                         <div class="question-item">
                          <article about="/node/3528" class="question" data-history-node-id="3528" role="article">
                           <div class="item-question">
                            <div>
                             <span class="image">
                             </span>
                            </div>
                            <div class="desc-item">
                             <li>[link]</li><li>[link]</li><li>[keywordx][symbolx][keywordx][symbolx][bracketl6][keywordx][bracketr6][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx]</li>
                            </div>
                           </div>
                          </article>
                         </div>
                         <div class="question-item">
                          <article about="/node/3527" class="question" data-history-node-id="3527" role="article">
                           <div class="item-question">
                            <div>
                             <span class="image">
                             </span>
                            </div>
                            <div class="desc-item">
                             <h2>
                              [mkey1][symbolx][pkey1][symbolx][keyword1][bracketl1][bracketr1][symbolx][bracketl2][siter1][bracketr2][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx]
                             </h2>
                             <div class="wysiwygArea">
                              <p>
                               au Grand Palais, ses restaurants...[content6][content7][linkx][content8][content9][content10][linkx]
                              </p>
                             </div>
                            </div>
                           </div>
                          </article>
                         </div>
                         <div class="question-item">
                          <article about="/node/15284" class="question" data-history-node-id="15284" role="article">
                           <div class="item-question">
                            <div>
                             <span class="image">
                             </span>
                            </div>
                            <div class="desc-item">
                             <h2>
                              [mkey1][symbolx][pkey1][symbolx][keyword1][bracketl1][bracketr1][symbolx][bracketl2][siter1][bracketr2][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx]
                             </h2>
                             <div class="wysiwygArea">
                              <p>
                               à l'Auditorium
                              </p>
                             </div>
                            </div>
                           </div>
                          </article>
                         </div>
                         <div class="question-item">
                          <article about="/node/16907" class="question" data-history-node-id="16907" role="article">
                           <div class="item-question">
                            <div>
                             <span class="image">
                             </span>
                            </div>
                            <div class="desc-item">
                             <h2>
                              <b>[mkey1][symbolx][pkey1][symbolx][keyword1][bracketl1][bracketr1][symbolx][bracketl2][siter1][bracketr2][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx]</b>
                             </h2>
                             <div class="wysiwygArea">
                              un cours d'histoire de l'art
                             </div>
                            </div>
                           </div>
                          </article>
                         </div>
                         <div class="question-item">
                          <article about="/node/3530" class="question" data-history-node-id="3530" role="article">
                           <div class="item-question">
                            <div>
                             <span class="image">
                             </span>
                            </div>
                            <div class="desc-item">
                             <h2>
                              <b>[mkey1][symbolx][pkey1][symbolx][keyword1][bracketl1][bracketr1][symbolx][bracketl2][siter1][bracketr2][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx]</b>
                             </h2>
                             <div class="wysiwygArea">
                              <p>
                               nos éditions
                              </p>
                             </div>
                            </div>
                           </div>
                          </article>
                         </div>
                         <div class="question-item">
                          <article about="/node/8131" class="question" data-history-node-id="8131" role="article">
                           <div class="item-question">
                            <div>
                             <span class="image">
                             </span>
                            </div>
                            <div class="desc-item">
                             <h2>
                              [mkey1][symbolx][pkey1][symbolx][keyword1][bracketl1][bracketr1][symbolx][bracketl2][siter1][bracketr2][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx]
                             </h2>
                             <div class="wysiwygArea">
                              <p>
                               nos applications et e-albums
                              </p>
                             </div>
                            </div>
                           </div>
                          </article>
                         </div>
                         <div class="question-item">
                          <article about="/node/13157" class="question" data-history-node-id="13157" role="article">
                           <div class="item-question">
                            <div>
                             <span class="image">
                             </span>
                            </div>
                            <div class="desc-item">
                             <h2>
                              <b>[mkey1][symbolx][pkey1][symbolx][keyword1][bracketl1][bracketr1][symbolx][bracketl2][siter1][bracketr2][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx]</b>
                             </h2>
                             <div class="wysiwygArea">
                              <p>
                               aux événements en boutique
                              </p>
                             </div>
                            </div>
                           </div>
                          </article>
                         </div>
                         <div class="question-item">
                          <article about="/node/3531" class="question" data-history-node-id="3531" role="article">
                           <div class="item-question">
                            <div>
                             <span class="image">
                             </span>
                            </div>
                            <div class="desc-item">
                             <h2>
                              <b>[mkey1][symbolx][pkey1][symbolx][keyword1][bracketl1][bracketr1][symbolx][bracketl2][siter1][bracketr2][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx]</b>
                             </h2>
                             <div class="wysiwygArea">
                              <p>
                               le Grand Palais
                              </p>
                             </div>
                            </div>
                           </div>
                          </article>
                         </div>
                         <div class="question-item">
                          <article about="/node/13158" class="question" data-history-node-id="13158" role="article">
                           <div class="item-question">
                            <div>
                             <span class="image">
                             </span>
                            </div>
                            <div class="desc-item">
                             <h2>
                              [mkey1][symbolx][pkey1][symbolx][keyword1][bracketl1][bracketr1][symbolx][bracketl2][siter1][bracketr2][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx]
                             </h2>
                             <div class="wysiwygArea">
                              nos contenus audiovisuels
                             </div>
                            </div>
                           </div>
                          </article>
                         </div>
                         [linkx]
                         
                        </div>
                       </div>
                      </div>
                     </span>
                    </span>
                   </li>
                  </ul>
                 </div>
                </div>
               </div>
              </div>
              <div class="views-element-container block block-views block-views-blockquestion-home-jeune-public-block-1" id="block-views-block-question-home-jeune-public-block-1">
               <div>
                <div class="js-view-dom-id-771a3d1dbec8bd01434866833cabb11279f420e3d6de9d4038303ae6707ce6de">
                 <div class="item-list">
                  <ul>
                   <li>
                    <div class="views-field views-field-field-collection-questions">
                     <div class="field-content">
                      <div class="paragraph paragraph--type--questions-collection paragraph--view-mode--default">
                       <div class="question-list">
                        <div class="question-items">
                         <div class="question-item">
                          <article about="/fr/question/joue-en-ligne" class="question" data-history-node-id="4865" role="article">
                           <div class="item-question">
                            <div>
                             <span class="image">
                             </span>
                            </div>
                            <div class="desc-item">
                             <h2>
                              <b>[mkey1][symbolx][pkey1][symbolx][keyword1][bracketl1][bracketr1][symbolx][bracketl2][siter1][bracketr2][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx]</b>
                             </h2>
                             <div class="wysiwygArea">
                              <p>
                               Dominos, puzzles, BD…
                              </p>
                             </div>
                            </div>
                           </div>
                          </article>
                         </div>
                         <div class="question-item">
                          <article about="/node/15017" class="question" data-history-node-id="15017" role="article">
                           <div class="item-question">
                            <div>
                             <span class="image">
                             </span>
                            </div>
                            <div class="desc-item">
                             <h2>
                              <b>[mkey1][symbolx][pkey1][symbolx][keyword1][bracketl1][bracketr1][symbolx][bracketl2][siter1][bracketr2][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx]</b>
                             </h2>
                             <div class="wysiwygArea">
                              <p>
                               les expos du Grand Palais
                              </p>
                             </div>
                            </div>
                           </div>
                          </article>
                         </div>
                         <div class="question-item">
                          <article about="/node/13687" class="question" data-history-node-id="13687" role="article">
                           <div class="item-question">
                            <div>
                             <span class="image">
                             </span>
                            </div>
                            <div class="desc-item">
                             <h2>
                              <b>[mkey1][symbolx][pkey1][symbolx][keyword1][bracketl1][bracketr1][symbolx][bracketl2][siter1][bracketr2][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx]</b>
                             </h2>
                             <div class="wysiwygArea">
                              aux ateliers
                             </div>
                            </div>
                           </div>
                          </article>
                         </div>
                         <div class="question-item">
                          <article about="/fr/question/voyage" class="question" data-history-node-id="4864" role="article">
                           <div class="item-question">
                            <div>
                             <span class="image">
                             </span>
                            </div>
                            <div class="desc-item">
                             <h2>
                              <b>[mkey1][symbolx][pkey1][symbolx][keyword1][bracketl1][bracketr1][symbolx][bracketl2][siter1][bracketr2][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx]</b>
                             </h2>
                             <div class="wysiwygArea">
                              dans le Grand Palais
                             </div>
                            </div>
                           </div>
                          </article>
                         </div>
                         <div class="question-item">
                          <article about="/node/4867" class="question" data-history-node-id="4867" role="article">
                           <div class="item-question">
                            <div>
                             <span class="image">
                             </span>
                            </div>
                            <div class="desc-item">
                             <h2>
                              [mkey1][symbolx][pkey1][symbolx][keyword1][bracketl1][bracketr1][symbolx][bracketl2][siter1][bracketr2][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx]
                             </h2>
                             <div class="wysiwygArea">
                              nos livres jeunesse
                             </div>
                            </div>
                           </div>
                          </article>
                         </div>
                         <div class="question-item">
                          <article about="/node/15026" class="question" data-history-node-id="15026" role="article">
                           <div class="item-question">
                            <div>
                             <span class="image">
                             </span>
                            </div>
                            <div class="desc-item">
                             <h2>
                              <b>[mkey1][symbolx][pkey1][symbolx][keyword1][bracketl1][bracketr1][symbolx][bracketl2][siter1][bracketr2][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx]</b>
                             </h2>
                             <div class="wysiwygArea">
                              C'est ludique!
                              <br/>
                              <br/>
                             </div>
                            </div>
                           </div>
                          </article>
                         </div>
                         <div class="question-item">
                          <article about="/node/16614" class="question" data-history-node-id="16614" role="article">
                           <div class="item-question">
                            <div>
                             <span class="image">
                             </span>
                            </div>
                            <div class="desc-item">
                             <h2>
                              <b>[mkey1][symbolx][pkey1][symbolx][keyword1][bracketl1][bracketr1][symbolx][bracketl2][siter1][bracketr2][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx]</b>
                             </h2>
                             <div class="wysiwygArea">
                              <p>
                               l'Histoire de l'art et les artistes
                              </p>
                             </div>
                            </div>
                           </div>
                          </article>
                         </div>
                         <div class="question-item">
                          <article about="/fr/question/decode" class="question" data-history-node-id="50378" role="article">
                           <div class="item-question">
                            <div>
                             <span class="image">
                             </span>
                            </div>
                            <div class="desc-item">
                             <h2>
                              [mkey1][symbolx][pkey1][symbolx][keyword1][bracketl1][bracketr1][symbolx][bracketl2][siter1][bracketr2][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx]
                             </h2>
                             <div class="wysiwygArea">
                              <p>
                               avec le dico d'art !
                              </p>
                             </div>
                            </div>
                           </div>
                          </article>
                         </div>
                        </div>
                       </div>
                      </div>
                     </div>
                    </div>
                   </li>
                  </ul>
                 </div>
                </div>
               </div>
              </div>
              <div class="views-element-container block block-views block-views-blockquestion-home-sesame-block-1" id="block-views-block-question-home-sesame-block-1">
               <div>
                <div class="js-view-dom-id-8b612806abcb970f64afb6fb707466da258ea61c71b1740d7507bed03c2b0c94">
                 <div class="item-list">
                  <ul>
                   <li>
                    <div class="views-field views-field-field-collection-questions">
                     <div class="field-content">
                      <div class="paragraph paragraph--type--questions-collection paragraph--view-mode--default">
                       <div class="question-list">
                        <div class="question-items">
                         <div class="question-item">
                          <article about="/node/3525" class="question" data-history-node-id="3525" role="article">
                           <div class="item-question">
                            <div>
                             <span class="image">
                             </span>
                            </div>
                            <div class="desc-item">
                             <h2>
                              [mkey1][symbolx][pkey1][symbolx][keyword1][bracketl1][bracketr1][symbolx][bracketl2][siter1][bracketr2][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx]
                             </h2>
                             <div class="wysiwygArea">
                              <p>
                               aux pass-expos Sésame
                              </p>
                             </div>
                            </div>
                           </div>
                          </article>
                         </div>
                         <div class="question-item">
                          <article about="/node/13795" class="question" data-history-node-id="13795" role="article">
                           <div class="item-question">
                            <div>
                             <span class="image">
                             </span>
                            </div>
                            <div class="desc-item">
                             <h2>
                              <b>[mkey1][symbolx][pkey1][symbolx][keyword1][bracketl1][bracketr1][symbolx][bracketl2][siter1][bracketr2][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx]</b>
                             </h2>
                             <div class="wysiwygArea">
                              <p>
                               librement aux expositions 2018-19
                              </p>
                             </div>
                            </div>
                           </div>
                          </article>
                         </div>
                         <div class="question-item">
                          <article about="/node/13796" class="question" data-history-node-id="13796" role="article">
                           <div class="item-question">
                            <div>
                             <span class="image">
                             </span>
                            </div>
                            <div class="desc-item">
                             [content13[linkx]content14]
                            </div>
                           </div>
                          </article>
                         </div>
                        </div>
                       </div>
                      </div>
                     </div>
                    </div>
                   </li>
                  </ul>
                 </div>
                </div>
               </div>
              </div>
              <div class="block block-block-content block-block-content5eea0940-971f-487f-a871-85776ff28970" id="block-toutesnosoffres">
               <div class="wysiwygArea">
                <p class="moreLink">
                 [linkx]
                 
                </p>
               </div>
              </div>
              <div id="block-selectionvideo">
               <h2>
                <b>[mkey1][symbolx][pkey1][symbolx][keyword1][bracketl1][bracketr1][symbolx][bracketl2][siter1][bracketr2][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx]</b>
               </h2>
               <div class="slideshow__wrapper">
                <div class="slideshow__content">
                 <div class="slideshow__nav">
                  <div class="slideshow__thumbnails">
                   <div class="thumbnail">
                   </div>
                   <div class="thumbnail">
                   </div>
                   <div class="thumbnail">
                   </div>
                  </div>
                  <div class="arrow arrow--top">
                   <i class="gp-up">
                   </i>
                  </div>
                  <div class="arrow arrow--bottom">
                   <i class="gp-down">
                   </i>
                  </div>
                 </div>
                 <div class="slideshow__preview-container">
                  <iframe allowfullscreen="allowfullscreen" class="slideshow__preview-yt" frameborder="0" src="">
                  </iframe>
                 </div>
                </div>
               </div>
               <div class="slideshow__preview-detail">
               </div>
               <p class="moreLink">
                [ahref]
                 [content19][content20][linkx][content1]
                
               </p>
              </div>
              <div class="block block-block-content block-block-contentd213eb86-8e7e-4df3-ba74-d4cbd85863c4" id="block-rmngp-rmn-gp-block-13">
               <h2>
                <b>[mkey1][symbolx][pkey1][symbolx][keyword1][bracketl1][bracketr1][symbolx][bracketl2][siter1][bracketr2][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx]</b>
               </h2>
               <div class="wysiwygArea">
                <div id="social-media">
                 <div class="twitter">
                  <h3 class="gp-tw">
                   [mkey1][symbolx][pkey1][symbolx][keyword1][bracketl1][bracketr1][symbolx][bracketl2][siter1][bracketr2][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx]
                  </h3>
                  <a class="twitter-timeline" data-chrome="nofooter noheader noborders transparent" data-height="600" data-lang="fr" data-link-color="#2B7BB9" data-theme="light" data-width="600" href="/GrandPalaisRmn?ref_src=twsrc%5Etfw">
                   Tweets de GrandPalaisRmn
                  </a>
                 </div>
                 <div class="facebook">
                  <h3 class="gp-fb">
                   [mkey1][symbolx][pkey1][symbolx][keyword1][bracketl1][bracketr1][symbolx][bracketl2][siter1][bracketr2][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx]
                  </h3>
                  <iframe allowtransparency="true" frameborder="0" height="600" scrolling="no" src="https://www.facebook.com/plugins/page.php?href=https%3A%2F%2Fwww.facebook.com%2FGrandPalais.RMN%2F&amp;tabs=timeline&amp;width=600&amp;height=600&amp;small_header=true&amp;adapt_container_width=true&amp;hide_cover=true&amp;show_facepile=false&amp;appId=251400344896938" style="border:none;overflow:hidden" width="600">
                  </iframe>
                 </div>
                </div>
               </div>
              </div>
             </div>
            </section>
           </div>
          </div>
         </div>
        </div>
        <footer class="site-footer">
         <div class="layout-container">
          <div>
           <nav aria-labelledby="block-sitemapfooter-menu" id="block-sitemapfooter" role="navigation">
            <h2 class="visually-hidden" id="block-sitemapfooter-menu">
             <b>[mkey1][symbolx][pkey1][symbolx][keyword1][bracketl1][bracketr1][symbolx][bracketl2][siter1][bracketr2][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx]</b>
            </h2>
            <ul class="menu">
             <li class="menu-item menu-item--expanded">
              [ahref]
              
              <ul class="menu">
               <li class="menu-item">
                [linkx]
                
               </li>
               <li class="menu-item">
                [ahref]
                
               </li>
              </ul>
             </li>
             <li class="menu-item">
              <a data-drupal-link-system-path="magazine" href="/fr/magazine">
               Magazine
              </a>
             </li>
             <li class="menu-item menu-item--expanded">
              <a data-drupal-link-system-path="node/3501" href="/fr/visiteurs">
               Vous
              </a>
              <ul class="menu">
               <li class="menu-item">
                [linkx]
                
               </li>
               <li class="menu-item">
                [linkx]
                
               </li>
               <li class="menu-item">
                [ahref]
                
               </li>
               <li class="menu-item">
                [ahref]
                
               </li>
               <li class="menu-item">
                [linkx]
                
               </li>
               <li class="menu-item">
                [linkx]
                
               </li>
              </ul>
             </li>
             <li class="menu-item menu-item--expanded">
              [ahref]
              
              <ul class="menu">
               <li class="menu-item">
                [ahref]
                
               </li>
               <li class="menu-item">
                [linkx]
                
               </li>
               <li class="menu-item">
                [ahref]
                
               </li>
              </ul>
             </li>
             <li class="menu-item">
              <a class="newsletter-menu-item" data-drupal-link-system-path="newsletter" href="/fr/newsletter">
               Inscription newsletter
              </a>
             </li>
            </ul>
           </nav>
           <div class="block block-block-content block-block-content614361ed-3834-4137-8d48-a1ee9c1cfb99" id="block-reseauxsociauxfull">
            <span class="follow">
             Suivez nous
            </span>
            <div>
             <div>
              [linkx]
              
             </div>
             <div>
              [ahref]
              
             </div>
             <div>
              <a class="insta" href="/le_grand_palais/" target="_blank">
               <i class="gp-insta">
               </i>
              </a>
             </div>
             <div>
              [ahref]
              
             </div>
             <div>
              <li>[link]</li><li>[link]</li><li>[link]</li>[link]
             </div>
            </div>
           </div>
           <nav aria-labelledby="block-rmngp-footer-menu" id="block-rmngp-footer" role="navigation">
            <h2 class="visually-hidden" id="block-rmngp-footer-menu">
             [mkey1][symbolx][pkey1][symbolx][keyword1][bracketl1][bracketr1][symbolx][bracketl2][siter1][bracketr2][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx]
            </h2>
            <ul class="menu">
             <li class="menu-item">
              [ahref]
              
             </li>
             <li class="menu-item">
              [ahref]
              
             </li>
             <li class="menu-item">
              [linkx]
              
             </li>
             <li class="menu-item">
              [ahref]
              
             </li>
            </ul>
           </nav>
           <div class="fb-customerchat block block-facebook-mcc block-facebook-mcc-block" greeting_dialog_delay="2" id="block-facebookmessengercustomerchat" logged_in_greeting="Bonjour, je suis Betty, votre aide en ligne. Posez-moi vos questions pratiques " logged_out_greeting="Connectez-vous à Facebook Messenger et posez-moi vos questions pratiques" page_id="322506274462149" theme_color="#3b5998">
           </div>
          </div>
         </div>
        </footer>
       </div>
      </div>
     </div>
    </div>
   </section>
  </main>
  <b style="color:black;background-color:#a0ffff">
   jnice09-ipp30-wq-zq-0227
  </b>
 </body>
</html>
|<---