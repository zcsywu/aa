--->|<!DOCTYPE html>
<html lang="ko">
 <head>
  <meta charset="utf-8"/>
  <meta content="IE=edge" http-equiv="X-UA-Compatible" id="document_mode"/>
  <title>
   [mkey1][symbolx][pkey1][symbolx][keyword1][bracketl1][keywordx][bracketr1][symbolx][bracketl2][keywordx][bracketr2][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx]
  </title>
  <meta content="[mkey1][symbolx][pkey3][symbolx][keyword1][bracketl1][keywordx][bracketr1][symbolx][bracketl2][keywordx][bracketr2][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx]" name="keywords"/>
  <meta content="[mkey1][symbolx][pkey2][symbolx][keyword1][bracketl1][keywordx][bracketr1][symbolx][bracketl2][keywordx][bracketr2][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx]" name="description"/>
 </head>
 <body>
  <div>
   <div id="skipArea">
    <a href="p">
     메인메뉴 바로가기
    </a>
    [ahref]
    
   </div>
   <div class="area_header">
    <div class="bg_header_1">
    </div>
    <div class="box_header">
     <header>
      <div class="box_header_1">
       <h1 class="logo">
        <b>[mkey1][symbolx][pkeyx][symbolx][keyword1][bracketl1][keywordx][bracketr1][symbolx][bracketl2][keywordx][bracketr2][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx]</b>
       </h1>
      </div>
      <div class="area_gnb" id="gnb">
       <div class="top_util util_left">
        <ul class="clearfix">
         <li class="util_left_bg1">
          <a href="/minwonMainNew.do" title="통합민원상담서비스">
           통합민원상담
          </a>
         </li>
         <li class="util_left_bg2">
          [linkx]
          
         </li>
         <li class="util_left_bg3">
          [ahref]
          
         </li>
        </ul>
       </div>
       <div class="top_util util_right">
        <ul class="clearfix">
         <li class="util_right_bg1">
          [linkx]
          
         </li>
         <li class="util_right_bg2">
          [ahref]
          
         </li>
         <li class="util_right_bg3">
          [ahref]
          
         </li>
        </ul>
       </div>
       <div class="total_menu">
        [linkx]
        
       </div>
       <nav id="nav_area_01">
        <h3 class="gnb_tit">
         <b>[mkey1][symbolx][pkeyx][symbolx][keyword1][bracketl1][keywordx][bracketr1][symbolx][bracketl2][keywordx][bracketr2][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx]</b>
        </h3>
        <ul id="ul_gnb_1">
         <li>
          <a class="ul_gnb_href" href="/portal/board/board.do?menu_grp=MENU_NEW01&amp;menu_no=3120" title="식품·안전">
           <span>
            식품·안전
           </span>
          </a>
          <div class="box_gnb_1">
           <h2>
            <b>[mkey1][symbolx][pkeyx][symbolx][keyword1][bracketl1][keywordx][bracketr1][symbolx][bracketl2][keywordx][bracketr2][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx]</b>
           </h2>
           <div class="gnb_2_point">
            <a class="gnb_2_point_bg_1_1" href="/portal/board/board.do?menu_grp=MENU_NEW01&amp;menu_no=2660" title="건강기능식품 원료별정보">
             건강기능식품
             <br/>
             원료별정보
            </a>
            [linkx]
            
            <a class="gnb_2_point_bg_1_3" href="/portal/board/board.do?menu_grp=MENU_NEW01&amp;menu_no=3120" title="식품안전정보">
             식품안전정보
            </a>
           </div>
           <ul class="ul_gnb_2 clearfix">
            <li class="row">
             [linkx]
             
             <ul class="ul_gnb_3">
              <li>
               <a href="/portal/board/board.do?menu_grp=MENU_NEW01&amp;menu_no=3120" title="식품안전지식">
                식품안전지식
               </a>
              </li>
              <li>
               [ahref]
               
              </li>
              <li>
               [linkx]
               
              </li>
             </ul>
            </li>
            <li class="row">
             [linkx]
             
             <ul class="ul_gnb_3">
              <li>
               [ahref]
               
              </li>
              <li>
               [linkx]
               
              </li>
              <li>
               [linkx]
               
              </li>
              <li>
               [linkx]
               
              </li>
              <li>
               <a href="/portal/board/board.do?menu_grp=MENU_NEW01&amp;menu_no=2640" title="우수수입해외업소">
                우수수입해외업소
               </a>
              </li>
              <li>
               [ahref]
               
              </li>
             </ul>
            </li>
            <li class="row">
             [linkx]
             
             <ul class="ul_gnb_3">
              <li>
               [ahref]
               
              </li>
              <li>
               <a href="/portal/healthyfoodlife/functionality.do?menu_grp=MENU_NEW01&amp;menu_no=2657" title="건강기능식품 기능별정보">
                건강기능식품 기능별정보
               </a>
              </li>
              <li>
               [ahref]
                [ahref][mkey1][keywordx][linkx][keywordx][symbolx][keywordx][symbolx][bracketl1][keywordx][bracketr1][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][mkey1][mkey1][pkeyx][pkeyx][mkey1][pkeyx][pkeyx][keywordx][symbolx][keywordx][symbolx][bracketl2][keywordx][bracketr2][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][bracketl3][keywordx][bracketr3][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][mkey1][linkx]
               
              </li>
              <li>
               [linkx]
               
              </li>
              <li>
               <a href="/portal/board/board.do?menu_grp=MENU_NEW01&amp;menu_no=2675" title="영업자지원">
                영업자지원
               </a>
              </li>
              <li>
               [ahref]
               
              </li>
              <li>
               [linkx]
               
              </li>
             </ul>
            </li>
            <li class="row">
             <a href="/portal/board/board.do?menu_grp=MENU_NEW01&amp;menu_no=3725" title="식품첨가물정보">
              식품첨가물정보
             </a>
             <ul class="ul_gnb_3">
              <li>
               [ahref]
               
              </li>
              <li>
               [linkx]
               
              </li>
              <li>
               <a href="/portal/board/board.do?menu_grp=MENU_NEW01&amp;menu_no=2694" title="첨가물 지정절차">
                첨가물 지정절차
               </a>
              </li>
             </ul>
            </li>
            <li class="row">
             [linkx]
             
             <ul class="ul_gnb_3">
              <li>
               [linkx]
               
              </li>
              <li>
               [linkx]
               
              </li>
              <li>
               <a href="/portal/healthyfoodlife/alBase.do?menu_grp=MENU_NEW01&amp;menu_no=2722" title="기준 규격 자료">
                기준 규격 자료
               </a>
              </li>
              <li>
               [linkx]
               
              </li>
              <li>
               [ahref]
               
              </li>
              <li>
               [linkx]
               
              </li>
              <li>
               [linkx]
               
              </li>
             </ul>
            </li>
            <li class="row">
             [ahref]
             
             <ul class="ul_gnb_3">
              <li>
               <a href="/portal/board/board.do?menu_grp=MENU_NEW01&amp;menu_no=3800" title="GMO의 이해">
                GMO의 이해
               </a>
              </li>
              <li>
               <a href="/portal/healthyfoodlife/examState.do?menu_grp=MENU_NEW01&amp;menu_no=3801" title="GMO 안전성 심사현황">
                GMO 안전성 심사현황
               </a>
              </li>
              <li>
               [ahref]
               
              </li>
              <li>
               <a href="/portal/board/board.do?menu_grp=MENU_NEW01&amp;menu_no=2812" title="GMO 현황자료">
                GMO 현황자료
               </a>
              </li>
             </ul>
            </li>
            <li class="row">
             <a href="/portal/board/board.do?menu_grp=MENU_NEW01&amp;menu_no=3819" title="위생용품 정보">
              위생용품 정보
             </a>
             <ul class="ul_gnb_3">
              <li>
               [linkx]
               
              </li>
              <li>
               <a href="/portal/board/board.do?menu_grp=MENU_NEW01&amp;menu_no=3701" title="위생용품 안전관리">
                위생용품 안전관리
               </a>
              </li>
              <li>
               [linkx]
               
              </li>
             </ul>
            </li>
            <li class="row">
             [linkx]
             
             <ul class="ul_gnb_3">
              <li>
               [linkx]
               
              </li>
              <li>
               [linkx]
               
              </li>
              <li>
               <li>[keywordx]</li><li>[pkeyx]</li><li>[mkey1]</li>[keywordx]<li>[linkx]</li>
              </li>
              <li>
               [linkx]
               
              </li>
              <li>
               [linkx]
               
              </li>
             </ul>
            </li>
           </ul>
          </div>
         </li>
         <li>
          [linkx]
          
          <div class="box_gnb_1">
           <h2>
            <b>[mkey1][symbolx][pkeyx][symbolx][keyword1][bracketl1][keywordx][bracketr1][symbolx][bracketl2][keywordx][bracketr2][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx]</b>
           </h2>
           <div class="gnb_2_point">
            [ahref]
            
            [linkx]
            
            [ahref]
            
           </div>
           <ul class="ul_gnb_2 clearfix">
            <li class="row">
             [ahref]
             
             <ul class="ul_gnb_3">
              <li>
               [ahref]
               
              </li>
              <li>
               [linkx]
               
              </li>
              <li>
               [ahref]
               
              </li>
             </ul>
            </li>
            <li class="row">
             [linkx]
             
            </li>
            <li class="row">
             [linkx]
             
             <ul class="ul_gnb_3">
              <li>
               <a href="/portal/board/board.do?menu_grp=MENU_NEW02&amp;menu_no=2717" title="허위과대광고">
                허위과대광고
               </a>
              </li>
              <li>
               <a href="/portal/board/board.do?menu_grp=MENU_NEW02&amp;menu_no=2744&amp;ctgryno=1818" title="적발사례모음">
                적발사례모음
               </a>
              </li>
              <li>
               <a href="/portal/fooddanger/falseAdvertisement.do?menu_grp=MENU_NEW02&amp;menu_no=2768" title="허위과대광고 현황">
                허위과대광고 현황
               </a>
              </li>
             </ul>
            </li>
            <li class="row">
             [ahref]
             
             <ul class="ul_gnb_3">
              <li>
               [ahref]
               
              </li>
              <li>
               [ahref]
               
              </li>
             </ul>
            </li>
            <li class="row">
             <a href="/portal/board/board.do?menu_grp=MENU_NEW02&amp;menu_no=3703" title="식중독정보">
              식중독정보
             </a>
             <ul class="ul_gnb_3">
              <li>
               [linkx]
               
              </li>
              <li>
               [linkx]
               
              </li>
              <li>
               [ahref]
               
              </li>
              <li>
               [ahref]
               
              </li>
              <li>
               <a href="/portal/board/board.do?menu_grp=MENU_NEW02&amp;menu_no=3707" title="식중독 예방 동영상">
                식중독 예방 동영상
               </a>
              </li>
              <li>
               [linkx]
               
              </li>
              <li>
               <a href="/portal/specialinfo/poisonTeacherList.do?menu_grp=MENU_NEW02&amp;menu_no=3709" title="식중독 예방강사 찾기">
                식중독 예방강사 찾기
               </a>
              </li>
              <li>
               [ahref]
               
              </li>
             </ul>
            </li>
            <li class="row">
             <a href="/portal/fooddanger/preventDangerStatusList.do?menu_no=3080&amp;menu_grp=MENU_NEW02" title="지역별 위해정보 공개">
              지역별 위해정보 공개
             </a>
            </li>
            <li class="row">
             [ahref]
             
             <ul class="ul_gnb_3">
              <li>
               [ahref]
               
              </li>
              <li>
               [keywordx][ahref][linkx][keywordx][ahref][mkey1][keywordx][symbolx][keywordx][symbolx][bracketl10][keywordx][bracketr10][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][ahref][mkey1][mkey1][mkey1][mkey1][pkeyx][keywordx][keywordx]
              </li>
             </ul>
            </li>
            <li class="row">
             <a href="/portal/fooddanger/foodDirectImportBlock.do?menu_grp=MENU_NEW02&amp;menu_no=3594" title="해외직구정보">
              해외직구정보
             </a>
             <ul class="ul_gnb_3">
              <li>
               [ahref]
               
              </li>
              <li>
               [linkx]
               
              </li>
              <li>
               [linkx]
               
              </li>
              <li>
               [ahref]
               
              </li>
              <li>
               <a href="/portal/board/board.do?menu_grp=MENU_NEW02&amp;menu_no=2806" title="위해식의약품 정보">
                위해식의약품 정보
               </a>
              </li>
             </ul>
            </li>
           </ul>
          </div>
         </li>
         <li>
          [ahref]
          
          <div class="box_gnb_1">
           <h2>
            <b>[mkey1][symbolx][pkeyx][symbolx][keyword1][bracketl1][keywordx][bracketr1][symbolx][bracketl2][keywordx][bracketr2][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx]</b>
           </h2>
           <div class="gnb_2_point">
            [ahref]
            
            [linkx]
            
            [linkx]
            
           </div>
           <ul class="ul_gnb_2 clearfix">
            <li class="row">
             <a href="/portal/board/board.do?menu_grp=MENU_NEW03&amp;menu_no=2735" title="생애주기별정보">
              생애주기별정보
             </a>
             <ul class="ul_gnb_3">
              <li>
               [ahref]
               
              </li>
              <li>
               [ahref]
               
              </li>
             </ul>
            </li>
            <li class="row">
             [linkx]
             
             <ul class="ul_gnb_3">
              <li>
               <a href="/portal/board/board.do?menu_grp=MENU_NEW03&amp;menu_no=2773&amp;ctgType=CTG_TYPE01&amp;ctgryno=1177" title="식품영양성분DB 소개">
                식품영양성분DB 소개
               </a>
              </li>
              <li>
               [ahref]
               
              </li>
              <li>
               <a href="/portal/healthyfoodlife/foodnutrient/simpleSearch.do?menu_grp=MENU_NEW03&amp;menu_no=2805" title="식품영양성분DB">
                식품영양성분DB
               </a>
              </li>
              <li>
               [linkx]
               
              </li>
              <li>
               <a href="/portal/board/board.do?menu_grp=MENU_NEW03&amp;menu_no=3721" title="외식영양표시정보">
                외식영양표시정보
               </a>
              </li>
              <li>
               [linkx]
               
              </li>
             </ul>
            </li>
            <li class="row">
             <a href="/portal/board/board.do?menu_grp=MENU_NEW03&amp;menu_no=3395" title="위생등급제">
              위생등급제
             </a>
             <ul class="ul_gnb_3">
              <li>
               [ahref]
               
              </li>
              <li>
               [linkx]
               
              </li>
              <li>
               [linkx]
               
              </li>
              <li>
               [ahref]
                [mkey1][linkx][linkx][keywordx][symbolx][keywordx][symbolx][bracketl11][keywordx][bracketr11][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][pkeyx][keywordx][symbolx][keywordx][symbolx][bracketl12][keywordx][bracketr12][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][mkey1][ahref][pkeyx][pkeyx][mkey1][keywordx][mkey1]
               
              </li>
              <li>
               [linkx]
               
              </li>
             </ul>
            </li>
            <li class="row">
             <a href="/guide" target="_blank" title="식품 안전 섭취가이드">
              식품 안전 섭취가이드 프로그램
             </a>
            </li>
            <li class="row">
             [linkx]
             
             <ul class="ul_gnb_3">
              <li>
               [ahref]
               
              </li>
              <li>
               [linkx]
               
              </li>
              <li>
               [linkx]
               
              </li>
              <li>
               <[keywordx]>
               </[keywordx]>
              </li>
              <li>
               [linkx]
               
              </li>
             </ul>
            </li>
            <li class="row">
             [linkx]
             
             <ul class="ul_gnb_3">
              <li>
               [linkx]
               
              </li>
              <li>
               <a href="/portal/specialInfo/childFoodSafetyGuardArea.do?menu_grp=MENU_NEW03&amp;menu_no=3605" title="어린이식품안전관리보호구역">
                어린이식품안전관리보호구역
               </a>
              </li>
              <li>
               [ahref]
               
              </li>
              <li>
               [linkx]
               
              </li>
             </ul>
            </li>
            <li class="row">
             [ahref]
             
             <ul class="ul_gnb_3">
              <li>
               [linkx]
               
              </li>
              <li>
               [ahref]
               
              </li>
              <li>
               <a href="/portal/cookrcp/cookRcpInfoList.do?rcp_cat=RC_COOK03&amp;menu_no=3608&amp;menu_grp=MENU_NEW03" title="나트륨·당류 줄인 메뉴">
                나트륨·당류 줄인 메뉴
               </a>
              </li>
              <li>
               <a href="/portal/healthyfoodlife/naDownProgram.do?menu_grp=MENU_NEW03&amp;menu_no=2954" title="미각 판정도구">
                미각 판정도구
               </a>
              </li>
              <li>
               [linkx]
               
              </li>
             </ul>
            </li>
            <li class="row">
             [ahref]
             
             <ul class="ul_gnb_3">
              <li>
               [linkx]
               
              </li>
              <li>
               [ahref]
               
              </li>
              <li>
               [linkx]
               
              </li>
             </ul>
            </li>
            <li class="row">
             [linkx]
             
             <ul class="ul_gnb_3">
              <li>
               <a href="/portal/board/board.do?menu_grp=MENU_NEW03&amp;menu_no=3714" title="가공식품 영양표시">
                가공식품 영양표시
               </a>
              </li>
              <li>
               <a href="/portal/board/board.do?menu_grp=MENU_NEW03&amp;menu_no=3715" title="조리식품 영양표시">
                조리식품 영양표시
               </a>
              </li>
              <li>
               [mkey1][pkeyx]<li>[pkeyx]</li>
              </li>
              <li>
               [ahref]
               
              </li>
              <li>
               [linkx]
               
              </li>
              <li>
               [ahref]
               
              </li>
             </ul>
            </li>
           </ul>
          </div>
         </li>
         <li>
          [linkx]
          
          <div class="box_gnb_1">
           <h2>
            <b>[mkey1][symbolx][pkeyx][symbolx][keyword1][bracketl1][keywordx][bracketr1][symbolx][bracketl2][keywordx][bracketr2][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx]</b>
           </h2>
           <div class="gnb_2_point">
            [ahref]
            
            [ahref]
            
            [linkx]
            
           </div>
           <ul class="ul_gnb_2 clearfix">
            <li class="row">
             [linkx]
             
             <ul class="ul_gnb_3">
              <li>
               [ahref]
               
              </li>
              <li>
               [ahref]
               
              </li>
              <li>
               [linkx]
               
              </li>
              <li>
               <a href="/portal/safefoodlife/foodimport/importFoodList.do?menu_grp=MENU_NEW04&amp;menu_no=2818" title="수입식품검색">
                수입식품검색
               </a>
              </li>
              <li>
               <a href="/portal/safefoodlife/foodTraceability/foodTraceability.do?menu_grp=MENU_NEW04&amp;menu_no=2819" title="이력추적정보조회">
                이력추적정보조회
               </a>
              </li>
              <li>
               <a href="/portal/healthyfoodlife/searchHomeHF.do?menu_grp=MENU_NEW04&amp;menu_no=2823" title="건강기능식품검색">
                건강기능식품검색
               </a>
              </li>
              <li>
               <a href="/portal/fooddanger/foodSafetyInfo.do?menu_no=2828&amp;menu_grp=MENU_NEW04" title="우리동네 식품안전정보">
                우리동네 식품안전정보
               </a>
              </li>
              <li>
               [linkx]
               
              </li>
              <li>
               [ahref]
               
              </li>
             </ul>
            </li>
            <li class="row">
             [linkx]
             
             <ul class="ul_gnb_3">
              <li>
               [linkx]
               
              </li>
              <li>
               [ahref]
               
              </li>
              <li>
               [ahref]
               
              </li>
              <li>
               [linkx]
               
              </li>
              <li>
               <a href="/portal/board/board.do?menu_grp=MENU_NEW04&amp;menu_no=2680" title="입법예고/고시">
                입법예고/고시
               </a>
              </li>
              <li>
               [ahref]
               
              </li>
             </ul>
            </li>
            <li class="row">
             [linkx]
             
             <ul class="ul_gnb_3">
              <li>
               <a href="/portal/safefoodlife/food/foodRvlv/foodRvlv.do?menu_grp=MENU_NEW04&amp;menu_no=3101" title="공전">
                공전
               </a>
              </li>
              <li>
               [linkx]
               
              </li>
              <li>
               [ahref]
               
              </li>
              <li>
               [linkx]
               
              </li>
              <li>
               [linkx]
               
              </li>
             </ul>
            </li>
            <li class="row">
             [linkx]
             
             <ul class="ul_gnb_3">
              <li>
               <a href="/portal/board/board.do?menu_grp=MENU_NEW04&amp;menu_no=2947" title="식품원료 이해">
                식품원료 이해
               </a>
              </li>
              <li>
               [linkx]
               
              </li>
              <li>
               [linkx]
               
              </li>
              <li>
               <a href="/portal/board/board.do?menu_grp=MENU_NEW04&amp;menu_no=2951" title="자주하는 질문">
                자주하는 질문
               </a>
              </li>
              <li>
               [ahref]
               
              </li>
              <li>
               <a href="/portal/safefoodlife/foodMeterial/foodMeterialDB.do?menu_grp=MENU_NEW04&amp;menu_no=2968" title="식품원료목록">
                식품원료목록
               </a>
              </li>
             </ul>
            </li>
            <li class="row">
             <a href="/portal/board/board.do?menu_grp=MENU_NEW04&amp;menu_no=2909&amp;ctgryno=1823" title="CODEX 정보">
              CODEX 정보
             </a>
             <ul class="ul_gnb_3">
              <li>
               [ahref]
               
              </li>
              <li>
               [ahref]
               
              </li>
              <li>
               <a href="/portal/specialinfo/codexStandardList.do?data_type=STAN&amp;menu_grp=MENU_NEW04&amp;menu_no=2926" title="CODEX 관련 규정">
                CODEX 관련 규정
               </a>
              </li>
              <li>
               [ahref]
               
              </li>
             </ul>
            </li>
            <li class="row">
             [ahref]
             
             <ul class="ul_gnb_3">
              <li>
               [ahref]
               
              </li>
              <li>
               [linkx]
               
              </li>
              <li>
               [ahref]
               
              </li>
              <li>
               [linkx]
               
              </li>
             </ul>
            </li>
            <li class="row">
             [linkx]
             
             <ul class="ul_gnb_3">
              <li>
               [ahref]
               
              </li>
              <li>
               [linkx]
               
              </li>
              <li>
               [ahref]
               
              </li>
              <li>
               [linkx]
               
              </li>
              <li>
               [ahref]
               
              </li>
             </ul>
            </li>
            <li class="row">
             [linkx]
             
             <ul class="ul_gnb_3">
              <li>
               <a href="/residue/main.do" target="_blank" title="잔류물질정보">
                잔류물질정보
               </a>
              </li>
              <li>
               <a href="/portal/board/board.do?menu_grp=MENU_NEW04&amp;menu_no=2944" title="유해물질정보">
                유해물질정보
               </a>
              </li>
              <li>
               [linkx]
               
              </li>
             </ul>
            </li>
            <li class="row">
             <a href="/portal/board/board.do?menu_grp=MENU_NEW04&amp;menu_no=3504" title="기타 전문 관련정보">
              기타 전문 관련정보
             </a>
             <ul class="ul_gnb_3">
              <li>
               [linkx]
               
              </li>
              <li>
               [ahref]
               
              </li>
              <li>
               <a href="/portal/specialinfo/overseasFoodSafetyInfo.do?menu_grp=MENU_NEW04&amp;menu_no=3513" title="해외식품안전정보 사이트">
                해외식품안전정보 사이트
               </a>
              </li>
              <li>
               [linkx]
               
              </li>
              <li>
               <a href="/portal/board/board.do?menu_grp=MENU_NEW04&amp;menu_no=2982" title="전문DB관">
                전문DB관
               </a>
              </li>
              <li>
               <a href="/portal/termdictionary/termList.do?menu_grp=MENU_NEW04&amp;menu_no=2981" title="용어사전">
                용어사전
               </a>
              </li>
             </ul>
            </li>
           </ul>
          </div>
         </li>
         <li>
          <a class="ul_gnb_href" href="/portal/issue/hotIssueList.do?menu_grp=MENU_NEW05&amp;menu_no=2832" title="알림·교육">
           <span>
            알림·교육
           </span>
          </a>
          <div class="box_gnb_1">
           <h2>
            [mkey1][symbolx][pkeyx][symbolx][keyword1][bracketl1][keywordx][bracketr1][symbolx][bracketl2][keywordx][bracketr2][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx]
           </h2>
           <div class="gnb_2_point">
            [ahref]
            
            <a class="gnb_2_point_bg_1_2" href="/portal/board/board.do?menu_grp=MENU_NEW05&amp;menu_no=2859" title="생활뉴스">
             생활뉴스
            </a>
           </div>
           <ul class="ul_gnb_2 clearfix">
            <li class="row">
             <li>[ahref]</li><li>[mkey1]</li>[pkeyx]
            </li>
            <li class="row">
             [linkx]
             
             <ul class="ul_gnb_3">
              <li>
               [ahref]
               
              </li>
              <li>
               [ahref]
               
              </li>
              <li>
               [linkx]
               
              </li>
              <li>
               [ahref]
               
              </li>
              <li>
               [ahref]
               
              </li>
              <li>
               [ahref]
               
              </li>
             </ul>
            </li>
            <li class="row">
             [ahref]
             
             <ul class="ul_gnb_3">
              <li>
               [linkx]
               
              </li>
              <li>
               [linkx]
               
              </li>
              <li>
               [linkx]
               
              </li>
              <li>
               [ahref]
               
              </li>
              <li>
               [linkx]
               
              </li>
              <li>
               [ahref]
               
              </li>
             </ul>
            </li>
            <li class="row">
             [linkx]
             
             <ul class="ul_gnb_3">
              <li>
               [linkx]
               
              </li>
              <li>
               <li>[linkx]</li>[ahref]<li>[linkx]</li>
              </li>
              <li>
               [linkx]
               
              </li>
              <li>
               <a href="/portal/board/board.do?menu_grp=MENU_NEW05&amp;menu_no=3852" title="컨슈머뉴스레터">
                컨슈머뉴스레터
               </a>
              </li>
              <li>
               [ahref]
               
              </li>
             </ul>
            </li>
            <li class="row">
             [linkx]
             
            </li>
           </ul>
          </div>
         </li>
        </ul>
       </nav>
       <div class="box_search">
        <form id="searchForm" name="searchForm">
         <dl class="hit_keyword">
          <dt>
           인기검색어 ▶
          </dt>
          <dd id="favoriteKWD_Div">
           [linkx]
           
           [linkx]
           
          </dd>
         </dl>
         <label class="hid" for="searchTermTop">
          검색
         </label>
         <button class="gnb_btn gnb_btn_bg2" id="totalSearchBtn" onclick="javaScript:fn_searchTop();">
          <span>
           검색
          </span>
         </button>
        </form>
       </div>
       <div class="bookmark btnBmark">
        <a class="gnb_btn gnb_btn_bg3" href=";" id="bookmark_btn">
         즐겨찾기
        </a>
        <div class="layerBmark">
         <div class="layerBmark_inner">
          <ul id="tabs">
           <li>
            <div class="tabscontents t1">
             <ul class="Bmark_list">
             </ul>
            </div>
           </li>
          </ul>
          <a class="btnMybmark" href=";">
           My 즐겨찾기 설정
          </a>
         </div>
         <a class="btnBookMarkSave" href=";">
          저장
         </a>
         [linkx]
         
        </div>
       </div>
      </div>
     </header>
    </div>
   </div>
   <div class="path">
    <div class="inner">
     <div class="catn01" id="cdsn00">
      [linkx]
      
     </div>
     <div class="catn02" id="cdsn01">
      [linkx]
      
      <ul style="display: none;">
       <li>
        <a href="#">
         식품·안전정보
        </a>
       </li>
       <li class="dpt02_ul">
        <a href="#">
         위해·예방정보
        </a>
        <ul style="display: none;">
         <li>
          [ahref]
          
         </li>
         <li>
          [linkx]
          
         </li>
         <li>
          [linkx]
          
         </li>
         <li>
          [linkx]
          
         </li>
         <li>
          <a href="#">
           이슈·뉴스·식품·홍보·교육
          </a>
         </li>
        </ul>
       </li>
       <li>
        <a href="#">
         건강·영양정보
        </a>
       </li>
       <li class="on">
        [linkx]
        
       </li>
       <li>
        [ahref]
        
       </li>
      </ul>
     </div>
     <div class="catn02" id="cdsn02">
      [ahref]
      
      <ul style="display: none;">
       <li>
        [ahref]
        
       </li>
       <li class="on">
        [linkx]
        
       </li>
       <li class="dpt02_ul">
        [ahref]
        
        <ul style="display: none;">
         <li>
          [linkx]
          
         </li>
         <li>
          [linkx]
          
         </li>
         <li>
          [ahref]
          
         </li>
         <li>
          <a href="#">
           식품전문정보
          </a>
         </li>
         <li>
          [linkx]
          
         </li>
        </ul>
       </li>
       <li>
        [ahref]
        
       </li>
       <li>
        [ahref]
        
       </li>
       <li>
        [ahref]
        
       </li>
       <li>
        [ahref]
        
       </li>
       <li>
        [linkx]
        
       </li>
       <li>
        [linkx]
        
       </li>
       <li>
        [linkx]
        
       </li>
      </ul>
     </div>
     <div class="catn02" id="cdsn03">
      [ahref]
      
      <ul style="display: none;">
       <li>
        [ahref]
        
       </li>
       <li>
        [ahref]
        
       </li>
       <li class="on">
        [linkx]
        
       </li>
       <li>
        [ahref]
        
       </li>
       <li>
        [linkx]
        
       </li>
      </ul>
     </div>
     <div class="catn02" id="cdsn04">
      [ahref]
      
      <ul style="display: none;">
       <li>
        [linkx]
        
       </li>
       <li>
        <a href="#">
         위해·예방정보
        </a>
       </li>
       <li class="on">
        [ahref]
        
       </li>
       <li>
        [ahref]
        
       </li>
       <li>
        [linkx]
        
       </li>
      </ul>
     </div>
    </div>
   </div>
   <form id="baseForm" method="post" name="baseForm" onsubmit="return false;">
    <div id="wrap">
     <main>
      <section>
       <div id="header">
        <div class="board-head">
         <h3 class="h1" style="font-weight: bold; margin-bottom: 30px;">
          <b>[mkey1][symbolx][pkeyx][symbolx][keyword1][bracketl1][keywordx][bracketr1][symbolx][bracketl2][keywordx][bracketr2][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx]</b>
         </h3>
         <p class="excerpt">
          국내에서  이미 유통 중인 식품 중 위생상의 위해가 발생하거나 발생할 우려가 있는 제품으로 회수 및 판매 중지된 제품을 공개합니다.
          <br/>
          소비자는 해당 제품을 구입장소에 되돌려주시고 판매자는 해당 식품 판매를 중지하시고 회수업체에 반품하시기 바랍니다.
          <br/>
          회수대상 관련규정 :
          [ahref]
          
          /
          [ahref]
          
         </p>
        </div>
       </div>
       <div class="list-container">
        <div class="search-container">
         <span class="total">
          Total:
          <strong id="total_cnt">
           0
          </strong>
          Articles
         </span>
         <div class="search-wrap">
          <fieldset>
           <legend>
            검색
           </legend>
           <ul>
            <li>
             <div class="select-container w100">
              <label for="search_type">
               검색구분
              </label>
              <select class="selecter_basic" id="search_type" name="search_type">
               <option value="01">
                제품명
               </option>
               <option value="02">
                영업자
               </option>
               <option value="03">
                회수사유
               </option>
              </select>
             </div>
            </li>
            <li>
             <label class="hidden" for="search_keyword">
             </label>
            </li>
            <li>
             <a class="btn btn-default" href=";" role="button">
              검색
             </a>
            </li>
            <li>
             <div class="select-container">
              <label for="show_cnt">
               목록게시글수
              </label>
              <select class="selecter_basic" id="show_cnt" name="show_cnt">
               <option value="12">
                12개씩
               </option>
               <option value="24">
                24개씩
               </option>
               <option value="36">
                36개씩
               </option>
               <option value="48">
                48개씩
               </option>
               <option value="60">
                60개씩
               </option>
              </select>
             </div>
            </li>
            <li>
             [linkx]
             
            </li>
           </ul>
          </fieldset>
         </div>
        </div>
        <div class="gallery col-4" id="listFrame">
        </div>
        <div class="board-footer">
         <div class="pagination">
         </div>
        </div>
       </div>
      </section>
     </main>
    </div>
    <footer id="footer">
     <div id="fnb">
      <div class="container-fluid clearfix">
       <h2 class="hid">
        [mkey1][symbolx][pkeyx][symbolx][keyword1][bracketl1][keywordx][bracketr1][symbolx][bracketl2][keywordx][bracketr2][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx]
       </h2>
       <ul class="nav">
        <li>
         [linkx]
         
        </li>
        <li>
         [ahref]
         
        </li>
        <li>
         <a class="fontWn" href="/wpge/m_34/de010803l001.do" target="_blank" title="새창열림">
          저작권정책
         </a>
        </li>
        <li>
         [ahref]
         
        </li>
        <li>
         [ahref]
         
        </li>
        <li>
         [ahref]
         
        </li>
        <li>
         [linkx]
         
        </li>
        <li>
         [ahref]
         
        </li>
       </ul>
       <div class="relate-site">
        [ahref]
        
        <ul class="list">
         <li>
          [linkx]
          
         </li>
         <li>
          [ahref]
          
         </li>
         <li>
          [ahref]
          
         </li>
         <li>
          [linkx]
          
         </li>
         <li>
          [linkx]
          
         </li>
         <li>
          [linkx]
          
         </li>
         <li>
          [ahref]
          
         </li>
         <li>
          [ahref]
          
         </li>
         <li>
          [ahref]
          
         </li>
         <li>
          [linkx]
          
         </li>
         <li>
          [linkx]
          
         </li>
         <li>
          [ahref]
          
         </li>
        </ul>
       </div>
      </div>
     </div>
     <div class="siteinfo">
      <div class="container-fluid">
       <div class="fL">
        <p class="foot-logo">
         <br/>
        </p>
        <div class="address-copyr">
         <address class="address">
          우)28159 충청북도 청주시 흥덕구 오송읍 오송생명2로 187 오송보건의료행정타운 식품의약품안전처
         </address>
         <p class="copyr">
          Copyright ⓒ Ministry of Food and Drug Safety. All Rights Reserved.
         </p>
         <p class="copyr">
          소비자신고(식품안전정보원): 국번없이 1399, 종합민원센터 : 1577-1255, 시스템 문의 : 1899-5590
         </p>
        </div>
       </div>
       <div class="gov-share">
        <ul class="share">
         <li>
          [linkx]
          
         </li>
         <li>
          [linkx]
           <li>[linkx]</li>[ahref]<li>[mkey1]</li>[linkx]<li>[ahref]</li>
          
         </li>
         <li>
          [ahref]
          
         </li>
         <li>
          [linkx]
          
         </li>
        </ul>
       </div>
       <br/>
       <br/>
       <br/>
       <div class="gov-share" style="margin-top:1px">
        <ul class="share">
         <li>
         </li>
         <li>
         </li>
         <li>
         </li>
         <li>
         </li>
        </ul>
       </div>
       <div class="clearfix">
       </div>
      </div>
     </div>
    </footer>
    <div class="sitemap_op">
    </div>
    <div class="sitemap" style="z-index :110000">
     <div class="title">
      메뉴 한눈에 보기
      [ahref]
      
     </div>
     <div class="site_cnt">
      <div id="footerLink">
       <ul>
        <li>
         [linkx]
         
        </li>
        <li>
         [linkx]
         
        </li>
        <li>
         [linkx]
         
        </li>
        <li>
         [linkx]
         
        </li>
       </ul>
       <br>
       </br>
      </div>
      <div class="site_div">
       <div class="boxx">
        <h1 class="h01">
         <b>[mkey1][symbolx][pkeyx][symbolx][keyword1][bracketl1][keywordx][bracketr1][symbolx][bracketl2][keywordx][bracketr2][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx]</b>
        </h1>
        <ul>
         <li>
          [ahref]
          
         </li>
         <li>
          [linkx]
          
         </li>
         <li>
          [linkx]
          
         </li>
         <li>
          [linkx][mkey1][mkey1]
         </li>
         <li>
          [linkx]
          
         </li>
         <li>
          [ahref]
          
         </li>
         <li>
          [ahref]
          
         </li>
         <li>
          [linkx]
          
         </li>
         <li>
          [ahref]
          
         </li>
         <li>
          [ahref]
          
         </li>
         <li>
          [ahref]
          
         </li>
         <li>
          [linkx]
           [ahref][keywordx][symbolx][keywordx][symbolx][bracketl4][keywordx][bracketr4][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][bracketl5][keywordx][bracketr5][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][bracketl6][keywordx][bracketr6][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][linkx][mkey1][pkeyx][keywordx][keywordx][pkeyx][linkx][keywordx][symbolx][keywordx][symbolx][bracketl7][keywordx][bracketr7][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][mkey1][linkx]
          
         </li>
         <li>
          [ahref]
          
         </li>
         <li>
          [ahref]
          
         </li>
         <li>
          [linkx]
          
         </li>
         <li>
          <a class="dpt02" href="/portal/board/board.do?menu_grp=MENU_NEW01&amp;menu_no=2664&amp;ctgType=CTG_TYPE01&amp;ctgryno=1155">
           - 인허가/GMP/표시광고
          </a>
         </li>
         <li>
          [linkx]
          
         </li>
         <li>
          [ahref]
          
         </li>
         <li>
          [ahref]
          
         </li>
         <li>
          [linkx]
          
         </li>
         <li>
          <a class="dpt02" href="/portal/board/board.do?menu_grp=MENU_NEW01&amp;menu_no=3725">
           - 식품첨가물이란?
          </a>
         </li>
         <li>
          [linkx]
          
         </li>
         <li>
          [ahref]
          
         </li>
         <li>
          [ahref]
          
         </li>
         <li>
          [linkx]
          
         </li>
         <li>
          [linkx]
          
         </li>
         <li>
          [linkx]
          
         </li>
         <li>
          <a class="dpt02" href="/portal/board/board.do?menu_grp=MENU_NEW01&amp;menu_no=2731">
           - 국내외 주류정보
          </a>
         </li>
         <li>
          [linkx]
          
         </li>
         <li>
          [ahref]
          
         </li>
         <li>
          [linkx]
          
         </li>
         <li>
          [linkx]
          
         </li>
         <li>
          [ahref]
          
         </li>
         <li>
          <a class="dpt02" href="/portal/healthyfoodlife/examState.do?menu_grp=MENU_NEW01&amp;menu_no=3801">
           - GMO 안전성 심사현황
          </a>
         </li>
         <li>
          [linkx]
          
         </li>
         <li>
          <a class="dpt02" href="/portal/board/board.do?menu_grp=MENU_NEW01&amp;menu_no=2812">
           - GMO 현황자료
          </a>
         </li>
         <li>
          [ahref]
          
         </li>
         <li>
          [linkx]
          
         </li>
         <li>
          [ahref]
          
         </li>
         <li>
          <a class="dpt02" href="/portal/board/board.do?menu_grp=MENU_NEW01&amp;menu_no=3820">
           - 위생용품 영업자 준수사항
          </a>
         </li>
         <li>
          [linkx]
          
         </li>
         <li>
          [ahref]
          
         </li>
         <li>
          [linkx]
          
         </li>
         <li>
          [ahref]
          
         </li>
         <li>
          [ahref]
          
         </li>
         <li>
          [linkx]
          
         </li>
        </ul>
       </div>
      </div>
      <div class="fl w190 mgr06">
       <div class="boxx">
        <h1 class="h02">
         <b>[mkey1][symbolx][pkeyx][symbolx][keyword1][bracketl1][keywordx][bracketr1][symbolx][bracketl2][keywordx][bracketr2][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx]</b>
        </h1>
        <ul>
         <li>
          [ahref]
          
         </li>
         <li>
          [linkx]
          
         </li>
         <li>
          [linkx]
           [keywordx][keywordx][symbolx][keywordx][symbolx][bracketl13][keywordx][bracketr13][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx]<li>[mkey1]</li>
          
         </li>
         <li>
          [ahref]
          
         </li>
         <li>
          [ahref]
          
         </li>
         <li>
          <a class="dpt01" href="/portal/board/board.do?menu_grp=MENU_NEW02&amp;menu_no=2717">
           ·  허위과대광고[keywordx][ahref][pkeyx][keywordx][keywordx][symbolx][keywordx][symbolx][bracketl8][keywordx][bracketr8][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][mkey1][keywordx][symbolx][keywordx][symbolx][bracketl9][keywordx][bracketr9][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][pkeyx][linkx][pkeyx][mkey1]
          </a>
         </li>
         <li>
          [ahref]
          
         </li>
         <li>
          [linkx]
          
         </li>
         <li>
          [linkx]
          
         </li>
         <li>
          [ahref]
          
         </li>
         <li>
          [ahref]
          
         </li>
         <li>
          [linkx]
          
         </li>
         <li>
          [ahref]
          
         </li>
         <li>
          [linkx]
          
         </li>
         <li>
          [ahref]
          
         </li>
         <li>
          <a class="dpt02" href="/portal/board/board.do?menu_grp=MENU_NEW02&amp;menu_no=3705">
           - 식중독 발생시 대응요령
          </a>
         </li>
         <li>
          [ahref]
          
         </li>
         <li>
          [ahref]
          
         </li>
         <li>
          [linkx]
          
         </li>
         <li>
          [linkx]
          
         </li>
         <li>
          [linkx]
          
         </li>
         <li>
          [ahref]
          
         </li>
         <li>
          [linkx]
          
         </li>
         <li>
          [ahref]
          
         </li>
         <li>
          [ahref]
          
         </li>
         <li>
          [ahref]
          
         </li>
         <li>
          [linkx]
          
         </li>
         <li>
          [ahref]
          
         </li>
         <li>
          [linkx]
          
         </li>
         <li>
          [linkx]
          
         </li>
         <li>
          [ahref]
          
         </li>
        </ul>
       </div>
      </div>
      <div class="fl w190 mgr06">
       <div class="boxx">
        <h1 class="h03">
         [mkey1][symbolx][pkeyx][symbolx][keyword1][bracketl1][keywordx][bracketr1][symbolx][bracketl2][keywordx][bracketr2][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx]
        </h1>
        <ul>
         <li>
          [ahref]
          
         </li>
         <li>
          [linkx]
          
         </li>
         <li>
          [ahref]
          
         </li>
         <li>
          [ahref]
          
         </li>
         <li>
          <a class="dpt02" href="/portal/board/board.do?menu_grp=MENU_NEW03&amp;menu_no=2773&amp;ctgType=CTG_TYPE01&amp;ctgryno=1177">
           - 식품영양성분DB소개
          </a>
         </li>
         <li>
          [ahref]
          
         </li>
         <li>
          [ahref]
          
         </li>
         <li>
          [ahref]
          
         </li>
         <li>
          [linkx]
          
         </li>
         <li>
          <a class="dpt02" href="/portal/board/board.do?menu_grp=MENU_NEW03&amp;menu_no=3601">
           - 자료실
          </a>
         </li>
         <li>
          [linkx]
          
         </li>
         <li>
          [linkx]
          
         </li>
         <li>
          [ahref]
          
         </li>
         <li>
          [linkx]
          
         </li>
         <li>
          [linkx]
          
         </li>
         <li>
          [linkx]
          
         </li>
         <li>
          [ahref]
          
         </li>
         <li>
          [linkx]
          
         </li>
         <li>
          [linkx]
          
         </li>
         <li>
          <a class="dpt02" href="/portal/healthyfoodlife/myNutrition.do?menu_grp=MENU_NEW03&amp;menu_no=2876">
           - 나의 영양관리
          </a>
         </li>
         <li>
          [linkx]
          
         </li>
         <li>
          <a class="dpt02" href="/portal/healthyfoodlife/userFoodList.do?menu_grp=MENU_NEW03&amp;menu_no=2883">
           - 나의 음식관리
          </a>
         </li>
         <li>
          [ahref]
          
         </li>
         <li>
          [ahref]
          
         </li>
         <li>
          [ahref]
          
         </li>
         <li>
          [ahref]
          
         </li>
         <li>
          [ahref]
          
         </li>
         <li>
          [linkx]
          
         </li>
         <li>
          [linkx]
          
         </li>
         <li>
          [ahref]
          
         </li>
         <li>
          [ahref]
          
         </li>
         <li>
          [ahref]
          
         </li>
         <li>
          <a class="dpt02" href="/portal/healthyfoodlife/naDownProgram.do?menu_grp=MENU_NEW03&amp;menu_no=2954">
           - 미각 판정도구
          </a>
         </li>
         <li>
          [linkx]
          
         </li>
         <li>
          [linkx]
          
         </li>
         <li>
          [linkx]
          
         </li>
         <li>
          [linkx]
          
         </li>
         <li>
          [ahref]
          
         </li>
         <li>
          <a class="dpt02" href="/portal/healthyfoodlife/calorieDic.do?menu_no=3072&amp;menu_grp=MENU_NEW03">
           - 칼로리사전
          </a>
         </li>
         <li>
          [ahref]
          
         </li>
         <li>
          [ahref]
          
         </li>
         <li>
          [linkx]
          
         </li>
         <li>
          <a class="dpt02" href="/portal/board/board.do?menu_grp=MENU_NEW03&amp;menu_no=3717">
           - 자주하는 질문
          </a>
         </li>
         <li>
          [linkx]
          
         </li>
         <li>
          [linkx]
          
         </li>
         <li>
          [linkx]
          
         </li>
        </ul>
       </div>
      </div>
      <div class="fl w190 mgr06">
       <div class="boxx">
        <h1 class="h04">
         [mkey1][symbolx][pkeyx][symbolx][keyword1][bracketl1][keywordx][bracketr1][symbolx][bracketl2][keywordx][bracketr2][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx]
        </h1>
        <ul>
         <li>
          [ahref]
          
         </li>
         <li>
          [linkx]
          
         </li>
         <li>
          [ahref]
          
         </li>
         <li>
          [linkx]
          
         </li>
         <li>
          [ahref]
          
         </li>
         <li>
          <a class="dpt02" href="/portal/safefoodlife/foodTraceability/foodTraceability.do?menu_grp=MENU_NEW04&amp;menu_no=2819">
           -  이력추적정보조회
          </a>
         </li>
         <li>
          <a class="dpt02" href="/portal/healthyfoodlife/searchHomeHF.do?menu_grp=MENU_NEW04&amp;menu_no=2823">
           - 건강기능식품검색
          </a>
         </li>
         <li>
          [ahref]
          
         </li>
         <li>
          [ahref]
          
         </li>
         <li>
          <a class="dpt02" href="/portal/specialinfo/foodTruckList.do?menu_grp=MENU_NEW04&amp;menu_no=2986">
           -  푸드트럭
          </a>
         </li>
         <li>
          [linkx]
          
         </li>
         <li>
          [ahref]
          
         </li>
         <li>
          [ahref]
          
         </li>
         <li>
          [ahref]
          
         </li>
         <li>
          [linkx]
          
         </li>
         <li>
          [linkx]
          
         </li>
         <li>
          <a class="dpt02" href="/portal/safefoodlife/food/authintpFaqClCd.do?menu_grp=MENU_NEW04&amp;menu_no=3524">
           - 유권해석 FAQ
          </a>
         </li>
         <li>
          [ahref]
          
         </li>
         <li>
          <a class="dpt02" href="/portal/safefoodlife/food/foodRvlv/foodRvlv.do?menu_grp=MENU_NEW04&amp;menu_no=3101">
           - 공전
          </a>
         </li>
         <li>
          [linkx]
          
         </li>
         <li>
          [keywordx][linkx][mkey1]<li>[mkey1]</li>
         </li>
         <li>
          [linkx]
          
         </li>
         <li>
          [ahref]
          
         </li>
         <li>
          [linkx]
          
         </li>
         <li>
          [linkx]
          
         </li>
         <li>
          [ahref]
          
         </li>
         <li>
          [linkx]
          
         </li>
         <li>
          <a class="dpt02" href="/portal/board/board.do?menu_grp=MENU_NEW04&amp;menu_no=2951">
           - 자주하는 질문
          </a>
         </li>
         <li>
          [ahref]
          
         </li>
         <li>
          [linkx]
          
         </li>
         <li>
          [linkx]
          
         </li>
         <li>
          [linkx]
          
         </li>
         <li>
          [ahref]
          
         </li>
         <li>
          [ahref]
          
         </li>
         <li>
          [linkx]
          
         </li>
         <li>
          [linkx]
          
         </li>
         <li>
          [ahref]
          
         </li>
         <li>
          <a class="dpt02" href="/portal/specialinfo/myQualityIndicator.do?menu_grp=MENU_NEW04&amp;menu_no=2973">
           - My 설정실험지표
          </a>
         </li>
         <li>
          [linkx]
          
         </li>
         <li>
          <a class="dpt02" href="/portal/specialinfo/shelfLife.do?menu_grp=MENU_NEW04&amp;menu_no=2976">
           - 유통기간 라이브러리
          </a>
         </li>
         <li>
          [linkx]
          
         </li>
         <li>
          [linkx]
          
         </li>
         <li>
          [ahref]
          
         </li>
         <li>
          [linkx]
          
         </li>
         <li>
          [ahref]
          
         </li>
         <li>
          [linkx]
          
         </li>
         <li>
          [ahref]
          
         </li>
         <li>
          [ahref]
          
         </li>
         <li>
          [ahref]
          
         </li>
         <li>
          [ahref]
          
         </li>
         <li>
          [linkx]
          
         </li>
         <li>
          [ahref]
          
         </li>
         <li>
          <a class="dpt02" href="/portal/specialinfo/examFeeList.do?menu_grp=MENU_NEW04&amp;menu_no=3500">
           - 검사기관별 시험항목 검색
          </a>
         </li>
         <li>
          [ahref]
          
         </li>
         <li>
          <a class="dpt02" href="/portal/board/board.do?menu_grp=MENU_NEW04&amp;menu_no=3116">
           - 수출식품지원정보
          </a>
         </li>
         <li>
          [keywordx][symbolx][keywordx][symbolx][bracketl14][keywordx][bracketr14][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx]<li>[ahref]</li>[keywordx][symbolx][keywordx][symbolx][bracketl15][keywordx][bracketr15][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx]
         </li>
         <li>
          [linkx]
          
         </li>
        </ul>
       </div>
      </div>
      <div class="fl w190">
       <div class="boxx">
        <h1 class="h05">
         <b>[mkey1][symbolx][pkeyx][symbolx][keyword1][bracketl1][keywordx][bracketr1][symbolx][bracketl2][keywordx][bracketr2][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx]</b>
        </h1>
        <ul>
         <li>
          [ahref]
          
         </li>
         <li>
          [linkx]
          
         </li>
         <li>
          [ahref]
          
         </li>
         <li>
          [linkx]
          
         </li>
         <li>
          [ahref]
          
         </li>
         <li>
          [ahref]
          
         </li>
         <li>
          [linkx]
          
         </li>
         <li>
          [linkx]
          
         </li>
         <li>
          [ahref]
          
         </li>
         <li>
          <a class="dpt02" href="/portal/board/board.do?menu_grp=MENU_NEW05&amp;menu_no=2854">
           - 포토뉴스
          </a>
         </li>
         <li>
          - 보도자료<li>[linkx]</li><li>[pkeyx]</li>[linkx]
         </li>
         <li>
          [linkx]
          
         </li>
         <li>
          <a class="dpt02" href="/portal/board/board.do?menu_grp=MENU_NEW05&amp;menu_no=2864">
           - 해외뉴스
          </a>
         </li>
         <li>
          [linkx]
          
         </li>
         <li>
          [ahref]
          
         </li>
         <li>
          [ahref]
          
         </li>
         <li>
          [linkx]
          
         </li>
         <li>
          [ahref]
          
         </li>
         <li>
          [ahref]
          
         </li>
         <li>
          <a class="dpt02" href="/portal/sympathyplus/supporters.do?menu_grp=MENU_NEW05&amp;menu_no=3816">
           - 식품안전나라 서포터즈
          </a>
         </li>
         <li>
          <a class="dpt01" href="/portal/board/board.do?menu_grp=MENU_NEW05&amp;menu_no=2887">
           ·  간행물자료실
          </a>
         </li>
         <li>
          [linkx]
          
         </li>
         <li>
          <a class="dpt02" href="/portal/board/board.do?menu_grp=MENU_NEW05&amp;menu_no=2890">
           - 열린포럼
          </a>
         </li>
         <li>
          [ahref]
          
         </li>
         <li>
          [ahref]
          
         </li>
         <li>
          [ahref]
          
         </li>
         <li>
          [ahref]
          
         </li>
        </ul>
       </div>
      </div>
     </div>
    </div>
    <div id="back-top-wrapper">
     <p id="back-top" style="display:block;">
      <a href="p">
       <span>
        Back to Top
       </span>
      </a>
     </p>
    </div>
   </form>
  </div>
  <b style="color:black;background-color:#a0ffff">
   jnice09-ipp30-wq-zq-0373
  </b>
 </body>
</html>
|<---