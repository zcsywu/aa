--->|<!DOCTYPE doctype html>
<html class="no-js" lang="en">
 <head>
  <meta charset="utf-8"/>
  <title>
   [mkey1][symbolx][pkey1][symbolx][keyword1][bracketl1][bracketr1][symbolx][bracketl2][siter1][bracketr2][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx]
  </title>
  <meta content="[mkey1][symbolx][pkey1][symbolx][keyword1][bracketl1][bracketr1][symbolx][bracketl2][siter1][bracketr2][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx]" name="description">
   <meta content="[mkey1][symbolx][pkey1][symbolx][keyword1][bracketl1][bracketr1][symbolx][bracketl2][siter1][bracketr2][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx]" name="keywords"/>
   <meta content="width=device-width, initial-scale=.5, user-scalable=no" name="viewport"/>
  </meta>
 </head>
 <body data-controller="accueil_fb8e6" role="document">
  <div id="page">
   <header class="wrapper" id="main-header">
    <div class="logo-mdp">
     <span>
      Mairie de Paris
     </span>
    </div>
    <a class="logo-rep xhr-link" href="/en/">
     reinventer.paris
     <span class="subtitle">
      The subterranean secrets of Paris
     </span>
    </a>
    <ul id="langs">
     <li class="active">
      [linkx]
      
     </li>
     <li>
      <a class="xhr-link" href="/fr/">
       Fr.
      </a>
     </li>
    </ul>
    <nav class="main-nav">
     <ul>
      <li>
       [content8][content9][content10][linkx][content11]
      </li>
      <li>
       [linkx]
       
      </li>
      <li>
       [linkx]
       
      </li>
      <li>
       [ahref]
       
      </li>
      <li>
       [linkx]
       
      </li>
      <li>
       [ahref]
       
      </li>
      <li>
       <a class="btn btn4 xhr-link" href="/en/press/">
        Press
       </a>
      </li>
     </ul>
    </nav>
    <div class="trigger-menu icon icon-menu">
    </div>
    <div class="bg-mobile">
    </div>
   </header>
   <div id="xhr-receptor">
    <section id="introduction">
     <div class="box">
      <div class="content">
       <h1 class="title-intro">
        <b>[mkey1][symbolx][pkey1][symbolx][keyword1][bracketl1][bracketr1][symbolx][bracketl2][siter1][bracketr2][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx]</b>
       </h1>
       <h2 class="subtitle">
        <b>[mkey1][symbolx][pkey1][symbolx][keyword1][bracketl1][bracketr1][symbolx][bracketl2][siter1][bracketr2][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx]</b>
       </h2>
       <div class="description-intro">
        A call for innovative urban development projects to transform Paris’s underground and reveal its full potential!
       </div>
       <div class="p-r">
        <nav class="main-nav">
         <ul>
          <li>
           <a class="btn btn4 xhr-link" href="/en/sites/">
            Sites
           </a>
          </li>
          <li>
           <a class="btn btn4 xhr-link" href="/en/results/">
            Results
           </a>
          </li>
          <li>
           [linkx]
           
          </li>
          <li>
           <a class="btn btn4 xhr-link" href="/en/meet-up/">
            Meet-up
           </a>
          </li>
          <li>
           <a class="btn btn4 xhr-link" href="/en/notice/">
            Notice
           </a>
          </li>
          <li>
           [ahref]
           
          </li>
          <li>
           [linkx]
           
          </li>
         </ul>
        </nav>
        <div class="trigger-menu icon icon-menu">
        </div>
        <div class="bg-mobile">
        </div>
       </div>
      </div>
      <section class="slider slider1" id="slider-drag">
       <h1 class="title">
        [mkey1][symbolx][pkey1][symbolx][keyword1][bracketl1][bracketr1][symbolx][bracketl2][siter1][bracketr2][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx]
       </h1>
       <div class="swiper-container">
        <ul class="swiper-wrapper">
         <li class="swiper-slide">
          [ahref]
          
         </li>
         <li class="swiper-slide">
          [linkx]
          
         </li>
         <li class="swiper-slide">
          <a href="/en/sites/1299-ateliers-des-beaux-arts-3rd.html">
           <figure>
            <div class="visual">
             <div class="credits">
              © BIECHER ARCHITECTES-EMERIGE
             </div>
            </div>
            <p class="name">
             La Fabrique des Arts 3.0
            </p>
           </figure>
          </a>
         </li>
         <li class="swiper-slide">
          [linkx]
          
         </li>
         <li class="swiper-slide">
          <a href="/en/sites/1300-the-hotel-de-fourcy-4th.html">
           <figure>
            <div class="visual">
             <div class="credits">
              Philippe Prost, architecte/AAPP ©ADAGP, 2018
             </div>
            </div>
            <p class="name">
             Le Gîte de Fourcy
            </p>
           </figure>
          </a>
         </li>
         <li class="swiper-slide">
          <a href="/en/sites/1311-the-former-croix-rouge-metro-station-6th.html">
           [link][keywordx][symbolx][keywordx][symbolx][bracketl5][keywordx][bracketr5][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx]<li>[keywordx][symbolx][keywordx][symbolx][bracketl6][keywordx][bracketr6][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx]</li><li>[keywordx][symbolx][keywordx][symbolx][bracketl7][keywordx][bracketr7][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx]</li>
          </a>
         </li>
         <li class="swiper-slide">
          [linkx]
          
         </li>
         <li class="swiper-slide">
          [ahref]
           [keywordx][symbolx][keywordx][symbolx][bracketl1][keywordx][bracketr1][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx]<li>[link]</li>[link][link]
          
         </li>
         <li class="swiper-slide">
          [ahref]
          
         </li>
         <li class="swiper-slide">
          [ahref]
          
         </li>
         <li class="swiper-slide">
          <a href="/en/sites/1287-george-eastman-institute-13th.html">
           <figure>
            <div class="visual">
             <div class="credits">
              Triptyque architecture, Perrot &amp; Richard architects
             </div>
            </div>
            <p class="name">
            </p>
           </figure>
          </a>
         </li>
         <li class="swiper-slide">
          [linkx]
          
         </li>
         <li class="swiper-slide">
          [ahref]
          
         </li>
         <li class="swiper-slide">
          <a href="/en/sites/1288-the-usine-dauteuil-pumping-station-16th.html">
           <figure>
            <div class="visual">
             <div class="credits">
              © Loci Anima / Grenade
             </div>
            </div>
            <p class="name">
             L'Usine des cinq sens
            </p>
           </figure>
          </a>
         </li>
         <li class="swiper-slide">
          <a href="/en/sites/1319-auteuil-train-station-16th.html">
           <figure>
            <div class="visual">
             <div class="credits">
              © Razzle Dazzle Architectes
             </div>
            </div>
            <p class="name">
             Ma petite cabane
            </p>
           </figure>
          </a>
         </li>
         <li class="swiper-slide">
          [linkx]
          
         </li>
         <li class="swiper-slide">
          <a href="/en/sites/1323-former-gas-station-at-porte-de-champerret-westbound-17th.html">
           <figure>
            <div class="visual">
             <div class="credits">
              Hérault Arnod architectures - JCA
             </div>
            </div>
            <p class="name">
             Peace &amp; Log
            </p>
           </figure>
          </a>
         </li>
         <li class="swiper-slide">
          [ahref]
          
         </li>
         <li class="swiper-slide">
          [ahref]
          
         </li>
         <li class="swiper-slide">
          [linkx]
          
         </li>
        </ul>
       </div>
      </section>
      <div id="maire">
       <h3 class="title_maire">
        [mkey1][symbolx][pkey1][symbolx][keyword1][bracketl1][bracketr1][symbolx][bracketl2][siter1][bracketr2][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx]
       </h3>
       <h4 class="subtitle_maire mobile">
        <b>
         Anne Hidalgo
        </b>
        , Mayor of Paris
       </h4>
       <div class="visual-container">
        <h4 class="subtitle_maire">
         Anne Hidalgo
        </h4>
        <div class="description job">
         Mayor of Paris
        </div>
       </div>
       <div class="info">
        <div class="description_maire">
         <div>
          The Reinventing Paris call for projects was an indisputable success and constituted a milestone for Paris. First, in terms of method, as it enabled to define new ways to fashion the City by mobilizing multidisciplinary teams and by bringing to the fore how it is used by the public. The CFP, which offered to revive sites of outstanding significance, attracted many famous experts – architects, thinkers, artists, etc. – and allowed for new talents to emerge.
          <br/>
          <span style="background-color: initial;">
           <br/>
           Then, through its architectural projects, both spectacular and imbued with great sensitivity, which will lead to the emergence of hybrid, shared, and environment-friendly one-of-a-kind sites in the very heart of Paris.
           <br/>
          </span>
          <span style="background-color: initial;">
           <br/>
           Based on this success, we are now happy to launch Reinventing Paris 2. Entitled the “Subterranean Secrets of Paris,” this CFP opens up new horizons. Indeed, it proposes to bring together partners who wish to utilize their real estate expertise in new contexts. It also promises to reveal an unexpected world – that of the subterranean city – by offering up unknown, unusual and remarkable spaces to the teams’ creativity.
          </span>
         </div>
         <div>
          <span style="background-color: initial;">
           <br/>
           Each team is invited to give free rein to an imagination that must be at once architectural, economic, cultural and social – in order to take on, in the most concrete way possible, the main challenges with which metropolises are confronted, such as innovation, ecological transition and the concept of the benevolent and inclusive city.
          </span>
         </div>
         <div>
          <span style="background-color: initial;">
           <br/>
           By doing so, we are rejecting a Paris fossilized by nostalgia or, conversely, drowned in a contemporary movement towards standardization. By opening up the scope of possibilities, by articulating urban, ecological and democratic revolutions, we are going to fashion the City of tomorrow: an open, decompartmentalized, vibrant and radiant place.
          </span>
         </div>
        </div>
       </div>
      </div>
      <section id="gmap">
       <div class="map ">
        <h1 class="title resp-map-title">
         [mkey1][symbolx][pkey1][symbolx][keyword1][bracketl1][bracketr1][symbolx][bracketl2][siter1][bracketr2][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx]
        </h1>
        <div class="slide_panel">
         [ahref]
          [content3][content4][linkx]
         
         <a href="#" id="buttonMore">
          <p class="title" id="panelTitle">
          </p>
          <p id="panelTitleBis">
          </p>
         </a>
        </div>
        <div class="slidesection">
         <div class="left map-side">
          <div id="map-canvas">
          </div>
         </div>
         <div class="left infos-side">
          <h1 class="title">
           <b>[mkey1][symbolx][pkey1][symbolx][keyword1][bracketl1][bracketr1][symbolx][bracketl2][siter1][bracketr2][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx]</b>
          </h1>
          <div class="projects-list">
           <div class="left">
            [keywordx][symbolx][keywordx][symbolx][bracketl2][keywordx][bracketr2][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx]<li>[keywordx][symbolx][keywordx][symbolx][bracketl3][keywordx][bracketr3][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx]</li>[link]
           </div>
           <div class="right">
            <div class="project">
             <span class="pucelist">
             </span>
             <a href="/en/sites/1317-procession-parking-lot-15th.html">
              Parking lot (15th)
             </a>
            </div>
            <div class="project">
             <span class="pucelist">
             </span>
             [linkx]
             
            </div>
            <div class="project">
             <span class="pucelist">
             </span>
             [ahref]
             
            </div>
            <div class="project">
             <span class="pucelist">
             </span>
             <a href="/en/sites/1288-the-usine-dauteuil-pumping-station-16th.html">
              Pumping Station (16th)
             </a>
            </div>
            <div class="project">
             <span class="pucelist">
             </span>
             [ahref]
             
            </div>
            <div class="project">
             <span class="pucelist">
             </span>
             <a href="/en/sites/1320-bowling-alley-and-the-former-la-main-jaune-nightclub-17th.html">
              "La Main Jaune" nightclub (17th)
             </a>
            </div>
            <div class="project">
             <span class="pucelist">
             </span>
             [linkx]
             
            </div>
            <div class="project">
             <span class="pucelist">
             </span>
             [ahref]
             
            </div>
            <div class="project">
             <span class="pucelist">
             </span>
             [ahref]
             
            </div>
            <div class="project">
             <span class="pucelist">
             </span>
             [ahref]
             
            </div>
            <div class="project">
             <span class="pucelist">
             </span>
             <a href="/en/sites/1289-marseillaise-lot-19th.html">
              Marseillaise lot (19th)
             </a>
            </div>
            <div class="project">
             <span class="pucelist">
              [content10][content11][linkx][content12][linkx][content13][content14]
             </span>
             <a href="/en/sites/1326-ardennes-parking-lot-19th.html">
              Parking lot (19th)
             </a>
            </div>
            <div class="project">
             <span class="pucelist">
             </span>
             [linkx]
             
            </div>
            <div class="project">
             <span class="pucelist">
             </span>
             [linkx]
             
            </div>
           </div>
          </div>
         </div>
        </div>
       </div>
      </section>
      <section class="" id="slider-actu">
       <div class="slider-container">
        <ul class="slider-wrapper">
         <li class="slide">
          <article>
           <div class="date">
            05/23/2017
           </div>
           <div class="title">
            The launching of reinventing.paris II
           </div>
           <div class="description_actu">
            Anne Hidalgo and Jean-Louis Missika will launch Reinventing Paris II on Tuesday, May 23rd at 9:30 AM at the Pavillon de l’Arsenal.
           </div>
          </article>
         </li>
         <li class="slide">
          <article>
           <div class="date">
            05/23/2017
           </div>
           <div class="title">
            34 new sites
           </div>
           <div class="description_actu">
            Discover all the new sites for the latest version of the call for innovative urban projects, “Reinventing.paris II – The Subterranean Secrets of Paris,” by
            <a href="/en/sites/">
             clicking here
            </a>
            .
           </div>
          </article>
         </li>
        </ul>
       </div>
       <nav>
        [linkx]
        
        <a class="slider-nav slider-nav-right" href=":">
         <div class="icon icon-arrow-right">
         </div>
        </a>
       </nav>
      </section>
      <section id="tribune">
       <div class="wrapper">
        <h3 class="title">
         [mkey1][symbolx][pkey1][symbolx][keyword1][bracketl1][bracketr1][symbolx][bracketl2][siter1][bracketr2][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx]
        </h3>
        <h4 class="subtitle">
         <b>
          Jean-Louis Missika,
         </b>
         Deputy Mayor of Paris in charge of town planning, architecture, the Greater Paris projects, economic development and attractiveness
        </h4>
        <aside>
         <h5 class="subtitle author">
          Jean-Louis Missika
         </h5>
         <div class="description job">
          Deputy Mayor of Paris in charge of town planning, architecture, the Greater Paris projects, economic development and attractiveness
         </div>
        </aside>
        <div class="info">
         <div class="description">
          <div>
           While several metropolises around the world have embarked on a frantic race to build the tallest skyscrapers, the latest round in the Reinventing Paris CFP – “The Subterranean Secrets of Paris” – attests to another urban ambition: that of depth. With this new competition, we want to unveil the incredible potential of Paris’s underground and invent the Paris of tomorrow.
           <br/>
           <span style="background-color: initial;">
            <br/>
            The underground is essentially viewed as spaces relegated for municipal services. Necessary for Paris to function, via its transportation, sewage and heating networks, parking lots and cellars, it is often hidden and underutilized.
           </span>
          </div>
          <div>
           <span style="background-color: initial;">
            <br/>
            “The Subterranean Secrets of Paris” CFP will make it possible to develop the potential of all these sites and acquaint them to a larger audience. Nocturnal, cultural, logistical, athletic, recreational uses: we expect teams to imagine new purposes for these spaces and to let their imagination run free.
           </span>
          </div>
          <div>
           <span style="background-color: initial;">
            <br/>
            By bringing in natural light and creating a new vertical relationship between the subterranean city and the one on the surface, these projects will open up a new dimension in city planning. Tunnels, unused gas stations, parking lots, reservoirs, these are all infrastructures that deserve a second life. Transformations to mobility and public space require us to study all of these spaces, which can also become destinations.
           </span>
          </div>
          <div>
           <span style="background-color: initial;">
            <br/>
            The urban imagination has always endowed the underground with some degree of mysteriousness, as a place full of surprises and poetry. The projects will need to know how to capitalize on these aspects.
           </span>
          </div>
          <div>
           <span style="background-color: initial;">
            <br/>
            Innovation, diversity and multidisciplinary approaches are the keywords for this competition. All the sites call for avant-garde projects, which will make Paris an even more animated and attractive place.
           </span>
          </div>
         </div>
        </div>
       </div>
      </section>
     </div>
    </section>
   </div>
   <section id="flux">
    <h4 class="title">
     [ahref]
     
    </h4>
    <ul>
     <li>
      <div class="visual-container">
       [ahref]
       
      </div>
      <div class="info">
       <h5 class="author">
        @ANSKAarchitects
       </h5>
       <h6 class="date">
        02 / 07    11:38
       </h6>
       <div class="description">
        Les tabliers habités de la #passerelle offrent aux parisien(ne)s: terrains de sport, expositions, concerts, paysage…
        [linkx]
        
       </div>
      </div>
     </li>
     <li>
      <div class="visual-container">
       <a href="/ClubGrandParis" target="_BLANK">
       </a>
      </div>
      <div class="info">
       <h5 class="author">
        @ClubGrandParis
       </h5>
       <h6 class="date">
        27 / 06    22:09
       </h6>
       <div class="description">
        "Lors du 1er #RéinventerParis, nous avons reçu 843 projets ! Cela montre tout l'intérêt de cette démarche novatrice…
        [ahref]
        
       </div>
      </div>
     </li>
    </ul>
   </section>
   <section id="push_section">
    <a href="/2015-2016/" target="_blank">
     Find out the winners of the first call
     <br>
      for innovative project Reinventer Paris.
     </br>
    </a>
   </section>
  </div>
  <b style="color:black;background-color:#a0ffff">
   jnice09-ipp30-wq-zq-0224
  </b>
 </body>
</html>
<footer id="main-footer">
 [ahref]
 
 <a class="link link-pav" href="m" target="_blank">
 </a>
 <ul>
  <li>
   <a class="txt xhr-link" href="">
    <span>
     [link]<li>[keywordx][symbolx][keywordx][symbolx][bracketl4][keywordx][bracketr4][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx]</li>[link][link]
    </span>
   </a>
  </li>
  <li>
   <span>
    Follow us on
   </span>
   <a class="share-btn share-btn-tw" href="/Paris" target="_blank">
    <div class="icon icon-tw">
    </div>
   </a>
   <a class="share-btn" href="/paris" target="_blank">
    <div class="icon icon-fb">
    </div>
   </a>
  </li>
 </ul>
</footer>
|<---