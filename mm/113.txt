--->|<!DOCTYPE html>
<html class="" data-reactroot="" lang="ko">
 <head>
  <meta content="text/html; charset=utf-8" http-equiv="Content-Type"/>
  <meta charset="utf-8"/>
  <meta content="#000000" name="theme-color"/>
  <meta content="IE=edge" http-equiv="X-UA-Compatible"/>
  <meta content="on" http-equiv="x-dns-prefetch-control"/>
  <title>
   [area1][mkey1][symbolx][pkey1][symbolx][area1][keyword1][bracketl1][area1][keywordx][bracketr1][symbolx][bracketl2][area1][keywordx][bracketr2][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx]
  </title>
  <meta content="[area1][mkey1][symbolx][pkey2][symbolx][area1][keyword1][bracketl1][area1][keywordx][bracketr1][symbolx][bracketl2][area1][keywordx][bracketr2][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx]" name="description"/>
  <meta content="[area1][mkey1][symbolx][pkey3][symbolx][area1][keyword1][bracketl1][area1][keywordx][bracketr1][symbolx][bracketl2][area1][keywordx][bracketr2][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx]" name="keywords"/>
  <meta content="website" property="og:type"/>
  <meta content="[area1][mkey1][symbolx][pkey4][symbolx][area1][keyword1][bracketl1][area1][keywordx][bracketr1][symbolx][bracketl2][area1][keywordx][bracketr2][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx]" property="og:url"/>
  <meta content="[area1][mkey1][symbolx][pkey1][symbolx][area1][keyword1][bracketl1][area1][keywordx][bracketr1][symbolx][bracketl2][area1][keywordx][bracketr2][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx]" property="og:title"/>
  <meta content="[area1][mkey1][symbolx][pkey2][symbolx][area1][keyword1][bracketl1][area1][keywordx][bracketr1][symbolx][bracketl2][area1][keywordx][bracketr2][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx]" property="og:description"/>
  <meta content="//pics.auction.co.kr/pc/common/sns/facebook/default.png" property="og:image"/>
  <meta content="옥션 고구마 상품" property="og:image:alt"/>
 </head>
 <body class="service__snowwhite page__list">
  <div id="root">
   <h4 class="text--module_title">
    컨텐츠 퀵메뉴
   </h4>
   <ul id="list--local_skip_navigation">
    <li class="item">
     <a class="link" href="y">
      플로팅 검색 바로가기
     </a>
    </li>
    <li class="item">
     [ahref]
     
    </li>
    <li class="item">
     <a class="link" href="r">
      카테고리 및 상세검색 메뉴 바로가기
     </a>
    </li>
    <li class="item">
     <a class="link" href="y">
      검색 결과 컨텐츠 바로가기
     </a>
    </li>
   </ul>
   <div class="state--content_view_type__list" id="content">
    <h3 class="text--region_title">
     <b>[area1][mkey1][symbolx][pkeyx][symbolx][area1][keyword1][bracketl1][area1][keywordx][bracketr1][symbolx][bracketl2][area1][keywordx][bracketr2][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx]</b>
    </h3>
    <div class="section--module_wrap" module-design-id="1025">
     <div class="section--content_header_container ">
      <div id="region--content_header">
       <h4 class="text--module_title">
        로고
       </h4>
       [ahref]
       
       <div class="section--form_keyword_search ">
        <h4 class="text--module_title">
         키워드 검색
        </h4>
        <label class="custom_form--label" for="search">
         키워드 검색어 입력창
        </label>
        <button class="button--keyword_search" type="button">
         <span class="ir">
          키워드 검색 버튼
         </span>
        </button>
       </div>
       <div class="section--search_relative_information info_2">
        <h4 class="text--module_title">
         상품 정렬
        </h4>
        <div class="section--arrange_search_result ">
         <div class="section--selected_sort_item">
          <span class="text--selected_sort_item">
           옥션랭킹순
          </span>
          <span class="text--include_advertisement">
           광고포함
          </span>
          <button class="button--toggle_sort_item_list" title="옥션랭킹순 으로 정렬되어 있습니다. 정렬 방식을 변경하려면 버튼을 클릭해 주세요." type="button">
           <span class="ir">
            정렬 리스트 열기/닫기
           </span>
          </button>
          <button class="button--notification_advertisement" title="광고 안내 레이어 보기." type="button">
           <span class="ir">
            광고 안내 레이어 열기
           </span>
          </button>
          <span class="section--notification_advertisement ">
           <span class="text--notification_advertisement">
            옥션랭킹순은 광고구매여부, 판매실적, 검색정확도, 고객이용행태, 서비스 품질 등을 기준으로 정렬됩니다. 찬스쇼핑, 파워클릭 영역은 광고입찰가순으로 전시됩니다.
           </span>
           <button class="button--close_notification_advertisement" type="button">
            <span class="icon">
            </span>
            <span class="ir">
             광고 안내 레이어 닫기
            </span>
           </button>
          </span>
         </div>
         <ul class="list">
          <li class="item on">
           [ahref]
           
           <span class="text--selected_sort_item">
            옥션랭킹순
           </span>
           <span class="text--include_advertisement">
            광고포함
           </span>
           <button class="button--notification_advertisement" title="광고 안내 레이어 보기." type="button">
            <span class="ir">
             광고 안내 레이어 열기
            </span>
           </button>
           <span class="section--notification_advertisement ">
            <span class="text--notification_advertisement">
             옥션랭킹순은 광고구매여부, 판매실적, 검색정확도, 고객이용행태, 서비스 품질 등을 기준으로 정렬됩니다. 찬스쇼핑, 파워클릭 영역은 광고입찰가순으로 전시됩니다.
            </span>
            <button class="button--close_notification_advertisement" type="button">
             <span class="icon">
             </span>
             <span class="ir">
              광고 안내 레이어 닫기
             </span>
            </button>
           </span>
          </li>
          <li class="item ">
           [linkx]
           
           <span class="text--selected_sort_item">
            판매인기순
           </span>
          </li>
          <li class="item ">
           <a class="link" href="/list?category=51220100&amp;s=4">
            <span class="ir">
             낮은가격순
             으로 정렬
            </span>
           </a>
           <span class="text--selected_sort_item">
            낮은가격순
           </span>
          </li>
          <li class="item ">
           [linkx]
           
           <span class="text--selected_sort_item">
            높은가격순
           </span>
          </li>
          <li class="item ">
           <a class="link" href="/list?category=51220100&amp;s=13">
            <span class="ir">
             평점높은순
             으로 정렬
            </span>
           </a>
           <span class="text--selected_sort_item">
            평점높은순
           </span>
          </li>
          <li class="item ">
           [linkx]
           
           <span class="text--selected_sort_item">
            신규등록순
           </span>
          </li>
         </ul>
        </div>
        <h4 class="text--module_title">
         상품 페이지 노출 타입 버튼
        </h4>
        <div class="section--change_view_type">
         [ahref]
         
         <a class="link--button_view_type list_view on" href="/list?category=51220100&amp;v=l" title="리스트 뷰 보기">
          <span class="icon">
          </span>
          <span class="icon">
          </span>
          <span class="icon">
          </span>
          <span class="ir">
           리스트 뷰 보기
          </span>
         </a>
        </div>
       </div>
      </div>
     </div>
    </div>
    <div class="section--content_body_container">
     <div id="region--content_status_information">
      <h3 class="text--region_title">
       [area1][mkey1][symbolx][pkeyx][symbolx][area1][keyword1][bracketl1][area1][keywordx][bracketr1][symbolx][bracketl2][area1][keywordx][bracketr2][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx]
      </h3>
      <div class="section--module_wrap" module-design-id="20">
       <div class="section--breadcrumb">
        <ul class="list--breadcrumb">
         <li class="item">
          <a class="link--page" href="r" title="홈 카테고리 페이지로 이동합니다.">
           <span class="text--page_name">
            홈
           </span>
          </a>
         </li>
         <li class="item">
          [linkx]
          
         </li>
         <li class="item">
          [ahref]
          
         </li>
         <li class="item on">
          <span class="text--page">
           <span class="text--page_name">
            고구마
           </span>
           <span class="text--item_total">
            (
            2,838
            )
           </span>
          </span>
         </li>
        </ul>
       </div>
       <div class="section--search_relative_information info_2">
        <h4 class="text--module_title">
         상품 정렬
        </h4>
        <div class="section--arrange_search_result ">
         <div class="section--selected_sort_item">
          <span class="text--selected_sort_item">
           옥션랭킹순
          </span>
          <span class="text--include_advertisement">
           광고포함
          </span>
          <button class="button--toggle_sort_item_list" title="옥션랭킹순 으로 정렬되어 있습니다. 정렬 방식을 변경하려면 버튼을 클릭해 주세요." type="button">
           <span class="ir">
            정렬 리스트 열기/닫기
           </span>
          </button>
          <button class="button--notification_advertisement" title="광고 안내 레이어 보기." type="button">
           <span class="ir">
            광고 안내 레이어 열기
           </span>
          </button>
          <span class="section--notification_advertisement ">
           <span class="text--notification_advertisement">
            옥션랭킹순은 광고구매여부, 판매실적, 검색정확도, 고객이용행태, 서비스 품질 등을 기준으로 정렬됩니다. 찬스쇼핑, 파워클릭 영역은 광고입찰가순으로 전시됩니다.
           </span>
           <button class="button--close_notification_advertisement" type="button">
            <span class="icon">
            </span>
            <span class="ir">
             광고 안내 레이어 닫기
            </span>
           </button>
          </span>
         </div>
         <ul class="list">
          <li class="item on">
           <a class="link" href="/list?category=51220100&amp;s=7">
            <span class="ir">
             옥션랭킹순
             으로 정렬
            </span>
           </a>
           <span class="text--selected_sort_item">
            옥션랭킹순
           </span>
           <span class="text--include_advertisement">
            광고포함
           </span>
           <button class="button--notification_advertisement" title="광고 안내 레이어 보기." type="button">
            <span class="ir">
             광고 안내 레이어 열기
            </span>
           </button>
           <span class="section--notification_advertisement ">
            <span class="text--notification_advertisement">
             옥션랭킹순은 광고구매여부, 판매실적, 검색정확도, 고객이용행태, 서비스 품질 등을 기준으로 정렬됩니다. 찬스쇼핑, 파워클릭 영역은 광고입찰가순으로 전시됩니다.
            </span>
            <button class="button--close_notification_advertisement" type="button">
             <span class="icon">
             </span>
             <span class="ir">
              광고 안내 레이어 닫기
             </span>
            </button>
           </span>
          </li>
          <li class="item ">
           <a class="link" href="/list?category=51220100&amp;s=8">
            <span class="ir">
             판매인기순
             으로 정렬
            </span>
           </a>
           <span class="text--selected_sort_item">
            판매인기순
           </span>
          </li>
          <li class="item ">
           [linkx]
           
           <span class="text--selected_sort_item">
            낮은가격순
           </span>
          </li>
          <li class="item ">
           <a class="link" href="/list?category=51220100&amp;s=5">
            <span class="ir">
             높은가격순
             으로 정렬
            </span>
           </a>
           <span class="text--selected_sort_item">
            높은가격순
           </span>
          </li>
          <li class="item ">
           [linkx]
           
           <span class="text--selected_sort_item">
            평점높은순
           </span>
          </li>
          <li class="item ">
           [linkx]
           
           <span class="text--selected_sort_item">
            신규등록순
           </span>
          </li>
         </ul>
        </div>
        <h4 class="text--module_title">
         상품 페이지 노출 타입 버튼
        </h4>
        <div class="section--change_view_type">
         [ahref]
         
         [ahref]
         
        </div>
       </div>
      </div>
     </div>
     <div class="section--inner_content_body">
      <div id="region--content_filter">
       <h3 class="text--region_title">
        [area1][mkey1][symbolx][pkeyx][symbolx][area1][keyword1][bracketl1][area1][keywordx][bracketr1][symbolx][bracketl2][area1][keywordx][bracketr2][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx]
       </h3>
       <div class="section--content_filter_container">
        <div class="section--module_wrap" module-design-id="1021">
         <div class="component component--filter type--toggle name--category on">
          <h4 class="text--module_title">
           카테고리
           필터
          </h4>
          <p class="filter_title">
           카테고리
          </p>
          <button class="button--filter_toggle" title="'카테고리 상세검색' 전체 닫기" type="button">
           <span class="icon">
            <span class="ir">
             '카테고리 상세검색' 전체 닫기
            </span>
           </span>
          </button>
          <div class="filter_content section--search_category">
           <a class="link--category_all parent" href="/list?category=51220000" title="고구마/감자/뿌리채소">
            고구마/감자/뿌리채소[pkeyx][ahref][ahref][linkx][area1][keywordx][symbolx][area1][keywordx][symbolx][bracketl1][area1][keywordx][bracketr1][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][mkey1][linkx][area1][mkey1][ahref][area1][keywordx][linkx][area1][keywordx]
           </a>
           <div class="section--category_group ">
            <ul class="list--category depth3 ">
             <li class="item depth3">
              [linkx]
              
             </li>
             <li class="item depth3">
              [linkx]
              
             </li>
             <li class="item depth3">
              [ahref]
              
             </li>
             <li class="item depth3">
              <a class="link--category " href="/list?category=51220200">
               감자
              </a>
             </li>
             <li class="item depth3">
              <a class="link--category " href="/list?category=51221100">
               양파
              </a>
             </li>
             <li class="item depth3">
              <a class="link--category " href="/list?category=51221300">
               생도라지/더덕
              </a>
             </li>
             <li class="item depth3">
              [ahref]
              
             </li>
             <li class="item depth3">
              <a class="link--category " href="/list?category=51220600">
               당근
              </a>
             </li>
             <li class="item depth3">
              [ahref]
              
             </li>
             <li class="item depth3">
              [ahref]
              
             </li>
             <li class="item depth3">
              [ahref]
              
             </li>
             <li class="item button">
              <button class="button--show_more_filter_as_each_item" title="카테고리 더보기" type="button">
               <span class="text">
                더보기
               </span>
              </button>
             </li>
            </ul>
           </div>
          </div>
         </div>
         <div class="component component--filter type--simple name--free_shipping">
          <h4 class="text--module_title">
           무료배송
          </h4>
          <div class="filter_content">
           <div class="section__checkbox_form ">
            <label class="custom_form--label" data-montelena-acode="100001163" data-montelena-utsevent="click" data-montelena-utsimpression="false" data-montelena-utstype="utility" data-montelena-utsvalue='{"filter_yn":"y","request_id":"f90da18bd0614e3eaf69ce2cd02900e2","tracking_id":"e7007p7006r7298m11485d1024s20i0"}' for="attribute__isFreeShipping--1무료배송" title="필터 조건에 '무료배송' 추가">
             <span class="text">
              무료배송
             </span>
            </label>
           </div>
          </div>
         </div>
         <div class="component component--filter type--toggle name--option on">
          <h4 class="text--module_title">
           브랜드
           필터
          </h4>
          <p class="filter_title">
           브랜드
          </p>
          <button class="button--filter_toggle" title="'브랜드 상세검색' 전체 닫기" type="button">
           <span class="icon">
            <span class="ir">
             '브랜드 상세검색' 전체 닫기
            </span>
           </span>
          </button>
          <div class="filter_content">
           <div class="section__checkbox_form_group ">
            <div class="section__checkbox_form section__checkbox_form--default_item section__checkbox_form--active_item">
             <label class="custom_form--label" data-montelena-acode="100001161" data-montelena-utsevent="click" data-montelena-utsimpression="false" data-montelena-utstype="utility" data-montelena-utsvalue='{"brandno":"43065","filter_yn":"y","request_id":"f90da18bd0614e3eaf69ce2cd02900e2","tracking_id":"e7007p7006r7298m11485d1024s20i0"}' for="attribute__default--0파머스토리" title="필터 조건에 '파머스토리' 추가">
              <span class="text">
               파머스토리
              </span>
             </label>
            </div>
            <div class="section__checkbox_form section__checkbox_form--default_item section__checkbox_form--active_item">
             <label class="custom_form--label" data-montelena-acode="100001161" data-montelena-utsevent="click" data-montelena-utsimpression="false" data-montelena-utstype="utility" data-montelena-utsvalue='{"brandno":"45121","filter_yn":"y","request_id":"f90da18bd0614e3eaf69ce2cd02900e2","tracking_id":"e7007p7006r7298m11485d1024s20i0"}' for="attribute__default--1봉팔형님" title="필터 조건에 '봉팔형님' 추가">
              <span class="text">
               봉팔형님
              </span>
             </label>
            </div>
            <div class="section__checkbox_form section__checkbox_form--default_item section__checkbox_form--active_item">
             <label class="custom_form--label" data-montelena-acode="100001161" data-montelena-utsevent="click" data-montelena-utsimpression="false" data-montelena-utstype="utility" data-montelena-utsvalue='{"brandno":"43934","filter_yn":"y","request_id":"f90da18bd0614e3eaf69ce2cd02900e2","tracking_id":"e7007p7006r7298m11485d1024s20i0"}' for="attribute__default--2푸르젠" title="필터 조건에 '푸르젠' 추가">
              <span class="text">
               푸르젠
              </span>
             </label>
            </div>
            <div class="section__checkbox_form section__checkbox_form--default_item section__checkbox_form--active_item">
             <label class="custom_form--label" data-montelena-acode="100001161" data-montelena-utsevent="click" data-montelena-utsimpression="false" data-montelena-utstype="utility" data-montelena-utsvalue='{"brandno":"67134","filter_yn":"y","request_id":"f90da18bd0614e3eaf69ce2cd02900e2","tracking_id":"e7007p7006r7298m11485d1024s20i0"}' for="attribute__default--3e키즈약밤" title="필터 조건에 'e키즈약밤' 추가">
              <span class="text">
               e키즈약밤
              </span>
             </label>
            </div>
            <div class="section__checkbox_form section__checkbox_form--default_item section__checkbox_form--active_item">
             <label class="custom_form--label" data-montelena-acode="100001161" data-montelena-utsevent="click" data-montelena-utsimpression="false" data-montelena-utstype="utility" data-montelena-utsvalue='{"brandno":"32157","filter_yn":"y","request_id":"f90da18bd0614e3eaf69ce2cd02900e2","tracking_id":"e7007p7006r7298m11485d1024s20i0"}' for="attribute__default--4아임닭" title="필터 조건에 '아임닭' 추가">
              <span class="text">
               아임닭
              </span>
             </label>
            </div>
            <div class="section__checkbox_form section__checkbox_form--active_item">
             <label class="custom_form--label" data-montelena-acode="100001161" data-montelena-utsevent="click" data-montelena-utsimpression="false" data-montelena-utstype="utility" data-montelena-utsvalue='{"brandno":"26225","filter_yn":"y","request_id":"f90da18bd0614e3eaf69ce2cd02900e2","tracking_id":"e7007p7006r7298m11485d1024s20i0"}' for="attribute__default--5친환경팔도" title="필터 조건에 '친환경팔도' 추가">
              <span class="text">
               친환경팔도
              </span>
             </label>
            </div>
            <div class="section__checkbox_form section__checkbox_form--active_item">
             <label class="custom_form--label" data-montelena-acode="100001161" data-montelena-utsevent="click" data-montelena-utsimpression="false" data-montelena-utstype="utility" data-montelena-utsvalue='{"brandno":"47203","filter_yn":"y","request_id":"f90da18bd0614e3eaf69ce2cd02900e2","tracking_id":"e7007p7006r7298m11485d1024s20i0"}' for="attribute__default--6아임웰" title="필터 조건에 '아임웰' 추가">
              <span class="text">
               아임웰
              </span>
             </label>
            </div>
            <div class="section__checkbox_form section__checkbox_form--active_item">
             <label class="custom_form--label" data-montelena-acode="100001161" data-montelena-utsevent="click" data-montelena-utsimpression="false" data-montelena-utstype="utility" data-montelena-utsvalue='{"brandno":"47262","filter_yn":"y","request_id":"f90da18bd0614e3eaf69ce2cd02900e2","tracking_id":"e7007p7006r7298m11485d1024s20i0"}' for="attribute__default--7팜스토리" title="필터 조건에 '팜스토리' 추가">
              <span class="text">
               팜스토리
              </span>
             </label>
            </div>
            <div class="section__checkbox_form section__checkbox_form--active_item">
             <label class="custom_form--label" data-montelena-acode="100001161" data-montelena-utsevent="click" data-montelena-utsimpression="false" data-montelena-utstype="utility" data-montelena-utsvalue='{"brandno":"43004","filter_yn":"y","request_id":"f90da18bd0614e3eaf69ce2cd02900e2","tracking_id":"e7007p7006r7298m11485d1024s20i0"}' for="attribute__default--8농협" title="필터 조건에 '농협' 추가">
              <span class="text">
               농협
              </span>
             </label>
            </div>
            <div class="section__checkbox_form section__checkbox_form--active_item">
             <label class="custom_form--label" data-montelena-acode="100001161" data-montelena-utsevent="click" data-montelena-utsimpression="false" data-montelena-utstype="utility" data-montelena-utsvalue='{"brandno":"32438","filter_yn":"y","request_id":"f90da18bd0614e3eaf69ce2cd02900e2","tracking_id":"e7007p7006r7298m11485d1024s20i0"}' for="attribute__default--9한아름드린" title="필터 조건에 '한아름드린' 추가">
              <span class="text">
               한아름드린
              </span>
             </label>
            </div>
            <div class="section__checkbox_form section__checkbox_form--active_item">
             <label class="custom_form--label" data-montelena-acode="100001161" data-montelena-utsevent="click" data-montelena-utsimpression="false" data-montelena-utstype="utility" data-montelena-utsvalue='{"brandno":"20189","filter_yn":"y","request_id":"f90da18bd0614e3eaf69ce2cd02900e2","tracking_id":"e7007p7006r7298m11485d1024s20i0"}' for="attribute__default--10누리원" title="필터 조건에 '누리원' 추가">
              <span class="text">
               누리원
              </span>
             </label>
            </div>
            <div class="section__checkbox_form section__checkbox_form--active_item">
             <label class="custom_form--label" data-montelena-acode="100001161" data-montelena-utsevent="click" data-montelena-utsimpression="false" data-montelena-utstype="utility" data-montelena-utsvalue='{"brandno":"34013","filter_yn":"y","request_id":"f90da18bd0614e3eaf69ce2cd02900e2","tracking_id":"e7007p7006r7298m11485d1024s20i0"}' for="attribute__default--11산과들에" title="필터 조건에 '산과들에' 추가">
              <span class="text">
               산과들에
              </span>
             </label>
            </div>
            <div class="section__checkbox_form section__checkbox_form--active_item">
             <label class="custom_form--label" data-montelena-acode="100001161" data-montelena-utsevent="click" data-montelena-utsimpression="false" data-montelena-utstype="utility" data-montelena-utsvalue='{"brandno":"26696","filter_yn":"y","request_id":"f90da18bd0614e3eaf69ce2cd02900e2","tracking_id":"e7007p7006r7298m11485d1024s20i0"}' for="attribute__default--12그린팜" title="필터 조건에 '그린팜' 추가">
              <span class="text">
               그린팜
              </span>
             </label>
            </div>
            <div class="section__checkbox_form section__checkbox_form--active_item">
             <label class="custom_form--label" data-montelena-acode="100001161" data-montelena-utsevent="click" data-montelena-utsimpression="false" data-montelena-utstype="utility" data-montelena-utsvalue='{"brandno":"37036","filter_yn":"y","request_id":"f90da18bd0614e3eaf69ce2cd02900e2","tracking_id":"e7007p7006r7298m11485d1024s20i0"}' for="attribute__default--13풍성에프에이" title="필터 조건에 '풍성에프에이' 추가">
              <span class="text">
               풍성에프에이
              </span>
             </label>
            </div>
            <div class="section__checkbox_form section__checkbox_form--active_item">
             <label class="custom_form--label" data-montelena-acode="100001161" data-montelena-utsevent="click" data-montelena-utsimpression="false" data-montelena-utstype="utility" data-montelena-utsvalue='{"brandno":"22406","filter_yn":"y","request_id":"f90da18bd0614e3eaf69ce2cd02900e2","tracking_id":"e7007p7006r7298m11485d1024s20i0"}' for="attribute__default--14프레시로드" title="필터 조건에 '프레시로드' 추가">
              <span class="text">
               프레시로드
              </span>
             </label>
            </div>
            <div class="section__checkbox_form section__checkbox_form--active_item">
             <label class="custom_form--label" data-montelena-acode="100001161" data-montelena-utsevent="click" data-montelena-utsimpression="false" data-montelena-utstype="utility" data-montelena-utsvalue='{"brandno":"30137","filter_yn":"y","request_id":"f90da18bd0614e3eaf69ce2cd02900e2","tracking_id":"e7007p7006r7298m11485d1024s20i0"}' for="attribute__default--15총각네" title="필터 조건에 '총각네' 추가">
              <span class="text">
               총각네
              </span>
             </label>
            </div>
            <div class="section__checkbox_form section__checkbox_form--active_item">
             <label class="custom_form--label" data-montelena-acode="100001161" data-montelena-utsevent="click" data-montelena-utsimpression="false" data-montelena-utstype="utility" data-montelena-utsvalue='{"brandno":"26862","filter_yn":"y","request_id":"f90da18bd0614e3eaf69ce2cd02900e2","tracking_id":"e7007p7006r7298m11485d1024s20i0"}' for="attribute__default--16청정원" title="필터 조건에 '청정원' 추가">
              <span class="text">
               청정원
              </span>
             </label>
            </div>
            <div class="section__checkbox_form section__checkbox_form--active_item">
             <label class="custom_form--label" data-montelena-acode="100001161" data-montelena-utsevent="click" data-montelena-utsimpression="false" data-montelena-utstype="utility" data-montelena-utsvalue='{"brandno":"37309","filter_yn":"y","request_id":"f90da18bd0614e3eaf69ce2cd02900e2","tracking_id":"e7007p7006r7298m11485d1024s20i0"}' for="attribute__default--17한아름" title="필터 조건에 '한아름' 추가">
              <span class="text">
               한아름
              </span>
             </label>
            </div>
            <div class="section__checkbox_form section__checkbox_form--active_item">
             <label class="custom_form--label" data-montelena-acode="100001161" data-montelena-utsevent="click" data-montelena-utsimpression="false" data-montelena-utstype="utility" data-montelena-utsvalue='{"brandno":"36944","filter_yn":"y","request_id":"f90da18bd0614e3eaf69ce2cd02900e2","tracking_id":"e7007p7006r7298m11485d1024s20i0"}' for="attribute__default--18코스트코" title="필터 조건에 '코스트코' 추가">
              <span class="text">
               코스트코
              </span>
             </label>
            </div>
            <div class="section__checkbox_form section__checkbox_form--active_item">
             <label class="custom_form--label" data-montelena-acode="100001161" data-montelena-utsevent="click" data-montelena-utsimpression="false" data-montelena-utstype="utility" data-montelena-utsvalue='{"brandno":"32867","filter_yn":"y","request_id":"f90da18bd0614e3eaf69ce2cd02900e2","tracking_id":"e7007p7006r7298m11485d1024s20i0"}' for="attribute__default--19초록마을" title="필터 조건에 '초록마을' 추가">
              <span class="text">
               초록마을
              </span>
             </label>
            </div>
            <div class="section__checkbox_form ">
             <label class="custom_form--label" data-montelena-acode="100001161" data-montelena-utsevent="click" data-montelena-utsimpression="false" data-montelena-utstype="utility" data-montelena-utsvalue='{"brandno":"26682","filter_yn":"y","request_id":"f90da18bd0614e3eaf69ce2cd02900e2","tracking_id":"e7007p7006r7298m11485d1024s20i0"}' for="attribute__default--20굽네치킨" title="필터 조건에 '굽네치킨' 추가">
              <span class="text">
               굽네치킨
              </span>
             </label>
            </div>
            <div class="section__checkbox_form ">
             바디나인<li>[area1][mkey1]</li><li>[linkx]</li><li>[area1][keywordx][symbolx][area1][keywordx][symbolx][bracketl1][area1][keywordx][bracketr1][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx]</li><li>[area1][mkey1]</li>
            </div>
            <div class="section__checkbox_form ">
             <label class="custom_form--label" data-montelena-acode="100001161" data-montelena-utsevent="click" data-montelena-utsimpression="false" data-montelena-utstype="utility" data-montelena-utsvalue='{"brandno":"36561","filter_yn":"y","request_id":"f90da18bd0614e3eaf69ce2cd02900e2","tracking_id":"e7007p7006r7298m11485d1024s20i0"}' for="attribute__default--22아이홈" title="필터 조건에 '아이홈' 추가">
              <span class="text">
               아이홈
              </span>
             </label>
            </div>
            <div class="section__checkbox_form ">
             <label class="custom_form--label" data-montelena-acode="100001161" data-montelena-utsevent="click" data-montelena-utsimpression="false" data-montelena-utstype="utility" data-montelena-utsvalue='{"brandno":"30470","filter_yn":"y","request_id":"f90da18bd0614e3eaf69ce2cd02900e2","tracking_id":"e7007p7006r7298m11485d1024s20i0"}' for="attribute__default--23은빛촌" title="필터 조건에 '은빛촌' 추가">
              <span class="text">
               은빛촌
              </span>
             </label>
            </div>
            <div class="section__checkbox_form ">
             <label class="custom_form--label" data-montelena-acode="100001161" data-montelena-utsevent="click" data-montelena-utsimpression="false" data-montelena-utstype="utility" data-montelena-utsvalue='{"brandno":"27774","filter_yn":"y","request_id":"f90da18bd0614e3eaf69ce2cd02900e2","tracking_id":"e7007p7006r7298m11485d1024s20i0"}' for="attribute__default--24오뚜기" title="필터 조건에 '오뚜기' 추가">
              <span class="text">
               오뚜기
              </span>
             </label>
            </div>
            <div class="section__checkbox_form ">
             <label class="custom_form--label" data-montelena-acode="100001161" data-montelena-utsevent="click" data-montelena-utsimpression="false" data-montelena-utstype="utility" data-montelena-utsvalue='{"brandno":"26875","filter_yn":"y","request_id":"f90da18bd0614e3eaf69ce2cd02900e2","tracking_id":"e7007p7006r7298m11485d1024s20i0"}' for="attribute__default--25이팜" title="필터 조건에 '이팜' 추가">
              <span class="text">
               이팜
              </span>
             </label>
            </div>
            <div class="section__checkbox_form ">
             <label class="custom_form--label" data-montelena-acode="100001161" data-montelena-utsevent="click" data-montelena-utsimpression="false" data-montelena-utstype="utility" data-montelena-utsvalue='{"brandno":"25362","filter_yn":"y","request_id":"f90da18bd0614e3eaf69ce2cd02900e2","tracking_id":"e7007p7006r7298m11485d1024s20i0"}' for="attribute__default--26허닭" title="필터 조건에 '허닭' 추가">
              <span class="text">
               허닭
              </span>
             </label>
            </div>
            <div class="section__checkbox_form ">
             <label class="custom_form--label" data-montelena-acode="100001161" data-montelena-utsevent="click" data-montelena-utsimpression="false" data-montelena-utstype="utility" data-montelena-utsvalue='{"brandno":"61460","filter_yn":"y","request_id":"f90da18bd0614e3eaf69ce2cd02900e2","tracking_id":"e7007p7006r7298m11485d1024s20i0"}' for="attribute__default--27넛츠앤" title="필터 조건에 '넛츠앤' 추가">
              <span class="text">
               넛츠앤
              </span>
             </label>
            </div>
            <div class="section__checkbox_form ">
             <label class="custom_form--label" data-montelena-acode="100001161" data-montelena-utsevent="click" data-montelena-utsimpression="false" data-montelena-utstype="utility" data-montelena-utsvalue='{"brandno":"43063","filter_yn":"y","request_id":"f90da18bd0614e3eaf69ce2cd02900e2","tracking_id":"e7007p7006r7298m11485d1024s20i0"}' for="attribute__default--28GFresh" title="필터 조건에 'GFresh' 추가">
              <span class="text">
               GFresh
              </span>
             </label>
            </div>
            <div class="section__checkbox_form ">
             <label class="custom_form--label" data-montelena-acode="100001161" data-montelena-utsevent="click" data-montelena-utsimpression="false" data-montelena-utstype="utility" data-montelena-utsvalue='{"brandno":"36376","filter_yn":"y","request_id":"f90da18bd0614e3eaf69ce2cd02900e2","tracking_id":"e7007p7006r7298m11485d1024s20i0"}' for="attribute__default--29숀리핏푸드" title="필터 조건에 '숀리핏푸드' 추가">
              <span class="text">
               숀리핏푸드
              </span>
             </label>
            </div>
            <div class="section__checkbox_form ">
             <label class="custom_form--label" data-montelena-acode="100001161" data-montelena-utsevent="click" data-montelena-utsimpression="false" data-montelena-utstype="utility" data-montelena-utsvalue='{"brandno":"34330","filter_yn":"y","request_id":"f90da18bd0614e3eaf69ce2cd02900e2","tracking_id":"e7007p7006r7298m11485d1024s20i0"}' for="attribute__default--30이훈의건강한세상" title="필터 조건에 '이훈의건강한세상' 추가">
              <span class="text">
               이훈의건강한세상
              </span>
             </label>
            </div>
            <div class="section__checkbox_form ">
             <label class="custom_form--label" data-montelena-acode="100001161" data-montelena-utsevent="click" data-montelena-utsimpression="false" data-montelena-utstype="utility" data-montelena-utsvalue='{"brandno":"30245","filter_yn":"y","request_id":"f90da18bd0614e3eaf69ce2cd02900e2","tracking_id":"e7007p7006r7298m11485d1024s20i0"}' for="attribute__default--31이든타운에프앤비" title="필터 조건에 '이든타운에프앤비' 추가">
              <span class="text">
               이든타운에프앤비
              </span>
             </label>
            </div>
            <div class="section__checkbox_form ">
             <label class="custom_form--label" data-montelena-acode="100001161" data-montelena-utsevent="click" data-montelena-utsimpression="false" data-montelena-utstype="utility" data-montelena-utsvalue='{"brandno":"24064","filter_yn":"y","request_id":"f90da18bd0614e3eaf69ce2cd02900e2","tracking_id":"e7007p7006r7298m11485d1024s20i0"}' for="attribute__default--32헬스앤뷰티" title="필터 조건에 '헬스앤뷰티' 추가">
              <span class="text">
               헬스앤뷰티
              </span>
             </label>
            </div>
            <div class="section__checkbox_form ">
             <label class="custom_form--label" data-montelena-acode="100001161" data-montelena-utsevent="click" data-montelena-utsimpression="false" data-montelena-utstype="utility" data-montelena-utsvalue='{"brandno":"23482","filter_yn":"y","request_id":"f90da18bd0614e3eaf69ce2cd02900e2","tracking_id":"e7007p7006r7298m11485d1024s20i0"}' for="attribute__default--33자연마을" title="필터 조건에 '자연마을' 추가">
              <span class="text">
               자연마을
              </span>
             </label>
            </div>
            <button class="button--show_more_filter_as_each_item" title="브랜드 필터 더보기" type="button">
             <span class="text">
              더보기
             </span>
            </button>
           </div>
          </div>
         </div>
        </div>
        <div class="section--module_wrap" module-design-id="1023">
         <div class="component component--filter type--toggle name--price on">
          <h4 class="text--module_title">
           가격대
          </h4>
          <p class="filter_title">
           가격대
          </p>
          <button class="button--filter_toggle" title="'가격대 상세검색' 전체 닫기" type="button">
           <span class="icon">
            <span class="ir">
             '가격대 상세검색' 전체 닫기
            </span>
           </span>
          </button>
          <div class="filter_content">
           <div class="section--price">
            <div class="section--price_form">
             <label for="min_price">
              최소금액
             </label>
             <span class="text--hyphen">
              ~
             </span>
             <label for="max_price">
              최대금액
             </label>
             <button class="button--filter_price " title="입력하신 가격대로 검색합니다." type="button">
              <span class="ir">
               가격 필터 적용
              </span>
             </button>
            </div>
           </div>
          </div>
         </div>
        </div>
        <div class="section--module_wrap" module-design-id="1022">
         <div class="component component--filter type--toggle name--search on">
          <h4 class="text--module_title">
           결과 내 검색
          </h4>
          <p class="filter_title">
           결과 내 검색
          </p>
          <button class="button--filter_toggle" title="'결과 내 검색 상세검색' 전체 닫기" type="button">
           <span class="icon">
            <span class="ir">
             '결과 내 검색 상세검색' 전체 닫기
            </span>
           </span>
          </button>
          <div class="filter_content">
           <div class="section--research">
            <label for="research">
             결과 내 검색어 입력 필드<li>[area1][keywordx]</li>[pkeyx]<li>[area1][keywordx][symbolx][area1][keywordx][symbolx][bracketl15][area1][keywordx][bracketr15][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx]</li><li>[pkeyx]</li>[area1][mkey1]
            </label>
            <button class="button--research " title="입력하신 키워드로 재검색 합니다." type="button">
             <span class="ir">
              결과 내 검색
             </span>
            </button>
           </div>
          </div>
         </div>
        </div>
        <div class="section--module_wrap" module-design-id="2001">
        </div>
       </div>
      </div>
      <div id="region--content_body">
       <h3 class="text--region_title">
        <b>[area1][mkey1][symbolx][pkeyx][symbolx][area1][keyword1][bracketl1][area1][keywordx][bracketr1][symbolx][bracketl2][area1][keywordx][bracketr2][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx]</b>
       </h3>
       <div id="section--inner_content_body_container">
        <div class="section--module_wrap" module-design-id="3062">
         <div class="component component--guidance">
          <div class="section--guidance">
           <strong class="text__guidance-title">
            많이 찾으시는 브랜드입니다.
           </strong>
           <ul class="list__guidance">
            <li class="list-item__guidance">
             <a class="link" href="/list?category=51220100&amp;f=b:43065">
              [linkx]
              
             </a>
            </li>
            <li class="list-item__guidance">
             <a class="link" href="/list?category=51220100&amp;f=b:43934">
              <span class="text">
               푸르젠
              </span>
             </a>
            </li>
            <li class="list-item__guidance">
             [ahref]
             
            </li>
           </ul>
          </div>
         </div>
        </div>
        <div class="section--module_wrap" module-design-id="1020">
         <div class="component component--chance_shopping">
          <h4 class="text--module_title">
           찬스쇼핑
           광고 상품 목록
          </h4>
          <div class="section--component_title">
           <p class="text--title">
            찬스쇼핑
           </p>
           <div class="section--advertisement ">
            <button class="button--notice_about_advertisement" title="광고 안내 레이어 보기" type="button">
             <span class="text">
              광고
             </span>
            </button>
            <div class="layer--information">
             <strong class="text--information_title">
              찬스쇼핑이란?
             </strong>
             <p class="text--information_description">
              찬스쇼핑 광고를 구매한 상품으로 입찰가 순으로 전시됩니다.
             </p>
             <button class="button--close_layer" type="button">
              <span class="ir">
               광고
               안내 레이어 닫기
              </span>
             </button>
            </div>
           </div>
          </div>
          [ahref]
          
          <ul class="list--chance_shopping">
           <li class="item">
            [linkx]
            
            <div class="section--item_information">
             [ahref]
             
             <a class="link--description_1" href="/DetailView.aspx?itemno=B280283561" target="_blank">
              (해남미소)영양간식 한입에반한 고구마말랭이 10봉
             </a>
             <div class="link--price">
              <span class="text--price_info">
              </span>
              <span class="text--price_number">
               15,500
              </span>
              <span class="text--price_unit">
               원
              </span>
             </div>
            </div>
           </li>
           <li class="item">
            <a class="link--thumbnail_item" href="/DetailView.aspx?itemno=B585712810" target="_blank" title="해남군청직영해남미소의 (해남미소)두레 황토 꿀고구마 3kg 5kg 페이지로 이동합니다.">
            </a>
            <div class="section--item_information">
             [linkx]
             
             [ahref]
             
             <div class="link--price">
              <span class="text--price_info">
              </span>
              <span class="text--price_number">
               16,500
              </span>
              <span class="text--price_unit">
               원
              </span>
             </div>
            </div>
           </li>
           <li class="item">
            [ahref]
            
            <div class="section--item_information">
             <a class="link--seller" href="/wowhn" target="_blank">
              해남유정이네농산물
             </a>
             [linkx]
             
             <div class="link--price">
              <span class="text--price_info">
              </span>
              <span class="text--price_number">
               54,450
              </span>
              <span class="text--price_unit">
               원
              </span>
             </div>
            </div>
           </li>
           <li class="item">
            [ahref]
            
            <div class="section--item_information">
             <a class="link--seller" href="/wowhn" target="_blank">
              해남유정이네농산물
             </a>
             <a class="link--description_1" href="/core/click?nextUrl=http%3a%2f%2fitempage3.auction.co.kr%2fDetailView.aspx%3fitemno%3dB537837337&amp;data=wn4M7ou6NNP8wjfdrtn6AOLeQT5ljjNAt27fm%2fZIDeWMWUY9DUImHQzj1Dqyp0UAVI0doVShmn5czCxr%2fS9F9IqwZGmmeVhcU9zsHVPSGjPNW%2fhuQAsaWaghoXHNlVAr4zDNO5GxfpLD90HkuDMXzSYgkBOxWPCvTxQFaSwU94owIvCfcABHhxSHvxmVh%2bpCKZ6lQf3JKiabTJSbGqTpefkbyDQ8pYCMlTF4LEf5pChdJ%2bbgMbqZqRyavYWQOvx0SZwvh7aSbOLY9AC0dYUqRNRSS9E%2bCXpR6AKLsHgBkSJboLsM%2b%2bJ1PYY4O28BPfHucu8HWAFJ0J1heIbf2D%2foNEVqeS1LRUIX%2bJZTaDkSS1x%2fbuO%2fw1SZCR7I8OpmT%2b7%2bkRsRIOMGiaLSGt%2b3aH9M9cJW9yeAmrdrBGmmE44k6zWk%3d&amp;referrer=app%3a%2f%2f&amp;seq=125745277729&amp;type=2" target="_blank">
              해남 호박/밤/꿀 고구마모종 20kg
             </a>
             <div class="link--price">
              <span class="text--price_info">
              </span>
              <span class="text--price_number">
               98,450
              </span>
              <span class="text--price_unit">
               원
              </span>
             </div>
            </div>
           </li>
           <li class="item">
            [linkx]
            
            <div class="section--item_information">
             [ahref]
             
             [ahref]
             
             <div class="link--price">
              <span class="text--price_info">
              </span>
              <span class="text--price_number">
               92,000
              </span>
              <span class="text--price_unit">
               원
              </span>
             </div>
            </div>
           </li>
          </ul>
         </div>
        </div>
        <div class="section--module_wrap" module-design-id="18">
         <div class="component component--item_card type--general">
          <h4 class="text--module_title">
           일반상품 아이템카드
          </h4>
          <div class="itemcard">
           <div class="section--component_title">
            <p class="text--title">
             파워클릭
            </p>
            <div class="section--advertisement ">
             <button class="button--notice_about_advertisement" title="광고 안내 레이어 보기" type="button">
              <span class="text">
               광고
              </span>
             </button>
             <div class="layer--information">
              <strong class="text--information_title">
               파워클릭이란?
              </strong>
              <p class="text--information_description">
               파워클릭 광고를 구매한 상품 중, 연관성과 입찰가를 고려하여 전시됩니다.
              </p>
              <button class="button--close_layer" type="button">
               <span class="ir">
                광고
                안내 레이어 닫기
               </span>
              </button>
             </div>
            </div>
            <a class="link--page" href="m" target="_blank" title="파워클릭 상품등록 페이지로 이동합니다.">
             <span class="text">
              상품등록
             </span>
            </a>
           </div>
           <div class="section--itemcard">
            <div class="section--itemcard_img">
             <a class="link--itemcard image--loading" href="/core/click?nextUrl=http%3a%2f%2fitempage3.auction.co.kr%2fDetailView.aspx%3fitemno%3dB516250677&amp;data=w3YoKjKgvE4Lcsg73xJWiOWNj12O%2bKNY7STUrjNd4k%2fIuYRxbsIK4%2f7jlxYtthUcwP5Qrub1G1EpmqnpICAaKOwXvmdKDRd42ClPpG5zAYLoljmWeOXVqV4CfdzumDiNG82tvqjLUfZ1PUcss2J%2f9rEfhpLDf7acWJYr%2fXM4p4Bg1ut3gTjhHlhC7zo3jCEQPxUCXq89%2b%2fsp2CwCYVZ1ynyzvC3MxSrqBmAr%2fuFS90mVuD4AMnJ6PQjIf7dyOEtLGDUnbn08VMj5f%2btmm6A%2fdtPQAvx8GwUHgOlX1EnAoqghcjVkylA0MsHgK%2fjTsF9XscJjaS3qocQaxo1I%2brM7jbRvrWz66NXNfOxvjwQY1wmA7tn84KO3sXFETdqEKBQ39BLLNXBbAZJLI%2bgVDfwmrViyf3VjJl9e7RbhTZIPGwdE%3d&amp;referrer=app%3a%2f%2f&amp;seq=125745277713&amp;type=2" target="_blank">
              <div class="lazyload-placeholder" style="height:100%">
              </div>
             </a>
            </div>
            <div class="section--itemcard_info">
             <div class="section--itemcard_info_major">
              <div class="area--itemcard_title">
               <span class="text--itemcard_title ellipsis">
                [ahref]
                
               </span>
              </div>
              <div class="area--itemcard_price">
               <span class="price_seller">
                <span class="for-a11y">
                 상품금액
                </span>
                <strong class="text--price_seller">
                 10,000
                </strong>
                <span class="text--unit">
                 원
                </span>
               </span>
              </div>
             </div>
             <div class="section--itemcard_info_add">
              <ul class="list--addinfo">
               <li class="item">
                <span class="text--addinfo">
                 배송비 4,000원
                </span>
               </li>
              </ul>
             </div>
             <div class="section--itemcard_info_score">
              <ul class="list--score">
               <li class="item awards">
                <span class="for-a11y">
                 만족도
                 90
                 %입니다.
                </span>
                <div class="seller_awards" title="만족도 90 % 입니다">
                 <span class="awards_points" style="width:90%">
                 </span>
                 <span class="bg_star">
                 </span>
                </div>
               </li>
               <li class="item reviewcnt">
                <span class="text--reviewcnt">
                 상품평
                 2
                </span>
                <span class="for-a11y">
                 건
                </span>
               </li>
               <li class="item buycnt">
                <span class="text--buycnt">
                 구매
                 6
                </span>
                <span class="for-a11y">
                 건
                </span>
               </li>
              </ul>
             </div>
             <div class="section--itemcard_info_shop">
              [ahref]
              
             </div>
             <button class="button--favorite ">
              <span class="icon--favorite">
               <span class="for-a11y">
                관심상품 등록하기
               </span>
              </span>
             </button>
             <button class="button--related_item" title="연관상품 18 개가 있습니다. ">
              <span class="text--related_item">
               <b class="text--title">
                연관상품
               </b>
               <b class="text--cnt">
                18
               </b>
              </span>
             </button>
            </div>
           </div>
          </div>
          <div class="popup--related_items ">
           <h2 class="section--title">
            [area1][mkey1][symbolx][pkeyx][symbolx][area1][keyword1][bracketl1][area1][keywordx][bracketr1][symbolx][bracketl2][area1][keywordx][bracketr2][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx]
           </h2>
           <div class="section--body">
            <div class="section--related_items">
             <div class="section--slick_area">
              <div class="list--related_items">
               <div class="slick-slider slick-initialized">
                <div class="slick-list">
                 <div class="slick-track" style="width:0%;left:NaN%">
                 </div>
                </div>
               </div>
              </div>
             </div>
            </div>
           </div>
          </div>
         </div>
         <div class="component component--item_card type--general">
          <h4 class="text--module_title">
           일반상품 아이템카드
          </h4>
          <div class="itemcard">
           <div class="section--itemcard">
            <div class="section--itemcard_img">
             [linkx]
             
            </div>
            <div class="section--itemcard_info">
             <div class="section--itemcard_info_major">
              <div class="area--itemcard_title">
               <span class="text--itemcard_title ellipsis">
                [ahref]
                
               </span>
              </div>
              <div class="area--itemcard_price">
               <span class="discount" title="할인률">
                <strong class="text--discount">
                 50
                </strong>
                <span class="text--unit">
                 %
                </span>
                <span class="for-a11y">
                 할인
                </span>
               </span>
               <span class="price_seller">
                <span class="for-a11y">
                 할인적용금액
                </span>
                <strong class="text--price_seller">
                 14,650
                </strong>
                <span class="text--unit">
                 원
                </span>
               </span>
               <span class="price_original">
                <span class="for-a11y">
                 상품금액
                </span>
                <strong class="text--price_original">
                 29,800
                </strong>
                <span class="text--unit">
                 원
                </span>
               </span>
              </div>
             </div>
             <div class="section--itemcard_info_add">
              <ul class="list--addinfo">
               <li class="item">
                <span class="text--addinfo">
                 배송비 3,500원
                </span>
               </li>
              </ul>
             </div>
             <div class="section--itemcard_info_score">
              <ul class="list--score">
              </ul>
             </div>
             <div class="section--itemcard_info_shop">
              [ahref]
              
             </div>
             <button class="button--favorite ">
              <span class="icon--favorite">
               <span class="for-a11y">
                관심상품 등록하기
               </span>
              </span>
             </button>
            </div>
           </div>
          </div>
         </div>
         <div class="component component--item_card type--general">
          <h4 class="text--module_title">
           일반상품 아이템카드
          </h4>
          <div class="itemcard">
           <div class="section--itemcard">
            <div class="section--itemcard_img">
             <a class="link--itemcard image--loading" href="/core/click?nextUrl=http%3a%2f%2fitempage3.auction.co.kr%2fDetailView.aspx%3fitemno%3dB502066580&amp;data=wOInCwShaQ%2be%2fsJ0VBWw0XeyDn7m7uVAaBA6UJMw9NaHN0g0t51JF6nqV5uzHAzZN3Muk21JsigsO6vIDN5NB6X4gf26D3et%2fvBxwZelZHHcd3M22q3f6OfivDE2646syRwxSgFRbWFCqi4EjRjDVigWBHdik%2fIqc5qAXfMRWU%2bTxaTKgMmcnYRnHhJS5k99mSA5A1fhXYjGMyzcdwkQ2lsgaHhLPfRph0vS39fXrQ1Ew6iEshdq3qkFFmzuwZ7K6bzLzJXQ2hmVRecNB1QirIyJ72oRCzQHcVCEE%2fdyNSsrzXnjx3Pyba8RPb9NqxwSDloatlBiESX8LlMDMtCvDbz34CZUtUFc1PATFB5OGE9qL%2biqYldK59771FsD6WKIbbDjSlPZFuICoMVMtyYem%2bgMW1UFucwNjslpcoQb1CDY%3d&amp;referrer=app%3a%2f%2f&amp;seq=125745277715&amp;type=2" target="_blank">
              <div class="lazyload-placeholder" style="height:100%">
              </div>
             </a>
            </div>
            <div class="section--itemcard_info">
             <div class="section--itemcard_info_major">
              <div class="area--itemcard_title">
               <span class="text--itemcard_title ellipsis">
                <a class="link--itemcard" href="/core/click?nextUrl=http%3a%2f%2fitempage3.auction.co.kr%2fDetailView.aspx%3fitemno%3dB502066580&amp;data=wOInCwShaQ%2be%2fsJ0VBWw0XeyDn7m7uVAaBA6UJMw9NaHN0g0t51JF6nqV5uzHAzZN3Muk21JsigsO6vIDN5NB6X4gf26D3et%2fvBxwZelZHHcd3M22q3f6OfivDE2646syRwxSgFRbWFCqi4EjRjDVigWBHdik%2fIqc5qAXfMRWU%2bTxaTKgMmcnYRnHhJS5k99mSA5A1fhXYjGMyzcdwkQ2lsgaHhLPfRph0vS39fXrQ1Ew6iEshdq3qkFFmzuwZ7K6bzLzJXQ2hmVRecNB1QirIyJ72oRCzQHcVCEE%2fdyNSsrzXnjx3Pyba8RPb9NqxwSDloatlBiESX8LlMDMtCvDbz34CZUtUFc1PATFB5OGE9qL%2biqYldK59771FsD6WKIbbDjSlPZFuICoMVMtyYem%2bgMW1UFucwNjslpcoQb1CDY%3d&amp;referrer=app%3a%2f%2f&amp;seq=125745277715&amp;type=2" target="_blank">
                 <span class="for-a11y">
                  브랜드명
                 </span>
                 <span class="text--brand">
                 </span>
                 <span class="for-a11y">
                  상품명
                 </span>
                 <span class="text--title">
                  해남 꿀 밤고구마 호박고구마 3kg 5kg
                 </span>
                </a>
               </span>
              </div>
              <div class="area--itemcard_price">
               <span class="price_seller">
                <span class="for-a11y">
                 상품금액
                </span>
                <strong class="text--price_seller">
                 15,900
                </strong>
                <span class="text--unit">
                 원
                </span>
               </span>
              </div>
             </div>
             <div class="section--itemcard_info_add">
              <ul class="list--addinfo">
               <li class="item">
                <span class="text--addinfo">
                 무료배송
                </span>
               </li>
              </ul>
             </div>
             <div class="section--itemcard_info_score">
              <ul class="list--score">
               <li class="item awards">
                <span class="for-a11y">
                 만족도
                 94
                 %입니다.
                </span>
                <div class="seller_awards" title="만족도 94 % 입니다">
                 <span class="awards_points" style="width:94%">
                 </span>
                 <span class="bg_star">
                 </span>
                </div>
               </li>
               <li class="item reviewcnt">
                <span class="text--reviewcnt">
                 상품평
                 1,648
                </span>
                <span class="for-a11y">
                 건
                </span>
               </li>
               <li class="item buycnt">
                <span class="text--buycnt">
                 구매
                 4,061
                </span>
                <span class="for-a11y">
                 건
                </span>
               </li>
              </ul>
             </div>
             <div class="section--itemcard_info_shop">
              [linkx]
              
              <span class="for-a11y">
               판매자평가정보
              </span>
              <ul class="list--store_info">
               <li class="item">
                <span class="text--store_info">
                 배송
                </span>
               </li>
               <li class="item">
                <span class="text--store_info">
                 상품평
                </span>
               </li>
               <li class="item">
                <span class="text--store_info">
                 고객응대우수
                </span>
               </li>
              </ul>
             </div>
             <button class="button--favorite ">
              <span class="icon--favorite">
               <span class="for-a11y">
                관심상품 등록하기
               </span>
              </span>
             </button>
            </div>
           </div>
          </div>
         </div>
         <div class="component component--item_card type--general">
          <h4 class="text--module_title">
           일반상품 아이템카드
          </h4>
          <div class="itemcard">
           <div class="section--itemcard">
            <div class="section--itemcard_img">
             [linkx]
             
            </div>
            <div class="section--itemcard_info">
             <div class="section--itemcard_info_major">
              <div class="area--itemcard_title">
               <span class="text--itemcard_title ellipsis">
                [ahref]
                
               </span>
              </div>
              <div class="area--itemcard_price">
               <span class="price_seller">
                <span class="for-a11y">
                 상품금액
                </span>
                <strong class="text--price_seller">
                 16,600
                </strong>
                <span class="text--unit">
                 원
                </span>
               </span>
              </div>
             </div>
             <div class="section--itemcard_info_add">
              <ul class="list--addinfo">
               <li class="item">
                <span class="text--addinfo">
                 무료배송
                </span>
               </li>
              </ul>
             </div>
             <div class="section--itemcard_info_score">
              <ul class="list--score">
               <li class="item awards">
                <span class="for-a11y">
                 만족도
                 96
                 %입니다.
                </span>
                <div class="seller_awards" title="만족도 96 % 입니다">
                 <span class="awards_points" style="width:96%">
                 </span>
                 <span class="bg_star">
                 </span>
                </div>
               </li>
               <li class="item reviewcnt">
                <span class="text--reviewcnt">
                 상품평
                 54
                </span>
                <span class="for-a11y">
                 건
                </span>
               </li>
               <li class="item buycnt">
                <span class="text--buycnt">
                 구매
                 216
                </span>
                <span class="for-a11y">
                 건
                </span>
               </li>
              </ul>
             </div>
             <div class="section--itemcard_info_shop">
              <a class="link--shop" href="/komallm" target="_blank" title="스토어로 이동">
               <span class="for-a11y">
                판매자
               </span>
               <span class="text">
                랭킹닭컴
               </span>
              </a>
              <span class="for-a11y">
               판매자평가정보
              </span>
              <ul class="list--store_info">
               <li class="item top_seller">
                <div class="section--advertisement ">
                 <button class="button--notice_about_advertisement" title="최우수판매자 안내 레이어 보기" type="button">
                  <span class="text">
                   최우수판매자
                  </span>
                 </button>
                 <div class="layer--information">
                  <strong class="text--information_title">
                   최우수판매자란?
                  </strong>
                  <p class="text--information_description">
                   옥션의 판매인증 평가기준을 모두 달성한 최상위 판매자
                  </p>
                  <button class="button--close_layer" type="button">
                   <span class="ir">
                    최우수판매자
                    안내 레이어 닫기
                   </span>
                  </button>
                 </div>
                </div>
               </li>
              </ul>
             </div>
             <button class="button--favorite ">
              <span class="icon--favorite">
               <span class="for-a11y">
                관심상품 등록하기
               </span>
              </span>
             </button>
            </div>
           </div>
          </div>
         </div>
         <div class="component component--item_card type--general">
          <h4 class="text--module_title">
           일반상품 아이템카드
          </h4>
          <div class="itemcard">
           <div class="section--itemcard">
            <div class="section--itemcard_img">
             <a class="link--itemcard image--loading" href="/core/click?nextUrl=http%3a%2f%2fitempage3.auction.co.kr%2fDetailView.aspx%3fitemno%3dB397460161&amp;data=w3YoKjKgvE4JRqKKGHcXdbTilU9WePNte1btXRHHn0Y2g3tojNyb60m6huFYYqISnNHElilWEiqgBvdp5r1kcrB%2b3cUSW79sTP2VFYf7TNs0zsJncmWEFce8P1LejSkfvskGpf8sGRfLp2C9HUe3wgomDbju06XqFnEZcapANm7vp4KYNosTXE5w9C%2fpfy8v%2fR%2bZeFd%2fQ6drz%2fFrrDdS8GTzQDO2RAvB8aqSJINo%2fErp7ni4phGmi7PVezc5ibrGJsvWpA912h6O2Vx2817t4IrHDUkU2%2bF%2fEj1VvwMsfOVlRCmuTjeJO8fSAwgVq8nAWfWxXPpPvI8Wppqi5qx83UAI4NfFiNPFhowx6NLb%2fhWi8%2b0uxdSKJ%2bWfVCAYCEjPGL6IjuKDpJYC%2f%2fcMo0VINJvx%2b%2fNJ3b6nuNbzxQtkugg0%3d&amp;referrer=app%3a%2f%2f&amp;seq=125745277717&amp;type=2" target="_blank">
              <div class="lazyload-placeholder" style="height:100%">
              </div>
             </a>
            </div>
            <div class="section--itemcard_info">
             <div class="section--itemcard_info_major">
              <div class="area--itemcard_title">
               <span class="text--itemcard_title ellipsis">
                <a class="link--itemcard" href="/core/click?nextUrl=http%3a%2f%2fitempage3.auction.co.kr%2fDetailView.aspx%3fitemno%3dB397460161&amp;data=w3YoKjKgvE4JRqKKGHcXdbTilU9WePNte1btXRHHn0Y2g3tojNyb60m6huFYYqISnNHElilWEiqgBvdp5r1kcrB%2b3cUSW79sTP2VFYf7TNs0zsJncmWEFce8P1LejSkfvskGpf8sGRfLp2C9HUe3wgomDbju06XqFnEZcapANm7vp4KYNosTXE5w9C%2fpfy8v%2fR%2bZeFd%2fQ6drz%2fFrrDdS8GTzQDO2RAvB8aqSJINo%2fErp7ni4phGmi7PVezc5ibrGJsvWpA912h6O2Vx2817t4IrHDUkU2%2bF%2fEj1VvwMsfOVlRCmuTjeJO8fSAwgVq8nAWfWxXPpPvI8Wppqi5qx83UAI4NfFiNPFhowx6NLb%2fhWi8%2b0uxdSKJ%2bWfVCAYCEjPGL6IjuKDpJYC%2f%2fcMo0VINJvx%2b%2fNJ3b6nuNbzxQtkugg0%3d&amp;referrer=app%3a%2f%2f&amp;seq=125745277717&amp;type=2" target="_blank">
                 <span class="for-a11y">
                  브랜드명
                 </span>
                 <span class="text--brand">
                 </span>
                 <span class="for-a11y">
                  상품명
                 </span>
                 <span class="text--title">
                  무첨가 국산 100% 미들채 군고구마g 20봉
                 </span>
                </a>
               </span>
              </div>
              <div class="area--itemcard_price">
               <span class="price_seller">
                <span class="for-a11y">
                 상품금액
                </span>
                <strong class="text--price_seller">
                 32,700
                </strong>
                <span class="text--unit">
                 원
                </span>
               </span>
              </div>
             </div>
             <div class="section--itemcard_info_add">
              <ul class="list--addinfo">
               <li class="item">
                <span class="text--addinfo">
                 무료배송
                </span>
               </li>
              </ul>
             </div>
             <div class="section--itemcard_info_score">
              <ul class="list--score">
               <li class="item awards">
                <span class="for-a11y">
                 만족도
                 98
                 %입니다.
                </span>
                <div class="seller_awards" title="만족도 98 % 입니다">
                 <span class="awards_points" style="width:98%">
                 </span>
                 <span class="bg_star">
                 </span>
                </div>
               </li>
               <li class="item reviewcnt">
                <span class="text--reviewcnt">
                 상품평
                 203
                </span>
                <span class="for-a11y">
                 건
                </span>
               </li>
               <li class="item buycnt">
                <span class="text--buycnt">
                 구매
                 444
                </span>
                <span class="for-a11y">
                 건
                </span>
               </li>
              </ul>
             </div>
             <div class="section--itemcard_info_shop">
              [linkx]
              
              <span class="for-a11y">
               판매자평가정보
              </span>
              <ul class="list--store_info">
               <li class="item top_seller">
                <div class="section--advertisement ">
                 <button class="button--notice_about_advertisement" title="최우수판매자 안내 레이어 보기" type="button">
                  <span class="text">
                   최우수판매자
                  </span>
                 </button>
                 <div class="layer--information">
                  <strong class="text--information_title">
                   최우수판매자란?
                  </strong>
                  <p class="text--information_description">
                   옥션의 판매인증 평가기준을 모두 달성한 최상위 판매자
                  </p>
                  <button class="button--close_layer" type="button">
                   <span class="ir">
                    최우수판매자
                    안내 레이어 닫기
                   </span>
                  </button>
                 </div>
                </div>
               </li>
              </ul>
             </div>
             <button class="button--favorite ">
              <span class="icon--favorite">
               <span class="for-a11y">
                관심상품 등록하기
               </span>
              </span>
             </button>
            </div>
           </div>
          </div>
         </div>
         <div class="component component--item_card type--general">
          <h4 class="text--module_title">
           일반상품 아이템카드
          </h4>
          <div class="itemcard">
           <div class="section--itemcard">
            <div class="section--itemcard_img">
             <a class="link--itemcard image--loading" href="/core/click?nextUrl=http%3a%2f%2fitempage3.auction.co.kr%2fDetailView.aspx%3fitemno%3dB427762195&amp;data=wjVF2FirLS%2bxBjLT0VdIgUrFsRu8VvN7MD7YQ8OpPnYQRjcG%2bUv0C4Eb8AU7RPnPfySaJ%2f2PrqwmM0h7LSucmeSqmfka60hkiGFdWYXFQy8KXCT5c0UWTpfzKD%2fRzEbkgn%2f%2ft0pm7OWKwWsvcR%2baA9QsMdiUNQ1JxQUOoQLgN7sxn1jGJ90bkNo8Oc22bNF%2f1eY%2fkZi4RDeqAus07L47FMupFwC%2b6zyh1sivPuc3Rlz5K2NL1v3Ln4TCKxFpl%2fpHOp7KP6zb1nWvh5eCmJVTJ1KEnUoFM7S3BSawW8TxzjDUU21FXVS%2f07Q0n3C7u32ITRicjxBEP9j58syefH%2bS79eq5jzId7zR%2bBCg5EAYVzx4TLfHXDtQe1MvNXAVGsOPA7RfWUkjVo%2fj0aGupEtgO%2bBflAdt%2faNZ8joA1qzP5Gfs%3d&amp;referrer=app%3a%2f%2f&amp;seq=125745277718&amp;type=2" target="_blank">
              <div class="lazyload-placeholder" style="height:100%">
              </div>
             </a>
            </div>
            <div class="section--itemcard_info">
             <div class="section--itemcard_info_major">
              <div class="area--itemcard_title">
               <span class="text--itemcard_title ellipsis">
                [linkx]
                
               </span>
              </div>
              <div class="area--itemcard_price">
               <span class="price_seller">
                <span class="for-a11y">
                 상품금액
                </span>
                <strong class="text--price_seller">
                 14,900
                </strong>
                <span class="text--unit">
                 원
                </span>
               </span>
              </div>
             </div>
             <div class="section--itemcard_info_add">
              <ul class="list--addinfo">
               <li class="item">
                <span class="text--addinfo">
                 무료배송
                </span>
               </li>
              </ul>
             </div>
             <div class="section--itemcard_info_score">
              <ul class="list--score">
               <li class="item awards">
                <span class="for-a11y">
                 만족도
                 96
                 %입니다.
                </span>
                <div class="seller_awards" title="만족도 96 % 입니다">
                 <span class="awards_points" style="width:96%">
                 </span>
                 <span class="bg_star">
                 </span>
                </div>
               </li>
               <li class="item reviewcnt">
                <span class="text--reviewcnt">
                 상품평
                 68
                </span>
                <span class="for-a11y">
                 건
                </span>
               </li>
               <li class="item buycnt">
                <span class="text--buycnt">
                 구매
                 149
                </span>
                <span class="for-a11y">
                 건
                </span>
               </li>
              </ul>
             </div>
             <div class="section--itemcard_info_shop">
              <a class="link--shop" href="/galleria3" target="_blank" title="스토어로 이동">
               <span class="for-a11y">
                판매자
               </span>
               <span class="text">
                갤러리아Mall
               </span>
              </a>
              <span class="for-a11y">
               판매자평가정보
              </span>
              <ul class="list--store_info">
               <li class="item">
                <span class="text--store_info">
                 배송
                </span>
               </li>
               <li class="item">
                <span class="text--store_info">
                 상품평우수
                </span>
               </li>
              </ul>
             </div>
             <button class="button--favorite ">
              <span class="icon--favorite">
               <span class="for-a11y">
                관심상품 등록하기
               </span>
              </span>
             </button>
            </div>
           </div>
          </div>
         </div>
         <div class="component component--item_card type--general">
          <h4 class="text--module_title">
           일반상품 아이템카드
          </h4>
          <div class="itemcard">
           <div class="section--itemcard">
            <div class="section--itemcard_img">
             [ahref]
             
            </div>
            <div class="section--itemcard_info">
             <div class="section--itemcard_info_major">
              <div class="area--itemcard_title">
               <span class="text--itemcard_title ellipsis">
                <a class="link--itemcard" href="/core/click?nextUrl=http%3a%2f%2fitempage3.auction.co.kr%2fDetailView.aspx%3fitemno%3dB642233353&amp;data=wBx8rMLxPt3VssgDb7Gk99TlPe4DS73%2f63mbRmFLmLk%2bbLTb13gRf9EyDqQeIlzHkimHmyLMBPgNYu%2f2jeYgrWTrfFpzvB6J2UJblnJhb69dHD3otw1AkkAdV0k1VHQG8XMArrAVI20dz%2bjIOX%2b0BoxF9Qa%2b7hwX3BOzQbgeFfRZZURfaZjS7Kwth%2bim7RoM5QUW26OKXsw8XAM4rI8FWQo%2bYT9SfubeJYsck3D%2fF0mDmn5dULzv3xteb44LTUNbuEr%2b4FVVmgNsay7MaDlMtvI4Qssj9TEdKDepkFr6kvSBTPgrPFZ%2bvrmgrk1oEkmLCS%2bKM5P38GLdatP7tQEu%2bT8QO%2fVikCEUurfkCW%2bdO9bMmDGRIgU6m4muXQsNHvk8okIWhz0R0U8YrcnlUDKMG2QkQD7493MeOv%2bqak%2fHpG1g%3d&amp;referrer=app%3a%2f%2f&amp;seq=125745277719&amp;type=2" target="_blank">
                 <span class="for-a11y">
                  브랜드명
                 </span>
                 <span class="text--brand">
                  팜스토리
                 </span>
                 <span class="for-a11y">
                  상품명
                 </span>
                 <span class="text--title">
                  영양간식 호박고구마말랭이 10봉 봉당 60g (갤러리아)
                 </span>
                </a>
               </span>
              </div>
              <div class="area--itemcard_price">
               <span class="discount" title="할인률">
                <strong class="text--discount">
                </strong>
                <span class="text--unit">
                </span>
                <span class="for-a11y">
                 할인
                </span>
               </span>
               <span class="price_seller">
                <span class="for-a11y">
                 할인적용금액
                </span>
                <strong class="text--price_seller">
                 33,830
                </strong>
                <span class="text--unit">
                 원
                </span>
               </span>
               <span class="price_original">
                <span class="for-a11y">
                 상품금액
                </span>
                <strong class="text--price_original">
                 34,000
                </strong>
                <span class="text--unit">
                 원
                </span>
               </span>
              </div>
             </div>
             <div class="section--itemcard_info_add">
              <ul class="list--addinfo">
               <li class="item">
                <span class="text--addinfo">
                 무료배송
                </span>
               </li>
              </ul>
             </div>
             <div class="section--itemcard_info_score">
              <ul class="list--score">
               <li class="item buycnt">
                <span class="text--buycnt">
                 구매
                 1
                </span>
                <span class="for-a11y">
                 건
                </span>
               </li>
              </ul>
             </div>
             <div class="section--itemcard_info_shop">
              [linkx]
              
              <span class="for-a11y">
               판매자평가정보
              </span>
              <ul class="list--store_info">
               <li class="item">
                <h1>
                 <b>[area1][mkey1][symbolx][pkeyx][symbolx][area1][keyword1][bracketl1][area1][keywordx][bracketr1][symbolx][bracketl2][area1][keywordx][bracketr2][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx]</b>
                </h1>
                <span class="text--store_info">
                 배송
                </span>
               </li>
               <li class="item">
                <span class="text--store_info">
                 상품평우수
                </span>
               </li>
              </ul>
             </div>
             <button class="button--favorite ">
              <span class="icon--favorite">
               <span class="for-a11y">
                관심상품 등록하기
               </span>
              </span>
             </button>
            </div>
           </div>
          </div>
         </div>
         <div class="component component--item_card type--general">
          <h4 class="text--module_title">
           일반상품 아이템카드
          </h4>
          <div class="itemcard">
           <div class="section--itemcard">
            <div class="section--itemcard_img">
             <a class="link--itemcard image--loading" href="/core/click?nextUrl=http%3a%2f%2fitempage3.auction.co.kr%2fDetailView.aspx%3fitemno%3dB405187337&amp;data=wz4tErPvsLEWWMwuqJlNZMX3D7ZNXQCnmEzC0j%2bnzNlrzE4I%2fFmAt5nmwKC24aYWtVARHDvu7PsdxlFlriqMY5ygB11wprH%2fC3SWDMKSTlt7ADfRTEqnqQ7Inc%2fkl5wP8%2f4RbyQ8WZll3y9Bsbw0ZAR9vXlLHiilfvMOaRr4foPPSZrvAY8%2beoNo7CWPxphG3z%2buQ%2fcmj9hoCoriOIlfdIar8azYhza6h00BXxn0GCiwGyF37fKSdwwL12PXHK2kzTJrqvOy%2b1f%2bAnS%2bKR0%2bXYmW12V6zTn0oTtf4orMnkp%2fgG4XOh%2fYLkpdJb7ALjTY1s%2bbrbFMSHhXy3E1eM9Yc%2bYDGraUHfUxahwcsgFuKUNlVu0awya0jJoyB0I%2f%2fqpga0mmfKozj8dGMHojnXo3DrpyQjff9ir80PuP4E%2bXLzV8%3d&amp;referrer=app%3a%2f%2f&amp;seq=125745277720&amp;type=2" target="_blank">
              <div class="lazyload-placeholder" style="height:100%">
              </div>
             </a>
            </div>
            <div class="section--itemcard_info">
             <div class="section--itemcard_info_major">
              <div class="area--itemcard_title">
               <span class="text--itemcard_title ellipsis">
                [ahref]
                
               </span>
              </div>
              <div class="area--itemcard_price">
               <span class="price_seller">
                <span class="for-a11y">
                 상품금액
                </span>
                <strong class="text--price_seller">
                 12,900
                </strong>
                <span class="text--unit">
                 원
                </span>
               </span>
              </div>
             </div>
             <div class="section--itemcard_info_add">
              <ul class="list--addinfo">
               <li class="item">
                <span class="text--addinfo">
                 무료배송
                </span>
               </li>
              </ul>
             </div>
             <div class="section--itemcard_info_score">
              <ul class="list--score">
               <li class="item awards">
                <span class="for-a11y">
                 만족도
                 94
                 %입니다.
                </span>
                <div class="seller_awards" title="만족도 94 % 입니다">
                 <span class="awards_points" style="width:94%">
                 </span>
                 <span class="bg_star">
                 </span>
                </div>
               </li>
               <li class="item reviewcnt">
                <span class="text--reviewcnt">
                 상품평
                 7,715
                </span>
                <span class="for-a11y">
                 건
                </span>
               </li>
               <li class="item buycnt">
                <span class="text--buycnt">
                 구매
                 16,818
                </span>
                <span class="for-a11y">
                 건
                </span>
               </li>
              </ul>
             </div>
             <div class="section--itemcard_info_shop">
              [ahref]
              
              <span class="for-a11y">
               판매자평가정보
              </span>
              <ul class="list--store_info">
               <li class="item">
                <span class="text--store_info">
                 상품평
                </span>
               </li>
               <li class="item">
                <span class="text--store_info">
                 고객응대우수
                </span>
               </li>
              </ul>
             </div>
             <button class="button--favorite ">
              <span class="icon--favorite">
               <span class="for-a11y">
                관심상품 등록하기
               </span>
              </span>
             </button>
             <button class="button--related_item" title="연관상품 7 개가 있습니다. ">
              <span class="text--related_item">
               <b class="text--title">
                연관상품
               </b>
               <b class="text--cnt">
                7
               </b>
              </span>
             </button>
            </div>
           </div>
          </div>
          <div class="popup--related_items ">
           <h2 class="section--title">
            [area1][mkey1][symbolx][pkeyx][symbolx][area1][keyword1][bracketl1][area1][keywordx][bracketr1][symbolx][bracketl2][area1][keywordx][bracketr2][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx]
           </h2>
           <div class="section--body">
            <div class="section--related_items">
             <div class="section--slick_area">
              <div class="list--related_items">
               <div class="slick-slider slick-initialized">
                <div class="slick-list">
                 <div class="slick-track" style="width:0%;left:NaN%">
                 </div>
                </div>
               </div>
              </div>
             </div>
            </div>
           </div>
          </div>
         </div>
        </div>
        <div class="section--module_wrap" module-design-id="1016">
         <div class="component component--tab_list type--simple ">
          <div class="section--tab_arear">
           <ul class="list--tab">
            <li class="item--tab on">
             <a class="link--tab" href="/list?category=51220100&amp;t=a">
              <span class="text--tab_name">
               전체
              </span>
              <span class="text--item_count">
               2,838
              </span>
              <span class="for-a11y">
               개 상품보기
              </span>
              <span class="for-a11y">
               현재 활성화된 탭입니다.
              </span>
             </a>
            </li>
            <li class="item--tab ">
             [ahref]
             
            </li>
            <li class="item--tab ">
             <a class="link--tab" href="/list?category=51220100&amp;t=s">
              <span class="text--tab_name">
               스마일배송
              </span>
              <span class="text--item_count">
               1
              </span>
              <span class="for-a11y">
               개 상품보기
              </span>
             </a>
            </li>
            <li class="item--tab ">
             [linkx]
             
            </li>
            <li class="item--tab ">
             [ahref]
             
            </li>
           </ul>
          </div>
         </div>
        </div>
        <div class="section--module_wrap" module-design-id="17">
         <div class="component component--item_card type--general">
          <h4 class="text--module_title">
           일반상품 아이템카드
          </h4>
          <div class="itemcard">
           <div class="section--component_title">
            <p class="text--title">
             파워등록
            </p>
            <div class="section--advertisement ">
             <button class="button--notice_about_advertisement" title="광고 안내 레이어 보기" type="button">
              <span class="text">
               광고
              </span>
             </button>
             <div class="layer--information">
              <strong class="text--information_title">
               파워등록이란?
              </strong>
              <p class="text--information_description">
               파워등록 광고를 구매한 상품으로 입찰가순으로 전시됩니다.
              </p>
              <button class="button--close_layer" type="button">
               <span class="ir">
                광고
                안내 레이어 닫기
               </span>
              </button>
             </div>
            </div>
            [linkx]
            
           </div>
           <div class="section--itemcard">
            <div class="section--itemcard_img">
             <a class="link--itemcard image--loading" href="/DetailView.aspx?itemno=B280283561" target="_blank">
              <div class="lazyload-placeholder" style="height:100%">
              </div>
             </a>
            </div>
            <div class="section--itemcard_info">
             <div class="section--itemcard_info_major">
              <div class="area--itemcard_title">
               <span class="text--itemcard_title ellipsis">
                [linkx]
                
               </span>
              </div>
              <div class="area--itemcard_price">
               <span class="price_seller">
                <span class="for-a11y">
                 상품금액
                </span>
                <strong class="text--price_seller">
                 15,500
                </strong>
                <span class="text--unit">
                 원
                </span>
               </span>
              </div>
             </div>
             <div class="section--itemcard_info_add">
              <ul class="list--addinfo">
               <li class="item">
                <span class="text--addinfo">
                 무료배송
                </span>
               </li>
              </ul>
             </div>
             <div class="section--itemcard_info_score">
              <ul class="list--score">
               <li class="item awards">
                <span class="for-a11y">
                 만족도
                 96
                 %입니다.
                </span>
                <div class="seller_awards" title="만족도 96 % 입니다">
                 <span class="awards_points" style="width:96%">
                 </span>
                 <span class="bg_star">
                 </span>
                </div>
               </li>
               <li class="item reviewcnt">
                <span class="text--reviewcnt">
                 상품평
                 3,215
                </span>
                <span class="for-a11y">
                 건
                </span>
               </li>
               <li class="item buycnt">
                <span class="text--buycnt">
                 구매
                 10,411
                </span>
                <span class="for-a11y">
                 건
                </span>
               </li>
              </ul>
             </div>
             <div class="section--itemcard_info_shop">
              <a class="link--shop" href="/hnmiso" target="_blank" title="스토어로 이동">
               <span class="for-a11y">
                판매자
               </span>
               <span class="text">
                해남군청직영해남미소
               </span>
              </a>
              <span class="for-a11y">
               판매자평가정보
              </span>
              <ul class="list--store_info">
               <li class="item top_seller">
                <div class="section--advertisement ">
                 <button class="button--notice_about_advertisement" title="최우수판매자 안내 레이어 보기" type="button">
                  <span class="text">
                   최우수판매자
                  </span>
                 </button>
                 <div class="layer--information">
                  <strong class="text--information_title">
                   최우수판매자란?
                  </strong>
                  <p class="text--information_description">
                   옥션의 판매인증 평가기준을 모두 달성한 최상위 판매자
                  </p>
                  <button class="button--close_layer" type="button">
                   <span class="ir">
                    최우수판매자
                    안내 레이어 닫기
                   </span>
                  </button>
                 </div>
                </div>
               </li>
              </ul>
             </div>
             <button class="button--favorite ">
              <span class="icon--favorite">
               <span class="for-a11y">
                관심상품 등록하기
               </span>
              </span>
             </button>
            </div>
           </div>
          </div>
         </div>
         <div class="component component--item_card type--general">
          <h4 class="text--module_title">
           일반상품 아이템카드
          </h4>
          <div class="itemcard">
           <div class="section--itemcard">
            <div class="section--itemcard_img">
             [linkx]
             
            </div>
            <div class="section--itemcard_info">
             <div class="section--itemcard_info_major">
              <div class="area--itemcard_title">
               <span class="text--itemcard_title ellipsis">
                <a class="link--itemcard" href="/DetailView.aspx?itemno=B585712810" target="_blank">
                 <span class="for-a11y">
                  브랜드명
                 </span>
                 <span class="text--brand">
                 </span>
                 <span class="for-a11y">
                  상품명
                 </span>
                 <span class="text--title">
                  (해남미소)두레 황토 꿀고구마 3kg 5kg
                 </span>
                </a>
               </span>
              </div>
              <div class="area--itemcard_price">
               <span class="price_seller">
                <span class="for-a11y">
                 상품금액
                </span>
                <strong class="text--price_seller">
                 16,500
                </strong>
                <span class="text--unit">
                 원
                </span>
               </span>
              </div>
             </div>
             <div class="section--itemcard_info_add">
              <ul class="list--addinfo">
               <li class="item">
                <span class="text--addinfo">
                 무료배송
                </span>
               </li>
              </ul>
             </div>
             <div class="section--itemcard_info_score">
              <ul class="list--score">
               <li class="item awards">
                <span class="for-a11y">
                 만족도
                 92
                 %입니다.
                </span>
                <div class="seller_awards" title="만족도 92 % 입니다">
                 <span class="awards_points" style="width:92%">
                 </span>
                 <span class="bg_star">
                 </span>
                </div>
               </li>
               <li class="item reviewcnt">
                <span class="text--reviewcnt">
                 상품평
                 135
                </span>
                <span class="for-a11y">
                 건
                </span>
               </li>
               <li class="item buycnt">
                <span class="text--buycnt">
                 구매
                 357
                </span>
                <span class="for-a11y">
                 건
                </span>
               </li>
              </ul>
             </div>
             <div class="section--itemcard_info_shop">
              [linkx]
              
              <span class="for-a11y">
               판매자평가정보
              </span>
              <ul class="list--store_info">
               <li class="item top_seller">
                <div class="section--advertisement ">
                 <button class="button--notice_about_advertisement" title="최우수판매자 안내 레이어 보기" type="button">
                  <span class="text">
                   최우수판매자
                  </span>
                 </button>
                 <div class="layer--information">
                  <strong class="text--information_title">
                   최우수판매자란?
                  </strong>
                  <p class="text--information_description">
                   옥션의 판매인증 평가기준을 모두 달성한 최상위 판매자
                  </p>
                  <button class="button--close_layer" type="button">
                   <span class="ir">
                    최우수판매자
                    안내 레이어 닫기
                   </span>
                  </button>
                 </div>
                </div>
               </li>
              </ul>
             </div>
             <button class="button--favorite ">
              <span class="icon--favorite">
               <span class="for-a11y">
                관심상품 등록하기
               </span>
              </span>
             </button>
            </div>
           </div>
          </div>
         </div>
         <div class="component component--item_card type--general">
          <h4 class="text--module_title">
           일반상품 아이템카드
          </h4>
          <div class="itemcard">
           <div class="section--itemcard">
            <div class="section--itemcard_img">
             [ahref]
             
            </div>
            <div class="section--itemcard_info">
             <div class="section--itemcard_info_major">
              <div class="area--itemcard_title">
               <span class="text--itemcard_title ellipsis">
                <a class="link--itemcard" href="/DetailView.aspx?itemno=B655294782" target="_blank">
                 <span class="for-a11y">
                  브랜드명
                 </span>
                 <span class="text--brand">
                 </span>
                 <span class="for-a11y">
                  상품명
                 </span>
                 <span class="text--title">
                  해남 황토 꿀밤고구마 3kg 5kg
                 </span>
                </a>
               </span>
              </div>
              <div class="area--itemcard_price">
               <span class="discount" title="할인률">
                <strong class="text--discount">
                </strong>
                <span class="text--unit">
                </span>
                <span class="for-a11y">
                 할인
                </span>
               </span>
               <span class="price_seller">
                <span class="for-a11y">
                 할인적용금액
                </span>
                <strong class="text--price_seller">
                 13,830
                </strong>
                <span class="text--unit">
                 원
                </span>
               </span>
               <span class="price_original">
                <span class="for-a11y">
                 상품금액
                </span>
                <strong class="text--price_original">
                 13,900
                </strong>
                <span class="text--unit">
                 원
                </span>
               </span>
              </div>
             </div>
             <div class="section--itemcard_info_add">
              <ul class="list--addinfo">
               <li class="item">
                <span class="text--addinfo">
                 무료배송
                </span>
               </li>
              </ul>
             </div>
             <div class="section--itemcard_info_score">
              <ul class="list--score">
               <li class="item awards">
                <span class="for-a11y">
                 만족도
                 92
                 %입니다.
                </span>
                <div class="seller_awards" title="만족도 92 % 입니다">
                 <span class="awards_points" style="width:92%">
                 </span>
                 <span class="bg_star">
                 </span>
                </div>
               </li>
               <li class="item reviewcnt">
                <span class="text--reviewcnt">
                 상품평
                 12
                </span>
                <span class="for-a11y">
                 건
                </span>
               </li>
               <li class="item buycnt">
                <span class="text--buycnt">
                 구매
                 22
                </span>
                <span class="for-a11y">
                 건
                </span>
               </li>
              </ul>
             </div>
             <div class="section--itemcard_info_shop">
              <a class="link--shop" href="/daebudogrape1" target="_blank" title="스토어로 이동">
               <span class="for-a11y">
                판매자
               </span>
               <span class="text">
                매일농장
               </span>
              </a>
             </div>
             <button class="button--favorite ">
              <span class="icon--favorite">
               <span class="for-a11y">
                관심상품 등록하기
               </span>
              </span>
             </button>
            </div>
           </div>
          </div>
         </div>
         <div class="component component--item_card type--general">
          <h4 class="text--module_title">
           일반상품 아이템카드
          </h4>
          <div class="itemcard">
           <div class="section--itemcard">
            <div class="section--itemcard_img">
             [linkx]
             
            </div>
            <div class="section--itemcard_info">
             <div class="section--itemcard_info_major">
              <div class="area--itemcard_title">
               <span class="text--itemcard_title ellipsis">
                [linkx]
                
               </span>
              </div>
              <div class="area--itemcard_price">
               <span class="discount" title="할인률">
                <strong class="text--discount">
                </strong>
                <span class="text--unit">
                </span>
                <span class="for-a11y">
                 할인
                </span>
               </span>
               <span class="price_seller">
                <span class="for-a11y">
                 할인적용금액
                </span>
                <strong class="text--price_seller">
                 23,780
                </strong>
                <span class="text--unit">
                 원
                </span>
               </span>
               <span class="price_original">
                <span class="for-a11y">
                 상품금액
                </span>
                <strong class="text--price_original">
                 23,900
                </strong>
                <span class="text--unit">
                 원
                </span>
               </span>
              </div>
             </div>
             <div class="section--itemcard_info_add">
              <ul class="list--addinfo">
               <li class="item">
                <span class="text--addinfo">
                 무료배송
                </span>
               </li>
              </ul>
             </div>
             <div class="section--itemcard_info_score">
              <ul class="list--score">
               <li class="item awards">
                <span class="for-a11y">
                 만족도
                 100
                 %입니다.
                </span>
                <div class="seller_awards" title="만족도 100 % 입니다">
                 <span class="awards_points" style="width:100%">
                 </span>
                 <span class="bg_star">
                 </span>
                </div>
               </li>
               <li class="item reviewcnt">
                <span class="text--reviewcnt">
                 상품평
                 2
                </span>
                <span class="for-a11y">
                 건
                </span>
               </li>
               <li class="item buycnt">
                <span class="text--buycnt">
                 구매
                 6
                </span>
                <span class="for-a11y">
                 건
                </span>
               </li>
              </ul>
             </div>
             <div class="section--itemcard_info_shop">
              [linkx]
              
              <span class="for-a11y">
               판매자평가정보
              </span>
              <ul class="list--store_info">
               <li class="item top_seller">
                <div class="section--advertisement ">
                 <button class="button--notice_about_advertisement" title="최우수판매자 안내 레이어 보기" type="button">
                  <span class="text">
                   최우수판매자
                  </span>
                 </button>
                 <div class="layer--information">
                  <strong class="text--information_title">
                   최우수판매자란?
                  </strong>
                  <p class="text--information_description">
                   옥션의 판매인증 평가기준을 모두 달성한 최상위 판매자
                  </p>
                  <button class="button--close_layer" type="button">
                   <span class="ir">
                    최우수판매자
                    안내 레이어 닫기
                   </span>
                  </button>
                 </div>
                </div>
               </li>
              </ul>
             </div>
             <button class="button--favorite ">
              <span class="icon--favorite">
               <span class="for-a11y">
                관심상품 등록하기
               </span>
              </span>
             </button>
            </div>
           </div>
          </div>
         </div>
         <div class="component component--item_card type--general">
          <h4 class="text--module_title">
           일반상품 아이템카드
          </h4>
          <div class="itemcard">
           <div class="section--itemcard">
            <div class="section--itemcard_img">
             [ahref]
             
            </div>
            <div class="section--itemcard_info">
             <div class="section--itemcard_info_major">
              <div class="area--itemcard_title">
               <span class="text--itemcard_title ellipsis">
                [linkx]
                
               </span>
              </div>
              <div class="area--itemcard_price">
               <span class="discount" title="할인률">
                <strong class="text--discount">
                </strong>
                <span class="text--unit">
                </span>
                <span class="for-a11y">
                 할인
                </span>
               </span>
               <span class="price_seller">
                <span class="for-a11y">
                 할인적용금액
                </span>
                <strong class="text--price_seller">
                 20,790
                </strong>
                <span class="text--unit">
                 원
                </span>
               </span>
               <span class="price_original">
                <span class="for-a11y">
                 상품금액
                </span>
                <strong class="text--price_original">
                 20,900
                </strong>
                <span class="text--unit">
                 원
                </span>
               </span>
              </div>
             </div>
             <div class="section--itemcard_info_add">
              <ul class="list--addinfo">
               <li class="item">
                <span class="text--addinfo">
                 무료배송
                </span>
               </li>
              </ul>
             </div>
             <div class="section--itemcard_info_score">
              <ul class="list--score">
               <li class="item reviewcnt">
                <span class="text--reviewcnt">
                 상품평
                 5
                </span>
                <span class="for-a11y">
                 건
                </span>
               </li>
               <li class="item buycnt">
                <span class="text--buycnt">
                 구매
                 26
                </span>
                <span class="for-a11y">
                 건
                </span>
               </li>
              </ul>
             </div>
             <div class="section--itemcard_info_shop">
              <a class="link--shop" href="/naturemeeting" target="_blank" title="스토어로 이동">
               <span class="for-a11y">
                판매자
               </span>
               <span class="text">
                자연맛남
               </span>
              </a>
              <span class="for-a11y">
               판매자평가정보
              </span>
              <ul class="list--store_info">
               <li class="item top_seller">
                <div class="section--advertisement ">
                 <button class="button--notice_about_advertisement" title="최우수판매자 안내 레이어 보기" type="button">
                  <span class="text">
                   최우수판매자
                  </span>
                 </button>
                 <div class="layer--information">
                  <strong class="text--information_title">
                   최우수판매자란?
                  </strong>
                  <p class="text--information_description">
                   옥션의 판매인증 평가기준을 모두 달성한 최상위 판매자
                  </p>
                  <button class="button--close_layer" type="button">
                   <span class="ir">
                    최우수판매자
                    안내 레이어 닫기
                   </span>
                  </button>
                 </div>
                </div>
               </li>
              </ul>
             </div>
             <button class="button--favorite ">
              <span class="icon--favorite">
               <span class="for-a11y">
                관심상품 등록하기
               </span>
              </span>
             </button>
            </div>
           </div>
          </div>
         </div>
         <div class="component component--item_card type--general">
          <h4 class="text--module_title">
           일반상품 아이템카드
          </h4>
          <div class="itemcard">
           <div class="section--itemcard">
            <div class="section--itemcard_img">
             [ahref]
             
            </div>
            <div class="section--itemcard_info">
             <div class="section--itemcard_info_major">
              <div class="area--itemcard_title">
               <span class="text--itemcard_title ellipsis">
                [linkx]
                
               </span>
              </div>
              <div class="area--itemcard_price">
               <span class="discount" title="할인률">
                <strong class="text--discount">
                </strong>
                <span class="text--unit">
                </span>
                <span class="for-a11y">
                 할인
                </span>
               </span>
               <span class="price_seller">
                <span class="for-a11y">
                 할인적용금액
                </span>
                <strong class="text--price_seller">
                 11,840
                </strong>
                <span class="text--unit">
                 원
                </span>
               </span>
               <span class="price_original">
                <span class="for-a11y">
                 상품금액
                </span>
                <strong class="text--price_original">
                 11,900
                </strong>
                <span class="text--unit">
                 원
                </span>
               </span>
              </div>
             </div>
             <div class="section--itemcard_info_add">
              <ul class="list--addinfo">
               <li class="item">
                <span class="text--addinfo">
                 무료배송
                </span>
               </li>
              </ul>
             </div>
             <div class="section--itemcard_info_score">
              <ul class="list--score">
               <li class="item awards">
                <span class="for-a11y">
                 만족도
                 98
                 %입니다.
                </span>
                <div class="seller_awards" title="만족도 98 % 입니다">
                 <span class="awards_points" style="width:98%">
                 </span>
                 <span class="bg_star">
                 </span>
                </div>
               </li>
               <li class="item reviewcnt">
                <span class="text--reviewcnt">
                 상품평
                 13
                </span>
                <span class="for-a11y">
                 건
                </span>
               </li>
               <li class="item buycnt">
                <span class="text--buycnt">
                 구매
                 27
                </span>
                <span class="for-a11y">
                 건
                </span>
               </li>
              </ul>
             </div>
             <div class="section--itemcard_info_shop">
              [linkx]
              
              <span class="for-a11y">
               판매자평가정보
              </span>
              <ul class="list--store_info">
               <li class="item top_seller">
                <div class="section--advertisement ">
                 <button class="button--notice_about_advertisement" title="최우수판매자 안내 레이어 보기" type="button">
                  <span class="text">
                   최우수판매자
                  </span>
                 </button>
                 <div class="layer--information">
                  <strong class="text--information_title">
                   최우수판매자란?
                  </strong>
                  <p class="text--information_description">
                   옥션의 판매인증 평가기준을 모두 달성한 최상위 판매자
                  </p>
                  <button class="button--close_layer" type="button">
                   <span class="ir">
                    최우수판매자
                    안내 레이어 닫기
                   </span>
                  </button>
                 </div>
                </div>
               </li>
              </ul>
             </div>
             <button class="button--favorite ">
              <span class="icon--favorite">
               <span class="for-a11y">
                관심상품 등록하기
               </span>
              </span>
             </button>
            </div>
           </div>
          </div>
         </div>
         <div class="component component--item_card type--general">
          <h4 class="text--module_title">
           일반상품 아이템카드
          </h4>
          <div class="itemcard">
           <div class="section--itemcard">
            <div class="section--itemcard_img">
             <a class="link--itemcard image--loading" href="/core/click?nextUrl=http%3a%2f%2fitempage3.auction.co.kr%2fDetailView.aspx%3fitemno%3dB696332162&amp;data=wn4M7ou6NNP%2b0TKZQnX2GII1SuWlUSQo%2fONpri6fMbH68W70qmMKpgon56AKrOtTU1JEONxE4PK%2fdSHm8L1LmjMjtR7pUuWW65ypl2FrXc3XBrcybfJi5QZrF6eCkbQ4C7OLa7Y9eSFlA5vY8j7DrktMYvSp2jvRY6gWiN2BoDHVMnlcucfYEyOct7rLUqCmzE5xxlUkWCT17TC%2bVGevAD1dmxjJlNXwCZ3cra3xeoSxb3oNQHaj7fw2Hot7xLMjq5WTpev8LPw8IxwApA0TIqd4ArB80aSxUsicleksPtfFVUxvGFGBFzhTRFMbXKUrZESFAvfqOPMoIZk3U0YTkzqYngsAW2T%2b9MMMuQrwmjxG1OOPDllYlQ%2fu6gKjcsCbAtTY1VoQks30DQzvLn4XQI4ZzykoyUQie4jcFieFf2W6onrScH07DBg%3d%3d&amp;referrer=app%3a%2f%2f&amp;seq=125745277724&amp;type=2" target="_blank">
              <div class="lazyload-placeholder" style="height:100%">
              </div>
             </a>
            </div>
            <div class="section--itemcard_info">
             <div class="section--itemcard_info_major">
              <div class="area--itemcard_title">
               <span class="text--itemcard_title ellipsis">
                [ahref]
                
               </span>
              </div>
              <div class="area--itemcard_price">
               <span class="price_seller">
                <span class="for-a11y">
                 상품금액
                </span>
                <strong class="text--price_seller">
                 25,500
                </strong>
                <span class="text--unit">
                 원
                </span>
               </span>
              </div>
             </div>
             <div class="section--itemcard_info_add">
              <ul class="list--addinfo">
               <li class="item">
                <span class="text--addinfo">
                 배송비 3,000원
                </span>
               </li>
              </ul>
             </div>
             <div class="section--itemcard_info_score">
              <ul class="list--score">
              </ul>
             </div>
             <div class="section--itemcard_info_shop">
              [ahref]
              
             </div>
             <button class="button--favorite ">
              <span class="icon--favorite">
               <span class="for-a11y">
                관심상품 등록하기
               </span>
              </span>
             </button>
             <button class="button--related_item" title="연관상품 19 개가 있습니다. ">
              <span class="text--related_item">
               <b class="text--title">
                연관상품
               </b>
               <b class="text--cnt">
                19
               </b>
              </span>
             </button>
            </div>
           </div>
          </div>
          <div class="popup--related_items ">
           <h2 class="section--title">
            [area1][mkey1][symbolx][pkeyx][symbolx][area1][keyword1][bracketl1][area1][keywordx][bracketr1][symbolx][bracketl2][area1][keywordx][bracketr2][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx]
           </h2>
           <div class="section--body">
            <div class="section--related_items">
             <div class="section--slick_area">
              <div class="list--related_items">
               <div class="slick-slider slick-initialized">
                <div class="slick-list">
                 <div class="slick-track" style="width:0%;left:NaN%">
                 </div>
                </div>
               </div>
              </div>
             </div>
            </div>
           </div>
          </div>
         </div>
         <div class="component component--item_card type--general">
          <h4 class="text--module_title">
           일반상품 아이템카드
          </h4>
          <div class="itemcard">
           <div class="section--itemcard">
            <div class="section--itemcard_img">
             <a class="link--itemcard image--loading" href="/core/click?nextUrl=http%3a%2f%2fitempage3.auction.co.kr%2fDetailView.aspx%3fitemno%3dB537828340&amp;data=wyF8nBF5RAO9JuZA5IS0DkUdQUbLOrnaejwMTCDUqSZ%2fNEYSVn1JzZkPKI8ShRgPyp%2fFo2QS6UfObGwY%2b8yek3xBH7AkSggi78GTttH6QrmV8gugVUiDOHrhVKI27Bnj5NN5rXwusnsZarJ%2bSaKD%2bWb%2brfM1byY9OemRJFTE8Mj5ocRYumyZm7W5Jft5%2bdZFqWW%2fllRAV%2bCUpaulNW4kCklemv1%2b1LSwKG9QxZH1%2fmU1WDpyRl5UIQsB9JoPqVhYvQYHqFEkpVyl4hyCyZSzrzdW2hO2hamWsMy2QtzS%2b8YVU%2bTg7kYu5IYhnUkAeNE4yCSYeeGmivtHDr6LVH%2fsOVu%2bhbnrRsGAva7Szm6ln2r7MBLgmBnF9F38qRILdwLCGUm2SbiglIYItR%2b6VruiP7S6Lm8vGNY7G%2beJ4KZTPAco%3d&amp;referrer=app%3a%2f%2f&amp;seq=125745277725&amp;type=2" target="_blank">
              <div class="lazyload-placeholder" style="height:100%">
              </div>
             </a>
            </div>
            <div class="section--itemcard_info">
             <div class="section--itemcard_info_major">
              <div class="area--itemcard_title">
               <span class="text--itemcard_title ellipsis">
                <a class="link--itemcard" href="/core/click?nextUrl=http%3a%2f%2fitempage3.auction.co.kr%2fDetailView.aspx%3fitemno%3dB537828340&amp;data=wyF8nBF5RAO9JuZA5IS0DkUdQUbLOrnaejwMTCDUqSZ%2fNEYSVn1JzZkPKI8ShRgPyp%2fFo2QS6UfObGwY%2b8yek3xBH7AkSggi78GTttH6QrmV8gugVUiDOHrhVKI27Bnj5NN5rXwusnsZarJ%2bSaKD%2bWb%2brfM1byY9OemRJFTE8Mj5ocRYumyZm7W5Jft5%2bdZFqWW%2fllRAV%2bCUpaulNW4kCklemv1%2b1LSwKG9QxZH1%2fmU1WDpyRl5UIQsB9JoPqVhYvQYHqFEkpVyl4hyCyZSzrzdW2hO2hamWsMy2QtzS%2b8YVU%2bTg7kYu5IYhnUkAeNE4yCSYeeGmivtHDr6LVH%2fsOVu%2bhbnrRsGAva7Szm6ln2r7MBLgmBnF9F38qRILdwLCGUm2SbiglIYItR%2b6VruiP7S6Lm8vGNY7G%2beJ4KZTPAco%3d&amp;referrer=app%3a%2f%2f&amp;seq=125745277725&amp;type=2" target="_blank">
                 <span class="for-a11y">
                  브랜드명
                 </span>
                 <span class="text--brand">
                 </span>
                 <span class="for-a11y">
                  상품명
                 </span>
                 <span class="text--title">
                  해남 호박/밤/꿀 고구마모종 3kg
                 </span>
                </a>
               </span>
              </div>
              <div class="area--itemcard_price">
               <span class="price_seller">
                <span class="for-a11y">
                 상품금액
                </span>
                <strong class="text--price_seller">
                 19,860
                </strong>
                <span class="text--unit">
                 원
                </span>
               </span>
              </div>
             </div>
             <div class="section--itemcard_info_add">
              <ul class="list--addinfo">
               <li class="item">
                <span class="text--addinfo">
                 무료배송
                </span>
               </li>
              </ul>
             </div>
             <div class="section--itemcard_info_score">
              <ul class="list--score">
               <li class="item awards">
                <span class="for-a11y">
                 만족도
                 96
                 %입니다.
                </span>
                <div class="seller_awards" title="만족도 96 % 입니다">
                 <span class="awards_points" style="width:96%">
                 </span>
                 <span class="bg_star">
                 </span>
                </div>
               </li>
               <li class="item reviewcnt">
                <span class="text--reviewcnt">
                 상품평
                 19
                </span>
                <span class="for-a11y">
                 건
                </span>
               </li>
               <li class="item buycnt">
                <span class="text--buycnt">
                 구매
                 51
                </span>
                <span class="for-a11y">
                 건
                </span>
               </li>
              </ul>
             </div>
             <div class="section--itemcard_info_shop">
              <a class="link--shop" href="/wowhn" target="_blank" title="스토어로 이동">
               <span class="for-a11y">
                판매자
               </span>
               <span class="text">
                해남유정이네농산물
               </span>
              </a>
             </div>
             <button class="button--favorite ">
              <span class="icon--favorite">
               <span class="for-a11y">
                관심상품 등록하기
               </span>
              </span>
             </button>
            </div>
           </div>
          </div>
         </div>
         <div class="component component--item_card type--general">
          <h4 class="text--module_title">
           일반상품 아이템카드
          </h4>
          <div class="itemcard">
           <div class="section--itemcard">
            <div class="section--itemcard_img">
             <a class="link--itemcard image--loading" href="/core/click?nextUrl=http%3a%2f%2fitempage3.auction.co.kr%2fDetailView.aspx%3fitemno%3dB537831608&amp;data=wsP07Kgqvfbz1n5mtyRkB%2fphZ3Z%2bHpCUuu4IjNNU1udRc2UnAKR7rgme%2fVbjp6OZk1xS2cPWV2NE%2f3aJ3WzPRo5PBAcFB6kjubt4ioy8CTuEGi6olvfe3xOMOAZ2s44zsdFjC5KRgddDAjvSAufVpFMnElFWxL1YlE3eH2E4LH96pa6dq8oWXIgN5dykkofRHJsifGp6%2bRRKe3WivrwcKlipQ216FciQM9JrYKR8F362u9fJ8CTJVpsF6suIarMMeBUlhuE%2bHq7a0eB2XYcloxNKYopbb%2fRDSiH6DpNB3ksKoZ19d4akiq%2bsHnfS1eA%2bW%2fIZLbX7zju52P%2fSn50hfLeJcwgEfU9B%2b80l7tpBn%2fOEtvZ%2fwXa%2bol17abtU5mKsWL0IAP1xzQoDsmxWkeSiW0GWXj0NdmYi%2bDlpJmU5D4cA%3d&amp;referrer=app%3a%2f%2f&amp;seq=125745277726&amp;type=2" target="_blank">
              <div class="lazyload-placeholder" style="height:100%">
              </div>
             </a>
            </div>
            <div class="section--itemcard_info">
             <div class="section--itemcard_info_major">
              <div class="area--itemcard_title">
               <span class="text--itemcard_title ellipsis">
                <a class="link--itemcard" href="/core/click?nextUrl=http%3a%2f%2fitempage3.auction.co.kr%2fDetailView.aspx%3fitemno%3dB537831608&amp;data=wsP07Kgqvfbz1n5mtyRkB%2fphZ3Z%2bHpCUuu4IjNNU1udRc2UnAKR7rgme%2fVbjp6OZk1xS2cPWV2NE%2f3aJ3WzPRo5PBAcFB6kjubt4ioy8CTuEGi6olvfe3xOMOAZ2s44zsdFjC5KRgddDAjvSAufVpFMnElFWxL1YlE3eH2E4LH96pa6dq8oWXIgN5dykkofRHJsifGp6%2bRRKe3WivrwcKlipQ216FciQM9JrYKR8F362u9fJ8CTJVpsF6suIarMMeBUlhuE%2bHq7a0eB2XYcloxNKYopbb%2fRDSiH6DpNB3ksKoZ19d4akiq%2bsHnfS1eA%2bW%2fIZLbX7zju52P%2fSn50hfLeJcwgEfU9B%2b80l7tpBn%2fOEtvZ%2fwXa%2bol17abtU5mKsWL0IAP1xzQoDsmxWkeSiW0GWXj0NdmYi%2bDlpJmU5D4cA%3d&amp;referrer=app%3a%2f%2f&amp;seq=125745277726&amp;type=2" target="_blank">
                 <span class="for-a11y">
                  브랜드명
                 </span>
                 <span class="text--brand">
                 </span>
                 <span class="for-a11y">
                  상품명
                 </span>
                 <span class="text--title">
                  해남 호박/꿀/밤 고구마모종 1kg
                 </span>
                </a>
               </span>
              </div>
              <div class="area--itemcard_price">
               <span class="price_seller">
                <span class="for-a11y">
                 상품금액
                </span>
                <strong class="text--price_seller">
                 9,350
                </strong>
                <span class="text--unit">
                 원
                </span>
               </span>
              </div>
             </div>
             <div class="section--itemcard_info_add">
              <ul class="list--addinfo">
               <li class="item">
                <span class="text--addinfo">
                 무료배송
                </span>
               </li>
              </ul>
             </div>
             <div class="section--itemcard_info_score">
              <ul class="list--score">
               <li class="item awards">
                <span class="for-a11y">
                 만족도
                 98
                 %입니다.
                </span>
                <div class="seller_awards" title="만족도 98 % 입니다">
                 <span class="awards_points" style="width:98%">
                 </span>
                 <span class="bg_star">
                 </span>
                </div>
               </li>
               <li class="item reviewcnt">
                <span class="text--reviewcnt">
                 상품평
                 46
                </span>
                <span class="for-a11y">
                 건
                </span>
               </li>
               <li class="item buycnt">
                <span class="text--buycnt">
                 구매
                 111
                </span>
                <span class="for-a11y">
                 건
                </span>
               </li>
              </ul>
             </div>
             <div class="section--itemcard_info_shop">
              [linkx]
              
             </div>
             <button class="button--favorite ">
              <span class="icon--favorite">
               <span class="for-a11y">
                관심상품 등록하기
               </span>
              </span>
             </button>
            </div>
           </div>
          </div>
         </div>
         <div class="component component--item_card type--general">
          <h4 class="text--module_title">
           일반상품 아이템카드
          </h4>
          <div class="itemcard">
           <div class="section--itemcard">
            <div class="section--itemcard_img">
             [linkx]
             
            </div>
            <div class="section--itemcard_info">
             <div class="section--itemcard_info_major">
              <div class="area--itemcard_title">
               <span class="text--itemcard_title ellipsis">
                <a class="link--itemcard" href="/core/click?nextUrl=http%3a%2f%2fitempage3.auction.co.kr%2fDetailView.aspx%3fitemno%3dB537833272&amp;data=wBx8rMLxPt3Uhs341aC8ObSm%2f8uIqgdDNeseBPY93i1%2bpH5jSPe5OmmMdRmXgphnl5e0ZEUHyRMGFKwrygjyd9aUdjfLmLCWLgU1LT1Y4fguLigP3mpHuzUqMR2TFUyikuOboO3pOzcSdfXuKdocGTgfLz92XG76iNk2MKQDwDUnsb9JKGt0p5VZPGe7VMeEak%2b88S92ZL00LvdwTw%2bZUy%2bflOmCBJbibV0hBjNJ%2b8GGPxo2wwbQw6wGh1rTnh18S7vBQQLhAz6UkU6EfqEjoEyZWClou%2f6tpIJ7m1XIb6012UlDN1udWUlHn4wYnq9RxmWOAfKL8ArrItsd91xGAKwcj%2bCGJ6sosgko8sHvMRsflUmoHtQCX%2f9AZyTasTeH3KrgpbIkEscbn%2bJqZAPvZyFRPlptTyUWgv6I55993fCE%3d&amp;referrer=app%3a%2f%2f&amp;seq=125745277727&amp;type=2" target="_blank">
                 <span class="for-a11y">
                  브랜드명
                 </span>
                 <span class="text--brand">
                 </span>
                 <span class="for-a11y">
                  상품명
                 </span>
                 <span class="text--title">
                  해남 호박/밤/꿀 고구마모종 5kg
                 </span>
                </a>
               </span>
              </div>
              <div class="area--itemcard_price">
               <span class="price_seller">
                <span class="for-a11y">
                 상품금액
                </span>
                <strong class="text--price_seller">
                 29,990
                </strong>
                <span class="text--unit">
                 원
                </span>
               </span>
              </div>
             </div>
             <div class="section--itemcard_info_add">
              <ul class="list--addinfo">
               <li class="item">
                <span class="text--addinfo">
                 무료배송
                </span>
               </li>
              </ul>
             </div>
             <div class="section--itemcard_info_score">
              <ul class="list--score">
               <li class="item awards">
                <span class="for-a11y">
                 만족도
                 98
                 %입니다.
                </span>
                <div class="seller_awards" title="만족도 98 % 입니다">
                 <span class="awards_points" style="width:98%">
                 </span>
                 <span class="bg_star">
                 </span>
                </div>
               </li>
               <li class="item reviewcnt">
                <span class="text--reviewcnt">
                 상품평
                 15
                </span>
                <span class="for-a11y">
                 건
                </span>
               </li>
               <li class="item buycnt">
                <span class="text--buycnt">
                 구매
                 26
                </span>
                <span class="for-a11y">
                 건
                </span>
               </li>
              </ul>
             </div>
             <div class="section--itemcard_info_shop">
              <a class="link--shop" href="/wowhn" target="_blank" title="스토어로 이동">
               <span class="for-a11y">
                판매자
               </span>
               <span class="text">
                해남유정이네농산물
               </span>
              </a>
             </div>
             <button class="button--favorite ">
              <span class="icon--favorite">
               <span class="for-a11y">
                관심상품 등록하기
               </span>
              </span>
             </button>
            </div>
           </div>
          </div>
         </div>
         <div class="component component--item_card type--smiledelivery">
          <h4 class="text--module_title">
           스마일배송 아이템카드
          </h4>
          <div class="itemcard">
           <div class="section--component_title">
            <p class="text--title">
             <a class="link--smiledelivery" href="/SmileDelivery" target="_blank">
              스마일배송
             </a>
            </p>
            <span class="text--smiledelivery_slogan">
             오늘 주문! 내일 도착!
            </span>
            [linkx]
            
           </div>
           <div class="section--itemcard">
            <div class="section--itemcard_img">
             <a class="link--itemcard image--loading" href="/DetailView.aspx?itemno=B548366019" target="_blank">
              <div class="lazyload-placeholder" style="height:100%">
              </div>
             </a>
            </div>
            <div class="section--itemcard_info">
             <div class="section--itemcard_info_major">
              <div class="area--itemcard_title">
               <span class="text--itemcard_title ellipsis">
                <a class="link--itemcard" href="/DetailView.aspx?itemno=B548366019" target="_blank">
                 <span class="for-a11y">
                  브랜드명
                 </span>
                 <span class="text--brand">
                 </span>
                 <span class="for-a11y">
                  상품명
                 </span>
                 <span class="text--title">
                  무설탕 자색고구마칩 자색고구마튀김 대용량과자 500g
                 </span>
                </a>
               </span>
              </div>
              <div class="area--itemcard_price">
               <span class="price_seller">
                <span class="for-a11y">
                 상품금액
                </span>
                <strong class="text--price_seller">
                 5,500
                </strong>
                <span class="text--unit">
                 원
                </span>
               </span>
              </div>
             </div>
             <div class="section--itemcard_info_add">
              <ul class="list--addinfo">
               <li class="item">
                <span class="text--addinfo">
                 배송비 3,000원
                </span>
               </li>
              </ul>
             </div>
             <div class="section--itemcard_info_score">
              <ul class="list--score">
               <li class="item awards">
                <span class="for-a11y">
                 만족도
                 98
                 %입니다.
                </span>
                <div class="seller_awards" title="만족도 98 % 입니다">
                 <span class="awards_points" style="width:98%">
                 </span>
                 <span class="bg_star">
                 </span>
                </div>
               </li>
               <li class="item reviewcnt">
                <span class="text--reviewcnt">
                 상품평
                 158
                </span>
                <span class="for-a11y">
                 건
                </span>
               </li>
               <li class="item buycnt">
                <span class="text--buycnt">
                 구매
                 390
                </span>
                <span class="for-a11y">
                 건
                </span>
               </li>
              </ul>
             </div>
             <div class="section--itemcard_smiledelivery">
              [ahref]
              
              <div class="action_smiledelivery">
               <div class="purchase_count">
                <button class="button--minus" type="button">
                 <span class="icon_minus">
                  <span class="for-a11y">
                   상품 수 1 감소
                  </span>
                 </span>
                </button>
                <button class="button--plus" type="button">
                 <span class="icon_plus-1">
                 </span>
                 <span class="icon_plus-2">
                 </span>
                 <span class="for-a11y">
                  상품 수 1 증가
                 </span>
                </button>
               </div>
               <button class="button--cart" type="button">
                <span class="icon_cart">
                 <span class="for-a11y">
                  장바구니 담기
                 </span>
                </span>
               </button>
              </div>
             </div>
             <button class="button--favorite ">
              <span class="icon--favorite">
               <span class="for-a11y">
                관심상품 등록하기
               </span>
              </span>
             </button>
             <button class="button--related_item" title="연관상품 6 개가 있습니다. ">
              <span class="text--related_item">
               <b class="text--title">
                연관상품
               </b>
               <b class="text--cnt">
                6
               </b>
              </span>
             </button>
            </div>
           </div>
          </div>
          <div class="popup--related_items ">
           <h2 class="section--title">
            <b>[area1][mkey1][symbolx][pkeyx][symbolx][area1][keyword1][bracketl1][area1][keywordx][bracketr1][symbolx][bracketl2][area1][keywordx][bracketr2][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx]</b>
           </h2>
           <div class="section--body">
            <div class="section--related_items">
             <div class="section--slick_area">
              <div class="list--related_items">
               <div class="slick-slider slick-initialized">
                <div class="slick-list">
                 <div class="slick-track" style="width:0%;left:NaN%">
                 </div>
                </div>
               </div>
              </div>
             </div>
            </div>
           </div>
          </div>
         </div>
         <div class="component component--item_card type--general">
          <h4 class="text--module_title">
           일반상품 아이템카드
          </h4>
          <div class="itemcard">
           <div class="section--component_title">
            <p class="text--title">
             프리미엄등록
            </p>
            <div class="section--advertisement ">
             <button class="button--notice_about_advertisement" title="광고 안내 레이어 보기" type="button">
              <span class="text">
               광고
              </span>
             </button>
             <div class="layer--information">
              <strong class="text--information_title">
               프리미엄등록이란?
              </strong>
              <p class="text--information_description">
               프리미엄 광고를 구매한 상품으로 옥션랭킹순으로 전시됩니다.
              </p>
              <button class="button--close_layer" type="button">
               <span class="ir">
                광고
                안내 레이어 닫기
               </span>
              </button>
             </div>
            </div>
           </div>
           <div class="section--itemcard">
            <div class="section--itemcard_img">
             <a class="link--itemcard image--loading" href="/DetailView.aspx?itemno=A541126169" target="_blank">
              <div class="lazyload-placeholder" style="height:100%">
              </div>
             </a>
            </div>
            <div class="section--itemcard_info">
             <div class="section--itemcard_info_major">
              <div class="area--itemcard_title">
               <span class="text--itemcard_title ellipsis">
                <a class="link--itemcard" href="/DetailView.aspx?itemno=A541126169" target="_blank">
                 <span class="for-a11y">
                  브랜드명
                 </span>
                 <span class="text--brand">
                 </span>
                 <span class="for-a11y">
                  상품명
                 </span>
                 <span class="text--title">
                  주말특가 호박고구마10kg-12900/숙성꿀고구마특품세일
                 </span>
                </a>
               </span>
              </div>
              <div class="area--itemcard_price">
               <span class="price_seller">
                <span class="for-a11y">
                 상품금액
                </span>
                <strong class="text--price_seller">
                 15,900
                </strong>
                <span class="text--unit">
                 원
                </span>
               </span>
              </div>
             </div>
             <div class="section--itemcard_info_add">
              <ul class="list--addinfo">
               <li class="item">
                <span class="text--addinfo">
                 무료배송
                </span>
               </li>
              </ul>
             </div>
             <div class="section--itemcard_info_score">
              <ul class="list--score">
               <li class="item awards">
                <span class="for-a11y">
                 만족도
                 96
                 %입니다.
                </span>
                <div class="seller_awards" title="만족도 96 % 입니다">
                 <span class="awards_points" style="width:96%">
                 </span>
                 <span class="bg_star">
                 </span>
                </div>
               </li>
               <li class="item reviewcnt">
                <span class="text--reviewcnt">
                 상품평
                 37,980
                </span>
                <span class="for-a11y">
                 건
                </span>
               </li>
               <li class="item buycnt">
                <span class="text--buycnt">
                 구매
                 200,095
                </span>
                <span class="for-a11y">
                 건
                </span>
               </li>
              </ul>
             </div>
             <div class="section--itemcard_info_shop">
              <a class="link--shop" href="/woo6490194" target="_blank" title="스토어로 이동">
               <span class="for-a11y">
                판매자
               </span>
               <span class="text">
                늘푸르른늘찬
               </span>
              </a>
              <span class="for-a11y">
               판매자평가정보
              </span>
              <ul class="list--store_info">
               <li class="item top_seller">
                <div class="section--advertisement ">
                 <button class="button--notice_about_advertisement" title="최우수판매자 안내 레이어 보기" type="button">
                  <span class="text">
                   최우수판매자
                  </span>
                 </button>
                 <div class="layer--information">
                  <strong class="text--information_title">
                   최우수판매자란?
                  </strong>
                  <p class="text--information_description">
                   옥션의 판매인증 평가기준을 모두 달성한 최상위 판매자
                  </p>
                  <button class="button--close_layer" type="button">
                   <span class="ir">
                    최우수판매자
                    안내 레이어 닫기
                   </span>
                  </button>
                 </div>
                </div>
               </li>
              </ul>
             </div>
             <button class="button--favorite ">
              <span class="icon--favorite">
               <span class="for-a11y">
                관심상품 등록하기
               </span>
              </span>
             </button>
            </div>
           </div>
          </div>
         </div>
         <div class="component component--item_card type--general">
          <h4 class="text--module_title">
           일반상품 아이템카드[linkx]<li>[linkx]</li><li>[pkeyx]</li><li>[pkeyx]</li><li>[area1][keywordx][symbolx][area1][keywordx][symbolx][bracketl14][area1][keywordx][bracketr14][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx]</li>
          </h4>
          <div class="itemcard">
           <div class="section--itemcard">
            <div class="section--itemcard_img">
             <a class="link--itemcard image--loading" href="/DetailView.aspx?itemno=A508886348" target="_blank">
              <div class="lazyload-placeholder" style="height:100%">
              </div>
             </a>
            </div>
            <div class="section--itemcard_info">
             <div class="section--itemcard_info_major">
              <div class="area--itemcard_title">
               <span class="text--itemcard_title ellipsis">
                <a class="link--itemcard" href="/DetailView.aspx?itemno=A508886348" target="_blank">
                 <span class="for-a11y">
                  브랜드명
                 </span>
                 <span class="text--brand">
                 </span>
                 <span class="for-a11y">
                  상품명
                 </span>
                 <span class="text--title">
                  /22만개판매/호박고구마/꿀밤고구마 10kg 12900원
                 </span>
                </a>
               </span>
              </div>
              <div class="area--itemcard_price">
               <span class="price_seller">
                <span class="for-a11y">
                 상품금액
                </span>
                <strong class="text--price_seller">
                 9,900
                </strong>
                <span class="text--unit">
                 원
                </span>
               </span>
              </div>
             </div>
             <div class="section--itemcard_info_add">
              <ul class="list--addinfo">
               <li class="item">
                <span class="text--addinfo">
                 무료배송
                </span>
               </li>
              </ul>
             </div>
             <div class="section--itemcard_info_score">
              <ul class="list--score">
               <li class="item awards">
                <span class="for-a11y">
                 만족도
                 92
                 %입니다.
                </span>
                <div class="seller_awards" title="만족도 92 % 입니다">
                 <span class="awards_points" style="width:92%">
                 </span>
                 <span class="bg_star">
                 </span>
                </div>
               </li>
               <li class="item reviewcnt">
                <span class="text--reviewcnt">
                 상품평
                 25,203
                </span>
                <span class="for-a11y">
                 건
                </span>
               </li>
               <li class="item buycnt">
                <span class="text--buycnt">
                 구매
                 220,632
                </span>
                <span class="for-a11y">
                 건
                </span>
               </li>
              </ul>
             </div>
             <div class="section--itemcard_info_shop">
              [ahref]
              
              <span class="for-a11y">
               판매자평가정보
              </span>
              <ul class="list--store_info">
               <li class="item top_seller">
                <div class="section--advertisement ">
                 <button class="button--notice_about_advertisement" title="최우수판매자 안내 레이어 보기" type="button">
                  <span class="text">
                   최우수판매자
                  </span>
                 </button>
                 <div class="layer--information">
                  <strong class="text--information_title">
                   최우수판매자란?
                  </strong>
                  <p class="text--information_description">
                   옥션의 판매인증 평가기준을 모두 달성한 최상위 판매자
                  </p>
                  <button class="button--close_layer" type="button">
                   <span class="ir">
                    최우수판매자
                    안내 레이어 닫기
                   </span>
                  </button>
                 </div>
                </div>
               </li>
              </ul>
             </div>
             <button class="button--favorite ">
              <span class="icon--favorite">
               <span class="for-a11y">
                관심상품 등록하기
               </span>
              </span>
             </button>
            </div>
           </div>
          </div>
         </div>
         <div class="component component--item_card type--general">
          <h4 class="text--module_title">
           일반상품 아이템카드
          </h4>
          <div class="itemcard">
           <div class="section--itemcard">
            <div class="section--itemcard_img">
             [linkx]
             
            </div>
            <div class="section--itemcard_info">
             <div class="section--itemcard_info_major">
              <div class="area--itemcard_title">
               <span class="text--itemcard_title ellipsis">
                [linkx]
                
               </span>
              </div>
              <div class="area--itemcard_price">
               <span class="price_seller">
                <span class="for-a11y">
                 상품금액
                </span>
                <strong class="text--price_seller">
                 15,900
                </strong>
                <span class="text--unit">
                 원
                </span>
               </span>
              </div>
             </div>
             <div class="section--itemcard_info_add">
              <ul class="list--addinfo">
               <li class="item">
                <span class="text--addinfo">
                 무료배송
                </span>
               </li>
              </ul>
             </div>
             <div class="section--itemcard_info_score">
              <ul class="list--score">
               <li class="item awards">
                <span class="for-a11y">
                 만족도
                 96
                 %입니다.
                </span>
                <div class="seller_awards" title="만족도 96 % 입니다">
                 <span class="awards_points" style="width:96%">
                 </span>
                 <span class="bg_star">
                 </span>
                </div>
               </li>
               <li class="item reviewcnt">
                <span class="text--reviewcnt">
                 상품평
                 14,202
                </span>
                <span class="for-a11y">
                 건
                </span>
               </li>
               <li class="item buycnt">
                <span class="text--buycnt">
                 구매
                 74,261
                </span>
                <span class="for-a11y">
                 건
                </span>
               </li>
              </ul>
             </div>
             <div class="section--itemcard_info_shop">
              [ahref]
              
              <span class="for-a11y">
               판매자평가정보
              </span>
              <ul class="list--store_info">
               <li class="item top_seller">
                <div class="section--advertisement ">
                 <button class="button--notice_about_advertisement" title="최우수판매자 안내 레이어 보기" type="button">
                  <span class="text">
                   최우수판매자
                  </span>
                 </button>
                 <div class="layer--information">
                  <strong class="text--information_title">
                   최우수판매자란?
                  </strong>
                  <p class="text--information_description">
                   옥션의 판매인증 평가기준을 모두 달성한 최상위 판매자
                  </p>
                  <button class="button--close_layer" type="button">
                   <span class="ir">
                    최우수판매자
                    안내 레이어 닫기
                   </span>
                  </button>
                 </div>
                </div>
               </li>
              </ul>
             </div>
             <button class="button--favorite ">
              <span class="icon--favorite">
               <span class="for-a11y">
                관심상품 등록하기
               </span>
              </span>
             </button>
            </div>
           </div>
          </div>
         </div>
         <div class="component component--item_card type--general">
          <h4 class="text--module_title">
           일반상품 아이템카드
          </h4>
          <div class="itemcard">
           <div class="section--itemcard">
            <div class="section--itemcard_img">
             [linkx]
             
            </div>
            <div class="section--itemcard_info">
             <div class="section--itemcard_info_major">
              <div class="area--itemcard_title">
               <span class="text--itemcard_title ellipsis">
                [linkx]
                
               </span>
              </div>
              <div class="area--itemcard_price">
               <span class="price_seller">
                <span class="for-a11y">
                 상품금액
                </span>
                <strong class="text--price_seller">
                 12,900
                </strong>
                <span class="text--unit">
                 원
                </span>
               </span>
              </div>
             </div>
             <div class="section--itemcard_info_add">
              <ul class="list--addinfo">
               <li class="item">
                <span class="text--addinfo">
                 무료배송
                </span>
               </li>
              </ul>
             </div>
             <div class="section--itemcard_info_score">
              <ul class="list--score">
               <li class="item awards">
                <span class="for-a11y">
                 만족도
                 94
                 %입니다.
                </span>
                <div class="seller_awards" title="만족도 94 % 입니다">
                 <span class="awards_points" style="width:94%">
                 </span>
                 <span class="bg_star">
                 </span>
                </div>
               </li>
               <li class="item reviewcnt">
                <span class="text--reviewcnt">
                 상품평
                 5,579
                </span>
                <span class="for-a11y">
                 건
                </span>
               </li>
               <li class="item buycnt">
                <span class="text--buycnt">
                 구매
                 12,793
                </span>
                <span class="for-a11y">
                 건
                </span>
               </li>
              </ul>
             </div>
             <div class="section--itemcard_info_shop">
              [ahref]
              
              <span class="for-a11y">
               판매자평가정보
              </span>
              <ul class="list--store_info">
               <li class="item top_seller">
                <div class="section--advertisement ">
                 <button class="button--notice_about_advertisement" title="최우수판매자 안내 레이어 보기" type="button">
                  <span class="text">
                   최우수판매자
                  </span>
                 </button>
                 <div class="layer--information">
                  <strong class="text--information_title">
                   최우수판매자란?
                  </strong>
                  <p class="text--information_description">
                   옥션의 판매인증 평가기준을 모두 달성한 최상위 판매자
                  </p>
                  <button class="button--close_layer" type="button">
                   <span class="ir">
                    최우수판매자
                    안내 레이어 닫기
                   </span>
                  </button>
                 </div>
                </div>
               </li>
              </ul>
             </div>
             <button class="button--favorite ">
              <span class="icon--favorite">
               <span class="for-a11y">
                관심상품 등록하기
               </span>
              </span>
             </button>
            </div>
           </div>
          </div>
         </div>
         <div class="component component--item_card type--general">
          <h4 class="text--module_title">
           일반상품 아이템카드
          </h4>
          <div class="itemcard">
           <div class="section--itemcard">
            <div class="section--itemcard_img">
             <a class="link--itemcard image--loading" href="/DetailView.aspx?itemno=A528179732" target="_blank">
              <div class="lazyload-placeholder" style="height:100%">
              </div>
             </a>
            </div>
            <div class="section--itemcard_info">
             <div class="section--itemcard_info_major">
              <div class="area--itemcard_title">
               <span class="text--itemcard_title ellipsis">
                [ahref]
                
               </span>
              </div>
              <div class="area--itemcard_price">
               [area1][mkey1]<li>[area1][mkey1]</li><li>[area1][mkey1]</li><li>[ahref]</li>
              </div>
             </div>
             <div class="section--itemcard_info_add">
              <ul class="list--addinfo">
               <li class="item">
                <span class="text--addinfo">
                 무료배송
                </span>
               </li>
              </ul>
             </div>
             <div class="section--itemcard_info_score">
              <ul class="list--score">
               <li class="item awards">
                <span class="for-a11y">
                 만족도
                 94
                 %입니다.
                </span>
                <div class="seller_awards" title="만족도 94 % 입니다">
                 <span class="awards_points" style="width:94%">
                 </span>
                 <span class="bg_star">
                 </span>
                </div>
               </li>
               <li class="item reviewcnt">
                <span class="text--reviewcnt">
                 상품평
                 21,072
                </span>
                <span class="for-a11y">
                 건
                </span>
               </li>
               <li class="item buycnt">
                <span class="text--buycnt">
                 구매
                 165,683
                </span>
                <span class="for-a11y">
                 건
                </span>
               </li>
              </ul>
             </div>
             <div class="section--itemcard_info_shop">
              [linkx]
              
              <span class="for-a11y">
               판매자평가정보
              </span>
              <ul class="list--store_info">
               <li class="item top_seller">
                <div class="section--advertisement ">
                 <button class="button--notice_about_advertisement" title="최우수판매자 안내 레이어 보기" type="button">
                  <span class="text">
                   최우수판매자
                  </span>
                 </button>
                 <div class="layer--information">
                  <strong class="text--information_title">
                   최우수판매자란?
                  </strong>
                  <p class="text--information_description">
                   옥션의 판매인증 평가기준을 모두 달성한 최상위 판매자
                  </p>
                  <button class="button--close_layer" type="button">
                   <span class="ir">
                    최우수판매자
                    안내 레이어 닫기
                   </span>
                  </button>
                 </div>
                </div>
               </li>
              </ul>
             </div>
             <button class="button--favorite ">
              <span class="icon--favorite">
               <span class="for-a11y">
                관심상품 등록하기
               </span>
              </span>
             </button>
            </div>
           </div>
          </div>
         </div>
         <div class="component component--item_card type--general">
          <h4 class="text--module_title">
           일반상품 아이템카드
          </h4>
          <div class="itemcard">
           <div class="section--itemcard">
            <div class="section--itemcard_img">
             <a class="link--itemcard image--loading" href="/DetailView.aspx?itemno=A630411391" target="_blank">
              <div class="lazyload-placeholder" style="height:100%">
              </div>
             </a>
            </div>
            <div class="section--itemcard_info">
             <div class="section--itemcard_info_major">
              <div class="area--itemcard_title">
               <span class="text--itemcard_title ellipsis">
                <a class="link--itemcard" href="/DetailView.aspx?itemno=A630411391" target="_blank">
                 <span class="for-a11y">
                  브랜드명
                 </span>
                 <span class="text--brand">
                 </span>
                 <span class="for-a11y">
                  상품명
                 </span>
                 <span class="text--title">
                  달콤한 햇 호박/꿀고구마 10kg 11900원
                 </span>
                </a>
               </span>
              </div>
              <div class="area--itemcard_price">
               <span class="price_seller">
                <span class="for-a11y">
                 상품금액
                </span>
                <strong class="text--price_seller">
                 11,900
                </strong>
                <span class="text--unit">
                 원
                </span>
               </span>
              </div>
             </div>
             <div class="section--itemcard_info_add">
              <ul class="list--addinfo">
               <li class="item">
                <span class="text--addinfo">
                 무료배송
                </span>
               </li>
              </ul>
             </div>
             <div class="section--itemcard_info_score">
              <ul class="list--score">
               <li class="item awards">
                <span class="for-a11y">
                 만족도
                 90
                 %입니다.
                </span>
                <div class="seller_awards" title="만족도 90 % 입니다">
                 <span class="awards_points" style="width:90%">
                 </span>
                 <span class="bg_star">
                 </span>
                </div>
               </li>
               <li class="item reviewcnt">
                <span class="text--reviewcnt">
                 상품평
                 679
                </span>
                <span class="for-a11y">
                 건
                </span>
               </li>
               <li class="item buycnt">
                <span class="text--buycnt">
                 구매
                 5,928
                </span>
                <span class="for-a11y">
                 건
                </span>
               </li>
              </ul>
             </div>
             <div class="section--itemcard_info_shop">
              <a class="link--shop" href="/okkitchen" target="_blank" title="스토어로 이동">
               <span class="for-a11y">
                판매자
               </span>
               <span class="text">
                햇살조은
               </span>
              </a>
              <span class="for-a11y">
               판매자평가정보
              </span>
              <ul class="list--store_info">
               <li class="item top_seller">
                <div class="section--advertisement ">
                 <button class="button--notice_about_advertisement" title="최우수판매자 안내 레이어 보기" type="button">
                  <span class="text">
                   최우수판매자
                  </span>
                 </button>
                 <div class="layer--information">
                  <strong class="text--information_title">
                   최우수판매자란?
                  </strong>
                  <p class="text--information_description">
                   옥션의 판매인증 평가기준을 모두 달성한 최상위 판매자
                  </p>
                  <button class="button--close_layer" type="button">
                   <span class="ir">
                    최우수판매자
                    안내 레이어 닫기
                   </span>
                  </button>
                 </div>
                </div>
               </li>
              </ul>
             </div>
             <button class="button--favorite ">
              <span class="icon--favorite">
               <span class="for-a11y">
                관심상품 등록하기
               </span>
              </span>
             </button>
            </div>
           </div>
          </div>
         </div>
         <div class="component component--item_card type--general">
          <h4 class="text--module_title">
           일반상품 아이템카드
          </h4>
          <div class="itemcard">
           <div class="section--itemcard">
            <div class="section--itemcard_img">
             [linkx]
             
            </div>
            <div class="section--itemcard_info">
             <div class="section--itemcard_info_major">
              <div class="area--itemcard_title">
               <span class="text--itemcard_title ellipsis">
                [ahref]
                
               </span>
              </div>
              <div class="area--itemcard_price">
               <span class="price_seller">
                <span class="for-a11y">
                 상품금액
                </span>
                <strong class="text--price_seller">
                 45,900
                </strong>
                <span class="text--unit">
                 원
                </span>
               </span>
              </div>
             </div>
             <div class="section--itemcard_info_add">
              <ul class="list--addinfo">
               <li class="item">
                <span class="text--addinfo">
                 무료배송
                </span>
               </li>
              </ul>
             </div>
             <div class="section--itemcard_info_score">
              <ul class="list--score">
               <li class="item awards">
                <span class="for-a11y">
                 만족도
                 96
                 %입니다.
                </span>
                <div class="seller_awards" title="만족도 96 % 입니다">
                 <span class="awards_points" style="width:96%">
                 </span>
                 <span class="bg_star">
                 </span>
                </div>
               </li>
               <li class="item reviewcnt">
                <span class="text--reviewcnt">
                 상품평
                 77
                </span>
                <span class="for-a11y">
                 건
                </span>
               </li>
               <li class="item buycnt">
                <span class="text--buycnt">
                 구매
                 130
                </span>
                <span class="for-a11y">
                 건
                </span>
               </li>
              </ul>
             </div>
             <div class="section--itemcard_info_shop">
              <a class="link--shop" href="/singrun" target="_blank" title="스토어로 이동">
               <span class="for-a11y">
                판매자
               </span>
               <span class="text">
                싱그런
               </span>
              </a>
             </div>
             <button class="button--favorite ">
              <span class="icon--favorite">
               <span class="for-a11y">
                관심상품 등록하기
               </span>
              </span>
             </button>
             <button class="button--related_item" title="연관상품 4 개가 있습니다. ">
              <span class="text--related_item">
               <b class="text--title">
                연관상품
               </b>
               <b class="text--cnt">
                4
               </b>
              </span>
             </button>
            </div>
           </div>
          </div>
          <div class="popup--related_items ">
           <h2 class="section--title">
            <b>[area1][mkey1][symbolx][pkeyx][symbolx][area1][keyword1][bracketl1][area1][keywordx][bracketr1][symbolx][bracketl2][area1][keywordx][bracketr2][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx]</b>
           </h2>
           <div class="section--body">
            <div class="section--related_items">
             <div class="section--slick_area">
              <div class="list--related_items">
               <div class="slick-slider slick-initialized">
                <div class="slick-list">
                 <div class="slick-track" style="width:0%;left:NaN%">
                 </div>
                </div>
               </div>
              </div>
             </div>
            </div>
           </div>
          </div>
         </div>
         <div class="component component--item_card type--general">
          <h4 class="text--module_title">
           일반상품 아이템카드
          </h4>
          <div class="itemcard">
           <div class="section--itemcard">
            <div class="section--itemcard_img">
             [linkx]
             
            </div>
            <div class="section--itemcard_info">
             <div class="section--itemcard_info_major">
              <div class="area--itemcard_title">
               <span class="text--itemcard_title ellipsis">
                <a class="link--itemcard" href="/DetailView.aspx?itemno=A596877538" target="_blank">
                 <span class="for-a11y">
                  브랜드명
                 </span>
                 <span class="text--brand">
                 </span>
                 <span class="for-a11y">
                  상품명
                 </span>
                 <span class="text--title">
                  최상품 꿀고구마 10kg 5kg 베니하루카
                 </span>
                </a>
               </span>
              </div>
              <div class="area--itemcard_price">
               <span class="price_seller">
                <span class="for-a11y">
                 상품금액
                </span>
                <strong class="text--price_seller">
                 19,900
                </strong>
                <span class="text--unit">
                 원
                </span>
               </span>
              </div>
             </div>
             <div class="section--itemcard_info_add">
              <ul class="list--addinfo">
               <li class="item">
                <span class="text--addinfo">
                 무료배송
                </span>
               </li>
              </ul>
             </div>
             <div class="section--itemcard_info_score">
              <ul class="list--score">
               <li class="item awards">
                <span class="for-a11y">
                 만족도
                 94
                 %입니다.
                </span>
                <div class="seller_awards" title="만족도 94 % 입니다">
                 <span class="awards_points" style="width:94%">
                 </span>
                 <span class="bg_star">
                 </span>
                </div>
               </li>
               <li class="item reviewcnt">
                <span class="text--reviewcnt">
                 상품평
                 2,972
                </span>
                <span class="for-a11y">
                 건
                </span>
               </li>
               <li class="item buycnt">
                <span class="text--buycnt">
                 구매
                 41,663
                </span>
                <span class="for-a11y">
                 건
                </span>
               </li>
              </ul>
             </div>
             <div class="section--itemcard_info_shop">
              <a class="link--shop" href="/honamfruit" target="_blank" title="스토어로 이동">
               <span class="for-a11y">
                판매자
               </span>
               <span class="text">
                직거래농민장터
               </span>
              </a>
              <span class="for-a11y">
               판매자평가정보
              </span>
              <ul class="list--store_info">
               <li class="item">
                <span class="text--store_info">
                 상품평
                </span>
               </li>
               <li class="item">
                <span class="text--store_info">
                 고객응대우수
                </span>
               </li>
              </ul>
             </div>
             <button class="button--favorite ">
              <span class="icon--favorite">
               <span class="for-a11y">
                관심상품 등록하기
               </span>
              </span>
             </button>
            </div>
           </div>
          </div>
         </div>
         <div class="component component--item_card type--general">
          <h4 class="text--module_title">
           일반상품 아이템카드
          </h4>
          <div class="itemcard">
           <div class="section--itemcard">
            <div class="section--itemcard_img">
             [ahref]
             
            </div>
            <div class="section--itemcard_info">
             <div class="section--itemcard_info_major">
              <div class="area--itemcard_title">
               <span class="text--itemcard_title ellipsis">
                [linkx]
                
               </span>
              </div>
              <div class="area--itemcard_price">
               <span class="price_seller">
                <span class="for-a11y">
                 상품금액
                </span>
                <strong class="text--price_seller">
                 8,900
                </strong>
                <span class="text--unit">
                 원
                </span>
               </span>
              </div>
             </div>
             <div class="section--itemcard_info_add">
              <ul class="list--addinfo">
               <li class="item">
                <span class="text--addinfo">
                 배송비 3,000원
                </span>
               </li>
              </ul>
             </div>
             <div class="section--itemcard_info_score">
              <ul class="list--score">
               <li class="item awards">
                <span class="for-a11y">
                 만족도
                 90
                 %입니다.
                </span>
                <div class="seller_awards" title="만족도 90 % 입니다">
                 <span class="awards_points" style="width:90%">
                 </span>
                 <span class="bg_star">
                 </span>
                </div>
               </li>
               <li class="item reviewcnt">
                <span class="text--reviewcnt">
                 상품평
                 147
                </span>
                <span class="for-a11y">
                 건
                </span>
               </li>
               <li class="item buycnt">
                <span class="text--buycnt">
                 구매
                 500
                </span>
                <span class="for-a11y">
                 건
                </span>
               </li>
              </ul>
             </div>
             <div class="section--itemcard_info_shop">
              <a class="link--shop" href="/mssfoof" target="_blank" title="스토어로 이동">
               <span class="for-a11y">
                판매자
               </span>
               <span class="text">
                아침빛바다1
               </span>
              </a>
              <span class="for-a11y">
               판매자평가정보
              </span>
              <ul class="list--store_info">
               <li class="item top_seller">
                <div class="section--advertisement ">
                 <button class="button--notice_about_advertisement" title="최우수판매자 안내 레이어 보기" type="button">
                  <span class="text">
                   최우수판매자
                  </span>
                 </button>
                 <div class="layer--information">
                  <strong class="text--information_title">
                   최우수판매자란?
                  </strong>
                  <p class="text--information_description">
                   옥션의 판매인증 평가기준을 모두 달성한 최상위 판매자
                  </p>
                  <button class="button--close_layer" type="button">
                   <span class="ir">
                    최우수판매자
                    안내 레이어 닫기
                   </span>
                  </button>
                 </div>
                </div>
               </li>
              </ul>
             </div>
             <button class="button--favorite ">
              <span class="icon--favorite">
               <span class="for-a11y">
                관심상품 등록하기
               </span>
              </span>
             </button>
            </div>
           </div>
          </div>
         </div>
        </div>
        <div class="section--module_wrap" module-design-id="17">
         <div class="component component--item_card type--general">
          <h4 class="text--module_title">
           일반상품 아이템카드
          </h4>
          <div class="itemcard">
           <div class="section--itemcard">
            <div class="section--itemcard_img">
             [ahref]
             
            </div>
            <div class="section--itemcard_info">
             <div class="section--itemcard_info_major">
              <div class="area--itemcard_title">
               <span class="text--itemcard_title ellipsis">
                [linkx]
                
               </span>
              </div>
              <div class="area--itemcard_price">
               <span class="price_seller">
                <span class="for-a11y">
                 상품금액
                </span>
                <strong class="text--price_seller">
                 9,900
                </strong>
                <span class="text--unit">
                 원
                </span>
               </span>
              </div>
             </div>
             <div class="section--itemcard_info_add">
              <ul class="list--addinfo">
               <li class="item">
                <span class="text--addinfo">
                 무료배송
                </span>
               </li>
              </ul>
             </div>
             <div class="section--itemcard_info_score">
              <ul class="list--score">
               <li class="item awards">
                <span class="for-a11y">
                 만족도
                 88
                 %입니다.
                </span>
                <div class="seller_awards" title="만족도 88 % 입니다">
                 <span class="awards_points" style="width:88%">
                 </span>
                 <span class="bg_star">
                 </span>
                </div>
               </li>
               <li class="item reviewcnt">
                <span class="text--reviewcnt">
                 상품평
                 8,836
                </span>
                <span class="for-a11y">
                 건
                </span>
               </li>
               <li class="item buycnt">
                <span class="text--buycnt">
                 구매
                 17,982
                </span>
                <span class="for-a11y">
                 건
                </span>
               </li>
              </ul>
             </div>
             <div class="section--itemcard_info_shop">
              [linkx]
              
              <span class="for-a11y">
               판매자평가정보
              </span>
              <ul class="list--store_info">
               <li class="item top_seller">
                <div class="section--advertisement ">
                 <button class="button--notice_about_advertisement" title="최우수판매자 안내 레이어 보기" type="button">
                  <span class="text">
                   최우수판매자
                  </span>
                 </button>
                 <div class="layer--information">
                  <strong class="text--information_title">
                   최우수판매자란?
                  </strong>
                  <p class="text--information_description">
                   옥션의 판매인증 평가기준을 모두 달성한 최상위 판매자
                  </p>
                  <button class="button--close_layer" type="button">
                   <span class="ir">
                    최우수판매자
                    안내 레이어 닫기
                   </span>
                  </button>
                 </div>
                </div>
               </li>
              </ul>
             </div>
             <button class="button--favorite ">
              <span class="icon--favorite">
               <span class="for-a11y">
                관심상품 등록하기
               </span>
              </span>
             </button>
            </div>
           </div>
          </div>
         </div>
         <div class="component component--item_card type--general">
          <h4 class="text--module_title">
           일반상품 아이템카드
          </h4>
          <div class="itemcard">
           <div class="section--itemcard">
            <div class="section--itemcard_img">
             [linkx]
             
            </div>
            <div class="section--itemcard_info">
             <div class="section--itemcard_info_major">
              <div class="area--itemcard_title">
               <span class="text--itemcard_title ellipsis">
                [ahref]
                
               </span>
              </div>
              <div class="area--itemcard_price">
               <span class="price_seller">
                <span class="for-a11y">
                 상품금액
                </span>
                <strong class="text--price_seller">
                 9,900
                </strong>
                <span class="text--unit">
                 원
                </span>
               </span>
              </div>
             </div>
             <div class="section--itemcard_info_add">
              <ul class="list--addinfo">
               <li class="item">
                <span class="text--addinfo">
                 무료배송
                </span>
               </li>
              </ul>
             </div>
             <div class="section--itemcard_info_score">
              <ul class="list--score">
               <li class="item awards">
                <span class="for-a11y">
                 만족도
                 94
                 %입니다.
                </span>
                <div class="seller_awards" title="만족도 94 % 입니다">
                 <span class="awards_points" style="width:94%">
                 </span>
                 <span class="bg_star">
                 </span>
                </div>
               </li>
               <li class="item reviewcnt">
                <span class="text--reviewcnt">
                 상품평
                 3,389
                </span>
                <span class="for-a11y">
                 건
                </span>
               </li>
               <li class="item buycnt">
                <span class="text--buycnt">
                 구매
                 17,033
                </span>
                <span class="for-a11y">
                 건
                </span>
               </li>
              </ul>
             </div>
             <div class="section--itemcard_info_shop">
              [linkx]
              
             </div>
             <button class="button--favorite ">
              <span class="icon--favorite">
               <span class="for-a11y">
                관심상품 등록하기
               </span>
              </span>
             </button>
            </div>
           </div>
          </div>
         </div>
         <div class="component component--item_card type--general">
          <h4 class="text--module_title">
           일반상품 아이템카드
          </h4>
          <div class="itemcard">
           <div class="section--itemcard">
            <div class="section--itemcard_img">
             [linkx]
             
            </div>
            <div class="section--itemcard_info">
             <div class="section--itemcard_info_major">
              <div class="area--itemcard_title">
               <span class="text--itemcard_title ellipsis">
                [ahref]
                
               </span>
              </div>
              <div class="area--itemcard_price">
               <span class="price_seller">
                <span class="for-a11y">
                 상품금액
                </span>
                <strong class="text--price_seller">
                 14,900
                </strong>
                <span class="text--unit">
                 원
                </span>
               </span>
              </div>
             </div>
             <div class="section--itemcard_info_add">
              <ul class="list--addinfo">
               <li class="item">
                <span class="text--addinfo">
                 무료배송
                </span>
               </li>
              </ul>
             </div>
             <div class="section--itemcard_info_score">
              <ul class="list--score">
               <li class="item awards">
                <span class="for-a11y">
                 만족도
                 98
                 %입니다.
                </span>
                <div class="seller_awards" title="만족도 98 % 입니다">
                 <span class="awards_points" style="width:98%">
                 </span>
                 <span class="bg_star">
                 </span>
                </div>
               </li>
               <li class="item reviewcnt">
                <span class="text--reviewcnt">
                 상품평
                 673
                </span>
                <span class="for-a11y">
                 건
                </span>
               </li>
               <li class="item buycnt">
                [area1][keywordx][symbolx][area1][keywordx][symbolx][bracketl16][area1][keywordx][bracketr16][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx]<li>[linkx]</li>[ahref]<li>[area1][keywordx][symbolx][area1][keywordx][symbolx][bracketl17][area1][keywordx][bracketr17][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx]</li>
               </li>
              </ul>
             </div>
             <div class="section--itemcard_info_shop">
              [ahref]
              
             </div>
             <button class="button--favorite ">
              <span class="icon--favorite">
               <span class="for-a11y">
                관심상품 등록하기
               </span>
              </span>
             </button>
             <button class="button--related_item" title="연관상품 4 개가 있습니다. ">
              <span class="text--related_item">
               <b class="text--title">
                연관상품
               </b>
               <b class="text--cnt">
                4
               </b>
              </span>
             </button>
            </div>
           </div>
          </div>
          <div class="popup--related_items ">
           <h2 class="section--title">
            <b>[area1][mkey1][symbolx][pkeyx][symbolx][area1][keyword1][bracketl1][area1][keywordx][bracketr1][symbolx][bracketl2][area1][keywordx][bracketr2][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx]</b>
           </h2>
           <div class="section--body">
            <div class="section--related_items">
             <div class="section--slick_area">
              <div class="list--related_items">
               <div class="slick-slider slick-initialized">
                <div class="slick-list">
                 <div class="slick-track" style="width:0%;left:NaN%">
                 </div>
                </div>
               </div>
              </div>
             </div>
            </div>
           </div>
          </div>
         </div>
         <div class="component component--item_card type--general">
          <h4 class="text--module_title">
           일반상품 아이템카드
          </h4>
          <div class="itemcard">
           <div class="section--itemcard">
            <div class="section--itemcard_img">
             [linkx]
             
            </div>
            <div class="section--itemcard_info">
             <div class="section--itemcard_info_major">
              <div class="area--itemcard_title">
               <span class="text--itemcard_title ellipsis">
                [ahref]
                
               </span>
              </div>
              <div class="area--itemcard_price">
               <span class="price_seller">
                <span class="for-a11y">
                 상품금액
                </span>
                <strong class="text--price_seller">
                 25,900
                </strong>
                <span class="text--unit">
                 원
                </span>
               </span>
              </div>
             </div>
             <div class="section--itemcard_info_add">
              <ul class="list--addinfo">
               <li class="item">
                <span class="text--addinfo">
                 무료배송
                </span>
               </li>
              </ul>
             </div>
             <div class="section--itemcard_info_score">
              <ul class="list--score">
               <li class="item awards">
                <span class="for-a11y">
                 만족도
                 96
                 %입니다.
                </span>
                <div class="seller_awards" title="만족도 96 % 입니다">
                 <span class="awards_points" style="width:96%">
                 </span>
                 <span class="bg_star">
                 </span>
                </div>
               </li>
               <li class="item reviewcnt">
                <span class="text--reviewcnt">
                 상품평
                 158
                </span>
                <span class="for-a11y">
                 건
                </span>
               </li>
               <li class="item buycnt">
                <span class="text--buycnt">
                 구매
                 270
                </span>
                <span class="for-a11y">
                 건
                </span>
               </li>
              </ul>
             </div>
             <div class="section--itemcard_info_shop">
              [linkx]
              
             </div>
             <button class="button--favorite ">
              <span class="icon--favorite">
               <span class="for-a11y">
                관심상품 등록하기
               </span>
              </span>
             </button>
             <button class="button--related_item" title="연관상품 4 개가 있습니다. ">
              <span class="text--related_item">
               <b class="text--title">
                연관상품
               </b>
               <b class="text--cnt">
                4
               </b>
              </span>
             </button>
            </div>
           </div>
          </div>
          <div class="popup--related_items ">
           <h2 class="section--title">
            [area1][mkey1][symbolx][pkeyx][symbolx][area1][keyword1][bracketl1][area1][keywordx][bracketr1][symbolx][bracketl2][area1][keywordx][bracketr2][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx]
           </h2>
           <div class="section--body">
            <div class="section--related_items">
             <div class="section--slick_area">
              <div class="list--related_items">
               <div class="slick-slider slick-initialized">
                <div class="slick-list">
                 <div class="slick-track" style="width:0%;left:NaN%">
                 </div>
                </div>
               </div>
              </div>
             </div>
            </div>
           </div>
          </div>
         </div>
         <div class="component component--item_card type--general">
          <h4 class="text--module_title">
           일반상품 아이템카드
          </h4>
          <div class="itemcard">
           <div class="section--itemcard">
            <div class="section--itemcard_img">
             <a class="link--itemcard image--loading" href="/DetailView.aspx?itemno=A708720307" target="_blank">
              <div class="lazyload-placeholder" style="height:100%">
              </div>
             </a>
            </div>
            <div class="section--itemcard_info">
             <div class="section--itemcard_info_major">
              <div class="area--itemcard_title">
               <span class="text--itemcard_title ellipsis">
                <a class="link--itemcard" href="/DetailView.aspx?itemno=A708720307" target="_blank">
                 <span class="for-a11y">
                  브랜드명
                 </span>
                 <span class="text--brand">
                 </span>
                 <span class="for-a11y">
                  상품명
                 </span>
                 <span class="text--title">
                  꿀고구마/호박고구마 /배송당일 엄선
                 </span>
                </a>
               </span>
              </div>
              <div class="area--itemcard_price">
               <span class="price_seller">
                <span class="for-a11y">
                 상품금액
                </span>
                <strong class="text--price_seller">
                 9,900
                </strong>
                <span class="text--unit">
                 원
                </span>
               </span>
              </div>
             </div>
             <div class="section--itemcard_info_add">
              <ul class="list--addinfo">
               <li class="item">
                <span class="text--addinfo">
                 무료배송
                </span>
               </li>
              </ul>
             </div>
             <div class="section--itemcard_info_score">
              <ul class="list--score">
               <li class="item awards">
                <span class="for-a11y">
                 만족도
                 96
                 %입니다.
                </span>
                <div class="seller_awards" title="만족도 96 % 입니다">
                 <span class="awards_points" style="width:96%">
                 </span>
                 <span class="bg_star">
                 </span>
                </div>
               </li>
               <li class="item reviewcnt">
                <span class="text--reviewcnt">
                 상품평
                 3,068
                </span>
                <span class="for-a11y">
                 건
                </span>
               </li>
               <li class="item buycnt">
                <span class="text--buycnt">
                 구매
                 22,012
                </span>
                <span class="for-a11y">
                 건
                </span>
               </li>
              </ul>
             </div>
             <div class="section--itemcard_info_shop">
              [linkx]
              
              <span class="for-a11y">
               판매자평가정보
              </span>
              <ul class="list--store_info">
               <li class="item top_seller">
                <div class="section--advertisement ">
                 <button class="button--notice_about_advertisement" title="최우수판매자 안내 레이어 보기" type="button">
                  <span class="text">
                   최우수판매자
                  </span>
                 </button>
                 <div class="layer--information">
                  <strong class="text--information_title">
                   최우수판매자란?
                  </strong>
                  <p class="text--information_description">
                   옥션의 판매인증 평가기준을 모두 달성한 최상위 판매자
                  </p>
                  <button class="button--close_layer" type="button">
                   <span class="ir">
                    최우수판매자
                    안내 레이어 닫기
                   </span>
                  </button>
                 </div>
                </div>
               </li>
              </ul>
             </div>
             <button class="button--favorite ">
              <span class="icon--favorite">
               <span class="for-a11y">
                관심상품 등록하기
               </span>
              </span>
             </button>
            </div>
           </div>
          </div>
         </div>
         <div class="component component--item_card type--general">
          <h4 class="text--module_title">
           일반상품 아이템카드
          </h4>
          <div class="itemcard">
           <div class="section--itemcard">
            <div class="section--itemcard_img">
             [ahref]
             
            </div>
            <div class="section--itemcard_info">
             <div class="section--itemcard_info_major">
              <div class="area--itemcard_title">
               <span class="text--itemcard_title ellipsis">
                [ahref]
                
               </span>
              </div>
              <div class="area--itemcard_price">
               <span class="discount" title="할인률">
                <strong class="text--discount">
                 50
                </strong>
                <span class="text--unit">
                 %
                </span>
                <span class="for-a11y">
                 할인
                </span>
               </span>
               <span class="price_seller">
                <span class="for-a11y">
                 할인적용금액
                </span>
                <strong class="text--price_seller">
                 9,900
                </strong>
                <span class="text--unit">
                 원
                </span>
               </span>
               <span class="price_original">
                <span class="for-a11y">
                 상품금액
                </span>
                <strong class="text--price_original">
                 19,800
                </strong>
                <span class="text--unit">
                 원
                </span>
               </span>
              </div>
             </div>
             <div class="section--itemcard_info_add">
              <ul class="list--addinfo">
               <li class="item">
                <span class="text--addinfo">
                 무료배송
                </span>
               </li>
              </ul>
             </div>
             <div class="section--itemcard_info_score">
              <ul class="list--score">
               <li class="item awards">
                <span class="for-a11y">
                 만족도
                 92
                 %입니다.
                </span>
                <div class="seller_awards" title="만족도 92 % 입니다">
                 <span class="awards_points" style="width:92%">
                 </span>
                 <span class="bg_star">
                 </span>
                </div>
               </li>
               <li class="item reviewcnt">
                <span class="text--reviewcnt">
                 상품평
                 2,004
                </span>
                <span class="for-a11y">
                 건
                </span>
               </li>
               <li class="item buycnt">
                <span class="text--buycnt">
                 구매
                 6,371
                </span>
                <span class="for-a11y">
                 건
                </span>
               </li>
              </ul>
             </div>
             <div class="section--itemcard_info_shop">
              [ahref]
              
              <span class="for-a11y">
               판매자평가정보
              </span>
              <ul class="list--store_info">
               <li class="item top_seller">
                <div class="section--advertisement ">
                 <button class="button--notice_about_advertisement" title="최우수판매자 안내 레이어 보기" type="button">
                  <span class="text">
                   최우수판매자
                  </span>
                 </button>
                 <div class="layer--information">
                  <strong class="text--information_title">
                   최우수판매자란?
                  </strong>
                  <p class="text--information_description">
                   옥션의 판매인증 평가기준을 모두 달성한 최상위 판매자
                  </p>
                  <button class="button--close_layer" type="button">
                   <span class="ir">
                    최우수판매자
                    안내 레이어 닫기
                   </span>
                  </button>
                 </div>
                </div>
               </li>
              </ul>
             </div>
             <button class="button--favorite ">
              <span class="icon--favorite">
               <span class="for-a11y">
                관심상품 등록하기
               </span>
              </span>
             </button>
             <button class="button--related_item" title="연관상품 4 개가 있습니다. ">
              <span class="text--related_item">
               <b class="text--title">
                연관상품
               </b>
               <b class="text--cnt">
                4
               </b>
              </span>
             </button>
            </div>
           </div>
          </div>
          <div class="popup--related_items ">
           <h2 class="section--title">
            [area1][mkey1][symbolx][pkeyx][symbolx][area1][keyword1][bracketl1][area1][keywordx][bracketr1][symbolx][bracketl2][area1][keywordx][bracketr2][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx]
           </h2>
           <div class="section--body">
            <div class="section--related_items">
             <div class="section--slick_area">
              <div class="list--related_items">
               <div class="slick-slider slick-initialized">
                <div class="slick-list">
                 <div class="slick-track" style="width:0%;left:NaN%">
                 </div>
                </div>
               </div>
              </div>
             </div>
            </div>
           </div>
          </div>
         </div>
         <div class="component component--item_card type--general">
          <h4 class="text--module_title">
           일반상품 아이템카드
          </h4>
          <div class="itemcard">
           <div class="section--itemcard">
            <div class="section--itemcard_img">
             [ahref]
             
            </div>
            <div class="section--itemcard_info">
             <div class="section--itemcard_info_major">
              <div class="area--itemcard_title">
               <span class="text--itemcard_title ellipsis">
                [linkx]
                
               </span>
              </div>
              <div class="area--itemcard_price">
               <span class="price_seller">
                <span class="for-a11y">
                 상품금액
                </span>
                <strong class="text--price_seller">
                 36,800
                </strong>
                <span class="text--unit">
                 원
                </span>
               </span>
              </div>
             </div>
             <div class="section--itemcard_info_add">
              <ul class="list--addinfo">
               <li class="item">
                <span class="text--addinfo">
                 배송비 3,000원
                </span>
               </li>
              </ul>
             </div>
             <div class="section--itemcard_info_score">
              <ul class="list--score">
               <li class="item awards">
                <span class="for-a11y">
                 만족도
                 100
                 %입니다.
                </span>
                <div class="seller_awards" title="만족도 100 % 입니다">
                 <span class="awards_points" style="width:100%">
                 </span>
                 <span class="bg_star">
                 </span>
                </div>
               </li>
               <li class="item reviewcnt">
                <span class="text--reviewcnt">
                 상품평
                 176
                </span>
                <span class="for-a11y">
                 건
                </span>
               </li>
               <li class="item buycnt">
                <span class="text--buycnt">
                 구매
                 527
                </span>
                <span class="for-a11y">
                 건
                </span>
               </li>
              </ul>
             </div>
             <div class="section--itemcard_info_shop">
              <a class="link--shop" href="/jigumaul" target="_blank" title="스토어로 이동">
               <span class="for-a11y">
                판매자
               </span>
               <span class="text">
                지구마을
               </span>
              </a>
              <span class="for-a11y">
               판매자평가정보
              </span>
              <ul class="list--store_info">
               <li class="item top_seller">
                <div class="section--advertisement ">
                 <button class="button--notice_about_advertisement" title="최우수판매자 안내 레이어 보기" type="button">
                  <span class="text">
                   최우수판매자
                  </span>
                 </button>
                 <div class="layer--information">
                  <strong class="text--information_title">
                   최우수판매자란?
                  </strong>
                  <p class="text--information_description">
                   옥션의 판매인증 평가기준을 모두 달성한 최상위 판매자
                  </p>
                  <button class="button--close_layer" type="button">
                   <span class="ir">
                    최우수판매자
                    안내 레이어 닫기
                   </span>
                  </button>
                 </div>
                </div>
               </li>
              </ul>
             </div>
             <button class="button--favorite ">
              <span class="icon--favorite">
               <span class="for-a11y">
                관심상품 등록하기
               </span>
              </span>
             </button>
             <button class="button--related_item" title="연관상품 4 개가 있습니다. ">
              <span class="text--related_item">
               <b class="text--title">
                연관상품
               </b>
               <b class="text--cnt">
                4
               </b>
              </span>
             </button>
            </div>
           </div>
          </div>
          <div class="popup--related_items ">
           <h2 class="section--title">
            <b>[area1][mkey1][symbolx][pkeyx][symbolx][area1][keyword1][bracketl1][area1][keywordx][bracketr1][symbolx][bracketl2][area1][keywordx][bracketr2][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx]</b>
           </h2>
           <div class="section--body">
            <div class="section--related_items">
             <div class="section--slick_area">
              <div class="list--related_items">
               <div class="slick-slider slick-initialized">
                <div class="slick-list">
                 <div class="slick-track" style="width:0%;left:NaN%">
                 </div>
                </div>
               </div>
              </div>
             </div>
            </div>
           </div>
          </div>
         </div>
         <div class="component component--item_card type--general">
          <h4 class="text--module_title">
           일반상품 아이템카드
          </h4>
          <div class="itemcard">
           <div class="section--itemcard">
            <div class="section--itemcard_img">
             [ahref]
             
            </div>
            <div class="section--itemcard_info">
             <div class="section--itemcard_info_major">
              <div class="area--itemcard_title">
               <span class="text--itemcard_title ellipsis">
                [linkx]
                
               </span>
              </div>
              <div class="area--itemcard_price">
               <span class="price_seller">
                <span class="for-a11y">
                 상품금액
                </span>
                <strong class="text--price_seller">
                 18,900
                </strong>
                <span class="text--unit">
                 원
                </span>
               </span>
              </div>
             </div>
             <div class="section--itemcard_info_add">
              <ul class="list--addinfo">
               <li class="item">
                <span class="text--addinfo">
                 무료배송
                </span>
               </li>
              </ul>
             </div>
             <div class="section--itemcard_info_score">
              <ul class="list--score">
               <li class="item awards">
                <span class="for-a11y">
                 만족도
                 96
                 %입니다.
                </span>
                <div class="seller_awards" title="만족도 96 % 입니다">
                 <span class="awards_points" style="width:96%">
                 </span>
                 <span class="bg_star">
                 </span>
                </div>
               </li>
               <li class="item reviewcnt">
                <span class="text--reviewcnt">
                 상품평
                 1,562
                </span>
                <span class="for-a11y">
                 건
                </span>
               </li>
               <li class="item buycnt">
                <span class="text--buycnt">
                 구매
                 50,653
                </span>
                <span class="for-a11y">
                 건
                </span>
               </li>
              </ul>
             </div>
             <div class="section--itemcard_info_shop">
              [ahref]
              
              <span class="for-a11y">
               판매자평가정보
              </span>
              <ul class="list--store_info">
               <li class="item top_seller">
                <div class="section--advertisement ">
                 <button class="button--notice_about_advertisement" title="최우수판매자 안내 레이어 보기" type="button">
                  <span class="text">
                   최우수판매자
                  </span>
                 </button>
                 <div class="layer--information">
                  <strong class="text--information_title">
                   최우수판매자란?
                  </strong>
                  <p class="text--information_description">
                   옥션의 판매인증 평가기준을 모두 달성한 최상위 판매자
                  </p>
                  <button class="button--close_layer" type="button">
                   <span class="ir">
                    최우수판매자
                    안내 레이어 닫기
                   </span>
                  </button>
                 </div>
                </div>
               </li>
              </ul>
             </div>
             <button class="button--favorite ">
              <span class="icon--favorite">
               <span class="for-a11y">
                관심상품 등록하기
               </span>
              </span>
             </button>
            </div>
           </div>
          </div>
         </div>
         <div class="component component--item_card type--general">
          <h4 class="text--module_title">
           일반상품 아이템카드
          </h4>
          <div class="itemcard">
           <div class="section--itemcard">
            <div class="section--itemcard_img">
             <a class="link--itemcard image--loading" href="/DetailView.aspx?itemno=B520550472" target="_blank">
              <div class="lazyload-placeholder" style="height:100%">
              </div>
             </a>
            </div>
            <div class="section--itemcard_info">
             <div class="section--itemcard_info_major">
              <div class="area--itemcard_title">
               <span class="text--itemcard_title ellipsis">
                <a class="link--itemcard" href="/DetailView.aspx?itemno=B520550472" target="_blank">
                 <span class="for-a11y">
                  브랜드명
                 </span>
                 <span class="text--brand">
                  파머스토리
                 </span>
                 <span class="for-a11y">
                  상품명
                 </span>
                 <span class="text--title">
                  충남 논산 공병윤님의 무농약 호밤고구마 5kg 특상
                 </span>
                </a>
               </span>
              </div>
              <div class="area--itemcard_price">
               <span class="discount" title="할인률">
                <strong class="text--discount">
                </strong>
                <span class="text--unit">
                </span>
                <span class="for-a11y">
                 할인
                </span>
               </span>
               <span class="price_seller">
                <span class="for-a11y">
                 할인적용금액
                </span>
                <strong class="text--price_seller">
                 32,900
                </strong>
                <span class="text--unit">
                 원
                </span>
               </span>
               <span class="price_original">
                <span class="for-a11y">
                 상품금액
                </span>
                <strong class="text--price_original">
                 33,000
                </strong>
                <span class="text--unit">
                 원
                </span>
               </span>
              </div>
             </div>
             <div class="section--itemcard_info_add">
              <ul class="list--addinfo">
               <li class="item">
                <span class="text--addinfo">
                 무료배송
                </span>
               </li>
              </ul>
             </div>
             <div class="section--itemcard_info_score">
              <ul class="list--score">
               <li class="item awards">
                <span class="for-a11y">
                 만족도
                 96
                 %입니다.
                </span>
                <div class="seller_awards" title="만족도 96 % 입니다">
                 <span class="awards_points" style="width:96%">
                 </span>
                 <span class="bg_star">
                 </span>
                </div>
               </li>
               <li class="item reviewcnt">
                <span class="text--reviewcnt">
                 상품평
                 148
                </span>
                <span class="for-a11y">
                 건[area1][keywordx]<li>[linkx]</li><li>[pkeyx]</li><li>[ahref]</li><li>[pkeyx]</li>
                </span>
               </li>
               <li class="item buycnt">
                <span class="text--buycnt">
                 구매
                 405
                </span>
                <span class="for-a11y">
                 건
                </span>
               </li>
              </ul>
             </div>
             <div class="section--itemcard_info_shop">
              [linkx]
              
              <span class="for-a11y">
               판매자평가정보
              </span>
              <ul class="list--store_info">
               <li class="item">
                <span class="text--store_info">
                 배송
                </span>
               </li>
               <li class="item">
                <span class="text--store_info">
                 상품평
                </span>
               </li>
               <li class="item">
                <span class="text--store_info">
                 고객응대우수
                </span>
               </li>
              </ul>
             </div>
             <button class="button--favorite ">
              <span class="icon--favorite">
               <span class="for-a11y">
                관심상품 등록하기
               </span>
              </span>
             </button>
            </div>
           </div>
          </div>
         </div>
         <div class="component component--item_card type--general">
          <h4 class="text--module_title">
           일반상품 아이템카드
          </h4>
          <div class="itemcard">
           <div class="section--itemcard">
            <div class="section--itemcard_img">
             [pkeyx][area1][keywordx][area1][keywordx][symbolx][area1][keywordx][symbolx][bracketl4][area1][keywordx][bracketr4][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][pkeyx][linkx][area1][keywordx][area1][keywordx][symbolx][area1][keywordx][symbolx][bracketl5][area1][keywordx][bracketr5][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][ahref][area1][keywordx][symbolx][area1][keywordx][symbolx][bracketl6][area1][keywordx][bracketr6][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx]
            </div>
            <div class="section--itemcard_info">
             <div class="section--itemcard_info_major">
              <div class="area--itemcard_title">
               <span class="text--itemcard_title ellipsis">
                <a class="link--itemcard" href="/DetailView.aspx?itemno=B443380876" target="_blank">
                 <span class="for-a11y">
                  브랜드명
                 </span>
                 <span class="text--brand">
                 </span>
                 <span class="for-a11y">
                  상품명
                 </span>
                 <span class="text--title">
                  해남 산지직송 꿀고구마(달수고구마) 3kg 중상
                 </span>
                </a>
               </span>
              </div>
              <div class="area--itemcard_price">
               <span class="price_seller">
                <span class="for-a11y">
                 상품금액
                </span>
                <strong class="text--price_seller">
                 16,900
                </strong>
                <span class="text--unit">
                 원
                </span>
               </span>
              </div>
             </div>
             <div class="section--itemcard_info_add">
              <ul class="list--addinfo">
               <li class="item">
                <span class="text--addinfo">
                 무료배송
                </span>
               </li>
              </ul>
             </div>
             <div class="section--itemcard_info_score">
              <ul class="list--score">
               <li class="item awards">
                <span class="for-a11y">
                 만족도
                 96
                 %입니다.
                </span>
                <div class="seller_awards" title="만족도 96 % 입니다">
                 <span class="awards_points" style="width:96%">
                 </span>
                 <span class="bg_star">
                 </span>
                </div>
               </li>
               <li class="item reviewcnt">
                <span class="text--reviewcnt">
                 상품평
                 1,392
                </span>
                <span class="for-a11y">
                 건
                </span>
               </li>
               <li class="item buycnt">
                <span class="text--buycnt">
                 구매
                 3,132
                </span>
                <span class="for-a11y">
                 건
                </span>
               </li>
              </ul>
             </div>
             <div class="section--itemcard_info_shop">
              [ahref]
              
             </div>
             <button class="button--favorite ">
              <span class="icon--favorite">
               <span class="for-a11y">
                관심상품 등록하기
               </span>
              </span>
             </button>
             <button class="button--related_item" title="연관상품 8 개가 있습니다. ">
              <span class="text--related_item">
               <b class="text--title">
                연관상품
               </b>
               <b class="text--cnt">
                8
               </b>
              </span>
             </button>
            </div>
           </div>
          </div>
          <div class="popup--related_items ">
           <h2 class="section--title">
            <b>[area1][mkey1][symbolx][pkeyx][symbolx][area1][keyword1][bracketl1][area1][keywordx][bracketr1][symbolx][bracketl2][area1][keywordx][bracketr2][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx]</b>
           </h2>
           <div class="section--body">
            <div class="section--related_items">
             <div class="section--slick_area">
              <div class="list--related_items">
               <div class="slick-slider slick-initialized">
                <div class="slick-list">
                 <div class="slick-track" style="width:0%;left:NaN%">
                 </div>
                </div>
               </div>
              </div>
             </div>
            </div>
           </div>
          </div>
         </div>
         <div class="component component--item_card type--general">
          <h4 class="text--module_title">
           일반상품 아이템카드[linkx][ahref][area1][mkey1][pkeyx][ahref][linkx][area1][keywordx][symbolx][area1][keywordx][symbolx][bracketl7][area1][keywordx][bracketr7][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][pkeyx][ahref][area1][keywordx][symbolx][area1][keywordx][symbolx][bracketl8][area1][keywordx][bracketr8][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][linkx][ahref][pkeyx][ahref][ahref][area1][keywordx][area1][keywordx][area1][keywordx][area1][keywordx][pkeyx]
          </h4>
          <div class="itemcard">
           <div class="section--itemcard">
            <div class="section--itemcard_img">
             [linkx]
             
            </div>
            <div class="section--itemcard_info">
             <div class="section--itemcard_info_major">
              <div class="area--itemcard_title">
               <span class="text--itemcard_title ellipsis">
                [ahref]
                
               </span>
              </div>
              <div class="area--itemcard_price">
               <span class="price_seller">
                <span class="for-a11y">
                 상품금액
                </span>
                <strong class="text--price_seller">
                 9,900
                </strong>
                <span class="text--unit">
                 원
                </span>
               </span>
              </div>
             </div>
             <div class="section--itemcard_info_add">
              <ul class="list--addinfo">
               <li class="item">
                <span class="text--addinfo">
                 무료배송
                </span>
               </li>
              </ul>
             </div>
             <div class="section--itemcard_info_score">
              <ul class="list--score">
               <li class="item awards">
                <span class="for-a11y">
                 만족도
                 92
                 %입니다.
                </span>
                <div class="seller_awards" title="만족도 92 % 입니다">
                 <span class="awards_points" style="width:92%">
                 </span>
                 <span class="bg_star">
                 </span>
                </div>
               </li>
               <li class="item reviewcnt">
                <span class="text--reviewcnt">
                 상품평
                 4,761
                </span>
                <span class="for-a11y">
                 건
                </span>
               </li>
               <li class="item buycnt">
                <span class="text--buycnt">
                 구매
                 56,413
                </span>
                <span class="for-a11y">
                 건
                </span>
               </li>
              </ul>
             </div>
             <div class="section--itemcard_info_shop">
              [linkx]
              
              <span class="for-a11y">
               판매자평가정보
              </span>
              <ul class="list--store_info">
               <li class="item top_seller">
                <div class="section--advertisement ">
                 <button class="button--notice_about_advertisement" title="최우수판매자 안내 레이어 보기" type="button">
                  <span class="text">
                   최우수판매자
                  </span>
                 </button>
                 <div class="layer--information">
                  <strong class="text--information_title">
                   최우수판매자란?
                  </strong>
                  <p class="text--information_description">
                   옥션의 판매인증 평가기준을 모두 달성한 최상위 판매자
                  </p>
                  <button class="button--close_layer" type="button">
                   <span class="ir">
                    최우수판매자
                    안내 레이어 닫기
                   </span>
                  </button>
                 </div>
                </div>
               </li>
              </ul>
             </div>
             <button class="button--favorite ">
              <span class="icon--favorite">
               관심상품 등록하기<li>[ahref]</li><li>[area1][keywordx][symbolx][area1][keywordx][symbolx][bracketl18][area1][keywordx][bracketr18][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx]</li><li>[area1][keywordx]</li>
              </span>
             </button>
            </div>
           </div>
          </div>
         </div>
         <div class="component component--item_card type--general">
          <h4 class="text--module_title">
           일반상품 아이템카드
          </h4>
          <div class="itemcard">
           <div class="section--itemcard">
            <div class="section--itemcard_img">
             [ahref]
             
            </div>
            <div class="section--itemcard_info">
             <div class="section--itemcard_info_major">
              <div class="area--itemcard_title">
               <span class="text--itemcard_title ellipsis">
                <a class="link--itemcard" href="/DetailView.aspx?itemno=B466507813" target="_blank">
                 <span class="for-a11y">
                  브랜드명
                 </span>
                 <span class="text--brand">
                 </span>
                 <span class="for-a11y">
                  상품명
                 </span>
                 <span class="text--title">
                  아침고구마 혼달 10팩_바로먹는고구마
                 </span>
                </a>
               </span>
              </div>
              <div class="area--itemcard_price">
               <span class="discount" title="할인률">
                <strong class="text--discount">
                 10
                </strong>
                <span class="text--unit">
                 %
                </span>
                <span class="for-a11y">
                 할인
                </span>
               </span>
               <span class="price_seller">
                <span class="for-a11y">
                 할인적용금액
                </span>
                <strong class="text--price_seller">
                 18,000
                </strong>
                <span class="text--unit">
                 원
                </span>
               </span>
               <span class="price_original">
                <span class="for-a11y">
                 상품금액
                </span>
                <strong class="text--price_original">
                 20,000
                </strong>
                <span class="text--unit">
                 원
                </span>
               </span>
              </div>
             </div>
             <div class="section--itemcard_info_add">
              <ul class="list--addinfo">
               <li class="item">
                <span class="text--addinfo">
                 무료배송
                </span>
               </li>
              </ul>
             </div>
             <div class="section--itemcard_info_score">
              <ul class="list--score">
               <li class="item awards">
                <span class="for-a11y">
                 만족도
                 98
                 %입니다.
                </span>
                <div class="seller_awards" title="만족도 98 % 입니다">
                 <span class="awards_points" style="width:98%">
                 </span>
                 <span class="bg_star">
                 </span>
                </div>
               </li>
               <li class="item reviewcnt">
                <span class="text--reviewcnt">
                 상품평
                 164
                </span>
                <span class="for-a11y">
                 건
                </span>
               </li>
               <li class="item buycnt">
                <span class="text--buycnt">
                 구매
                 548
                </span>
                <span class="for-a11y">
                 건
                </span>
               </li>
              </ul>
             </div>
             <div class="section--itemcard_info_shop">
              <a class="link--shop" href="/cnctrain" target="_blank" title="스토어로 이동">
               <span class="for-a11y">
                판매자
               </span>
               <span class="text">
                해맑음마켓
               </span>
              </a>
             </div>
             <button class="button--favorite ">
              <span class="icon--favorite">
               <span class="for-a11y">
                관심상품 등록하기
               </span>
              </span>
             </button>
            </div>
           </div>
          </div>
         </div>
         <div class="component component--item_card type--general">
          <h4 class="text--module_title">
           일반상품 아이템카드
          </h4>
          <div class="itemcard">
           <div class="section--itemcard">
            <div class="section--itemcard_img">
             <a class="link--itemcard image--loading" href="/DetailView.aspx?itemno=B475721701" target="_blank">
              <div class="lazyload-placeholder" style="height:100%">
              </div>
             </a>
            </div>
            <div class="section--itemcard_info">
             <div class="section--itemcard_info_major">
              <div class="area--itemcard_title">
               <span class="text--itemcard_title ellipsis">
                [ahref]
                
               </span>
              </div>
              <div class="area--itemcard_price">
               <span class="price_seller">
                <span class="for-a11y">
                 상품금액
                </span>
                <strong class="text--price_seller">
                 24,900
                </strong>
                <span class="text--unit">
                 원
                </span>
               </span>
              </div>
             </div>
             <div class="section--itemcard_info_add">
              <ul class="list--addinfo">
               <li class="item">
                <span class="text--addinfo">
                 무료배송
                </span>
               </li>
              </ul>
             </div>
             <div class="section--itemcard_info_score">
              <ul class="list--score">
               <li class="item awards">
                <span class="for-a11y">
                 만족도
                 90
                 %입니다.
                </span>
                <div class="seller_awards" title="만족도 90 % 입니다">
                 <span class="awards_points" style="width:90%">
                 </span>
                 <span class="bg_star">
                 </span>
                </div>
               </li>
               <li class="item reviewcnt">
                <span class="text--reviewcnt">
                 상품평
                 160
                </span>
                <span class="for-a11y">
                 건
                </span>
               </li>
               <li class="item buycnt">
                <span class="text--buycnt">
                 구매
                 487
                </span>
                <span class="for-a11y">
                 건
                </span>
               </li>
              </ul>
             </div>
             <div class="section--itemcard_info_shop">
              [linkx]
              
              <span class="for-a11y">
               판매자평가정보
              </span>
              <ul class="list--store_info">
               <li class="item top_seller">
                <div class="section--advertisement ">
                 <button class="button--notice_about_advertisement" title="최우수판매자 안내 레이어 보기" type="button">
                  <span class="text">
                   최우수판매자
                  </span>
                 </button>
                 <div class="layer--information">
                  <strong class="text--information_title">
                   최우수판매자란?
                  </strong>
                  <p class="text--information_description">
                   옥션의 판매인증 평가기준을 모두 달성한 최상위 판매자
                  </p>
                  <button class="button--close_layer" type="button">
                   <span class="ir">
                    최우수판매자
                    안내 레이어 닫기
                   </span>
                  </button>
                 </div>
                </div>
               </li>
              </ul>
             </div>
             <button class="button--favorite ">
              <span class="icon--favorite">
               <span class="for-a11y">
                관심상품 등록하기
               </span>
              </span>
             </button>
             <button class="button--related_item" title="연관상품 5 개가 있습니다. ">
              <span class="text--related_item">
               <b class="text--title">
                연관상품
               </b>
               <b class="text--cnt">
                5
               </b>
              </span>
             </button>
            </div>
           </div>
          </div>
          <div class="popup--related_items ">
           <h2 class="section--title">
            <b>[area1][mkey1][symbolx][pkeyx][symbolx][area1][keyword1][bracketl1][area1][keywordx][bracketr1][symbolx][bracketl2][area1][keywordx][bracketr2][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx]</b>
           </h2>
           <div class="section--body">
            <div class="section--related_items">
             <div class="section--slick_area">
              <div class="list--related_items">
               <div class="slick-slider slick-initialized">
                <div class="slick-list">
                 <div class="slick-track" style="width:0%;left:NaN%">
                 </div>
                </div>
               </div>
              </div>
             </div>
            </div>
           </div>
          </div>
         </div>
         <div class="component component--item_card type--general">
          <h4 class="text--module_title">
           일반상품 아이템카드
          </h4>
          <div class="itemcard">
           <div class="section--itemcard">
            <div class="section--itemcard_img">
             [linkx]
             
            </div>
            <div class="section--itemcard_info">
             <div class="section--itemcard_info_major">
              <div class="area--itemcard_title">
               <span class="text--itemcard_title ellipsis">
                <a class="link--itemcard" href="/DetailView.aspx?itemno=B206382150" target="_blank">
                 <span class="for-a11y">
                  브랜드명
                 </span>
                 <span class="text--brand">
                 </span>
                 <span class="for-a11y">
                  상품명
                 </span>
                 <span class="text--title">
                  해남고구마 외길40년 김오록 꿀고구마 5kg 베니하루카
                 </span>
                </a>
               </span>
              </div>
              <div class="area--itemcard_price">
               <span class="price_seller">
                <span class="for-a11y">
                 상품금액
                </span>
                <strong class="text--price_seller">
                 18,900
                </strong>
                <span class="text--unit">
                 원
                </span>
               </span>
              </div>
             </div>
             <div class="section--itemcard_info_add">
              <ul class="list--addinfo">
               <li class="item">
                <span class="text--addinfo">
                 무료배송
                </span>
               </li>
              </ul>
             </div>
             <div class="section--itemcard_info_score">
              <ul class="list--score">
               <li class="item awards">
                <span class="for-a11y">
                 만족도
                 98
                 %입니다.
                </span>
                <div class="seller_awards" title="만족도 98 % 입니다">
                 <span class="awards_points" style="width:98%">
                 </span>
                 <span class="bg_star">
                 </span>
                </div>
               </li>
               <li class="item reviewcnt">
                <span class="text--reviewcnt">
                 상품평
                 3,176
                </span>
                <span class="for-a11y">
                 건
                </span>
               </li>
               <li class="item buycnt">
                <span class="text--buycnt">
                 구매
                 9,022
                </span>
                <span class="for-a11y">
                 건
                </span>
               </li>
              </ul>
             </div>
             <div class="section--itemcard_info_shop">
              [linkx]
              
              <span class="for-a11y">
               판매자평가정보
              </span>
              <ul class="list--store_info">
               <li class="item">
                <span class="text--store_info">
                 상품평
                </span>
               </li>
               <li class="item">
                고객응대우수<li>[ahref]</li>[ahref][ahref]
               </li>
              </ul>
             </div>
             <button class="button--favorite ">
              <span class="icon--favorite">
               <span class="for-a11y">
                관심상품 등록하기
               </span>
              </span>
             </button>
            </div>
           </div>
          </div>
         </div>
         <div class="component component--item_card type--general">
          <h4 class="text--module_title">
           일반상품 아이템카드
          </h4>
          <div class="itemcard">
           <div class="section--itemcard">
            <div class="section--itemcard_img">
             <a class="link--itemcard image--loading" href="/DetailView.aspx?itemno=B262705740" target="_blank">
              <div class="lazyload-placeholder" style="height:100%">
              </div>
             </a>
            </div>
            <div class="section--itemcard_info">
             <div class="section--itemcard_info_major">
              <div class="area--itemcard_title">
               <span class="text--itemcard_title ellipsis">
                [linkx]
                
               </span>
              </div>
              <div class="area--itemcard_price">
               <span class="price_seller">
                <span class="for-a11y">
                 상품금액
                </span>
                <strong class="text--price_seller">
                 10,900
                </strong>
                <span class="text--unit">
                 원
                </span>
               </span>
              </div>
             </div>
             <div class="section--itemcard_info_add">
              <ul class="list--addinfo">
               <li class="item">
                <span class="text--addinfo">
                 무료배송
                </span>
               </li>
              </ul>
             </div>
             <div class="section--itemcard_info_score">
              <ul class="list--score">
               <li class="item awards">
                <span class="for-a11y">
                 만족도
                 92
                 %입니다.
                </span>
                <div class="seller_awards" title="만족도 92 % 입니다">
                 <span class="awards_points" style="width:92%">
                 </span>
                 <span class="bg_star">
                 </span>
                </div>
               </li>
               <li class="item reviewcnt">
                <span class="text--reviewcnt">
                 상품평
                 3,029
                </span>
                <span class="for-a11y">
                 건
                </span>
               </li>
               <li class="item buycnt">
                <span class="text--buycnt">
                 구매
                 10,284
                </span>
                <span class="for-a11y">
                 건
                </span>
               </li>
              </ul>
             </div>
             <div class="section--itemcard_info_shop">
              <a class="link--shop" href="/freshvil" target="_blank" title="스토어로 이동">
               <span class="for-a11y">
                판매자
               </span>
               <span class="text">
                freshvil
               </span>
              </a>
              <span class="for-a11y">
               판매자평가정보
              </span>
              <ul class="list--store_info">
               <li class="item top_seller">
                <div class="section--advertisement ">
                 <button class="button--notice_about_advertisement" title="최우수판매자 안내 레이어 보기" type="button">
                  <span class="text">
                   최우수판매자
                  </span>
                 </button>
                 <div class="layer--information">
                  <strong class="text--information_title">
                   최우수판매자란?
                  </strong>
                  <p class="text--information_description">
                   옥션의 판매인증 평가기준을 모두 달성한 최상위 판매자
                  </p>
                  <button class="button--close_layer" type="button">
                   <span class="ir">
                    최우수판매자
                    안내 레이어 닫기
                   </span>
                  </button>
                 </div>
                </div>
               </li>
              </ul>
             </div>
             <button class="button--favorite ">
              <span class="icon--favorite">
               <span class="for-a11y">
                관심상품 등록하기
               </span>
              </span>
             </button>
             <button class="button--related_item" title="연관상품 4 개가 있습니다. ">
              <span class="text--related_item">
               <b class="text--title">
                연관상품
               </b>
               <b class="text--cnt">
                4
               </b>
              </span>
             </button>
            </div>
           </div>
          </div>
          <div class="popup--related_items ">
           <h2 class="section--title">
            <b>[area1][mkey1][symbolx][pkeyx][symbolx][area1][keyword1][bracketl1][area1][keywordx][bracketr1][symbolx][bracketl2][area1][keywordx][bracketr2][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx]</b>
           </h2>
           <div class="section--body">
            <div class="section--related_items">
             <div class="section--slick_area">
              <div class="list--related_items">
               <div class="slick-slider slick-initialized">
                <div class="slick-list">
                 <div class="slick-track" style="width:0%;left:NaN%">
                 </div>
                </div>
               </div>
              </div>
             </div>
            </div>
           </div>
          </div>
         </div>
         <div class="component component--item_card type--general">
          <h4 class="text--module_title">
           일반상품 아이템카드
          </h4>
          <div class="itemcard">
           <div class="section--itemcard">
            <div class="section--itemcard_img">
             <a class="link--itemcard image--loading" href="/DetailView.aspx?itemno=B701559002" target="_blank">
              <div class="lazyload-placeholder" style="height:100%">
              </div>
             </a>
            </div>
            <div class="section--itemcard_info">
             <div class="section--itemcard_info_major">
              <div class="area--itemcard_title">
               <span class="text--itemcard_title ellipsis">
                [ahref]
                
               </span>
              </div>
              <div class="area--itemcard_price">
               <span class="price_seller">
                <span class="for-a11y">
                 상품금액
                </span>
                <strong class="text--price_seller">
                 8,900
                </strong>
                <span class="text--unit">
                 원
                </span>
               </span>
              </div>
             </div>
             <div class="section--itemcard_info_add">
              <ul class="list--addinfo">
               <li class="item">
                <span class="text--addinfo">
                 무료배송
                </span>
               </li>
              </ul>
             </div>
             <div class="section--itemcard_info_score">
              <ul class="list--score">
               <li class="item reviewcnt">
                <span class="text--reviewcnt">
                 상품평
                 4
                </span>
                <span class="for-a11y">
                 건
                </span>
               </li>
               <li class="item buycnt">
                <span class="text--buycnt">
                 구매
                 25
                </span>
                <span class="for-a11y">
                 건
                </span>
               </li>
              </ul>
             </div>
             <div class="section--itemcard_info_shop">
              [linkx]
              
              <span class="for-a11y">
               판매자평가정보
              </span>
              <ul class="list--store_info">
               <li class="item">
                <span class="text--store_info">
                 배송
                </span>
               </li>
               <li class="item">
                <span class="text--store_info">
                 고객응대우수
                </span>
               </li>
              </ul>
             </div>
             <button class="button--favorite ">
              <span class="icon--favorite">
               <span class="for-a11y">
                관심상품 등록하기
               </span>
              </span>
             </button>
            </div>
           </div>
          </div>
         </div>
         <div class="component component--item_card type--general">
          <h4 class="text--module_title">
           일반상품 아이템카드
          </h4>
          <div class="itemcard">
           <div class="section--itemcard">
            <div class="section--itemcard_img">
             [ahref]
             
            </div>
            <div class="section--itemcard_info">
             <div class="section--itemcard_info_major">
              <div class="area--itemcard_title">
               <span class="text--itemcard_title ellipsis">
                [linkx]
                
               </span>
              </div>
              <div class="area--itemcard_price">
               <span class="price_seller">
                <span class="for-a11y">
                 상품금액
                </span>
                <strong class="text--price_seller">
                 11,900
                </strong>
                <span class="text--unit">
                 원
                </span>
               </span>
              </div>
             </div>
             <div class="section--itemcard_info_add">
              <ul class="list--addinfo">
               <li class="item">
                <span class="text--addinfo">
                 무료배송
                </span>
               </li>
              </ul>
             </div>
             <div class="section--itemcard_info_score">
              <ul class="list--score">
               <li class="item awards">
                <span class="for-a11y">
                 만족도
                 96
                 %입니다.
                </span>
                <div class="seller_awards" title="만족도 96 % 입니다">
                 <span class="awards_points" style="width:96%">
                 </span>
                 <span class="bg_star">
                 </span>
                </div>
               </li>
               <li class="item reviewcnt">
                <span class="text--reviewcnt">
                 상품평
                 1,185
                </span>
                <span class="for-a11y">
                 건
                </span>
               </li>
               <li class="item buycnt">
                <span class="text--buycnt">
                 구매
                 2,252
                </span>
                <span class="for-a11y">
                 건
                </span>
               </li>
              </ul>
             </div>
             <div class="section--itemcard_info_shop">
              [linkx]
              
              <span class="for-a11y">
               판매자평가정보
              </span>
              <ul class="list--store_info">
               <li class="item top_seller">
                <div class="section--advertisement ">
                 <button class="button--notice_about_advertisement" title="최우수판매자 안내 레이어 보기" type="button">
                  <span class="text">
                   최우수판매자
                  </span>
                 </button>
                 <div class="layer--information">
                  <strong class="text--information_title">
                   최우수판매자란?
                  </strong>
                  <p class="text--information_description">
                   옥션의 판매인증 평가기준을 모두 달성한 최상위 판매자
                  </p>
                  <button class="button--close_layer" type="button">
                   <span class="ir">
                    최우수판매자
                    안내 레이어 닫기
                   </span>
                  </button>
                 </div>
                </div>
               </li>
              </ul>
             </div>
             <button class="button--favorite ">
              <span class="icon--favorite">
               <span class="for-a11y">
                관심상품 등록하기
               </span>
              </span>
             </button>
             <button class="button--related_item" title="연관상품 12 개가 있습니다. ">
              <span class="text--related_item">
               <b class="text--title">
                연관상품
               </b>
               <b class="text--cnt">
                12
               </b>
              </span>
             </button>
            </div>
           </div>
          </div>
          <div class="popup--related_items ">
           <h2 class="section--title">
            <b>[area1][mkey1][symbolx][pkeyx][symbolx][area1][keyword1][bracketl1][area1][keywordx][bracketr1][symbolx][bracketl2][area1][keywordx][bracketr2][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx]</b>
           </h2>
           <div class="section--body">
            <div class="section--related_items">
             <div class="section--slick_area">
              <div class="list--related_items">
               <div class="slick-slider slick-initialized">
                <div class="slick-list">
                 <div class="slick-track" style="width:0%;left:NaN%">
                 </div>
                </div>
               </div>
              </div>
             </div>
            </div>
           </div>
          </div>
         </div>
         <div class="component component--item_card type--general">
          <h4 class="text--module_title">
           일반상품 아이템카드
          </h4>
          <div class="itemcard">
           <div class="section--itemcard">
            <div class="section--itemcard_img">
             [ahref]
             
            </div>
            <div class="section--itemcard_info">
             <div class="section--itemcard_info_major">
              <div class="area--itemcard_title">
               <span class="text--itemcard_title ellipsis">
                <a class="link--itemcard" href="/DetailView.aspx?itemno=B695049306" target="_blank">
                 <span class="for-a11y">
                  브랜드명
                 </span>
                 <span class="text--brand">
                 </span>
                 <span class="for-a11y">
                  상품명
                 </span>
                 <span class="text--title">
                  해남달콤한자연 공식매장 오픈 불맛나는 군고구마1kg
                 </span>
                </a>
               </span>
              </div>
              <div class="area--itemcard_price">
               <span class="discount" title="할인률">
                <strong class="text--discount">
                </strong>
                <span class="text--unit">
                </span>
                <span class="for-a11y">
                 할인
                </span>
               </span>
               <span class="price_seller">
                <span class="for-a11y">
                 할인적용금액
                </span>
                <strong class="text--price_seller">
                 7,860
                </strong>
                <span class="text--unit">
                 원
                </span>
               </span>
               <span class="price_original">
                <span class="for-a11y">
                 상품금액
                </span>
                <strong class="text--price_original">
                 7,900
                </strong>
                <span class="text--unit">
                 원
                </span>
               </span>
              </div>
             </div>
             <div class="section--itemcard_info_add">
              <ul class="list--addinfo">
               <li class="item">
                <span class="text--addinfo">
                 배송비 2,500원
                </span>
               </li>
              </ul>
             </div>
             <div class="section--itemcard_info_score">
              <ul class="list--score">
               <li class="item buycnt">
                <span class="text--buycnt">
                 구매
                 2
                </span>
                <span class="for-a11y">
                 건
                </span>
               </li>
              </ul>
             </div>
             <div class="section--itemcard_info_shop">
              [linkx]
              
             </div>
             <button class="button--favorite ">
              <span class="icon--favorite">
               <span class="for-a11y">
                관심상품 등록하기
               </span>
              </span>
             </button>
            </div>
           </div>
          </div>
         </div>
         <div class="component component--item_card type--general">
          <h4 class="text--module_title">
           일반상품 아이템카드
          </h4>
          <div class="itemcard">
           <div class="section--itemcard">
            <div class="section--itemcard_img">
             [linkx]
             
            </div>
            <div class="section--itemcard_info">
             <div class="section--itemcard_info_major">
              <div class="area--itemcard_title">
               <span class="text--itemcard_title ellipsis">
                [linkx]
                
               </span>
              </div>
              <div class="area--itemcard_price">
               <span class="price_seller">
                <span class="for-a11y">
                 상품금액
                </span>
                <strong class="text--price_seller">
                 13,800
                </strong>
                <span class="text--unit">
                 원[area1][keywordx][symbolx][area1][keywordx][symbolx][bracketl9][area1][keywordx][bracketr9][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][mkey1][pkeyx][linkx][area1][keywordx][symbolx][area1][keywordx][symbolx][bracketl10][area1][keywordx][bracketr10][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][mkey1][ahref][area1][mkey1][linkx][pkeyx][pkeyx][ahref][area1][keywordx][symbolx][area1][keywordx][symbolx][bracketl11][area1][keywordx][bracketr11][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][bracketl12][area1][keywordx][bracketr12][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][bracketl13][area1][keywordx][bracketr13][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][pkeyx][ahref][area1][keywordx][linkx][area1][mkey1]
                </span>
               </span>
              </div>
             </div>
             <div class="section--itemcard_info_add">
              <ul class="list--addinfo">
               <li class="item">
                <span class="text--addinfo">
                 배송비 3,000원
                </span>
               </li>
              </ul>
             </div>
             <div class="section--itemcard_info_score">
              <ul class="list--score">
               <li class="item awards">
                <span class="for-a11y">
                 만족도
                 98
                 %입니다.
                </span>
                <div class="seller_awards" title="만족도 98 % 입니다">
                 <span class="awards_points" style="width:98%">
                 </span>
                 <span class="bg_star">
                 </span>
                </div>
               </li>
               <li class="item reviewcnt">
                <span class="text--reviewcnt">
                 상품평
                 48
                </span>
                <span class="for-a11y">
                 건
                </span>
               </li>
               <li class="item buycnt">
                <span class="text--buycnt">
                 구매
                 124
                </span>
                <span class="for-a11y">
                 건
                </span>
               </li>
              </ul>
             </div>
             <div class="section--itemcard_info_shop">
              [ahref]
              
              <span class="for-a11y">
               판매자평가정보
              </span>
              <ul class="list--store_info">
               <li class="item top_seller">
                <div class="section--advertisement ">
                 <button class="button--notice_about_advertisement" title="최우수판매자 안내 레이어 보기" type="button">
                  <span class="text">
                   최우수판매자
                  </span>
                 </button>
                 <div class="layer--information">
                  <strong class="text--information_title">
                   최우수판매자란?
                  </strong>
                  <p class="text--information_description">
                   옥션의 판매인증 평가기준을 모두 달성한 최상위 판매자
                  </p>
                  <button class="button--close_layer" type="button">
                   <span class="ir">
                    최우수판매자
                    안내 레이어 닫기
                   </span>
                  </button>
                 </div>
                </div>
               </li>
              </ul>
             </div>
             <button class="button--favorite ">
              <span class="icon--favorite">
               <span class="for-a11y">
                관심상품 등록하기
               </span>
              </span>
             </button>
             <button class="button--related_item" title="연관상품 4 개가 있습니다. ">
              <span class="text--related_item">
               <b class="text--title">
                연관상품
               </b>
               <b class="text--cnt">
                4
               </b>
              </span>
             </button>
            </div>
           </div>
          </div>
          <div class="popup--related_items ">
           <h2 class="section--title">
            <b>[area1][mkey1][symbolx][pkeyx][symbolx][area1][keyword1][bracketl1][area1][keywordx][bracketr1][symbolx][bracketl2][area1][keywordx][bracketr2][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx]</b>
           </h2>
           <div class="section--body">
            <div class="section--related_items">
             <div class="section--slick_area">
              <div class="list--related_items">
               <div class="slick-slider slick-initialized">
                <div class="slick-list">
                 <div class="slick-track" style="width:0%;left:NaN%">
                 </div>
                </div>
               </div>
              </div>
             </div>
            </div>
           </div>
          </div>
         </div>
         <div class="component component--item_card type--general">
          <h4 class="text--module_title">
           일반상품 아이템카드
          </h4>
          <div class="itemcard">
           <div class="section--itemcard">
            <div class="section--itemcard_img">
             <a class="link--itemcard image--loading" href="/DetailView.aspx?itemno=A642928739" target="_blank">
              <div class="lazyload-placeholder" style="height:100%">
              </div>
             </a>
            </div>
            <div class="section--itemcard_info">
             <div class="section--itemcard_info_major">
              <div class="area--itemcard_title">
               <span class="text--itemcard_title ellipsis">
                [ahref]
                
               </span>
              </div>
              <div class="area--itemcard_price">
               <span class="price_seller">
                <span class="for-a11y">
                 상품금액
                </span>
                <strong class="text--price_seller">
                 15,900
                </strong>
                <span class="text--unit">
                 원
                </span>
               </span>
              </div>
             </div>
             <div class="section--itemcard_info_add">
              <ul class="list--addinfo">
               <li class="item">
                <span class="text--addinfo">
                 무료배송
                </span>
               </li>
              </ul>
             </div>
             <div class="section--itemcard_info_score">
              <ul class="list--score">
               <li class="item awards">
                <span class="for-a11y">
                 만족도
                 92
                 %입니다.
                </span>
                <div class="seller_awards" title="만족도 92 % 입니다">
                 <span class="awards_points" style="width:92%">
                 </span>
                 <span class="bg_star">
                 </span>
                </div>
               </li>
               <li class="item reviewcnt">
                <span class="text--reviewcnt">
                 상품평
                 3,986
                </span>
                <span class="for-a11y">
                 건
                </span>
               </li>
               <li class="item buycnt">
                <span class="text--buycnt">
                 구매
                 23,052
                </span>
                <span class="for-a11y">
                 건
                </span>
               </li>
              </ul>
             </div>
             <div class="section--itemcard_info_shop">
              <a class="link--shop" href="/prndeul" target="_blank" title="스토어로 이동">
               <span class="for-a11y">
                판매자
               </span>
               <span class="text">
                푸른들사랑
               </span>
              </a>
             </div>
             <button class="button--favorite ">
              <span class="icon--favorite">
               <span class="for-a11y">
                관심상품 등록하기
               </span>
              </span>
             </button>
            </div>
           </div>
          </div>
         </div>
        </div>
        <div class="section--module_wrap" module-design-id="17">
         <div class="component component--item_card type--general">
          <h4 class="text--module_title">
           일반상품 아이템카드
          </h4>
          <div class="itemcard">
           <div class="section--itemcard">
            <div class="section--itemcard_img">
             <a class="link--itemcard image--loading" href="/DetailView.aspx?itemno=B329390145" target="_blank">
              <div class="lazyload-placeholder" style="height:100%">
              </div>
             </a>
            </div>
            <div class="section--itemcard_info">
             <div class="section--itemcard_info_major">
              <div class="area--itemcard_title">
               <span class="text--itemcard_title ellipsis">
                <a class="link--itemcard" href="/DetailView.aspx?itemno=B329390145" target="_blank">
                 <span class="for-a11y">
                  브랜드명
                 </span>
                 <span class="text--brand">
                  오뚜기
                 </span>
                 <span class="for-a11y">
                  상품명
                 </span>
                 <span class="text--title">
                  오뚜기 고구마 크러스트1kg / 고구마무스 / 피자용
                 </span>
                </a>
               </span>
              </div>
              <div class="area--itemcard_price">
               <span class="price_seller">
                <span class="for-a11y">
                 상품금액
                </span>
                <strong class="text--price_seller">
                 4,900
                </strong>
                <span class="text--unit">
                 원
                </span>
               </span>
              </div>
             </div>
             <div class="section--itemcard_info_add">
              <ul class="list--addinfo">
               <li class="item">
                <span class="text--addinfo">
                 배송비 2,500원
                </span>
               </li>
              </ul>
             </div>
             <div class="section--itemcard_info_score">
              <ul class="list--score">
               <li class="item awards">
                <span class="for-a11y">
                 만족도
                 100
                 %입니다.
                </span>
                <div class="seller_awards" title="만족도 100 % 입니다">
                 <span class="awards_points" style="width:100%">
                 </span>
                 <span class="bg_star">
                 </span>
                </div>
               </li>
               <li class="item reviewcnt">
                <span class="text--reviewcnt">
                 상품평
                 169
                </span>
                <span class="for-a11y">
                 건
                </span>
               </li>
               <li class="item buycnt">
                <span class="text--buycnt">
                 구매
                 2,784
                </span>
                <span class="for-a11y">
                 건
                </span>
               </li>
              </ul>
             </div>
             <div class="section--itemcard_info_shop">
              <a class="link--shop" href="/kangmarie" target="_blank" title="스토어로 이동">
               <span class="for-a11y">
                판매자
               </span>
               <span class="text">
                엄마밥상
               </span>
              </a>
              <span class="for-a11y">
               판매자평가정보
              </span>
              <ul class="list--store_info">
               <li class="item top_seller">
                <div class="section--advertisement ">
                 <button class="button--notice_about_advertisement" title="최우수판매자 안내 레이어 보기" type="button">
                  <span class="text">
                   최우수판매자
                  </span>
                 </button>
                 <div class="layer--information">
                  <strong class="text--information_title">
                   최우수판매자란?
                  </strong>
                  <p class="text--information_description">
                   옥션의 판매인증 평가기준을 모두 달성한 최상위 판매자
                  </p>
                  <button class="button--close_layer" type="button">
                   <span class="ir">
                    최우수판매자
                    안내 레이어 닫기
                   </span>
                  </button>
                 </div>
                </div>
               </li>
              </ul>
             </div>
             <button class="button--favorite ">
              <span class="icon--favorite">
               <span class="for-a11y">
                관심상품 등록하기
               </span>
              </span>
             </button>
            </div>
           </div>
          </div>
         </div>
         <div class="component component--item_card type--general">
          <h4 class="text--module_title">
           일반상품 아이템카드
          </h4>
          <div class="itemcard">
           <div class="section--itemcard">
            <div class="section--itemcard_img">
             <a class="link--itemcard image--loading" href="/DetailView.aspx?itemno=B567894060" target="_blank">
              <div class="lazyload-placeholder" style="height:100%">
              </div>
             </a>
            </div>
            <div class="section--itemcard_info">
             <div class="section--itemcard_info_major">
              <div class="area--itemcard_title">
               <span class="text--itemcard_title ellipsis">
                <a class="link--itemcard" href="/DetailView.aspx?itemno=B567894060" target="_blank">
                 <span class="for-a11y">
                  브랜드명
                 </span>
                 <span class="text--brand">
                 </span>
                 <span class="for-a11y">
                  상품명
                 </span>
                 <span class="text--title">
                  고구마 3kg 꿀고구마 (특상중)
                 </span>
                </a>
               </span>
              </div>
              <div class="area--itemcard_price">
               <span class="discount" title="할인률">
                <strong class="text--discount">
                 15
                </strong>
                <span class="text--unit">
                 %
                </span>
                <span class="for-a11y">
                 할인
                </span>
               </span>
               <span class="price_seller">
                <span class="for-a11y">
                 할인적용금액
                </span>
                <strong class="text--price_seller">
                 10,900
                </strong>
                <span class="text--unit">
                 원
                </span>
               </span>
               <span class="price_original">
                <span class="for-a11y">
                 상품금액
                </span>
                <strong class="text--price_original">
                 12,900
                </strong>
                <span class="text--unit">
                 원
                </span>
               </span>
              </div>
             </div>
             <div class="section--itemcard_info_add">
              <ul class="list--addinfo">
               <li class="item">
                <span class="text--addinfo">
                 무료배송
                </span>
               </li>
              </ul>
             </div>
             <div class="section--itemcard_info_score">
              <ul class="list--score">
               <li class="item awards">
                <span class="for-a11y">
                 만족도
                 100
                 %입니다.
                </span>
                <div class="seller_awards" title="만족도 100 % 입니다">
                 <span class="awards_points" style="width:100%">
                 </span>
                 <span class="bg_star">
                 </span>
                </div>
               </li>
               <li class="item reviewcnt">
                <span class="text--reviewcnt">
                 상품평
                 7
                </span>
                <span class="for-a11y">
                 건
                </span>
               </li>
               <li class="item buycnt">
                <span class="text--buycnt">
                 구매
                 24
                </span>
                <span class="for-a11y">
                 건
                </span>
               </li>
              </ul>
             </div>
             <div class="section--itemcard_info_shop">
              [ahref]
              
              <span class="for-a11y">
               판매자평가정보
              </span>
              <ul class="list--store_info">
               <li class="item top_seller">
                <div class="section--advertisement ">
                 <button class="button--notice_about_advertisement" title="최우수판매자 안내 레이어 보기" type="button">
                  <span class="text">
                   최우수판매자
                  </span>
                 </button>
                 <div class="layer--information">
                  <strong class="text--information_title">
                   최우수판매자란?
                  </strong>
                  <p class="text--information_description">
                   옥션의 판매인증 평가기준을 모두 달성한 최상위 판매자
                  </p>
                  <button class="button--close_layer" type="button">
                   <span class="ir">
                    최우수판매자
                    안내 레이어 닫기
                   </span>
                  </button>
                 </div>
                </div>
               </li>
              </ul>
             </div>
             <button class="button--favorite ">
              <span class="icon--favorite">
               <span class="for-a11y">
                관심상품 등록하기
               </span>
              </span>
             </button>
             <button class="button--related_item" title="연관상품 9 개가 있습니다. ">
              <span class="text--related_item">
               <b class="text--title">
                연관상품
               </b>
               <b class="text--cnt">
                9
               </b>
              </span>
             </button>
            </div>
           </div>
          </div>
          <div class="popup--related_items ">
           <h2 class="section--title">
            <b>[area1][mkey1][symbolx][pkeyx][symbolx][area1][keyword1][bracketl1][area1][keywordx][bracketr1][symbolx][bracketl2][area1][keywordx][bracketr2][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx]</b>
           </h2>
           <div class="section--body">
            <div class="section--related_items">
             <div class="section--slick_area">
              <div class="list--related_items">
               <div class="slick-slider slick-initialized">
                <div class="slick-list">
                 <div class="slick-track" style="width:0%;left:NaN%">
                 </div>
                </div>
               </div>
              </div>
             </div>
            </div>
           </div>
          </div>
         </div>
         <div class="component component--item_card type--general">
          <h4 class="text--module_title">
           일반상품 아이템카드
          </h4>
          <div class="itemcard">
           <div class="section--itemcard">
            <div class="section--itemcard_img">
             <a class="link--itemcard image--loading" href="/DetailView.aspx?itemno=B215333364" target="_blank">
              <div class="lazyload-placeholder" style="height:100%">
              </div>
             </a>
            </div>
            <div class="section--itemcard_info">
             <div class="section--itemcard_info_major">
              <div class="area--itemcard_title">
               <span class="text--itemcard_title ellipsis">
                <a class="link--itemcard" href="/DetailView.aspx?itemno=B215333364" target="_blank">
                 <span class="for-a11y">
                  브랜드명
                 </span>
                 <span class="text--brand">
                 </span>
                 <span class="for-a11y">
                  상품명
                 </span>
                 <span class="text--title">
                  국산 아이스 꿀고구마 군고구마 전자렌지1분 OK 1kg B
                 </span>
                </a>
               </span>
              </div>
              <div class="area--itemcard_price">
               <span class="price_seller">
                <span class="for-a11y">
                 상품금액
                </span>
                <strong class="text--price_seller">
                 12,800
                </strong>
                <span class="text--unit">
                 원
                </span>
               </span>
              </div>
             </div>
             <div class="section--itemcard_info_add">
              <ul class="list--addinfo">
               <li class="item">
                <span class="text--addinfo">
                 배송비 3,000원
                </span>
               </li>
              </ul>
             </div>
             <div class="section--itemcard_info_score">
              <ul class="list--score">
               <li class="item awards">
                <span class="for-a11y">
                 만족도
                 98
                 %입니다.
                </span>
                <div class="seller_awards" title="만족도 98 % 입니다">
                 <span class="awards_points" style="width:98%">
                 </span>
                 <span class="bg_star">
                 </span>
                </div>
               </li>
               <li class="item reviewcnt">
                <span class="text--reviewcnt">
                 상품평
                 290
                </span>
                <span class="for-a11y">
                 건
                </span>
               </li>
               <li class="item buycnt">
                <span class="text--buycnt">
                 구매
                 1,409
                </span>
                <span class="for-a11y">
                 건
                </span>
               </li>
              </ul>
             </div>
             <div class="section--itemcard_info_shop">
              <a class="link--shop" href="/jigumaul" target="_blank" title="스토어로 이동">
               <span class="for-a11y">
                판매자
               </span>
               <span class="text">
                지구마을
               </span>
              </a>
              <span class="for-a11y">
               판매자평가정보
              </span>
              <ul class="list--store_info">
               <li class="item top_seller">
                <div class="section--advertisement ">
                 <button class="button--notice_about_advertisement" title="최우수판매자 안내 레이어 보기" type="button">
                  <span class="text">
                   최우수판매자
                  </span>
                 </button>
                 <div class="layer--information">
                  <strong class="text--information_title">
                   최우수판매자란?
                  </strong>
                  <p class="text--information_description">
                   옥션의 판매인증 평가기준을 모두 달성한 최상위 판매자
                  </p>
                  <button class="button--close_layer" type="button">
                   <span class="ir">
                    최우수판매자
                    안내 레이어 닫기
                   </span>
                  </button>
                 </div>
                </div>
               </li>
              </ul>
             </div>
             <button class="button--favorite ">
              <span class="icon--favorite">
               <span class="for-a11y">
                관심상품 등록하기
               </span>
              </span>
             </button>
             <button class="button--related_item" title="연관상품 4 개가 있습니다. ">
              <span class="text--related_item">
               <b class="text--title">
                연관상품
               </b>
               <b class="text--cnt">
                4
               </b>
              </span>
             </button>
            </div>
           </div>
          </div>
          <div class="popup--related_items ">
           <h2 class="section--title">
            [area1][mkey1][symbolx][pkeyx][symbolx][area1][keyword1][bracketl1][area1][keywordx][bracketr1][symbolx][bracketl2][area1][keywordx][bracketr2][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx]
           </h2>
           <div class="section--body">
            <div class="section--related_items">
             <div class="section--slick_area">
              <div class="list--related_items">
               <div class="slick-slider slick-initialized">
                <div class="slick-list">
                 <div class="slick-track" style="width:0%;left:NaN%">
                 </div>
                </div>
               </div>
              </div>
             </div>
            </div>
           </div>
          </div>
         </div>
         <div class="component component--item_card type--general">
          <h4 class="text--module_title">
           일반상품 아이템카드
          </h4>
          <div class="itemcard">
           <div class="section--itemcard">
            <div class="section--itemcard_img">
             [ahref]
             
            </div>
            <div class="section--itemcard_info">
             <div class="section--itemcard_info_major">
              <div class="area--itemcard_title">
               <span class="text--itemcard_title ellipsis">
                [ahref]
                
               </span>
              </div>
              <div class="area--itemcard_price">
               <span class="price_seller">
                <span class="for-a11y">
                 상품금액
                </span>
                <strong class="text--price_seller">
                 25,900
                </strong>
                <span class="text--unit">
                 원
                </span>
               </span>
              </div>
             </div>
             <div class="section--itemcard_info_add">
              <ul class="list--addinfo">
               <li class="item">
                <span class="text--addinfo">
                 무료배송
                </span>
               </li>
              </ul>
             </div>
             <div class="section--itemcard_info_score">
              <ul class="list--score">
               <li class="item awards">
                <span class="for-a11y">
                 만족도
                 94
                 %입니다.
                </span>
                <div class="seller_awards" title="만족도 94 % 입니다">
                 <span class="awards_points" style="width:94%">
                 </span>
                 <span class="bg_star">
                 </span>
                </div>
               </li>
               <li class="item reviewcnt">
                <span class="text--reviewcnt">
                 상품평
                 2,816
                </span>
                <span class="for-a11y">
                 건
                </span>
               </li>
               <li class="item buycnt">
                <span class="text--buycnt">
                 구매
                 48,595
                </span>
                <span class="for-a11y">
                 건
                </span>
               </li>
              </ul>
             </div>
             <div class="section--itemcard_info_shop">
              <a class="link--shop" href="/orgastore" target="_blank" title="스토어로 이동">
               <span class="for-a11y">
                판매자
               </span>
               <span class="text">
                62스토어
               </span>
              </a>
              <span class="for-a11y">
               판매자평가정보
              </span>
              <ul class="list--store_info">
               <li class="item top_seller">
                <div class="section--advertisement ">
                 <button class="button--notice_about_advertisement" title="최우수판매자 안내 레이어 보기" type="button">
                  <span class="text">
                   최우수판매자
                  </span>
                 </button>
                 <div class="layer--information">
                  <strong class="text--information_title">
                   최우수판매자란?
                  </strong>
                  <p class="text--information_description">
                   옥션의 판매인증 평가기준을 모두 달성한 최상위 판매자
                  </p>
                  <button class="button--close_layer" type="button">
                   <span class="ir">
                    최우수판매자
                    안내 레이어 닫기
                   </span>
                  </button>
                 </div>
                </div>
               </li>
              </ul>
             </div>
             <button class="button--favorite ">
              <span class="icon--favorite">
               <span class="for-a11y">
                관심상품 등록하기
               </span>
              </span>
             </button>
            </div>
           </div>
          </div>
         </div>
         <div class="component component--item_card type--general">
          <h4 class="text--module_title">
           일반상품 아이템카드
          </h4>
          <div class="itemcard">
           <div class="section--itemcard">
            <div class="section--itemcard_img">
             <a class="link--itemcard image--loading" href="/DetailView.aspx?itemno=B382582986" target="_blank">
              <div class="lazyload-placeholder" style="height:100%">
              </div>
             </a>
            </div>
            <div class="section--itemcard_info">
             <div class="section--itemcard_info_major">
              <div class="area--itemcard_title">
               <span class="text--itemcard_title ellipsis">
                [linkx]
                
               </span>
              </div>
              <div class="area--itemcard_price">
               <span class="price_seller">
                <span class="for-a11y">
                 상품금액
                </span>
                <strong class="text--price_seller">
                 19,900
                </strong>
                <span class="text--unit">
                 원
                </span>
               </span>
              </div>
             </div>
             <div class="section--itemcard_info_add">
              <ul class="list--addinfo">
               <li class="item">
                <span class="text--addinfo">
                 무료배송
                </span>
               </li>
              </ul>
             </div>
             <div class="section--itemcard_info_score">
              [area1][mkey1]<li>[area1][keywordx][symbolx][area1][keywordx][symbolx][bracketl2][area1][keywordx][bracketr2][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx]</li><li>[area1][mkey1]</li>[area1][mkey1]<li>[ahref]</li>
             </div>
             <div class="section--itemcard_info_shop">
              [linkx]
              
              <span class="for-a11y">
               판매자평가정보
              </span>
              <ul class="list--store_info">
               <li class="item top_seller">
                <div class="section--advertisement ">
                 <button class="button--notice_about_advertisement" title="최우수판매자 안내 레이어 보기" type="button">
                  <span class="text">
                   최우수판매자
                  </span>
                 </button>
                 <div class="layer--information">
                  <strong class="text--information_title">
                   최우수판매자란?
                  </strong>
                  <p class="text--information_description">
                   옥션의 판매인증 평가기준을 모두 달성한 최상위 판매자
                  </p>
                  <button class="button--close_layer" type="button">
                   <span class="ir">
                    최우수판매자
                    안내 레이어 닫기
                   </span>
                  </button>
                 </div>
                </div>
               </li>
              </ul>
             </div>
             <button class="button--favorite ">
              <span class="icon--favorite">
               <span class="for-a11y">
                관심상품 등록하기
               </span>
              </span>
             </button>
            </div>
           </div>
          </div>
         </div>
         <div class="component component--item_card type--general">
          <h4 class="text--module_title">
           일반상품 아이템카드
          </h4>
          <div class="itemcard">
           <div class="section--itemcard">
            <div class="section--itemcard_img">
             <a class="link--itemcard image--loading" href="/DetailView.aspx?itemno=B515249029" target="_blank">
              <div class="lazyload-placeholder" style="height:100%">
              </div>
             </a>
            </div>
            <div class="section--itemcard_info">
             <div class="section--itemcard_info_major">
              <div class="area--itemcard_title">
               <span class="text--itemcard_title ellipsis">
                <a class="link--itemcard" href="/DetailView.aspx?itemno=B515249029" target="_blank">
                 <span class="for-a11y">
                  브랜드명
                 </span>
                 <span class="text--brand">
                 </span>
                 <span class="for-a11y">
                  상품명
                 </span>
                 <span class="text--title">
                  해남 고구마 말랭이
                 </span>
                </a>
               </span>
              </div>
              <div class="area--itemcard_price">
               <span class="price_seller">
                <span class="for-a11y">
                 상품금액
                </span>
                <strong class="text--price_seller">
                 990
                </strong>
                <span class="text--unit">
                 원
                </span>
               </span>
              </div>
             </div>
             <div class="section--itemcard_info_add">
              <ul class="list--addinfo">
               <li class="item">
                <span class="text--addinfo">
                 배송비 2,500원
                </span>
               </li>
              </ul>
             </div>
             <div class="section--itemcard_info_score">
              <ul class="list--score">
               <li class="item awards">
                <span class="for-a11y">
                 만족도
                 100
                 %입니다.
                </span>
                <div class="seller_awards" title="만족도 100 % 입니다">
                 <span class="awards_points" style="width:100%">
                 </span>
                 <span class="bg_star">
                 </span>
                </div>
               </li>
               <li class="item reviewcnt">
                <span class="text--reviewcnt">
                 상품평
                 2
                </span>
                <span class="for-a11y">
                 건
                </span>
               </li>
               <li class="item buycnt">
                <span class="text--buycnt">
                 구매
                 288
                </span>
                <span class="for-a11y">
                 건
                </span>
               </li>
              </ul>
             </div>
             <div class="section--itemcard_info_shop">
              <a class="link--shop" href="/nong4" target="_blank" title="스토어로 이동">
               <span class="for-a11y">
                판매자
               </span>
               <span class="text">
                조은해남
               </span>
              </a>
              <span class="for-a11y">
               판매자평가정보
              </span>
              <ul class="list--store_info">
               <li class="item top_seller">
                <div class="section--advertisement ">
                 <button class="button--notice_about_advertisement" title="최우수판매자 안내 레이어 보기" type="button">
                  <span class="text">
                   최우수판매자
                  </span>
                 </button>
                 <div class="layer--information">
                  <strong class="text--information_title">
                   최우수판매자란?
                  </strong>
                  <p class="text--information_description">
                   옥션의 판매인증 평가기준을 모두 달성한 최상위 판매자
                  </p>
                  <button class="button--close_layer" type="button">
                   <span class="ir">
                    최우수판매자
                    안내 레이어 닫기
                   </span>
                  </button>
                 </div>
                </div>
               </li>
              </ul>
             </div>
             <button class="button--favorite ">
              <span class="icon--favorite">
               <span class="for-a11y">
                관심상품 등록하기
               </span>
              </span>
             </button>
            </div>
           </div>
          </div>
         </div>
         <div class="component component--item_card type--general">
          <h4 class="text--module_title">
           일반상품 아이템카드
          </h4>
          <div class="itemcard">
           <div class="section--itemcard">
            <div class="section--itemcard_img">
             [linkx]
             
            </div>
            <div class="section--itemcard_info">
             <div class="section--itemcard_info_major">
              <div class="area--itemcard_title">
               <span class="text--itemcard_title ellipsis">
                <a class="link--itemcard" href="/DetailView.aspx?itemno=B280283561" target="_blank">
                 <span class="for-a11y">
                  브랜드명
                 </span>
                 <span class="text--brand">
                 </span>
                 <span class="for-a11y">
                  상품명
                 </span>
                 <span class="text--title">
                  (해남미소)영양간식 한입에반한 고구마말랭이 10봉
                 </span>
                </a>
               </span>
              </div>
              <div class="area--itemcard_price">
               <span class="price_seller">
                <span class="for-a11y">
                 상품금액
                </span>
                <strong class="text--price_seller">
                 15,500
                </strong>
                <span class="text--unit">
                 원
                </span>
               </span>
              </div>
             </div>
             <div class="section--itemcard_info_add">
              <ul class="list--addinfo">
               [pkeyx]<li>[ahref]</li><li>[pkeyx]</li>
              </ul>
             </div>
             <div class="section--itemcard_info_score">
              <ul class="list--score">
               <li class="item awards">
                <span class="for-a11y">
                 만족도
                 96
                 %입니다.
                </span>
                <div class="seller_awards" title="만족도 96 % 입니다">
                 <span class="awards_points" style="width:96%">
                 </span>
                 <span class="bg_star">
                 </span>
                </div>
               </li>
               <li class="item reviewcnt">
                <span class="text--reviewcnt">
                 상품평
                 3,215
                </span>
                <span class="for-a11y">
                 건
                </span>
               </li>
               <li class="item buycnt">
                <span class="text--buycnt">
                 구매
                 10,411
                </span>
                <span class="for-a11y">
                 건
                </span>
               </li>
              </ul>
             </div>
             <div class="section--itemcard_info_shop">
              [ahref]
              
              <span class="for-a11y">
               판매자평가정보
              </span>
              <ul class="list--store_info">
               <li class="item top_seller">
                <div class="section--advertisement ">
                 <button class="button--notice_about_advertisement" title="최우수판매자 안내 레이어 보기" type="button">
                  <span class="text">
                   최우수판매자
                  </span>
                 </button>
                 <div class="layer--information">
                  <strong class="text--information_title">
                   최우수판매자란?
                  </strong>
                  <p class="text--information_description">
                   옥션의 판매인증 평가기준을 모두 달성한 최상위 판매자
                  </p>
                  <button class="button--close_layer" type="button">
                   <span class="ir">
                    최우수판매자
                    안내 레이어 닫기
                   </span>
                  </button>
                 </div>
                </div>
               </li>
              </ul>
             </div>
             <button class="button--favorite ">
              <span class="icon--favorite">
               <span class="for-a11y">
                관심상품 등록하기
               </span>
              </span>
             </button>
            </div>
           </div>
          </div>
         </div>
         <div class="component component--item_card type--general">
          <h4 class="text--module_title">
           일반상품 아이템카드
          </h4>
          <div class="itemcard">
           <div class="section--itemcard">
            <div class="section--itemcard_img">
             <a class="link--itemcard image--loading" href="/DetailView.aspx?itemno=B407163285" target="_blank">
              <div class="lazyload-placeholder" style="height:100%">
              </div>
             </a>
            </div>
            <div class="section--itemcard_info">
             <div class="section--itemcard_info_major">
              <div class="area--itemcard_title">
               <span class="text--itemcard_title ellipsis">
                [linkx]
                
               </span>
              </div>
              <div class="area--itemcard_price">
               <span class="price_seller">
                <span class="for-a11y">
                 상품금액
                </span>
                <strong class="text--price_seller">
                 9,900
                </strong>
                <span class="text--unit">
                 원
                </span>
               </span>
              </div>
             </div>
             <div class="section--itemcard_info_add">
              <ul class="list--addinfo">
               <li class="item">
                <span class="text--addinfo">
                 무료배송
                </span>
               </li>
              </ul>
             </div>
             <div class="section--itemcard_info_score">
              <ul class="list--score">
               <li class="item awards">
                <span class="for-a11y">
                 만족도
                 90
                 %입니다.
                </span>
                <div class="seller_awards" title="만족도 90 % 입니다">
                 <span class="awards_points" style="width:90%">
                 </span>
                 <span class="bg_star">
                 </span>
                </div>
               </li>
               <li class="item reviewcnt">
                <span class="text--reviewcnt">
                 상품평
                 486
                </span>
                <span class="for-a11y">
                 건
                </span>
               </li>
               <li class="item buycnt">
                <span class="text--buycnt">
                 구매
                 956
                </span>
                <span class="for-a11y">
                 건
                </span>
               </li>
              </ul>
             </div>
             <div class="section--itemcard_info_shop">
              [ahref]
              
              <span class="for-a11y">
               판매자평가정보
              </span>
              <ul class="list--store_info">
               <li class="item top_seller">
                <div class="section--advertisement ">
                 <button class="button--notice_about_advertisement" title="최우수판매자 안내 레이어 보기" type="button">
                  <span class="text">
                   최우수판매자
                  </span>
                 </button>
                 <div class="layer--information">
                  <strong class="text--information_title">
                   최우수판매자란?
                  </strong>
                  <p class="text--information_description">
                   옥션의 판매인증 평가기준을 모두 달성한 최상위 판매자
                  </p>
                  <button class="button--close_layer" type="button">
                   <span class="ir">
                    최우수판매자
                    안내 레이어 닫기
                   </span>
                  </button>
                 </div>
                </div>
               </li>
              </ul>
             </div>
             <button class="button--favorite ">
              <span class="icon--favorite">
               <span class="for-a11y">
                관심상품 등록하기
               </span>
              </span>
             </button>
            </div>
           </div>
          </div>
         </div>
         <div class="component component--item_card type--general">
          <h4 class="text--module_title">
           일반상품 아이템카드
          </h4>
          <div class="itemcard">
           <div class="section--itemcard">
            <div class="section--itemcard_img">
             <a class="link--itemcard image--loading" href="/DetailView.aspx?itemno=B331811682" target="_blank">
              <div class="lazyload-placeholder" style="height:100%">
              </div>
             </a>
            </div>
            <div class="section--itemcard_info">
             <div class="section--itemcard_info_major">
              <div class="area--itemcard_title">
               <span class="text--itemcard_title ellipsis">
                [linkx]
                
               </span>
              </div>
              <div class="area--itemcard_price">
               <span class="price_seller">
                <span class="for-a11y">
                 상품금액
                </span>
                <strong class="text--price_seller">
                 14,900
                </strong>
                <span class="text--unit">
                 원
                </span>
               </span>
              </div>
             </div>
             <div class="section--itemcard_info_add">
              <ul class="list--addinfo">
               <li class="item">
                <span class="text--addinfo">
                 무료배송
                </span>
               </li>
              </ul>
             </div>
             <div class="section--itemcard_info_score">
              <ul class="list--score">
               <li class="item awards">
                <span class="for-a11y">
                 만족도
                 94
                 %입니다.
                </span>
                <div class="seller_awards" title="만족도 94 % 입니다">
                 <span class="awards_points" style="width:94%">
                 </span>
                 <span class="bg_star">
                 </span>
                </div>
               </li>
               <li class="item reviewcnt">
                <span class="text--reviewcnt">
                 상품평
                 23
                </span>
                <span class="for-a11y">
                 건
                </span>
               </li>
               <li class="item buycnt">
                <span class="text--buycnt">
                 구매
                 81
                </span>
                <span class="for-a11y">
                 건
                </span>
               </li>
              </ul>
             </div>
             <div class="section--itemcard_info_shop">
              [linkx]
              
              <span class="for-a11y">
               판매자평가정보
              </span>
              <ul class="list--store_info">
               <li class="item top_seller">
                <div class="section--advertisement ">
                 <button class="button--notice_about_advertisement" title="최우수판매자 안내 레이어 보기" type="button">
                  <span class="text">
                   최우수판매자
                  </span>
                 </button>
                 <div class="layer--information">
                  <strong class="text--information_title">
                   최우수판매자란?
                  </strong>
                  <p class="text--information_description">
                   옥션의 판매인증 평가기준을 모두 달성한 최상위 판매자
                  </p>
                  <button class="button--close_layer" type="button">
                   <span class="ir">
                    최우수판매자
                    안내 레이어 닫기
                   </span>
                  </button>
                 </div>
                </div>
               </li>
              </ul>
             </div>
             <button class="button--favorite ">
              <span class="icon--favorite">
               <span class="for-a11y">
                관심상품 등록하기
               </span>
              </span>
             </button>
            </div>
           </div>
          </div>
         </div>
         <div class="component component--item_card type--general">
          <h4 class="text--module_title">
           일반상품 아이템카드
          </h4>
          <div class="itemcard">
           <div class="section--itemcard">
            <div class="section--itemcard_img">
             [linkx]
             
            </div>
            <div class="section--itemcard_info">
             <div class="section--itemcard_info_major">
              <div class="area--itemcard_title">
               <span class="text--itemcard_title ellipsis">
                <a class="link--itemcard" href="/DetailView.aspx?itemno=B286465873" target="_blank">
                 <span class="for-a11y">
                  브랜드명 [pkeyx][area1][keywordx][area1][keywordx][symbolx][area1][keywordx][symbolx][bracketl2][area1][keywordx][bracketr2][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][pkeyx][area1][keywordx][area1][keywordx][pkeyx][area1][keywordx][area1][mkey1][pkeyx][ahref][area1][mkey1][area1][mkey1][area1][mkey1][area1][keywordx][symbolx][area1][keywordx][symbolx][bracketl3][area1][keywordx][bracketr3][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx]
                 </span>
                 <span class="text--brand">
                 </span>
                 <span class="for-a11y">
                  상품명
                 </span>
                 <span class="text--title">
                  강화 속노랑고구마 강화도 호박고구마 정직히직접재배
                 </span>
                </a>
               </span>
              </div>
              <div class="area--itemcard_price">
               <span class="price_seller">
                <span class="for-a11y">
                 상품금액
                </span>
                <strong class="text--price_seller">
                 26,900
                </strong>
                <span class="text--unit">
                 원
                </span>
               </span>
              </div>
             </div>
             <div class="section--itemcard_info_add">
              <ul class="list--addinfo">
               <li class="item">
                <span class="text--addinfo">
                 무료배송
                </span>
               </li>
              </ul>
             </div>
             <div class="section--itemcard_info_score">
              <ul class="list--score">
               <li class="item awards">
                <span class="for-a11y">
                 만족도
                 96
                 %입니다.
                </span>
                <div class="seller_awards" title="만족도 96 % 입니다">
                 <span class="awards_points" style="width:96%">
                 </span>
                 <span class="bg_star">
                 </span>
                </div>
               </li>
               <li class="item reviewcnt">
                <span class="text--reviewcnt">
                 상품평
                 244
                </span>
                <span class="for-a11y">
                 건
                </span>
               </li>
               <li class="item buycnt">
                <span class="text--buycnt">
                 구매
                 646
                </span>
                <span class="for-a11y">
                 건
                </span>
               </li>
              </ul>
             </div>
             <div class="section--itemcard_info_shop">
              <a class="link--shop" href="/kjb9087" target="_blank" title="스토어로 이동">
               <span class="for-a11y">
                판매자
               </span>
               <span class="text">
                빈토리
               </span>
              </a>
             </div>
             <button class="button--favorite ">
              <span class="icon--favorite">
               <span class="for-a11y">
                관심상품 등록하기
               </span>
              </span>
             </button>
            </div>
           </div>
          </div>
         </div>
         <div class="component component--item_card type--general">
          <h4 class="text--module_title">
           일반상품 아이템카드
          </h4>
          <div class="itemcard">
           <div class="section--itemcard">
            <div class="section--itemcard_img">
             [linkx]
             
            </div>
            <div class="section--itemcard_info">
             <div class="section--itemcard_info_major">
              <div class="area--itemcard_title">
               <span class="text--itemcard_title ellipsis">
                <a class="link--itemcard" href="/DetailView.aspx?itemno=B408513464" target="_blank">
                 <span class="for-a11y">
                  브랜드명
                 </span>
                 <span class="text--brand">
                 </span>
                 <span class="for-a11y">
                  상품명
                 </span>
                 <span class="text--title">
                  (3kg 6900원 한정특가) 밤/꿀/호박고구마 5kg/10kg
                 </span>
                </a>
               </span>
              </div>
              <div class="area--itemcard_price">
               <span class="price_seller">
                <span class="for-a11y">
                 상품금액
                </span>
                <strong class="text--price_seller">
                 9,900
                </strong>
                <span class="text--unit">
                 원
                </span>
               </span>
              </div>
             </div>
             <div class="section--itemcard_info_add">
              <ul class="list--addinfo">
               <li class="item">
                <span class="text--addinfo">
                 무료배송
                </span>
               </li>
              </ul>
             </div>
             <div class="section--itemcard_info_score">
              <ul class="list--score">
               <li class="item awards">
                <span class="for-a11y">
                 만족도
                 86
                 %입니다.
                </span>
                <div class="seller_awards" title="만족도 86 % 입니다">
                 <span class="awards_points" style="width:86%">
                 </span>
                 <span class="bg_star">
                 </span>
                </div>
               </li>
               <li class="item reviewcnt">
                <span class="text--reviewcnt">
                 상품평
                 361
                </span>
                <span class="for-a11y">
                 건
                </span>
               </li>
               <li class="item buycnt">
                <span class="text--buycnt">
                 구매
                 788
                </span>
                <span class="for-a11y">
                 건
                </span>
               </li>
              </ul>
             </div>
             <div class="section--itemcard_info_shop">
              <a class="link--shop" href="/imnatureshop" target="_blank" title="스토어로 이동">
               <span class="for-a11y">
                판매자
               </span>
               <span class="text">
                아임네이처
               </span>
              </a>
              <span class="for-a11y">
               판매자평가정보
              </span>
              <ul class="list--store_info">
               <li class="item top_seller">
                <div class="section--advertisement ">
                 <button class="button--notice_about_advertisement" title="최우수판매자 안내 레이어 보기" type="button">
                  <span class="text">
                   최우수판매자
                  </span>
                 </button>
                 <div class="layer--information">
                  <strong class="text--information_title">
                   최우수판매자란?
                  </strong>
                  <p class="text--information_description">
                   옥션의 판매인증 평가기준을 모두 달성한 최상위 판매자
                  </p>
                  <button class="button--close_layer" type="button">
                   <span class="ir">
                    최우수판매자
                    안내 레이어 닫기
                   </span>
                  </button>
                 </div>
                </div>
               </li>
              </ul>
             </div>
             <button class="button--favorite ">
              <span class="icon--favorite">
               <span class="for-a11y">
                관심상품 등록하기
               </span>
              </span>
             </button>
            </div>
           </div>
          </div>
         </div>
         <div class="component component--item_card type--general">
          <h4 class="text--module_title">
           일반상품 아이템카드
          </h4>
          <div class="itemcard">
           <div class="section--itemcard">
            <div class="section--itemcard_img">
             <a class="link--itemcard image--loading" href="/DetailView.aspx?itemno=A541556561" target="_blank">
              <div class="lazyload-placeholder" style="height:100%">
              </div>
             </a>
            </div>
            <div class="section--itemcard_info">
             <div class="section--itemcard_info_major">
              <div class="area--itemcard_title">
               <span class="text--itemcard_title ellipsis">
                [ahref]
                
               </span>
              </div>
              <div class="area--itemcard_price">
               <span class="price_seller">
                <span class="for-a11y">
                 상품금액
                </span>
                <strong class="text--price_seller">
                 9,900
                </strong>
                <span class="text--unit">
                 원
                </span>
               </span>
              </div>
             </div>
             <div class="section--itemcard_info_add">
              <ul class="list--addinfo">
               <li class="item">
                <span class="text--addinfo">
                 무료배송
                </span>
               </li>
              </ul>
             </div>
             <div class="section--itemcard_info_score">
              <ul class="list--score">
               <li class="item awards">
                <span class="for-a11y">
                 만족도
                 92
                 %입니다.
                </span>
                <div class="seller_awards" title="만족도 92 % 입니다">
                 <span class="awards_points" style="width:92%">
                 </span>
                 <span class="bg_star">
                 </span>
                </div>
               </li>
               <li class="item reviewcnt">
                <span class="text--reviewcnt">
                 상품평
                 3,864
                </span>
                <span class="for-a11y">
                 건
                </span>
               </li>
               <li class="item buycnt">
                <span class="text--buycnt">
                 구매
                 12,398
                </span>
                <span class="for-a11y">
                 건
                </span>
               </li>
              </ul>
             </div>
             <div class="section--itemcard_info_shop">
              [linkx]
              
              <span class="for-a11y">
               판매자평가정보
              </span>
              <ul class="list--store_info">
               <li class="item top_seller">
                <div class="section--advertisement ">
                 <button class="button--notice_about_advertisement" title="최우수판매자 안내 레이어 보기" type="button">
                  <span class="text">
                   최우수판매자
                  </span>
                 </button>
                 <div class="layer--information">
                  <strong class="text--information_title">
                   최우수판매자란?
                  </strong>
                  <p class="text--information_description">
                   옥션의 판매인증 평가기준을 모두 달성한 최상위 판매자
                  </p>
                  <button class="button--close_layer" type="button">
                   <span class="ir">
                    최우수판매자
                    안내 레이어 닫기
                   </span>
                  </button>
                 </div>
                </div>
               </li>
              </ul>
             </div>
             <button class="button--favorite ">
              <span class="icon--favorite">
               <span class="for-a11y">
                관심상품 등록하기
               </span>
              </span>
             </button>
            </div>
           </div>
          </div>
         </div>
         <div class="component component--item_card type--general">
          <h4 class="text--module_title">
           일반상품 아이템카드
          </h4>
          <div class="itemcard">
           <div class="section--itemcard">
            <div class="section--itemcard_img">
             <a class="link--itemcard image--loading" href="/DetailView.aspx?itemno=B664650938" target="_blank">
              <div class="lazyload-placeholder" style="height:100%">
              </div>
             </a>
            </div>
            <div class="section--itemcard_info">
             <div class="section--itemcard_info_major">
              <div class="area--itemcard_title">
               <span class="text--itemcard_title ellipsis">
                [ahref]
                
               </span>
              </div>
              <div class="area--itemcard_price">
               <span class="discount" title="할인률">
                <strong class="text--discount">
                 10
                </strong>
                <span class="text--unit">
                 %
                </span>
                <span class="for-a11y">
                 할인
                </span>
               </span>
               <span class="price_seller">
                <span class="for-a11y">
                 할인적용금액
                </span>
                <strong class="text--price_seller">
                 16,900
                </strong>
                <span class="text--unit">
                 원
                </span>
               </span>
               <span class="price_original">
                <span class="for-a11y">
                 상품금액
                </span>
                <strong class="text--price_original">
                 18,900
                </strong>
                <span class="text--unit">
                 원
                </span>
               </span>
              </div>
             </div>
             <div class="section--itemcard_info_add">
              <ul class="list--addinfo">
               <li class="item">
                <span class="text--addinfo">
                 무료배송
                </span>
               </li>
              </ul>
             </div>
             <div class="section--itemcard_info_score">
              <ul class="list--score">
               <li class="item awards">
                <span class="for-a11y">
                 만족도
                 96
                 %입니다.
                </span>
                <div class="seller_awards" title="만족도 96 % 입니다">
                 <span class="awards_points" style="width:96%">
                 </span>
                 <span class="bg_star">
                 </span>
                </div>
               </li>
               <li class="item reviewcnt">
                <span class="text--reviewcnt">
                 상품평
                 12
                </span>
                <span class="for-a11y">
                 건
                </span>
               </li>
               <li class="item buycnt">
                <span class="text--buycnt">
                 구매
                 24
                </span>
                <span class="for-a11y">
                 건
                </span>
               </li>
              </ul>
             </div>
             <div class="section--itemcard_info_shop">
              [ahref]
              
              <span class="for-a11y">
               판매자평가정보
              </span>
              <ul class="list--store_info">
               <li class="item top_seller">
                <div class="section--advertisement ">
                 <button class="button--notice_about_advertisement" title="최우수판매자 안내 레이어 보기" type="button">
                  <span class="text">
                   최우수판매자
                  </span>
                 </button>
                 <div class="layer--information">
                  <strong class="text--information_title">
                   최우수판매자란?
                  </strong>
                  <p class="text--information_description">
                   옥션의 판매인증 평가기준을 모두 달성한 최상위 판매자
                  </p>
                  <button class="button--close_layer" type="button">
                   <span class="ir">
                    최우수판매자
                    안내 레이어 닫기
                   </span>
                  </button>
                 </div>
                </div>
               </li>
              </ul>
             </div>
             <button class="button--favorite ">
              <span class="icon--favorite">
               <span class="for-a11y">
                관심상품 등록하기
               </span>
              </span>
             </button>
            </div>
           </div>
          </div>
         </div>
         <div class="component component--item_card type--general">
          <h4 class="text--module_title">
           일반상품 아이템카드
          </h4>
          <div class="itemcard">
           <div class="section--itemcard">
            <div class="section--itemcard_img">
             <a class="link--itemcard image--loading" href="/DetailView.aspx?itemno=B669602054" target="_blank">
              <div class="lazyload-placeholder" style="height:100%">
              </div>
             </a>
            </div>
            <div class="section--itemcard_info">
             <div class="section--itemcard_info_major">
              <div class="area--itemcard_title">
               <span class="text--itemcard_title ellipsis">
                [ahref]
                
               </span>
              </div>
              <div class="area--itemcard_price">
               <span class="discount" title="할인률">
                <strong class="text--discount">
                </strong>
                <span class="text--unit">
                </span>
                <span class="for-a11y">
                 할인
                </span>
               </span>
               <span class="price_seller">
                <span class="for-a11y">
                 할인적용금액
                </span>
                <strong class="text--price_seller">
                 9,850
                </strong>
                <span class="text--unit">
                 원
                </span>
               </span>
               <span class="price_original">
                <span class="for-a11y">
                 상품금액
                </span>
                <strong class="text--price_original">
                 9,900
                </strong>
                <span class="text--unit">
                 원
                </span>
               </span>
              </div>
             </div>
             <div class="section--itemcard_info_add">
              <ul class="list--addinfo">
               <li class="item">
                <span class="text--addinfo">
                 무료배송
                </span>
               </li>
              </ul>
             </div>
             <div class="section--itemcard_info_score">
              <ul class="list--score">
               <li class="item awards">
                <span class="for-a11y">
                 만족도
                 100
                 %입니다.
                </span>
                <div class="seller_awards" title="만족도 100 % 입니다">
                 <span class="awards_points" style="width:100%">
                 </span>
                 <span class="bg_star">
                 </span>
                </div>
               </li>
               <li class="item reviewcnt">
                <span class="text--reviewcnt">
                 상품평
                 7
                </span>
                <span class="for-a11y">
                 건
                </span>
               </li>
               <li class="item buycnt">
                <span class="text--buycnt">
                 구매
                 16
                </span>
                <span class="for-a11y">
                 건
                </span>
               </li>
              </ul>
             </div>
             <div class="section--itemcard_info_shop">
              <a class="link--shop" href="/freshvil" target="_blank" title="스토어로 이동">
               <span class="for-a11y">
                판매자
               </span>
               <span class="text">
                freshvil
               </span>
              </a>
              <span class="for-a11y">
               판매자평가정보
              </span>
              <ul class="list--store_info">
               <li class="item top_seller">
                <div class="section--advertisement ">
                 <button class="button--notice_about_advertisement" title="최우수판매자 안내 레이어 보기" type="button">
                  <span class="text">
                   최우수판매자
                  </span>
                 </button>
                 <div class="layer--information">
                  <strong class="text--information_title">
                   최우수판매자란?
                  </strong>
                  <p class="text--information_description">
                   옥션의 판매인증 평가기준을 모두 달성한 최상위 판매자
                  </p>
                  <button class="button--close_layer" type="button">
                   <span class="ir">
                    최우수판매자
                    안내 레이어 닫기
                   </span>
                  </button>
                 </div>
                </div>
               </li>
              </ul>
             </div>
             <button class="button--favorite ">
              <span class="icon--favorite">
               <span class="for-a11y">
                관심상품 등록하기
               </span>
              </span>
             </button>
            </div>
           </div>
          </div>
         </div>
         <div class="component component--item_card type--general">
          <h4 class="text--module_title">
           일반상품 아이템카드
          </h4>
          <div class="itemcard">
           <div class="section--itemcard">
            <div class="section--itemcard_img">
             [linkx]
             
            </div>
            <div class="section--itemcard_info">
             <div class="section--itemcard_info_major">
              <div class="area--itemcard_title">
               <span class="text--itemcard_title ellipsis">
                <a class="link--itemcard" href="/DetailView.aspx?itemno=B600573044" target="_blank">
                 <span class="for-a11y">
                  브랜드명
                 </span>
                 <span class="text--brand">
                 </span>
                 <span class="for-a11y">
                  상품명
                 </span>
                 <span class="text--title">
                  전남 무안 김재민님의 황토밭 밤/꿀고구마 3kg/5kg
                 </span>
                </a>
               </span>
              </div>
              <div class="area--itemcard_price">
               <span class="discount" title="할인률">
                <strong class="text--discount">
                </strong>
                <span class="text--unit">
                </span>
                <span class="for-a11y">
                 할인
                </span>
               </span>
               <span class="price_seller">
                <span class="for-a11y">
                 할인적용금액
                </span>
                <strong class="text--price_seller">
                 9,850
                </strong>
                <span class="text--unit">
                 원
                </span>
               </span>
               <span class="price_original">
                <span class="for-a11y">
                 상품금액
                </span>
                <strong class="text--price_original">
                 9,900
                </strong>
                <span class="text--unit">
                 원
                </span>
               </span>
              </div>
             </div>
             <div class="section--itemcard_info_add">
              <ul class="list--addinfo">
               <li class="item">
                <span class="text--addinfo">
                 무료배송
                </span>
               </li>
              </ul>
             </div>
             <div class="section--itemcard_info_score">
              <ul class="list--score">
               <li class="item awards">
                <span class="for-a11y">
                 만족도
                 94
                 %입니다.
                </span>
                <div class="seller_awards" title="만족도 94 % 입니다">
                 <span class="awards_points" style="width:94%">
                 </span>
                 <span class="bg_star">
                 </span>
                </div>
               </li>
               <li class="item reviewcnt">
                <span class="text--reviewcnt">
                 상품평
                 52
                </span>
                <span class="for-a11y">
                 건
                </span>
               </li>
               <li class="item buycnt">
                <span class="text--buycnt">
                 구매
                 125
                </span>
                <span class="for-a11y">
                 건
                </span>
               </li>
              </ul>
             </div>
             <div class="section--itemcard_info_shop">
              <a class="link--shop" href="/freshvil" target="_blank" title="스토어로 이동">
               <span class="for-a11y">
                판매자
               </span>
               <span class="text">
                freshvil
               </span>
              </a>
              <span class="for-a11y">
               판매자평가정보
              </span>
              <ul class="list--store_info">
               <li class="item top_seller">
                <div class="section--advertisement ">
                 <button class="button--notice_about_advertisement" title="최우수판매자 안내 레이어 보기" type="button">
                  <span class="text">
                   최우수판매자
                  </span>
                 </button>
                 <div class="layer--information">
                  <strong class="text--information_title">
                   최우수판매자란?
                  </strong>
                  <p class="text--information_description">
                   옥션의 판매인증 평가기준을 모두 달성한 최상위 판매자
                  </p>
                  <button class="button--close_layer" type="button">
                   <span class="ir">
                    최우수판매자
                    안내 레이어 닫기
                   </span>
                  </button>
                 </div>
                </div>
               </li>
              </ul>
             </div>
             <button class="button--favorite ">
              <span class="icon--favorite">
               <span class="for-a11y">
                관심상품 등록하기
               </span>
              </span>
             </button>
            </div>
           </div>
          </div>
         </div>
         <div class="component component--item_card type--general">
          <h4 class="text--module_title">
           일반상품 아이템카드
          </h4>
          <div class="itemcard">
           <div class="section--itemcard">
            <div class="section--itemcard_img">
             <a class="link--itemcard image--loading" href="/DetailView.aspx?itemno=B618135820" target="_blank">
              <div class="lazyload-placeholder" style="height:100%">
              </div>
             </a>
            </div>
            <div class="section--itemcard_info">
             <div class="section--itemcard_info_major">
              <div class="area--itemcard_title">
               <span class="text--itemcard_title ellipsis">
                <a class="link--itemcard" href="/DetailView.aspx?itemno=B618135820" target="_blank">
                 <span class="for-a11y">
                  브랜드명
                 </span>
                 <span class="text--brand">
                 </span>
                 <span class="for-a11y">
                  상품명
                 </span>
                 <span class="text--title">
                  해남 꿀고구마 베니하루카/달달한 꿀고구마 3kg(특상)
                 </span>
                </a>
               </span>
              </div>
              <div class="area--itemcard_price">
               <span class="price_seller">
                <span class="for-a11y">
                 상품금액
                </span>
                <strong class="text--price_seller">
                 16,900
                </strong>
                <span class="text--unit">
                 원
                </span>
               </span>
              </div>
             </div>
             <div class="section--itemcard_info_add">
              <ul class="list--addinfo">
               <li class="item">
                <span class="text--addinfo">
                 무료배송
                </span>
               </li>
              </ul>
             </div>
             <div class="section--itemcard_info_score">
              <ul class="list--score">
               <li class="item awards">
                <span class="for-a11y">
                 만족도
                 96
                 %입니다.
                </span>
                <div class="seller_awards" title="만족도 96 % 입니다">
                 <span class="awards_points" style="width:96%">
                 </span>
                 <span class="bg_star">
                 </span>
                </div>
               </li>
               <li class="item reviewcnt">
                <span class="text--reviewcnt">
                 상품평
                 67
                </span>
                <span class="for-a11y">
                 건
                </span>
               </li>
               <li class="item buycnt">
                <span class="text--buycnt">
                 구매
                 134
                </span>
                <span class="for-a11y">
                 건
                </span>
               </li>
              </ul>
             </div>
             <div class="section--itemcard_info_shop">
              [ahref]
              
              <span class="for-a11y">
               판매자평가정보
              </span>
              <ul class="list--store_info">
               <li class="item">
                <span class="text--store_info">
                 상품평
                </span>
               </li>
               <li class="item">
                <span class="text--store_info">
                 고객응대우수
                </span>
               </li>
              </ul>
             </div>
             <button class="button--favorite ">
              <span class="icon--favorite">
               <span class="for-a11y">
                관심상품 등록하기
               </span>
              </span>
             </button>
             <button class="button--related_item" title="연관상품 6 개가 있습니다. ">
              <span class="text--related_item">
               <b class="text--title">
                연관상품
               </b>
               <b class="text--cnt">
                6
               </b>
              </span>
             </button>
            </div>
           </div>
          </div>
          <div class="popup--related_items ">
           <h2 class="section--title">
            <b>[area1][mkey1][symbolx][pkeyx][symbolx][area1][keyword1][bracketl1][area1][keywordx][bracketr1][symbolx][bracketl2][area1][keywordx][bracketr2][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx]</b>
           </h2>
           <div class="section--body">
            <div class="section--related_items">
             <div class="section--slick_area">
              <div class="list--related_items">
               <div class="slick-slider slick-initialized">
                <div class="slick-list">
                 <div class="slick-track" style="width:0%;left:NaN%">
                 </div>
                </div>
               </div>
              </div>
             </div>
            </div>
           </div>
          </div>
         </div>
         <div class="component component--item_card type--general">
          <h4 class="text--module_title">
           일반상품 아이템카드
          </h4>
          <div class="itemcard">
           <div class="section--itemcard">
            <div class="section--itemcard_img">
             [ahref]
             
            </div>
            <div class="section--itemcard_info">
             <div class="section--itemcard_info_major">
              <div class="area--itemcard_title">
               <span class="text--itemcard_title ellipsis">
                [ahref]
                
               </span>
              </div>
              <div class="area--itemcard_price">
               <span class="price_seller">
                <span class="for-a11y">
                 상품금액
                </span>
                <strong class="text--price_seller">
                 19,900
                </strong>
                <span class="text--unit">
                 원
                </span>
               </span>
              </div>
             </div>
             <div class="section--itemcard_info_add">
              <ul class="list--addinfo">
               <li class="item">
                <span class="text--addinfo">
                 무료배송
                </span>
               </li>
              </ul>
             </div>
             <div class="section--itemcard_info_score">
              <ul class="list--score">
               <li class="item awards">
                <span class="for-a11y">
                 만족도
                 98
                 %입니다.
                </span>
                <div class="seller_awards" title="만족도 98 % 입니다">
                 <span class="awards_points" style="width:98%">
                 </span>
                 <span class="bg_star">
                 </span>
                </div>
               </li>
               <li class="item reviewcnt">
                <span class="text--reviewcnt">
                 상품평
                 28
                </span>
                <span class="for-a11y">
                 건
                </span>
               </li>
               <li class="item buycnt">
                <span class="text--buycnt">
                 구매
                 53
                </span>
                <span class="for-a11y">
                 건
                </span>
               </li>
              </ul>
             </div>
             <div class="section--itemcard_info_shop">
              [ahref]
              
             </div>
             <button class="button--favorite ">
              <span class="icon--favorite">
               <span class="for-a11y">
                관심상품 등록하기
               </span>
              </span>
             </button>
             <button class="button--related_item" title="연관상품 4 개가 있습니다. ">
              <span class="text--related_item">
               <b class="text--title">
                연관상품
               </b>
               <b class="text--cnt">
                4
               </b>
              </span>
             </button>
            </div>
           </div>
          </div>
          <div class="popup--related_items ">
           <h2 class="section--title">
            [area1][mkey1][symbolx][pkeyx][symbolx][area1][keyword1][bracketl1][area1][keywordx][bracketr1][symbolx][bracketl2][area1][keywordx][bracketr2][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx]
           </h2>
           <div class="section--body">
            <div class="section--related_items">
             <div class="section--slick_area">
              <div class="list--related_items">
               <div class="slick-slider slick-initialized">
                <div class="slick-list">
                 <div class="slick-track" style="width:0%;left:NaN%">
                 </div>
                </div>
               </div>
              </div>
             </div>
            </div>
           </div>
          </div>
         </div>
         <div class="component component--item_card type--general">
          <h4 class="text--module_title">
           일반상품 아이템카드
          </h4>
          <div class="itemcard">
           <div class="section--itemcard">
            <div class="section--itemcard_img">
             [ahref]
             
            </div>
            <div class="section--itemcard_info">
             <div class="section--itemcard_info_major">
              <div class="area--itemcard_title">
               <span class="text--itemcard_title ellipsis">
                [linkx]
                
               </span>
              </div>
              <div class="area--itemcard_price">
               <span class="price_seller">
                <span class="for-a11y">
                 상품금액
                </span>
                <strong class="text--price_seller">
                 15,900
                </strong>
                <span class="text--unit">
                 원
                </span>
               </span>
              </div>
             </div>
             <div class="section--itemcard_info_add">
              <ul class="list--addinfo">
               <li class="item">
                <span class="text--addinfo">
                 무료배송
                </span>
               </li>
              </ul>
             </div>
             <div class="section--itemcard_info_score">
              <ul class="list--score">
              </ul>
             </div>
             <div class="section--itemcard_info_shop">
              [linkx]
              
              <span class="for-a11y">
               판매자평가정보
              </span>
              <ul class="list--store_info">
               <li class="item">
                <span class="text--store_info">
                 배송
                </span>
               </li>
               <li class="item">
                <span class="text--store_info">
                 상품평
                </span>
               </li>
               <li class="item">
                <span class="text--store_info">
                 고객응대우수
                </span>
               </li>
              </ul>
             </div>
             <button class="button--favorite ">
              <span class="icon--favorite">
               <span class="for-a11y">
                관심상품 등록하기
               </span>
              </span>
             </button>
             <button class="button--related_item" title="연관상품 2 개가 있습니다. ">
              <span class="text--related_item">
               <b class="text--title">
                연관상품
               </b>
               <b class="text--cnt">
                2
               </b>
              </span>
             </button>
            </div>
           </div>
          </div>
          <div class="popup--related_items ">
           <h2 class="section--title">
            <b>[area1][mkey1][symbolx][pkeyx][symbolx][area1][keyword1][bracketl1][area1][keywordx][bracketr1][symbolx][bracketl2][area1][keywordx][bracketr2][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx]</b>
           </h2>
           <div class="section--body">
            <div class="section--related_items">
             <div class="section--slick_area">
              <div class="list--related_items">
               <div class="slick-slider slick-initialized">
                <div class="slick-list">
                 <div class="slick-track" style="width:0%;left:NaN%">
                 </div>
                </div>
               </div>
              </div>
             </div>
            </div>
           </div>
          </div>
         </div>
         <div class="component component--item_card type--general">
          <h4 class="text--module_title">
           일반상품 아이템카드
          </h4>
          <div class="itemcard">
           <div class="section--itemcard">
            <div class="section--itemcard_img">
             [ahref]
             
            </div>
            <div class="section--itemcard_info">
             <div class="section--itemcard_info_major">
              <div class="area--itemcard_title">
               <span class="text--itemcard_title ellipsis">
                <a class="link--itemcard" href="/DetailView.aspx?itemno=B694644176" target="_blank">
                 <span class="for-a11y">
                  브랜드명
                 </span>
                 <span class="text--brand">
                 </span>
                 <span class="for-a11y">
                  상품명
                 </span>
                 <span class="text--title">
                  해남달콤한자연 공식매장 오픈기념  꿀고구마 60g1봉
                 </span>
                </a>
               </span>
              </div>
              <div class="area--itemcard_price">
               <span class="discount" title="할인률">
                <strong class="text--discount">
                 1
                </strong>
                <span class="text--unit">
                 %
                </span>
                <span class="for-a11y">
                 할인
                </span>
               </span>
               <span class="price_seller">
                <span class="for-a11y">
                 할인적용금액
                </span>
                <strong class="text--price_seller">
                 880
                </strong>
                <span class="text--unit">
                 원
                </span>
               </span>
               <span class="price_original">
                <span class="for-a11y">
                 상품금액
                </span>
                <strong class="text--price_original">
                 890
                </strong>
                <span class="text--unit">
                 원
                </span>
               </span>
              </div>
             </div>
             <div class="section--itemcard_info_add">
              <ul class="list--addinfo">
               <li class="item">
                <span class="text--addinfo">
                 배송비 2,500원
                </span>
               </li>
              </ul>
             </div>
             <div class="section--itemcard_info_score">
              <ul class="list--score">
              </ul>
             </div>
             <div class="section--itemcard_info_shop">
              <a class="link--shop" href="/sweetnature" target="_blank" title="스토어로 이동">
               <span class="for-a11y">
                판매자
               </span>
               <span class="text">
                해남달콤한자연
               </span>
              </a>
             </div>
             <button class="button--favorite ">
              <span class="icon--favorite">
               <span class="for-a11y">
                관심상품 등록하기
               </span>
              </span>
             </button>
            </div>
           </div>
          </div>
         </div>
         <div class="component component--item_card type--general">
          <h4 class="text--module_title">
           일반상품 아이템카드
          </h4>
          <div class="itemcard">
           <div class="section--itemcard">
            <div class="section--itemcard_img">
             <a class="link--itemcard image--loading" href="/DetailView.aspx?itemno=B696332162" target="_blank">
              <div class="lazyload-placeholder" style="height:100%">
              </div>
             </a>
            </div>
            <div class="section--itemcard_info">
             <div class="section--itemcard_info_major">
              <div class="area--itemcard_title">
               <span class="text--itemcard_title ellipsis">
                <a class="link--itemcard" href="/DetailView.aspx?itemno=B696332162" target="_blank">
                 <span class="for-a11y">
                  브랜드명
                 </span>
                 <span class="text--brand">
                 </span>
                 <span class="for-a11y">
                  상품명
                 </span>
                 <span class="text--title">
                  밤고구마 자색고구마 헬스 식사대용 한끼 100g 10팩
                 </span>
                </a>
               </span>
              </div>
              <div class="area--itemcard_price">
               <span class="price_seller">
                <span class="for-a11y">
                 상품금액
                </span>
                <strong class="text--price_seller">
                 25,500
                </strong>
                <span class="text--unit">
                 원
                </span>
               </span>
              </div>
             </div>
             <div class="section--itemcard_info_add">
              <ul class="list--addinfo">
               <li class="item">
                <span class="text--addinfo">
                 배송비 3,000원
                </span>
               </li>
              </ul>
             </div>
             <div class="section--itemcard_info_score">
              <ul class="list--score">
              </ul>
             </div>
             <div class="section--itemcard_info_shop">
              [ahref]
              
             </div>
             <button class="button--favorite ">
              <span class="icon--favorite">
               <span class="for-a11y">
                관심상품 등록하기
               </span>
              </span>
             </button>
             <button class="button--related_item" title="연관상품 19 개가 있습니다. ">
              <span class="text--related_item">
               <b class="text--title">
                연관상품
               </b>
               <b class="text--cnt">
                19
               </b>
              </span>
             </button>
            </div>
           </div>
          </div>
          <div class="popup--related_items ">
           <h2 class="section--title">
            [area1][mkey1][symbolx][pkeyx][symbolx][area1][keyword1][bracketl1][area1][keywordx][bracketr1][symbolx][bracketl2][area1][keywordx][bracketr2][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx]
           </h2>
           <div class="section--body">
            <div class="section--related_items">
             <div class="section--slick_area">
              <div class="list--related_items">
               <div class="slick-slider slick-initialized">
                <div class="slick-list">
                 <div class="slick-track" style="width:0%;left:NaN%">
                 </div>
                </div>
               </div>
              </div>
             </div>
            </div>
           </div>
          </div>
         </div>
        </div>
        <div class="section--module_wrap" module-design-id="17">
         <div class="component component--item_card type--general">
          <h4 class="text--module_title">
           일반상품 아이템카드
          </h4>
          <div class="itemcard">
           <div class="section--itemcard">
            <div class="section--itemcard_img">
             <a class="link--itemcard image--loading" href="/DetailView.aspx?itemno=B403057051" target="_blank">
              <div class="lazyload-placeholder" style="height:100%">
              </div>
             </a>
            </div>
            <div class="section--itemcard_info">
             <div class="section--itemcard_info_major">
              <div class="area--itemcard_title">
               <span class="text--itemcard_title ellipsis">
                [ahref]
                
               </span>
              </div>
              <div class="area--itemcard_price">
               <span class="discount" title="할인률">
                <strong class="text--discount">
                 1
                </strong>
                <span class="text--unit">
                 %
                </span>
                <span class="for-a11y">
                 할인
                </span>
               </span>
               <span class="price_seller">
                <span class="for-a11y">
                 할인적용금액
                </span>
                <strong class="text--price_seller">
                 14,820
                </strong>
                <span class="text--unit">
                 원
                </span>
               </span>
               <span class="price_original">
                <span class="for-a11y">
                 상품금액
                </span>
                <strong class="text--price_original">
                 15,000
                </strong>
                <span class="text--unit">
                 원
                </span>
               </span>
              </div>
             </div>
             <div class="section--itemcard_info_add">
              <ul class="list--addinfo">
               <li class="item">
                <span class="text--addinfo">
                 배송비 3,000원
                </span>
               </li>
              </ul>
             </div>
             <div class="section--itemcard_info_score">
              <ul class="list--score">
               <li class="item awards">
                <span class="for-a11y">
                 만족도
                 96
                 %입니다.
                </span>
                <div class="seller_awards" title="만족도 96 % 입니다">
                 <span class="awards_points" style="width:96%">
                 </span>
                 <span class="bg_star">
                 </span>
                </div>
               </li>
               <li class="item reviewcnt">
                <span class="text--reviewcnt">
                 상품평
                 28
                </span>
                <span class="for-a11y">
                 건
                </span>
               </li>
               <li class="item buycnt">
                <span class="text--buycnt">
                 구매
                 119
                </span>
                <span class="for-a11y">
                 건
                </span>
               </li>
              </ul>
             </div>
             <div class="section--itemcard_info_shop">
              <a class="link--shop" href="/18DD5A8D19E0" target="_blank" title="스토어로 이동">
               <span class="for-a11y">
                판매자
               </span>
               <span class="text">
                강화도농산물영인팜
               </span>
              </a>
              <span class="for-a11y">
               판매자평가정보
              </span>
              <ul class="list--store_info">
               <li class="item">
                <span class="text--store_info">
                 배송
                </span>
               </li>
               <li class="item">
                <span class="text--store_info">
                 상품평
                </span>
               </li>
               <li class="item">
                <span class="text--store_info">
                 고객응대우수
                </span>
               </li>
              </ul>
             </div>
             <button class="button--favorite ">
              <span class="icon--favorite">
               <span class="for-a11y">
                관심상품 등록하기
               </span>
              </span>
             </button>
            </div>
           </div>
          </div>
         </div>
         <div class="component component--item_card type--general">
          <h4 class="text--module_title">
           일반상품 아이템카드
          </h4>
          <div class="itemcard">
           <div class="section--itemcard">
            <div class="section--itemcard_img">
             [linkx]
             
            </div>
            <div class="section--itemcard_info">
             <div class="section--itemcard_info_major">
              <div class="area--itemcard_title">
               <span class="text--itemcard_title ellipsis">
                <a class="link--itemcard" href="/DetailView.aspx?itemno=B665909145" target="_blank">
                 <span class="for-a11y">
                  브랜드명
                 </span>
                 <span class="text--brand">
                 </span>
                 <span class="for-a11y">
                  상품명
                 </span>
                 <span class="text--title">
                  영광농협 아이스고구마 3kg /꿀고구마
                 </span>
                </a>
               </span>
              </div>
              <div class="area--itemcard_price">
               <span class="discount" title="할인률">
                <strong class="text--discount">
                </strong>
                <span class="text--unit">
                </span>
                <span class="for-a11y">
                 할인
                </span>
               </span>
               <span class="price_seller">
                <span class="for-a11y">
                 할인적용금액
                </span>
                <strong class="text--price_seller">
                 34,320
                </strong>
                <span class="text--unit">
                 원
                </span>
               </span>
               <span class="price_original">
                <span class="for-a11y">
                 상품금액
                </span>
                <strong class="text--price_original">
                 34,500
                </strong>
                <span class="text--unit">
                 원
                </span>
               </span>
              </div>
             </div>
             <div class="section--itemcard_info_add">
              <ul class="list--addinfo">
               <li class="item">
                <span class="text--addinfo">
                 무료배송
                </span>
               </li>
              </ul>
             </div>
             <div class="section--itemcard_info_score">
              <ul class="list--score">
               <li class="item awards">
                <span class="for-a11y">
                 만족도
                 100
                 %입니다.
                </span>
                <div class="seller_awards" title="만족도 100 % 입니다">
                 <span class="awards_points" style="width:100%">
                 </span>
                 <span class="bg_star">
                 </span>
                </div>
               </li>
               <li class="item reviewcnt">
                <span class="text--reviewcnt">
                 상품평
                 8
                </span>
                <span class="for-a11y">
                 건
                </span>
               </li>
               <li class="item buycnt">
                <span class="text--buycnt">
                 구매
                 9
                </span>
                <span class="for-a11y">
                 건
                </span>
               </li>
              </ul>
             </div>
             <div class="section--itemcard_info_shop">
              [linkx]
              
             </div>
             <button class="button--favorite ">
              <span class="icon--favorite">
               <span class="for-a11y">
                관심상품 등록하기
               </span>
              </span>
             </button>
            </div>
           </div>
          </div>
         </div>
         <div class="component component--item_card type--general">
          <h4 class="text--module_title">
           일반상품 아이템카드
          </h4>
          <div class="itemcard">
           <div class="section--itemcard">
            <div class="section--itemcard_img">
             [linkx]
             
            </div>
            <div class="section--itemcard_info">
             <div class="section--itemcard_info_major">
              <div class="area--itemcard_title">
               <span class="text--itemcard_title ellipsis">
                <a class="link--itemcard" href="/DetailView.aspx?itemno=B696791653" target="_blank">
                 <span class="for-a11y">
                  브랜드명
                 </span>
                 <span class="text--brand">
                 </span>
                 <span class="for-a11y">
                  상품명
                 </span>
                 <span class="text--title">
                  100%국내산 무첨가 오븐에 구운 미니고구마 28팩
                 </span>
                </a>
               </span>
              </div>
              <div class="area--itemcard_price">
               <span class="price_seller">
                <span class="for-a11y">
                 상품금액
                </span>
                <strong class="text--price_seller">
                 49,800
                </strong>
                <span class="text--unit">
                 원
                </span>
               </span>
              </div>
             </div>
             <div class="section--itemcard_info_add">
              <ul class="list--addinfo">
               <li class="item">
                <span class="text--addinfo">
                 무료배송
                </span>
               </li>
              </ul>
             </div>
             <div class="section--itemcard_info_score">
              <ul class="list--score">
               <li class="item buycnt">
                <span class="text--buycnt">
                 구매
                 1
                </span>
                <span class="for-a11y">
                 건
                </span>
               </li>
              </ul>
             </div>
             <div class="section--itemcard_info_shop">
              <a class="link--shop" href="/icatchmall" target="_blank" title="스토어로 이동">
               <span class="for-a11y">
                판매자
               </span>
               <span class="text">
                캐치마인드
               </span>
              </a>
             </div>
             <button class="button--favorite ">
              <span class="icon--favorite">
               <span class="for-a11y">
                관심상품 등록하기
               </span>
              </span>
             </button>
            </div>
           </div>
          </div>
         </div>
         <div class="component component--item_card type--general">
          <h4 class="text--module_title">
           일반상품 아이템카드
          </h4>
          <div class="itemcard">
           <div class="section--itemcard">
            <div class="section--itemcard_img">
             <a class="link--itemcard image--loading" href="/DetailView.aspx?itemno=A083097601" target="_blank">
              <div class="lazyload-placeholder" style="height:100%">
              </div>
             </a>
            </div>
            <div class="section--itemcard_info">
             <div class="section--itemcard_info_major">
              <div class="area--itemcard_title">
               <span class="text--itemcard_title ellipsis">
                <a class="link--itemcard" href="/DetailView.aspx?itemno=A083097601" target="_blank">
                 <span class="for-a11y">
                  브랜드명
                 </span>
                 <span class="text--brand">
                 </span>
                 <span class="for-a11y">
                  상품명
                 </span>
                 <span class="text--title">
                  달콤한 고구마정과 1kg 고구마 정과 자색
                 </span>
                </a>
               </span>
              </div>
              <div class="area--itemcard_price">
               <span class="price_seller">
                <span class="for-a11y">
                 상품금액
                </span>
                <strong class="text--price_seller">
                 7,300
                </strong>
                <span class="text--unit">
                 원
                </span>
               </span>
              </div>
             </div>
             <div class="section--itemcard_info_add">
              <ul class="list--addinfo">
               <li class="item">
                <span class="text--addinfo">
                 배송비 2,500원
                </span>
               </li>
              </ul>
             </div>
             <div class="section--itemcard_info_score">
              <ul class="list--score">
               <li class="item awards">
                <span class="for-a11y">
                 만족도
                 98
                 %입니다.
                </span>
                <div class="seller_awards" title="만족도 98 % 입니다">
                 <span class="awards_points" style="width:98%">
                 </span>
                 <span class="bg_star">
                 </span>
                </div>
               </li>
               <li class="item reviewcnt">
                <span class="text--reviewcnt">
                 상품평
                 56
                </span>
                <span class="for-a11y">
                 건
                </span>
               </li>
               <li class="item buycnt">
                <span class="text--buycnt">
                 구매
                 5,604
                </span>
                <span class="for-a11y">
                 건
                </span>
               </li>
              </ul>
             </div>
             <div class="section--itemcard_info_shop">
              <a class="link--shop" href="/cjws2000" target="_blank" title="스토어로 이동">
               <span class="for-a11y">
                판매자
               </span>
               <span class="text">
                쪽빛누리
               </span>
              </a>
              <span class="for-a11y">
               판매자평가정보
              </span>
              <ul class="list--store_info">
               <li class="item top_seller">
                <div class="section--advertisement ">
                 <button class="button--notice_about_advertisement" title="최우수판매자 안내 레이어 보기" type="button">
                  <span class="text">
                   최우수판매자
                  </span>
                 </button>
                 <div class="layer--information">
                  <strong class="text--information_title">
                   최우수판매자란?
                  </strong>
                  <p class="text--information_description">
                   옥션의 판매인증 평가기준을 모두 달성한 최상위 판매자
                  </p>
                  <button class="button--close_layer" type="button">
                   <span class="ir">
                    최우수판매자
                    안내 레이어 닫기
                   </span>
                  </button>
                 </div>
                </div>
               </li>
              </ul>
             </div>
             <button class="button--favorite ">
              <span class="icon--favorite">
               <span class="for-a11y">
                관심상품 등록하기
               </span>
              </span>
             </button>
            </div>
           </div>
          </div>
         </div>
         <div class="component component--item_card type--general">
          <h4 class="text--module_title">
           일반상품 아이템카드
          </h4>
          <div class="itemcard">
           <div class="section--itemcard">
            <div class="section--itemcard_img">
             <a class="link--itemcard image--loading" href="/DetailView.aspx?itemno=B233058112" target="_blank">
              <div class="lazyload-placeholder" style="height:100%">
              </div>
             </a>
            </div>
            <div class="section--itemcard_info">
             <div class="section--itemcard_info_major">
              <div class="area--itemcard_title">
               <span class="text--itemcard_title ellipsis">
                <a class="link--itemcard" href="/DetailView.aspx?itemno=B233058112" target="_blank">
                 <span class="for-a11y">
                  브랜드명
                 </span>
                 <span class="text--brand">
                 </span>
                 <span class="for-a11y">
                  상품명
                 </span>
                 <span class="text--title">
                  프리미엄 정품 세척 햇꿀밤고구마/촉촉팍팍 품질굿
                 </span>
                </a>
               </span>
              </div>
              <div class="area--itemcard_price">
               <span class="price_seller">
                <span class="for-a11y">
                 상품금액
                </span>
                <strong class="text--price_seller">
                 29,900
                </strong>
                <span class="text--unit">
                 원
                </span>
               </span>
              </div>
             </div>
             <div class="section--itemcard_info_add">
              <ul class="list--addinfo">
               <li class="item">
                <span class="text--addinfo">
                 무료배송
                </span>
               </li>
              </ul>
             </div>
             <div class="section--itemcard_info_score">
              <ul class="list--score">
               <li class="item awards">
                <span class="for-a11y">
                 만족도
                 96
                 %입니다.
                </span>
                <div class="seller_awards" title="만족도 96 % 입니다">
                 <span class="awards_points" style="width:96%">
                 </span>
                 <span class="bg_star">
                 </span>
                </div>
               </li>
               <li class="item reviewcnt">
                <span class="text--reviewcnt">
                 상품평
                 473
                </span>
                <span class="for-a11y">
                 건
                </span>
               </li>
               <li class="item buycnt">
                <span class="text--buycnt">
                 구매
                 3,299
                </span>
                <span class="for-a11y">
                 건
                </span>
               </li>
              </ul>
             </div>
             <div class="section--itemcard_info_shop">
              <a class="link--shop" href="/woo6490194" target="_blank" title="스토어로 이동">
               <span class="for-a11y">
                판매자
               </span>
               <span class="text">
                늘푸르른늘찬
               </span>
              </a>
              <span class="for-a11y">
               판매자평가정보
              </span>
              <ul class="list--store_info">
               <li class="item top_seller">
                <div class="section--advertisement ">
                 <button class="button--notice_about_advertisement" title="최우수판매자 안내 레이어 보기" type="button">
                  <span class="text">
                   최우수판매자
                  </span>
                 </button>
                 <div class="layer--information">
                  <strong class="text--information_title">
                   최우수판매자란?
                  </strong>
                  <p class="text--information_description">
                   옥션의 판매인증 평가기준을 모두 달성한 최상위 판매자
                  </p>
                  <button class="button--close_layer" type="button">
                   <span class="ir">
                    최우수판매자
                    안내 레이어 닫기
                   </span>
                  </button>
                 </div>
                </div>
               </li>
              </ul>
             </div>
             <button class="button--favorite ">
              <span class="icon--favorite">
               <span class="for-a11y">
                관심상품 등록하기
               </span>
              </span>
             </button>
            </div>
           </div>
          </div>
         </div>
         <div class="component component--item_card type--general">
          <h4 class="text--module_title">
           일반상품 아이템카드
          </h4>
          <div class="itemcard">
           <div class="section--itemcard">
            <div class="section--itemcard_img">
             [ahref]
             
            </div>
            <div class="section--itemcard_info">
             <div class="section--itemcard_info_major">
              <div class="area--itemcard_title">
               <span class="text--itemcard_title ellipsis">
                [linkx]
                
               </span>
              </div>
              <div class="area--itemcard_price">
               <span class="discount" title="할인률">
                <strong class="text--discount">
                </strong>
                <span class="text--unit">
                </span>
                <span class="for-a11y">
                 할인
                </span>
               </span>
               <span class="price_seller">
                <span class="for-a11y">
                 할인적용금액
                </span>
                <strong class="text--price_seller">
                 19,700
                </strong>
                <span class="text--unit">
                 원
                </span>
               </span>
               <span class="price_original">
                <span class="for-a11y">
                 상품금액
                </span>
                <strong class="text--price_original">
                 19,800
                </strong>
                <span class="text--unit">
                 원
                </span>
               </span>
              </div>
             </div>
             <div class="section--itemcard_info_add">
              <ul class="list--addinfo">
               <li class="item">
                <span class="text--addinfo">
                 무료배송
                </span>
               </li>
              </ul>
             </div>
             <div class="section--itemcard_info_score">
              <ul class="list--score">
               <li class="item awards">
                <span class="for-a11y">
                 만족도
                 96
                 %입니다.
                </span>
                <div class="seller_awards" title="만족도 96 % 입니다">
                 <span class="awards_points" style="width:96%">
                 </span>
                 <span class="bg_star">
                 </span>
                </div>
               </li>
               <li class="item reviewcnt">
                <span class="text--reviewcnt">
                 상품평
                 1,978
                </span>
                <span class="for-a11y">
                 건
                </span>
               </li>
               <li class="item buycnt">
                <span class="text--buycnt">
                 구매
                 9,048
                </span>
                <span class="for-a11y">
                 건
                </span>
               </li>
              </ul>
             </div>
             <div class="section--itemcard_info_shop">
              <a class="link--shop" href="/woo6490194" target="_blank" title="스토어로 이동">
               <span class="for-a11y">
                판매자
               </span>
               <span class="text">
                늘푸르른늘찬
               </span>
              </a>
              <span class="for-a11y">
               판매자평가정보
              </span>
              <ul class="list--store_info">
               <li class="item top_seller">
                <div class="section--advertisement ">
                 <button class="button--notice_about_advertisement" title="최우수판매자 안내 레이어 보기" type="button">
                  <span class="text">
                   최우수판매자
                  </span>
                 </button>
                 <div class="layer--information">
                  <strong class="text--information_title">
                   최우수판매자란?
                  </strong>
                  <p class="text--information_description">
                   옥션의 판매인증 평가기준을 모두 달성한 최상위 판매자
                  </p>
                  <button class="button--close_layer" type="button">
                   <span class="ir">
                    최우수판매자
                    안내 레이어 닫기
                   </span>
                  </button>
                 </div>
                </div>
               </li>
              </ul>
             </div>
             <button class="button--favorite ">
              <span class="icon--favorite">
               <span class="for-a11y">
                관심상품 등록하기
               </span>
              </span>
             </button>
            </div>
           </div>
          </div>
         </div>
         <div class="component component--item_card type--general">
          <h4 class="text--module_title">
           일반상품 아이템카드
          </h4>
          <div class="itemcard">
           <div class="section--itemcard">
            <div class="section--itemcard_img">
             [ahref]
             
            </div>
            <div class="section--itemcard_info">
             <div class="section--itemcard_info_major">
              <div class="area--itemcard_title">
               <span class="text--itemcard_title ellipsis">
                <a class="link--itemcard" href="/DetailView.aspx?itemno=B514824073" target="_blank">
                 <span class="for-a11y">
                  브랜드명
                 </span>
                 <span class="text--brand">
                 </span>
                 <span class="for-a11y">
                  상품명
                 </span>
                 <span class="text--title">
                  해남 아이스 군고구마
                 </span>
                </a>
               </span>
              </div>
              <div class="area--itemcard_price">
               <span class="price_seller">
                <span class="for-a11y">
                 상품금액
                </span>
                <strong class="text--price_seller">
                 1,490
                </strong>
                <span class="text--unit">
                 원
                </span>
               </span>
              </div>
             </div>
             <div class="section--itemcard_info_add">
              <ul class="list--addinfo">
               <li class="item">
                <span class="text--addinfo">
                 배송비 2,500원
                </span>
               </li>
              </ul>
             </div>
             <div class="section--itemcard_info_score">
              <ul class="list--score">
               <li class="item reviewcnt">
                <span class="text--reviewcnt">
                 상품평
                 1
                </span>
                <span class="for-a11y">
                 건
                </span>
               </li>
               <li class="item buycnt">
                <span class="text--buycnt">
                 구매
                 365
                </span>
                <span class="for-a11y">
                 건
                </span>
               </li>
              </ul>
             </div>
             <div class="section--itemcard_info_shop">
              <a class="link--shop" href="/nong4" target="_blank" title="스토어로 이동">
               <span class="for-a11y">
                판매자
               </span>
               <span class="text">
                조은해남
               </span>
              </a>
              <span class="for-a11y">
               판매자평가정보
              </span>
              <ul class="list--store_info">
               <li class="item top_seller">
                <div class="section--advertisement ">
                 <button class="button--notice_about_advertisement" title="최우수판매자 안내 레이어 보기" type="button">
                  <span class="text">
                   최우수판매자
                  </span>
                 </button>
                 <div class="layer--information">
                  <strong class="text--information_title">
                   최우수판매자란?
                  </strong>
                  <p class="text--information_description">
                   옥션의 판매인증 평가기준을 모두 달성한 최상위 판매자
                  </p>
                  <button class="button--close_layer" type="button">
                   <span class="ir">
                    최우수판매자
                    안내 레이어 닫기
                   </span>
                  </button>
                 </div>
                </div>
               </li>
              </ul>
             </div>
             <button class="button--favorite ">
              <span class="icon--favorite">
               <span class="for-a11y">
                관심상품 등록하기
               </span>
              </span>
             </button>
            </div>
           </div>
          </div>
         </div>
         <div class="component component--item_card type--general">
          <h4 class="text--module_title">
           일반상품 아이템카드
          </h4>
          <div class="itemcard">
           <div class="section--itemcard">
            <div class="section--itemcard_img">
             <a class="link--itemcard image--loading" href="/DetailView.aspx?itemno=B204023305" target="_blank">
              <div class="lazyload-placeholder" style="height:100%">
              </div>
             </a>
            </div>
            <div class="section--itemcard_info">
             <div class="section--itemcard_info_major">
              <div class="area--itemcard_title">
               <span class="text--itemcard_title ellipsis">
                <a class="link--itemcard" href="/DetailView.aspx?itemno=B204023305" target="_blank">
                 <span class="for-a11y">
                  브랜드명
                 </span>
                 <span class="text--brand">
                 </span>
                 <span class="for-a11y">
                  상품명
                 </span>
                 <span class="text--title">
                  2018 강화 속노랑 고구마 5kg 10kg/호박고구마
                 </span>
                </a>
               </span>
              </div>
              <div class="area--itemcard_price">
               <span class="discount" title="할인률">
                <strong class="text--discount">
                </strong>
                <span class="text--unit">
                </span>
                <span class="for-a11y">
                 할인
                </span>
               </span>
               <span class="price_seller">
                <span class="for-a11y">
                 할인적용금액
                </span>
                <strong class="text--price_seller">
                 27,800
                </strong>
                <span class="text--unit">
                 원
                </span>
               </span>
               <span class="price_original">
                <span class="for-a11y">
                 상품금액
                </span>
                <strong class="text--price_original">
                 27,900
                </strong>
                <span class="text--unit">
                 원
                </span>
               </span>
              </div>
             </div>
             <div class="section--itemcard_info_add">
              <ul class="list--addinfo">
               <li class="item">
                <span class="text--addinfo">
                 무료배송
                </span>
               </li>
              </ul>
             </div>
             <div class="section--itemcard_info_score">
              <ul class="list--score">
               <li class="item awards">
                <span class="for-a11y">
                 만족도
                 96
                 %입니다.
                </span>
                <div class="seller_awards" title="만족도 96 % 입니다">
                 <span class="awards_points" style="width:96%">
                 </span>
                 <span class="bg_star">
                 </span>
                </div>
               </li>
               <li class="item reviewcnt">
                <span class="text--reviewcnt">
                 상품평
                 99
                </span>
                <span class="for-a11y">
                 건
                </span>
               </li>
               <li class="item buycnt">
                <span class="text--buycnt">
                 구매
                 553
                </span>
                <span class="for-a11y">
                 건
                </span>
               </li>
              </ul>
             </div>
             <div class="section--itemcard_info_shop">
              [linkx]
              
             </div>
             <button class="button--favorite ">
              <span class="icon--favorite">
               <span class="for-a11y">
                관심상품 등록하기
               </span>
              </span>
             </button>
            </div>
           </div>
          </div>
         </div>
         <div class="component component--item_card type--general">
          <h4 class="text--module_title">
           일반상품 아이템카드
          </h4>
          <div class="itemcard">
           <div class="section--itemcard">
            <div class="section--itemcard_img">
             [linkx]
             
            </div>
            <div class="section--itemcard_info">
             <div class="section--itemcard_info_major">
              <div class="area--itemcard_title">
               <span class="text--itemcard_title ellipsis">
                <a class="link--itemcard" href="/DetailView.aspx?itemno=B585712810" target="_blank">
                 <span class="for-a11y">
                  브랜드명
                 </span>
                 <span class="text--brand">
                 </span>
                 <span class="for-a11y">
                  상품명
                 </span>
                 <span class="text--title">
                  (해남미소)두레 황토 꿀고구마 3kg 5kg
                 </span>
                </a>
               </span>
              </div>
              <div class="area--itemcard_price">
               <span class="price_seller">
                <span class="for-a11y">
                 상품금액
                </span>
                <strong class="text--price_seller">
                 16,500
                </strong>
                <span class="text--unit">
                 원
                </span>
               </span>
              </div>
             </div>
             <div class="section--itemcard_info_add">
              <ul class="list--addinfo">
               <li class="item">
                <span class="text--addinfo">
                 무료배송
                </span>
               </li>
              </ul>
             </div>
             <div class="section--itemcard_info_score">
              <ul class="list--score">
               <li class="item awards">
                <span class="for-a11y">
                 만족도
                 92
                 %입니다.
                </span>
                <div class="seller_awards" title="만족도 92 % 입니다">
                 <span class="awards_points" style="width:92%">
                 </span>
                 <span class="bg_star">
                 </span>
                </div>
               </li>
               <li class="item reviewcnt">
                <span class="text--reviewcnt">
                 상품평
                 135
                </span>
                <span class="for-a11y">
                 건
                </span>
               </li>
               <li class="item buycnt">
                <span class="text--buycnt">
                 구매
                 357
                </span>
                <span class="for-a11y">
                 건
                </span>
               </li>
              </ul>
             </div>
             <div class="section--itemcard_info_shop">
              [ahref]
              
              <span class="for-a11y">
               판매자평가정보
              </span>
              <ul class="list--store_info">
               <li class="item top_seller">
                <div class="section--advertisement ">
                 <button class="button--notice_about_advertisement" title="최우수판매자 안내 레이어 보기" type="button">
                  <span class="text">
                   최우수판매자
                  </span>
                 </button>
                 <div class="layer--information">
                  <strong class="text--information_title">
                   최우수판매자란?
                  </strong>
                  <p class="text--information_description">
                   옥션의 판매인증 평가기준을 모두 달성한 최상위 판매자
                  </p>
                  <button class="button--close_layer" type="button">
                   <span class="ir">
                    최우수판매자
                    안내 레이어 닫기
                   </span>
                  </button>
                 </div>
                </div>
               </li>
              </ul>
             </div>
             <button class="button--favorite ">
              <span class="icon--favorite">
               <span class="for-a11y">
                관심상품 등록하기
               </span>
              </span>
             </button>
            </div>
           </div>
          </div>
         </div>
         <div class="component component--item_card type--general">
          <h4 class="text--module_title">
           일반상품 아이템카드
          </h4>
          <div class="itemcard">
           <div class="section--itemcard">
            <div class="section--itemcard_img">
             [ahref]
             
            </div>
            <div class="section--itemcard_info">
             <div class="section--itemcard_info_major">
              <div class="area--itemcard_title">
               <span class="text--itemcard_title ellipsis">
                [ahref]
                
               </span>
              </div>
              <div class="area--itemcard_price">
               <span class="price_seller">
                <span class="for-a11y">
                 상품금액
                </span>
                <strong class="text--price_seller">
                 9,500
                </strong>
                <span class="text--unit">
                 원
                </span>
               </span>
              </div>
             </div>
             <div class="section--itemcard_info_add">
              <ul class="list--addinfo">
               <li class="item">
                <span class="text--addinfo">
                 배송비 2,500원
                </span>
               </li>
              </ul>
             </div>
             <div class="section--itemcard_info_score">
              <ul class="list--score">
               <li class="item awards">
                <span class="for-a11y">
                 만족도
                 100
                 %입니다.
                </span>
                <div class="seller_awards" title="만족도 100 % 입니다">
                 <span class="awards_points" style="width:100%">
                 </span>
                 <span class="bg_star">
                 </span>
                </div>
               </li>
               <li class="item reviewcnt">
                <span class="text--reviewcnt">
                 상품평
                 17
                </span>
                <span class="for-a11y">
                 건
                </span>
               </li>
               <li class="item buycnt">
                <span class="text--buycnt">
                 구매
                 474
                </span>
                <span class="for-a11y">
                 건
                </span>
               </li>
              </ul>
             </div>
             <div class="section--itemcard_info_shop">
              <a class="link--shop" href="/theyundoo" target="_blank" title="스토어로 이동">
               <span class="for-a11y">
                판매자
               </span>
               <span class="text">
                더연두
               </span>
              </a>
              <span class="for-a11y">
               판매자평가정보
              </span>
              <ul class="list--store_info">
               <li class="item">
                <span class="text--store_info">
                 배송
                </span>
               </li>
               <li class="item">
                <span class="text--store_info">
                 상품평우수
                </span>
               </li>
              </ul>
             </div>
             <button class="button--favorite ">
              <span class="icon--favorite">
               <span class="for-a11y">
                관심상품 등록하기
               </span>
              </span>
             </button>
            </div>
           </div>
          </div>
         </div>
         <div class="component component--item_card type--general">
          <h4 class="text--module_title">
           일반상품 아이템카드
          </h4>
          <div class="itemcard">
           <div class="section--component_title">
            <p class="text--title">
             일반등록
            </p>
            <span class="text--smiledelivery_slogan">
            </span>
           </div>
           <div class="section--itemcard">
            <div class="section--itemcard_img">
             [linkx]
             
            </div>
            <div class="section--itemcard_info">
             <div class="section--itemcard_info_major">
              <div class="area--itemcard_title">
               <span class="text--itemcard_title ellipsis">
                <a class="link--itemcard" href="/DetailView.aspx?itemno=B625893262" target="_blank">
                 <span class="for-a11y">
                  브랜드명
                 </span>
                 <span class="text--brand">
                 </span>
                 <span class="for-a11y">
                  상품명
                 </span>
                 <span class="text--title">
                  꿀고구마_1.5KG 박스
                 </span>
                </a>
               </span>
              </div>
              <div class="area--itemcard_price">
               <span class="price_seller">
                <span class="for-a11y">
                 상품금액
                </span>
                <strong class="text--price_seller">
                 7,490
                </strong>
                <span class="text--unit">
                 원
                </span>
               </span>
              </div>
             </div>
             <div class="section--itemcard_info_add">
              <ul class="list--addinfo">
               <li class="item">
                <span class="text--addinfo">
                 당일배송
                </span>
               </li>
               <li class="item">
                <span class="text--addinfo">
                 배송비 3,000원
                </span>
               </li>
              </ul>
             </div>
             <div class="section--itemcard_info_score">
              <ul class="list--score">
               <li class="item awards">
                <span class="for-a11y">
                 만족도
                 96
                 %입니다.
                </span>
                <div class="seller_awards" title="만족도 96 % 입니다">
                 <span class="awards_points" style="width:96%">
                 </span>
                 <span class="bg_star">
                 </span>
                </div>
               </li>
               <li class="item reviewcnt">
                <span class="text--reviewcnt">
                 상품평
                 434
                </span>
                <span class="for-a11y">
                 건
                </span>
               </li>
               <li class="item buycnt">
                <span class="text--buycnt">
                 구매
                 1,028
                </span>
                <span class="for-a11y">
                 건
                </span>
               </li>
              </ul>
             </div>
             <div class="section--itemcard_info_shop">
              [ahref]
              
              <span class="for-a11y">
               판매자평가정보
              </span>
              <ul class="list--store_info">
               <li class="item top_seller">
                <div class="section--advertisement ">
                 <button class="button--notice_about_advertisement" title="최우수판매자 안내 레이어 보기" type="button">
                  <span class="text">
                   최우수판매자
                  </span>
                 </button>
                 <div class="layer--information">
                  <strong class="text--information_title">
                   최우수판매자란?
                  </strong>
                  <p class="text--information_description">
                   옥션의 판매인증 평가기준을 모두 달성한 최상위 판매자
                  </p>
                  <button class="button--close_layer" type="button">
                   <span class="ir">
                    최우수판매자
                    안내 레이어 닫기
                   </span>
                  </button>
                 </div>
                </div>
               </li>
              </ul>
             </div>
             <button class="button--favorite ">
              <span class="icon--favorite">
               <span class="for-a11y">
                관심상품 등록하기
               </span>
              </span>
             </button>
            </div>
           </div>
          </div>
         </div>
         <div class="component component--item_card type--general">
          <h4 class="text--module_title">
           일반상품 아이템카드
          </h4>
          <div class="itemcard">
           <div class="section--itemcard">
            <div class="section--itemcard_img">
             [ahref]
             
            </div>
            <div class="section--itemcard_info">
             <div class="section--itemcard_info_major">
              <div class="area--itemcard_title">
               <span class="text--itemcard_title ellipsis">
                [linkx]
                
               </span>
              </div>
              <div class="area--itemcard_price">
               <span class="price_seller">
                <span class="for-a11y">
                 상품금액
                </span>
                <strong class="text--price_seller">
                 15,900
                </strong>
                <span class="text--unit">
                 원
                </span>
               </span>
              </div>
             </div>
             <div class="section--itemcard_info_add">
              <ul class="list--addinfo">
               <li class="item">
                <span class="text--addinfo">
                 무료배송
                </span>
               </li>
              </ul>
             </div>
             <div class="section--itemcard_info_score">
              <ul class="list--score">
               <li class="item awards">
                <span class="for-a11y">
                 만족도
                 94
                 %입니다.
                </span>
                <div class="seller_awards" title="만족도 94 % 입니다">
                 <span class="awards_points" style="width:94%">
                 </span>
                 <span class="bg_star">
                 </span>
                </div>
               </li>
               <li class="item reviewcnt">
                <span class="text--reviewcnt">
                 상품평
                 1,648
                </span>
                <span class="for-a11y">
                 건
                </span>
               </li>
               <li class="item buycnt">
                <span class="text--buycnt">
                 구매
                 4,061
                </span>
                <span class="for-a11y">
                 건
                </span>
               </li>
              </ul>
             </div>
             <div class="section--itemcard_info_shop">
              <a class="link--shop" href="/aska11" target="_blank" title="스토어로 이동">
               <span class="for-a11y">
                판매자
               </span>
               <span class="text">
                아삭아삭1
               </span>
              </a>
              <span class="for-a11y">
               판매자평가정보
              </span>
              <ul class="list--store_info">
               <li class="item">
                <span class="text--store_info">
                 배송
                </span>
               </li>
               <li class="item">
                <span class="text--store_info">
                 상품평
                </span>
               </li>
               <li class="item">
                <span class="text--store_info">
                 고객응대우수
                </span>
               </li>
              </ul>
             </div>
             <button class="button--favorite ">
              <span class="icon--favorite">
               <span class="for-a11y">
                관심상품 등록하기
               </span>
              </span>
             </button>
            </div>
           </div>
          </div>
         </div>
         <div class="component component--item_card type--general">
          <h4 class="text--module_title">
           일반상품 아이템카드
          </h4>
          <div class="itemcard">
           <div class="section--itemcard">
            <div class="section--itemcard_img">
             <a class="link--itemcard image--loading" href="/DetailView.aspx?itemno=A962416460" target="_blank">
              <div class="lazyload-placeholder" style="height:100%">
              </div>
             </a>
            </div>
            <div class="section--itemcard_info">
             <div class="section--itemcard_info_major">
              <div class="area--itemcard_title">
               <span class="text--itemcard_title ellipsis">
                <a class="link--itemcard" href="/DetailView.aspx?itemno=A962416460" target="_blank">
                 <span class="for-a11y">
                  브랜드명
                 </span>
                 <span class="text--brand">
                 </span>
                 <span class="for-a11y">
                  상품명
                 </span>
                 <span class="text--title">
                  추봉하 꿀고구마 2kg 특상/2개구매시5kg발송
                 </span>
                </a>
               </span>
              </div>
              <div class="area--itemcard_price">
               <span class="discount" title="할인률">
                <strong class="text--discount">
                 50
                </strong>
                <span class="text--unit">
                 %
                </span>
                <span class="for-a11y">
                 할인
                </span>
               </span>
               <span class="price_seller">
                <span class="for-a11y">
                 할인적용금액
                </span>
                <strong class="text--price_seller">
                 11,900
                </strong>
                <span class="text--unit">
                 원
                </span>
               </span>
               <span class="price_original">
                <span class="for-a11y">
                 상품금액
                </span>
                <strong class="text--price_original">
                 23,800
                </strong>
                <span class="text--unit">
                 원
                </span>
               </span>
              </div>
             </div>
             <div class="section--itemcard_info_add">
              <ul class="list--addinfo">
               <li class="item">
                <span class="text--addinfo">
                 무료배송
                </span>
               </li>
              </ul>
             </div>
             <div class="section--itemcard_info_score">
              <ul class="list--score">
               <li class="item awards">
                <span class="for-a11y">
                 만족도
                 94
                 %입니다.
                </span>
                <div class="seller_awards" title="만족도 94 % 입니다">
                 <span class="awards_points" style="width:94%">
                 </span>
                 <span class="bg_star">
                 </span>
                </div>
               </li>
               <li class="item reviewcnt">
                <span class="text--reviewcnt">
                 상품평
                 3,880
                </span>
                <span class="for-a11y">
                 건
                </span>
               </li>
               <li class="item buycnt">
                <span class="text--buycnt">
                 구매
                 12,638
                </span>
                <span class="for-a11y">
                 건
                </span>
               </li>
              </ul>
             </div>
             <div class="section--itemcard_info_shop">
              <a class="link--shop" href="/gamdong" target="_blank" title="스토어로 이동">
               <span class="for-a11y">
                판매자
               </span>
               <span class="text">
                감동몰
               </span>
              </a>
              <span class="for-a11y">
               판매자평가정보
              </span>
              <ul class="list--store_info">
               <li class="item top_seller">
                <div class="section--advertisement ">
                 <button class="button--notice_about_advertisement" title="최우수판매자 안내 레이어 보기" type="button">
                  <span class="text">
                   최우수판매자
                  </span>
                 </button>
                 <div class="layer--information">
                  <strong class="text--information_title">
                   최우수판매자란?
                  </strong>
                  <p class="text--information_description">
                   옥션의 판매인증 평가기준을 모두 달성한 최상위 판매자
                  </p>
                  <button class="button--close_layer" type="button">
                   <span class="ir">
                    최우수판매자
                    안내 레이어 닫기
                   </span>
                  </button>
                 </div>
                </div>
               </li>
              </ul>
             </div>
             <button class="button--favorite ">
              <span class="icon--favorite">
               <span class="for-a11y">
                관심상품 등록하기
               </span>
              </span>
             </button>
             <button class="button--related_item" title="연관상품 5 개가 있습니다. ">
              <span class="text--related_item">
               <b class="text--title">
                연관상품
               </b>
               <b class="text--cnt">
                5
               </b>
              </span>
             </button>
            </div>
           </div>
          </div>
          <div class="popup--related_items ">
           <h2 class="section--title">
            <b>[area1][mkey1][symbolx][pkeyx][symbolx][area1][keyword1][bracketl1][area1][keywordx][bracketr1][symbolx][bracketl2][area1][keywordx][bracketr2][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx]</b>
           </h2>
           <div class="section--body">
            <div class="section--related_items">
             <div class="section--slick_area">
              <div class="list--related_items">
               <div class="slick-slider slick-initialized">
                <div class="slick-list">
                 <div class="slick-track" style="width:0%;left:NaN%">
                 </div>
                </div>
               </div>
              </div>
             </div>
            </div>
           </div>
          </div>
         </div>
         <div class="component component--item_card type--general">
          <h4 class="text--module_title">
           일반상품 아이템카드
          </h4>
          <div class="itemcard">
           <div class="section--itemcard">
            <div class="section--itemcard_img">
             [linkx]
             
            </div>
            <div class="section--itemcard_info">
             <div class="section--itemcard_info_major">
              <div class="area--itemcard_title">
               <span class="text--itemcard_title ellipsis">
                <a class="link--itemcard" href="/DetailView.aspx?itemno=B346138844" target="_blank">
                 <span class="for-a11y">
                  브랜드명
                 </span>
                 <span class="text--brand">
                  봉팔형님
                 </span>
                 <span class="for-a11y">
                  상품명
                 </span>
                 <span class="text--title">
                  (깜짝할인)봉팔형님 촉촉 달콤한 꿀고구마 3kg
                 </span>
                </a>
               </span>
              </div>
              <div class="area--itemcard_price">
               <span class="price_seller">
                <span class="for-a11y">
                 상품금액
                </span>
                <strong class="text--price_seller">
                 6,900
                </strong>
                <span class="text--unit">
                 원
                </span>
               </span>
              </div>
             </div>
             <div class="section--itemcard_info_add">
              <ul class="list--addinfo">
               <li class="item">
                <span class="text--addinfo">
                 무료배송
                </span>
               </li>
              </ul>
             </div>
             <div class="section--itemcard_info_score">
              <ul class="list--score">
               <li class="item awards">
                <span class="for-a11y">
                 만족도
                 94
                 %입니다.
                </span>
                <div class="seller_awards" title="만족도 94 % 입니다">
                 <span class="awards_points" style="width:94%">
                 </span>
                 <span class="bg_star">
                 </span>
                </div>
               </li>
               <li class="item reviewcnt">
                <span class="text--reviewcnt">
                 상품평
                 844
                </span>
                <span class="for-a11y">
                 건
                </span>
               </li>
               <li class="item buycnt">
                <span class="text--buycnt">
                 구매
                 1,964
                </span>
                <span class="for-a11y">
                 건
                </span>
               </li>
              </ul>
             </div>
             <div class="section--itemcard_info_shop">
              <a class="link--shop" href="/soimall" target="_blank" title="스토어로 이동">
               <span class="for-a11y">
                판매자
               </span>
               <span class="text">
                소이몰SM
               </span>
              </a>
              <span class="for-a11y">
               판매자평가정보
              </span>
              <ul class="list--store_info">
               <li class="item top_seller">
                <div class="section--advertisement ">
                 <button class="button--notice_about_advertisement" title="최우수판매자 안내 레이어 보기" type="button">
                  <span class="text">
                   최우수판매자
                  </span>
                 </button>
                 <div class="layer--information">
                  <strong class="text--information_title">
                   최우수판매자란?
                  </strong>
                  <p class="text--information_description">
                   옥션의 판매인증 평가기준을 모두 달성한 최상위 판매자
                  </p>
                  <button class="button--close_layer" type="button">
                   <span class="ir">
                    최우수판매자
                    안내 레이어 닫기
                   </span>
                  </button>
                 </div>
                </div>
               </li>
              </ul>
             </div>
             <button class="button--favorite ">
              <span class="icon--favorite">
               <span class="for-a11y">
                관심상품 등록하기
               </span>
              </span>
             </button>
            </div>
           </div>
          </div>
         </div>
         <div class="component component--item_card type--general">
          <h4 class="text--module_title">
           일반상품 아이템카드
          </h4>
          <div class="itemcard">
           <div class="section--itemcard">
            <div class="section--itemcard_img">
             [ahref]
             
            </div>
            <div class="section--itemcard_info">
             <div class="section--itemcard_info_major">
              <div class="area--itemcard_title">
               <span class="text--itemcard_title ellipsis">
                <a class="link--itemcard" href="/DetailView.aspx?itemno=B553814917" target="_blank">
                 <span class="for-a11y">
                  브랜드명
                 </span>
                 <span class="text--brand">
                  아임닭
                 </span>
                 <span class="for-a11y">
                  상품명
                 </span>
                 <span class="text--title">
                  (현대Hmall) 아임웰  스팀으로 쪄낸 한입 고구마 큐브 100g x 15팩
                 </span>
                </a>
               </span>
              </div>
              <div class="area--itemcard_price">
               <span class="price_seller">
                <span class="for-a11y">
                 상품금액
                </span>
                <strong class="text--price_seller">
                 20,000
                </strong>
                <span class="text--unit">
                 원
                </span>
               </span>
              </div>
             </div>
             <div class="section--itemcard_info_add">
              <ul class="list--addinfo">
               <li class="item">
                <span class="text--addinfo">
                 무료배송
                </span>
               </li>
              </ul>
             </div>
             <div class="section--itemcard_info_score">
              <ul class="list--score">
               <li class="item awards">
                <span class="for-a11y">
                 만족도
                 98
                 %입니다.
                </span>
                <div class="seller_awards" title="만족도 98 % 입니다">
                 <span class="awards_points" style="width:98%">
                 </span>
                 <span class="bg_star">
                 </span>
                </div>
               </li>
               <li class="item reviewcnt">
                <span class="text--reviewcnt">
                 상품평
                 73
                </span>
                <span class="for-a11y">
                 건
                </span>
               </li>
               <li class="item buycnt">
                <span class="text--buycnt">
                 구매
                 340
                </span>
                <span class="for-a11y">
                 건
                </span>
               </li>
              </ul>
             </div>
             <div class="section--itemcard_info_shop">
              <a class="link--shop" href="/hmall01" target="_blank" title="스토어로 이동">
               <span class="for-a11y">
                판매자
               </span>
               <span class="text">
                현대Hmall
               </span>
              </a>
              <span class="for-a11y">
               판매자평가정보
              </span>
              <ul class="list--store_info">
               <li class="item top_seller">
                <div class="section--advertisement ">
                 <button class="button--notice_about_advertisement" title="최우수판매자 안내 레이어 보기" type="button">
                  <span class="text">
                   최우수판매자
                  </span>
                 </button>
                 <div class="layer--information">
                  <strong class="text--information_title">
                   최우수판매자란?
                  </strong>
                  <p class="text--information_description">
                   옥션의 판매인증 평가기준을 모두 달성한 최상위 판매자
                  </p>
                  <button class="button--close_layer" type="button">
                   <span class="ir">
                    최우수판매자
                    안내 레이어 닫기
                   </span>
                  </button>
                 </div>
                </div>
               </li>
              </ul>
             </div>
             <button class="button--favorite ">
              <span class="icon--favorite">
               <span class="for-a11y">
                관심상품 등록하기
               </span>
              </span>
             </button>
            </div>
           </div>
          </div>
         </div>
         <div class="component component--item_card type--general">
          <h4 class="text--module_title">
           일반상품 아이템카드
          </h4>
          <div class="itemcard">
           <div class="section--itemcard">
            <div class="section--itemcard_img">
             <a class="link--itemcard image--loading" href="/DetailView.aspx?itemno=B405187337" target="_blank">
              <div class="lazyload-placeholder" style="height:100%">
              </div>
             </a>
            </div>
            <div class="section--itemcard_info">
             <div class="section--itemcard_info_major">
              <div class="area--itemcard_title">
               <span class="text--itemcard_title ellipsis">
                <a class="link--itemcard" href="/DetailView.aspx?itemno=B405187337" target="_blank">
                 <span class="for-a11y">
                  브랜드명
                 </span>
                 <span class="text--brand">
                  파머스토리
                 </span>
                 <span class="for-a11y">
                  상품명
                 </span>
                 <span class="text--title">
                  해남 박공배님의 황토 햇 꿀고구마 3kg(특상)무료배송
                 </span>
                </a>
               </span>
              </div>
              <div class="area--itemcard_price">
               <span class="price_seller">
                <span class="for-a11y">
                 상품금액
                </span>
                <strong class="text--price_seller">
                 12,900
                </strong>
                <span class="text--unit">
                 원
                </span>
               </span>
              </div>
             </div>
             <div class="section--itemcard_info_add">
              <ul class="list--addinfo">
               <li class="item">
                <span class="text--addinfo">
                 무료배송
                </span>
               </li>
              </ul>
             </div>
             <div class="section--itemcard_info_score">
              <ul class="list--score">
               <li class="item awards">
                <span class="for-a11y">
                 만족도
                 94
                 %입니다.
                </span>
                <div class="seller_awards" title="만족도 94 % 입니다">
                 <span class="awards_points" style="width:94%">
                 </span>
                 <span class="bg_star">
                 </span>
                </div>
               </li>
               <li class="item reviewcnt">
                <span class="text--reviewcnt">
                 상품평
                 7,715
                </span>
                <span class="for-a11y">
                 건
                </span>
               </li>
               <li class="item buycnt">
                <span class="text--buycnt">
                 구매
                 16,818
                </span>
                <span class="for-a11y">
                 건
                </span>
               </li>
              </ul>
             </div>
             <div class="section--itemcard_info_shop">
              [ahref]
              
              <span class="for-a11y">
               판매자평가정보
              </span>
              <ul class="list--store_info">
               <li class="item">
                <span class="text--store_info">
                 상품평
                </span>
               </li>
               <li class="item">
                <span class="text--store_info">
                 고객응대우수
                </span>
               </li>
              </ul>
             </div>
             <button class="button--favorite ">
              <span class="icon--favorite">
               <span class="for-a11y">
                관심상품 등록하기
               </span>
              </span>
             </button>
             <button class="button--related_item" title="연관상품 7 개가 있습니다. ">
              <span class="text--related_item">
               <b class="text--title">
                연관상품
               </b>
               <b class="text--cnt">
                7
               </b>
              </span>
             </button>
            </div>
           </div>
          </div>
          <div class="popup--related_items ">
           <h2 class="section--title">
            <b>[area1][mkey1][symbolx][pkeyx][symbolx][area1][keyword1][bracketl1][area1][keywordx][bracketr1][symbolx][bracketl2][area1][keywordx][bracketr2][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx]</b>
           </h2>
           <div class="section--body">
            <div class="section--related_items">
             <div class="section--slick_area">
              <div class="list--related_items">
               <div class="slick-slider slick-initialized">
                <div class="slick-list">
                 <div class="slick-track" style="width:0%;left:NaN%">
                 </div>
                </div>
               </div>
              </div>
             </div>
            </div>
           </div>
          </div>
         </div>
         <div class="component component--item_card type--general">
          <h4 class="text--module_title">
           일반상품 아이템카드
          </h4>
          <div class="itemcard">
           <div class="section--itemcard">
            <div class="section--itemcard_img">
             <a class="link--itemcard image--loading" href="/DetailView.aspx?itemno=B295802924" target="_blank">
              <div class="lazyload-placeholder" style="height:100%">
              </div>
             </a>
            </div>
            <div class="section--itemcard_info">
             <div class="section--itemcard_info_major">
              <div class="area--itemcard_title">
               <span class="text--itemcard_title ellipsis">
                <a class="link--itemcard" href="/DetailView.aspx?itemno=B295802924" target="_blank">
                 <span class="for-a11y">
                  브랜드명
                 </span>
                 <span class="text--brand">
                 </span>
                 <span class="for-a11y">
                  상품명
                 </span>
                 <span class="text--title">
                  2018 꿀 떨어지는 호박고구마 꿀밤고구마 5kg 10kg
                 </span>
                </a>
               </span>
              </div>
              <div class="area--itemcard_price">
               <span class="price_seller">
                <span class="for-a11y">
                 상품금액
                </span>
                <strong class="text--price_seller">
                 15,700
                </strong>
                <span class="text--unit">
                 원
                </span>
               </span>
              </div>
             </div>
             <div class="section--itemcard_info_add">
              <ul class="list--addinfo">
               <li class="item">
                <span class="text--addinfo">
                 무료배송
                </span>
               </li>
              </ul>
             </div>
             <div class="section--itemcard_info_score">
              <ul class="list--score">
               <li class="item awards">
                <span class="for-a11y">
                 만족도
                 90
                 %입니다.
                </span>
                <div class="seller_awards" title="만족도 90 % 입니다">
                 <span class="awards_points" style="width:90%">
                 </span>
                 <span class="bg_star">
                 </span>
                </div>
               </li>
               <li class="item reviewcnt">
                <span class="text--reviewcnt">
                 상품평
                 4,477
                </span>
                <span class="for-a11y">
                 건
                </span>
               </li>
               <li class="item buycnt">
                <span class="text--buycnt">
                 구매
                 12,741
                </span>
                <span class="for-a11y">
                 건
                </span>
               </li>
              </ul>
             </div>
             <div class="section--itemcard_info_shop">
              <a class="link--shop" href="/rohsc333" target="_blank" title="스토어로 이동">
               <span class="for-a11y">
                판매자
               </span>
               <span class="text">
                가나안농산
               </span>
              </a>
              <span class="for-a11y">
               판매자평가정보
              </span>
              <ul class="list--store_info">
               <li class="item">
                <span class="text--store_info">
                 배송
                </span>
               </li>
               <li class="item">
                <span class="text--store_info">
                 상품평우수
                </span>
               </li>
              </ul>
             </div>
             <button class="button--favorite ">
              <span class="icon--favorite">
               <span class="for-a11y">
                관심상품 등록하기
               </span>
              </span>
             </button>
            </div>
           </div>
          </div>
         </div>
         <div class="component component--item_card type--general">
          <h4 class="text--module_title">
           일반상품 아이템카드
          </h4>
          <div class="itemcard">
           <div class="section--itemcard">
            <div class="section--itemcard_img">
             [ahref]
             
            </div>
            <div class="section--itemcard_info">
             <div class="section--itemcard_info_major">
              <div class="area--itemcard_title">
               <span class="text--itemcard_title ellipsis">
                <a class="link--itemcard" href="/DetailView.aspx?itemno=B593792130" target="_blank">
                 <span class="for-a11y">
                  브랜드명
                 </span>
                 <span class="text--brand">
                  파머스토리
                 </span>
                 <span class="for-a11y">
                  상품명
                 </span>
                 <span class="text--title">
                  고구마 / 전남해남 김형식님의 꿀고구마 5kg(특상)
                 </span>
                </a>
               </span>
              </div>
              <div class="area--itemcard_price">
               <span class="discount" title="할인률">
                <strong class="text--discount">
                </strong>
                <span class="text--unit">
                </span>
                <span class="for-a11y">
                 할인
                </span>
               </span>
               <span class="price_seller">
                <span class="for-a11y">
                 할인적용금액
                </span>
                <strong class="text--price_seller">
                 15,820
                </strong>
                <span class="text--unit">
                 원
                </span>
               </span>
               <span class="price_original">
                <span class="for-a11y">
                 상품금액
                </span>
                <strong class="text--price_original">
                 15,900
                </strong>
                <span class="text--unit">
                 원
                </span>
               </span>
              </div>
             </div>
             <div class="section--itemcard_info_add">
              <ul class="list--addinfo">
               <li class="item">
                <span class="text--addinfo">
                 무료배송
                </span>
               </li>
              </ul>
             </div>
             <div class="section--itemcard_info_score">
              <ul class="list--score">
               <li class="item awards">
                <span class="for-a11y">
                 만족도
                 92
                 %입니다.
                </span>
                <div class="seller_awards" title="만족도 92 % 입니다">
                 <span class="awards_points" style="width:92%">
                 </span>
                 <span class="bg_star">
                 </span>
                </div>
               </li>
               <li class="item reviewcnt">
                <span class="text--reviewcnt">
                 상품평
                 122
                </span>
                <span class="for-a11y">
                 건
                </span>
               </li>
               <li class="item buycnt">
                <span class="text--buycnt">
                 구매
                 255
                </span>
                <span class="for-a11y">
                 건
                </span>
               </li>
              </ul>
             </div>
             <div class="section--itemcard_info_shop">
              <a class="link--shop" href="/freshvil" target="_blank" title="스토어로 이동">
               <span class="for-a11y">
                판매자
               </span>
               <span class="text">
                freshvil
               </span>
              </a>
              <span class="for-a11y">
               판매자평가정보
              </span>
              <ul class="list--store_info">
               <li class="item top_seller">
                <div class="section--advertisement ">
                 <button class="button--notice_about_advertisement" title="최우수판매자 안내 레이어 보기" type="button">
                  <span class="text">
                   최우수판매자
                  </span>
                 </button>
                 <div class="layer--information">
                  <strong class="text--information_title">
                   최우수판매자란?
                  </strong>
                  <p class="text--information_description">
                   옥션의 판매인증 평가기준을 모두 달성한 최상위 판매자
                  </p>
                  <button class="button--close_layer" type="button">
                   <span class="ir">
                    최우수판매자
                    안내 레이어 닫기
                   </span>
                  </button>
                 </div>
                </div>
               </li>
              </ul>
             </div>
             <button class="button--favorite ">
              <span class="icon--favorite">
               <span class="for-a11y">
                관심상품 등록하기
               </span>
              </span>
             </button>
             <button class="button--related_item" title="연관상품 4 개가 있습니다. ">
              <span class="text--related_item">
               <b class="text--title">
                연관상품
               </b>
               <b class="text--cnt">
                4
               </b>
              </span>
             </button>
            </div>
           </div>
          </div>
          <div class="popup--related_items ">
           <h2 class="section--title">
            [area1][mkey1][symbolx][pkeyx][symbolx][area1][keyword1][bracketl1][area1][keywordx][bracketr1][symbolx][bracketl2][area1][keywordx][bracketr2][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx]
           </h2>
           <div class="section--body">
            <div class="section--related_items">
             <div class="section--slick_area">
              <div class="list--related_items">
               <div class="slick-slider slick-initialized">
                <div class="slick-list">
                 <div class="slick-track" style="width:0%;left:NaN%">
                 </div>
                </div>
               </div>
              </div>
             </div>
            </div>
           </div>
          </div>
         </div>
         <div class="component component--item_card type--general">
          <h4 class="text--module_title">
           일반상품 아이템카드
          </h4>
          <div class="itemcard">
           <div class="section--itemcard">
            <div class="section--itemcard_img">
             [linkx]
             
            </div>
            <div class="section--itemcard_info">
             <div class="section--itemcard_info_major">
              <div class="area--itemcard_title">
               <span class="text--itemcard_title ellipsis">
                <a class="link--itemcard" href="/DetailView.aspx?itemno=A944323576" target="_blank">
                 <span class="for-a11y">
                  브랜드명
                 </span>
                 <span class="text--brand">
                 </span>
                 <span class="for-a11y">
                  상품명
                 </span>
                 <span class="text--title">
                  (신제품)봉팔형님/ 반건조 꿀 고구마말랭이 10봉
                 </span>
                </a>
               </span>
              </div>
              <div class="area--itemcard_price">
               <span class="price_seller">
                <span class="for-a11y">
                 상품금액
                </span>
                <strong class="text--price_seller">
                 16,900
                </strong>
                <span class="text--unit">
                 원
                </span>
               </span>
              </div>
             </div>
             <div class="section--itemcard_info_add">
              <ul class="list--addinfo">
               <li class="item">
                <span class="text--addinfo">
                 무료배송
                </span>
               </li>
              </ul>
             </div>
             <div class="section--itemcard_info_score">
              <ul class="list--score">
               <li class="item awards">
                <span class="for-a11y">
                 만족도
                 96
                 %입니다.
                </span>
                <div class="seller_awards" title="만족도 96 % 입니다">
                 <span class="awards_points" style="width:96%">
                 </span>
                 <span class="bg_star">
                 </span>
                </div>
               </li>
               <li class="item reviewcnt">
                <span class="text--reviewcnt">
                 상품평
                 253
                </span>
                <span class="for-a11y">
                 건
                </span>
               </li>
               <li class="item buycnt">
                <span class="text--buycnt">
                 구매
                 3,999
                </span>
                <span class="for-a11y">
                 건
                </span>
               </li>
              </ul>
             </div>
             <div class="section--itemcard_info_shop">
              <a class="link--shop" href="/soimall" target="_blank" title="스토어로 이동">
               <span class="for-a11y">
                판매자
               </span>
               <span class="text">
                소이몰SM
               </span>
              </a>
              <span class="for-a11y">
               판매자평가정보
              </span>
              <ul class="list--store_info">
               <li class="item top_seller">
                <div class="section--advertisement ">
                 <button class="button--notice_about_advertisement" title="최우수판매자 안내 레이어 보기" type="button">
                  <span class="text">
                   최우수판매자
                  </span>
                 </button>
                 <div class="layer--information">
                  <strong class="text--information_title">
                   최우수판매자란?
                  </strong>
                  <p class="text--information_description">
                   옥션의 판매인증 평가기준을 모두 달성한 최상위 판매자
                  </p>
                  <button class="button--close_layer" type="button">
                   <span class="ir">
                    최우수판매자
                    안내 레이어 닫기
                   </span>
                  </button>
                 </div>
                </div>
               </li>
              </ul>
             </div>
             <button class="button--favorite ">
              <span class="icon--favorite">
               <span class="for-a11y">
                관심상품 등록하기
               </span>
              </span>
             </button>
            </div>
           </div>
          </div>
         </div>
         <div class="component component--item_card type--general">
          <h4 class="text--module_title">
           일반상품 아이템카드
          </h4>
          <div class="itemcard">
           <div class="section--itemcard">
            <div class="section--itemcard_img">
             [ahref]
             
            </div>
            <div class="section--itemcard_info">
             <div class="section--itemcard_info_major">
              <div class="area--itemcard_title">
               <span class="text--itemcard_title ellipsis">
                <a class="link--itemcard" href="/DetailView.aspx?itemno=B468256765" target="_blank">
                 <span class="for-a11y">
                  브랜드명
                 </span>
                 <span class="text--brand">
                 </span>
                 <span class="for-a11y">
                  상품명
                 </span>
                 <span class="text--title">
                  재구매율 높은 황토 햇 꿀밤고구마 10kg(한입)(갤러리아)
                 </span>
                </a>
               </span>
              </div>
              <div class="area--itemcard_price">
               <span class="price_seller">
                <span class="for-a11y">
                 상품금액
                </span>
                <strong class="text--price_seller">
                 14,900
                </strong>
                <span class="text--unit">
                 원
                </span>
               </span>
              </div>
             </div>
             <div class="section--itemcard_info_add">
              <ul class="list--addinfo">
               <li class="item">
                <span class="text--addinfo">
                 무료배송
                </span>
               </li>
              </ul>
             </div>
             <div class="section--itemcard_info_score">
              <ul class="list--score">
               <li class="item awards">
                <span class="for-a11y">
                 만족도
                 96
                 %입니다.
                </span>
                <div class="seller_awards" title="만족도 96 % 입니다">
                 <span class="awards_points" style="width:96%">
                 </span>
                 <span class="bg_star">
                 </span>
                </div>
               </li>
               <li class="item reviewcnt">
                <span class="text--reviewcnt">
                 상품평
                 1,429
                </span>
                <span class="for-a11y">
                 건
                </span>
               </li>
               <li class="item buycnt">
                <span class="text--buycnt">
                 구매
                 2,771
                </span>
                <span class="for-a11y">
                 건
                </span>
               </li>
              </ul>
             </div>
             <div class="section--itemcard_info_shop">
              <a class="link--shop" href="/galleria3" target="_blank" title="스토어로 이동">
               <span class="for-a11y">
                판매자
               </span>
               <span class="text">
                갤러리아Mall
               </span>
              </a>
              <span class="for-a11y">
               판매자평가정보
              </span>
              <ul class="list--store_info">
               <li class="item">
                <span class="text--store_info">
                 배송
                </span>
               </li>
               <li class="item">
                <span class="text--store_info">
                 상품평우수
                </span>
               </li>
              </ul>
             </div>
             <button class="button--favorite ">
              <span class="icon--favorite">
               <span class="for-a11y">
                관심상품 등록하기
               </span>
              </span>
             </button>
            </div>
           </div>
          </div>
         </div>
        </div>
        <div class="section--module_wrap" module-design-id="24">
         <div class="component component--pagination">
          <h4 class="text--module_title">
           페이징
          </h4>
          <span class="link--previous_page off" title="첫 페이지 입니다">
           <span class="icon">
            <span class="ir">
             첫 페이지 입니다.
            </span>
           </span>
          </span>
          <span class="link--page on" title="현재 페이지는 1 페이지 입니다.">
           1
           <span class="ir">
            현재 페이지는 1 페이지 입니다.
           </span>
          </span>
          <a class="link--page" href="/list?category=51220100&amp;k=11&amp;p=2" title="2 페이지로 이동합니다.">
           2
           <span class="ir">
            2 페이지로 이동합니다.
           </span>
          </a>
          [linkx]
          
          <a class="link--page" href="/list?category=51220100&amp;k=11&amp;p=4" title="4 페이지로 이동합니다.">
           4
           <span class="ir">
            4 페이지로 이동합니다.
           </span>
          </a>
          [ahref]
          
          [ahref]
          
          [ahref]
          
          [linkx]
          
          [linkx]
          
          <a class="link--page" href="/list?category=51220100&amp;k=11&amp;p=10" title="10 페이지로 이동합니다.">
           10
           <span class="ir">
            10 페이지로 이동합니다.
           </span>
          </a>
          [ahref]
          
         </div>
        </div>
        <div class="section--module_wrap" module-design-id="25">
         <div class="component component--sponsor_link">
          <h4 class="text--module_title">
           스폰서링크
          </h4>
          <div class="section--component_title">
           <p class="text--title">
            스폰서링크
           </p>
           <div class="section--advertisement ">
            <button class="button--notice_about_advertisement" title="광고 안내 레이어 보기" type="button">
             <span class="text">
              광고
             </span>
            </button>
            <div class="layer--information">
             <strong class="text--information_title">
              스폰서링크란?
             </strong>
             <p class="text--information_description">
              제휴사의 광고가 전시되는 영역입니다.
             </p>
             <button class="button--close_layer" type="button">
              <span class="ir">
               광고
               안내 레이어 닫기
              </span>
             </button>
            </div>
           </div>
          </div>
          [linkx]
          
          <ul class="section--link_list">
           <li class="item">
            <div class="section--item_index">
             <span class="text--item_index">
              1
             </span>
            </div>
            <a class="link--sponsor" href="/adcr?x=LbU/13B11tV3nmbMsy+oPP./w==kI+LcYDfEizpxGNcCh82nL6qkqcZ182L3EshJ+t3d/7ilt6/TQpP9FM3956aft0PY/p6w1Iu2GFuK35X7BUMn+u9CAc78bGrUYXDTYsYxO70g+9rAQIimwbqz24uKxCN4Vp0MFqT5xxCTtTRSrUx9coTSIv0UXGzYz/d4Ip387wFX+LSFeBnE64U9z7D1mXg19SgpEC1PftFgF/E2712HsBKh4N5FQQs7BI4/W+t+2TekdPsSN+NJXUpZRIjunnXqjVcKE5tZnhbYTf9gqoIzPhfAfhax/82OKKTKLnV+fGhWI0AGLtK9Q4hQuEDig36D7Vi8WleV0nwirCyWC9BCdU9caKor8dI54Z9irE1D26QZSQkKZDR5HVfuVZS6xRgCxkMlYMw9L/zQbsr607uBt+12bs0u6BGvEygon9QJNxti38PRck6GTKtRCZBADB+p2Jy7f+Gm0mw+myyl7S/vCb6xYdJ3D+MJZastMu5r9vSkRaEX8hN62L53A4kjyFn0bzUhx4K+KUcnrS7EO9rcQoDqDqAHJCPl98OfxHFG1ddR+h+XIn7q6Fa2fzeA9NEDx39p8JrW0OndZnE9hMSMDc++KMuAQyTI93FQVbc6UI1QQifwtrQ7F5xWO60YGTxxYqdH3IZEdthW3YoACFOHf2iSW77tBQQC76OkJ2kkYQ5sZfg+c1kziwOxF4eumcio" target="_blank" title="닭가슴살 감동쇼핑 랭킹닭컴 페이지로 이동합니다.">
             <p class="title">
              닭가슴살 감동쇼핑 랭킹닭컴
             </p>
             <p class="link">
              www.rankingdak.com
             </p>
             <p class="description">
              간편하고 든든하다! 달콤한 꿀 고구마! 아이스고구마/말랭이/쉐이크 까지! 무료배송
             </p>
            </a>
           </li>
           <li class="item">
            <div class="section--item_index">
             <span class="text--item_index">
              2
             </span>
            </div>
            <a class="link--sponsor" href="/adcr?x=dvc7Bk9elALbO1/EfzW4jf./w==kJCKcknQYxV9L7gpV1+O4hsVyS8Xqe0WgU/XV+FMOxQ6URP8Ed9Y/OuNErjg492skcx/MwxTz6nnmWqY1HZ2NiiJU5h4brsvNsBoEKI4H+4ntSZJ4CPoEP3Adn17F57N4Kwv9XkezGO+kRwNDXHHlEetP8KL4TYlba65gdvOHF03UrWnod5BzU7etBtUbPiF5mxQCTKDGKYuqbRSnrVMQAU7QNq+Z5o4O79up955Fk/h4byPt5/x3yy8DFjjyq+bh8GmiAUKSycJTgMl/s35WROZsj1Qd9yg2vJ+NdcLKV/M3g4yte/y5Nya5HGXzQjwLX9aqrLEuQ5oPwU6Gw6+smowe0GdVbFzmBOQ0Lqf41B67PPiPB12vVYb8dOPpxHRXe6qzLAnPK1gkaYCFpeVR+j4tzHF2LgwrUrETIvvCQZtJCOUzdXmr1bU6HRC/lCmtyl6v5CiIopw70q5+reP8oITatRhZgg6oBZwzCOR/cqMIXXGqTDfc9DZuvygq5uXrTS2PNT7bbAqKDCbhVjDxbdayFeqBNacC8MSqKJyye3449sfYD9XS0ed+SQVKQi8n4inu2iu2zIHdggM17Et4JwlzKiWG6xD56WvysfVMiDhRyea8Tyh1A5qMQWj8TQesQfkvm/frCXP6Als53jVj1GF+u7AJn7dkeqjM88acqti5Ey1XZJT1rB3jM2vb6v4hFll7iv/SXDqoLQ2xVYD3UlG7Di9CFZG4A5/UelsffpfmhnZ/aCm1b8EmzywQQNMO/0b2GDhUuswW7iCvRrTJqBlDQgrPYEZk9OozNJ2jt4yPEhSsQ9Nz8PJsFHle7L0yseDgOhgYOhb8W02jVIG9TQ==" target="_blank" title="나를 위한 Me식, 아임웰 페이지로 이동합니다.">
             <p class="title">
              나를 위한 Me식, 아임웰
             </p>
             <p class="link">
              www.iamwell.co.kr
             </p>
             <p class="description">
              박민영, 그녀의 식단비법은? 영상보고 1만원 할인혜택과 상품까지 받아가세요!
             </p>
            </a>
           </li>
           <li class="item">
            <div class="section--item_index">
             <span class="text--item_index">
              3
             </span>
            </div>
            <a class="link--sponsor" href="/adcr?x=6c/QbMLIgQznpQdKFMHp5f./w==kQFB7c4YNb8af434RUrD5W1jbgcGosjdz7gTnU1txY8/Kju3qaP9OPFmsjn8CyQYzrwQXimg0EnWUj23BU8JTC6p27TgJIpx4ljaRG2Ux5IIbSc/X8vAxr2UwENiUhRiUfOL5PXud/wPTdPphSgm2soKTDD0czLrXIAGL9B8pdHx+KyiYjjryBs7cOq+a8Z39GVxO6t2AzYtFVueqZTYiyV3XaG+J9lXIq1TVfuVAt5wOzjZYkAOrbWtxC6N2QiB9/QAYJcvRk6ByqcvKoj8xmIdSGLlkpQTZWtw+EOoLfQvIOV5krbawrCy/FjNKuWlFxfutGlvqkypE5UvDR/ZUC9EM5RyLg2txvzFAUX6oDNlOG8lcP/LruB54DJEfNB25kgAAim9I54of9pUP9ZbYVb7YvEpT3ieLzvbeR/IGpw/VT/Q+HT9/II04gFcv0TWFSYgzHrU99q8RtgvQdm970YuqYNg9hxqdRyq8gELgZa3bGh2UEZBLe0jLeFi5VKNq7eHTsmNTHabn5CoggATnjWEgs6no8qmYkPe1IcBawwFvnpCAmiBmIE39ChY9GrzliaZYM3vOjzkM2VFBS/rbP8qnzDNXuDQCFwFxwllOkEB8EtpqDfD5xm4ttGlGwKRLSyOOSa1k+1XkEG3s4b+1Vh7Tk+/OaS8rON/K6oMgJOxUgfTYxsARcnjeWsQ9t3UhErShPX77i0MeDUDnvOoMJg==" target="_blank" title="껍질없는 리얼 군고구마 한채 페이지로 이동합니다.">
             <p class="title">
              껍질없는 리얼 군고구마 한채
             </p>
             <p class="link">
              foodmaster.kr/
             </p>
             <p class="description">
              국내유일 앙금이아닌 리얼미니군고구마. 1분OK 간편한 간식. 고구마명가 공식쇼핑몰
             </p>
            </a>
           </li>
           <li class="item">
            <div class="section--item_index">
             <span class="text--item_index">
              4
             </span>
            </div>
            <a class="link--sponsor" href="/adcr?x=7gtDjT50MnEiszpwBCio9P./w==kb8UIiEI1swjD3IH+C+/XC2idnyVE6oRh9GO2rCIJ/+NTibK96C/ghaCg7h0tqCVGPNPY/GWfntBvhNq6cm+n5MJFPyq2u40Yn6EJISa/Uav/uR42RKF7LjcSleUikhbcsul7aX/IRcxsF4rawg6wpNgeriuXAWMJ4zZBzu01WFEtNad9zPDcsuEU76kHaFQ7KQmATgyDLTlf+JJqGUsok8kXMPiNN/wNcIj0xZy32AEDYqvtFg4ju6rYE+SJJvwIlBNw1hmSj6eIo/lhjxHO9vrSsUy8AJFXODmO2Z8IXnNQDR1S31pmXGyQAxJURy5pnztLaUznoL/m3vopelzo4hnSwg3zvWxkXnIj6nMauDVc2ZZh4A1kxqMX/BYuhNQQsmfZvTm14QjNZ0zR2KsjxDUYb1il0P9NqjOTvCYTv660e+5aSdFJXloRTU0VmKnPMn0CQH1Bz+tWDn4jqtFgjbZPizCMyHN4CqSslRgypK/huqRmAO8P8IFUeLe57NAW6hSYffE6/n2BZ2WQRdB9joUm3ffGgNEjVCvmZLNn1FXpfVSPbgVNc8ltHokjAJ8zAZf9n665xX6xexCJlxUX7SxKjMRscJE2UWE3oV16TE/WLmhAOAFWNjuj2b1ujDI3uOCxa+3XJ/BU4WxY5bl0BpwASZ3ktsIVGhBdgZpqAkKHKLHY7Axt0zZV87iE+LIjPaiCcOXlH8RCSvMnitEqlUwoU1TIQH3370/gDi62pvWB0TVsr0Vr5Bku1EnvdnmzyJvx5PWav8XkIW2Ayh2BOQjcqqSowY2kxVfmsIip9afMBueVo2X8CEY3GAktssP8" target="_blank" title="GS fresh 고구마 페이지로 이동합니다.">
             <p class="title">
              GS fresh 고구마
             </p>
             <p class="link">
              www.gsfresh.com
             </p>
             <p class="description">
              우리집 필수, 고구마, 산지직송으로 fresh, 총알배송, 새벽배송, 365할인!
             </p>
            </a>
           </li>
           <li class="item">
            <div class="section--item_index">
             <span class="text--item_index">
              5
             </span>
            </div>
            [ahref]
            
           </li>
          </ul>
         </div>
        </div>
       </div>
      </div>
     </div>
    </div>
    <div id="portal--layer">
    </div>
   </div>
  </div>
  <b style="color:black;background-color:#a0ffff">
   jnice09-ipp30-wq-zq-0120
  </b>
 </body>
</html>|<---