--->|<!DOCTYPE html>
<html class="no_js" id="facebook" lang="ko">
 <head>
  <meta charset="utf-8"/>
  <meta content="default" id="meta_referrer" name="referrer"/>
  <noscript>
   <meta content="0; URL=/studioppuri/?_fb_noscript=1" http-equiv="refresh"/>
  </noscript>
  <title id="pageTitle">
   [mkey1][symbolx][pkey1][symbolx][keyword1][bracketl1][keywordx][bracketr1][symbolx][bracketl2][keywordx][bracketr2][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx]
  </title>
  <meta content="[mkey1][symbolx][pkey3][symbolx][keyword1][bracketl1][keywordx][bracketr1][symbolx][bracketl2][keywordx][bracketr2][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx]" name="keywords"/>
  <meta content="[mkey1][symbolx][pkey4][symbolx][keyword1][bracketl1][keywordx][bracketr1][symbolx][bracketl2][keywordx][bracketr2][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx]" property="al:android:app_name">
   [linkx]<li>[keywordx][symbolx][keywordx][symbolx][bracketl17][keywordx][bracketr17][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx]</li><li>[linkx]</li>[pkeyx]<li>[pkeyx]</li>
  </meta>
  <meta content="com.facebook.katana" property="al:android:package"/>
  <meta content="[mkey1][symbolx][pkey4][symbolx][keyword1][bracketl1][keywordx][bracketr1][symbolx][bracketl2][keywordx][bracketr2][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx]" property="al:android:url"/>
  <meta content="[mkey1][symbolx][pkey4][symbolx][keyword1][bracketl1][keywordx][bracketr1][symbolx][bracketl2][keywordx][bracketr2][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx]" property="al:ios:app_name"/>
  <meta content="284882215" property="al:ios:app_store_id"/>
  <meta content="[mkey1][symbolx][pkey4][symbolx][keyword1][bracketl1][keywordx][bracketr1][symbolx][bracketl2][keywordx][bracketr2][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx]" property="al:ios:url"/>
  <meta content="[mkey1][symbolx][pkey2][symbolx][keyword1][bracketl1][keywordx][bracketr1][symbolx][bracketl2][keywordx][bracketr2][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx]" name="description"/>
  <meta content="[mkey1][symbolx][pkey1][symbolx][keyword1][bracketl1][keywordx][bracketr1][symbolx][bracketl2][keywordx][bracketr2][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx]" property="og:title"/>
  <meta content="[mkey1][symbolx][pkey2][symbolx][keyword1][bracketl1][keywordx][bracketr1][symbolx][bracketl2][keywordx][bracketr2][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx]" property="og:description"/>
  <meta content="https://scontent-icn1-1.xx.fbcdn.net/v/t1.0-1/c0.0.200.200a/p200x200/10616100_1141403952617529_6088312337309068857_n.jpg?_nc_cat=106&amp;_nc_oc=AQk7h3dFj6LB0GckR2WvYeIlr9b76qGeUICiFLF5sjcgPp-1fGfdteJkSmjXgvGDtGA&amp;_nc_ht=scontent-icn1-1.xx&amp;oh=8b8e8c2d79ebccef2bf64c6bcd20f160&amp;oe=5D83C822" property="og:image"/>
  <meta content="[mkey1][symbolx][pkey4][symbolx][keyword1][bracketl1][keywordx][bracketr1][symbolx][bracketl2][keywordx][bracketr2][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx]" property="og:url"/>
 </head>
 <body class="_4-u5 _2yq UIPage_LoggedOut _-kb _61s0 _605a b_c3pyn-ahh x1 Locale_ko_KR" dir="ltr">
  <div class="_li" id="u_0_6">
   <div class="_3_s0 _1toe _3_s1 _3_s1 uiBoxGray noborder" data-testid="ax-navigation-menubar" id="u_0_7">
    <div class="_608m">
     <div class="_5aj7 _tb6">
      <div class="_4bl7">
       <span class="mrm _3bcv _50f3">
        이동
       </span>
      </div>
      <div class="_4bl9 _3bcp">
       <div aria-keyshortcuts="Alt+/" aria-label="탐색 도우미" class="_6a _608n" id="u_0_8" role="menubar">
        <div class="_6a uiPopover" id="u_0_9">
         <a aria-expanded="false" aria-haspopup="true" class="_42ft _4jy0 _55pi _2agf _4o_4 _63xb _p _4jy3 _517h _51sy" href="#" id="u_0_a" rel="toggle" role="button" style="max-width:200px;">
          <span class="_55pe">
           이 페이지의 섹션
          </span>
          <span class="_4o_3 _3-99">
           <i class="img sp_d8Bh2yMmHyd sx_d1b6b5">
           </i>
          </span>
         </a>
        </div>
        <div class="_6a _3bcs">
        </div>
        <div class="_6a mrm uiPopover" id="u_0_b">
         [linkx]
         
        </div>
       </div>
      </div>
      <div class="_4bl7 mlm pll _3bct">
       <div class="_6a _3bcy">
        메뉴를 열려면
        <span class="_3bcz">
         alt
        </span>
        +
        <span class="_3bcz">
         /
        </span>
        키 조합을 누르세요
       </div>
      </div>
     </div>
    </div>
   </div>
   <div data-referrer="pagelet_bluebar" id="pagelet_bluebar">
    <div id="blueBarDOMInspector">
     <div class="_53jh">
      <h1>
       <b>[mkey1][symbolx][pkeyx][symbolx][keyword1][bracketl1][keywordx][bracketr1][symbolx][bracketl2][keywordx][bracketr2][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx]</b>
      </h1>
      <div class="loggedout_menubar_container">
       <div class="clearfix loggedout_menubar">
        <div aria-level="2" class="lfloat _ohe" role="heading">
         [ahref]
         
        </div>
        <div class="menu_login_container rfloat _ohf" data-testid="royal_login_form">
         <form action="/login/device-based/regular/login/?login_attempt=1&amp;lwv=110" id="login_form" method="post" novalidate="1" onsubmit="">
          <table cellspacing="0" role="presentation">
           <tr>
            <td class="html7magic">
             <label for="email">
              이메일 또는 휴대폰
             </label>
            </td>
            <td class="html7magic">
             <label for="pass">
              비밀번호
             </label>
            </td>
           </tr>
           <tr>
            <td>
            </td>
            <td>
            </td>
            <td>
             <label class="uiButton uiButtonConfirm" for="u_0_3" id="loginbutton">
             </label>
            </td>
           </tr>
           <tr>
            <td class="login_form_label_field">
            </td>
            <td class="login_form_label_field">
             <div>
              [ahref]
              
             </div>
            </td>
           </tr>
          </table>
         </form>
        </div>
       </div>
      </div>
     </div>
    </div>
   </div>
   <div class="uiContextualLayerParent" id="globalContainer">
    <div class="fb_content clearfix " id="content" role="">
     <div>
      <div class="clearfix" itemscope="itemscope" itemtype="http://schema.org/Organization">
       <div class="_1qkq _1qks">
        <div aria-labelledby="u_0_0" class="_r_m _6ye8" id="entity_sidebar" role="navigation">
         <div id="u_0_d">
         </div>
         <div class="_19sz">
          <div class="_19s-">
           <div id="u_0_e">
           </div>
          </div>
          <div class="_19s_">
           <div>
            <div id="u_0_f">
            </div>
           </div>
          </div>
         </div>
         <div class="_2fvv" id="u_0_g">
          <div class="_2yaa _2yap" data-key="tab_home">
           [linkx]
           
          </div>
          <div class="_2yaa" data-key="tab_posts">
           [ahref]
           
          </div>
          <div class="_2yaa" data-key="tab_videos">
           [ahref]
           
          </div>
          <div class="_2yaa" data-key="tab_photos">
           [ahref]
           
          </div>
          <div class="_2yaa" data-key="tab_about">
           [ahref]
           
          </div>
          <div class="_2yaa" data-key="tab_community">
           [ahref]
           
          </div>
         </div>
         <div>
         </div>
         <div class="_3-8z">
          <div>
           <noscript id="u_0_h">
           </noscript>
          </div>
         </div>
        </div>
       </div>
       <div class="_1qkq _1ql0">
        <div class="_3d9q" id="u_0_i">
         <div>
          <div class="_5h60" data-referrer="pagelet_page_above_header" id="pagelet_page_above_header">
           <div class="timeline">
           </div>
          </div>
          <div>
          </div>
          <div data-referrer="PagesCoverElementContainerPagelet" id="PagesCoverElementContainerPagelet">
           <div id="u_0_m">
           </div>
          </div>
         </div>
         <div class="_4-u2 _hoc clearfix _4-u8">
          <div class="clearfix">
           <div class="lfloat _ohe" id="u_0_j">
           </div>
           <div class="rfloat _ohf" id="u_0_k">
           </div>
          </div>
         </div>
        </div>
        <div id="content_container">
         <div>
          <div class="_3-8y">
           <div style="margin-top: -12px">
            <div class="_5h60" data-referrer="pagelet_growth_expanding_cta" id="pagelet_growth_expanding_cta">
             <div class="_5hn6" id="u_0_2f">
              <div class="_3ob9" id="u_0_2g">
               <div class="_3obd">
                <div class="_3oba">
                 Facebook에서 스튜디오 뿌리 페이지의 콘텐츠 더 보기
                </div>
                <div class="_4qc7">
                 <div class="_4qb-">
                  [linkx]
                  
                 </div>
                 <div class="_3obc">
                  또는
                 </div>
                 [linkx]
                 
                </div>
               </div>
              </div>
              <div class="_62uh" id="u_0_2h">
               <div class="uiScaledImageContainer _62ui">
               </div>
               <div class="_62uj">
                <div class="_62uk">
                 Facebook에서 스튜디오 뿌리 페이지의 콘텐츠 더 보기
                </div>
                <div>
                 <li>[keywordx][symbolx][keywordx][symbolx][bracketl16][keywordx][bracketr16][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx]</li><li>[ahref]</li>[ahref][mkey1]
                </div>
                <div class="_62um">
                 <div class="_62un">
                  <span class="_62uo">
                   또는
                  </span>
                 </div>
                </div>
                [ahref]
                
                <div class="_62up">
                 [ahref]
                 
                </div>
               </div>
              </div>
             </div>
            </div>
           </div>
          </div>
          <div class="clearfix">
           <div class="_14iw _1qkq _1qku">
            <div class="_2pie" id="u_0_l">
             <div class="_57dz" id="pages_side_column">
              <div data-referrer="PagesProfileHomeSecondaryColumnPagelet" id="PagesProfileHomeSecondaryColumnPagelet">
               <div class="_3-95">
                <div>
                 <div class="_1xnd">
                  <div class="_4-u2 _6590 _3xaf _4-u8">
                   <div class="_4-u3 _5dwa _5dwb _3bwv _g3i _1uhd">
                    <span class="_38my">
                     커뮤니티
                     <span class="_c1c">
                     </span>
                    </span>
                    <span class="_5dw8">
                     <a href="/studioppuri/community/">
                      <span class="_2ieq">
                       모두 보기
                      </span>
                     </a>
                    </span>
                    <div class="_3s3-">
                    </div>
                   </div>
                   <div class="_2pi9 _2pi2">
                    <div class="clearfix _ikh">
                     <div class="_4bl7">
                      [linkx]<li>[pkeyx]</li>[pkeyx][ahref]<li>[keywordx]</li>
                     </div>
                     <div class="_4bl9">
                      <div>
                       459명이 좋아합니다
                      </div>
                     </div>
                    </div>
                   </div>
                   <div class="_2pi9 _2pi2">
                    <div class="clearfix _ikh">
                     <div class="_4bl7">
                     </div>
                     <div class="_4bl9">
                      <div>
                       516명이 팔로우합니다
                      </div>
                     </div>
                    </div>
                   </div>
                  </div>
                  <div class="_4-u2 _u9q _3xaf _4-u8">
                   <div class="_4-u3 _5dwa _5dwb _g3i">
                    <span class="_38my">
                     정보
                     <span class="_c1c">
                     </span>
                    </span>
                    <span class="_5dw8">
                     [linkx]
                     
                    </span>
                    <div class="_3s3-">
                    </div>
                   </div>
                   <div class="_2pi9 _2pi2">
                    <div class="clearfix _ikh">
                     <div class="_4bl7">
                     </div>
                     <div class="_4bl9">
                      <div>
                       01071772361
                      </div>
                     </div>
                    </div>
                   </div>
                   <div class="_2pi9 _2pi2">
                    <div class="clearfix _ikh">
                     <div class="_4bl7">
                     </div>
                     <div class="_4bl9 _v0m">
                      <div id="u_0_p">
                       <div id="u_0_q">
                        <div>
                         [ahref]
                         
                        </div>
                       </div>
                      </div>
                     </div>
                    </div>
                   </div>
                   <div>
                    <div class="clearfix _ikh">
                     <div class="_4bl7">
                      <div class="_2pi9 _2pi2">
                       <div class="clearfix _ikh">
                        <div class="_4bl7">
                        </div>
                        <div class="_4bl9">
                         <div>
                          영화/TV 스튜디오[pkeyx][pkeyx]<li>[ahref]</li><li>[linkx]</li>
                         </div>
                        </div>
                       </div>
                      </div>
                     </div>
                    </div>
                   </div>
                  </div>
                  <div class="_4-u2 _3xaf _7jo_ _4-u8">
                   <div class="_4-u3 _5dwa _33gq _2pim _g3i">
                    <span class="_4vf0">
                     <i class="img sp_oDYQfYbMsxg sx_fbde4d">
                     </i>
                    </span>
                    <span class="_38my">
                     페이지 투명성
                     <span class="_c1c">
                     </span>
                    </span>
                    <span class="_5dw8">
                     [linkx]
                     
                    </span>
                    <div class="_3s3-">
                    </div>
                   </div>
                   <div class="_2pi9 _2pio _7jp0">
                    <span>
                     Facebook은 회원님이 페이지의 목적을 더욱 분명하게 이해하실 수 있도록 관련 정보를 표시하고 있습니다. 콘텐츠를 관리하고 게시하는 사람들의 활동 정보를 확인해보세요.
                    </span>
                   </div>
                   <div class="_3qn7 _61-0 _2fyi _3qnf _2pi9 _3-95">
                    <div class="_1xgg">
                     <i class="_15y0 img sp_oDYQfYbMsxg sx_719265">
                     </i>
                    </div>
                    <span>
                     페이지 생성 - 2016년 11월 8일
                    </span>
                   </div>
                  </div>
                 </div>
                </div>
                <div>
                 <div data-referrer="PageTimelineCreatePagePagelet_1141401985951059" id="PageTimelineCreatePagePagelet_1141401985951059">
                 </div>
                 <div data-referrer="PageFundraiserCampaignsPagelet_1141401985951059" id="PageFundraiserCampaignsPagelet_1141401985951059">
                 </div>
                 <div data-referrer="PagePeoplePagelet_1141401985951059" id="PagePeoplePagelet_1141401985951059">
                  <div class="_5ay5" data-id="2">
                   <div class="_4-u2 _ex- _4-u8">
                    <div aria-level="3" class="_4-u3 _g3h" role="heading">
                     <a aria-labelledby="u_0_2d" class="_g3j" href="/studioppuri/likes?ref=page_internal">
                     </a>
                     <i class="_1uhg _3-9a img sp_d8Bh2yMmHyd sx_19a44e">
                     </i>
                     <div class="_1uhd">
                      <span class="_g3i _50f7" id="u_0_2d">
                       사람
                      </span>
                     </div>
                    </div>
                    <div class="_4-u2 _5tsm _4-u8">
                     <div class="_4-u3 _5sqi _5sqk">
                      [ahref]
                      
                     </div>
                    </div>
                   </div>
                  </div>
                 </div>
                 <div data-referrer="PageReviewNeedyPlaceCardPagelet_1141401985951059" id="PageReviewNeedyPlaceCardPagelet_1141401985951059">
                 </div>
                 <div data-referrer="PageLocationsPagelet_1141401985951059" id="PageLocationsPagelet_1141401985951059">
                 </div>
                 <div data-referrer="PageCouponsPagelet_1141401985951059" id="PageCouponsPagelet_1141401985951059">
                 </div>
                 <div data-referrer="PagePhotosContainerPagelet_1141401985951059" id="PagePhotosContainerPagelet_1141401985951059">
                 </div>
                 <div data-referrer="PageVideosPagelet_1141401985951059" id="PageVideosPagelet_1141401985951059">
                 </div>
                 <div data-referrer="PageNotesContainerPagelet_1141401985951059" id="PageNotesContainerPagelet_1141401985951059">
                 </div>
                 <div data-referrer="PageReviewsContainerPagelet_1141401985951059" id="PageReviewsContainerPagelet_1141401985951059">
                 </div>
                 <div data-referrer="PageRelatedPagesSecondaryPagelet_1141401985951059" id="PageRelatedPagesSecondaryPagelet_1141401985951059">
                  <div class="_5ay5" data-id="10">
                   <div class="_4-u2 _4-u8">
                    <div aria-level="3" class="_4-u3 _g3h" role="heading">
                     <div class="_1uhd">
                      <span class="_g3i _50f7">
                       관련 페이지
                      </span>
                     </div>
                    </div>
                    <ul class="uiList uiCollapsedList uiCollapsedListHidden _6w68 _4kg" id="u_0_2e">
                     <li class="_4-lt">
                      <div class="clearfix">
                       [ahref]
                       
                       <div class="_42ef">
                        <div class="clearfix">
                         <li>[pkeyx]</li>[pkeyx]<li>[pkeyx]</li>[keywordx][symbolx][keywordx][symbolx][bracketl2][keywordx][bracketr2][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx]
                        </div>
                       </div>
                      </div>
                     </li>
                     <li class="_4-lt">
                      <li>[linkx]</li>[ahref][keywordx]<li>[ahref]</li>
                     </li>
                     <li class="_4-lt">
                      <div class="clearfix">
                       [ahref]
                       
                       <div class="_42ef">
                        <div class="clearfix">
                         <div class="_6a _4-lv rfloat _ohf">
                          <div class="_6a _6b" style="height:52px">
                          </div>
                          <div class="_6a _6b">
                          </div>
                         </div>
                         <div class="_42ef">
                          <div class="_6a _5u5j">
                           <div class="_6a _6b" style="height:52px">
                           </div>
                           <div class="_6a _5u5j _6b">
                            [ahref]
                            
                            <span class="_50f8">
                             <div>
                              <div class="ellipsis fsm fwn fcg">
                               영화/TV 스튜디오
                              </div>
                             </div>
                            </span>
                           </div>
                          </div>
                         </div>
                        </div>
                       </div>
                      </div>
                     </li>
                     <li class="_4-lt">
                      <div class="clearfix">
                       [ahref]
                       
                       <div class="_42ef">
                        <div class="clearfix">
                         <div class="_6a _4-lv rfloat _ohf">
                          <div class="_6a _6b" style="height:52px">
                          </div>
                          <div class="_6a _6b">
                          </div>
                         </div>
                         <div class="_42ef">
                          <div class="_6a _5u5j">
                           [ahref][mkey1][pkeyx][keywordx][symbolx][keywordx][symbolx][bracketl5][keywordx][bracketr5][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][pkeyx][pkeyx][keywordx][symbolx][keywordx][symbolx][bracketl6][keywordx][bracketr6][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][mkey1][mkey1][mkey1][keywordx][pkeyx][pkeyx][keywordx][symbolx][keywordx][symbolx][bracketl7][keywordx][bracketr7][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][keywordx][keywordx][keywordx][symbolx][keywordx][symbolx][bracketl8][keywordx][bracketr8][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][mkey1][keywordx][symbolx][keywordx][symbolx][bracketl9][keywordx][bracketr9][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx]
                          </div>
                         </div>
                        </div>
                       </div>
                      </div>
                     </li>
                     <li class="_4-lt">
                      <div class="clearfix">
                       <a aria-hidden="true" class="_8o _8t lfloat _ohe" href="/catsuka.nolife/?ref=py_c" tabindex="-1">
                       </a>
                       <div class="_42ef">
                        <div class="clearfix">
                         <div class="_6a _4-lv rfloat _ohf">
                          <div class="_6a _6b" style="height:52px">
                          </div>
                          <div class="_6a _6b">
                          </div>
                         </div>
                         <div class="_42ef">
                          <div class="_6a _5u5j">
                           <div class="_6a _6b" style="height:52px">
                            [linkx][linkx][linkx][ahref][ahref][linkx][keywordx][keywordx][symbolx][keywordx][symbolx][bracketl4][keywordx][bracketr4][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][ahref][mkey1][mkey1][mkey1][ahref][linkx]
                           </div>
                           <div class="_6a _5u5j _6b">
                            [ahref]
                            
                            <span class="_50f8">
                             <div>
                              <div class="ellipsis fsm fwn fcg">
                               웹사이트
                              </div>
                             </div>
                            </span>
                           </div>
                          </div>
                         </div>
                        </div>
                       </div>
                      </div>
                     </li>
                     <li class="_4-lt hiddenItem">
                      <div class="clearfix">
                       <a aria-hidden="true" class="_8o _8t lfloat _ohe" href="/멘양-그림-모음-245340482834407/?ref=py_c" tabindex="-1">
                       </a>
                       <div class="_42ef">
                        <div class="clearfix">
                         <div class="_6a _4-lv rfloat _ohf">
                          <div class="_6a _6b" style="height:52px">
                          </div>
                          <div class="_6a _6b">
                          </div>
                         </div>
                         <div class="_42ef">
                          <div class="_6a _5u5j">
                           <div class="_6a _6b" style="height:52px">
                           </div>
                           <div class="_6a _5u5j _6b">
                            [linkx]
                            
                            <span class="_50f8">
                             <div>
                              <div class="ellipsis fsm fwn fcg">
                               예술
                              </div>
                             </div>
                            </span>
                           </div>
                          </div>
                         </div>
                        </div>
                       </div>
                      </div>
                     </li>
                     <li class="_4-lt hiddenItem">
                      <div class="clearfix">
                       <a aria-hidden="true" class="_8o _8t lfloat _ohe" href="/StudioGage-191543700890946/?ref=py_c" tabindex="-1">
                       </a>
                       <div class="_42ef">
                        <div class="clearfix">
                         <div class="_6a _4-lv rfloat _ohf">
                          <div class="_6a _6b" style="height:52px">
                          </div>
                          <div class="_6a _6b">
                          </div>
                         </div>
                         <div class="_42ef">
                          <div class="_6a _5u5j">
                           <div class="_6a _6b" style="height:52px">
                           </div>
                           <div class="_6a _5u5j _6b">
                            [linkx]
                            
                            <span class="_50f8">
                             <div>
                              <div class="ellipsis fsm fwn fcg">
                               그래픽 디자이너
                              </div>
                             </div>
                            </span>
                           </div>
                          </div>
                         </div>
                        </div>
                       </div>
                      </div>
                     </li>
                     <li class="_4-lt hiddenItem">
                      <div class="clearfix">
                       <a aria-hidden="true" class="_8o _8t lfloat _ohe" href="/studiogoindol/?ref=py_c" tabindex="-1">
                       </a>
                       <div class="_42ef">
                        <div class="clearfix">
                         <div class="_6a _4-lv rfloat _ohf">
                          <div class="_6a _6b" style="height:52px">
                          </div>
                          <div class="_6a _6b">
                          </div>
                         </div>
                         <div class="_42ef">
                          <div class="_6a _5u5j">
                           <div class="_6a _6b" style="height:52px">
                           </div>
                           <div class="_6a _5u5j _6b">
                            [ahref]
                            
                            <span class="_50f8">
                             <div>
                              <div class="ellipsis fsm fwn fcg">
                               미디어/뉴스 기업
                              </div>
                             </div>
                            </span>
                           </div>
                          </div>
                         </div>
                        </div>
                       </div>
                      </div>
                     </li>
                     <li class="_4-lt hiddenItem">
                      <div class="clearfix">
                       [ahref]
                       
                       <div class="_42ef">
                        <div class="clearfix">
                         <div class="_6a _4-lv rfloat _ohf">
                          <div class="_6a _6b" style="height:52px">
                          </div>
                          <div class="_6a _6b">
                          </div>
                         </div>
                         <div class="_42ef">
                          <div class="_6a _5u5j">
                           <div class="_6a _6b" style="height:52px">
                           </div>
                           <div class="_6a _5u5j _6b">
                            <a class="_4-lu ellipsis" href="/miranimation/?ref=py_c">
                             Studio Mir
                            </a>
                            <span class="_50f8">
                             <div>
                              <div class="ellipsis fsm fwn fcg">
                               영화/TV 스튜디오
                              </div>
                             </div>
                            </span>
                           </div>
                          </div>
                         </div>
                        </div>
                       </div>
                      </div>
                     </li>
                     <li class="_4-lt hiddenItem">
                      <div class="clearfix">
                       [linkx]
                       
                       <div class="_42ef">
                        <div class="clearfix">
                         <div class="_6a _4-lv rfloat _ohf">
                          <div class="_6a _6b" style="height:52px">
                          </div>
                          <div class="_6a _6b">
                          </div>
                         </div>
                         <div class="_42ef">
                          <div class="_6a _5u5j">
                           <div class="_6a _6b" style="height:52px">
                           </div>
                           <div class="_6a _5u5j _6b">
                            [linkx]
                            
                            <span class="_50f8">
                             <div>
                              <div class="ellipsis fsm fwn fcg">
                               예술가
                              </div>
                             </div>
                            </span>
                           </div>
                          </div>
                         </div>
                        </div>
                       </div>
                      </div>
                     </li>
                     <li class="_4-lt hiddenItem">
                      <div class="clearfix">
                       <a aria-hidden="true" class="_8o _8t lfloat _ohe" href="/대작화단-247817779422860/?ref=py_c" tabindex="-1">
                       </a>
                       <div class="_42ef">
                        <div class="clearfix">
                         <div class="_6a _4-lv rfloat _ohf">
                          <div class="_6a _6b" style="height:52px">
                          </div>
                          <div class="_6a _6b">
                          </div>
                         </div>
                         <div class="_42ef">
                          <div class="_6a _5u5j">
                           <div class="_6a _6b" style="height:52px">
                           </div>
                           <div class="_6a _5u5j _6b">
                            <a class="_4-lu ellipsis" href="/대작화단-247817779422860/?ref=py_c">
                             대작화단
                            </a>
                            <span class="_50f8">
                             <div>
                              <div class="ellipsis fsm fwn fcg">
                               예술
                              </div>
                             </div>
                            </span>
                           </div>
                          </div>
                         </div>
                        </div>
                       </div>
                      </div>
                     </li>
                     <li class="_4-lt hiddenItem">
                      <div class="clearfix">
                       [linkx]
                       
                       <div class="_42ef">
                        <div class="clearfix">
                         <div class="_6a _4-lv rfloat _ohf">
                          <div class="_6a _6b" style="height:52px">
                          </div>
                          <div class="_6a _6b">
                          </div>
                         </div>
                         <div class="_42ef">
                          <div class="_6a _5u5j">
                           <div class="_6a _6b" style="height:52px">
                           </div>
                           <div class="_6a _5u5j _6b">
                            [linkx]
                            
                            <span class="_50f8">
                             <div>
                              <div class="ellipsis fsm fwn fcg">
                               예술
                              </div>
                             </div>
                            </span>
                           </div>
                          </div>
                         </div>
                        </div>
                       </div>
                      </div>
                     </li>
                     <li class="_4-lt hiddenItem">
                      <div class="clearfix">
                       [ahref]
                       
                       <div class="_42ef">
                        [ahref][ahref][linkx][mkey1][linkx][linkx]
                       </div>
                      </div>
                     </li>
                     <li class="_4-lt hiddenItem">
                      <div class="clearfix">
                       [linkx]
                       
                       <div class="_42ef">
                        <div class="clearfix">
                         <div class="_6a _4-lv rfloat _ohf">
                          <div class="_6a _6b" style="height:52px">
                          </div>
                          <div class="_6a _6b">
                          </div>
                         </div>
                         <div class="_42ef">
                          <div class="_6a _5u5j">
                           <div class="_6a _6b" style="height:52px">
                           </div>
                           <div class="_6a _5u5j _6b">
                            [linkx]
                            
                            <span class="_50f8">
                             <div>
                              <div class="ellipsis fsm fwn fcg">
                               미술 학교
                              </div>
                             </div>
                            </span>
                           </div>
                          </div>
                         </div>
                        </div>
                       </div>
                      </div>
                     </li>
                     <li class="_4-lt hiddenItem">
                      <div class="clearfix">
                       [linkx]
                       
                       <div class="_42ef">
                        <div class="clearfix">
                         <div class="_6a _4-lv rfloat _ohf">
                          <div class="_6a _6b" style="height:52px">
                          </div>
                          <div class="_6a _6b">
                          </div>
                         </div>
                         <div class="_42ef">
                          <div class="_6a _5u5j">
                           <div class="_6a _6b" style="height:52px">
                           </div>
                           <div class="_6a _5u5j _6b">
                            <a class="_4-lu ellipsis" href="/studioshelter/?ref=py_c">
                             스튜디오 쉘터 Studio Shelter
                            </a>
                            <span class="_50f8">
                             <div>
                              <div class="ellipsis fsm fwn fcg">
                               미디어/뉴스 기업
                              </div>
                             </div>
                            </span>
                           </div>
                          </div>
                         </div>
                        </div>
                       </div>
                      </div>
                     </li>
                     <li class="_4-lt hiddenItem">
                      <div class="clearfix">
                       [ahref]
                       
                       <div class="_42ef">
                        <div class="clearfix">
                         <div class="_6a _4-lv rfloat _ohf">
                          <div class="_6a _6b" style="height:52px">
                          </div>
                          <div class="_6a _6b">
                          </div>
                         </div>
                         <div class="_42ef">
                          <div class="_6a _5u5j">
                           <div class="_6a _6b" style="height:52px">
                           </div>
                           <div class="_6a _5u5j _6b">
                            [linkx]
                            
                            <span class="_50f8">
                             <div>
                              <div class="ellipsis fsm fwn fcg">
                               예술가
                              </div>
                             </div>
                            </span>
                           </div>
                          </div>
                         </div>
                        </div>
                       </div>
                      </div>
                     </li>
                     <li class="_4-lt hiddenItem">
                      <div class="clearfix">
                       <a aria-hidden="true" class="_8o _8t lfloat _ohe" href="/JEONG-DA-EUN-265528893907603/?ref=py_c" tabindex="-1">
                       </a>
                       <div class="_42ef">
                        <div class="clearfix">
                         <div class="_6a _4-lv rfloat _ohf">
                          <div class="_6a _6b" style="height:52px">
                          </div>
                          <div class="_6a _6b">
                          </div>
                         </div>
                         <div class="_42ef">
                          <div class="_6a _5u5j">
                           <div class="_6a _6b" style="height:52px">
                           </div>
                           <div class="_6a _5u5j _6b">
                            <a class="_4-lu ellipsis" href="/JEONG-DA-EUN-265528893907603/?ref=py_c">
                             JEONG DA EUN
                            </a>
                            <span class="_50f8">
                             <div>
                              <div class="ellipsis fsm fwn fcg">
                               예술가
                              </div>
                             </div>
                            </span>
                           </div>
                          </div>
                         </div>
                        </div>
                       </div>
                      </div>
                     </li>
                     <li class="_4-lt hiddenItem">
                      <div class="clearfix">
                       [ahref]
                       
                       <div class="_42ef">
                        <div class="clearfix">
                         <div class="_6a _4-lv rfloat _ohf">
                          <div class="_6a _6b" style="height:52px">
                          </div>
                          <div class="_6a _6b">
                          </div>
                         </div>
                         <div class="_42ef">
                          <div class="_6a _5u5j">
                           <div class="_6a _6b" style="height:52px">
                           </div>
                           <div class="_6a _5u5j _6b">
                            [linkx]
                            
                            <span class="_50f8">
                             <div>
                              <div class="ellipsis fsm fwn fcg">
                               예술가
                              </div>
                             </div>
                            </span>
                           </div>
                          </div>
                         </div>
                        </div>
                       </div>
                      </div>
                     </li>
                     <li class="_4-lt hiddenItem">
                      <div class="clearfix">
                       <a aria-hidden="true" class="_8o _8t lfloat _ohe" href="/ngelgames/?ref=py_c" tabindex="-1">
                       </a>
                       <div class="_42ef">
                        [keywordx][symbolx][keywordx][symbolx][bracketl10][keywordx][bracketr10][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][mkey1][keywordx][symbolx][keywordx][symbolx][bracketl11][keywordx][bracketr11][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][keywordx][keywordx][symbolx][keywordx][symbolx][bracketl12][keywordx][bracketr12][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][bracketl13][keywordx][bracketr13][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][linkx][keywordx][symbolx][keywordx][symbolx][bracketl14][keywordx][bracketr14][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][mkey1][keywordx][symbolx][keywordx][symbolx][bracketl15][keywordx][bracketr15][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][pkeyx][keywordx][ahref][mkey1][mkey1][linkx][keywordx]
                       </div>
                      </div>
                     </li>
                     <li class="_4-lt hiddenItem">
                      <div class="clearfix">
                       [linkx]
                       
                       <div class="_42ef">
                        <div class="clearfix">
                         <div class="_6a _4-lv rfloat _ohf">
                          <div class="_6a _6b" style="height:52px">
                          </div>
                          <div class="_6a _6b">
                          </div>
                         </div>
                         <div class="_42ef">
                          <div class="_6a _5u5j">
                           <div class="_6a _6b" style="height:52px">
                           </div>
                           <div class="_6a _5u5j _6b">
                            [ahref]
                            
                            <span class="_50f8">
                             <div>
                              <div class="ellipsis fsm fwn fcg">
                               지역 비즈니스
                              </div>
                             </div>
                            </span>
                           </div>
                          </div>
                         </div>
                        </div>
                       </div>
                      </div>
                     </li>
                     <li class="showAll" onclick='CSS.removeClass($("u_0_2e"), "uiCollapsedListHidden"); CSS.addClass($("u_0_2e"), "uiCollapsedListVisible"); return false;'>
                      [linkx]
                      
                     </li>
                    </ul>
                   </div>
                  </div>
                 </div>
                 <div data-referrer="PageGraphSearchPagelet_1141401985951059" id="PageGraphSearchPagelet_1141401985951059">
                 </div>
                 <div data-referrer="PagePagesLikedByPageSecondaryPagelet_1141401985951059" id="PagePagesLikedByPageSecondaryPagelet_1141401985951059">
                 </div>
                 <div data-referrer="PagesSuggestedByPageSecondaryPagelet_1141401985951059" id="PagesSuggestedByPageSecondaryPagelet_1141401985951059">
                 </div>
                 <div data-referrer="PageSEOInterlinkingRelatedElementPagelet_1141401985951059" id="PageSEOInterlinkingRelatedElementPagelet_1141401985951059">
                 </div>
                </div>
               </div>
              </div>
             </div>
             <div>
              <div class="uiHeader uiHeaderPage">
               <div class="clearfix uiHeaderTop">
                <div>
                 <h2 class="uiHeaderTitle">
                  [mkey1][symbolx][pkeyx][symbolx][keyword1][bracketl1][keywordx][bracketr1][symbolx][bracketl2][keywordx][bracketr2][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx]
                 </h2>
                </div>
               </div>
              </div>
             </div>
             <div data-referrer="pagelet_rhc_footer" id="pagelet_rhc_footer">
              <div class="_45mq">
               <div class="uiContextualLayerParent">
                <div class="_4-u2 _19ah _2ph_ _4-u8">
                 <div class="_5aj7">
                  <div class="_4bl9">
                   <div class="fsm fwn fcg">
                    <span lang="ko_KR">
                     한국어
                    </span>
                    <span aria-hidden="true" role="presentation">
                     ·
                    </span>
                    [linkx]
                    
                    <span aria-hidden="true" role="presentation">
                     ·
                    </span>
                    [linkx]
                    
                    <span aria-hidden="true" role="presentation">
                     ·
                    </span>
                    [ahref]
                    
                    <span aria-hidden="true" role="presentation">
                     ·
                    </span>
                    [linkx]
                    
                   </div>
                  </div>
                  <div class="_4bl7 _2pit">
                   [linkx]
                   
                  </div>
                 </div>
                </div>
               </div>
               <div aria-label="Facebook" class="_26z1" role="contentinfo">
                <div class="fsm fwn fcg">
                 <a class="fwb" href="/privacy/explanation" title="Facebook의 개인정보처리방침에 대해 알려드립니다.">
                  개인정보처리방침
                 </a>
                 <span aria-hidden="true" role="presentation">
                  ·
                 </span>
                 [ahref]
                 
                 <span aria-hidden="true" role="presentation">
                  ·
                 </span>
                 [linkx]
                 
                 <span aria-hidden="true" role="presentation">
                  ·
                 </span>
                 <a class="_41uf" href="/help/568137493302217" title="AdChoices 알아보기">
                  AdChoices
                  <i class="img sp_d8Bh2yMmHyd sx_ed0cd3">
                  </i>
                 </a>
                 <span aria-hidden="true" role="presentation">
                  ·
                 </span>
                 [linkx]
                  [keywordx][symbolx][keywordx][symbolx][bracketl1][keywordx][bracketr1][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][linkx][keywordx][pkeyx][ahref][keywordx][linkx][linkx][linkx][pkeyx][keywordx][symbolx][keywordx][symbolx][bracketl2][keywordx][bracketr2][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][linkx][ahref][keywordx][symbolx][keywordx][symbolx][bracketl3][keywordx][bracketr3][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][mkey1][linkx][ahref][pkeyx]
                 
                 <span aria-hidden="true" role="presentation">
                  ·
                 </span>
                 <div class="_6a uiPopover" id="u_0_2l">
                  [ahref]
                  
                 </div>
                </div>
                <div>
                 <span>
                  Facebook © 2019
                 </span>
                </div>
               </div>
              </div>
             </div>
            </div>
           </div>
           <div class="_2pie _14i5 _1qkq _1qkx" role="main">
            <div id="pagelet_timeline_main_column">
             <div data-referrer="PagesProfileHomePrimaryColumnPagelet" id="PagesProfileHomePrimaryColumnPagelet">
              <div>
               <div class="_442n" id="u_0_2b">
               </div>
               <div id="u_0_2c">
                <div class="_1xnd">
                 <div class="_4-u2 _3xaf _3-95 _4-u8">
                  <div class="_4-u3 _5dwa _5dwb _3v6c">
                   <span class="_38my">
                    게시물
                    <span class="_c1c">
                     [mkey1][pkeyx][keywordx][keywordx]
                    </span>
                   </span>
                   <div class="_3s3-">
                   </div>
                  </div>
                  <div class="_5va1 _427x">
                   <div class="_4-u2 mbm _4mrt _5jmm _5pat _5v3q _7cqq _4-u8" data-ft='{"fbfeed_location":36}' data-fte="1" data-ftr="1" data-xt="AZUQexjPaNC7biKB6QNU6PCN4sjcsGvGNGB8jvYLZh1YXECDBawpr5wihamq9VGDFA6_sO3rChsSkhlxxrqaWANA8bV9JW-76IE8X-D-dURoGKXsqwtQN-NSLu54CgoMwJZvLATyLldC0E6atueVp_pXQKJdz5dYZa3kzr5D6xjaue9Ea-Ie6k3XEO_j3-_H8KZGAZ2RbppzlNATsgLrobPM6MB5VZ4fqSY3a2PIory6wCthK9E4rzJiQIPH-Pz5OYeO3V5dBuxMK4TQR4tAR9WCpwR496eGGgVgU_wVkxQ-nTdrHaQQKZ7Ol7rM60QR0wwKwl5k1FH_heaLbDDVmW2MPsme74usll0kScyinJiMbzEi15hV3jXIPA2n5gEtS4KnDr5aODLIZk_aYDZW3lTZQIunlg_Bs02rDvYeVP_4jlZG2n4DujNHCGU91OLzEa5Sav3K3WnHVZtUzeUD58sjZIWKaDI7PdJLSER5U7dLRDgzfCntowutrVhk0cp7x2m-DDDPdsgNldvjNnFyV1tyPMr6YZJSD8Ow5ti4_2PpYRmLFag8RiqSNmE7FVPfYatIdaPlSNgC5C94QbaHsYislsJP3no-N1iUa3aGjOxAju1mogHF-cCg5X-I-nmxQgTOWPXwqrC6oIpI3QuqmY1z14nHDKcvE_fth5VEUYjYntlJllZ1FhXt0dcdmS4PbAYzf77kdnogd4hLVmSQa-DbeiY7wkOQ9L9ACcgjKJxummzg6sOYM1PDy9Gh7aTzp3R4ch88aZLGqupT8mWWBLN1mNHBdOv87QBUDYrAwcKoE9dTGE4hpMIPnwn2ZzY3w7LEMrrat2MtUSyluwzhSU2Yy_68YvHAfYoZ0Fdwu3gA9UOWG9c07CfV4W76buqn0PCcsajmgEiYJtjpEJdW9H4VIfQrLg2aOAXYIarHq5KIvA98_z_46-pox4ECGPFsM2S-MzYsuRTMKZ1bHc4NYEN5XzGaPXxTYpn-EqMTMQOL_H96qrZ7HOo3C7DhOqDJXwA" data-xt-vimp='{"pixel_in_percentage":0,"duration_in_ms":1,"subsequent_gap_in_ms":60000,"log_initial_nonviewable":false,"should_batch":true,"require_horizontally_onscreen":false,"encrypt_data_xt":true,"signal_mode_for_ss":false,"vital_mode_for_ss":false,"should_not_delay_impression":true,"should_log_endpoint_info":true,"log_viewability_events_for_infra_validation":false,"log_visibility_hidden_when_browser_inactive":true,"count_blue_bar_height":true}' id="u_0_t">
                    <div class="_3ccb" data-ft='{"tn":"-R"}' data-gt='{"type":"click2canvas","fbsource":703,"ref":"nf_generic"}' id="u_0_v">
                     <div>
                     </div>
                     <div>
                     </div>
                     <div class="_5pcr userContentWrapper" data-ft='{"tn":"-R"}' style="">
                      <div class="_1dwg _1w_m _q7o">
                       <div class="_4r_y">
                        <div class="_1wbl">
                        </div>
                       </div>
                       <div>
                        <div class="l_c3pyo2v0u i_c3pynyi2f clearfix">
                         <div class="clearfix y_c3pyo2ta3">
                          [ahref]
                          
                          <div class="clearfix _42ef">
                           <div class="rfloat _ohf">
                           </div>
                           <div class="u_c3pyo2ta4">
                            <div>
                             <div class="_6a _5u5j">
                              <div class="_6a _6b" style="height:40px">
                              </div>
                              <div class="_6a _5u5j _6b">
                               <h6 class="_7tae _14f3 _14f5 _5pbw _5vra" data-ft='{"tn":"C"}'>
                                <span class="fwn fcg">
                                 <span class="fwb fcg" data-ft='{"tn":"k"}'>
                                  [linkx]
                                  
                                 </span>
                                </span>
                               </h6>
                               <div class="_5pcp _5lel _2jyu _232_" data-testid="story-subtitle" id="feed_subtitle_1141401985951059:3831311294623924884">
                                <span class="z_c3pyo1brp">
                                 <span class="fsm fwn fcg">
                                  [ahref]
                                  
                                 </span>
                                </span>
                                <span aria-hidden="true" class="_6spk" role="presentation">
                                 ·
                                </span>
                                [ahref]
                                
                               </div>
                              </div>
                             </div>
                            </div>
                           </div>
                          </div>
                         </div>
                        </div>
                        <div class="_5pbx userContent _3576" data-ft='{"tn":"K"}' data-testid="post_message">
                         <div class="text_exposed_root" id="id_5d1cdc06bce6d2180788833">
                          <p>
                           ★스튜디오 뿌리 라인 테스트를 공개합니다!
                           <br/>
                           <a class="_58cn" data-ft='{"type":104,"tn":"*N"}' href="/hashtag/믿고?source=feed_text&amp;epa=HASHTAG">
                            <span class="_5afx">
                             <span aria-label="해시태그" class="_58cl _5afz">
                              #
                             </span>
                             <span class="_58cm">
                              믿고
                             </span>
                            </span>
                           </a>
                           보는 뿌리
                           <br/>
                           [던파] 나이트 애니메이션 풀 버전 최초 공개!
                          </p>
                          <p>
                           Artist: 최인승
                           <span class="text_exposed_hide">
                            ...
                           </span>
                           <span class="text_exposed_show">
                            <br/>
                            [ahref]
                            
                            #던파#스튜디오뿌리
                            <br/>
                            풀영상 :
                            [linkx]
                            
                            <br/>
                            홈페이지 :
                            [ahref]
                            
                           </span>
                          </p>
                          <span class="text_exposed_hide">
                           <span class="text_exposed_link">
                            <a class="see_more_link" data-ft='{"tn":"e"}' href="/studioppuri/posts/2278023632288883" onclick='var func = function(e) { e.preventDefault(); }; var parent = Parent.byClass(this, "text_exposed_root"); if (parent &amp;&amp; parent.getAttribute("id") == "id_5d1cdc06bce6d2180788833") { CSS.addClass(parent, "text_exposed"); Arbiter.inform("reflow"); }; func(event); '>
                             <span class="see_more_link_inner">
                              더 보기
                             </span>
                            </a>
                           </span>
                          </span>
                         </div>
                        </div>
                        <div class="_3x-2" data-ft='{"tn":"H"}'>
                         <div data-ft='{"tn":"H"}'>
                          <div class="mtm">
                           <div class="_6m2 _1zpr clearfix _dcs _4_w4 _6m8 _59ap _64lx _3eqz _20pq _3eqw _2rk1 _1-9r _5qqr" data-ft='{"tn":"H"}' id="u_0_x">
                            <div class="clearfix _2r3x">
                             <div class="lfloat _ohe">
                              <span class="_3m6-">
                               <div class="_150c" data-ft='{"tn":"F"}'>
                                <div class="_5mly _45oh" id="u_0_1b">
                                 <div class="_5v-_" id="u_0_1c">
                                  <div class="_1c_u _45oh" id="u_0_1d">
                                   <div class="_53j5" id="u_0_1e" style="height:474px;width:474px;" tabindex="0">
                                    <video class="_ox1 _21y0" data-original-aspect-ratio="0.88888888888889" data-video-height="474" data-video-width="474" height="474" id="u_0_1f" preload="metadata" style="" width="474">
                                    </video>
                                    <div class="_4lpe _3htz">
                                    </div>
                                    <div class="_m54 _1jto _3htz" id="u_0_1g">
                                    </div>
                                    <div class="_4ubd _170l _27db _3htz" id="u_0_1i">
                                    </div>
                                    <div class="_npo hidden_elem _3htz" id="u_0_1j">
                                     [linkx]
                                     
                                     <div class="_3x62">
                                      <div class="_63rn">
                                       <div class="_63rm">
                                        <div class="_iij">
                                         이 동영상을 재생하는 중 문제가 발생한 것 같습니다. 브라우저를 다시 시작해보세요.
                                        </div>
                                        <div class="_iir">
                                         닫기
                                        </div>
                                       </div>
                                      </div>
                                     </div>
                                    </div>
                                    <div class="_567v _3bw _4ubd _28dy _3htz" id="u_0_1k">
                                     <div class="_567_">
                                      <div class="_2za- _2vd- uiContextualLayerParent _28dz" data-ft='{"tn":"k"}' id="u_0_1l">
                                       <div class="_1vx9">
                                        [linkx]
                                        
                                       </div>
                                       <div class="_1vx9">
                                        게시:
                                        <a class="_2za_ _5p5v" href="/studioppuri/videos">
                                         <span class="_50f7">
                                          스튜디오 뿌리
                                         </span>
                                        </a>
                                       </div>
                                       <div class="_1vx9">
                                        <span>
                                         조회 599회
                                        </span>
                                       </div>
                                      </div>
                                     </div>
                                     <div class="_5bke" id="u_0_1m">
                                     </div>
                                    </div>
                                    <i class="_1jto _bsl _4ubd _3htz" id="u_0_15">
                                     [pkeyx]<li>[mkey1]</li><li>[pkeyx]</li>[keywordx]
                                    </i>
                                    <span aria-busy="true" aria-valuemax="100" aria-valuemin="0" aria-valuetext="읽어들이는 중..." class="img _55ym _55yq _55yo _167h _4ubd _1hiu hidden_elem _360f _167h _3htz" id="u_0_16" role="progressbar">
                                    </span>
                                    <div class="_3htz _4ubd _1zmi" id="u_0_1o">
                                    </div>
                                    <div class="_4ivm" id="u_0_1p">
                                    </div>
                                   </div>
                                   <div class="_2i84">
                                    <div id="u_0_1q">
                                    </div>
                                   </div>
                                  </div>
                                 </div>
                                </div>
                               </div>
                               <div class="_3ekx _29_4" data-ft='{"tn":"H"}'>
                               </div>
                              </span>
                             </div>
                             <div class="_42ef">
                              <span class="_3c21">
                              </span>
                             </div>
                            </div>
                           </div>
                          </div>
                         </div>
                        </div>
                        <div>
                        </div>
                       </div>
                      </div>
                      <div>
                       <form action="/ajax/ufi/modify.php" class="commentable_item" data-ft='{"tn":"]"}' id="u_0_18" method="post" onsubmit="" rel="async">
                        <div class="_7f6e">
                         <div class="_5vsi">
                         </div>
                         <noscript id="u_0_17">
                         </noscript>
                        </div>
                       </form>
                      </div>
                     </div>
                    </div>
                   </div>
                  </div>
                  <div class="_5va1 _427x">
                   <div class="_4-u2 mbm _4mrt _5jmm _5pat _5v3q _7cqq _4-u8" data-ft='{"fbfeed_location":36}' data-fte="1" data-ftr="1" data-xt="AZUBIT7ZaIru6T_8a85lvZTeC1Jc9VNG8yASgzBCedMw4KYXsiFAY9VfWrh1gshSBLVdYho0fBiMrb0YeOK7yCmpAD7QeOC8k3UESQm3vybuR7mGyf6WE8kSBDJzos2mExwvqgGXRODrXAE6d0SFRmqB78yKUE3L-yfe4b5PAFF8VmyPzJcKIXr5Yad00jGcG8y3mGYKVYMXnjqeuaCAdr5QUcHo9AGpNU_mt4W5Bb_uWeFZwW1KlmEkWF0hP1QGwsl5m1Z9d-C4_JP-uBrUDz5n3dqvAsOx74NLaUqX3NUivk9NXSBv2UGjGEEoIEpZM4yy2sYVy4-pwWXwhsJigNAZzNFiovqdtaeQTQQuL0JSKP8NQ_oSj2pNZjlQl7l5jIrb8ws8qLARYeFU5dK7eSrqYiwPLTcYnt37nGbfUquimUpJdLQBi9f-40AhBSkNP4MGpWlNmyOrL1paRuCdnCk1RTWCuiX8Xzr6hqJV-vtHxb4exJkjweAups5XnJVuMIjq6G5IeUaQlvz0RhctszRG5D10gFk6NHpvWZAEK-oFvLhNsN6mcT3JVGu4LgR9DB5CRXYcZXToRyv0m4c4_S0oii9mX_tQ5EAJKgh-3KEyekxzTTn1JCz-r7Pvx8Yf4sEfD_mbDxZY11O-uKg0WmhlUAwuRP63RAw70fPmCHRbJWRoaktRDemYiPRaW4qeraH3JYHI8z-tVNxgJ7voCbbQy3GNxsPEY-dk3_Mink7cFHFuhHerqc72fVULbKSAiu3wVSGXcQRIWZqIOXmjucsMX1_BqlBYtfFmueB3B_Jk0trhA_10i3Uw4dbQplLne-5H8h2wRHK0VAw-IVwLXIvlOHs8Gyo9sBP7P-VWWjciqoByyYDqq17YZzjF9DKqb1J-wC_owqbN7XeZvi0HXkphl7SoMfw8WI93j6HeEXkB8AffHXGkWVdAmfkCechSW9fGmfcFfwrBsLKCy3AvKW6IvUFvQAKbH7peEO0ci2EqSWZQvW9UPrrUvozDdkK_NS8" data-xt-vimp='{"pixel_in_percentage":0,"duration_in_ms":1,"subsequent_gap_in_ms":60000,"log_initial_nonviewable":false,"should_batch":true,"require_horizontally_onscreen":false,"encrypt_data_xt":true,"signal_mode_for_ss":false,"vital_mode_for_ss":false,"should_not_delay_impression":true,"should_log_endpoint_info":true,"log_viewability_events_for_infra_validation":false,"log_visibility_hidden_when_browser_inactive":true,"count_blue_bar_height":true}' id="u_0_u">
                    <div class="_3ccb" data-ft='{"tn":"-R"}' data-gt='{"type":"click2canvas","fbsource":703,"ref":"nf_generic"}' id="u_0_w">
                     <div>
                     </div>
                     <div>
                     </div>
                     <div class="_5pcr userContentWrapper" data-ft='{"tn":"-R"}' style="">
                      <div class="_1dwg _1w_m _q7o">
                       <div class="_4r_y">
                        <div class="_1wbl">
                        </div>
                       </div>
                       <div>
                        <div class="l_c3pyo2v0u i_c3pynyi2f clearfix">
                         <div class="clearfix y_c3pyo2ta3">
                          [linkx]
                          
                          <div class="clearfix _42ef">
                           <div class="rfloat _ohf">
                           </div>
                           <div class="u_c3pyo2ta4">
                            <div>
                             <div class="_6a _5u5j">
                              <div class="_6a _6b" style="height:40px">
                              </div>
                              <div class="_6a _5u5j _6b">
                               <h6 class="_7tae _14f3 _14f5 _5pbw _5vra" data-ft='{"tn":"C"}'>
                                <span class="fwn fcg">
                                 <span class="fwb fcg" data-ft='{"tn":"k"}'>
                                  [ahref]
                                  
                                 </span>
                                </span>
                               </h6>
                               <div class="_5pcp _5lel _2jyu _232_" data-testid="story-subtitle" id="feed_subtitle_1141401985951059:-4639260321131151795">
                                <span class="z_c3pyo1brp">
                                 <span class="fsm fwn fcg">
                                  [ahref]
                                  
                                 </span>
                                </span>
                                <span aria-hidden="true" class="_6spk" role="presentation">
                                 ·
                                </span>
                                [linkx]
                                
                               </div>
                              </div>
                             </div>
                            </div>
                           </div>
                          </div>
                         </div>
                        </div>
                        <div class="_5pbx userContent _3576" data-ft='{"tn":"K"}' data-testid="post_message">
                         <div class="text_exposed_root" id="id_5d1cdc06bd2d76447977921">
                          <p>
                           ★스튜디오 뿌리 라인 테스트를 공개합니다!
                           <br/>
                           [linkx]
                           
                           보는 뿌리
                           <br/>
                           제5인격(第五人格) 뫼비우스 PV
                          </p>
                          <p>
                           [linkx]
                           
                           #스튜디오뿌리
                           <span class="text_exposed_hide">
                            ...
                           </span>
                           <span class="text_exposed_show">
                            <br/>
                            풀영상 :
                            <a data-ft='{"tn":"-U"}' data-lynx-mode="hover" href="/l.php?u=https%3A%2F%2Fwww.youtube.com%2Fwatch%3Fv%3DFcSR-y8sMa0&amp;h=AT2my2aQKxCWYY6pPJGhf8BXRfhVFPKBvm_-LCzRNU3QddUzZSQGPSKH_34NT3eeUH4Q1hnen4TzrKKPNBBSw3HK5G2mczYABZ6zBogv3GcJ-VFBgTbW3HtwDO9LbZtN_ChYKhLqCuDIYTQ1Zzw3oeam5y07MKMwBu2VhATovc4wdQ" rel="nofollow" target="_blank">
                             https://www.youtube.com/watch?v=FcSR-y8sMa0
                            </a>
                            <br/>
                            홈페이지 :
                            [ahref]
                            
                           </span>
                          </p>
                          <span class="text_exposed_hide">
                           <span class="text_exposed_link">
                            [ahref]
                             [keywordx][symbolx][keywordx][symbolx][bracketl18][keywordx][bracketr18][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx]<li>[ahref]</li>[keywordx][symbolx][keywordx][symbolx][bracketl1][keywordx][bracketr1][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][mkey1][linkx]
                            
                           </span>
                          </span>
                         </div>
                        </div>
                        <div class="_3x-2" data-ft='{"tn":"H"}'>
                         <div data-ft='{"tn":"H"}'>
                          <div class="mtm">
                           <div class="_6m2 _1zpr clearfix _dcs _4_w4 _6m8 _59ap _64lx _3eqz _20pq _3eqw _2rk1 _1-9r _5qqr" data-ft='{"tn":"H"}' id="u_0_y">
                            <div class="clearfix _2r3x">
                             <div class="lfloat _ohe">
                              <span class="_3m6-">
                               <div class="_150c" data-ft='{"tn":"F"}'>
                                <div class="_5mly _45oh" id="u_0_1s">
                                 <div class="_5v-_" id="u_0_1t">
                                  <div class="_1c_u _45oh" id="u_0_1u">
                                   <div class="_53j5" id="u_0_1v" style="height:474px;width:474px;" tabindex="0">
                                    <video class="_ox1 _21y0" data-original-aspect-ratio="0.88888888888889" data-video-height="474" data-video-width="474" height="474" id="u_0_1w" preload="metadata" style="" width="474">
                                    </video>
                                    <div class="_4lpe _3htz">
                                    </div>
                                    <div class="_m54 _1jto _3htz" id="u_0_1x">
                                    </div>
                                    <div class="_4ubd _170l _27db _3htz" id="u_0_1z">
                                    </div>
                                    <div class="_npo hidden_elem _3htz" id="u_0_20">
                                     <div class="_3drf">
                                     </div>
                                     <div class="_3x62">
                                      <div class="_63rn">
                                       <div class="_63rm">
                                        <div class="_iij">
                                         이 동영상을 재생하는 중 문제가 발생한 것 같습니다. 브라우저를 다시 시작해보세요.
                                        </div>
                                        <div class="_iir">
                                         닫기
                                        </div>
                                       </div>
                                      </div>
                                     </div>
                                    </div>
                                    <div class="_567v _3bw _4ubd _28dy _3htz" id="u_0_21">
                                     <div class="_567_">
                                      <div class="_2za- _2vd- uiContextualLayerParent _28dz" data-ft='{"tn":"k"}' id="u_0_22">
                                       <div class="_1vx9">
                                        [linkx]
                                        
                                       </div>
                                       <div class="_1vx9">
                                        게시:
                                        [linkx]
                                        
                                       </div>
                                       <div class="_1vx9">
                                        <span>
                                         조회 314회
                                        </span>
                                       </div>
                                      </div>
                                     </div>
                                     <div class="_5bke" id="u_0_23">
                                     </div>
                                    </div>
                                    <i class="_1jto _bsl _4ubd _3htz" id="u_0_19">
                                    </i>
                                    <span aria-busy="true" aria-valuemax="100" aria-valuemin="0" aria-valuetext="읽어들이는 중..." class="img _55ym _55yq _55yo _167h _4ubd _1hiu hidden_elem _360f _167h _3htz" id="u_0_1a" role="progressbar">
                                    </span>
                                    <div class="_3htz _4ubd _1zmi" id="u_0_25">
                                    </div>
                                    <div class="_4ivm" id="u_0_26">
                                    </div>
                                   </div>
                                   <div class="_2i84">
                                    <div id="u_0_27">
                                    </div>
                                   </div>
                                  </div>
                                 </div>
                                </div>
                               </div>
                               <div class="_3ekx _29_4" data-ft='{"tn":"H"}'>
                               </div>
                              </span>
                             </div>
                             <div class="_42ef">
                              <span class="_3c21">
                              </span>
                             </div>
                            </div>
                           </div>
                          </div>
                         </div>
                        </div>
                        <div>
                        </div>
                       </div>
                      </div>
                      <div>
                       <form action="/ajax/ufi/modify.php" class="commentable_item" data-ft='{"tn":"]"}' id="u_0_10" method="post" onsubmit="" rel="async">
                        <div class="_7f6e">
                         <div class="_5vsi">
                         </div>
                         <noscript id="u_0_z">
                         </noscript>
                        </div>
                       </form>
                      </div>
                     </div>
                    </div>
                   </div>
                  </div>
                  <div class="_4z-w">
                   [linkx]
                   
                  </div>
                 </div>
                 <div class="_4-u2 _4-u8" id="videos">
                  <div class="_4-u3 _5dwa _5dwb _3v6c">
                   <span class="_38my">
                    동영상
                    <span class="_c1c">
                    </span>
                   </span>
                   <div class="_3s3-">
                   </div>
                  </div>
                  <div class="_4-u3">
                   <div id="u_0_11">
                    <div class="_5asl _1-gz _3yt7 _5ass" id="u_0_12">
                     <div class="_1-h0">
                      <span class="_1-h1 _3q_l" title="★스튜디오 뿌리 라인 테스트를 공개합니다!">
                       ★스튜디오 뿌리 라인 테스트를 공개합니다!
                      </span>
                     </div>
                     [ahref]
                     
                    </div>
                    <div class="clearfix _ikh _3-8w">
                     <div class="_4bl7 _3-8_">
                      <div class="_5asl _1-gz _3yt7 _5ass" id="u_0_13">
                       <div class="_1-h0">
                        <span class="_1-h1 _3q_m" title="★스튜디오 뿌리 라인 테스트를 공개합니다!">
                         ★스튜디오 뿌리 라인 테스트를 공개합니다!
                        </span>
                       </div>
                       <a ajaxify="/studioppuri/videos/629548430824888/" aria-label="동영상, ★스튜디오 뿌리 라인 테스트를 공개합니다!, 길이: 3초" class="__-q _5asm" href="/studioppuri/videos/629548430824888/" rel="theater">
                        <span class="_5ig0 _47hq">
                         <div class="uiScaledImageContainer _55sd" style="width:248px;height:139px;">
                         </div>
                         <div class="_3uzl _3uzq _47hr">
                          <i class="_3uzm _3uzn">
                          </i>
                         </div>
                         <div class="_3pit">
                          <li>[keywordx]</li>[linkx][mkey1]
                         </div>
                         <div class="_5asn">
                          <div class="_53z">
                           <div aria-label="30 likes" class="_4cn2 _4cn4">
                            <div class="_29qi">
                             <i class="img sp_oDYQfYbMsxg sx_0d6d7c">
                             </i>
                            </div>
                            <div class="_2ieq">
                             30
                            </div>
                           </div>
                          </div>
                         </div>
                        </span>
                       </a>
                      </div>
                     </div>
                     <div class="_4bl7">
                      <div class="_5asl _1-gz _3yt7 _5ass" id="u_0_14">
                       <div class="_1-h0">
                        <span class="_1-h1 _3q_m" title="★스튜디오 뿌리 라인 테스트를 공개합니다!">
                         ★스튜디오 뿌리 라인 테스트를 공개합니다!
                        </span>
                       </div>
                       [ahref]
                       
                      </div>
                     </div>
                    </div>
                   </div>
                   <div class="_4z-w">
                    <a href="/studioppuri/videos/">
                     모두 보기
                    </a>
                   </div>
                  </div>
                 </div>
                 <div class="_4-u2 _4-u8" id="page_photos">
                  <div class="_4-u3 _5dwa _5dwb _3v6c">
                   <span class="_38my">
                    사진
                    <span class="_c1c">
                    </span>
                   </span>
                   <div class="_3s3-">
                   </div>
                  </div>
                  <div class="_4-u3">
                   <div class="_2a2q" id="u_0_2a" style="width:500px; height:500px;">
                    <a ajaxify="/studioppuri/photos/pb.1141401985951059.-2207520000.1562172422./2201583423266238/?type=3&amp;eid=ARDx3yBtebzU34jggET0T4q8fzfkipS7wWaQ4MMRDACiBWFjIVh2WCjznnYQIeFAIVaHXFEozWlqEY9_&amp;size=1449%2C2009&amp;fbid=2201583423266238&amp;source=67&amp;player_origin=pages" class="_5dec _xcx" data-ploi="https://scontent-icn1-1.xx.fbcdn.net/v/t1.0-9/60390339_2201583429932904_1349023024078127104_o.jpg?_nc_cat=110&amp;_nc_oc=AQlW3nIc94cg9dMivtzPDR9QlPOX7bk_PwJuQVcGoqXltY2vK9HXEOMiso_3-aCPcp8&amp;_nc_ht=scontent-icn1-1.xx&amp;oh=5e8b7de94225664a2337c7510656f28a&amp;oe=5D7B2BBD" data-plsi="https://scontent-icn1-1.xx.fbcdn.net/v/t1.0-9/60301181_2201583426599571_3933459744076857344_n.jpg?_nc_cat=108&amp;_nc_oc=AQnQRYb26-ZBzgxfFOUwtsL8Mi2HO1qRVqXNORfd-EwdXdBL_X2WOIbhSppf5kjQS0Y&amp;_nc_ht=scontent-icn1-1.xx&amp;oh=e8591965c9e0bee6a7222bee12536307&amp;oe=5D800915" data-render-location="newsstand" href="/studioppuri/photos/pb.1141401985951059.-2207520000.1562172422./2201583423266238/?type=3&amp;eid=ARDx3yBtebzU34jggET0T4q8fzfkipS7wWaQ4MMRDACiBWFjIVh2WCjznnYQIeFAIVaHXFEozWlqEY9_" rel="theater" style="top:0px; left:0px; width: 249px; height: 500px;">
                     <div class="uiScaledImageContainer" style="width:249px;height:500px;">
                     </div>
                    </a>
                    [linkx]
                    
                    <a ajaxify="/studioppuri/photos/pb.1141401985951059.-2207520000.1562172422./2074656865958895/?type=3&amp;eid=ARAdJZ9UyylyImgWcloTOQv4jm3ddcPDhxG5HTbEzoPlfllzJcQyiqJNiHXkgimW8QfR-hiABshjDQR5&amp;size=1080%2C1350&amp;fbid=2074656865958895&amp;source=67&amp;player_origin=pages" class="_5dec _xcx" data-ploi="https://scontent-icn1-1.xx.fbcdn.net/v/t1.0-9/52602754_2074656872625561_7961322057570975744_o.jpg?_nc_cat=102&amp;_nc_oc=AQl6lJfiaJFX15TfuPsDdnc4YjLWSFG7jl4_Mfk-0QfdKr0c0nGV7eYkHMuK8us7p0I&amp;_nc_ht=scontent-icn1-1.xx&amp;oh=7e0fa9647687cb1b04f859075a5ea062&amp;oe=5D7EB281" data-plsi="https://scontent-icn1-1.xx.fbcdn.net/v/t1.0-9/51940820_2074656869292228_5777359225101484032_n.jpg?_nc_cat=109&amp;_nc_oc=AQmFTVLCjN9fD3kwsVZLBEvE0Z7DUy6A1TnTtdrfc7qYZoL18ePARFAOx1STiolvIC0&amp;_nc_ht=scontent-icn1-1.xx&amp;oh=dd73c311c8e5699e57a71ff6a0fbdda6&amp;oe=5D82F748" data-render-location="newsstand" href="/studioppuri/photos/pb.1141401985951059.-2207520000.1562172422./2074656865958895/?type=3&amp;eid=ARAdJZ9UyylyImgWcloTOQv4jm3ddcPDhxG5HTbEzoPlfllzJcQyiqJNiHXkgimW8QfR-hiABshjDQR5" rel="theater" style="top:251px; left:251px; width: 249px; height: 249px;">
                     <div class="uiScaledImageContainer" style="width:249px;height:249px;">
                     </div>
                    </a>
                   </div>
                   <div class="_4z-w">
                    [linkx]
                    
                   </div>
                  </div>
                 </div>
                 <div class="clearfix uiMorePager stat_elem _52jv" id="www_pages_reaction_see_more_unitwww_pages_home">
                  <div>
                   <a ajaxify="/pages_reaction_units/more/?page_id=1141401985951059&amp;cursor=%7B%22card_id%22%3A%22page_photos%22%2C%22has_next_page%22%3Atrue%7D&amp;surface=www_pages_home&amp;unit_count=8&amp;referrer" class="pam uiBoxLightblue uiMorePagerPrimary" href="#" rel="ajaxify" role="button">
                    더 보기
                    <i class="mhs mts arrow img sp_d8Bh2yMmHyd sx_e69c1a">
                    </i>
                   </a>
                   <span class="uiMorePagerLoader pam uiBoxLightblue">
                    <span aria-busy="true" aria-valuemax="100" aria-valuemin="0" aria-valuetext="읽어들이는 중..." class="img _55ym _55yq _55yo _3-8h" role="progressbar">
                    </span>
                   </span>
                  </div>
                 </div>
                </div>
               </div>
              </div>
             </div>
             <div data-referrer="PagesProfileHomeRenderAfterMainContentPagelet" id="PagesProfileHomeRenderAfterMainContentPagelet">
             </div>
            </div>
           </div>
          </div>
         </div>
        </div>
       </div>
      </div>
     </div>
    </div>
    <div>
    </div>
   </div>
   <div>
   </div>
   <span>
   </span>
  </div>
  <div>
  </div>
  <b style="color:black;background-color:#a0ffff">
   jnice09-ipp30-wq-zq-0340
  </b>
 </body>
</html>|<---