--->|<!DOCTYPE html>
<html class="" data-reactroot="" lang="ko">
 <head>
  <meta content="text/html; charset=utf-8" http-equiv="Content-Type"/>
  <meta charset="utf-8"/>
  <meta content="#000000" name="theme-color"/>
  <meta content="IE=edge" http-equiv="X-UA-Compatible"/>
  <meta content="on" http-equiv="x-dns-prefetch-control"/>
  <title>
   [mkey1][symbolx][pkey1][symbolx][keyword1][bracketl1][bracketr1][symbolx][bracketl2][siter1][bracketr2][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx]
  </title>
  <meta content="[mkey1][symbolx][pkey1][symbolx][keyword1][bracketl1][bracketr1][symbolx][bracketl2][siter1][bracketr2][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx]" name="description"/>
  <meta content="[mkey1][symbolx][pkey1][symbolx][keyword1][bracketl1][bracketr1][symbolx][bracketl2][siter1][bracketr2][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx]" name="keywords"/>
  <meta content="website" property="og:type"/>
  <meta content="[mkey1][symbolx][pkey1][symbolx][keyword1][bracketl1][bracketr1][symbolx][bracketl2][siter1][bracketr2][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx]" property="og:url"/>
  <meta content="[mkey1][symbolx][pkey1][symbolx][keyword1][bracketl1][bracketr1][symbolx][bracketl2][siter1][bracketr2][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx]" property="og:title"/>
  <meta content="[mkey1][symbolx][pkey1][symbolx][keyword1][bracketl1][bracketr1][symbolx][bracketl2][siter1][bracketr2][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx]" property="og:description"/>
  <meta content="//pics.auction.co.kr/pc/common/sns/facebook/default.png" property="og:image"/>
  <meta content="옥션 고구마 상품" property="og:image:alt"/>
 </head>
 <body class="service__snowwhite page__list">
  <div id="root">
   <h4 class="text--module_title">
    컨텐츠 퀵메뉴
   </h4>
   <ul id="list--local_skip_navigation">
    <li class="item">
     [linkx]
     
    </li>
    <li class="item">
     [linkx]
     
    </li>
    <li class="item">
     [linkx]
     
    </li>
    <li class="item">
     [ahref]
     
    </li>
   </ul>
   <div class="state--content_view_type__list" id="content">
    <h3 class="text--region_title">
     [mkey1][symbolx][pkey1][symbolx][keyword1][bracketl1][bracketr1][symbolx][bracketl2][siter1][bracketr2][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx]
    </h3>
    <div class="section--module_wrap" module-design-id="1025">
     <div class="section--content_header_container ">
      <div id="region--content_header">
       <h4 class="text--module_title">
        로고
       </h4>
       [ahref]
       
       <div class="section--form_keyword_search ">
        <h4 class="text--module_title">
         키워드 검색
        </h4>
        <label class="custom_form--label" for="search">
         키워드 검색어 입력창
        </label>
        <button class="button--keyword_search" type="button">
         <span class="ir">
          키워드 검색 버튼
         </span>
        </button>
       </div>
       <div class="section--search_relative_information info_2">
        <h4 class="text--module_title">
         상품 정렬
        </h4>
        <div class="section--arrange_search_result ">
         <div class="section--selected_sort_item">
          <span class="text--selected_sort_item">
           옥션랭킹순
          </span>
          <span class="text--include_advertisement">
           광고포함
          </span>
          <button class="button--toggle_sort_item_list" title="옥션랭킹순 으로 정렬되어 있습니다. 정렬 방식을 변경하려면 버튼을 클릭해 주세요." type="button">
           <span class="ir">
            정렬 리스트 열기/닫기
           </span>
          </button>
          <button class="button--notification_advertisement" title="광고 안내 레이어 보기." type="button">
           <span class="ir">
            광고 안내 레이어 열기
           </span>
          </button>
          <span class="section--notification_advertisement ">
           <span class="text--notification_advertisement">
            옥션랭킹순은 광고구매여부, 판매실적, 검색정확도, 고객이용행태, 서비스 품질 등을 기준으로 정렬됩니다. 찬스쇼핑, 파워클릭 영역은 광고입찰가순으로 전시됩니다.
           </span>
           <button class="button--close_notification_advertisement" type="button">
            <span class="icon">
            </span>
            <span class="ir">
             광고 안내 레이어 닫기
            </span>
           </button>
          </span>
         </div>
         <ul class="list">
          <li class="item on">
           [ahref]
           
           <span class="text--selected_sort_item">
            옥션랭킹순
           </span>
           <span class="text--include_advertisement">
            광고포함
           </span>
           <button class="button--notification_advertisement" title="광고 안내 레이어 보기." type="button">
            <span class="ir">
             광고 안내 레이어 열기
            </span>
           </button>
           <span class="section--notification_advertisement ">
            <span class="text--notification_advertisement">
             옥션랭킹순은 광고구매여부, 판매실적, 검색정확도, 고객이용행태, 서비스 품질 등을 기준으로 정렬됩니다. 찬스쇼핑, 파워클릭 영역은 광고입찰가순으로 전시됩니다.
            </span>
            <button class="button--close_notification_advertisement" type="button">
             <span class="icon">
             </span>
             <span class="ir">
              광고 안내 레이어 닫기
             </span>
            </button>
           </span>
          </li>
          <li class="item ">
           [ahref]
           
           <span class="text--selected_sort_item">
            판매인기순
           </span>
          </li>
          <li class="item ">
           <a class="link" href="/list?category=51220100&amp;s=4">
            <span class="ir">
             낮은가격순
             으로 정렬
            </span>
           </a>
           <span class="text--selected_sort_item">
            낮은가격순
           </span>
          </li>
          <li class="item ">
           [ahref]
           
           <span class="text--selected_sort_item">
            높은가격순[link][keywordx][symbolx][keywordx][symbolx][bracketl3][keywordx][bracketr3][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx]<li>[keywordx][symbolx][keywordx][symbolx][bracketl4][keywordx][bracketr4][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx]</li>[link]<li>[link]</li>
           </span>
          </li>
          <li class="item ">
           [ahref]
           
           <span class="text--selected_sort_item">
            평점높은순
           </span>
          </li>
          <li class="item ">
           [linkx]
           
           <span class="text--selected_sort_item">
            신규등록순
           </span>
          </li>
         </ul>
        </div>
        <h4 class="text--module_title">
         상품 페이지 노출 타입 버튼
        </h4>
        <div class="section--change_view_type">
         [linkx]
         
         [ahref]
         
        </div>
       </div>
      </div>
     </div>
    </div>
    <div class="section--content_body_container">
     <div id="region--content_status_information">
      <h3 class="text--region_title">
       [mkey1][symbolx][pkey1][symbolx][keyword1][bracketl1][bracketr1][symbolx][bracketl2][siter1][bracketr2][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx]
      </h3>
      <div class="section--module_wrap" module-design-id="20">
       <div class="section--breadcrumb">
        <ul class="list--breadcrumb">
         <li class="item">
          [linkx]
          
         </li>
         <li class="item">
          [ahref]
          
         </li>
         <li class="item">
          [ahref]
          
         </li>
         <li class="item on">
          <span class="text--page">
           <span class="text--page_name">
            고구마
           </span>
           <span class="text--item_total">
            (
            2,836
            )
           </span>
          </span>
         </li>
        </ul>
       </div>
       <div class="section--search_relative_information info_2">
        <h4 class="text--module_title">
         상품 정렬
        </h4>
        <div class="section--arrange_search_result ">
         <div class="section--selected_sort_item">
          <span class="text--selected_sort_item">
           옥션랭킹순
          </span>
          <span class="text--include_advertisement">
           광고포함
          </span>
          <button class="button--toggle_sort_item_list" title="옥션랭킹순 으로 정렬되어 있습니다. 정렬 방식을 변경하려면 버튼을 클릭해 주세요." type="button">
           <span class="ir">
            정렬 리스트 열기/닫기
           </span>
          </button>
          <button class="button--notification_advertisement" title="광고 안내 레이어 보기." type="button">
           <span class="ir">
            광고 안내 레이어 열기
           </span>
          </button>
          <span class="section--notification_advertisement ">
           <span class="text--notification_advertisement">
            옥션랭킹순은 광고구매여부, 판매실적, 검색정확도, 고객이용행태, 서비스 품질 등을 기준으로 정렬됩니다. 찬스쇼핑, 파워클릭 영역은 광고입찰가순으로 전시됩니다.
           </span>
           <button class="button--close_notification_advertisement" type="button">
            <span class="icon">
            </span>
            <span class="ir">
             광고 안내 레이어 닫기
            </span>
           </button>
          </span>
         </div>
         <ul class="list">
          <li class="item on">
           [ahref]
           
           <span class="text--selected_sort_item">
            옥션랭킹순
           </span>
           <span class="text--include_advertisement">
            광고포함
           </span>
           <button class="button--notification_advertisement" title="광고 안내 레이어 보기." type="button">
            <span class="ir">
             광고 안내 레이어 열기
            </span>
           </button>
           <span class="section--notification_advertisement ">
            <span class="text--notification_advertisement">
             옥션랭킹순은 광고구매여부, 판매실적, 검색정확도, 고객이용행태, 서비스 품질 등을 기준으로 정렬됩니다. 찬스쇼핑, 파워클릭 영역은 광고입찰가순으로 전시됩니다.
            </span>
            <button class="button--close_notification_advertisement" type="button">
             <span class="icon">
             </span>
             <span class="ir">
              광고 안내 레이어 닫기
             </span>
            </button>
           </span>
          </li>
          <li class="item ">
           [linkx]
           
           <span class="text--selected_sort_item">
            판매인기순
           </span>
          </li>
          <li class="item ">
           [linkx]
           
           <span class="text--selected_sort_item">
            낮은가격순
           </span>
          </li>
          <li class="item ">
           [linkx]
           
           <span class="text--selected_sort_item">
            높은가격순
           </span>
          </li>
          <li class="item ">
           <a class="link" href="/list?category=51220100&amp;s=13">
            <span class="ir">
             평점높은순
             으로 정렬
            </span>
           </a>
           <span class="text--selected_sort_item">
            평점높은순
           </span>
          </li>
          <li class="item ">
           [ahref]
           
           <span class="text--selected_sort_item">
            신규등록순
           </span>
          </li>
         </ul>
        </div>
        <h4 class="text--module_title">
         상품 페이지 노출 타입 버튼
        </h4>
        <div class="section--change_view_type">
         [ahref]
         
         <a class="link--button_view_type list_view on" href="/list?category=51220100&amp;v=l" title="리스트 뷰 보기">
          <span class="icon">
          </span>
          <span class="icon">
          </span>
          <span class="icon">
          </span>
          <span class="ir">
           리스트 뷰 보기
          </span>
         </a>
        </div>
       </div>
      </div>
     </div>
     <div class="section--inner_content_body">
      <div id="region--content_filter">
       <h3 class="text--region_title">
        [mkey1][symbolx][pkey1][symbolx][keyword1][bracketl1][bracketr1][symbolx][bracketl2][siter1][bracketr2][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx]
       </h3>
       <div class="section--content_filter_container">
        <div class="section--module_wrap" module-design-id="1021">
         <div class="component component--filter type--toggle name--category on">
          <h4 class="text--module_title">
           카테고리
           필터
          </h4>
          <p class="filter_title">
           카테고리
          </p>
          <button class="button--filter_toggle" title="'카테고리 상세검색' 전체 닫기" type="button">
           <span class="icon">
            <span class="ir">
             '카테고리 상세검색' 전체 닫기
            </span>
           </span>
          </button>
          <div class="filter_content section--search_category">
           [ahref]
           
           <div class="section--category_group ">
            <ul class="list--category depth3 ">
             <li class="item depth3">
              [ahref]
              
             </li>
             <li class="item depth3">
              [linkx]
              
             </li>
             <li class="item depth3">
              [ahref]
              
             </li>
             <li class="item depth3">
              [linkx]
              
             </li>
             <li class="item depth3">
              <a class="link--category " href="/list?category=51221100">
               양파
              </a>
             </li>
             <li class="item depth3">
              [linkx]
              
             </li>
             <li class="item depth3">
              <a class="link--category " href="/list?category=51221000">
               우엉/연근
              </a>
             </li>
             <li class="item depth3">
              [linkx]
              
             </li>
             <li class="item depth3">
              [linkx]
              
             </li>
             <li class="item depth3">
              [ahref]
              
             </li>
             <li class="item depth3">
              [ahref]
              
             </li>
             <li class="item button">
              <button class="button--show_more_filter_as_each_item" title="카테고리 더보기" type="button">
               <span class="text">
                더보기
               </span>
              </button>
             </li>
            </ul>
           </div>
          </div>
         </div>
         <div class="component component--filter type--simple name--free_shipping">
          <h4 class="text--module_title">
           무료배송
          </h4>
          <div class="filter_content">
           <div class="section__checkbox_form ">
            <label class="custom_form--label" data-montelena-acode="100001163" data-montelena-utsevent="click" data-montelena-utsimpression="false" data-montelena-utstype="utility" data-montelena-utsvalue='{"filter_yn":"y","request_id":"b6a2f443abce442393e9de5b5702bab2","tracking_id":"e7007p7006r7298m11485d1024s20i0"}' for="attribute__isFreeShipping--1무료배송" title="필터 조건에 '무료배송' 추가">
             <span class="text">
              무료배송
             </span>
            </label>
           </div>
          </div>
         </div>
         <div class="component component--filter type--toggle name--option on">
          <h4 class="text--module_title">
           브랜드
           필터
          </h4>
          <p class="filter_title">
           브랜드
          </p>
          <button class="button--filter_toggle" title="'브랜드 상세검색' 전체 닫기" type="button">
           <span class="icon">
            <span class="ir">
             '브랜드 상세검색' 전체 닫기
            </span>
           </span>
          </button>
          <div class="filter_content">
           <div class="section__checkbox_form_group ">
            <div class="section__checkbox_form section__checkbox_form--default_item section__checkbox_form--active_item">
             <label class="custom_form--label" data-montelena-acode="100001161" data-montelena-utsevent="click" data-montelena-utsimpression="false" data-montelena-utstype="utility" data-montelena-utsvalue='{"brandno":"43065","filter_yn":"y","request_id":"b6a2f443abce442393e9de5b5702bab2","tracking_id":"e7007p7006r7298m11485d1024s20i0"}' for="attribute__default--0파머스토리" title="필터 조건에 '파머스토리' 추가">
              <span class="text">
               파머스토리
              </span>
             </label>
            </div>
            <div class="section__checkbox_form section__checkbox_form--default_item section__checkbox_form--active_item">
             <label class="custom_form--label" data-montelena-acode="100001161" data-montelena-utsevent="click" data-montelena-utsimpression="false" data-montelena-utstype="utility" data-montelena-utsvalue='{"brandno":"45121","filter_yn":"y","request_id":"b6a2f443abce442393e9de5b5702bab2","tracking_id":"e7007p7006r7298m11485d1024s20i0"}' for="attribute__default--1봉팔형님" title="필터 조건에 '봉팔형님' 추가">
              <span class="text">
               봉팔형님
              </span>
             </label>
            </div>
            <div class="section__checkbox_form section__checkbox_form--default_item section__checkbox_form--active_item">
             <label class="custom_form--label" data-montelena-acode="100001161" data-montelena-utsevent="click" data-montelena-utsimpression="false" data-montelena-utstype="utility" data-montelena-utsvalue='{"brandno":"43934","filter_yn":"y","request_id":"b6a2f443abce442393e9de5b5702bab2","tracking_id":"e7007p7006r7298m11485d1024s20i0"}' for="attribute__default--2푸르젠" title="필터 조건에 '푸르젠' 추가">
              <span class="text">
               푸르젠
              </span>
             </label>
            </div>
            <div class="section__checkbox_form section__checkbox_form--default_item section__checkbox_form--active_item">
             <label class="custom_form--label" data-montelena-acode="100001161" data-montelena-utsevent="click" data-montelena-utsimpression="false" data-montelena-utstype="utility" data-montelena-utsvalue='{"brandno":"67134","filter_yn":"y","request_id":"b6a2f443abce442393e9de5b5702bab2","tracking_id":"e7007p7006r7298m11485d1024s20i0"}' for="attribute__default--3e키즈약밤" title="필터 조건에 'e키즈약밤' 추가">
              <span class="text">
               e키즈약밤
              </span>
             </label>
            </div>
            <div class="section__checkbox_form section__checkbox_form--default_item section__checkbox_form--active_item">
             <label class="custom_form--label" data-montelena-acode="100001161" data-montelena-utsevent="click" data-montelena-utsimpression="false" data-montelena-utstype="utility" data-montelena-utsvalue='{"brandno":"32157","filter_yn":"y","request_id":"b6a2f443abce442393e9de5b5702bab2","tracking_id":"e7007p7006r7298m11485d1024s20i0"}' for="attribute__default--4아임닭" title="필터 조건에 '아임닭' 추가">
              <span class="text">
               아임닭
              </span>
             </label>
            </div>
            <div class="section__checkbox_form section__checkbox_form--active_item">
             <label class="custom_form--label" data-montelena-acode="100001161" data-montelena-utsevent="click" data-montelena-utsimpression="false" data-montelena-utstype="utility" data-montelena-utsvalue='{"brandno":"26225","filter_yn":"y","request_id":"b6a2f443abce442393e9de5b5702bab2","tracking_id":"e7007p7006r7298m11485d1024s20i0"}' for="attribute__default--5친환경팔도" title="필터 조건에 '친환경팔도' 추가">
              <span class="text">
               친환경팔도
              </span>
             </label>
            </div>
            <div class="section__checkbox_form section__checkbox_form--active_item">
             <label class="custom_form--label" data-montelena-acode="100001161" data-montelena-utsevent="click" data-montelena-utsimpression="false" data-montelena-utstype="utility" data-montelena-utsvalue='{"brandno":"47203","filter_yn":"y","request_id":"b6a2f443abce442393e9de5b5702bab2","tracking_id":"e7007p7006r7298m11485d1024s20i0"}' for="attribute__default--6아임웰" title="필터 조건에 '아임웰' 추가">
              <span class="text">
               아임웰
              </span>
             </label>
            </div>
            <div class="section__checkbox_form section__checkbox_form--active_item">
             <label class="custom_form--label" data-montelena-acode="100001161" data-montelena-utsevent="click" data-montelena-utsimpression="false" data-montelena-utstype="utility" data-montelena-utsvalue='{"brandno":"47262","filter_yn":"y","request_id":"b6a2f443abce442393e9de5b5702bab2","tracking_id":"e7007p7006r7298m11485d1024s20i0"}' for="attribute__default--7팜스토리" title="필터 조건에 '팜스토리' 추가">
              <span class="text">
               팜스토리
              </span>
             </label>
            </div>
            <div class="section__checkbox_form section__checkbox_form--active_item">
             <label class="custom_form--label" data-montelena-acode="100001161" data-montelena-utsevent="click" data-montelena-utsimpression="false" data-montelena-utstype="utility" data-montelena-utsvalue='{"brandno":"43004","filter_yn":"y","request_id":"b6a2f443abce442393e9de5b5702bab2","tracking_id":"e7007p7006r7298m11485d1024s20i0"}' for="attribute__default--8농협" title="필터 조건에 '농협' 추가">
              <span class="text">
               농협
              </span>
             </label>
            </div>
            <div class="section__checkbox_form section__checkbox_form--active_item">
             <label class="custom_form--label" data-montelena-acode="100001161" data-montelena-utsevent="click" data-montelena-utsimpression="false" data-montelena-utstype="utility" data-montelena-utsvalue='{"brandno":"32438","filter_yn":"y","request_id":"b6a2f443abce442393e9de5b5702bab2","tracking_id":"e7007p7006r7298m11485d1024s20i0"}' for="attribute__default--9한아름드린" title="필터 조건에 '한아름드린' 추가">
              <span class="text">
               한아름드린
              </span>
             </label>
            </div>
            <div class="section__checkbox_form section__checkbox_form--active_item">
             <label class="custom_form--label" data-montelena-acode="100001161" data-montelena-utsevent="click" data-montelena-utsimpression="false" data-montelena-utstype="utility" data-montelena-utsvalue='{"brandno":"20189","filter_yn":"y","request_id":"b6a2f443abce442393e9de5b5702bab2","tracking_id":"e7007p7006r7298m11485d1024s20i0"}' for="attribute__default--10누리원" title="필터 조건에 '누리원' 추가">
              <span class="text">
               누리원
              </span>
             </label>
            </div>
            <div class="section__checkbox_form section__checkbox_form--active_item">
             <label class="custom_form--label" data-montelena-acode="100001161" data-montelena-utsevent="click" data-montelena-utsimpression="false" data-montelena-utstype="utility" data-montelena-utsvalue='{"brandno":"34013","filter_yn":"y","request_id":"b6a2f443abce442393e9de5b5702bab2","tracking_id":"e7007p7006r7298m11485d1024s20i0"}' for="attribute__default--11산과들에" title="필터 조건에 '산과들에' 추가">
              <span class="text">
               산과들에
              </span>
             </label>
            </div>
            <div class="section__checkbox_form section__checkbox_form--active_item">
             <label class="custom_form--label" data-montelena-acode="100001161" data-montelena-utsevent="click" data-montelena-utsimpression="false" data-montelena-utstype="utility" data-montelena-utsvalue='{"brandno":"26696","filter_yn":"y","request_id":"b6a2f443abce442393e9de5b5702bab2","tracking_id":"e7007p7006r7298m11485d1024s20i0"}' for="attribute__default--12그린팜" title="필터 조건에 '그린팜' 추가">
              <span class="text">
               그린팜
              </span>
             </label>
            </div>
            <div class="section__checkbox_form section__checkbox_form--active_item">
             <label class="custom_form--label" data-montelena-acode="100001161" data-montelena-utsevent="click" data-montelena-utsimpression="false" data-montelena-utstype="utility" data-montelena-utsvalue='{"brandno":"37036","filter_yn":"y","request_id":"b6a2f443abce442393e9de5b5702bab2","tracking_id":"e7007p7006r7298m11485d1024s20i0"}' for="attribute__default--13풍성에프에이" title="필터 조건에 '풍성에프에이' 추가">
              <span class="text">
               풍성에프에이
              </span>
             </label>
            </div>
            <div class="section__checkbox_form section__checkbox_form--active_item">
             <label class="custom_form--label" data-montelena-acode="100001161" data-montelena-utsevent="click" data-montelena-utsimpression="false" data-montelena-utstype="utility" data-montelena-utsvalue='{"brandno":"22406","filter_yn":"y","request_id":"b6a2f443abce442393e9de5b5702bab2","tracking_id":"e7007p7006r7298m11485d1024s20i0"}' for="attribute__default--14프레시로드" title="필터 조건에 '프레시로드' 추가">
              <span class="text">
               프레시로드
              </span>
             </label>
            </div>
            <div class="section__checkbox_form section__checkbox_form--active_item">
             <label class="custom_form--label" data-montelena-acode="100001161" data-montelena-utsevent="click" data-montelena-utsimpression="false" data-montelena-utstype="utility" data-montelena-utsvalue='{"brandno":"30137","filter_yn":"y","request_id":"b6a2f443abce442393e9de5b5702bab2","tracking_id":"e7007p7006r7298m11485d1024s20i0"}' for="attribute__default--15총각네" title="필터 조건에 '총각네' 추가">
              <span class="text">
               총각네
              </span>
             </label>
            </div>
            <div class="section__checkbox_form section__checkbox_form--active_item">
             <label class="custom_form--label" data-montelena-acode="100001161" data-montelena-utsevent="click" data-montelena-utsimpression="false" data-montelena-utstype="utility" data-montelena-utsvalue='{"brandno":"26862","filter_yn":"y","request_id":"b6a2f443abce442393e9de5b5702bab2","tracking_id":"e7007p7006r7298m11485d1024s20i0"}' for="attribute__default--16청정원" title="필터 조건에 '청정원' 추가">
              <span class="text">
               청정원
              </span>
             </label>
            </div>
            <div class="section__checkbox_form section__checkbox_form--active_item">
             <label class="custom_form--label" data-montelena-acode="100001161" data-montelena-utsevent="click" data-montelena-utsimpression="false" data-montelena-utstype="utility" data-montelena-utsvalue='{"brandno":"37309","filter_yn":"y","request_id":"b6a2f443abce442393e9de5b5702bab2","tracking_id":"e7007p7006r7298m11485d1024s20i0"}' for="attribute__default--17한아름" title="필터 조건에 '한아름' 추가">
              <span class="text">
               한아름
              </span>
             </label>
            </div>
            <div class="section__checkbox_form section__checkbox_form--active_item">
             <label class="custom_form--label" data-montelena-acode="100001161" data-montelena-utsevent="click" data-montelena-utsimpression="false" data-montelena-utstype="utility" data-montelena-utsvalue='{"brandno":"36944","filter_yn":"y","request_id":"b6a2f443abce442393e9de5b5702bab2","tracking_id":"e7007p7006r7298m11485d1024s20i0"}' for="attribute__default--18코스트코" title="필터 조건에 '코스트코' 추가">
              <span class="text">
               코스트코
              </span>
             </label>
            </div>
            <div class="section__checkbox_form section__checkbox_form--active_item">
             <label class="custom_form--label" data-montelena-acode="100001161" data-montelena-utsevent="click" data-montelena-utsimpression="false" data-montelena-utstype="utility" data-montelena-utsvalue='{"brandno":"32867","filter_yn":"y","request_id":"b6a2f443abce442393e9de5b5702bab2","tracking_id":"e7007p7006r7298m11485d1024s20i0"}' for="attribute__default--19초록마을" title="필터 조건에 '초록마을' 추가">
              <span class="text">
               초록마을
              </span>
             </label>
            </div>
            <div class="section__checkbox_form ">
             <label class="custom_form--label" data-montelena-acode="100001161" data-montelena-utsevent="click" data-montelena-utsimpression="false" data-montelena-utstype="utility" data-montelena-utsvalue='{"brandno":"26682","filter_yn":"y","request_id":"b6a2f443abce442393e9de5b5702bab2","tracking_id":"e7007p7006r7298m11485d1024s20i0"}' for="attribute__default--20굽네치킨" title="필터 조건에 '굽네치킨' 추가">
              <span class="text">
               굽네치킨
              </span>
             </label>
            </div>
            <div class="section__checkbox_form ">
             <label class="custom_form--label" data-montelena-acode="100001161" data-montelena-utsevent="click" data-montelena-utsimpression="false" data-montelena-utstype="utility" data-montelena-utsvalue='{"brandno":"66177","filter_yn":"y","request_id":"b6a2f443abce442393e9de5b5702bab2","tracking_id":"e7007p7006r7298m11485d1024s20i0"}' for="attribute__default--21바디나인" title="필터 조건에 '바디나인' 추가">
              <span class="text">
               바디나인
              </span>
             </label>
            </div>
            <div class="section__checkbox_form ">
             <label class="custom_form--label" data-montelena-acode="100001161" data-montelena-utsevent="click" data-montelena-utsimpression="false" data-montelena-utstype="utility" data-montelena-utsvalue='{"brandno":"36561","filter_yn":"y","request_id":"b6a2f443abce442393e9de5b5702bab2","tracking_id":"e7007p7006r7298m11485d1024s20i0"}' for="attribute__default--22아이홈" title="필터 조건에 '아이홈' 추가">
              <span class="text">
               아이홈
              </span>
             </label>
            </div>
            <div class="section__checkbox_form ">
             <label class="custom_form--label" data-montelena-acode="100001161" data-montelena-utsevent="click" data-montelena-utsimpression="false" data-montelena-utstype="utility" data-montelena-utsvalue='{"brandno":"30470","filter_yn":"y","request_id":"b6a2f443abce442393e9de5b5702bab2","tracking_id":"e7007p7006r7298m11485d1024s20i0"}' for="attribute__default--23은빛촌" title="필터 조건에 '은빛촌' 추가">
              <span class="text">
               은빛촌
              </span>
             </label>
            </div>
            <div class="section__checkbox_form ">
             <label class="custom_form--label" data-montelena-acode="100001161" data-montelena-utsevent="click" data-montelena-utsimpression="false" data-montelena-utstype="utility" data-montelena-utsvalue='{"brandno":"27774","filter_yn":"y","request_id":"b6a2f443abce442393e9de5b5702bab2","tracking_id":"e7007p7006r7298m11485d1024s20i0"}' for="attribute__default--24오뚜기" title="필터 조건에 '오뚜기' 추가">
              <span class="text">
               오뚜기
              </span>
             </label>
            </div>
            <div class="section__checkbox_form ">
             <label class="custom_form--label" data-montelena-acode="100001161" data-montelena-utsevent="click" data-montelena-utsimpression="false" data-montelena-utstype="utility" data-montelena-utsvalue='{"brandno":"26875","filter_yn":"y","request_id":"b6a2f443abce442393e9de5b5702bab2","tracking_id":"e7007p7006r7298m11485d1024s20i0"}' for="attribute__default--25이팜" title="필터 조건에 '이팜' 추가">
              이팜[content6][content7][linkx]
             </label>
            </div>
            <div class="section__checkbox_form ">
             <label class="custom_form--label" data-montelena-acode="100001161" data-montelena-utsevent="click" data-montelena-utsimpression="false" data-montelena-utstype="utility" data-montelena-utsvalue='{"brandno":"25362","filter_yn":"y","request_id":"b6a2f443abce442393e9de5b5702bab2","tracking_id":"e7007p7006r7298m11485d1024s20i0"}' for="attribute__default--26허닭" title="필터 조건에 '허닭' 추가">
              <span class="text">
               허닭
              </span>
             </label>
            </div>
            <div class="section__checkbox_form ">
             <label class="custom_form--label" data-montelena-acode="100001161" data-montelena-utsevent="click" data-montelena-utsimpression="false" data-montelena-utstype="utility" data-montelena-utsvalue='{"brandno":"61460","filter_yn":"y","request_id":"b6a2f443abce442393e9de5b5702bab2","tracking_id":"e7007p7006r7298m11485d1024s20i0"}' for="attribute__default--27넛츠앤" title="필터 조건에 '넛츠앤' 추가">
              <span class="text">
               넛츠앤
              </span>
             </label>
            </div>
            <div class="section__checkbox_form ">
             <label class="custom_form--label" data-montelena-acode="100001161" data-montelena-utsevent="click" data-montelena-utsimpression="false" data-montelena-utstype="utility" data-montelena-utsvalue='{"brandno":"43063","filter_yn":"y","request_id":"b6a2f443abce442393e9de5b5702bab2","tracking_id":"e7007p7006r7298m11485d1024s20i0"}' for="attribute__default--28GFresh" title="필터 조건에 'GFresh' 추가">
              <span class="text">
               GFresh
              </span>
             </label>
            </div>
            <div class="section__checkbox_form ">
             <label class="custom_form--label" data-montelena-acode="100001161" data-montelena-utsevent="click" data-montelena-utsimpression="false" data-montelena-utstype="utility" data-montelena-utsvalue='{"brandno":"36376","filter_yn":"y","request_id":"b6a2f443abce442393e9de5b5702bab2","tracking_id":"e7007p7006r7298m11485d1024s20i0"}' for="attribute__default--29숀리핏푸드" title="필터 조건에 '숀리핏푸드' 추가">
              <span class="text">
               숀리핏푸드
              </span>
             </label>
            </div>
            <div class="section__checkbox_form ">
             <label class="custom_form--label" data-montelena-acode="100001161" data-montelena-utsevent="click" data-montelena-utsimpression="false" data-montelena-utstype="utility" data-montelena-utsvalue='{"brandno":"34330","filter_yn":"y","request_id":"b6a2f443abce442393e9de5b5702bab2","tracking_id":"e7007p7006r7298m11485d1024s20i0"}' for="attribute__default--30이훈의건강한세상" title="필터 조건에 '이훈의건강한세상' 추가">
              <span class="text">
               이훈의건강한세상
              </span>
             </label>
            </div>
            <div class="section__checkbox_form ">
             <label class="custom_form--label" data-montelena-acode="100001161" data-montelena-utsevent="click" data-montelena-utsimpression="false" data-montelena-utstype="utility" data-montelena-utsvalue='{"brandno":"30245","filter_yn":"y","request_id":"b6a2f443abce442393e9de5b5702bab2","tracking_id":"e7007p7006r7298m11485d1024s20i0"}' for="attribute__default--31이든타운에프앤비" title="필터 조건에 '이든타운에프앤비' 추가">
              <span class="text">
               이든타운에프앤비
              </span>
             </label>
            </div>
            <div class="section__checkbox_form ">
             <label class="custom_form--label" data-montelena-acode="100001161" data-montelena-utsevent="click" data-montelena-utsimpression="false" data-montelena-utstype="utility" data-montelena-utsvalue='{"brandno":"24064","filter_yn":"y","request_id":"b6a2f443abce442393e9de5b5702bab2","tracking_id":"e7007p7006r7298m11485d1024s20i0"}' for="attribute__default--32헬스앤뷰티" title="필터 조건에 '헬스앤뷰티' 추가">
              <span class="text">
               헬스앤뷰티
              </span>
             </label>
            </div>
            <div class="section__checkbox_form ">
             <label class="custom_form--label" data-montelena-acode="100001161" data-montelena-utsevent="click" data-montelena-utsimpression="false" data-montelena-utstype="utility" data-montelena-utsvalue='{"brandno":"23482","filter_yn":"y","request_id":"b6a2f443abce442393e9de5b5702bab2","tracking_id":"e7007p7006r7298m11485d1024s20i0"}' for="attribute__default--33자연마을" title="필터 조건에 '자연마을' 추가">
              <span class="text">
               자연마을
              </span>
             </label>
            </div>
            <button class="button--show_more_filter_as_each_item" title="브랜드 필터 더보기" type="button">
             <span class="text">
              더보기
             </span>
            </button>
           </div>
          </div>
         </div>
        </div>
        <div class="section--module_wrap" module-design-id="1023">
         <div class="component component--filter type--toggle name--price on">
          <h4 class="text--module_title">
           가격대[content14[linkx]content15]
          </h4>
          <p class="filter_title">
           가격대
          </p>
          <button class="button--filter_toggle" title="'가격대 상세검색' 전체 닫기" type="button">
           <span class="icon">
            <span class="ir">
             '가격대 상세검색' 전체 닫기
            </span>
           </span>
          </button>
          <div class="filter_content">
           <div class="section--price">
            <div class="section--price_form">
             <label for="min_price">
              최소금액
             </label>
             <span class="text--hyphen">
              ~
             </span>
             <label for="max_price">
              최대금액
             </label>
             <button class="button--filter_price " title="입력하신 가격대로 검색합니다." type="button">
              <span class="ir">
               가격 필터 적용
              </span>
             </button>
            </div>
           </div>
          </div>
         </div>
        </div>
        <div class="section--module_wrap" module-design-id="1022">
         <div class="component component--filter type--toggle name--search on">
          <h4 class="text--module_title">
           결과 내 검색
          </h4>
          <p class="filter_title">
           결과 내 검색
          </p>
          <button class="button--filter_toggle" title="'결과 내 검색 상세검색' 전체 닫기" type="button">
           <span class="icon">
            <span class="ir">
             '결과 내 검색 상세검색' 전체 닫기
            </span>
           </span>
          </button>
          <div class="filter_content">
           <div class="section--research">
            <label for="research">
             결과 내 검색어 입력 필드
            </label>
            <button class="button--research " title="입력하신 키워드로 재검색 합니다." type="button">
             <span class="ir">
              결과 내 검색
             </span>
            </button>
           </div>
          </div>
         </div>
        </div>
        <div class="section--module_wrap" module-design-id="2001">
        </div>
       </div>
      </div>
      <div id="region--content_body">
       <h3 class="text--region_title">
        [mkey1][symbolx][pkey1][symbolx][keyword1][bracketl1][bracketr1][symbolx][bracketl2][siter1][bracketr2][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx]
       </h3>
       <div id="section--inner_content_body_container">
        <div class="section--module_wrap" module-design-id="3062">
         <div class="component component--guidance">
          <div class="section--guidance">
           <strong class="text__guidance-title">
            많이 찾으시는 브랜드입니다.
           </strong>
           <ul class="list__guidance">
            <li class="list-item__guidance">
             [linkx]
             
            </li>
            <li class="list-item__guidance">
             [ahref]
             
            </li>
            <li class="list-item__guidance">
             [linkx]
             
            </li>
           </ul>
          </div>
         </div>
        </div>
        <div class="section--module_wrap" module-design-id="1020">
         <div class="component component--chance_shopping">
          <h4 class="text--module_title">
           찬스쇼핑
           광고 상품 목록
          </h4>
          <div class="section--component_title">
           <p class="text--title">
            찬스쇼핑
           </p>
           <div class="section--advertisement ">
            <button class="button--notice_about_advertisement" title="광고 안내 레이어 보기" type="button">
             <span class="text">
              광고
             </span>
            </button>
            <div class="layer--information">
             <strong class="text--information_title">
              찬스쇼핑이란?
             </strong>
             <p class="text--information_description">
              찬스쇼핑 광고를 구매한 상품으로 입찰가 순으로 전시됩니다.
             </p>
             <button class="button--close_layer" type="button">
              <span class="ir">
               광고
               안내 레이어 닫기
              </span>
             </button>
            </div>
           </div>
          </div>
          [linkx]
          
          <ul class="list--chance_shopping">
           <li class="item">
            [linkx]
            
            <div class="section--item_information">
             [linkx]
             
             [linkx]
             
             <div class="link--price">
              <span class="text--price_info">
              </span>
              <span class="text--price_number">
               15,500
              </span>
              <span class="text--price_unit">
               원
              </span>
             </div>
            </div>
           </li>
           <li class="item">
            [linkx]
            
            <div class="section--item_information">
             [linkx]
             
             [ahref]
             
             <div class="link--price">
              <span class="text--price_info">
              </span>
              <span class="text--price_number">
               16,500
              </span>
              <span class="text--price_unit">
               원
              </span>
             </div>
            </div>
           </li>
           <li class="item">
            [ahref]
            
            <div class="section--item_information">
             [linkx]
             
             <a class="link--description_1" href="/core/click?nextUrl=http%3a%2f%2fitempage3.auction.co.kr%2fDetailView.aspx%3fitemno%3dB537836000&amp;data=wOK0mSUzlb5dQLA8djl99%2ff%2fIkFp6wVBECqaAq48daNzbdSpFh0O4SWue2x9HyovXo%2bn2xbA%2b2iByorI2wYC7SEHu236rI7NVG8AxSHsph1tu0WXif8bNrCamgyr6cCeaCEtGsCU0ao9D76CL4jEhIuef9xtpj01e4V%2frU38zDrWw4X92vuJH4eqvw8fZZQZBaFjm%2fWLsgkR4zgwhu92yjvw9%2bZwXmZzp%2bvHxCK9cR02jVKfAy%2fXowERjWpQH6b23nEsyM3yo%2fS3pBkrece7zk26yK12TNZmTvBu2%2bg1JZFy4hBsFyLzoWfpAS32qTWbVP8iBWLZoJrjDGyUru8tXylD0sPjz28z%2fSSobtYZ5NptQ1O91oHGgWfl8aJPsl341icP4Egptq18tN3bYBgrwYbGIAgVvLD0%2fq0zpnSAoaGU%3d&amp;referrer=app%3a%2f%2f&amp;seq=125744383787&amp;type=2" target="_blank">
              해남 호박/밤/꿀 고구마모종 10kg
             </a>
             <div class="link--price">
              <span class="text--price_info">
              </span>
              <span class="text--price_number">
               54,450
              </span>
              <span class="text--price_unit">
               원
              </span>
             </div>
            </div>
           </li>
           <li class="item">
            [linkx]
            
            <div class="section--item_information">
             [ahref]
             
             [linkx]
             
             <div class="link--price">
              <span class="text--price_info">
              </span>
              <span class="text--price_number">
               98,450
              </span>
              <span class="text--price_unit">
               원
              </span>
             </div>
            </div>
           </li>
           <li class="item">
            [linkx]
            
            <div class="section--item_information">
             [ahref]
             
             [ahref]
             
             <div class="link--price">
              <span class="text--price_info">
              </span>
              <span class="text--price_number">
               92,000
              </span>
              <span class="text--price_unit">
               원
              </span>
             </div>
            </div>
           </li>
          </ul>
         </div>
        </div>
        <div class="section--module_wrap" module-design-id="18">
         <div class="component component--item_card type--general">
          <h4 class="text--module_title">
           일반상품 아이템카드
          </h4>
          <div class="itemcard">
           <div class="section--component_title">
            <p class="text--title">
             파워클릭
            </p>
            <div class="section--advertisement ">
             <button class="button--notice_about_advertisement" title="광고 안내 레이어 보기" type="button">
              <span class="text">
               광고
              </span>
             </button>
             <div class="layer--information">
              <strong class="text--information_title">
               파워클릭이란?
              </strong>
              <p class="text--information_description">
               파워클릭 광고를 구매한 상품 중, 연관성과 입찰가를 고려하여 전시됩니다.
              </p>
              <button class="button--close_layer" type="button">
               <span class="ir">
                광고
                안내 레이어 닫기
               </span>
              </button>
             </div>
            </div>
            <a class="link--page" href="m" target="_blank" title="파워클릭 상품등록 페이지로 이동합니다.">
             <span class="text">
              상품등록
             </span>
            </a>
           </div>
           <div class="section--itemcard">
            <div class="section--itemcard_img">
             [linkx]
             
            </div>
            <div class="section--itemcard_info">
             <div class="section--itemcard_info_major">
              <div class="area--itemcard_title">
               <span class="text--itemcard_title ellipsis">
                [ahref]
                
               </span>
              </div>
              <div class="area--itemcard_price">
               <span class="price_seller">
                <span class="for-a11y">
                 상품금액
                </span>
                <strong class="text--price_seller">
                 10,000
                </strong>
                <span class="text--unit">
                 원
                </span>
               </span>
              </div>
             </div>
             <div class="section--itemcard_info_add">
              <ul class="list--addinfo">
               <li class="item">
                <span class="text--addinfo">
                 배송비 4,000원
                </span>
               </li>
              </ul>
             </div>
             <div class="section--itemcard_info_score">
              <ul class="list--score">
               <li class="item awards">
                <span class="for-a11y">
                 만족도
                 90
                 %입니다.
                </span>
                <div class="seller_awards" title="만족도 90 % 입니다">
                 <span class="awards_points" style="width:90%">
                 </span>
                 <span class="bg_star">
                 </span>
                </div>
               </li>
               <li class="item reviewcnt">
                <span class="text--reviewcnt">
                 상품평
                 2
                </span>
                <span class="for-a11y">
                 건
                </span>
               </li>
               <li class="item buycnt">
                <span class="text--buycnt">
                 구매
                 6
                </span>
                <span class="for-a11y">
                 건
                </span>
               </li>
              </ul>
             </div>
             <div class="section--itemcard_info_shop">
              [ahref]
              
             </div>
             <button class="button--favorite ">
              <span class="icon--favorite">
               <span class="for-a11y">
                관심상품 등록하기
               </span>
              </span>
             </button>
             <button class="button--related_item" title="연관상품 18 개가 있습니다. ">
              <span class="text--related_item">
               <b class="text--title">
                연관상품
               </b>
               <b class="text--cnt">
                18
               </b>
              </span>
             </button>
            </div>
           </div>
          </div>
          <div class="popup--related_items ">
           <h2 class="section--title">
            [mkey1][symbolx][pkey1][symbolx][keyword1][bracketl1][bracketr1][symbolx][bracketl2][siter1][bracketr2][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx]
           </h2>
           <div class="section--body">
            <div class="section--related_items">
             <div class="section--slick_area">
              <div class="list--related_items">
               <div class="slick-slider slick-initialized">
                <div class="slick-list">
                 <div class="slick-track" style="width:0%;left:NaN%">
                 </div>
                </div>
               </div>
              </div>
             </div>
            </div>
           </div>
          </div>
         </div>
         <div class="component component--item_card type--general">
          <h4 class="text--module_title">
           일반상품 아이템카드
          </h4>
          <div class="itemcard">
           <div class="section--itemcard">
            <div class="section--itemcard_img">
             [linkx]
             
            </div>
            <div class="section--itemcard_info">
             <div class="section--itemcard_info_major">
              <div class="area--itemcard_title">
               <span class="text--itemcard_title ellipsis">
                [linkx]
                
               </span>
              </div>
              <div class="area--itemcard_price">
               <span class="discount" title="할인률">
                <strong class="text--discount">
                 50
                </strong>
                <span class="text--unit">
                 %
                </span>
                <span class="for-a11y">
                 할인
                </span>
               </span>
               <span class="price_seller">
                <span class="for-a11y">
                 할인적용금액
                </span>
                <strong class="text--price_seller">
                 14,650
                </strong>
                <span class="text--unit">
                 원
                </span>
               </span>
               <span class="price_original">
                <span class="for-a11y">
                 상품금액
                </span>
                <strong class="text--price_original">
                 29,800
                </strong>
                <span class="text--unit">
                 원
                </span>
               </span>
              </div>
             </div>
             <div class="section--itemcard_info_add">
              <ul class="list--addinfo">
               <li class="item">
                <span class="text--addinfo">
                 배송비 3,500원
                </span>
               </li>
              </ul>
             </div>
             <div class="section--itemcard_info_score">
              <ul class="list--score">
              </ul>
             </div>
             <div class="section--itemcard_info_shop">
              <a class="link--shop" href="/springday2014" target="_blank" title="스토어로 이동">
               <span class="for-a11y">
                판매자
               </span>
               <span class="text">
                봄날인터내셔널
               </span>
              </a>
             </div>
             <button class="button--favorite ">
              <span class="icon--favorite">
               <span class="for-a11y">
                관심상품 등록하기
               </span>
              </span>
             </button>
            </div>
           </div>
          </div>
         </div>
         <div class="component component--item_card type--general">
          <h4 class="text--module_title">
           일반상품 아이템카드
          </h4>
          <div class="itemcard">
           <div class="section--itemcard">
            <div class="section--itemcard_img">
             <a class="link--itemcard image--loading" href="/core/click?nextUrl=http%3a%2f%2fitempage3.auction.co.kr%2fDetailView.aspx%3fitemno%3dB502066580&amp;data=wOK0mSUzlb5fTPiKpSljfS6O%2bBMiDdmcKm9XTRQq2yqIXXjlHmHyBv0iU0VsEYdcWw89QzVAroKkhk1w%2fLoL3%2fhpx5iNLVBNaiSDwajCqm0%2fET1xu9Iq5fV6%2f%2fBzE3Wt8Yq8mLY7QH397LgjQI%2bKusa1uJMOiFK2CC0R1zohyUMeyyBaEKf52purmKBNaJDde3D0nA1WvUb3lKFpfB1m0PFReeLYxEypQQrqTet0i63DR7X5qviBoIGS0wHe6LlMfSDJGhRUiUUlmbujB4sTSjw1LaTVdDt1Cldyhiw3oQ40rgbhtPAi8DW9dtiBUAnJ6NG3KH82K7qDlHbo6VYDVYBhwaVTyTAqxdfQ%2bIvITuSxzrXPbtoTM5b4t36IkHwIc%2bPHozLghotGb8LCfujH6igcBMe9DEYeNrvOQa5%2fS9Hc%3d&amp;referrer=app%3a%2f%2f&amp;seq=125744383774&amp;type=2" target="_blank">
              <div class="lazyload-placeholder" style="height:100%">
              </div>
             </a>
            </div>
            <div class="section--itemcard_info">
             <div class="section--itemcard_info_major">
              <div class="area--itemcard_title">
               <span class="text--itemcard_title ellipsis">
                [linkx]
                
               </span>
              </div>
              <div class="area--itemcard_price">
               <span class="price_seller">
                <span class="for-a11y">
                 상품금액
                </span>
                <strong class="text--price_seller">
                 15,900
                </strong>
                <span class="text--unit">
                 원
                </span>
               </span>
              </div>
             </div>
             <div class="section--itemcard_info_add">
              <ul class="list--addinfo">
               <li class="item">
                <span class="text--addinfo">
                 무료배송
                </span>
               </li>
              </ul>
             </div>
             <div class="section--itemcard_info_score">
              <ul class="list--score">
               <li class="item awards">
                <span class="for-a11y">
                 만족도
                 94
                 %입니다.
                </span>
                <div class="seller_awards" title="만족도 94 % 입니다">
                 <span class="awards_points" style="width:94%">
                 </span>
                 <span class="bg_star">
                 </span>
                </div>
               </li>
               <li class="item reviewcnt">
                <span class="text--reviewcnt">
                 상품평
                 1,647
                </span>
                <span class="for-a11y">
                 건
                </span>
               </li>
               <li class="item buycnt">
                <span class="text--buycnt">
                 구매
                 4,055
                </span>
                <span class="for-a11y">
                 건
                </span>
               </li>
              </ul>
             </div>
             <div class="section--itemcard_info_shop">
              [ahref]
              
              <span class="for-a11y">
               판매자평가정보
              </span>
              <ul class="list--store_info">
               <li class="item">
                <span class="text--store_info">
                 배송
                </span>
               </li>
               <li class="item">
                <span class="text--store_info">
                 상품평
                </span>
               </li>
               <li class="item">
                <span class="text--store_info">
                 고객응대우수
                </span>
               </li>
              </ul>
             </div>
             <button class="button--favorite ">
              <span class="icon--favorite">
               <span class="for-a11y">
                관심상품 등록하기
               </span>
              </span>
             </button>
            </div>
           </div>
          </div>
         </div>
         <div class="component component--item_card type--general">
          <h4 class="text--module_title">
           일반상품 아이템카드
          </h4>
          <div class="itemcard">
           <div class="section--itemcard">
            <div class="section--itemcard_img">
             [ahref]
             
            </div>
            <div class="section--itemcard_info">
             <div class="section--itemcard_info_major">
              <div class="area--itemcard_title">
               <span class="text--itemcard_title ellipsis">
                [linkx]
                
               </span>
              </div>
              <div class="area--itemcard_price">
               <span class="price_seller">
                <span class="for-a11y">
                 상품금액
                </span>
                <strong class="text--price_seller">
                 16,600
                </strong>
                <span class="text--unit">
                 원
                </span>
               </span>
              </div>
             </div>
             <div class="section--itemcard_info_add">
              <ul class="list--addinfo">
               <li class="item">
                <span class="text--addinfo">
                 무료배송
                </span>
               </li>
              </ul>
             </div>
             <div class="section--itemcard_info_score">
              <ul class="list--score">
               <li class="item awards">
                <span class="for-a11y">
                 만족도
                 96
                 %입니다.
                </span>
                <div class="seller_awards" title="만족도 96 % 입니다">
                 <span class="awards_points" style="width:96%">
                 </span>
                 <span class="bg_star">
                 </span>
                </div>
               </li>
               <li class="item reviewcnt">
                <span class="text--reviewcnt">
                 상품평
                 54
                </span>
                <span class="for-a11y">
                 건
                </span>
               </li>
               <li class="item buycnt">
                <span class="text--buycnt">
                 구매
                 216
                </span>
                <span class="for-a11y">
                 건
                </span>
               </li>
              </ul>
             </div>
             <div class="section--itemcard_info_shop">
              [linkx]
              
              <span class="for-a11y">
               판매자평가정보
              </span>
              <ul class="list--store_info">
               <li class="item top_seller">
                <div class="section--advertisement ">
                 <button class="button--notice_about_advertisement" title="최우수판매자 안내 레이어 보기" type="button">
                  <span class="text">
                   최우수판매자
                  </span>
                 </button>
                 <div class="layer--information">
                  <strong class="text--information_title">
                   최우수판매자란?
                  </strong>
                  <p class="text--information_description">
                   옥션의 판매인증 평가기준을 모두 달성한 최상위 판매자
                  </p>
                  <button class="button--close_layer" type="button">
                   <span class="ir">
                    최우수판매자
                    안내 레이어 닫기
                   </span>
                  </button>
                 </div>
                </div>
               </li>
              </ul>
             </div>
             <button class="button--favorite ">
              <span class="icon--favorite">
               <span class="for-a11y">
                관심상품 등록하기
               </span>
              </span>
             </button>
            </div>
           </div>
          </div>
         </div>
         <div class="component component--item_card type--general">
          <h4 class="text--module_title">
           일반상품 아이템카드
          </h4>
          <div class="itemcard">
           <div class="section--itemcard">
            <div class="section--itemcard_img">
             [linkx]
             
            </div>
            <div class="section--itemcard_info">
             <div class="section--itemcard_info_major">
              <div class="area--itemcard_title">
               <span class="text--itemcard_title ellipsis">
                [ahref]
                
               </span>
              </div>
              <div class="area--itemcard_price">
               <span class="price_seller">
                <span class="for-a11y">
                 상품금액
                </span>
                <strong class="text--price_seller">
                 32,700
                </strong>
                <span class="text--unit">
                 원
                </span>
               </span>
              </div>
             </div>
             <div class="section--itemcard_info_add">
              <ul class="list--addinfo">
               <li class="item">
                <span class="text--addinfo">
                 무료배송
                </span>
               </li>
              </ul>
             </div>
             <div class="section--itemcard_info_score">
              <ul class="list--score">
               <li class="item awards">
                <span class="for-a11y">
                 만족도
                 98
                 %입니다.
                </span>
                <div class="seller_awards" title="만족도 98 % 입니다">
                 <span class="awards_points" style="width:98%">
                 </span>
                 <span class="bg_star">
                 </span>
                </div>
               </li>
               <li class="item reviewcnt">
                <span class="text--reviewcnt">
                 상품평
                 203
                </span>
                <span class="for-a11y">
                 건
                </span>
               </li>
               <li class="item buycnt">
                <span class="text--buycnt">
                 구매
                 444
                </span>
                <span class="for-a11y">
                 건
                </span>
               </li>
              </ul>
             </div>
             <div class="section--itemcard_info_shop">
              [linkx]
              
              <span class="for-a11y">
               판매자평가정보
              </span>
              <ul class="list--store_info">
               <li class="item top_seller">
                <div class="section--advertisement ">
                 <button class="button--notice_about_advertisement" title="최우수판매자 안내 레이어 보기" type="button">
                  <span class="text">
                   최우수판매자
                  </span>
                 </button>
                 <div class="layer--information">
                  <strong class="text--information_title">
                   최우수판매자란?
                  </strong>
                  <p class="text--information_description">
                   옥션의 판매인증 평가기준을 모두 달성한 최상위 판매자
                  </p>
                  <button class="button--close_layer" type="button">
                   <span class="ir">
                    최우수판매자
                    안내 레이어 닫기
                   </span>
                  </button>
                 </div>
                </div>
               </li>
              </ul>
             </div>
             <button class="button--favorite ">
              <span class="icon--favorite">
               <span class="for-a11y">
                관심상품 등록하기
               </span>
              </span>
             </button>
            </div>
           </div>
          </div>
         </div>
         <div class="component component--item_card type--general">
          <h4 class="text--module_title">
           일반상품 아이템카드
          </h4>
          <div class="itemcard">
           [keywordx][symbolx][keywordx][symbolx][bracketl6][keywordx][bracketr6][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx]<li>[keywordx][symbolx][keywordx][symbolx][bracketl7][keywordx][bracketr7][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx]</li>[keywordx][symbolx][keywordx][symbolx][bracketl8][keywordx][bracketr8][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx]
          </div>
         </div>
         <div class="component component--item_card type--general">
          <h4 class="text--module_title">
           일반상품 아이템카드
          </h4>
          <div class="itemcard">
           <div class="section--itemcard">
            <div class="section--itemcard_img">
             [linkx]
             
            </div>
            <div class="section--itemcard_info">
             <div class="section--itemcard_info_major">
              <div class="area--itemcard_title">
               <span class="text--itemcard_title ellipsis">
                <a class="link--itemcard" href="/core/click?nextUrl=http%3a%2f%2fitempage3.auction.co.kr%2fDetailView.aspx%3fitemno%3dB642233353&amp;data=wPd%2fWwWhsLK%2bjBNXoKjoRejI4LV5nTgvtbtQK2YPE3yHuPI4tDwnWZO0U9ZVFDeBnLZ%2bs6oSN6G03XYVLn5Xv85Ki3W14yfi7hKqhklKhCK3GEQ8w8yy%2bgNYXcGrG0qQA%2bc8HRS9%2fkbo0eU3Xjgl5d6vp4E7psFhgmicYSSZSEM5OE1vGy%2bvt0iEF%2bERwf19Srbj39k9eVQzhF0RbWhg31ajAOIZoeA2Rn3JgRnT0qcQSwSEu4YfIhl%2ftixOCj7H80Gw29qGrB5uSgSnqSNB6yh3%2bXs%2b%2fJqGUhoeHCfgERZsDKVcnugDxcoWuR2fUUSU%2bsteipJ5f1xISBbTgSkYW0whX2dKGlx6MajBuqyDEnAu5VOz2UV4yazSsHlG5BKKTeRDNyL%2f8uaw3pm5Tydy17EZ0mY7XwGAU3BbqFlCkwfA%3d&amp;referrer=app%3a%2f%2f&amp;seq=125744383778&amp;type=2" target="_blank">
                 <span class="for-a11y">
                  브랜드명
                 </span>
                 <span class="text--brand">
                  팜스토리
                 </span>
                 <span class="for-a11y">
                  상품명
                 </span>
                 <span class="text--title">
                  영양간식 호박고구마말랭이 10봉 봉당 60g (갤러리아)
                 </span>
                </a>
               </span>
              </div>
              <div class="area--itemcard_price">
               <span class="discount" title="할인률">
                <strong class="text--discount">
                </strong>
                <span class="text--unit">
                </span>
                <span class="for-a11y">
                 할인
                </span>
               </span>
               <span class="price_seller">
                <span class="for-a11y">
                 할인적용금액
                </span>
                <strong class="text--price_seller">
                 33,830
                </strong>
                <span class="text--unit">
                 원
                </span>
               </span>
               <span class="price_original">
                <span class="for-a11y">
                 상품금액
                </span>
                <strong class="text--price_original">
                 34,000
                </strong>
                <span class="text--unit">
                 원
                </span>
               </span>
              </div>
             </div>
             <div class="section--itemcard_info_add">
              <ul class="list--addinfo">
               <li class="item">
                <span class="text--addinfo">
                 무료배송
                </span>
               </li>
              </ul>
             </div>
             <div class="section--itemcard_info_score">
              <ul class="list--score">
               <li class="item buycnt">
                <span class="text--buycnt">
                 구매
                 1
                </span>
                <span class="for-a11y">
                 건
                </span>
               </li>
              </ul>
             </div>
             <div class="section--itemcard_info_shop">
              [linkx]
              
              <span class="for-a11y">
               판매자평가정보[content16][content17][linkx]
              </span>
              <ul class="list--store_info">
               <li class="item">
                <span class="text--store_info">
                 배송
                </span>
               </li>
               <li class="item">
                <span class="text--store_info">
                 상품평우수
                </span>
               </li>
              </ul>
             </div>
             <button class="button--favorite ">
              <span class="icon--favorite">
               <span class="for-a11y">
                관심상품 등록하기
               </span>
              </span>
             </button>
            </div>
           </div>
          </div>
         </div>
         <div class="component component--item_card type--general">
          <h4 class="text--module_title">
           일반상품 아이템카드
          </h4>
          <div class="itemcard">
           <div class="section--itemcard">
            <div class="section--itemcard_img">
             [linkx]
             
            </div>
            <div class="section--itemcard_info">
             <div class="section--itemcard_info_major">
              <div class="area--itemcard_title">
               <span class="text--itemcard_title ellipsis">
                [linkx]
                
               </span>
              </div>
              <div class="area--itemcard_price">
               <span class="price_seller">
                <span class="for-a11y">
                 상품금액
                </span>
                <strong class="text--price_seller">
                 12,900
                </strong>
                <span class="text--unit">
                 원
                </span>
               </span>
              </div>
             </div>
             <div class="section--itemcard_info_add">
              <ul class="list--addinfo">
               <li class="item">
                <span class="text--addinfo">
                 무료배송
                </span>
               </li>
              </ul>
             </div>
             <div class="section--itemcard_info_score">
              <ul class="list--score">
               <li class="item awards">
                <span class="for-a11y">
                 만족도
                 94
                 %입니다.
                </span>
                <div class="seller_awards" title="만족도 94 % 입니다">
                 <span class="awards_points" style="width:94%">
                 </span>
                 <span class="bg_star">
                 </span>
                </div>
               </li>
               <li class="item reviewcnt">
                <span class="text--reviewcnt">
                 상품평
                 7,713
                </span>
                <span class="for-a11y">
                 건
                </span>
               </li>
               <li class="item buycnt">
                <span class="text--buycnt">
                 구매
                 16,818
                </span>
                <span class="for-a11y">
                 건
                </span>
               </li>
              </ul>
             </div>
             <div class="section--itemcard_info_shop">
              [ahref]
              
              <span class="for-a11y">
               판매자평가정보
              </span>
              <ul class="list--store_info">
               <li class="item">
                <span class="text--store_info">
                 상품평
                </span>
               </li>
               <li class="item">
                <span class="text--store_info">
                 고객응대우수
                </span>
               </li>
              </ul>
             </div>
             <button class="button--favorite ">
              <span class="icon--favorite">
               <span class="for-a11y">
                관심상품 등록하기
               </span>
              </span>
             </button>
             <button class="button--related_item" title="연관상품 7 개가 있습니다. ">
              <span class="text--related_item">
               <b class="text--title">
                연관상품
               </b>
               <b class="text--cnt">
                7
               </b>
              </span>
             </button>
            </div>
           </div>
          </div>
          <div class="popup--related_items ">
           <h2 class="section--title">
            [mkey1][symbolx][pkey1][symbolx][keyword1][bracketl1][bracketr1][symbolx][bracketl2][siter1][bracketr2][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx]
           </h2>
           <div class="section--body">
            <div class="section--related_items">
             <div class="section--slick_area">
              <div class="list--related_items">
               <div class="slick-slider slick-initialized">
                <div class="slick-list">
                 <div class="slick-track" style="width:0%;left:NaN%">
                 </div>
                </div>
               </div>
              </div>
             </div>
            </div>
           </div>
          </div>
         </div>
        </div>
        <div class="section--module_wrap" module-design-id="1016">
         <div class="component component--tab_list type--simple ">
          <div class="section--tab_arear">
           <ul class="list--tab">
            <li class="item--tab on">
             [ahref]
             
            </li>
            <li class="item--tab ">
             [ahref]
             
            </li>
            <li class="item--tab ">
             <a class="link--tab" href="/list?category=51220100&amp;t=s">
              <span class="text--tab_name">
               스마일배송
              </span>
              <span class="text--item_count">
               1
              </span>
              <span class="for-a11y">
               개 상품보기
              </span>
             </a>
            </li>
            <li class="item--tab ">
             [ahref]
             
            </li>
            <li class="item--tab ">
             [linkx]
             
            </li>
           </ul>
          </div>
         </div>
        </div>
        <div class="section--module_wrap" module-design-id="17">
         <div class="component component--item_card type--general">
          <h4 class="text--module_title">
           일반상품 아이템카드
          </h4>
          <div class="itemcard">
           <div class="section--component_title">
            <p class="text--title">
             파워등록
            </p>
            <div class="section--advertisement ">
             <button class="button--notice_about_advertisement" title="광고 안내 레이어 보기" type="button">
              <span class="text">
               광고
              </span>
             </button>
             <div class="layer--information">
              <strong class="text--information_title">
               파워등록이란?
              </strong>
              <p class="text--information_description">
               파워등록 광고를 구매한 상품으로 입찰가순으로 전시됩니다.
              </p>
              <button class="button--close_layer" type="button">
               <span class="ir">
                광고
                안내 레이어 닫기
               </span>
              </button>
             </div>
            </div>
            [linkx]
            
           </div>
           <div class="section--itemcard">
            <div class="section--itemcard_img">
             [ahref]
             
            </div>
            <div class="section--itemcard_info">
             <div class="section--itemcard_info_major">
              <div class="area--itemcard_title">
               <span class="text--itemcard_title ellipsis">
                <a class="link--itemcard" href="/DetailView.aspx?itemno=B280283561" target="_blank">
                 <span class="for-a11y">
                  브랜드명
                 </span>
                 <span class="text--brand">
                 </span>
                 <span class="for-a11y">
                  상품명
                 </span>
                 <span class="text--title">
                  (해남미소)영양간식 한입에반한 고구마말랭이 10봉
                 </span>
                </a>
               </span>
              </div>
              <div class="area--itemcard_price">
               <span class="price_seller">
                <span class="for-a11y">
                 상품금액
                </span>
                <strong class="text--price_seller">
                 15,500
                </strong>
                <span class="text--unit">
                 원
                </span>
               </span>
              </div>
             </div>
             <div class="section--itemcard_info_add">
              <ul class="list--addinfo">
               <li class="item">
                <span class="text--addinfo">
                 무료배송
                </span>
               </li>
              </ul>
             </div>
             <div class="section--itemcard_info_score">
              <ul class="list--score">
               <li class="item awards">
                <span class="for-a11y">
                 만족도
                 96
                 %입니다.
                </span>
                <div class="seller_awards" title="만족도 96 % 입니다">
                 <span class="awards_points" style="width:96%">
                 </span>
                 <span class="bg_star">
                 </span>
                </div>
               </li>
               <li class="item reviewcnt">
                <span class="text--reviewcnt">
                 상품평
                 3,215
                </span>
                <span class="for-a11y">
                 건
                </span>
               </li>
               <li class="item buycnt">
                <span class="text--buycnt">
                 구매
                 10,411
                </span>
                <span class="for-a11y">
                 건
                </span>
               </li>
              </ul>
             </div>
             <div class="section--itemcard_info_shop">
              [linkx]
              
              <span class="for-a11y">
               판매자평가정보
              </span>
              <ul class="list--store_info">
               <li class="item top_seller">
                <div class="section--advertisement ">
                 <button class="button--notice_about_advertisement" title="최우수판매자 안내 레이어 보기" type="button">
                  <span class="text">
                   최우수판매자
                  </span>
                 </button>
                 <div class="layer--information">
                  <strong class="text--information_title">
                   최우수판매자란?
                  </strong>
                  <p class="text--information_description">
                   옥션의 판매인증 평가기준을 모두 달성한 최상위 판매자
                  </p>
                  <button class="button--close_layer" type="button">
                   <span class="ir">
                    최우수판매자
                    안내 레이어 닫기
                   </span>
                  </button>
                 </div>
                </div>
               </li>
              </ul>
             </div>
             <button class="button--favorite ">
              <span class="icon--favorite">
               <span class="for-a11y">
                관심상품 등록하기
               </span>
              </span>
             </button>
            </div>
           </div>
          </div>
         </div>
         <div class="component component--item_card type--general">
          <h4 class="text--module_title">
           일반상품 아이템카드
          </h4>
          <div class="itemcard">
           <div class="section--itemcard">
            <div class="section--itemcard_img">
             [ahref]
             
            </div>
            <div class="section--itemcard_info">
             <div class="section--itemcard_info_major">
              <div class="area--itemcard_title">
               <span class="text--itemcard_title ellipsis">
                [ahref]
                
               </span>
              </div>
              <div class="area--itemcard_price">
               <span class="price_seller">
                <span class="for-a11y">
                 상품금액
                </span>
                <strong class="text--price_seller">
                 16,500
                </strong>
                <span class="text--unit">
                 원
                </span>
               </span>
              </div>
             </div>
             <div class="section--itemcard_info_add">
              <ul class="list--addinfo">
               <li class="item">
                <span class="text--addinfo">
                 무료배송
                </span>
               </li>
              </ul>
             </div>
             <div class="section--itemcard_info_score">
              <ul class="list--score">
               <li class="item awards">
                <span class="for-a11y">
                 만족도
                 92
                 %입니다.
                </span>
                <div class="seller_awards" title="만족도 92 % 입니다">
                 <span class="awards_points" style="width:92%">
                 </span>
                 <span class="bg_star">
                 </span>
                </div>
               </li>
               <li class="item reviewcnt">
                <span class="text--reviewcnt">
                 상품평
                 135
                </span>
                <span class="for-a11y">
                 건
                </span>
               </li>
               <li class="item buycnt">
                <span class="text--buycnt">
                 구매
                 357
                </span>
                <span class="for-a11y">
                 건
                </span>
               </li>
              </ul>
             </div>
             <div class="section--itemcard_info_shop">
              [linkx]
              
              <span class="for-a11y">
               판매자평가정보
              </span>
              <ul class="list--store_info">
               <li class="item top_seller">
                <div class="section--advertisement ">
                 <button class="button--notice_about_advertisement" title="최우수판매자 안내 레이어 보기" type="button">
                  <span class="text">
                   최우수판매자
                  </span>
                 </button>
                 <div class="layer--information">
                  <strong class="text--information_title">
                   최우수판매자란?
                  </strong>
                  <p class="text--information_description">
                   옥션의 판매인증 평가기준을 모두 달성한 최상위 판매자
                  </p>
                  <button class="button--close_layer" type="button">
                   <span class="ir">
                    최우수판매자
                    안내 레이어 닫기
                   </span>
                  </button>
                 </div>
                </div>
               </li>
              </ul>
             </div>
             <button class="button--favorite ">
              <span class="icon--favorite">
               <span class="for-a11y">
                관심상품 등록하기
               </span>
              </span>
             </button>
            </div>
           </div>
          </div>
         </div>
         <div class="component component--item_card type--general">
          <h4 class="text--module_title">
           일반상품 아이템카드
          </h4>
          <div class="itemcard">
           <div class="section--itemcard">
            <div class="section--itemcard_img">
             [ahref]
             
            </div>
            <div class="section--itemcard_info">
             <div class="section--itemcard_info_major">
              <div class="area--itemcard_title">
               <span class="text--itemcard_title ellipsis">
                [linkx]
                
               </span>
              </div>
              <div class="area--itemcard_price">
               <span class="discount" title="할인률">
                <strong class="text--discount">
                </strong>
                <span class="text--unit">
                </span>
                <span class="for-a11y">
                 할인
                </span>
               </span>
               <span class="price_seller">
                <span class="for-a11y">
                 할인적용금액
                </span>
                <strong class="text--price_seller">
                 13,830
                </strong>
                <span class="text--unit">
                 원
                </span>
               </span>
               <span class="price_original">
                <span class="for-a11y">
                 상품금액
                </span>
                <strong class="text--price_original">
                 13,900
                </strong>
                <span class="text--unit">
                 원
                </span>
               </span>
              </div>
             </div>
             <div class="section--itemcard_info_add">
              <ul class="list--addinfo">
               <li class="item">
                <span class="text--addinfo">
                 무료배송
                </span>
               </li>
              </ul>
             </div>
             <div class="section--itemcard_info_score">
              <ul class="list--score">
               <li class="item awards">
                <span class="for-a11y">
                 만족도
                 92
                 %입니다.
                </span>
                <div class="seller_awards" title="만족도 92 % 입니다">
                 <span class="awards_points" style="width:92%">
                 </span>
                 <span class="bg_star">
                 </span>
                </div>
               </li>
               <li class="item reviewcnt">
                <span class="text--reviewcnt">
                 상품평
                 11
                </span>
                <span class="for-a11y">
                 건
                </span>
               </li>
               <li class="item buycnt">
                <span class="text--buycnt">
                 구매
                 22
                </span>
                <span class="for-a11y">
                 건
                </span>
               </li>
              </ul>
             </div>
             <div class="section--itemcard_info_shop">
              [linkx]
              
             </div>
             <button class="button--favorite ">
              <span class="icon--favorite">
               <span class="for-a11y">
                관심상품 등록하기
               </span>
              </span>
             </button>
            </div>
           </div>
          </div>
         </div>
         <div class="component component--item_card type--general">
          <h4 class="text--module_title">
           일반상품 아이템카드
          </h4>
          <div class="itemcard">
           <div class="section--itemcard">
            <div class="section--itemcard_img">
             <a class="link--itemcard image--loading" href="/core/click?nextUrl=http%3a%2f%2fitempage3.auction.co.kr%2fDetailView.aspx%3fitemno%3dB474583758&amp;data=wBx8rMLxPt3Ut596gU9brnfBvvCDCZVQn3gsuLO3hy%2fnNxnW%2f3vJraFKU0QQsLheY696bGIKIqvmPiZL40MSEI76C%2fC1ZxSaAQCuwMtbtnilSSc%2fd02VaNKFz%2foq6iD4Y1wCOAOmKcr%2fEW8QYkFI4f6czTA0%2fUFAx5UhoxKbS4lU5dkAMC2Vy6arckx6d4k1C%2bgUfYqtwqwXNrsQsh1uMAIyugdMJpJzmldjDW9DjinmFhDbGd9iMplPGbw%2fU68X2ycpcu4QveH3KzOk0g572Lhbxx29Ajq1K8vLZRocNpJT1lUV3eDRZjFljtuclKS%2fHkO35nVoq8fD1l6FkYvitSrBAqFQyP9yRe92JrRPrbuY12qLeMXhIF4Y0Bos%2be4GNe9Nm2zc1%2b4lM%2bhL9qhzpjWLC%2bQRfSI1rSTfcP0dAH3I%3d&amp;referrer=app%3a%2f%2f&amp;seq=125744383780&amp;type=2" target="_blank">
              <div class="lazyload-placeholder" style="height:100%">
              </div>
             </a>
            </div>
            <div class="section--itemcard_info">
             <div class="section--itemcard_info_major">
              <div class="area--itemcard_title">
               <span class="text--itemcard_title ellipsis">
                <a class="link--itemcard" href="/core/click?nextUrl=http%3a%2f%2fitempage3.auction.co.kr%2fDetailView.aspx%3fitemno%3dB474583758&amp;data=wBx8rMLxPt3Ut596gU9brnfBvvCDCZVQn3gsuLO3hy%2fnNxnW%2f3vJraFKU0QQsLheY696bGIKIqvmPiZL40MSEI76C%2fC1ZxSaAQCuwMtbtnilSSc%2fd02VaNKFz%2foq6iD4Y1wCOAOmKcr%2fEW8QYkFI4f6czTA0%2fUFAx5UhoxKbS4lU5dkAMC2Vy6arckx6d4k1C%2bgUfYqtwqwXNrsQsh1uMAIyugdMJpJzmldjDW9DjinmFhDbGd9iMplPGbw%2fU68X2ycpcu4QveH3KzOk0g572Lhbxx29Ajq1K8vLZRocNpJT1lUV3eDRZjFljtuclKS%2fHkO35nVoq8fD1l6FkYvitSrBAqFQyP9yRe92JrRPrbuY12qLeMXhIF4Y0Bos%2be4GNe9Nm2zc1%2b4lM%2bhL9qhzpjWLC%2bQRfSI1rSTfcP0dAH3I%3d&amp;referrer=app%3a%2f%2f&amp;seq=125744383780&amp;type=2" target="_blank">
                 <span class="for-a11y">
                  브랜드명
                 </span>
                 <span class="text--brand">
                 </span>
                 <span class="for-a11y">
                  상품명
                 </span>
                 <span class="text--title">
                  해남직송  첫사랑 꿀고구마 3kg+3kg (특상/100g-300g)
                 </span>
                </a>
               </span>
              </div>
              <div class="area--itemcard_price">
               <span class="discount" title="할인률">
                <strong class="text--discount">
                </strong>
                <span class="text--unit">
                </span>
                <span class="for-a11y">
                 할인
                </span>
               </span>
               <span class="price_seller">
                <span class="for-a11y">
                 할인적용금액
                </span>
                <strong class="text--price_seller">
                 23,780
                </strong>
                <span class="text--unit">
                 원
                </span>
               </span>
               <span class="price_original">
                <span class="for-a11y">
                 상품금액
                </span>
                <strong class="text--price_original">
                 23,900
                </strong>
                <span class="text--unit">
                 원
                </span>
               </span>
              </div>
             </div>
             <div class="section--itemcard_info_add">
              <ul class="list--addinfo">
               <li class="item">
                <span class="text--addinfo">
                 무료배송
                </span>
               </li>
              </ul>
             </div>
             <div class="section--itemcard_info_score">
              <ul class="list--score">
               <li class="item awards">
                <span class="for-a11y">
                 만족도
                 100
                 %입니다.
                </span>
                <div class="seller_awards" title="만족도 100 % 입니다">
                 <span class="awards_points" style="width:100%">
                 </span>
                 <span class="bg_star">
                 </span>
                </div>
               </li>
               <li class="item reviewcnt">
                <span class="text--reviewcnt">
                 상품평
                 2
                </span>
                <span class="for-a11y">
                 건
                </span>
               </li>
               <li class="item buycnt">
                <span class="text--buycnt">
                 구매
                 6
                </span>
                <span class="for-a11y">
                 건
                </span>
               </li>
              </ul>
             </div>
             <div class="section--itemcard_info_shop">
              [ahref]
              
              <span class="for-a11y">
               판매자평가정보
              </span>
              <ul class="list--store_info">
               <li class="item top_seller">
                <div class="section--advertisement ">
                 <button class="button--notice_about_advertisement" title="최우수판매자 안내 레이어 보기" type="button">
                  <span class="text">
                   최우수판매자
                  </span>
                 </button>
                 <div class="layer--information">
                  <strong class="text--information_title">
                   최우수판매자란?
                  </strong>
                  <p class="text--information_description">
                   옥션의 판매인증 평가기준을 모두 달성한 최상위 판매자
                  </p>
                  <button class="button--close_layer" type="button">
                   <span class="ir">
                    최우수판매자
                    안내 레이어 닫기
                   </span>
                  </button>
                 </div>
                </div>
               </li>
              </ul>
             </div>
             <button class="button--favorite ">
              <span class="icon--favorite">
               <span class="for-a11y">
                관심상품 등록하기
               </span>
              </span>
             </button>
            </div>
           </div>
          </div>
         </div>
         <div class="component component--item_card type--general">
          <h4 class="text--module_title">
           일반상품 아이템카드
          </h4>
          <div class="itemcard">
           <div class="section--itemcard">
            <div class="section--itemcard_img">
             [linkx]
             
            </div>
            <div class="section--itemcard_info">
             <div class="section--itemcard_info_major">
              <div class="area--itemcard_title">
               <span class="text--itemcard_title ellipsis">
                [ahref]
                
               </span>
              </div>
              <div class="area--itemcard_price">
               <span class="discount" title="할인률">
                <strong class="text--discount">
                </strong>
                <span class="text--unit">
                </span>
                <span class="for-a11y">
                 할인
                </span>
               </span>
               <span class="price_seller">
                <span class="for-a11y">
                 할인적용금액
                </span>
                <strong class="text--price_seller">
                 20,790
                </strong>
                <span class="text--unit">
                 원
                </span>
               </span>
               <span class="price_original">
                <span class="for-a11y">
                 상품금액
                </span>
                <strong class="text--price_original">
                 20,900
                </strong>
                <span class="text--unit">
                 원
                </span>
               </span>
              </div>
             </div>
             <div class="section--itemcard_info_add">
              <ul class="list--addinfo">
               <li class="item">
                <span class="text--addinfo">
                 무료배송
                </span>
               </li>
              </ul>
             </div>
             <div class="section--itemcard_info_score">
              <ul class="list--score">
               <li class="item reviewcnt">
                <span class="text--reviewcnt">
                 상품평
                 5
                </span>
                <span class="for-a11y">
                 건
                </span>
               </li>
               <li class="item buycnt">
                <span class="text--buycnt">
                 구매
                 26
                </span>
                <span class="for-a11y">
                 건
                </span>
               </li>
              </ul>
             </div>
             <div class="section--itemcard_info_shop">
              <a class="link--shop" href="/naturemeeting" target="_blank" title="스토어로 이동">
               <span class="for-a11y">
                판매자
               </span>
               <span class="text">
                자연맛남
               </span>
              </a>
              <span class="for-a11y">
               판매자평가정보
              </span>
              <ul class="list--store_info">
               <li class="item top_seller">
                <div class="section--advertisement ">
                 <button class="button--notice_about_advertisement" title="최우수판매자 안내 레이어 보기" type="button">
                  <span class="text">
                   최우수판매자
                  </span>
                 </button>
                 <div class="layer--information">
                  <strong class="text--information_title">
                   최우수판매자란?
                  </strong>
                  <p class="text--information_description">
                   옥션의 판매인증 평가기준을 모두 달성한 최상위 판매자
                  </p>
                  <button class="button--close_layer" type="button">
                   <span class="ir">
                    최우수판매자
                    안내 레이어 닫기
                   </span>
                  </button>
                 </div>
                </div>
               </li>
              </ul>
             </div>
             <button class="button--favorite ">
              <span class="icon--favorite">
               <span class="for-a11y">
                관심상품 등록하기
               </span>
              </span>
             </button>
            </div>
           </div>
          </div>
         </div>
         <div class="component component--item_card type--general">
          <h4 class="text--module_title">
           일반상품 아이템카드
          </h4>
          <div class="itemcard">
           <div class="section--itemcard">
            <div class="section--itemcard_img">
             [linkx]
             
            </div>
            <div class="section--itemcard_info">
             <div class="section--itemcard_info_major">
              <div class="area--itemcard_title">
               <span class="text--itemcard_title ellipsis">
                <a class="link--itemcard" href="/core/click?nextUrl=http%3a%2f%2fitempage3.auction.co.kr%2fDetailView.aspx%3fitemno%3dB353796972&amp;data=wQq%2b4XegQwlVME8lhO%2fcEldkvCFKczFaRH3aP0WfjMhMJZPtGVOGYVA%2fTn1No00LoT46gxFBZrGQ9aJU3SF2h0BXpfUJiaCRYRCkWQNceHJuXGWt1uJh1Az7fmM%2b%2fmdNUqf4X35pYjSejiR3cBCfNUQdbBGxhjX66ScqlMAukG62t7UD17%2bCvDExwgi2I66mVQRvwqsPRz4j2R6ZgRfKatlRhlw2ExG%2fMbJuAPOOT0Sr%2f3XvYa5lls956XwPPCA1WOOskpbsQttdp8X%2fo88wZx2XMpb3Mh8tkCpmswvY9K54V5OmX2XZhT01FDtbI8QTcd0hiPEk3qLwTBkxutJ6dOQY0DhhbxKTTGfg6PhfORkZBG%2bX7B15KZwCFIpMPtDAvJ%2f%2f%2f8p2TLxw2jQJBVowNuoVK0x87XkHcC71ejdOgC%2fo%3d&amp;referrer=app%3a%2f%2f&amp;seq=125744383782&amp;type=2" target="_blank">
                 <span class="for-a11y">
                  브랜드명
                 </span>
                 <span class="text--brand">
                 </span>
                 <span class="for-a11y">
                  상품명
                 </span>
                 <span class="text--title">
                  해남 산지직송 베니하루카 첫사랑 꿀 고구마 3kg
                 </span>
                </a>
               </span>
              </div>
              <div class="area--itemcard_price">
               <span class="discount" title="할인률">
                <strong class="text--discount">
                </strong>
                <span class="text--unit">
                </span>
                <span class="for-a11y">
                 할인
                </span>
               </span>
               <span class="price_seller">
                <span class="for-a11y">
                 할인적용금액
                </span>
                <strong class="text--price_seller">
                 11,840
                </strong>
                <span class="text--unit">
                 원
                </span>
               </span>
               <span class="price_original">
                <span class="for-a11y">
                 상품금액
                </span>
                <strong class="text--price_original">
                 11,900
                </strong>
                <span class="text--unit">
                 원
                </span>
               </span>
              </div>
             </div>
             <div class="section--itemcard_info_add">
              <ul class="list--addinfo">
               <li class="item">
                <span class="text--addinfo">
                 무료배송
                </span>
               </li>
              </ul>
             </div>
             <div class="section--itemcard_info_score">
              <ul class="list--score">
               <li class="item awards">
                <span class="for-a11y">
                 만족도
                 98
                 %입니다.
                </span>
                <div class="seller_awards" title="만족도 98 % 입니다">
                 <span class="awards_points" style="width:98%">
                 </span>
                 <span class="bg_star">
                 </span>
                </div>
               </li>
               <li class="item reviewcnt">
                <span class="text--reviewcnt">
                 상품평
                 13
                </span>
                <span class="for-a11y">
                 건
                </span>
               </li>
               <li class="item buycnt">
                <span class="text--buycnt">
                 구매
                 27
                </span>
                <span class="for-a11y">
                 건
                </span>
               </li>
              </ul>
             </div>
             <div class="section--itemcard_info_shop">
              [ahref]
              
              <span class="for-a11y">
               판매자평가정보
              </span>
              <ul class="list--store_info">
               <li class="item top_seller">
                <div class="section--advertisement ">
                 <button class="button--notice_about_advertisement" title="최우수판매자 안내 레이어 보기" type="button">
                  <span class="text">
                   최우수판매자
                  </span>
                 </button>
                 <div class="layer--information">
                  <strong class="text--information_title">
                   최우수판매자란?
                  </strong>
                  <p class="text--information_description">
                   옥션의 판매인증 평가기준을 모두 달성한 최상위 판매자
                  </p>
                  <button class="button--close_layer" type="button">
                   <span class="ir">
                    최우수판매자
                    안내 레이어 닫기
                   </span>
                  </button>
                 </div>
                </div>
               </li>
              </ul>
             </div>
             <button class="button--favorite ">
              <span class="icon--favorite">
               <span class="for-a11y">
                관심상품 등록하기
               </span>
              </span>
             </button>
            </div>
           </div>
          </div>
         </div>
         <div class="component component--item_card type--general">
          <h4 class="text--module_title">
           일반상품 아이템카드[content16[linkx]content17[linkx]content18[linkx]content19]
          </h4>
          <div class="itemcard">
           <div class="section--itemcard">
            <div class="section--itemcard_img">
             [linkx]
             
            </div>
            <div class="section--itemcard_info">
             <div class="section--itemcard_info_major">
              <div class="area--itemcard_title">
               <span class="text--itemcard_title ellipsis">
                <a class="link--itemcard" href="/core/click?nextUrl=http%3a%2f%2fitempage3.auction.co.kr%2fDetailView.aspx%3fitemno%3dB696332162&amp;data=wrqo%2fxUTdNfZuyS4uslA3nGzPTtaT1ULflGLGiO%2fGk6tnhRgaEOI7QOY2sA%2bPIH%2bqwlqgU6m8CjulH29CN4o2%2fz77eEw5XrNn%2feXF%2fyp9ZAizIiBA0qlavgViLnm0jO%2f9IotB%2fDbOCGnaCNhHbZ41NIIKBa2CbGENH4ghUr7yuxqL0qu4BJ%2ffmq3k3A5UMogHIjqRFQhlcP3OGgtBT6wqiMuTZV148aMCHsvMRIV7H7%2f0t3tW08QWwV4lq1MQJDmGXYBUiPXfWBugRGyayqorAdb%2bcrw4rUni1%2b96lmKqStKULGjlH7yCACwIItBJdRnuCD4GEBL7c0KTXvCxa8YbaOfCKk6n69CAt0i3l0m%2bb%2fpoW0hu9BWj6r5iUCgf01HB6j2QeC5H7uyx4SZTC6L7jpP5DghgHyTv8iukJLmBSNUtoRHmuX7qeA%3d%3d&amp;referrer=app%3a%2f%2f&amp;seq=125744383783&amp;type=2" target="_blank">
                 <span class="for-a11y">
                  브랜드명
                 </span>
                 <span class="text--brand">
                 </span>
                 <span class="for-a11y">
                  상품명
                 </span>
                 <span class="text--title">
                  밤고구마 자색고구마 헬스 식사대용 한끼 100g 10팩
                 </span>
                </a>
               </span>
              </div>
              <div class="area--itemcard_price">
               <span class="price_seller">
                <span class="for-a11y">
                 상품금액
                </span>
                <strong class="text--price_seller">
                 25,500
                </strong>
                <span class="text--unit">
                 원
                </span>
               </span>
              </div>
             </div>
             <div class="section--itemcard_info_add">
              <ul class="list--addinfo">
               <li class="item">
                <span class="text--addinfo">
                 배송비 3,000원
                </span>
               </li>
              </ul>
             </div>
             <div class="section--itemcard_info_score">
              <ul class="list--score">
              </ul>
             </div>
             <div class="section--itemcard_info_shop">
              [ahref]
              
             </div>
             <button class="button--favorite ">
              <span class="icon--favorite">
               <span class="for-a11y">
                관심상품 등록하기
               </span>
              </span>
             </button>
             <button class="button--related_item" title="연관상품 19 개가 있습니다. ">
              <span class="text--related_item">
               <b class="text--title">
                연관상품
               </b>
               <b class="text--cnt">
                19
               </b>
              </span>
             </button>
            </div>
           </div>
          </div>
          <div class="popup--related_items ">
           <h2 class="section--title">
            [mkey1][symbolx][pkey1][symbolx][keyword1][bracketl1][bracketr1][symbolx][bracketl2][siter1][bracketr2][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx]
           </h2>
           <div class="section--body">
            <div class="section--related_items">
             <div class="section--slick_area">
              <div class="list--related_items">
               <div class="slick-slider slick-initialized">
                <div class="slick-list">
                 <div class="slick-track" style="width:0%;left:NaN%">
                 </div>
                </div>
               </div>
              </div>
             </div>
            </div>
           </div>
          </div>
         </div>
         <div class="component component--item_card type--general">
          <h4 class="text--module_title">
           일반상품 아이템카드
          </h4>
          <div class="itemcard">
           <div class="section--itemcard">
            <div class="section--itemcard_img">
             [ahref]
             
            </div>
            <div class="section--itemcard_info">
             <div class="section--itemcard_info_major">
              <div class="area--itemcard_title">
               <span class="text--itemcard_title ellipsis">
                [ahref]
                
               </span>
              </div>
              <div class="area--itemcard_price">
               <span class="price_seller">
                <span class="for-a11y">
                 상품금액
                </span>
                <strong class="text--price_seller">
                 19,860
                </strong>
                <span class="text--unit">
                 원
                </span>
               </span>
              </div>
             </div>
             <div class="section--itemcard_info_add">
              <ul class="list--addinfo">
               <li class="item">
                <span class="text--addinfo">
                 무료배송
                </span>
               </li>
              </ul>
             </div>
             <div class="section--itemcard_info_score">
              <ul class="list--score">
               <li class="item awards">
                <span class="for-a11y">
                 만족도
                 96
                 %입니다.
                </span>
                <div class="seller_awards" title="만족도 96 % 입니다">
                 <span class="awards_points" style="width:96%">
                 </span>
                 <span class="bg_star">
                 </span>
                </div>
               </li>
               <li class="item reviewcnt">
                <span class="text--reviewcnt">
                 상품평
                 19
                </span>
                <span class="for-a11y">
                 건
                </span>
               </li>
               <li class="item buycnt">
                <span class="text--buycnt">
                 구매
                 51
                </span>
                <span class="for-a11y">
                 건
                </span>
               </li>
              </ul>
             </div>
             <div class="section--itemcard_info_shop">
              [ahref]
              
             </div>
             <button class="button--favorite ">
              <span class="icon--favorite">
               <span class="for-a11y">
                관심상품 등록하기
               </span>
              </span>
             </button>
            </div>
           </div>
          </div>
         </div>
         <div class="component component--item_card type--general">
          <h4 class="text--module_title">
           일반상품 아이템카드
          </h4>
          <div class="itemcard">
           <div class="section--itemcard">
            <div class="section--itemcard_img">
             <a class="link--itemcard image--loading" href="/core/click?nextUrl=http%3a%2f%2fitempage3.auction.co.kr%2fDetailView.aspx%3fitemno%3dB537831608&amp;data=wzQfJQn77V9C0GfsuM6Weg1GBXdLokoXhWTxIGQtkkl%2btjGCn67CS%2bIN%2fIWeJy9O47mxpLclV01QWnkLguCCcJCdzle56uqOMn4QMeVbhyz7Px6HMLJ0wAdYV5ez%2fP%2fPMClQzfDN%2bJdCLYWW5Me3%2bhEXBNcRr%2b5fXcTTnXidPhCTOi8d9R1hEbkBqTuWduXPiGdN1y2whGu5l8YIxM8JvfaivSlbdDzIiPR6KmvbA1gWwGTGjwsxPQmvNVEvTbnmrszQ88mClHuu4lD%2fKbJoyWHLh01ssYxGqu5TP5OrGd3T0ZhqNPhxLq0vZIGO%2bxE1r4Yb7vU%2bfCN%2bh3AnV2xbYCv8UEROURXAeLOkJAYtPYUxFBUJtUqmzt3T16bT3eUuYaGcK9NQ0rFMYjnq%2fd5JpFFGp8z3lF8SYzOM7ylC7uyI%3d&amp;referrer=app%3a%2f%2f&amp;seq=125744383785&amp;type=2" target="_blank">
              <div class="lazyload-placeholder" style="height:100%">
              </div>
             </a>
            </div>
            <div class="section--itemcard_info">
             <div class="section--itemcard_info_major">
              <div class="area--itemcard_title">
               <span class="text--itemcard_title ellipsis">
                [linkx]
                
               </span>
              </div>
              <div class="area--itemcard_price">
               <span class="price_seller">
                <span class="for-a11y">
                 상품금액
                </span>
                <strong class="text--price_seller">
                 9,350
                </strong>
                <span class="text--unit">
                 원
                </span>
               </span>
              </div>
             </div>
             <div class="section--itemcard_info_add">
              <ul class="list--addinfo">
               <li class="item">
                <span class="text--addinfo">
                 무료배송
                </span>
               </li>
              </ul>
             </div>
             <div class="section--itemcard_info_score">
              <ul class="list--score">
               <li class="item awards">
                <span class="for-a11y">
                 만족도
                 98
                 %입니다.
                </span>
                <div class="seller_awards" title="만족도 98 % 입니다">
                 <span class="awards_points" style="width:98%">
                 </span>
                 <span class="bg_star">
                 </span>
                </div>
               </li>
               <li class="item reviewcnt">
                <span class="text--reviewcnt">
                 상품평
                 46
                </span>
                <span class="for-a11y">
                 건
                </span>
               </li>
               <li class="item buycnt">
                <span class="text--buycnt">
                 구매
                 111
                </span>
                <span class="for-a11y">
                 건
                </span>
               </li>
              </ul>
             </div>
             <div class="section--itemcard_info_shop">
              <a class="link--shop" href="/wowhn" target="_blank" title="스토어로 이동">
               <span class="for-a11y">
                판매자
               </span>
               <span class="text">
                해남유정이네농산물
               </span>
              </a>
             </div>
             <button class="button--favorite ">
              <span class="icon--favorite">
               <span class="for-a11y">
                관심상품 등록하기
               </span>
              </span>
             </button>
            </div>
           </div>
          </div>
         </div>
         <div class="component component--item_card type--general">
          <h4 class="text--module_title">
           일반상품 아이템카드
          </h4>
          <div class="itemcard">
           <div class="section--itemcard">
            <div class="section--itemcard_img">
             [ahref]
             
            </div>
            <div class="section--itemcard_info">
             <div class="section--itemcard_info_major">
              <div class="area--itemcard_title">
               <span class="text--itemcard_title ellipsis">
                [linkx]
                
               </span>
              </div>
              <div class="area--itemcard_price">
               <span class="price_seller">
                <span class="for-a11y">
                 상품금액
                </span>
                <strong class="text--price_seller">
                 29,990
                </strong>
                <span class="text--unit">
                 원
                </span>
               </span>
              </div>
             </div>
             <div class="section--itemcard_info_add">
              <ul class="list--addinfo">
               <li class="item">
                <span class="text--addinfo">
                 무료배송
                </span>
               </li>
              </ul>
             </div>
             <div class="section--itemcard_info_score">
              <ul class="list--score">
               <li class="item awards">
                <span class="for-a11y">
                 만족도
                 98
                 %입니다.
                </span>
                <div class="seller_awards" title="만족도 98 % 입니다">
                 <span class="awards_points" style="width:98%">
                 </span>
                 <span class="bg_star">
                 </span>
                </div>
               </li>
               <li class="item reviewcnt">
                <span class="text--reviewcnt">
                 상품평
                 15
                </span>
                <span class="for-a11y">
                 건
                </span>
               </li>
               <li class="item buycnt">
                <span class="text--buycnt">
                 구매
                 26
                </span>
                <span class="for-a11y">
                 건
                </span>
               </li>
              </ul>
             </div>
             <div class="section--itemcard_info_shop">
              [ahref]
              
             </div>
             <button class="button--favorite ">
              <span class="icon--favorite">
               <span class="for-a11y">
                관심상품 등록하기
               </span>
              </span>
             </button>
            </div>
           </div>
          </div>
         </div>
         <div class="component component--item_card type--smiledelivery">
          <h4 class="text--module_title">
           스마일배송 아이템카드
          </h4>
          <div class="itemcard">
           <div class="section--component_title">
            <p class="text--title">
             [ahref]
             
            </p>
            <span class="text--smiledelivery_slogan">
             오늘 주문! 내일 도착!
            </span>
            [ahref]
            
           </div>
           <div class="section--itemcard">
            <div class="section--itemcard_img">
             [ahref]
             
            </div>
            <div class="section--itemcard_info">
             <div class="section--itemcard_info_major">
              <div class="area--itemcard_title">
               <span class="text--itemcard_title ellipsis">
                [linkx]
                
               </span>
              </div>
              <div class="area--itemcard_price">
               <span class="price_seller">
                <span class="for-a11y">
                 상품금액
                </span>
                <strong class="text--price_seller">
                 5,500
                </strong>
                <span class="text--unit">
                 원
                </span>
               </span>
              </div>
             </div>
             <div class="section--itemcard_info_add">
              <ul class="list--addinfo">
               <li class="item">
                <span class="text--addinfo">
                 배송비 3,000원
                </span>
               </li>
              </ul>
             </div>
             <div class="section--itemcard_info_score">
              <ul class="list--score">
               <li class="item awards">
                <span class="for-a11y">
                 만족도
                 98
                 %입니다.
                </span>
                <div class="seller_awards" title="만족도 98 % 입니다">
                 <span class="awards_points" style="width:98%">
                 </span>
                 <span class="bg_star">
                 </span>
                </div>
               </li>
               <li class="item reviewcnt">
                <span class="text--reviewcnt">
                 상품평
                 158
                </span>
                <span class="for-a11y">
                 건
                </span>
               </li>
               <li class="item buycnt">
                <span class="text--buycnt">
                 구매
                 390
                </span>
                <span class="for-a11y">
                 건
                </span>
               </li>
              </ul>
             </div>
             <div class="section--itemcard_smiledelivery">
              [linkx]
              
              <div class="action_smiledelivery">
               <div class="purchase_count">
                <button class="button--minus" type="button">
                 <span class="icon_minus">
                  <span class="for-a11y">
                   상품 수 1 감소
                  </span>
                 </span>
                </button>
                <button class="button--plus" type="button">
                 <span class="icon_plus-1">
                 </span>
                 <span class="icon_plus-2">
                 </span>
                 <span class="for-a11y">
                  상품 수 1 증가
                 </span>
                </button>
               </div>
               <button class="button--cart" type="button">
                <span class="icon_cart">
                 <span class="for-a11y">
                  장바구니 담기
                 </span>
                </span>
               </button>
              </div>
             </div>
             <button class="button--favorite ">
              <span class="icon--favorite">
               <span class="for-a11y">
                관심상품 등록하기
               </span>
              </span>
             </button>
             <button class="button--related_item" title="연관상품 6 개가 있습니다. ">
              <span class="text--related_item">
               <b class="text--title">
                연관상품
               </b>
               <b class="text--cnt">
                6
               </b>
              </span>
             </button>
            </div>
           </div>
          </div>
          <div class="popup--related_items ">
           <h2 class="section--title">
            [mkey1][symbolx][pkey1][symbolx][keyword1][bracketl1][bracketr1][symbolx][bracketl2][siter1][bracketr2][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx]
           </h2>
           <div class="section--body">
            <div class="section--related_items">
             <div class="section--slick_area">
              <div class="list--related_items">
               <div class="slick-slider slick-initialized">
                <div class="slick-list">
                 <div class="slick-track" style="width:0%;left:NaN%">
                 </div>
                </div>
               </div>
              </div>
             </div>
            </div>
           </div>
          </div>
         </div>
         <div class="component component--item_card type--general">
          <h4 class="text--module_title">
           일반상품 아이템카드
          </h4>
          <div class="itemcard">
           <div class="section--component_title">
            <p class="text--title">
             프리미엄등록
            </p>
            <div class="section--advertisement ">
             <button class="button--notice_about_advertisement" title="광고 안내 레이어 보기" type="button">
              <span class="text">
               광고
              </span>
             </button>
             <div class="layer--information">
              <strong class="text--information_title">
               프리미엄등록이란?
              </strong>
              <p class="text--information_description">
               프리미엄 광고를 구매한 상품으로 옥션랭킹순으로 전시됩니다.
              </p>
              <button class="button--close_layer" type="button">
               <span class="ir">
                광고
                안내 레이어 닫기
               </span>
              </button>
             </div>
            </div>
           </div>
           <div class="section--itemcard">
            <div class="section--itemcard_img">
             <a class="link--itemcard image--loading" href="/DetailView.aspx?itemno=A541126169" target="_blank">
              <div class="lazyload-placeholder" style="height:100%">
              </div>
             </a>
            </div>
            <div class="section--itemcard_info">
             <div class="section--itemcard_info_major">
              <div class="area--itemcard_title">
               <span class="text--itemcard_title ellipsis">
                [ahref]
                
               </span>
              </div>
              <div class="area--itemcard_price">
               <span class="price_seller">
                <span class="for-a11y">
                 상품금액
                </span>
                <strong class="text--price_seller">
                 15,900
                </strong>
                <span class="text--unit">
                 원
                </span>
               </span>
              </div>
             </div>
             <div class="section--itemcard_info_add">
              <ul class="list--addinfo">
               <li class="item">
                <span class="text--addinfo">
                 무료배송
                </span>
               </li>
              </ul>
             </div>
             <div class="section--itemcard_info_score">
              <ul class="list--score">
               <li class="item awards">
                <span class="for-a11y">
                 만족도
                 96
                 %입니다.
                </span>
                <div class="seller_awards" title="만족도 96 % 입니다">
                 <span class="awards_points" style="width:96%">
                 </span>
                 <span class="bg_star">
                 </span>
                </div>
               </li>
               <li class="item reviewcnt">
                <span class="text--reviewcnt">
                 상품평
                 37,972
                </span>
                <span class="for-a11y">
                 건
                </span>
               </li>
               <li class="item buycnt">
                <span class="text--buycnt">
                 구매
                 200,087
                </span>
                <span class="for-a11y">
                 건
                </span>
               </li>
              </ul>
             </div>
             <div class="section--itemcard_info_shop">
              [ahref]
              
              <span class="for-a11y">
               판매자평가정보
              </span>
              <ul class="list--store_info">
               <li class="item top_seller">
                <div class="section--advertisement ">
                 <button class="button--notice_about_advertisement" title="최우수판매자 안내 레이어 보기" type="button">
                  <span class="text">
                   최우수판매자
                  </span>
                 </button>
                 <div class="layer--information">
                  <strong class="text--information_title">
                   최우수판매자란?
                  </strong>
                  <p class="text--information_description">
                   옥션의 판매인증 평가기준을 모두 달성한 최상위 판매자
                  </p>
                  <button class="button--close_layer" type="button">
                   <span class="ir">
                    최우수판매자
                    안내 레이어 닫기
                   </span>
                  </button>
                 </div>
                </div>
               </li>
              </ul>
             </div>
             <button class="button--favorite ">
              <span class="icon--favorite">
               <span class="for-a11y">
                관심상품 등록하기
               </span>
              </span>
             </button>
            </div>
           </div>
          </div>
         </div>
         <div class="component component--item_card type--general">
          <h4 class="text--module_title">
           일반상품 아이템카드
          </h4>
          <div class="itemcard">
           <div class="section--itemcard">
            <div class="section--itemcard_img">
             [ahref]
             
            </div>
            <div class="section--itemcard_info">
             <div class="section--itemcard_info_major">
              <div class="area--itemcard_title">
               <span class="text--itemcard_title ellipsis">
                <a class="link--itemcard" href="/DetailView.aspx?itemno=A508886348" target="_blank">
                 <span class="for-a11y">
                  브랜드명
                 </span>
                 <span class="text--brand">
                 </span>
                 <span class="for-a11y">
                  상품명
                 </span>
                 <span class="text--title">
                  /22만개판매/호박고구마/꿀밤고구마 10kg 12900원
                 </span>
                </a>
               </span>
              </div>
              <div class="area--itemcard_price">
               <span class="price_seller">
                <span class="for-a11y">
                 상품금액
                </span>
                <strong class="text--price_seller">
                 9,900
                </strong>
                <span class="text--unit">
                 원
                </span>
               </span>
              </div>
             </div>
             <div class="section--itemcard_info_add">
              <ul class="list--addinfo">
               <li class="item">
                <span class="text--addinfo">
                 무료배송
                </span>
               </li>
              </ul>
             </div>
             <div class="section--itemcard_info_score">
              <ul class="list--score">
               <li class="item awards">
                <span class="for-a11y">
                 만족도
                 92
                 %입니다.
                </span>
                <div class="seller_awards" title="만족도 92 % 입니다">
                 <span class="awards_points" style="width:92%">
                 </span>
                 <span class="bg_star">
                 </span>
                </div>
               </li>
               <li class="item reviewcnt">
                <span class="text--reviewcnt">
                 상품평
                 25,200
                </span>
                <span class="for-a11y">
                 건
                </span>
               </li>
               <li class="item buycnt">
                <span class="text--buycnt">
                 구매
                 220,625
                </span>
                <span class="for-a11y">
                 건
                </span>
               </li>
              </ul>
             </div>
             <div class="section--itemcard_info_shop">
              [ahref]
              
              <span class="for-a11y">
               판매자평가정보
              </span>
              <ul class="list--store_info">
               <li class="item top_seller">
                <div class="section--advertisement ">
                 <button class="button--notice_about_advertisement" title="최우수판매자 안내 레이어 보기" type="button">
                  <span class="text">
                   최우수판매자
                  </span>
                 </button>
                 <div class="layer--information">
                  <strong class="text--information_title">
                   최우수판매자란?
                  </strong>
                  <p class="text--information_description">
                   옥션의 판매인증 평가기준을 모두 달성한 최상위 판매자
                  </p>
                  <button class="button--close_layer" type="button">
                   <span class="ir">
                    최우수판매자
                    안내 레이어 닫기
                   </span>
                  </button>
                 </div>
                </div>
               </li>
              </ul>
             </div>
             <button class="button--favorite ">
              <span class="icon--favorite">
               <span class="for-a11y">
                관심상품 등록하기
               </span>
              </span>
             </button>
            </div>
           </div>
          </div>
         </div>
         <div class="component component--item_card type--general">
          <h4 class="text--module_title">
           일반상품 아이템카드
          </h4>
          <div class="itemcard">
           <div class="section--itemcard">
            <div class="section--itemcard_img">
             [linkx]
             
            </div>
            <div class="section--itemcard_info">
             <div class="section--itemcard_info_major">
              <div class="area--itemcard_title">
               <span class="text--itemcard_title ellipsis">
                [ahref]
                
               </span>
              </div>
              <div class="area--itemcard_price">
               <span class="price_seller">
                <span class="for-a11y">
                 상품금액
                </span>
                <strong class="text--price_seller">
                 15,900
                </strong>
                <span class="text--unit">
                 원
                </span>
               </span>
              </div>
             </div>
             <div class="section--itemcard_info_add">
              <ul class="list--addinfo">
               <li class="item">
                <span class="text--addinfo">
                 무료배송
                </span>
               </li>
              </ul>
             </div>
             <div class="section--itemcard_info_score">
              <ul class="list--score">
               <li class="item awards">
                <span class="for-a11y">
                 만족도
                 96
                 %입니다.
                </span>
                <div class="seller_awards" title="만족도 96 % 입니다">
                 <span class="awards_points" style="width:96%">
                 </span>
                 <span class="bg_star">
                 </span>
                </div>
               </li>
               <li class="item reviewcnt">
                <span class="text--reviewcnt">
                 상품평
                 14,197
                </span>
                <span class="for-a11y">
                 건
                </span>
               </li>
               <li class="item buycnt">
                <span class="text--buycnt">
                 구매
                 74,259
                </span>
                <span class="for-a11y">
                 건
                </span>
               </li>
              </ul>
             </div>
             <div class="section--itemcard_info_shop">
              [ahref]
              
              <span class="for-a11y">
               판매자평가정보
              </span>
              <ul class="list--store_info">
               <li class="item top_seller">
                <div class="section--advertisement ">
                 <button class="button--notice_about_advertisement" title="최우수판매자 안내 레이어 보기" type="button">
                  <span class="text">
                   최우수판매자
                  </span>
                 </button>
                 <div class="layer--information">
                  <strong class="text--information_title">
                   최우수판매자란?
                  </strong>
                  <p class="text--information_description">
                   옥션의 판매인증 평가기준을 모두 달성한 최상위 판매자
                  </p>
                  <button class="button--close_layer" type="button">
                   <span class="ir">
                    최우수판매자
                    안내 레이어 닫기
                   </span>
                  </button>
                 </div>
                </div>
               </li>
              </ul>
             </div>
             <button class="button--favorite ">
              <span class="icon--favorite">
               <span class="for-a11y">
                관심상품 등록하기
               </span>
              </span>
             </button>
            </div>
           </div>
          </div>
         </div>
         <div class="component component--item_card type--general">
          <h4 class="text--module_title">
           일반상품 아이템카드
          </h4>
          <div class="itemcard">
           <div class="section--itemcard">
            <div class="section--itemcard_img">
             <a class="link--itemcard image--loading" href="/DetailView.aspx?itemno=B336364173" target="_blank">
              <div class="lazyload-placeholder" style="height:100%">
              </div>
             </a>
            </div>
            <div class="section--itemcard_info">
             <div class="section--itemcard_info_major">
              <div class="area--itemcard_title">
               <span class="text--itemcard_title ellipsis">
                [linkx]
                
               </span>
              </div>
              <div class="area--itemcard_price">
               <span class="price_seller">
                <span class="for-a11y">
                 상품금액
                </span>
                <strong class="text--price_seller">
                 12,900
                </strong>
                <span class="text--unit">
                 원
                </span>
               </span>
              </div>
             </div>
             <div class="section--itemcard_info_add">
              <ul class="list--addinfo">
               <li class="item">
                <span class="text--addinfo">
                 무료배송
                </span>
               </li>
              </ul>
             </div>
             <div class="section--itemcard_info_score">
              <ul class="list--score">
               <li class="item awards">
                <span class="for-a11y">
                 만족도
                 94
                 %입니다.
                </span>
                <div class="seller_awards" title="만족도 94 % 입니다">
                 <span class="awards_points" style="width:94%">
                 </span>
                 <span class="bg_star">
                 </span>
                </div>
               </li>
               <li class="item reviewcnt">
                <span class="text--reviewcnt">
                 상품평
                 5,577
                </span>
                <span class="for-a11y">
                 건
                </span>
               </li>
               <li class="item buycnt">
                <span class="text--buycnt">
                 구매
                 12,792
                </span>
                <span class="for-a11y">
                 건
                </span>
               </li>
              </ul>
             </div>
             <div class="section--itemcard_info_shop">
              [ahref]
              
              <span class="for-a11y">
               판매자평가정보
              </span>
              <ul class="list--store_info">
               <li class="item top_seller">
                <div class="section--advertisement ">
                 <button class="button--notice_about_advertisement" title="최우수판매자 안내 레이어 보기" type="button">
                  <span class="text">
                   최우수판매자
                  </span>
                 </button>
                 <div class="layer--information">
                  <strong class="text--information_title">
                   최우수판매자란?
                  </strong>
                  <p class="text--information_description">
                   옥션의 판매인증 평가기준을 모두 달성한 최상위 판매자
                  </p>
                  <button class="button--close_layer" type="button">
                   <span class="ir">
                    최우수판매자
                    안내 레이어 닫기
                   </span>
                  </button>
                 </div>
                </div>
               </li>
              </ul>
             </div>
             <button class="button--favorite ">
              <span class="icon--favorite">
               <span class="for-a11y">
                관심상품 등록하기
               </span>
              </span>
             </button>
            </div>
           </div>
          </div>
         </div>
         <div class="component component--item_card type--general">
          <h4 class="text--module_title">
           일반상품 아이템카드
          </h4>
          <div class="itemcard">
           <div class="section--itemcard">
            <div class="section--itemcard_img">
             [linkx]
             
            </div>
            <div class="section--itemcard_info">
             <div class="section--itemcard_info_major">
              <div class="area--itemcard_title">
               <span class="text--itemcard_title ellipsis">
                [linkx]
                
               </span>
              </div>
              <div class="area--itemcard_price">
               <span class="price_seller">
                <span class="for-a11y">
                 상품금액
                </span>
                <strong class="text--price_seller">
                 8,800
                </strong>
                <span class="text--unit">
                 원
                </span>
               </span>
              </div>
             </div>
             <div class="section--itemcard_info_add">
              <ul class="list--addinfo">
               <li class="item">
                <span class="text--addinfo">
                 무료배송
                </span>
               </li>
              </ul>
             </div>
             <div class="section--itemcard_info_score">
              <ul class="list--score">
               <li class="item awards">
                <span class="for-a11y">
                 만족도
                 94
                 %입니다.
                </span>
                <div class="seller_awards" title="만족도 94 % 입니다">
                 <span class="awards_points" style="width:94%">
                 </span>
                 <span class="bg_star">
                 </span>
                </div>
               </li>
               <li class="item reviewcnt">
                <span class="text--reviewcnt">
                 상품평
                 21,068
                </span>
                <span class="for-a11y">
                 건
                </span>
               </li>
               <li class="item buycnt">
                <span class="text--buycnt">
                 구매
                 165,679
                </span>
                <span class="for-a11y">
                 건
                </span>
               </li>
              </ul>
             </div>
             <div class="section--itemcard_info_shop">
              <a class="link--shop" href="/enjoy" target="_blank" title="스토어로 이동">
               <span class="for-a11y">
                판매자
               </span>
               <span class="text">
                장터할매
               </span>
              </a>
              <span class="for-a11y">
               판매자평가정보
              </span>
              <ul class="list--store_info">
               <li class="item top_seller">
                <div class="section--advertisement ">
                 <button class="button--notice_about_advertisement" title="최우수판매자 안내 레이어 보기" type="button">
                  <span class="text">
                   최우수판매자
                  </span>
                 </button>
                 <div class="layer--information">
                  <strong class="text--information_title">
                   최우수판매자란?
                  </strong>
                  <p class="text--information_description">
                   옥션의 판매인증 평가기준을 모두 달성한 최상위 판매자
                  </p>
                  <button class="button--close_layer" type="button">
                   <span class="ir">
                    최우수판매자
                    안내 레이어 닫기
                   </span>
                  </button>
                 </div>
                </div>
               </li>
              </ul>
             </div>
             <button class="button--favorite ">
              <span class="icon--favorite">
               <span class="for-a11y">
                관심상품 등록하기
               </span>
              </span>
             </button>
            </div>
           </div>
          </div>
         </div>
         <div class="component component--item_card type--general">
          <h4 class="text--module_title">
           일반상품 아이템카드
          </h4>
          <div class="itemcard">
           <div class="section--itemcard">
            <div class="section--itemcard_img">
             [ahref]
             
            </div>
            <div class="section--itemcard_info">
             <div class="section--itemcard_info_major">
              <div class="area--itemcard_title">
               <span class="text--itemcard_title ellipsis">
                [linkx]
                
               </span>
              </div>
              <div class="area--itemcard_price">
               <span class="price_seller">
                <span class="for-a11y">
                 상품금액
                </span>
                <strong class="text--price_seller">
                 11,900
                </strong>
                <span class="text--unit">
                 <h1>
                  <b>[mkey1][symbolx][pkey1][symbolx][keyword1][bracketl1][bracketr1][symbolx][bracketl2][siter1][bracketr2][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx]</b>
                 </h1>
                 원
                </span>
               </span>
              </div>
             </div>
             <div class="section--itemcard_info_add">
              <ul class="list--addinfo">
               <li class="item">
                <span class="text--addinfo">
                 무료배송
                </span>
               </li>
              </ul>
             </div>
             <div class="section--itemcard_info_score">
              <ul class="list--score">
               <li class="item awards">
                <span class="for-a11y">
                 만족도
                 90
                 %입니다.
                </span>
                <div class="seller_awards" title="만족도 90 % 입니다">
                 <span class="awards_points" style="width:90%">
                 </span>
                 <span class="bg_star">
                 </span>
                </div>
               </li>
               <li class="item reviewcnt">
                <span class="text--reviewcnt">
                 상품평
                 679
                </span>
                <span class="for-a11y">
                 건
                </span>
               </li>
               <li class="item buycnt">
                <span class="text--buycnt">
                 구매
                 5,927
                </span>
                <span class="for-a11y">
                 건
                </span>
               </li>
              </ul>
             </div>
             <div class="section--itemcard_info_shop">
              [ahref]
              
              <span class="for-a11y">
               판매자평가정보
              </span>
              <ul class="list--store_info">
               <li class="item top_seller">
                <div class="section--advertisement ">
                 <button class="button--notice_about_advertisement" title="최우수판매자 안내 레이어 보기" type="button">
                  <span class="text">
                   최우수판매자
                  </span>
                 </button>
                 <div class="layer--information">
                  <strong class="text--information_title">
                   최우수판매자란?
                  </strong>
                  <p class="text--information_description">
                   옥션의 판매인증 평가기준을 모두 달성한 최상위 판매자
                  </p>
                  <button class="button--close_layer" type="button">
                   <span class="ir">
                    최우수판매자
                    안내 레이어 닫기
                   </span>
                  </button>
                 </div>
                </div>
               </li>
              </ul>
             </div>
             <button class="button--favorite ">
              <span class="icon--favorite">
               <span class="for-a11y">
                관심상품 등록하기
               </span>
              </span>
             </button>
            </div>
           </div>
          </div>
         </div>
         <div class="component component--item_card type--general">
          <h4 class="text--module_title">
           일반상품 아이템카드
          </h4>
          <div class="itemcard">
           <div class="section--itemcard">
            <div class="section--itemcard_img">
             [linkx]
             
            </div>
            <div class="section--itemcard_info">
             <div class="section--itemcard_info_major">
              <div class="area--itemcard_title">
               <span class="text--itemcard_title ellipsis">
                [ahref]
                
               </span>
              </div>
              <div class="area--itemcard_price">
               <span class="price_seller">
                <span class="for-a11y">
                 상품금액
                </span>
                <strong class="text--price_seller">
                 19,900
                </strong>
                <span class="text--unit">
                 원
                </span>
               </span>
              </div>
             </div>
             <div class="section--itemcard_info_add">
              <ul class="list--addinfo">
               <li class="item">
                <span class="text--addinfo">
                 무료배송
                </span>
               </li>
              </ul>
             </div>
             <div class="section--itemcard_info_score">
              <ul class="list--score">
               <li class="item awards">
                <span class="for-a11y">
                 만족도
                 94
                 %입니다.
                </span>
                <div class="seller_awards" title="만족도 94 % 입니다">
                 <span class="awards_points" style="width:94%">
                 </span>
                 <span class="bg_star">
                 </span>
                </div>
               </li>
               <li class="item reviewcnt">
                <span class="text--reviewcnt">
                 상품평
                 2,971
                </span>
                <span class="for-a11y">
                 건
                </span>
               </li>
               <li class="item buycnt">
                <span class="text--buycnt">
                 구매
                 41,663
                </span>
                <span class="for-a11y">
                 건
                </span>
               </li>
              </ul>
             </div>
             <div class="section--itemcard_info_shop">
              [ahref]
              
              <span class="for-a11y">
               판매자평가정보
              </span>
              <ul class="list--store_info">
               <li class="item">
                <span class="text--store_info">
                 상품평
                </span>
               </li>
               <li class="item">
                <span class="text--store_info">
                 고객응대우수
                </span>
               </li>
              </ul>
             </div>
             <button class="button--favorite ">
              <span class="icon--favorite">
               <span class="for-a11y">
                관심상품 등록하기
               </span>
              </span>
             </button>
            </div>
           </div>
          </div>
         </div>
         <div class="component component--item_card type--general">
          <h4 class="text--module_title">
           일반상품 아이템카드
          </h4>
          <div class="itemcard">
           <div class="section--itemcard">
            <div class="section--itemcard_img">
             [ahref]
             
            </div>
            <div class="section--itemcard_info">
             <div class="section--itemcard_info_major">
              <div class="area--itemcard_title">
               <span class="text--itemcard_title ellipsis">
                <a class="link--itemcard" href="/DetailView.aspx?itemno=A826480812" target="_blank">
                 <span class="for-a11y">
                  브랜드명
                 </span>
                 <span class="text--brand">
                 </span>
                 <span class="for-a11y">
                  상품명
                 </span>
                 <span class="text--title">
                  호박/꿀고구마  10kg  11900원
                 </span>
                </a>
               </span>
              </div>
              <div class="area--itemcard_price">
               <span class="price_seller">
                <span class="for-a11y">
                 상품금액
                </span>
                <strong class="text--price_seller">
                 9,900
                </strong>
                <span class="text--unit">
                 원
                </span>
               </span>
              </div>
             </div>
             <div class="section--itemcard_info_add">
              <ul class="list--addinfo">
               <li class="item">
                <span class="text--addinfo">
                 무료배송
                </span>
               </li>
              </ul>
             </div>
             <div class="section--itemcard_info_score">
              <ul class="list--score">
               <li class="item awards">
                <span class="for-a11y">
                 만족도
                 94
                 %입니다.
                </span>
                <div class="seller_awards" title="만족도 94 % 입니다">
                 <span class="awards_points" style="width:94%">
                 </span>
                 <span class="bg_star">
                 </span>
                </div>
               </li>
               <li class="item reviewcnt">
                <span class="text--reviewcnt">
                 상품평
                 3,388
                </span>
                <span class="for-a11y">
                 건
                </span>
               </li>
               <li class="item buycnt">
                <span class="text--buycnt">
                 구매
                 17,031
                </span>
                <span class="for-a11y">
                 건
                </span>
               </li>
              </ul>
             </div>
             <div class="section--itemcard_info_shop">
              [ahref]
              
             </div>
             <button class="button--favorite ">
              <span class="icon--favorite">
               <span class="for-a11y">
                관심상품 등록하기
               </span>
              </span>
             </button>
            </div>
           </div>
          </div>
         </div>
         <div class="component component--item_card type--general">
          <h4 class="text--module_title">
           일반상품 아이템카드
          </h4>
          <div class="itemcard">
           <div class="section--itemcard">
            <div class="section--itemcard_img">
             [ahref]
             
            </div>
            <div class="section--itemcard_info">
             <div class="section--itemcard_info_major">
              <div class="area--itemcard_title">
               <span class="text--itemcard_title ellipsis">
                [ahref]
                
               </span>
              </div>
              <div class="area--itemcard_price">
               <span class="price_seller">
                <span class="for-a11y">
                 상품금액
                </span>
                <strong class="text--price_seller">
                 8,900
                </strong>
                <span class="text--unit">
                 원
                </span>
               </span>
              </div>
             </div>
             <div class="section--itemcard_info_add">
              <ul class="list--addinfo">
               <li class="item">
                <span class="text--addinfo">
                 배송비 3,000원
                </span>
               </li>
              </ul>
             </div>
             <div class="section--itemcard_info_score">
              <ul class="list--score">
               <li class="item awards">
                <span class="for-a11y">
                 만족도
                 90
                 %입니다.
                </span>
                <div class="seller_awards" title="만족도 90 % 입니다">
                 <span class="awards_points" style="width:90%">
                 </span>
                 <span class="bg_star">
                 </span>
                </div>
               </li>
               <li class="item reviewcnt">
                <span class="text--reviewcnt">
                 상품평
                 146
                </span>
                <span class="for-a11y">
                 건
                </span>
               </li>
               <li class="item buycnt">
                <span class="text--buycnt">
                 구매
                 500
                </span>
                <span class="for-a11y">
                 건
                </span>
               </li>
              </ul>
             </div>
             <div class="section--itemcard_info_shop">
              <a class="link--shop" href="/mssfoof" target="_blank" title="스토어로 이동">
               <span class="for-a11y">
                판매자
               </span>
               <span class="text">
                아침빛바다1
               </span>
              </a>
              <span class="for-a11y">
               판매자평가정보
              </span>
              <ul class="list--store_info">
               <li class="item top_seller">
                <div class="section--advertisement ">
                 <button class="button--notice_about_advertisement" title="최우수판매자 안내 레이어 보기" type="button">
                  <span class="text">
                   최우수판매자
                  </span>
                 </button>
                 <div class="layer--information">
                  <strong class="text--information_title">
                   최우수판매자란?
                  </strong>
                  <p class="text--information_description">
                   옥션의 판매인증 평가기준을 모두 달성한 최상위 판매자
                  </p>
                  <button class="button--close_layer" type="button">
                   <span class="ir">
                    최우수판매자
                    안내 레이어 닫기
                   </span>
                  </button>
                 </div>
                </div>
               </li>
              </ul>
             </div>
             <button class="button--favorite ">
              <span class="icon--favorite">
               <span class="for-a11y">
                관심상품 등록하기
               </span>
              </span>
             </button>
            </div>
           </div>
          </div>
         </div>
        </div>
        <div class="section--module_wrap" module-design-id="17">
         <div class="component component--item_card type--general">
          <h4 class="text--module_title">
           일반상품 아이템카드
          </h4>
          <div class="itemcard">
           <div class="section--itemcard">
            <div class="section--itemcard_img">
             [linkx]
             
            </div>
            <div class="section--itemcard_info">
             <div class="section--itemcard_info_major">
              <div class="area--itemcard_title">
               <span class="text--itemcard_title ellipsis">
                <a class="link--itemcard" href="/DetailView.aspx?itemno=B407153982" target="_blank">
                 <span class="for-a11y">
                  브랜드명
                 </span>
                 <span class="text--brand">
                 </span>
                 <span class="for-a11y">
                  상품명
                 </span>
                 <span class="text--title">
                  꿀이 뚝뚝 달콤한 밤/꿀/호박고구마 5kg/10kg
                 </span>
                </a>
               </span>
              </div>
              <div class="area--itemcard_price">
               <span class="price_seller">
                <span class="for-a11y">
                 상품금액
                </span>
                <strong class="text--price_seller">
                 9,900
                </strong>
                <span class="text--unit">
                 원
                </span>
               </span>
              </div>
             </div>
             <div class="section--itemcard_info_add">
              <ul class="list--addinfo">
               <li class="item">
                <span class="text--addinfo">
                 무료배송
                </span>
               </li>
              </ul>
             </div>
             <div class="section--itemcard_info_score">
              <ul class="list--score">
               <li class="item awards">
                <span class="for-a11y">
                 만족도
                 88
                 %입니다.
                </span>
                <div class="seller_awards" title="만족도 88 % 입니다">
                 <span class="awards_points" style="width:88%">
                 </span>
                 <span class="bg_star">
                 </span>
                </div>
               </li>
               <li class="item reviewcnt">
                <span class="text--reviewcnt">
                 상품평
                 8,835
                </span>
                <span class="for-a11y">
                 건
                </span>
               </li>
               <li class="item buycnt">
                <span class="text--buycnt">
                 구매
                 17,982
                </span>
                <span class="for-a11y">
                 건
                </span>
               </li>
              </ul>
             </div>
             <div class="section--itemcard_info_shop">
              [ahref]
              
              <span class="for-a11y">
               판매자평가정보
              </span>
              <ul class="list--store_info">
               <li class="item top_seller">
                <div class="section--advertisement ">
                 <button class="button--notice_about_advertisement" title="최우수판매자 안내 레이어 보기" type="button">
                  <span class="text">
                   최우수판매자
                  </span>
                 </button>
                 <div class="layer--information">
                  <strong class="text--information_title">
                   최우수판매자란?
                  </strong>
                  <p class="text--information_description">
                   옥션의 판매인증 평가기준을 모두 달성한 최상위 판매자
                  </p>
                  <button class="button--close_layer" type="button">
                   <span class="ir">
                    최우수판매자
                    안내 레이어 닫기
                   </span>
                  </button>
                 </div>
                </div>
               </li>
              </ul>
             </div>
             <button class="button--favorite ">
              <span class="icon--favorite">
               <span class="for-a11y">
                관심상품 등록하기
               </span>
              </span>
             </button>
            </div>
           </div>
          </div>
         </div>
         <div class="component component--item_card type--general">
          <h4 class="text--module_title">
           일반상품 아이템카드
          </h4>
          <div class="itemcard">
           <div class="section--itemcard">
            <div class="section--itemcard_img">
             [linkx]
             
            </div>
            <div class="section--itemcard_info">
             <div class="section--itemcard_info_major">
              <div class="area--itemcard_title">
               <span class="text--itemcard_title ellipsis">
                <a class="link--itemcard" href="/DetailView.aspx?itemno=A524371447" target="_blank">
                 <span class="for-a11y">
                  브랜드명
                 </span>
                 <span class="text--brand">
                 </span>
                 <span class="for-a11y">
                  상품명
                 </span>
                 <span class="text--title">
                  영암 꿀달고구마 무농약 3kg(긴특긴상) 30년고구마재배
                 </span>
                </a>
               </span>
              </div>
              <div class="area--itemcard_price">
               <span class="price_seller">
                <span class="for-a11y">
                 상품금액
                </span>
                <strong class="text--price_seller">
                 14,900
                </strong>
                <span class="text--unit">
                 원
                </span>
               </span>
              </div>
             </div>
             <div class="section--itemcard_info_add">
              <ul class="list--addinfo">
               <li class="item">
                <span class="text--addinfo">
                 무료배송
                </span>
               </li>
              </ul>
             </div>
             <div class="section--itemcard_info_score">
              <ul class="list--score">
               <li class="item awards">
                <span class="for-a11y">
                 만족도
                 98
                 %입니다.
                </span>
                <div class="seller_awards" title="만족도 98 % 입니다">
                 <span class="awards_points" style="width:98%">
                 </span>
                 <span class="bg_star">
                 </span>
                </div>
               </li>
               <li class="item reviewcnt">
                <span class="text--reviewcnt">
                 상품평
                 672
                </span>
                <span class="for-a11y">
                 건
                </span>
               </li>
               <li class="item buycnt">
                <span class="text--buycnt">
                 구매
                 26,771
                </span>
                <span class="for-a11y">
                 건
                </span>
               </li>
              </ul>
             </div>
             <div class="section--itemcard_info_shop">
              [ahref]
              
             </div>
             <button class="button--favorite ">
              <span class="icon--favorite">
               <span class="for-a11y">
                관심상품 등록하기
               </span>
              </span>
             </button>
             <button class="button--related_item" title="연관상품 4 개가 있습니다. ">
              <span class="text--related_item">
               <b class="text--title">
                연관상품
               </b>
               <b class="text--cnt">
                4
               </b>
              </span>
             </button>
            </div>
           </div>
          </div>
          <div class="popup--related_items ">
           <h2 class="section--title">
            [mkey1][symbolx][pkey1][symbolx][keyword1][bracketl1][bracketr1][symbolx][bracketl2][siter1][bracketr2][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx]
           </h2>
           <div class="section--body">
            <div class="section--related_items">
             <div class="section--slick_area">
              <div class="list--related_items">
               <div class="slick-slider slick-initialized">
                <div class="slick-list">
                 <div class="slick-track" style="width:0%;left:NaN%">
                 </div>
                </div>
               </div>
              </div>
             </div>
            </div>
           </div>
          </div>
         </div>
         <div class="component component--item_card type--general">
          <h4 class="text--module_title">
           일반상품 아이템카드
          </h4>
          <div class="itemcard">
           <div class="section--itemcard">
            <div class="section--itemcard_img">
             [ahref]
             
            </div>
            <div class="section--itemcard_info">
             <div class="section--itemcard_info_major">
              <div class="area--itemcard_title">
               <span class="text--itemcard_title ellipsis">
                <a class="link--itemcard" href="/DetailView.aspx?itemno=B267172760" target="_blank">
                 <span class="for-a11y">
                  브랜드명
                 </span>
                 <span class="text--brand">
                  파머스토리
                 </span>
                 <span class="for-a11y">
                  상품명
                 </span>
                 <span class="text--title">
                  전남 해남 김형식님의 꿀고구마 3kg(중상)
                 </span>
                </a>
               </span>
              </div>
              <div class="area--itemcard_price">
               <span class="discount" title="할인률">
                <strong class="text--discount">
                 50
                </strong>
                <span class="text--unit">
                 %
                </span>
                <span class="for-a11y">
                 할인
                </span>
               </span>
               <span class="price_seller">
                <span class="for-a11y">
                 할인적용금액
                </span>
                <strong class="text--price_seller">
                 9,900
                </strong>
                <span class="text--unit">
                 원
                </span>
               </span>
               <span class="price_original">
                <span class="for-a11y">
                 상품금액
                </span>
                <strong class="text--price_original">
                 19,800
                </strong>
                <span class="text--unit">
                 원
                </span>
               </span>
              </div>
             </div>
             <div class="section--itemcard_info_add">
              <ul class="list--addinfo">
               <li class="item">
                <span class="text--addinfo">
                 무료배송
                </span>
               </li>
              </ul>
             </div>
             <div class="section--itemcard_info_score">
              <ul class="list--score">
               <li class="item awards">
                <span class="for-a11y">
                 만족도
                 92
                 %입니다.
                </span>
                <div class="seller_awards" title="만족도 92 % 입니다">
                 <span class="awards_points" style="width:92%">
                 </span>
                 <span class="bg_star">
                 </span>
                </div>
               </li>
               <li class="item reviewcnt">
                <span class="text--reviewcnt">
                 상품평
                 2,004
                </span>
                <span class="for-a11y">
                 건
                </span>
               </li>
               <li class="item buycnt">
                <span class="text--buycnt">
                 구매
                 6,371
                </span>
                <span class="for-a11y">
                 건
                </span>
               </li>
              </ul>
             </div>
             <div class="section--itemcard_info_shop">
              [linkx]
              
              <span class="for-a11y">
               판매자평가정보
              </span>
              <ul class="list--store_info">
               <li class="item top_seller">
                <div class="section--advertisement ">
                 <button class="button--notice_about_advertisement" title="최우수판매자 안내 레이어 보기" type="button">
                  <span class="text">
                   최우수판매자
                  </span>
                 </button>
                 <div class="layer--information">
                  <strong class="text--information_title">
                   최우수판매자란?
                  </strong>
                  <p class="text--information_description">
                   옥션의 판매인증 평가기준을 모두 달성한 최상위 판매자
                  </p>
                  <button class="button--close_layer" type="button">
                   <span class="ir">
                    최우수판매자
                    안내 레이어 닫기
                   </span>
                  </button>
                 </div>
                </div>
               </li>
              </ul>
             </div>
             <button class="button--favorite ">
              <span class="icon--favorite">
               <span class="for-a11y">
                관심상품 등록하기
               </span>
              </span>
             </button>
             <button class="button--related_item" title="연관상품 4 개가 있습니다. ">
              <span class="text--related_item">
               <b class="text--title">
                연관상품
               </b>
               <b class="text--cnt">
                4
               </b>
              </span>
             </button>
            </div>
           </div>
          </div>
          <div class="popup--related_items ">
           <h2 class="section--title">
            <b>[mkey1][symbolx][pkey1][symbolx][keyword1][bracketl1][bracketr1][symbolx][bracketl2][siter1][bracketr2][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx]</b>
           </h2>
           <div class="section--body">
            <div class="section--related_items">
             <div class="section--slick_area">
              <div class="list--related_items">
               <div class="slick-slider slick-initialized">
                <div class="slick-list">
                 <div class="slick-track" style="width:0%;left:NaN%">
                 </div>
                </div>
               </div>
              </div>
             </div>
            </div>
           </div>
          </div>
         </div>
         <div class="component component--item_card type--general">
          <h4 class="text--module_title">
           일반상품 아이템카드
          </h4>
          <div class="itemcard">
           <div class="section--itemcard">
            <div class="section--itemcard_img">
             [linkx]
             
            </div>
            <div class="section--itemcard_info">
             <div class="section--itemcard_info_major">
              <div class="area--itemcard_title">
               <span class="text--itemcard_title ellipsis">
                [linkx]
                
               </span>
              </div>
              <div class="area--itemcard_price">
               <span class="price_seller">
                <span class="for-a11y">
                 상품금액
                </span>
                <strong class="text--price_seller">
                 45,900
                </strong>
                <span class="text--unit">
                 원
                </span>
               </span>
              </div>
             </div>
             <div class="section--itemcard_info_add">
              <ul class="list--addinfo">
               <li class="item">
                <span class="text--addinfo">
                 무료배송
                </span>
               </li>
              </ul>
             </div>
             <div class="section--itemcard_info_score">
              <ul class="list--score">
               <li class="item awards">
                <span class="for-a11y">
                 만족도
                 96
                 %입니다.
                </span>
                <div class="seller_awards" title="만족도 96 % 입니다">
                 <span class="awards_points" style="width:96%">
                 </span>
                 <span class="bg_star">
                 </span>
                </div>
               </li>
               <li class="item reviewcnt">
                <span class="text--reviewcnt">
                 상품평
                 77
                </span>
                <span class="for-a11y">
                 건
                </span>
               </li>
               <li class="item buycnt">
                <span class="text--buycnt">
                 구매
                 128
                </span>
                <span class="for-a11y">
                 건
                </span>
               </li>
              </ul>
             </div>
             <div class="section--itemcard_info_shop">
              [linkx]
              
             </div>
             <button class="button--favorite ">
              <span class="icon--favorite">
               <span class="for-a11y">
                관심상품 등록하기
               </span>
              </span>
             </button>
             <button class="button--related_item" title="연관상품 4 개가 있습니다. ">
              <span class="text--related_item">
               <b class="text--title">
                연관상품
               </b>
               <b class="text--cnt">
                4
               </b>
              </span>
             </button>
            </div>
           </div>
          </div>
          <div class="popup--related_items ">
           <h2 class="section--title">
            <b>[mkey1][symbolx][pkey1][symbolx][keyword1][bracketl1][bracketr1][symbolx][bracketl2][siter1][bracketr2][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx]</b>
           </h2>
           <div class="section--body">
            <div class="section--related_items">
             <div class="section--slick_area">
              <div class="list--related_items">
               <div class="slick-slider slick-initialized">
                <div class="slick-list">
                 <div class="slick-track" style="width:0%;left:NaN%">
                 </div>
                </div>
               </div>
              </div>
             </div>
            </div>
           </div>
          </div>
         </div>
         <div class="component component--item_card type--general">
          <h4 class="text--module_title">
           일반상품 아이템카드
          </h4>
          <div class="itemcard">
           <div class="section--itemcard">
            <div class="section--itemcard_img">
             [linkx]
             
            </div>
            <div class="section--itemcard_info">
             <div class="section--itemcard_info_major">
              <div class="area--itemcard_title">
               <span class="text--itemcard_title ellipsis">
                [linkx]
                
               </span>
              </div>
              <div class="area--itemcard_price">
               <span class="price_seller">
                <span class="for-a11y">
                 상품금액
                </span>
                <strong class="text--price_seller">
                 9,900
                </strong>
                <span class="text--unit">
                 원
                </span>
               </span>
              </div>
             </div>
             <div class="section--itemcard_info_add">
              <ul class="list--addinfo">
               <li class="item">
                <span class="text--addinfo">
                 무료배송
                </span>
               </li>
              </ul>
             </div>
             <div class="section--itemcard_info_score">
              <ul class="list--score">
               <li class="item awards">
                <span class="for-a11y">
                 만족도
                 96
                 %입니다.
                </span>
                <div class="seller_awards" title="만족도 96 % 입니다">
                 <span class="awards_points" style="width:96%">
                 </span>
                 <span class="bg_star">
                 </span>
                </div>
               </li>
               <li class="item reviewcnt">
                <span class="text--reviewcnt">
                 상품평
                 3,068
                </span>
                <span class="for-a11y">
                 건
                </span>
               </li>
               <li class="item buycnt">
                <span class="text--buycnt">
                 구매
                 22,011
                </span>
                <span class="for-a11y">
                 건
                </span>
               </li>
              </ul>
             </div>
             <div class="section--itemcard_info_shop">
              [linkx]
              
              <span class="for-a11y">
               판매자평가정보
              </span>
              <ul class="list--store_info">
               <li class="item top_seller">
                <div class="section--advertisement ">
                 <button class="button--notice_about_advertisement" title="최우수판매자 안내 레이어 보기" type="button">
                  <span class="text">
                   최우수판매자
                  </span>
                 </button>
                 <div class="layer--information">
                  <strong class="text--information_title">
                   최우수판매자란?
                  </strong>
                  <p class="text--information_description">
                   옥션의 판매인증 평가기준을 모두 달성한 최상위 판매자
                  </p>
                  <button class="button--close_layer" type="button">
                   <span class="ir">
                    최우수판매자
                    안내 레이어 닫기
                   </span>
                  </button>
                 </div>
                </div>
               </li>
              </ul>
             </div>
             <button class="button--favorite ">
              <span class="icon--favorite">
               <span class="for-a11y">
                관심상품 등록하기
               </span>
              </span>
             </button>
            </div>
           </div>
          </div>
         </div>
         <div class="component component--item_card type--general">
          <h4 class="text--module_title">
           일반상품 아이템카드
          </h4>
          <div class="itemcard">
           <div class="section--itemcard">
            <div class="section--itemcard_img">
             [ahref]
             
            </div>
            <div class="section--itemcard_info">
             <div class="section--itemcard_info_major">
              <div class="area--itemcard_title">
               <span class="text--itemcard_title ellipsis">
                [ahref]
                
               </span>
              </div>
              <div class="area--itemcard_price">
               <span class="price_seller">
                <span class="for-a11y">
                 상품금액
                </span>
                <strong class="text--price_seller">
                 36,800
                </strong>
                <span class="text--unit">
                 원
                </span>
               </span>
              </div>
             </div>
             <div class="section--itemcard_info_add">
              <ul class="list--addinfo">
               <li class="item">
                <span class="text--addinfo">
                 배송비 3,000원
                </span>
               </li>
              </ul>
             </div>
             <div class="section--itemcard_info_score">
              <ul class="list--score">
               <li class="item awards">
                <span class="for-a11y">
                 만족도
                 100
                 %입니다.
                </span>
                <div class="seller_awards" title="만족도 100 % 입니다">
                 <span class="awards_points" style="width:100%">
                 </span>
                 <span class="bg_star">
                 </span>
                </div>
               </li>
               <li class="item reviewcnt">
                <span class="text--reviewcnt">
                 상품평
                 175
                </span>
                <span class="for-a11y">
                 건
                </span>
               </li>
               <li class="item buycnt">
                <span class="text--buycnt">
                 구매
                 527
                </span>
                <span class="for-a11y">
                 건
                </span>
               </li>
              </ul>
             </div>
             <div class="section--itemcard_info_shop">
              [ahref]
              
              <span class="for-a11y">
               판매자평가정보
              </span>
              <ul class="list--store_info">
               <li class="item top_seller">
                <div class="section--advertisement ">
                 <button class="button--notice_about_advertisement" title="최우수판매자 안내 레이어 보기" type="button">
                  <span class="text">
                   최우수판매자
                  </span>
                 </button>
                 <div class="layer--information">
                  <strong class="text--information_title">
                   최우수판매자란?
                  </strong>
                  <p class="text--information_description">
                   옥션의 판매인증 평가기준을 모두 달성한 최상위 판매자
                  </p>
                  <button class="button--close_layer" type="button">
                   <span class="ir">
                    최우수판매자
                    안내 레이어 닫기
                   </span>
                  </button>
                 </div>
                </div>
               </li>
              </ul>
             </div>
             <button class="button--favorite ">
              <span class="icon--favorite">
               <span class="for-a11y">
                관심상품 등록하기
               </span>
              </span>
             </button>
             <button class="button--related_item" title="연관상품 4 개가 있습니다. ">
              <span class="text--related_item">
               <b class="text--title">
                연관상품
               </b>
               <b class="text--cnt">
                4
               </b>
              </span>
             </button>
            </div>
           </div>
          </div>
          <div class="popup--related_items ">
           <h2 class="section--title">
            [mkey1][symbolx][pkey1][symbolx][keyword1][bracketl1][bracketr1][symbolx][bracketl2][siter1][bracketr2][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx]
           </h2>
           <div class="section--body">
            <div class="section--related_items">
             <div class="section--slick_area">
              <div class="list--related_items">
               <div class="slick-slider slick-initialized">
                <div class="slick-list">
                 <div class="slick-track" style="width:0%;left:NaN%">
                 </div>
                </div>
               </div>
              </div>
             </div>
            </div>
           </div>
          </div>
         </div>
         <div class="component component--item_card type--general">
          <h4 class="text--module_title">
           일반상품 아이템카드
          </h4>
          <div class="itemcard">
           <div class="section--itemcard">
            <div class="section--itemcard_img">
             [ahref]
             
            </div>
            <div class="section--itemcard_info">
             <div class="section--itemcard_info_major">
              <div class="area--itemcard_title">
               <span class="text--itemcard_title ellipsis">
                [linkx]
                
               </span>
              </div>
              <div class="area--itemcard_price">
               <span class="discount" title="할인률">
                <strong class="text--discount">
                </strong>
                <span class="text--unit">
                </span>
                <span class="for-a11y">
                 할인
                </span>
               </span>
               <span class="price_seller">
                <span class="for-a11y">
                 할인적용금액
                </span>
                <strong class="text--price_seller">
                 32,900
                </strong>
                <span class="text--unit">
                 원
                </span>
               </span>
               <span class="price_original">
                <span class="for-a11y">
                 상품금액
                </span>
                <strong class="text--price_original">
                 33,000
                </strong>
                <span class="text--unit">
                 원
                </span>
               </span>
              </div>
             </div>
             <div class="section--itemcard_info_add">
              <ul class="list--addinfo">
               <li class="item">
                <span class="text--addinfo">
                 무료배송
                </span>
               </li>
              </ul>
             </div>
             <div class="section--itemcard_info_score">
              <ul class="list--score">
               <li class="item awards">
                <span class="for-a11y">
                 만족도
                 96
                 %입니다.
                </span>
                <div class="seller_awards" title="만족도 96 % 입니다">
                 <span class="awards_points" style="width:96%">
                 </span>
                 <span class="bg_star">
                 </span>
                </div>
               </li>
               <li class="item reviewcnt">
                <span class="text--reviewcnt">
                 상품평
                 148
                </span>
                <span class="for-a11y">
                 건
                </span>
               </li>
               <li class="item buycnt">
                <span class="text--buycnt">
                 구매
                 405
                </span>
                <span class="for-a11y">
                 건
                </span>
               </li>
              </ul>
             </div>
             <div class="section--itemcard_info_shop">
              [ahref]
              
              <span class="for-a11y">
               판매자평가정보
              </span>
              <ul class="list--store_info">
               <li class="item">
                <span class="text--store_info">
                 배송
                </span>
               </li>
               <li class="item">
                <span class="text--store_info">
                 상품평
                </span>
               </li>
               <li class="item">
                <span class="text--store_info">
                 고객응대우수
                </span>
               </li>
              </ul>
             </div>
             <button class="button--favorite ">
              <span class="icon--favorite">
               <span class="for-a11y">
                관심상품 등록하기
               </span>
              </span>
             </button>
            </div>
           </div>
          </div>
         </div>
         <div class="component component--item_card type--general">
          <h4 class="text--module_title">
           일반상품 아이템카드
          </h4>
          <div class="itemcard">
           <div class="section--itemcard">
            <div class="section--itemcard_img">
             [linkx]
             
            </div>
            <div class="section--itemcard_info">
             <div class="section--itemcard_info_major">
              <div class="area--itemcard_title">
               <span class="text--itemcard_title ellipsis">
                <a class="link--itemcard" href="/DetailView.aspx?itemno=B605641065" target="_blank">
                 <span class="for-a11y">
                  브랜드명
                 </span>
                 <span class="text--brand">
                 </span>
                 <span class="for-a11y">
                  상품명
                 </span>
                 <span class="text--title">
                  영암 꿀달고구마 무농약 5kg(특상) 30년고구마재배
                 </span>
                </a>
               </span>
              </div>
              <div class="area--itemcard_price">
               <span class="price_seller">
                <span class="for-a11y">
                 상품금액
                </span>
                <strong class="text--price_seller">
                 25,900
                </strong>
                <span class="text--unit">
                 원
                </span>
               </span>
              </div>
             </div>
             <div class="section--itemcard_info_add">
              <ul class="list--addinfo">
               <li class="item">
                <span class="text--addinfo">
                 무료배송
                </span>
               </li>
              </ul>
             </div>
             <div class="section--itemcard_info_score">
              <ul class="list--score">
               <li class="item awards">
                <span class="for-a11y">
                 만족도
                 96
                 %입니다.
                </span>
                <div class="seller_awards" title="만족도 96 % 입니다">
                 <span class="awards_points" style="width:96%">
                 </span>
                 <span class="bg_star">
                 </span>
                </div>
               </li>
               <li class="item reviewcnt">
                <span class="text--reviewcnt">
                 상품평
                 157
                </span>
                <span class="for-a11y">
                 건
                </span>
               </li>
               <li class="item buycnt">
                <span class="text--buycnt">
                 구매
                 269
                </span>
                <span class="for-a11y">
                 건
                </span>
               </li>
              </ul>
             </div>
             <div class="section--itemcard_info_shop">
              [linkx]
              
             </div>
             <button class="button--favorite ">
              <span class="icon--favorite">
               <span class="for-a11y">
                관심상품 등록하기
               </span>
              </span>
             </button>
             <button class="button--related_item" title="연관상품 4 개가 있습니다. ">
              <span class="text--related_item">
               <b class="text--title">
                연관상품
               </b>
               <b class="text--cnt">
                4
               </b>
              </span>
             </button>
            </div>
           </div>
          </div>
          <div class="popup--related_items ">
           <h2 class="section--title">
            <b>[mkey1][symbolx][pkey1][symbolx][keyword1][bracketl1][bracketr1][symbolx][bracketl2][siter1][bracketr2][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx]</b>
           </h2>
           <div class="section--body">
            <div class="section--related_items">
             <div class="section--slick_area">
              <div class="list--related_items">
               <div class="slick-slider slick-initialized">
                <div class="slick-list">
                 <div class="slick-track" style="width:0%;left:NaN%">
                 </div>
                </div>
               </div>
              </div>
             </div>
            </div>
           </div>
          </div>
         </div>
         <div class="component component--item_card type--general">
          <h4 class="text--module_title">
           일반상품 아이템카드
          </h4>
          <div class="itemcard">
           <div class="section--itemcard">
            <div class="section--itemcard_img">
             [ahref]
             
            </div>
            <div class="section--itemcard_info">
             <div class="section--itemcard_info_major">
              <div class="area--itemcard_title">
               <span class="text--itemcard_title ellipsis">
                [ahref]
                
               </span>
              </div>
              <div class="area--itemcard_price">
               <span class="price_seller">
                <span class="for-a11y">
                 상품금액
                </span>
                <strong class="text--price_seller">
                 18,900
                </strong>
                <span class="text--unit">
                 원
                </span>
               </span>
              </div>
             </div>
             <div class="section--itemcard_info_add">
              <ul class="list--addinfo">
               <li class="item">
                <span class="text--addinfo">
                 무료배송
                </span>
               </li>
              </ul>
             </div>
             <div class="section--itemcard_info_score">
              <ul class="list--score">
               <li class="item awards">
                <span class="for-a11y">
                 만족도
                 96
                 %입니다.
                </span>
                <div class="seller_awards" title="만족도 96 % 입니다">
                 <span class="awards_points" style="width:96%">
                 </span>
                 <span class="bg_star">
                 </span>
                </div>
               </li>
               <li class="item reviewcnt">
                <span class="text--reviewcnt">
                 상품평
                 1,562
                </span>
                <span class="for-a11y">
                 건
                </span>
               </li>
               <li class="item buycnt">
                <span class="text--buycnt">
                 구매
                 50,652
                </span>
                <span class="for-a11y">
                 건
                </span>
               </li>
              </ul>
             </div>
             <div class="section--itemcard_info_shop">
              [ahref]
              
              <span class="for-a11y">
               판매자평가정보
              </span>
              <ul class="list--store_info">
               <li class="item top_seller">
                <div class="section--advertisement ">
                 <button class="button--notice_about_advertisement" title="최우수판매자 안내 레이어 보기" type="button">
                  <span class="text">
                   최우수판매자
                  </span>
                 </button>
                 <div class="layer--information">
                  <strong class="text--information_title">
                   최우수판매자란?
                  </strong>
                  <p class="text--information_description">
                   옥션의 판매인증 평가기준을 모두 달성한 최상위 판매자
                  </p>
                  <button class="button--close_layer" type="button">
                   <span class="ir">
                    최우수판매자
                    안내 레이어 닫기
                   </span>
                  </button>
                 </div>
                </div>
               </li>
              </ul>
             </div>
             <button class="button--favorite ">
              <span class="icon--favorite">
               <span class="for-a11y">
                관심상품 등록하기
               </span>
              </span>
             </button>
            </div>
           </div>
          </div>
         </div>
         <div class="component component--item_card type--general">
          <h4 class="text--module_title">
           일반상품 아이템카드
          </h4>
          <div class="itemcard">
           <div class="section--itemcard">
            <div class="section--itemcard_img">
             [ahref]
             
            </div>
            <div class="section--itemcard_info">
             <div class="section--itemcard_info_major">
              <div class="area--itemcard_title">
               <span class="text--itemcard_title ellipsis">
                [ahref]
                
               </span>
              </div>
              <div class="area--itemcard_price">
               <span class="price_seller">
                <span class="for-a11y">
                 상품금액
                </span>
                <strong class="text--price_seller">
                 18,900
                </strong>
                <span class="text--unit">
                 원
                </span>
               </span>
              </div>
             </div>
             <div class="section--itemcard_info_add">
              <ul class="list--addinfo">
               <li class="item">
                <span class="text--addinfo">
                 무료배송
                </span>
               </li>
              </ul>
             </div>
             <div class="section--itemcard_info_score">
              <ul class="list--score">
               <li class="item awards">
                <span class="for-a11y">
                 만족도
                 98
                 %입니다.
                </span>
                <div class="seller_awards" title="만족도 98 % 입니다">
                 <span class="awards_points" style="width:98%">
                 </span>
                 <span class="bg_star">
                 </span>
                </div>
               </li>
               <li class="item reviewcnt">
                <span class="text--reviewcnt">
                 상품평
                 3,175
                </span>
                <span class="for-a11y">
                 건
                </span>
               </li>
               <li class="item buycnt">
                <span class="text--buycnt">
                 구매
                 9,021
                </span>
                <span class="for-a11y">
                 건
                </span>
               </li>
              </ul>
             </div>
             <div class="section--itemcard_info_shop">
              <a class="link--shop" href="/honamfruit" target="_blank" title="스토어로 이동">
               <span class="for-a11y">
                판매자
               </span>
               <span class="text">
                직거래농민장터
               </span>
              </a>
              <span class="for-a11y">
               판매자평가정보
              </span>
              <ul class="list--store_info">
               <li class="item">
                <span class="text--store_info">
                 상품평
                </span>
               </li>
               <li class="item">
                <span class="text--store_info">
                 고객응대우수
                </span>
               </li>
              </ul>
             </div>
             <button class="button--favorite ">
              <span class="icon--favorite">
               <span class="for-a11y">
                관심상품 등록하기
               </span>
              </span>
             </button>
            </div>
           </div>
          </div>
         </div>
         <div class="component component--item_card type--general">
          <h4 class="text--module_title">
           일반상품 아이템카드
          </h4>
          <div class="itemcard">
           <div class="section--itemcard">
            <div class="section--itemcard_img">
             [ahref]
             
            </div>
            <div class="section--itemcard_info">
             <div class="section--itemcard_info_major">
              <div class="area--itemcard_title">
               <span class="text--itemcard_title ellipsis">
                [linkx]
                
               </span>
              </div>
              <div class="area--itemcard_price">
               <span class="price_seller">
                <span class="for-a11y">
                 상품금액
                </span>
                <strong class="text--price_seller">
                 16,900
                </strong>
                <span class="text--unit">
                 원
                </span>
               </span>
              </div>
             </div>
             <div class="section--itemcard_info_add">
              <ul class="list--addinfo">
               <li class="item">
                <span class="text--addinfo">
                 무료배송
                </span>
               </li>
              </ul>
             </div>
             <div class="section--itemcard_info_score">
              <ul class="list--score">
               <li class="item awards">
                <span class="for-a11y">
                 <li>[keywordx][symbolx][keywordx][symbolx][bracketl9][keywordx][bracketr9][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx]</li><li>[link]</li>[keywordx][symbolx][keywordx][symbolx][bracketl10][keywordx][bracketr10][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx]<li>[keywordx][symbolx][keywordx][symbolx][bracketl11][keywordx][bracketr11][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx]</li><li>[link]</li>
                </span>
                <div class="seller_awards" title="만족도 96 % 입니다">
                 <span class="awards_points" style="width:96%">
                 </span>
                 <span class="bg_star">
                 </span>
                </div>
               </li>
               <li class="item reviewcnt">
                <span class="text--reviewcnt">
                 상품평
                 1,392
                </span>
                <span class="for-a11y">
                 건
                </span>
               </li>
               <li class="item buycnt">
                <span class="text--buycnt">
                 구매
                 3,132
                </span>
                <span class="for-a11y">
                 건
                </span>
               </li>
              </ul>
             </div>
             <div class="section--itemcard_info_shop">
              [ahref]
              
             </div>
             <button class="button--favorite ">
              <span class="icon--favorite">
               <span class="for-a11y">
                관심상품 등록하기
               </span>
              </span>
             </button>
             <button class="button--related_item" title="연관상품 8 개가 있습니다. ">
              <span class="text--related_item">
               <b class="text--title">
                연관상품
               </b>
               <b class="text--cnt">
                8
               </b>
              </span>
             </button>
            </div>
           </div>
          </div>
          <div class="popup--related_items ">
           <h2 class="section--title">
            <b>[mkey1][symbolx][pkey1][symbolx][keyword1][bracketl1][bracketr1][symbolx][bracketl2][siter1][bracketr2][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx]</b>
           </h2>
           <div class="section--body">
            <div class="section--related_items">
             <div class="section--slick_area">
              <div class="list--related_items">
               <div class="slick-slider slick-initialized">
                <div class="slick-list">
                 <div class="slick-track" style="width:0%;left:NaN%">
                 </div>
                </div>
               </div>
              </div>
             </div>
            </div>
           </div>
          </div>
         </div>
         <div class="component component--item_card type--general">
          <h4 class="text--module_title">
           일반상품 아이템카드
          </h4>
          <div class="itemcard">
           <div class="section--itemcard">
            <div class="section--itemcard_img">
             [ahref]
             
            </div>
            <div class="section--itemcard_info">
             <div class="section--itemcard_info_major">
              <div class="area--itemcard_title">
               <span class="text--itemcard_title ellipsis">
                [linkx]
                
               </span>
              </div>
              <div class="area--itemcard_price">
               <span class="price_seller">
                <span class="for-a11y">
                 상품금액
                </span>
                <strong class="text--price_seller">
                 9,900
                </strong>
                <span class="text--unit">
                 원
                </span>
               </span>
              </div>
             </div>
             <div class="section--itemcard_info_add">
              <ul class="list--addinfo">
               <li class="item">
                <span class="text--addinfo">
                 무료배송
                </span>
               </li>
              </ul>
             </div>
             <div class="section--itemcard_info_score">
              <ul class="list--score">
               <li class="item awards">
                <span class="for-a11y">
                 만족도
                 92
                 %입니다.
                </span>
                <div class="seller_awards" title="만족도 92 % 입니다">
                 <span class="awards_points" style="width:92%">
                 </span>
                 <span class="bg_star">
                 </span>
                </div>
               </li>
               <li class="item reviewcnt">
                <span class="text--reviewcnt">
                 상품평
                 4,760
                </span>
                <span class="for-a11y">
                 건
                </span>
               </li>
               <li class="item buycnt">
                <span class="text--buycnt">
                 구매
                 56,413
                </span>
                <span class="for-a11y">
                 건
                </span>
               </li>
              </ul>
             </div>
             <div class="section--itemcard_info_shop">
              [ahref]
              
              <span class="for-a11y">
               판매자평가정보
              </span>
              <ul class="list--store_info">
               <li class="item top_seller">
                <div class="section--advertisement ">
                 <button class="button--notice_about_advertisement" title="최우수판매자 안내 레이어 보기" type="button">
                  <span class="text">
                   최우수판매자
                  </span>
                 </button>
                 <div class="layer--information">
                  <strong class="text--information_title">
                   최우수판매자란?
                  </strong>
                  <p class="text--information_description">
                   옥션의 판매인증 평가기준을 모두 달성한 최상위 판매자
                  </p>
                  <button class="button--close_layer" type="button">
                   <span class="ir">
                    최우수판매자
                    안내 레이어 닫기
                   </span>
                  </button>
                 </div>
                </div>
               </li>
              </ul>
             </div>
             <button class="button--favorite ">
              <span class="icon--favorite">
               <span class="for-a11y">
                관심상품 등록하기
               </span>
              </span>
             </button>
            </div>
           </div>
          </div>
         </div>
         <div class="component component--item_card type--general">
          <h4 class="text--module_title">
           일반상품 아이템카드
          </h4>
          <div class="itemcard">
           <div class="section--itemcard">
            <div class="section--itemcard_img">
             [ahref]
             
            </div>
            <div class="section--itemcard_info">
             [ahref]
             
             <div class="section--itemcard_info_add">
              <ul class="list--addinfo">
               <li class="item">
                <span class="text--addinfo">
                 무료배송
                </span>
               </li>
              </ul>
             </div>
             <div class="section--itemcard_info_score">
              <ul class="list--score">
               <li class="item awards">
                <span class="for-a11y">
                 만족도
                 90
                 %입니다.
                </span>
                <div class="seller_awards" title="만족도 90 % 입니다">
                 <span class="awards_points" style="width:90%">
                 </span>
                 <span class="bg_star">
                 </span>
                </div>
               </li>
               <li class="item reviewcnt">
                <span class="text--reviewcnt">
                 상품평
                 160
                </span>
                <span class="for-a11y">
                 건
                </span>
               </li>
               <li class="item buycnt">
                <span class="text--buycnt">
                 구매
                 487
                </span>
                <span class="for-a11y">
                 건
                </span>
               </li>
              </ul>
             </div>
             <div class="section--itemcard_info_shop">
              <a class="link--shop" href="/fooddaily" target="_blank" title="스토어로 이동">
               <span class="for-a11y">
                판매자
               </span>
               <span class="text">
                참이맛이야.
               </span>
              </a>
              <span class="for-a11y">
               판매자평가정보
              </span>
              <ul class="list--store_info">
               <li class="item top_seller">
                <div class="section--advertisement ">
                 <button class="button--notice_about_advertisement" title="최우수판매자 안내 레이어 보기" type="button">
                  <span class="text">
                   최우수판매자
                  </span>
                 </button>
                 <div class="layer--information">
                  <strong class="text--information_title">
                   최우수판매자란?
                  </strong>
                  <p class="text--information_description">
                   옥션의 판매인증 평가기준을 모두 달성한 최상위 판매자
                  </p>
                  <button class="button--close_layer" type="button">
                   <span class="ir">
                    최우수판매자
                    안내 레이어 닫기
                   </span>
                  </button>
                 </div>
                </div>
               </li>
              </ul>
             </div>
             <button class="button--favorite ">
              <span class="icon--favorite">
               <span class="for-a11y">
                관심상품 등록하기
               </span>
              </span>
             </button>
             <button class="button--related_item" title="연관상품 5 개가 있습니다. ">
              <span class="text--related_item">
               <b class="text--title">
                연관상품
               </b>
               <b class="text--cnt">
                5
               </b>
              </span>
             </button>
            </div>
           </div>
          </div>
          <div class="popup--related_items ">
           <h2 class="section--title">
            <b>[mkey1][symbolx][pkey1][symbolx][keyword1][bracketl1][bracketr1][symbolx][bracketl2][siter1][bracketr2][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx]</b>
           </h2>
           <div class="section--body">
            <div class="section--related_items">
             <div class="section--slick_area">
              <div class="list--related_items">
               <div class="slick-slider slick-initialized">
                <div class="slick-list">
                 <div class="slick-track" style="width:0%;left:NaN%">
                 </div>
                </div>
               </div>
              </div>
             </div>
            </div>
           </div>
          </div>
         </div>
         <div class="component component--item_card type--general">
          <h4 class="text--module_title">
           일반상품 아이템카드
          </h4>
          <div class="itemcard">
           <div class="section--itemcard">
            <div class="section--itemcard_img">
             [ahref]
             
            </div>
            <div class="section--itemcard_info">
             <div class="section--itemcard_info_major">
              <div class="area--itemcard_title">
               <span class="text--itemcard_title ellipsis">
                [linkx]
                
               </span>
              </div>
              <div class="area--itemcard_price">
               <span class="discount" title="할인률">
                <strong class="text--discount">
                 10
                </strong>
                <span class="text--unit">
                 %
                </span>
                <span class="for-a11y">
                 할인
                </span>
               </span>
               <span class="price_seller">
                <span class="for-a11y">
                 할인적용금액
                </span>
                <strong class="text--price_seller">
                 18,000
                </strong>
                <span class="text--unit">
                 원
                </span>
               </span>
               <span class="price_original">
                <span class="for-a11y">
                 상품금액
                </span>
                <strong class="text--price_original">
                 20,000
                </strong>
                <span class="text--unit">
                 원
                </span>
               </span>
              </div>
             </div>
             <div class="section--itemcard_info_add">
              <ul class="list--addinfo">
               <li class="item">
                <span class="text--addinfo">
                 무료배송
                </span>
               </li>
              </ul>
             </div>
             <div class="section--itemcard_info_score">
              <ul class="list--score">
               <li class="item awards">
                <span class="for-a11y">
                 만족도
                 98
                 %입니다.
                </span>
                <div class="seller_awards" title="만족도 98 % 입니다">
                 <span class="awards_points" style="width:98%">
                 </span>
                 <span class="bg_star">
                 </span>
                </div>
               </li>
               <li class="item reviewcnt">
                <span class="text--reviewcnt">
                 상품평
                 164
                </span>
                <span class="for-a11y">
                 건
                </span>
               </li>
               <li class="item buycnt">
                <span class="text--buycnt">
                 구매
                 547
                </span>
                <span class="for-a11y">
                 건
                </span>
               </li>
              </ul>
             </div>
             <div class="section--itemcard_info_shop">
              [linkx]
              
             </div>
             <button class="button--favorite ">
              <span class="icon--favorite">
               <span class="for-a11y">
                관심상품 등록하기
               </span>
              </span>
             </button>
            </div>
           </div>
          </div>
         </div>
         <div class="component component--item_card type--general">
          <h4 class="text--module_title">
           일반상품 아이템카드
          </h4>
          <div class="itemcard">
           <div class="section--itemcard">
            <div class="section--itemcard_img">
             [linkx]
             
            </div>
            <div class="section--itemcard_info">
             <div class="section--itemcard_info_major">
              <div class="area--itemcard_title">
               <span class="text--itemcard_title ellipsis">
                [linkx]
                
               </span>
              </div>
              <div class="area--itemcard_price">
               <span class="price_seller">
                <span class="for-a11y">
                 상품금액
                </span>
                <strong class="text--price_seller">
                 10,900
                </strong>
                <span class="text--unit">
                 원
                </span>
               </span>
              </div>
             </div>
             <div class="section--itemcard_info_add">
              <ul class="list--addinfo">
               <li class="item">
                <span class="text--addinfo">
                 무료배송
                </span>
               </li>
              </ul>
             </div>
             <div class="section--itemcard_info_score">
              <ul class="list--score">
               <li class="item awards">
                <span class="for-a11y">
                 만족도
                 92
                 %입니다.
                </span>
                <div class="seller_awards" title="만족도 92 % 입니다">
                 <span class="awards_points" style="width:92%">
                 </span>
                 <span class="bg_star">
                 </span>
                </div>
               </li>
               <li class="item reviewcnt">
                <span class="text--reviewcnt">
                 상품평
                 3,029
                </span>
                <span class="for-a11y">
                 건
                </span>
               </li>
               <li class="item buycnt">
                <span class="text--buycnt">
                 구매
                 10,284
                </span>
                <span class="for-a11y">
                 건
                </span>
               </li>
              </ul>
             </div>
             <div class="section--itemcard_info_shop">
              [linkx]
              
              <span class="for-a11y">
               판매자평가정보
              </span>
              <ul class="list--store_info">
               <li class="item top_seller">
                <div class="section--advertisement ">
                 <button class="button--notice_about_advertisement" title="최우수판매자 안내 레이어 보기" type="button">
                  <span class="text">
                   최우수판매자
                  </span>
                 </button>
                 <div class="layer--information">
                  <strong class="text--information_title">
                   최우수판매자란?
                  </strong>
                  <p class="text--information_description">
                   옥션의 판매인증 평가기준을 모두 달성한 최상위 판매자
                  </p>
                  <button class="button--close_layer" type="button">
                   <span class="ir">
                    최우수판매자
                    안내 레이어 닫기
                   </span>
                  </button>
                 </div>
                </div>
               </li>
              </ul>
             </div>
             <button class="button--favorite ">
              <span class="icon--favorite">
               <span class="for-a11y">
                관심상품 등록하기
               </span>
              </span>
             </button>
             <button class="button--related_item" title="연관상품 4 개가 있습니다. ">
              <span class="text--related_item">
               <b class="text--title">
                연관상품
               </b>
               <b class="text--cnt">
                4
               </b>
              </span>
             </button>
            </div>
           </div>
          </div>
          <div class="popup--related_items ">
           <h2 class="section--title">
            <b>[mkey1][symbolx][pkey1][symbolx][keyword1][bracketl1][bracketr1][symbolx][bracketl2][siter1][bracketr2][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx]</b>
           </h2>
           <div class="section--body">
            <div class="section--related_items">
             <div class="section--slick_area">
              <div class="list--related_items">
               <div class="slick-slider slick-initialized">
                <div class="slick-list">
                 <div class="slick-track" style="width:0%;left:NaN%">
                 </div>
                </div>
               </div>
              </div>
             </div>
            </div>
           </div>
          </div>
         </div>
         <div class="component component--item_card type--general">
          <h4 class="text--module_title">
           일반상품 아이템카드
          </h4>
          <div class="itemcard">
           <div class="section--itemcard">
            <div class="section--itemcard_img">
             [linkx]
             
            </div>
            <div class="section--itemcard_info">
             <div class="section--itemcard_info_major">
              <div class="area--itemcard_title">
               <span class="text--itemcard_title ellipsis">
                [ahref]
                
               </span>
              </div>
              <div class="area--itemcard_price">
               <span class="price_seller">
                <span class="for-a11y">
                 상품금액
                </span>
                <strong class="text--price_seller">
                 11,900
                </strong>
                <span class="text--unit">
                 원
                </span>
               </span>
              </div>
             </div>
             <div class="section--itemcard_info_add">
              <ul class="list--addinfo">
               <li class="item">
                <span class="text--addinfo">
                 무료배송
                </span>
               </li>
              </ul>
             </div>
             <div class="section--itemcard_info_score">
              <ul class="list--score">
               <li class="item awards">
                <span class="for-a11y">
                 만족도
                 96
                 %입니다.
                </span>
                <div class="seller_awards" title="만족도 96 % 입니다">
                 <span class="awards_points" style="width:96%">
                 </span>
                 <span class="bg_star">
                 </span>
                </div>
               </li>
               <li class="item reviewcnt">
                <span class="text--reviewcnt">
                 상품평
                 1,185
                </span>
                <span class="for-a11y">
                 건
                </span>
               </li>
               <li class="item buycnt">
                <span class="text--buycnt">
                 구매
                 2,252
                </span>
                <span class="for-a11y">
                 건
                </span>
               </li>
              </ul>
             </div>
             <div class="section--itemcard_info_shop">
              [linkx]
              
              <span class="for-a11y">
               판매자평가정보
              </span>
              <ul class="list--store_info">
               <li class="item top_seller">
                <div class="section--advertisement ">
                 <button class="button--notice_about_advertisement" title="최우수판매자 안내 레이어 보기" type="button">
                  <span class="text">
                   최우수판매자
                  </span>
                 </button>
                 <div class="layer--information">
                  <strong class="text--information_title">
                   최우수판매자란?
                  </strong>
                  <p class="text--information_description">
                   옥션의 판매인증 평가기준을 모두 달성한 최상위 판매자
                  </p>
                  <button class="button--close_layer" type="button">
                   <span class="ir">
                    최우수판매자
                    안내 레이어 닫기
                   </span>
                  </button>
                 </div>
                </div>
               </li>
              </ul>
             </div>
             <button class="button--favorite ">
              <span class="icon--favorite">
               <span class="for-a11y">
                관심상품 등록하기
               </span>
              </span>
             </button>
             <button class="button--related_item" title="연관상품 12 개가 있습니다. ">
              <span class="text--related_item">
               <b class="text--title">
                연관상품
               </b>
               <b class="text--cnt">
                12
               </b>
              </span>
             </button>
            </div>
           </div>
          </div>
          <div class="popup--related_items ">
           <h2 class="section--title">
            [mkey1][symbolx][pkey1][symbolx][keyword1][bracketl1][bracketr1][symbolx][bracketl2][siter1][bracketr2][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx]
           </h2>
           <div class="section--body">
            <div class="section--related_items">
             <div class="section--slick_area">
              <div class="list--related_items">
               <div class="slick-slider slick-initialized">
                <div class="slick-list">
                 <div class="slick-track" style="width:0%;left:NaN%">
                 </div>
                </div>
               </div>
              </div>
             </div>
            </div>
           </div>
          </div>
         </div>
         <div class="component component--item_card type--general">
          <h4 class="text--module_title">
           일반상품 아이템카드
          </h4>
          <div class="itemcard">
           <div class="section--itemcard">
            <div class="section--itemcard_img">
             [ahref]
             
            </div>
            <div class="section--itemcard_info">
             <div class="section--itemcard_info_major">
              <div class="area--itemcard_title">
               <span class="text--itemcard_title ellipsis">
                [linkx]
                
               </span>
              </div>
              <div class="area--itemcard_price">
               <span class="discount" title="할인률">
                <strong class="text--discount">
                </strong>
                <span class="text--unit">
                </span>
                <span class="for-a11y">
                 할인
                </span>
               </span>
               <span class="price_seller">
                <span class="for-a11y">
                 할인적용금액
                </span>
                <strong class="text--price_seller">
                 7,860
                </strong>
                <span class="text--unit">
                 원
                </span>
               </span>
               <span class="price_original">
                <span class="for-a11y">
                 상품금액
                </span>
                <strong class="text--price_original">
                 7,900
                </strong>
                <span class="text--unit">
                 원
                </span>
               </span>
              </div>
             </div>
             <div class="section--itemcard_info_add">
              <ul class="list--addinfo">
               <li class="item">
                <span class="text--addinfo">
                 배송비 2,500원
                </span>
               </li>
              </ul>
             </div>
             <div class="section--itemcard_info_score">
              <ul class="list--score">
               <li class="item buycnt">
                <span class="text--buycnt">
                 구매
                 2
                </span>
                <span class="for-a11y">
                 건
                </span>
               </li>
              </ul>
             </div>
             <div class="section--itemcard_info_shop">
              [ahref]
              
             </div>
             <button class="button--favorite ">
              <span class="icon--favorite">
               <span class="for-a11y">
                관심상품 등록하기
               </span>
              </span>
             </button>
            </div>
           </div>
          </div>
         </div>
         <div class="component component--item_card type--general">
          <h4 class="text--module_title">
           일반상품 아이템카드
          </h4>
          <div class="itemcard">
           <div class="section--itemcard">
            <div class="section--itemcard_img">
             [linkx]
             
            </div>
            <div class="section--itemcard_info">
             <div class="section--itemcard_info_major">
              <div class="area--itemcard_title">
               <span class="text--itemcard_title ellipsis">
                [linkx]
                
               </span>
              </div>
              <div class="area--itemcard_price">
               <span class="price_seller">
                <span class="for-a11y">
                 상품금액
                </span>
                <strong class="text--price_seller">
                 8,900
                </strong>
                <span class="text--unit">
                 원
                </span>
               </span>
              </div>
             </div>
             <div class="section--itemcard_info_add">
              <ul class="list--addinfo">
               <li class="item">
                <span class="text--addinfo">
                 무료배송
                </span>
               </li>
              </ul>
             </div>
             <div class="section--itemcard_info_score">
              <ul class="list--score">
               <li class="item reviewcnt">
                <span class="text--reviewcnt">
                 상품평
                 4
                </span>
                <span class="for-a11y">
                 건
                </span>
               </li>
               <li class="item buycnt">
                <span class="text--buycnt">
                 구매
                 24
                </span>
                <span class="for-a11y">
                 건
                </span>
               </li>
              </ul>
             </div>
             <div class="section--itemcard_info_shop">
              [linkx]
              
              <span class="for-a11y">
               판매자평가정보
              </span>
              <ul class="list--store_info">
               <li class="item">
                <span class="text--store_info">
                 배송
                </span>
               </li>
               <li class="item">
                <span class="text--store_info">
                 고객응대우수
                </span>
               </li>
              </ul>
             </div>
             <button class="button--favorite ">
              <span class="icon--favorite">
               <span class="for-a11y">
                관심상품 등록하기
               </span>
              </span>
             </button>
            </div>
           </div>
          </div>
         </div>
         <div class="component component--item_card type--general">
          <h4 class="text--module_title">
           일반상품 아이템카드
          </h4>
          <div class="itemcard">
           <div class="section--itemcard">
            <div class="section--itemcard_img">
             <a class="link--itemcard image--loading" href="/DetailView.aspx?itemno=B523096495" target="_blank">
              <div class="lazyload-placeholder" style="height:100%">
              </div>
             </a>
            </div>
            <div class="section--itemcard_info">
             <div class="section--itemcard_info_major">
              <div class="area--itemcard_title">
               <span class="text--itemcard_title ellipsis">
                <a class="link--itemcard" href="/DetailView.aspx?itemno=B523096495" target="_blank">
                 <span class="for-a11y">
                  브랜드명
                 </span>
                 <span class="text--brand">
                 </span>
                 <span class="for-a11y">
                  상품명
                 </span>
                 <span class="text--title">
                  국산 아이스 꿀고구마 군고구마 전자렌지1분 OK 1kg S
                 </span>
                </a>
               </span>
              </div>
              <div class="area--itemcard_price">
               <span class="price_seller">
                <span class="for-a11y">
                 상품금액
                </span>
                <strong class="text--price_seller">
                 13,800
                </strong>
                <span class="text--unit">
                 원
                </span>
               </span>
              </div>
             </div>
             <div class="section--itemcard_info_add">
              <ul class="list--addinfo">
               <li class="item">
                <span class="text--addinfo">
                 배송비 3,000원
                </span>
               </li>
              </ul>
             </div>
             <div class="section--itemcard_info_score">
              <ul class="list--score">
               <li class="item awards">
                <span class="for-a11y">
                 만족도
                 98
                 %입니다.
                </span>
                <div class="seller_awards" title="만족도 98 % 입니다">
                 <span class="awards_points" style="width:98%">
                 </span>
                 <span class="bg_star">
                 </span>
                </div>
               </li>
               <li class="item reviewcnt">
                <span class="text--reviewcnt">
                 상품평
                 48
                </span>
                <span class="for-a11y">
                 건
                </span>
               </li>
               <li class="item buycnt">
                <span class="text--buycnt">
                 구매
                 124
                </span>
                <span class="for-a11y">
                 건
                </span>
               </li>
              </ul>
             </div>
             <div class="section--itemcard_info_shop">
              [linkx]
              
              <span class="for-a11y">
               판매자평가정보
              </span>
              <ul class="list--store_info">
               <li class="item top_seller">
                <div class="section--advertisement ">
                 <button class="button--notice_about_advertisement" title="최우수판매자 안내 레이어 보기" type="button">
                  <span class="text">
                   최우수판매자
                  </span>
                 </button>
                 <div class="layer--information">
                  <strong class="text--information_title">
                   최우수판매자란?
                  </strong>
                  <p class="text--information_description">
                   옥션의 판매인증 평가기준을 모두 달성한 최상위 판매자
                  </p>
                  <button class="button--close_layer" type="button">
                   <span class="ir">
                    최우수판매자
                    안내 레이어 닫기
                   </span>
                  </button>
                 </div>
                </div>
               </li>
              </ul>
             </div>
             <button class="button--favorite ">
              <span class="icon--favorite">
               <span class="for-a11y">
                관심상품 등록하기
               </span>
              </span>
             </button>
             <button class="button--related_item" title="연관상품 4 개가 있습니다. ">
              <span class="text--related_item">
               <b class="text--title">
                연관상품
               </b>
               <b class="text--cnt">
                4
               </b>
              </span>
             </button>
            </div>
           </div>
          </div>
          <div class="popup--related_items ">
           <h2 class="section--title">
            [mkey1][symbolx][pkey1][symbolx][keyword1][bracketl1][bracketr1][symbolx][bracketl2][siter1][bracketr2][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx]
           </h2>
           <div class="section--body">
            <div class="section--related_items">
             <div class="section--slick_area">
              <div class="list--related_items">
               <div class="slick-slider slick-initialized">
                <div class="slick-list">
                 <div class="slick-track" style="width:0%;left:NaN%">
                 </div>
                </div>
               </div>
              </div>
             </div>
            </div>
           </div>
          </div>
         </div>
         <div class="component component--item_card type--general">
          <h4 class="text--module_title">
           일반상품 아이템카드
          </h4>
          <div class="itemcard">
           <div class="section--itemcard">
            <div class="section--itemcard_img">
             [ahref]
             
            </div>
            <div class="section--itemcard_info">
             <div class="section--itemcard_info_major">
              <div class="area--itemcard_title">
               <span class="text--itemcard_title ellipsis">
                [ahref]
                
               </span>
              </div>
              <div class="area--itemcard_price">
               <span class="price_seller">
                <span class="for-a11y">
                 상품금액
                </span>
                <strong class="text--price_seller">
                 15,900
                </strong>
                <span class="text--unit">
                 원
                </span>
               </span>
              </div>
             </div>
             <div class="section--itemcard_info_add">
              <ul class="list--addinfo">
               <li class="item">
                <span class="text--addinfo">
                 무료배송
                </span>
               </li>
              </ul>
             </div>
             <div class="section--itemcard_info_score">
              <ul class="list--score">
               <li class="item awards">
                <span class="for-a11y">
                 만족도
                 92
                 %입니다.
                </span>
                <div class="seller_awards" title="만족도 92 % 입니다">
                 <span class="awards_points" style="width:92%">
                 </span>
                 <span class="bg_star">
                 </span>
                </div>
               </li>
               <li class="item reviewcnt">
                <span class="text--reviewcnt">
                 상품평
                 3,986
                </span>
                <span class="for-a11y">
                 건
                </span>
               </li>
               <li class="item buycnt">
                <span class="text--buycnt">
                 구매
                 23,052
                </span>
                <span class="for-a11y">
                 건
                </span>
               </li>
              </ul>
             </div>
             <div class="section--itemcard_info_shop">
              [linkx]
              
             </div>
             <button class="button--favorite ">
              <span class="icon--favorite">
               <span class="for-a11y">
                관심상품 등록하기
               </span>
              </span>
             </button>
            </div>
           </div>
          </div>
         </div>
        </div>
        <div class="section--module_wrap" module-design-id="17">
         <div class="component component--item_card type--general">
          <h4 class="text--module_title">
           일반상품 아이템카드
          </h4>
          <div class="itemcard">
           <div class="section--itemcard">
            <div class="section--itemcard_img">
             [ahref]
             
            </div>
            <div class="section--itemcard_info">
             <div class="section--itemcard_info_major">
              <div class="area--itemcard_title">
               <span class="text--itemcard_title ellipsis">
                [linkx]
                
               </span>
              </div>
              <div class="area--itemcard_price">
               <span class="price_seller">
                <span class="for-a11y">
                 상품금액
                </span>
                <strong class="text--price_seller">
                 4,900
                </strong>
                <span class="text--unit">
                 원
                </span>
               </span>
              </div>
             </div>
             <div class="section--itemcard_info_add">
              <ul class="list--addinfo">
               <li class="item">
                <span class="text--addinfo">
                 배송비 2,500원
                </span>
               </li>
              </ul>
             </div>
             <div class="section--itemcard_info_score">
              <ul class="list--score">
               <li class="item awards">
                <span class="for-a11y">
                 만족도
                 100
                 %입니다.
                </span>
                <div class="seller_awards" title="만족도 100 % 입니다">
                 <span class="awards_points" style="width:100%">
                 </span>
                 <span class="bg_star">
                 </span>
                </div>
               </li>
               <li class="item reviewcnt">
                <span class="text--reviewcnt">
                 상품평
                 169
                </span>
                <span class="for-a11y">
                 건
                </span>
               </li>
               <li class="item buycnt">
                <span class="text--buycnt">
                 구매
                 2,784
                </span>
                <span class="for-a11y">
                 건
                </span>
               </li>
              </ul>
             </div>
             <div class="section--itemcard_info_shop">
              [ahref]
              
              <span class="for-a11y">
               판매자평가정보
              </span>
              <ul class="list--store_info">
               <li class="item top_seller">
                <div class="section--advertisement ">
                 <button class="button--notice_about_advertisement" title="최우수판매자 안내 레이어 보기" type="button">
                  <span class="text">
                   최우수판매자
                  </span>
                 </button>
                 <div class="layer--information">
                  <strong class="text--information_title">
                   최우수판매자란?
                  </strong>
                  <p class="text--information_description">
                   옥션의 판매인증 평가기준을 모두 달성한 최상위 판매자
                  </p>
                  <button class="button--close_layer" type="button">
                   <span class="ir">
                    최우수판매자
                    안내 레이어 닫기
                   </span>
                  </button>
                 </div>
                </div>
               </li>
              </ul>
             </div>
             <button class="button--favorite ">
              <span class="icon--favorite">
               <span class="for-a11y">
                관심상품 등록하기
               </span>
              </span>
             </button>
            </div>
           </div>
          </div>
         </div>
         <div class="component component--item_card type--general">
          <h4 class="text--module_title">
           일반상품 아이템카드
          </h4>
          <div class="itemcard">
           <div class="section--itemcard">
            <div class="section--itemcard_img">
             [linkx]
             
            </div>
            <div class="section--itemcard_info">
             <div class="section--itemcard_info_major">
              <div class="area--itemcard_title">
               <span class="text--itemcard_title ellipsis">
                [linkx]
                
               </span>
              </div>
              <div class="area--itemcard_price">
               <span class="discount" title="할인률">
                <strong class="text--discount">
                 15
                </strong>
                <span class="text--unit">
                 %
                </span>
                <span class="for-a11y">
                 할인
                </span>
               </span>
               <span class="price_seller">
                <span class="for-a11y">
                 할인적용금액
                </span>
                <strong class="text--price_seller">
                 10,900
                </strong>
                <span class="text--unit">
                 원
                </span>
               </span>
               <span class="price_original">
                <span class="for-a11y">
                 상품금액
                </span>
                <strong class="text--price_original">
                 12,900
                </strong>
                <span class="text--unit">
                 원
                </span>
               </span>
              </div>
             </div>
             <div class="section--itemcard_info_add">
              <ul class="list--addinfo">
               <li class="item">
                <span class="text--addinfo">
                 무료배송
                </span>
               </li>
              </ul>
             </div>
             <div class="section--itemcard_info_score">
              <ul class="list--score">
               <li class="item awards">
                <span class="for-a11y">
                 만족도
                 100
                 %입니다.
                </span>
                <div class="seller_awards" title="만족도 100 % 입니다">
                 <span class="awards_points" style="width:100%">
                 </span>
                 <span class="bg_star">
                 </span>
                </div>
               </li>
               <li class="item reviewcnt">
                <span class="text--reviewcnt">
                 상품평
                 7
                </span>
                <span class="for-a11y">
                 건
                </span>
               </li>
               <li class="item buycnt">
                <span class="text--buycnt">
                 구매
                 24
                </span>
                <span class="for-a11y">
                 건
                </span>
               </li>
              </ul>
             </div>
             <div class="section--itemcard_info_shop">
              [ahref]
              
              <span class="for-a11y">
               판매자평가정보
              </span>
              <ul class="list--store_info">
               <li class="item top_seller">
                <div class="section--advertisement ">
                 <button class="button--notice_about_advertisement" title="최우수판매자 안내 레이어 보기" type="button">
                  <span class="text">
                   최우수판매자
                  </span>
                 </button>
                 <div class="layer--information">
                  <strong class="text--information_title">
                   최우수판매자란?
                  </strong>
                  <p class="text--information_description">
                   옥션의 판매인증 평가기준을 모두 달성한 최상위 판매자
                  </p>
                  <button class="button--close_layer" type="button">
                   <span class="ir">
                    최우수판매자
                    안내 레이어 닫기
                   </span>
                  </button>
                 </div>
                </div>
               </li>
              </ul>
             </div>
             <button class="button--favorite ">
              <span class="icon--favorite">
               <span class="for-a11y">
                관심상품 등록하기
               </span>
              </span>
             </button>
             <button class="button--related_item" title="연관상품 9 개가 있습니다. ">
              <span class="text--related_item">
               <b class="text--title">
                연관상품
               </b>
               <b class="text--cnt">
                9
               </b>
              </span>
             </button>
            </div>
           </div>
          </div>
          <div class="popup--related_items ">
           <h2 class="section--title">
            [mkey1][symbolx][pkey1][symbolx][keyword1][bracketl1][bracketr1][symbolx][bracketl2][siter1][bracketr2][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx]
           </h2>
           <div class="section--body">
            <div class="section--related_items">
             <div class="section--slick_area">
              <div class="list--related_items">
               <div class="slick-slider slick-initialized">
                <div class="slick-list">
                 <div class="slick-track" style="width:0%;left:NaN%">
                 </div>
                </div>
               </div>
              </div>
             </div>
            </div>
           </div>
          </div>
         </div>
         <div class="component component--item_card type--general">
          <h4 class="text--module_title">
           일반상품 아이템카드
          </h4>
          <div class="itemcard">
           <div class="section--itemcard">
            <div class="section--itemcard_img">
             <a class="link--itemcard image--loading" href="/DetailView.aspx?itemno=B215333364" target="_blank">
              <div class="lazyload-placeholder" style="height:100%">
              </div>
             </a>
            </div>
            <div class="section--itemcard_info">
             <div class="section--itemcard_info_major">
              <div class="area--itemcard_title">
               <span class="text--itemcard_title ellipsis">
                <a class="link--itemcard" href="/DetailView.aspx?itemno=B215333364" target="_blank">
                 <span class="for-a11y">
                  브랜드명
                 </span>
                 <span class="text--brand">
                 </span>
                 <span class="for-a11y">
                  상품명
                 </span>
                 <span class="text--title">
                  국산 아이스 꿀고구마 군고구마 전자렌지1분 OK 1kg B
                 </span>
                </a>
               </span>
              </div>
              <div class="area--itemcard_price">
               <span class="price_seller">
                <span class="for-a11y">
                 상품금액
                </span>
                <strong class="text--price_seller">
                 12,800
                </strong>
                <span class="text--unit">
                 원
                </span>
               </span>
              </div>
             </div>
             <div class="section--itemcard_info_add">
              <ul class="list--addinfo">
               <li class="item">
                <span class="text--addinfo">
                 배송비 3,000원
                </span>
               </li>
              </ul>
             </div>
             <div class="section--itemcard_info_score">
              <ul class="list--score">
               <li class="item awards">
                <span class="for-a11y">
                 만족도
                 98
                 %입니다.
                </span>
                <div class="seller_awards" title="만족도 98 % 입니다">
                 <span class="awards_points" style="width:98%">
                 </span>
                 <span class="bg_star">
                 </span>
                </div>
               </li>
               <li class="item reviewcnt">
                <span class="text--reviewcnt">
                 상품평
                 290
                </span>
                <span class="for-a11y">
                 건
                </span>
               </li>
               <li class="item buycnt">
                <span class="text--buycnt">
                 구매
                 1,409
                </span>
                <span class="for-a11y">
                 건
                </span>
               </li>
              </ul>
             </div>
             <div class="section--itemcard_info_shop">
              [ahref]
              
              <span class="for-a11y">
               판매자평가정보
              </span>
              <ul class="list--store_info">
               <li class="item top_seller">
                <div class="section--advertisement ">
                 <button class="button--notice_about_advertisement" title="최우수판매자 안내 레이어 보기" type="button">
                  <span class="text">
                   최우수판매자
                  </span>
                 </button>
                 <div class="layer--information">
                  <strong class="text--information_title">
                   최우수판매자란?
                  </strong>
                  <p class="text--information_description">
                   옥션의 판매인증 평가기준을 모두 달성한 최상위 판매자
                  </p>
                  <button class="button--close_layer" type="button">
                   <span class="ir">
                    최우수판매자
                    안내 레이어 닫기
                   </span>
                  </button>
                 </div>
                </div>
               </li>
              </ul>
             </div>
             <button class="button--favorite ">
              <span class="icon--favorite">
               <span class="for-a11y">
                관심상품 등록하기
               </span>
              </span>
             </button>
             <button class="button--related_item" title="연관상품 4 개가 있습니다. ">
              <span class="text--related_item">
               <b class="text--title">
                연관상품
               </b>
               <b class="text--cnt">
                4
               </b>
              </span>
             </button>
            </div>
           </div>
          </div>
          <div class="popup--related_items ">
           <h2 class="section--title">
            <b>[mkey1][symbolx][pkey1][symbolx][keyword1][bracketl1][bracketr1][symbolx][bracketl2][siter1][bracketr2][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx]</b>
           </h2>
           <div class="section--body">
            <div class="section--related_items">
             <div class="section--slick_area">
              <div class="list--related_items">
               <div class="slick-slider slick-initialized">
                <div class="slick-list">
                 <div class="slick-track" style="width:0%;left:NaN%">
                 </div>
                </div>
               </div>
              </div>
             </div>
            </div>
           </div>
          </div>
         </div>
         <div class="component component--item_card type--general">
          <h4 class="text--module_title">
           일반상품 아이템카드
          </h4>
          <div class="itemcard">
           <div class="section--itemcard">
            <div class="section--itemcard_img">
             [linkx]
             
            </div>
            <div class="section--itemcard_info">
             <div class="section--itemcard_info_major">
              <div class="area--itemcard_title">
               <span class="text--itemcard_title ellipsis">
                [ahref]
                
               </span>
              </div>
              <div class="area--itemcard_price">
               <span class="price_seller">
                <span class="for-a11y">
                 상품금액
                </span>
                <strong class="text--price_seller">
                 25,900
                </strong>
                <span class="text--unit">
                 원
                </span>
               </span>
              </div>
             </div>
             <div class="section--itemcard_info_add">
              <ul class="list--addinfo">
               <li class="item">
                <span class="text--addinfo">
                 무료배송
                </span>
               </li>
              </ul>
             </div>
             <div class="section--itemcard_info_score">
              <ul class="list--score">
               <li class="item awards">
                <span class="for-a11y">
                 만족도
                 94
                 %입니다.
                </span>
                <div class="seller_awards" title="만족도 94 % 입니다">
                 <span class="awards_points" style="width:94%">
                 </span>
                 <span class="bg_star">
                 </span>
                </div>
               </li>
               <li class="item reviewcnt">
                <span class="text--reviewcnt">
                 상품평
                 2,816
                </span>
                <span class="for-a11y">
                 건
                </span>
               </li>
               <li class="item buycnt">
                <span class="text--buycnt">
                 구매
                 48,595
                </span>
                <span class="for-a11y">
                 건
                </span>
               </li>
              </ul>
             </div>
             <div class="section--itemcard_info_shop">
              [ahref]
              
              <span class="for-a11y">
               판매자평가정보
              </span>
              <ul class="list--store_info">
               <li class="item top_seller">
                <div class="section--advertisement ">
                 <button class="button--notice_about_advertisement" title="최우수판매자 안내 레이어 보기" type="button">
                  <span class="text">
                   최우수판매자
                  </span>
                 </button>
                 <div class="layer--information">
                  <strong class="text--information_title">
                   최우수판매자란?
                  </strong>
                  <p class="text--information_description">
                   옥션의 판매인증 평가기준을 모두 달성한 최상위 판매자
                  </p>
                  <button class="button--close_layer" type="button">
                   <span class="ir">
                    최우수판매자
                    안내 레이어 닫기
                   </span>
                  </button>
                 </div>
                </div>
               </li>
              </ul>
             </div>
             <button class="button--favorite ">
              <span class="icon--favorite">
               <span class="for-a11y">
                관심상품 등록하기
               </span>
              </span>
             </button>
            </div>
           </div>
          </div>
         </div>
         <div class="component component--item_card type--general">
          <h4 class="text--module_title">
           일반상품 아이템카드
          </h4>
          <div class="itemcard">
           <div class="section--itemcard">
            <div class="section--itemcard_img">
             [linkx]
             
            </div>
            <div class="section--itemcard_info">
             <div class="section--itemcard_info_major">
              <div class="area--itemcard_title">
               <span class="text--itemcard_title ellipsis">
                <a class="link--itemcard" href="/DetailView.aspx?itemno=B382582986" target="_blank">
                 <span class="for-a11y">
                  브랜드명
                 </span>
                 <span class="text--brand">
                 </span>
                 <span class="for-a11y">
                  상품명
                 </span>
                 <span class="text--title">
                  조은해남 꿀고구마 호박고구마 5kg/10kg
                 </span>
                </a>
               </span>
              </div>
              <div class="area--itemcard_price">
               <span class="price_seller">
                <span class="for-a11y">
                 상품금액
                </span>
                <strong class="text--price_seller">
                 19,900
                </strong>
                <span class="text--unit">
                 원
                </span>
               </span>
              </div>
             </div>
             <div class="section--itemcard_info_add">
              <ul class="list--addinfo">
               <li class="item">
                <span class="text--addinfo">
                 무료배송
                </span>
               </li>
              </ul>
             </div>
             <div class="section--itemcard_info_score">
              <ul class="list--score">
               <li class="item awards">
                <span class="for-a11y">
                 만족도
                 92
                 %입니다.
                </span>
                <div class="seller_awards" title="만족도 92 % 입니다">
                 <span class="awards_points" style="width:92%">
                 </span>
                 <span class="bg_star">
                 </span>
                </div>
               </li>
               <li class="item reviewcnt">
                <span class="text--reviewcnt">
                 상품평
                 160
                </span>
                <span class="for-a11y">
                 건
                </span>
               </li>
               <li class="item buycnt">
                <span class="text--buycnt">
                 구매
                 399
                </span>
                <span class="for-a11y">
                 건
                </span>
               </li>
              </ul>
             </div>
             <div class="section--itemcard_info_shop">
              [ahref]
              
              <span class="for-a11y">
               판매자평가정보
              </span>
              <ul class="list--store_info">
               <li class="item top_seller">
                <div class="section--advertisement ">
                 <button class="button--notice_about_advertisement" title="최우수판매자 안내 레이어 보기" type="button">
                  <span class="text">
                   최우수판매자
                  </span>
                 </button>
                 <div class="layer--information">
                  <strong class="text--information_title">
                   최우수판매자란?
                  </strong>
                  <p class="text--information_description">
                   옥션의 판매인증 평가기준을 모두 달성한 최상위 판매자
                  </p>
                  <button class="button--close_layer" type="button">
                   <span class="ir">
                    최우수판매자
                    안내 레이어 닫기
                   </span>
                  </button>
                 </div>
                </div>
               </li>
              </ul>
             </div>
             <button class="button--favorite ">
              <span class="icon--favorite">
               <span class="for-a11y">
                관심상품 등록하기
               </span>
              </span>
             </button>
            </div>
           </div>
          </div>
         </div>
         <div class="component component--item_card type--general">
          <h4 class="text--module_title">
           일반상품 아이템카드
          </h4>
          <div class="itemcard">
           <div class="section--itemcard">
            <div class="section--itemcard_img">
             [ahref]
             
            </div>
            <div class="section--itemcard_info">
             <div class="section--itemcard_info_major">
              <div class="area--itemcard_title">
               <span class="text--itemcard_title ellipsis">
                [ahref]
                
               </span>
              </div>
              <div class="area--itemcard_price">
               <span class="price_seller">
                <span class="for-a11y">
                 상품금액
                </span>
                <strong class="text--price_seller">
                 990
                </strong>
                <span class="text--unit">
                 원
                </span>
               </span>
              </div>
             </div>
             <div class="section--itemcard_info_add">
              <ul class="list--addinfo">
               <li class="item">
                <span class="text--addinfo">
                 배송비 2,500원
                </span>
               </li>
              </ul>
             </div>
             <div class="section--itemcard_info_score">
              <ul class="list--score">
               <li class="item awards">
                <span class="for-a11y">
                 만족도
                 100
                 %입니다.
                </span>
                <div class="seller_awards" title="만족도 100 % 입니다">
                 <span class="awards_points" style="width:100%">
                 </span>
                 <span class="bg_star">
                 </span>
                </div>
               </li>
               <li class="item reviewcnt">
                <li>[link]</li><li>[link]</li>[keywordx][symbolx][keywordx][symbolx][bracketl5][keywordx][bracketr5][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx]
               </li>
               <li class="item buycnt">
                <span class="text--buycnt">
                 구매
                 288
                </span>
                <span class="for-a11y">
                 건
                </span>
               </li>
              </ul>
             </div>
             <div class="section--itemcard_info_shop">
              [linkx]
              
              <span class="for-a11y">
               판매자평가정보
              </span>
              <ul class="list--store_info">
               <li class="item top_seller">
                <div class="section--advertisement ">
                 <button class="button--notice_about_advertisement" title="최우수판매자 안내 레이어 보기" type="button">
                  <span class="text">
                   최우수판매자
                  </span>
                 </button>
                 <div class="layer--information">
                  <strong class="text--information_title">
                   최우수판매자란?
                  </strong>
                  <p class="text--information_description">
                   옥션의 판매인증 평가기준을 모두 달성한 최상위 판매자
                  </p>
                  <button class="button--close_layer" type="button">
                   <span class="ir">
                    최우수판매자
                    안내 레이어 닫기
                   </span>
                  </button>
                 </div>
                </div>
               </li>
              </ul>
             </div>
             <button class="button--favorite ">
              <span class="icon--favorite">
               <span class="for-a11y">
                관심상품 등록하기
               </span>
              </span>
             </button>
            </div>
           </div>
          </div>
         </div>
         <div class="component component--item_card type--general">
          <h4 class="text--module_title">
           일반상품 아이템카드
          </h4>
          <div class="itemcard">
           <div class="section--itemcard">
            <div class="section--itemcard_img">
             <a class="link--itemcard image--loading" href="/DetailView.aspx?itemno=B280283561" target="_blank">
              <div class="lazyload-placeholder" style="height:100%">
              </div>
             </a>
            </div>
            <div class="section--itemcard_info">
             <div class="section--itemcard_info_major">
              <div class="area--itemcard_title">
               <span class="text--itemcard_title ellipsis">
                [linkx]
                
               </span>
              </div>
              <div class="area--itemcard_price">
               <span class="price_seller">
                <span class="for-a11y">
                 상품금액
                </span>
                <strong class="text--price_seller">
                 15,500
                </strong>
                <span class="text--unit">
                 원
                </span>
               </span>
              </div>
             </div>
             <div class="section--itemcard_info_add">
              <ul class="list--addinfo">
               <li class="item">
                <span class="text--addinfo">
                 무료배송
                </span>
               </li>
              </ul>
             </div>
             <div class="section--itemcard_info_score">
              <ul class="list--score">
               <li class="item awards">
                <span class="for-a11y">
                 만족도
                 96
                 %입니다.
                </span>
                <div class="seller_awards" title="만족도 96 % 입니다">
                 <span class="awards_points" style="width:96%">
                 </span>
                 <span class="bg_star">
                 </span>
                </div>
               </li>
               <li class="item reviewcnt">
                <span class="text--reviewcnt">
                 상품평
                 3,215
                </span>
                <span class="for-a11y">
                 건
                </span>
               </li>
               <li class="item buycnt">
                <span class="text--buycnt">
                 구매
                 10,411
                </span>
                <span class="for-a11y">
                 건
                </span>
               </li>
              </ul>
             </div>
             <div class="section--itemcard_info_shop">
              [ahref]
              
              <span class="for-a11y">
               판매자평가정보
              </span>
              <ul class="list--store_info">
               <li class="item top_seller">
                <div class="section--advertisement ">
                 <button class="button--notice_about_advertisement" title="최우수판매자 안내 레이어 보기" type="button">
                  <span class="text">
                   최우수판매자
                  </span>
                 </button>
                 <div class="layer--information">
                  <strong class="text--information_title">
                   최우수판매자란?
                  </strong>
                  <p class="text--information_description">
                   옥션의 판매인증 평가기준을 모두 달성한 최상위 판매자
                  </p>
                  <button class="button--close_layer" type="button">
                   <span class="ir">
                    최우수판매자
                    안내 레이어 닫기
                   </span>
                  </button>
                 </div>
                </div>
               </li>
              </ul>
             </div>
             <button class="button--favorite ">
              <span class="icon--favorite">
               <span class="for-a11y">
                관심상품 등록하기
               </span>
              </span>
             </button>
            </div>
           </div>
          </div>
         </div>
         <div class="component component--item_card type--general">
          <h4 class="text--module_title">
           일반상품 아이템카드
          </h4>
          <div class="itemcard">
           <div class="section--itemcard">
            <div class="section--itemcard_img">
             [ahref]
             
            </div>
            <div class="section--itemcard_info">
             <div class="section--itemcard_info_major">
              <div class="area--itemcard_title">
               <span class="text--itemcard_title ellipsis">
                [linkx]
                
               </span>
              </div>
              <div class="area--itemcard_price">
               <span class="price_seller">
                <span class="for-a11y">
                 상품금액
                </span>
                <strong class="text--price_seller">
                 9,900
                </strong>
                <span class="text--unit">
                 원
                </span>
               </span>
              </div>
             </div>
             <div class="section--itemcard_info_add">
              <ul class="list--addinfo">
               <li class="item">
                <span class="text--addinfo">
                 무료배송
                </span>
               </li>
              </ul>
             </div>
             <div class="section--itemcard_info_score">
              <ul class="list--score">
               <li class="item awards">
                <span class="for-a11y">
                 만족도
                 90
                 %입니다.
                </span>
                <div class="seller_awards" title="만족도 90 % 입니다">
                 <span class="awards_points" style="width:90%">
                 </span>
                 <span class="bg_star">
                 </span>
                </div>
               </li>
               <li class="item reviewcnt">
                <span class="text--reviewcnt">
                 상품평
                 486
                </span>
                <span class="for-a11y">
                 건
                </span>
               </li>
               <li class="item buycnt">
                <span class="text--buycnt">
                 구매
                 956
                </span>
                <span class="for-a11y">
                 건
                </span>
               </li>
              </ul>
             </div>
             <div class="section--itemcard_info_shop">
              [ahref]
              
              <span class="for-a11y">
               판매자평가정보
              </span>
              <ul class="list--store_info">
               <li class="item top_seller">
                <div class="section--advertisement ">
                 <button class="button--notice_about_advertisement" title="최우수판매자 안내 레이어 보기" type="button">
                  <span class="text">
                   최우수판매자
                  </span>
                 </button>
                 <div class="layer--information">
                  <strong class="text--information_title">
                   최우수판매자란?
                  </strong>
                  <p class="text--information_description">
                   옥션의 판매인증 평가기준을 모두 달성한 최상위 판매자
                  </p>
                  <button class="button--close_layer" type="button">
                   <span class="ir">
                    최우수판매자
                    안내 레이어 닫기
                   </span>
                  </button>
                 </div>
                </div>
               </li>
              </ul>
             </div>
             <button class="button--favorite ">
              <span class="icon--favorite">
               <span class="for-a11y">
                관심상품 등록하기
               </span>
              </span>
             </button>
            </div>
           </div>
          </div>
         </div>
         <div class="component component--item_card type--general">
          <h4 class="text--module_title">
           일반상품 아이템카드
          </h4>
          <div class="itemcard">
           <div class="section--itemcard">
            <div class="section--itemcard_img">
             [ahref]
             
            </div>
            <div class="section--itemcard_info">
             <div class="section--itemcard_info_major">
              <div class="area--itemcard_title">
               <span class="text--itemcard_title ellipsis">
                [ahref]
                
               </span>
              </div>
              <div class="area--itemcard_price">
               <span class="price_seller">
                <span class="for-a11y">
                 상품금액
                </span>
                <strong class="text--price_seller">
                 14,900
                </strong>
                <span class="text--unit">
                 원
                </span>
               </span>
              </div>
             </div>
             <div class="section--itemcard_info_add">
              <ul class="list--addinfo">
               <li class="item">
                <span class="text--addinfo">
                 무료배송
                </span>
               </li>
              </ul>
             </div>
             <div class="section--itemcard_info_score">
              <ul class="list--score">
               <li class="item awards">
                <span class="for-a11y">
                 만족도
                 94
                 %입니다.
                </span>
                <div class="seller_awards" title="만족도 94 % 입니다">
                 <span class="awards_points" style="width:94%">
                 </span>
                 <span class="bg_star">
                 </span>
                </div>
               </li>
               <li class="item reviewcnt">
                <span class="text--reviewcnt">
                 상품평
                 23
                </span>
                <span class="for-a11y">
                 건
                </span>
               </li>
               <li class="item buycnt">
                <span class="text--buycnt">
                 구매
                 81
                </span>
                <span class="for-a11y">
                 건
                </span>
               </li>
              </ul>
             </div>
             <div class="section--itemcard_info_shop">
              <a class="link--shop" href="/nong4" target="_blank" title="스토어로 이동">
               <span class="for-a11y">
                판매자
               </span>
               <span class="text">
                조은해남
               </span>
              </a>
              <span class="for-a11y">
               판매자평가정보
              </span>
              <ul class="list--store_info">
               <li class="item top_seller">
                <div class="section--advertisement ">
                 <button class="button--notice_about_advertisement" title="최우수판매자 안내 레이어 보기" type="button">
                  <span class="text">
                   최우수판매자
                  </span>
                 </button>
                 <div class="layer--information">
                  <strong class="text--information_title">
                   최우수판매자란?
                  </strong>
                  <p class="text--information_description">
                   옥션의 판매인증 평가기준을 모두 달성한 최상위 판매자
                  </p>
                  <button class="button--close_layer" type="button">
                   <span class="ir">
                    최우수판매자
                    안내 레이어 닫기
                   </span>
                  </button>
                 </div>
                </div>
               </li>
              </ul>
             </div>
             <button class="button--favorite ">
              <span class="icon--favorite">
               <span class="for-a11y">
                관심상품 등록하기
               </span>
              </span>
             </button>
            </div>
           </div>
          </div>
         </div>
         <div class="component component--item_card type--general">
          <h4 class="text--module_title">
           일반상품 아이템카드
          </h4>
          <div class="itemcard">
           <div class="section--itemcard">
            <div class="section--itemcard_img">
             [ahref]
             
            </div>
            <div class="section--itemcard_info">
             <div class="section--itemcard_info_major">
              <div class="area--itemcard_title">
               <span class="text--itemcard_title ellipsis">
                <a class="link--itemcard" href="/DetailView.aspx?itemno=B286465873" target="_blank">
                 <span class="for-a11y">
                  브랜드명
                 </span>
                 <span class="text--brand">
                 </span>
                 <span class="for-a11y">
                  상품명
                 </span>
                 <span class="text--title">
                  강화 속노랑고구마 강화도 호박고구마 정직히직접재배
                 </span>
                </a>
               </span>
              </div>
              <div class="area--itemcard_price">
               <span class="price_seller">
                <span class="for-a11y">
                 상품금액
                </span>
                <strong class="text--price_seller">
                 26,900
                </strong>
                <span class="text--unit">
                 원
                </span>
               </span>
              </div>
             </div>
             <div class="section--itemcard_info_add">
              <ul class="list--addinfo">
               <li class="item">
                <span class="text--addinfo">
                 무료배송
                </span>
               </li>
              </ul>
             </div>
             <div class="section--itemcard_info_score">
              <ul class="list--score">
               <li class="item awards">
                <span class="for-a11y">
                 만족도
                 96
                 %입니다.
                </span>
                <div class="seller_awards" title="만족도 96 % 입니다">
                 <span class="awards_points" style="width:96%">
                 </span>
                 <span class="bg_star">
                 </span>
                </div>
               </li>
               <li class="item reviewcnt">
                <span class="text--reviewcnt">
                 상품평
                 244
                </span>
                <span class="for-a11y">
                 건
                </span>
               </li>
               <li class="item buycnt">
                <span class="text--buycnt">
                 구매
                 646
                </span>
                <span class="for-a11y">
                 건
                </span>
               </li>
              </ul>
             </div>
             <div class="section--itemcard_info_shop">
              [ahref]
              
             </div>
             <button class="button--favorite ">
              <span class="icon--favorite">
               <span class="for-a11y">
                관심상품 등록하기
               </span>
              </span>
             </button>
            </div>
           </div>
          </div>
         </div>
         <div class="component component--item_card type--general">
          <h4 class="text--module_title">
           일반상품 아이템카드
          </h4>
          <div class="itemcard">
           <div class="section--itemcard">
            <div class="section--itemcard_img">
             [ahref]
             
            </div>
            <div class="section--itemcard_info">
             <div class="section--itemcard_info_major">
              <div class="area--itemcard_title">
               <span class="text--itemcard_title ellipsis">
                [linkx]
                
               </span>
              </div>
              <div class="area--itemcard_price">
               <span class="price_seller">
                <span class="for-a11y">
                 상품금액
                </span>
                <strong class="text--price_seller">
                 9,900
                </strong>
                <span class="text--unit">
                 원
                </span>
               </span>
              </div>
             </div>
             <div class="section--itemcard_info_add">
              <ul class="list--addinfo">
               <li class="item">
                <span class="text--addinfo">
                 무료배송
                </span>
               </li>
              </ul>
             </div>
             <div class="section--itemcard_info_score">
              <ul class="list--score">
               <li class="item awards">
                <span class="for-a11y">
                 만족도
                 86
                 %입니다.
                </span>
                <div class="seller_awards" title="만족도 86 % 입니다">
                 <span class="awards_points" style="width:86%">
                 </span>
                 <span class="bg_star">
                 </span>
                </div>
               </li>
               <li class="item reviewcnt">
                <span class="text--reviewcnt">
                 상품평
                 361
                </span>
                <span class="for-a11y">
                 건
                </span>
               </li>
               <li class="item buycnt">
                <span class="text--buycnt">
                 구매
                 788
                </span>
                <span class="for-a11y">
                 건
                </span>
               </li>
              </ul>
             </div>
             <div class="section--itemcard_info_shop">
              <a class="link--shop" href="/imnatureshop" target="_blank" title="스토어로 이동">
               <span class="for-a11y">
                판매자
               </span>
               <span class="text">
                아임네이처
               </span>
              </a>
              <span class="for-a11y">
               판매자평가정보
              </span>
              <ul class="list--store_info">
               <li class="item top_seller">
                <div class="section--advertisement ">
                 <button class="button--notice_about_advertisement" title="최우수판매자 안내 레이어 보기" type="button">
                  <span class="text">
                   최우수판매자
                  </span>
                 </button>
                 <div class="layer--information">
                  <strong class="text--information_title">
                   최우수판매자란?
                  </strong>
                  <p class="text--information_description">
                   옥션의 판매인증 평가기준을 모두 달성한 최상위 판매자
                  </p>
                  <button class="button--close_layer" type="button">
                   <span class="ir">
                    최우수판매자
                    안내 레이어 닫기
                   </span>
                  </button>
                 </div>
                </div>
               </li>
              </ul>
             </div>
             <button class="button--favorite ">
              <span class="icon--favorite">
               <span class="for-a11y">
                관심상품 등록하기
               </span>
              </span>
             </button>
            </div>
           </div>
          </div>
         </div>
         <div class="component component--item_card type--general">
          <h4 class="text--module_title">
           일반상품 아이템카드
          </h4>
          <div class="itemcard">
           <div class="section--itemcard">
            <div class="section--itemcard_img">
             [ahref]
             
            </div>
            <div class="section--itemcard_info">
             <div class="section--itemcard_info_major">
              <div class="area--itemcard_title">
               <span class="text--itemcard_title ellipsis">
                [linkx]
                
               </span>
              </div>
              <div class="area--itemcard_price">
               <span class="discount" title="할인률">
                <strong class="text--discount">
                 10
                </strong>
                <span class="text--unit">
                 %
                </span>
                <span class="for-a11y">
                 할인
                </span>
               </span>
               <span class="price_seller">
                <span class="for-a11y">
                 할인적용금액
                </span>
                <strong class="text--price_seller">
                 16,900
                </strong>
                <span class="text--unit">
                 원
                </span>
               </span>
               <span class="price_original">
                <span class="for-a11y">
                 상품금액
                </span>
                <strong class="text--price_original">
                 18,900
                </strong>
                <span class="text--unit">
                 원
                </span>
               </span>
              </div>
             </div>
             <div class="section--itemcard_info_add">
              <ul class="list--addinfo">
               <li class="item">
                <span class="text--addinfo">
                 무료배송
                </span>
               </li>
              </ul>
             </div>
             <div class="section--itemcard_info_score">
              <ul class="list--score">
               <li class="item awards">
                <span class="for-a11y">
                 만족도
                 96
                 %입니다.
                </span>
                <div class="seller_awards" title="만족도 96 % 입니다">
                 <span class="awards_points" style="width:96%">
                 </span>
                 <span class="bg_star">
                 </span>
                </div>
               </li>
               <li class="item reviewcnt">
                <span class="text--reviewcnt">
                 상품평
                 12
                </span>
                <span class="for-a11y">
                 건
                </span>
               </li>
               <li class="item buycnt">
                <span class="text--buycnt">
                 구매
                 24
                </span>
                <span class="for-a11y">
                 건
                </span>
               </li>
              </ul>
             </div>
             <div class="section--itemcard_info_shop">
              [linkx]
              
              <span class="for-a11y">
               판매자평가정보
              </span>
              <ul class="list--store_info">
               <li class="item top_seller">
                <div class="section--advertisement ">
                 <button class="button--notice_about_advertisement" title="최우수판매자 안내 레이어 보기" type="button">
                  <span class="text">
                   최우수판매자
                  </span>
                 </button>
                 <div class="layer--information">
                  <strong class="text--information_title">
                   최우수판매자란?
                  </strong>
                  <p class="text--information_description">
                   옥션의 판매인증 평가기준을 모두 달성한 최상위 판매자
                  </p>
                  <button class="button--close_layer" type="button">
                   <span class="ir">
                    최우수판매자
                    안내 레이어 닫기
                   </span>
                  </button>
                 </div>
                </div>
               </li>
              </ul>
             </div>
             <button class="button--favorite ">
              <span class="icon--favorite">
               <span class="for-a11y">
                관심상품 등록하기
               </span>
              </span>
             </button>
            </div>
           </div>
          </div>
         </div>
         <div class="component component--item_card type--general">
          <h4 class="text--module_title">
           일반상품 아이템카드
          </h4>
          <div class="itemcard">
           <div class="section--itemcard">
            <div class="section--itemcard_img">
             [linkx]
             
            </div>
            <div class="section--itemcard_info">
             <div class="section--itemcard_info_major">
              <div class="area--itemcard_title">
               <span class="text--itemcard_title ellipsis">
                [linkx]
                
               </span>
              </div>
              <div class="area--itemcard_price">
               <span class="discount" title="할인률">
                <strong class="text--discount">
                </strong>
                <span class="text--unit">
                </span>
                <span class="for-a11y">
                 할인
                </span>
               </span>
               <span class="price_seller">
                <span class="for-a11y">
                 할인적용금액
                </span>
                <strong class="text--price_seller">
                 9,850
                </strong>
                <span class="text--unit">
                 원
                </span>
               </span>
               <span class="price_original">
                <span class="for-a11y">
                 상품금액
                </span>
                <strong class="text--price_original">
                 9,900
                </strong>
                <span class="text--unit">
                 원
                </span>
               </span>
              </div>
             </div>
             <div class="section--itemcard_info_add">
              <ul class="list--addinfo">
               <li class="item">
                <span class="text--addinfo">
                 무료배송
                </span>
               </li>
              </ul>
             </div>
             <div class="section--itemcard_info_score">
              <ul class="list--score">
               <li class="item awards">
                <span class="for-a11y">
                 만족도
                 100
                 %입니다.
                </span>
                <div class="seller_awards" title="만족도 100 % 입니다">
                 <span class="awards_points" style="width:100%">
                 </span>
                 <span class="bg_star">
                 </span>
                </div>
               </li>
               <li class="item reviewcnt">
                <span class="text--reviewcnt">
                 상품평
                 7
                </span>
                <span class="for-a11y">
                 건
                </span>
               </li>
               <li class="item buycnt">
                <span class="text--buycnt">
                 구매
                 16
                </span>
                <span class="for-a11y">
                 건
                </span>
               </li>
              </ul>
             </div>
             <div class="section--itemcard_info_shop">
              [ahref]
              
              <span class="for-a11y">
               판매자평가정보
              </span>
              <ul class="list--store_info">
               <li class="item top_seller">
                <div class="section--advertisement ">
                 <button class="button--notice_about_advertisement" title="최우수판매자 안내 레이어 보기" type="button">
                  <span class="text">
                   최우수판매자
                  </span>
                 </button>
                 <div class="layer--information">
                  <strong class="text--information_title">
                   최우수판매자란?
                  </strong>
                  <p class="text--information_description">
                   옥션의 판매인증 평가기준을 모두 달성한 최상위 판매자
                  </p>
                  <button class="button--close_layer" type="button">
                   <span class="ir">
                    최우수판매자
                    안내 레이어 닫기
                   </span>
                  </button>
                 </div>
                </div>
               </li>
              </ul>
             </div>
             <button class="button--favorite ">
              <span class="icon--favorite">
               <span class="for-a11y">
                관심상품 등록하기
               </span>
              </span>
             </button>
            </div>
           </div>
          </div>
         </div>
         <div class="component component--item_card type--general">
          <h4 class="text--module_title">
           일반상품 아이템카드
          </h4>
          <div class="itemcard">
           <div class="section--itemcard">
            <div class="section--itemcard_img">
             [linkx]
             
            </div>
            <div class="section--itemcard_info">
             <div class="section--itemcard_info_major">
              <div class="area--itemcard_title">
               <span class="text--itemcard_title ellipsis">
                [linkx]
                
               </span>
              </div>
              <div class="area--itemcard_price">
               <span class="discount" title="할인률">
                <strong class="text--discount">
                </strong>
                <span class="text--unit">
                </span>
                <span class="for-a11y">
                 할인
                </span>
               </span>
               <span class="price_seller">
                <span class="for-a11y">
                 할인적용금액
                </span>
                <strong class="text--price_seller">
                 9,850
                </strong>
                <span class="text--unit">
                 원
                </span>
               </span>
               <span class="price_original">
                <span class="for-a11y">
                 상품금액
                </span>
                <strong class="text--price_original">
                 9,900
                </strong>
                <span class="text--unit">
                 원
                </span>
               </span>
              </div>
             </div>
             <div class="section--itemcard_info_add">
              <ul class="list--addinfo">
               <li class="item">
                <span class="text--addinfo">
                 무료배송
                </span>
               </li>
              </ul>
             </div>
             <div class="section--itemcard_info_score">
              <ul class="list--score">
               <li class="item awards">
                <span class="for-a11y">
                 만족도
                 94
                 %입니다.
                </span>
                <div class="seller_awards" title="만족도 94 % 입니다">
                 <span class="awards_points" style="width:94%">
                 </span>
                 <span class="bg_star">
                 </span>
                </div>
               </li>
               <li class="item reviewcnt">
                <span class="text--reviewcnt">
                 상품평
                 52
                </span>
                <span class="for-a11y">
                 건
                </span>
               </li>
               <li class="item buycnt">
                <span class="text--buycnt">
                 구매
                 125
                </span>
                <span class="for-a11y">
                 건
                </span>
               </li>
              </ul>
             </div>
             <div class="section--itemcard_info_shop">
              <a class="link--shop" href="/freshvil" target="_blank" title="스토어로 이동">
               <span class="for-a11y">
                판매자
               </span>
               <span class="text">
                freshvil
               </span>
              </a>
              <span class="for-a11y">
               판매자평가정보
              </span>
              <ul class="list--store_info">
               <li class="item top_seller">
                <div class="section--advertisement ">
                 <button class="button--notice_about_advertisement" title="최우수판매자 안내 레이어 보기" type="button">
                  <span class="text">
                   최우수판매자
                  </span>
                 </button>
                 <div class="layer--information">
                  <strong class="text--information_title">
                   최우수판매자란?
                  </strong>
                  <p class="text--information_description">
                   옥션의 판매인증 평가기준을 모두 달성한 최상위 판매자
                  </p>
                  <button class="button--close_layer" type="button">
                   <span class="ir">
                    최우수판매자
                    안내 레이어 닫기
                   </span>
                  </button>
                 </div>
                </div>
               </li>
              </ul>
             </div>
             <button class="button--favorite ">
              <span class="icon--favorite">
               <span class="for-a11y">
                관심상품 등록하기
               </span>
              </span>
             </button>
            </div>
           </div>
          </div>
         </div>
         <div class="component component--item_card type--general">
          <h4 class="text--module_title">
           일반상품 아이템카드
          </h4>
          <div class="itemcard">
           <div class="section--itemcard">
            <div class="section--itemcard_img">
             [ahref]
             
            </div>
            <div class="section--itemcard_info">
             <div class="section--itemcard_info_major">
              <div class="area--itemcard_title">
               <span class="text--itemcard_title ellipsis">
                [ahref]
                
               </span>
              </div>
              <div class="area--itemcard_price">
               <span class="price_seller">
                <span class="for-a11y">
                 상품금액
                </span>
                <strong class="text--price_seller">
                 16,900
                </strong>
                <span class="text--unit">
                 원
                </span>
               </span>
              </div>
             </div>
             <div class="section--itemcard_info_add">
              <ul class="list--addinfo">
               <li class="item">
                <span class="text--addinfo">
                 무료배송
                </span>
               </li>
              </ul>
             </div>
             <div class="section--itemcard_info_score">
              <ul class="list--score">
               <li class="item awards">
                <span class="for-a11y">
                 만족도
                 96
                 %입니다.
                </span>
                <div class="seller_awards" title="만족도 96 % 입니다">
                 <span class="awards_points" style="width:96%">
                 </span>
                 <span class="bg_star">
                 </span>
                </div>
               </li>
               <li class="item reviewcnt">
                <span class="text--reviewcnt">
                 상품평
                 67
                </span>
                <span class="for-a11y">
                 건
                </span>
               </li>
               <li class="item buycnt">
                <span class="text--buycnt">
                 구매
                 134
                </span>
                <span class="for-a11y">
                 건
                </span>
               </li>
              </ul>
             </div>
             <div class="section--itemcard_info_shop">
              [linkx]
              
              <span class="for-a11y">
               판매자평가정보
              </span>
              <ul class="list--store_info">
               <li class="item">
                <span class="text--store_info">
                 상품평
                </span>
               </li>
               <li class="item">
                <span class="text--store_info">
                 고객응대우수
                </span>
               </li>
              </ul>
             </div>
             <button class="button--favorite ">
              <span class="icon--favorite">
               <span class="for-a11y">
                관심상품 등록하기
               </span>
              </span>
             </button>
             <button class="button--related_item" title="연관상품 6 개가 있습니다. ">
              <span class="text--related_item">
               <b class="text--title">
                연관상품
               </b>
               <b class="text--cnt">
                6
               </b>
              </span>
             </button>
            </div>
           </div>
          </div>
          <div class="popup--related_items ">
           <h2 class="section--title">
            [mkey1][symbolx][pkey1][symbolx][keyword1][bracketl1][bracketr1][symbolx][bracketl2][siter1][bracketr2][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx]
           </h2>
           <div class="section--body">
            <div class="section--related_items">
             <div class="section--slick_area">
              <div class="list--related_items">
               <div class="slick-slider slick-initialized">
                <div class="slick-list">
                 <div class="slick-track" style="width:0%;left:NaN%">
                 </div>
                </div>
               </div>
              </div>
             </div>
            </div>
           </div>
          </div>
         </div>
         <div class="component component--item_card type--general">
          <h4 class="text--module_title">
           일반상품 아이템카드
          </h4>
          <div class="itemcard">
           <div class="section--itemcard">
            <div class="section--itemcard_img">
             [linkx]
             
            </div>
            <div class="section--itemcard_info">
             <div class="section--itemcard_info_major">
              <div class="area--itemcard_title">
               <span class="text--itemcard_title ellipsis">
                [linkx]
                
               </span>
              </div>
              <div class="area--itemcard_price">
               <span class="price_seller">
                <span class="for-a11y">
                 상품금액
                </span>
                <strong class="text--price_seller">
                 19,900
                </strong>
                <span class="text--unit">
                 원
                </span>
               </span>
              </div>
             </div>
             <div class="section--itemcard_info_add">
              <ul class="list--addinfo">
               <li class="item">
                <span class="text--addinfo">
                 무료배송
                </span>
               </li>
              </ul>
             </div>
             <div class="section--itemcard_info_score">
              <ul class="list--score">
               <li class="item awards">
                <span class="for-a11y">
                 만족도
                 98
                 %입니다.
                </span>
                <div class="seller_awards" title="만족도 98 % 입니다">
                 <span class="awards_points" style="width:98%">
                 </span>
                 <span class="bg_star">
                 </span>
                </div>
               </li>
               <li class="item reviewcnt">
                <span class="text--reviewcnt">
                 상품평
                 28
                </span>
                <span class="for-a11y">
                 건
                </span>
               </li>
               <li class="item buycnt">
                <span class="text--buycnt">
                 구매
                 53
                </span>
                <span class="for-a11y">
                 건
                </span>
               </li>
              </ul>
             </div>
             <div class="section--itemcard_info_shop">
              [linkx]
              
             </div>
             <button class="button--favorite ">
              <span class="icon--favorite">
               <span class="for-a11y">
                관심상품 등록하기
               </span>
              </span>
             </button>
             <button class="button--related_item" title="연관상품 4 개가 있습니다. ">
              <span class="text--related_item">
               <b class="text--title">
                연관상품
               </b>
               <b class="text--cnt">
                4
               </b>
              </span>
             </button>
            </div>
           </div>
          </div>
          <div class="popup--related_items ">
           <h2 class="section--title">
            <b>[mkey1][symbolx][pkey1][symbolx][keyword1][bracketl1][bracketr1][symbolx][bracketl2][siter1][bracketr2][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx]</b>
           </h2>
           <div class="section--body">
            <div class="section--related_items">
             <div class="section--slick_area">
              <div class="list--related_items">
               <div class="slick-slider slick-initialized">
                <div class="slick-list">
                 <div class="slick-track" style="width:0%;left:NaN%">
                 </div>
                </div>
               </div>
              </div>
             </div>
            </div>
           </div>
          </div>
         </div>
         <div class="component component--item_card type--general">
          <h4 class="text--module_title">
           일반상품 아이템카드
          </h4>
          <div class="itemcard">
           <div class="section--itemcard">
            <div class="section--itemcard_img">
             [ahref]
             
            </div>
            <div class="section--itemcard_info">
             <div class="section--itemcard_info_major">
              <div class="area--itemcard_title">
               <span class="text--itemcard_title ellipsis">
                [ahref]
                
               </span>
              </div>
              <div class="area--itemcard_price">
               <span class="price_seller">
                <span class="for-a11y">
                 상품금액
                </span>
                <strong class="text--price_seller">
                 15,900
                </strong>
                <span class="text--unit">
                 원
                </span>
               </span>
              </div>
             </div>
             <div class="section--itemcard_info_add">
              <ul class="list--addinfo">
               <li class="item">
                <span class="text--addinfo">
                 무료배송
                </span>
               </li>
              </ul>
             </div>
             <div class="section--itemcard_info_score">
              <ul class="list--score">
              </ul>
             </div>
             <div class="section--itemcard_info_shop">
              [ahref]
              
              <span class="for-a11y">
               판매자평가정보
              </span>
              <ul class="list--store_info">
               <li class="item">
                <span class="text--store_info">
                 배송
                </span>
               </li>
               <li class="item">
                <span class="text--store_info">
                 상품평
                </span>
               </li>
               <li class="item">
                <span class="text--store_info">
                 고객응대우수
                </span>
               </li>
              </ul>
             </div>
             <button class="button--favorite ">
              <span class="icon--favorite">
               <span class="for-a11y">
                관심상품 등록하기
               </span>
              </span>
             </button>
             <button class="button--related_item" title="연관상품 2 개가 있습니다. ">
              <span class="text--related_item">
               <b class="text--title">
                연관상품
               </b>
               <b class="text--cnt">
                2
               </b>
              </span>
             </button>
            </div>
           </div>
          </div>
          <div class="popup--related_items ">
           <h2 class="section--title">
            <b>[mkey1][symbolx][pkey1][symbolx][keyword1][bracketl1][bracketr1][symbolx][bracketl2][siter1][bracketr2][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx]</b>
           </h2>
           <div class="section--body">
            <div class="section--related_items">
             <div class="section--slick_area">
              <div class="list--related_items">
               <div class="slick-slider slick-initialized">
                <div class="slick-list">
                 <div class="slick-track" style="width:0%;left:NaN%">
                 </div>
                </div>
               </div>
              </div>
             </div>
            </div>
           </div>
          </div>
         </div>
         <div class="component component--item_card type--general">
          <h4 class="text--module_title">
           일반상품 아이템카드
          </h4>
          <div class="itemcard">
           <div class="section--itemcard">
            <div class="section--itemcard_img">
             [linkx]
             
            </div>
            <div class="section--itemcard_info">
             <div class="section--itemcard_info_major">
              <div class="area--itemcard_title">
               <span class="text--itemcard_title ellipsis">
                [ahref]
                
               </span>
              </div>
              <div class="area--itemcard_price">
               <span class="discount" title="할인률">
                <strong class="text--discount">
                 1
                </strong>
                <span class="text--unit">
                 %
                </span>
                <span class="for-a11y">
                 할인
                </span>
               </span>
               <span class="price_seller">
                <span class="for-a11y">
                 할인적용금액
                </span>
                <strong class="text--price_seller">
                 880
                </strong>
                <span class="text--unit">
                 원
                </span>
               </span>
               <span class="price_original">
                <span class="for-a11y">
                 상품금액
                </span>
                <strong class="text--price_original">
                 890
                </strong>
                <span class="text--unit">
                 원
                </span>
               </span>
              </div>
             </div>
             <div class="section--itemcard_info_add">
              <ul class="list--addinfo">
               <li class="item">
                <span class="text--addinfo">
                 배송비 2,500원
                </span>
               </li>
              </ul>
             </div>
             <div class="section--itemcard_info_score">
              <ul class="list--score">
              </ul>
             </div>
             <div class="section--itemcard_info_shop">
              [linkx]
              
             </div>
             <button class="button--favorite ">
              <span class="icon--favorite">
               <span class="for-a11y">
                관심상품 등록하기
               </span>
              </span>
             </button>
            </div>
           </div>
          </div>
         </div>
         <div class="component component--item_card type--general">
          <h4 class="text--module_title">
           일반상품 아이템카드
          </h4>
          <div class="itemcard">
           <div class="section--itemcard">
            <div class="section--itemcard_img">
             [linkx]
             
            </div>
            <div class="section--itemcard_info">
             <div class="section--itemcard_info_major">
              <div class="area--itemcard_title">
               <span class="text--itemcard_title ellipsis">
                [ahref]
                
               </span>
              </div>
              <div class="area--itemcard_price">
               <span class="price_seller">
                <span class="for-a11y">
                 상품금액
                </span>
                <strong class="text--price_seller">
                 25,500
                </strong>
                <span class="text--unit">
                 원
                </span>
               </span>
              </div>
             </div>
             <div class="section--itemcard_info_add">
              <ul class="list--addinfo">
               <li class="item">
                <span class="text--addinfo">
                 배송비 3,000원
                </span>
               </li>
              </ul>
             </div>
             <div class="section--itemcard_info_score">
              <ul class="list--score">
              </ul>
             </div>
             <div class="section--itemcard_info_shop">
              [ahref]
              
             </div>
             <button class="button--favorite ">
              <span class="icon--favorite">
               <span class="for-a11y">
                관심상품 등록하기
               </span>
              </span>
             </button>
             <button class="button--related_item" title="연관상품 19 개가 있습니다. ">
              <span class="text--related_item">
               <b class="text--title">
                연관상품
               </b>
               <b class="text--cnt">
                19
               </b>
              </span>
             </button>
            </div>
           </div>
          </div>
          <div class="popup--related_items ">
           <h2 class="section--title">
            [mkey1][symbolx][pkey1][symbolx][keyword1][bracketl1][bracketr1][symbolx][bracketl2][siter1][bracketr2][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx]
           </h2>
           <div class="section--body">
            <div class="section--related_items">
             <div class="section--slick_area">
              <div class="list--related_items">
               <div class="slick-slider slick-initialized">
                <div class="slick-list">
                 <div class="slick-track" style="width:0%;left:NaN%">
                 </div>
                </div>
               </div>
              </div>
             </div>
            </div>
           </div>
          </div>
         </div>
         <div class="component component--item_card type--general">
          <h4 class="text--module_title">
           일반상품 아이템카드
          </h4>
          <div class="itemcard">
           <div class="section--itemcard">
            <div class="section--itemcard_img">
             [linkx]
             
            </div>
            <div class="section--itemcard_info">
             <div class="section--itemcard_info_major">
              <div class="area--itemcard_title">
               <span class="text--itemcard_title ellipsis">
                [ahref]
                
               </span>
              </div>
              <div class="area--itemcard_price">
               <span class="price_seller">
                <span class="for-a11y">
                 상품금액
                </span>
                <strong class="text--price_seller">
                 9,900
                </strong>
                <span class="text--unit">
                 원
                </span>
               </span>
              </div>
             </div>
             <div class="section--itemcard_info_add">
              <ul class="list--addinfo">
               <li class="item">
                <span class="text--addinfo">
                 무료배송
                </span>
               </li>
              </ul>
             </div>
             <div class="section--itemcard_info_score">
              <ul class="list--score">
               <li class="item awards">
                <span class="for-a11y">
                 만족도
                 92
                 %입니다.
                </span>
                <div class="seller_awards" title="만족도 92 % 입니다">
                 <span class="awards_points" style="width:92%">
                 </span>
                 <span class="bg_star">
                 </span>
                </div>
               </li>
               <li class="item reviewcnt">
                <span class="text--reviewcnt">
                 상품평
                 3,864
                </span>
                <span class="for-a11y">
                 건
                </span>
               </li>
               <li class="item buycnt">
                <span class="text--buycnt">
                 구매
                 12,397
                </span>
                <span class="for-a11y">
                 건
                </span>
               </li>
              </ul>
             </div>
             <div class="section--itemcard_info_shop">
              [ahref]
              
              <span class="for-a11y">
               판매자평가정보
              </span>
              <ul class="list--store_info">
               <li class="item top_seller">
                <div class="section--advertisement ">
                 <button class="button--notice_about_advertisement" title="최우수판매자 안내 레이어 보기" type="button">
                  <span class="text">
                   최우수판매자
                  </span>
                 </button>
                 <div class="layer--information">
                  <strong class="text--information_title">
                   최우수판매자란?
                  </strong>
                  <p class="text--information_description">
                   옥션의 판매인증 평가기준을 모두 달성한 최상위 판매자
                  </p>
                  <button class="button--close_layer" type="button">
                   <span class="ir">
                    최우수판매자
                    안내 레이어 닫기
                   </span>
                  </button>
                 </div>
                </div>
               </li>
              </ul>
             </div>
             <button class="button--favorite ">
              <span class="icon--favorite">
               <span class="for-a11y">
                관심상품 등록하기
               </span>
              </span>
             </button>
            </div>
           </div>
          </div>
         </div>
        </div>
        <div class="section--module_wrap" module-design-id="17">
         <div class="component component--item_card type--general">
          <h4 class="text--module_title">
           일반상품 아이템카드
          </h4>
          <div class="itemcard">
           <div class="section--itemcard">
            <div class="section--itemcard_img">
             [ahref]
             
            </div>
            <div class="section--itemcard_info">
             <div class="section--itemcard_info_major">
              <div class="area--itemcard_title">
               <span class="text--itemcard_title ellipsis">
                [linkx]
                
               </span>
              </div>
              <div class="area--itemcard_price">
               <span class="discount" title="할인률">
                <strong class="text--discount">
                 1
                </strong>
                <span class="text--unit">
                 %
                </span>
                <span class="for-a11y">
                 할인
                </span>
               </span>
               <span class="price_seller">
                <span class="for-a11y">
                 할인적용금액
                </span>
                <strong class="text--price_seller">
                 14,820
                </strong>
                <span class="text--unit">
                 원
                </span>
               </span>
               <span class="price_original">
                <span class="for-a11y">
                 상품금액
                </span>
                <strong class="text--price_original">
                 15,000
                </strong>
                <span class="text--unit">
                 원
                </span>
               </span>
              </div>
             </div>
             <div class="section--itemcard_info_add">
              <ul class="list--addinfo">
               <li class="item">
                <span class="text--addinfo">
                 배송비 3,000원
                </span>
               </li>
              </ul>
             </div>
             <div class="section--itemcard_info_score">
              <ul class="list--score">
               <li class="item awards">
                <span class="for-a11y">
                 만족도
                 96
                 %입니다.
                </span>
                <div class="seller_awards" title="만족도 96 % 입니다">
                 <span class="awards_points" style="width:96%">
                 </span>
                 <span class="bg_star">
                 </span>
                </div>
               </li>
               <li class="item reviewcnt">
                <span class="text--reviewcnt">
                 상품평
                 28
                </span>
                <span class="for-a11y">
                 건
                </span>
               </li>
               <li class="item buycnt">
                <span class="text--buycnt">
                 구매
                 119
                </span>
                <span class="for-a11y">
                 건
                </span>
               </li>
              </ul>
             </div>
             <div class="section--itemcard_info_shop">
              [ahref]
              
              <span class="for-a11y">
               판매자평가정보
              </span>
              <ul class="list--store_info">
               <li class="item">
                <span class="text--store_info">
                 배송
                </span>
               </li>
               <li class="item">
                <span class="text--store_info">
                 상품평
                </span>
               </li>
               <li class="item">
                <span class="text--store_info">
                 고객응대우수
                </span>
               </li>
              </ul>
             </div>
             <button class="button--favorite ">
              <span class="icon--favorite">
               <span class="for-a11y">
                관심상품 등록하기
               </span>
              </span>
             </button>
            </div>
           </div>
          </div>
         </div>
         <div class="component component--item_card type--general">
          <h4 class="text--module_title">
           일반상품 아이템카드
          </h4>
          <div class="itemcard">
           <div class="section--itemcard">
            <div class="section--itemcard_img">
             [linkx]
             
            </div>
            <div class="section--itemcard_info">
             <div class="section--itemcard_info_major">
              <div class="area--itemcard_title">
               <span class="text--itemcard_title ellipsis">
                [linkx]
                
               </span>
              </div>
              <div class="area--itemcard_price">
               <span class="discount" title="할인률">
                <strong class="text--discount">
                </strong>
                <span class="text--unit">
                </span>
                <span class="for-a11y">
                 할인
                </span>
               </span>
               <span class="price_seller">
                <span class="for-a11y">
                 할인적용금액
                </span>
                <strong class="text--price_seller">
                 34,320
                </strong>
                <span class="text--unit">
                 원
                </span>
               </span>
               <span class="price_original">
                <span class="for-a11y">
                 상품금액
                </span>
                <strong class="text--price_original">
                 34,500
                </strong>
                <span class="text--unit">
                 원
                </span>
               </span>
              </div>
             </div>
             <div class="section--itemcard_info_add">
              <ul class="list--addinfo">
               <li class="item">
                <span class="text--addinfo">
                 무료배송
                </span>
               </li>
              </ul>
             </div>
             <div class="section--itemcard_info_score">
              <ul class="list--score">
               <li class="item awards">
                <span class="for-a11y">
                 만족도
                 100
                 %입니다.
                </span>
                <div class="seller_awards" title="만족도 100 % 입니다">
                 <span class="awards_points" style="width:100%">
                 </span>
                 <span class="bg_star">
                 </span>
                </div>
               </li>
               <li class="item reviewcnt">
                <span class="text--reviewcnt">
                 상품평
                 8
                </span>
                <span class="for-a11y">
                 건
                </span>
               </li>
               <li class="item buycnt">
                <span class="text--buycnt">
                 구매
                 9
                </span>
                <span class="for-a11y">
                 건
                </span>
               </li>
              </ul>
             </div>
             <div class="section--itemcard_info_shop">
              [ahref]
              
             </div>
             <button class="button--favorite ">
              <span class="icon--favorite">
               <span class="for-a11y">
                관심상품 등록하기
               </span>
              </span>
             </button>
            </div>
           </div>
          </div>
         </div>
         <div class="component component--item_card type--general">
          <h4 class="text--module_title">
           일반상품 아이템카드
          </h4>
          <div class="itemcard">
           <div class="section--itemcard">
            <div class="section--itemcard_img">
             [linkx]
             
            </div>
            <div class="section--itemcard_info">
             <div class="section--itemcard_info_major">
              <div class="area--itemcard_title">
               <span class="text--itemcard_title ellipsis">
                [ahref]
                
               </span>
              </div>
              <div class="area--itemcard_price">
               <span class="price_seller">
                <span class="for-a11y">
                 상품금액
                </span>
                <strong class="text--price_seller">
                 49,800
                </strong>
                <span class="text--unit">
                 원
                </span>
               </span>
              </div>
             </div>
             <div class="section--itemcard_info_add">
              <ul class="list--addinfo">
               <li class="item">
                <span class="text--addinfo">
                 무료배송
                </span>
               </li>
              </ul>
             </div>
             <div class="section--itemcard_info_score">
              <ul class="list--score">
               <li class="item buycnt">
                <span class="text--buycnt">
                 구매
                 1
                </span>
                <span class="for-a11y">
                 건
                </span>
               </li>
              </ul>
             </div>
             <div class="section--itemcard_info_shop">
              [ahref]
              
             </div>
             <button class="button--favorite ">
              <span class="icon--favorite">
               <span class="for-a11y">
                관심상품 등록하기
               </span>
              </span>
             </button>
            </div>
           </div>
          </div>
         </div>
         <div class="component component--item_card type--general">
          <h4 class="text--module_title">
           일반상품 아이템카드
          </h4>
          <div class="itemcard">
           <div class="section--itemcard">
            <div class="section--itemcard_img">
             [ahref]
             
            </div>
            <div class="section--itemcard_info">
             <div class="section--itemcard_info_major">
              <div class="area--itemcard_title">
               <span class="text--itemcard_title ellipsis">
                [linkx]
                
               </span>
              </div>
              <div class="area--itemcard_price">
               <span class="price_seller">
                <span class="for-a11y">
                 상품금액
                </span>
                <strong class="text--price_seller">
                 7,300
                </strong>
                <span class="text--unit">
                 원
                </span>
               </span>
              </div>
             </div>
             <div class="section--itemcard_info_add">
              <ul class="list--addinfo">
               <li class="item">
                <span class="text--addinfo">
                 배송비 2,500원
                </span>
               </li>
              </ul>
             </div>
             <div class="section--itemcard_info_score">
              <ul class="list--score">
               <li class="item awards">
                <span class="for-a11y">
                 만족도
                 98
                 %입니다.
                </span>
                <div class="seller_awards" title="만족도 98 % 입니다">
                 <span class="awards_points" style="width:98%">
                 </span>
                 <span class="bg_star">
                 </span>
                </div>
               </li>
               <li class="item reviewcnt">
                <span class="text--reviewcnt">
                 상품평
                 56
                </span>
                <span class="for-a11y">
                 건
                </span>
               </li>
               <li class="item buycnt">
                <span class="text--buycnt">
                 구매
                 5,604
                </span>
                <span class="for-a11y">
                 건
                </span>
               </li>
              </ul>
             </div>
             <div class="section--itemcard_info_shop">
              [ahref]
              
              <span class="for-a11y">
               판매자평가정보
              </span>
              <ul class="list--store_info">
               <li class="item top_seller">
                <div class="section--advertisement ">
                 <button class="button--notice_about_advertisement" title="최우수판매자 안내 레이어 보기" type="button">
                  <span class="text">
                   최우수판매자
                  </span>
                 </button>
                 <div class="layer--information">
                  <strong class="text--information_title">
                   최우수판매자란?
                  </strong>
                  <p class="text--information_description">
                   옥션의 판매인증 평가기준을 모두 달성한 최상위 판매자
                  </p>
                  <button class="button--close_layer" type="button">
                   <span class="ir">
                    최우수판매자
                    안내 레이어 닫기
                   </span>
                  </button>
                 </div>
                </div>
               </li>
              </ul>
             </div>
             <button class="button--favorite ">
              <span class="icon--favorite">
               <span class="for-a11y">
                관심상품 등록하기
               </span>
              </span>
             </button>
            </div>
           </div>
          </div>
         </div>
         <div class="component component--item_card type--general">
          <h4 class="text--module_title">
           일반상품 아이템카드
          </h4>
          <div class="itemcard">
           <div class="section--itemcard">
            <div class="section--itemcard_img">
             <a class="link--itemcard image--loading" href="/DetailView.aspx?itemno=B233058112" target="_blank">
              <div class="lazyload-placeholder" style="height:100%">
              </div>
             </a>
            </div>
            <div class="section--itemcard_info">
             <div class="section--itemcard_info_major">
              <div class="area--itemcard_title">
               <span class="text--itemcard_title ellipsis">
                [ahref]
                
               </span>
              </div>
              <div class="area--itemcard_price">
               <span class="price_seller">
                <span class="for-a11y">
                 상품금액
                </span>
                <strong class="text--price_seller">
                 29,900
                </strong>
                <span class="text--unit">
                 원
                </span>
               </span>
              </div>
             </div>
             <div class="section--itemcard_info_add">
              <ul class="list--addinfo">
               <li class="item">
                <span class="text--addinfo">
                 무료배송
                </span>
               </li>
              </ul>
             </div>
             <div class="section--itemcard_info_score">
              <ul class="list--score">
               <li class="item awards">
                <span class="for-a11y">
                 만족도
                 96
                 %입니다.
                </span>
                <div class="seller_awards" title="만족도 96 % 입니다">
                 <span class="awards_points" style="width:96%">
                 </span>
                 <span class="bg_star">
                 </span>
                </div>
               </li>
               <li class="item reviewcnt">
                <span class="text--reviewcnt">
                 상품평
                 473
                </span>
                <span class="for-a11y">
                 건
                </span>
               </li>
               <li class="item buycnt">
                <span class="text--buycnt">
                 구매
                 3,299
                </span>
                <span class="for-a11y">
                 건
                </span>
               </li>
              </ul>
             </div>
             <div class="section--itemcard_info_shop">
              [ahref]
              
              <span class="for-a11y">
               판매자평가정보
              </span>
              <ul class="list--store_info">
               <li class="item top_seller">
                <div class="section--advertisement ">
                 <button class="button--notice_about_advertisement" title="최우수판매자 안내 레이어 보기" type="button">
                  <span class="text">
                   최우수판매자
                  </span>
                 </button>
                 <div class="layer--information">
                  <strong class="text--information_title">
                   최우수판매자란?
                  </strong>
                  <p class="text--information_description">
                   옥션의 판매인증 평가기준을 모두 달성한 최상위 판매자
                  </p>
                  <button class="button--close_layer" type="button">
                   <span class="ir">
                    최우수판매자
                    안내 레이어 닫기
                   </span>
                  </button>
                 </div>
                </div>
               </li>
              </ul>
             </div>
             <button class="button--favorite ">
              <span class="icon--favorite">
               <span class="for-a11y">
                관심상품 등록하기
               </span>
              </span>
             </button>
            </div>
           </div>
          </div>
         </div>
         <div class="component component--item_card type--general">
          <h4 class="text--module_title">
           일반상품 아이템카드
          </h4>
          <div class="itemcard">
           <div class="section--itemcard">
            <div class="section--itemcard_img">
             <a class="link--itemcard image--loading" href="/DetailView.aspx?itemno=B295819135" target="_blank">
              <div class="lazyload-placeholder" style="height:100%">
              </div>
             </a>
            </div>
            <div class="section--itemcard_info">
             <div class="section--itemcard_info_major">
              <div class="area--itemcard_title">
               <span class="text--itemcard_title ellipsis">
                <a class="link--itemcard" href="/DetailView.aspx?itemno=B295819135" target="_blank">
                 <span class="for-a11y">
                  브랜드명
                 </span>
                 <span class="text--brand">
                 </span>
                 <span class="for-a11y">
                  상품명
                 </span>
                 <span class="text--title">
                  2018년 햇꿀밤고구마/촉촉호박고구마
                 </span>
                </a>
               </span>
              </div>
              <div class="area--itemcard_price">
               <span class="discount" title="할인률">
                <strong class="text--discount">
                </strong>
                <span class="text--unit">
                </span>
                <span class="for-a11y">
                 할인
                </span>
               </span>
               <span class="price_seller">
                <span class="for-a11y">
                 할인적용금액
                </span>
                <strong class="text--price_seller">
                 19,700
                </strong>
                <span class="text--unit">
                 원
                </span>
               </span>
               <span class="price_original">
                <span class="for-a11y">
                 상품금액
                </span>
                <strong class="text--price_original">
                 19,800
                </strong>
                <span class="text--unit">
                 원
                </span>
               </span>
              </div>
             </div>
             <div class="section--itemcard_info_add">
              <ul class="list--addinfo">
               <li class="item">
                <span class="text--addinfo">
                 무료배송
                </span>
               </li>
              </ul>
             </div>
             <div class="section--itemcard_info_score">
              <ul class="list--score">
               <li class="item awards">
                <span class="for-a11y">
                 만족도
                 96
                 %입니다.
                </span>
                <div class="seller_awards" title="만족도 96 % 입니다">
                 <span class="awards_points" style="width:96%">
                 </span>
                 <span class="bg_star">
                 </span>
                </div>
               </li>
               <li class="item reviewcnt">
                <span class="text--reviewcnt">
                 상품평
                 1,978
                </span>
                <span class="for-a11y">
                 건
                </span>
               </li>
               <li class="item buycnt">
                <span class="text--buycnt">
                 구매
                 9,048
                </span>
                <span class="for-a11y">
                 건
                </span>
               </li>
              </ul>
             </div>
             <div class="section--itemcard_info_shop">
              [linkx]
              
              <span class="for-a11y">
               판매자평가정보
              </span>
              <ul class="list--store_info">
               <li class="item top_seller">
                <div class="section--advertisement ">
                 <button class="button--notice_about_advertisement" title="최우수판매자 안내 레이어 보기" type="button">
                  <span class="text">
                   최우수판매자
                  </span>
                 </button>
                 <div class="layer--information">
                  <strong class="text--information_title">
                   최우수판매자란?
                  </strong>
                  <p class="text--information_description">
                   옥션의 판매인증 평가기준을 모두 달성한 최상위 판매자
                  </p>
                  <button class="button--close_layer" type="button">
                   <span class="ir">
                    최우수판매자
                    안내 레이어 닫기
                   </span>
                  </button>
                 </div>
                </div>
               </li>
              </ul>
             </div>
             <button class="button--favorite ">
              <span class="icon--favorite">
               <span class="for-a11y">
                관심상품 등록하기
               </span>
              </span>
             </button>
            </div>
           </div>
          </div>
         </div>
         <div class="component component--item_card type--general">
          <h4 class="text--module_title">
           일반상품 아이템카드
          </h4>
          <div class="itemcard">
           <div class="section--itemcard">
            <div class="section--itemcard_img">
             [ahref]
             
            </div>
            <div class="section--itemcard_info">
             <div class="section--itemcard_info_major">
              <div class="area--itemcard_title">
               <span class="text--itemcard_title ellipsis">
                [linkx]
                
               </span>
              </div>
              <div class="area--itemcard_price">
               <span class="price_seller">
                <span class="for-a11y">
                 상품금액
                </span>
                <strong class="text--price_seller">
                 1,490
                </strong>
                <span class="text--unit">
                 원
                </span>
               </span>
              </div>
             </div>
             <div class="section--itemcard_info_add">
              <ul class="list--addinfo">
               <li class="item">
                <span class="text--addinfo">
                 배송비 2,500원
                </span>
               </li>
              </ul>
             </div>
             <div class="section--itemcard_info_score">
              <ul class="list--score">
               <li class="item reviewcnt">
                <span class="text--reviewcnt">
                 상품평
                 1
                </span>
                <span class="for-a11y">
                 건
                </span>
               </li>
               <li class="item buycnt">
                <span class="text--buycnt">
                 구매
                 365
                </span>
                <span class="for-a11y">
                 건
                </span>
               </li>
              </ul>
             </div>
             <div class="section--itemcard_info_shop">
              [ahref]
              
              <span class="for-a11y">
               판매자평가정보
              </span>
              <ul class="list--store_info">
               <li class="item top_seller">
                <div class="section--advertisement ">
                 <button class="button--notice_about_advertisement" title="최우수판매자 안내 레이어 보기" type="button">
                  <span class="text">
                   최우수판매자
                  </span>
                 </button>
                 <div class="layer--information">
                  <strong class="text--information_title">
                   최우수판매자란?
                  </strong>
                  <p class="text--information_description">
                   옥션의 판매인증 평가기준을 모두 달성한 최상위 판매자
                  </p>
                  <button class="button--close_layer" type="button">
                   <span class="ir">
                    최우수판매자
                    안내 레이어 닫기
                   </span>
                  </button>
                 </div>
                </div>
               </li>
              </ul>
             </div>
             <button class="button--favorite ">
              <span class="icon--favorite">
               <span class="for-a11y">
                관심상품 등록하기
               </span>
              </span>
             </button>
            </div>
           </div>
          </div>
         </div>
         <div class="component component--item_card type--general">
          <h4 class="text--module_title">
           일반상품 아이템카드
          </h4>
          <div class="itemcard">
           <div class="section--itemcard">
            <div class="section--itemcard_img">
             [ahref]
             
            </div>
            <div class="section--itemcard_info">
             <div class="section--itemcard_info_major">
              <div class="area--itemcard_title">
               <span class="text--itemcard_title ellipsis">
                <a class="link--itemcard" href="/DetailView.aspx?itemno=B204023305" target="_blank">
                 <span class="for-a11y">
                  브랜드명
                 </span>
                 <span class="text--brand">
                 </span>
                 <span class="for-a11y">
                  상품명
                 </span>
                 <span class="text--title">
                  2018 강화 속노랑 고구마 5kg 10kg/호박고구마
                 </span>
                </a>
               </span>
              </div>
              <div class="area--itemcard_price">
               <span class="discount" title="할인률">
                <strong class="text--discount">
                </strong>
                <span class="text--unit">
                </span>
                <span class="for-a11y">
                 할인
                </span>
               </span>
               <span class="price_seller">
                <span class="for-a11y">
                 할인적용금액
                </span>
                <strong class="text--price_seller">
                 27,800
                </strong>
                <span class="text--unit">
                 원
                </span>
               </span>
               <span class="price_original">
                <span class="for-a11y">
                 상품금액
                </span>
                <strong class="text--price_original">
                 27,900
                </strong>
                <span class="text--unit">
                 원
                </span>
               </span>
              </div>
             </div>
             <div class="section--itemcard_info_add">
              <ul class="list--addinfo">
               <li class="item">
                <span class="text--addinfo">
                 무료배송
                </span>
               </li>
              </ul>
             </div>
             <div class="section--itemcard_info_score">
              <ul class="list--score">
               <li class="item awards">
                <span class="for-a11y">
                 만족도
                 96
                 %입니다.
                </span>
                <div class="seller_awards" title="만족도 96 % 입니다">
                 <span class="awards_points" style="width:96%">
                 </span>
                 <span class="bg_star">
                 </span>
                </div>
               </li>
               <li class="item reviewcnt">
                <span class="text--reviewcnt">
                 상품평
                 99
                </span>
                <span class="for-a11y">
                 건
                </span>
               </li>
               <li class="item buycnt">
                <span class="text--buycnt">
                 구매
                 553
                </span>
                <span class="for-a11y">
                 건
                </span>
               </li>
              </ul>
             </div>
             <div class="section--itemcard_info_shop">
              [linkx]
              
             </div>
             <button class="button--favorite ">
              <span class="icon--favorite">
               <span class="for-a11y">
                관심상품 등록하기
               </span>
              </span>
             </button>
            </div>
           </div>
          </div>
         </div>
         <div class="component component--item_card type--general">
          <h4 class="text--module_title">
           일반상품 아이템카드
          </h4>
          <div class="itemcard">
           <div class="section--itemcard">
            <div class="section--itemcard_img">
             <a class="link--itemcard image--loading" href="/DetailView.aspx?itemno=B585712810" target="_blank">
              <div class="lazyload-placeholder" style="height:100%">
              </div>
             </a>
            </div>
            <div class="section--itemcard_info">
             <div class="section--itemcard_info_major">
              <div class="area--itemcard_title">
               <span class="text--itemcard_title ellipsis">
                [linkx]
                
               </span>
              </div>
              <div class="area--itemcard_price">
               <span class="price_seller">
                <span class="for-a11y">
                 상품금액
                </span>
                <strong class="text--price_seller">
                 16,500
                </strong>
                <span class="text--unit">
                 원
                </span>
               </span>
              </div>
             </div>
             <div class="section--itemcard_info_add">
              <ul class="list--addinfo">
               <li class="item">
                <span class="text--addinfo">
                 무료배송
                </span>
               </li>
              </ul>
             </div>
             <div class="section--itemcard_info_score">
              <ul class="list--score">
               <li class="item awards">
                <span class="for-a11y">
                 만족도
                 92
                 %입니다.
                </span>
                <div class="seller_awards" title="만족도 92 % 입니다">
                 <span class="awards_points" style="width:92%">
                 </span>
                 <span class="bg_star">
                 </span>
                </div>
               </li>
               <li class="item reviewcnt">
                <span class="text--reviewcnt">
                 상품평
                 135
                </span>
                <span class="for-a11y">
                 건
                </span>
               </li>
               <li class="item buycnt">
                <span class="text--buycnt">
                 구매
                 357
                </span>
                <span class="for-a11y">
                 건[content10[linkx]content11]
                </span>
               </li>
              </ul>
             </div>
             <div class="section--itemcard_info_shop">
              [ahref]
              
              <span class="for-a11y">
               판매자평가정보
              </span>
              <ul class="list--store_info">
               <li class="item top_seller">
                <div class="section--advertisement ">
                 <button class="button--notice_about_advertisement" title="최우수판매자 안내 레이어 보기" type="button">
                  <span class="text">
                   최우수판매자
                  </span>
                 </button>
                 <div class="layer--information">
                  <strong class="text--information_title">
                   최우수판매자란?
                  </strong>
                  <p class="text--information_description">
                   옥션의 판매인증 평가기준을 모두 달성한 최상위 판매자
                  </p>
                  <button class="button--close_layer" type="button">
                   <span class="ir">
                    최우수판매자
                    안내 레이어 닫기
                   </span>
                  </button>
                 </div>
                </div>
               </li>
              </ul>
             </div>
             <button class="button--favorite ">
              <span class="icon--favorite">
               <span class="for-a11y">
                관심상품 등록하기
               </span>
              </span>
             </button>
            </div>
           </div>
          </div>
         </div>
         <div class="component component--item_card type--general">
          <h4 class="text--module_title">
           일반상품 아이템카드
          </h4>
          <div class="itemcard">
           <div class="section--itemcard">
            <div class="section--itemcard_img">
             [linkx]
             
            </div>
            <div class="section--itemcard_info">
             <div class="section--itemcard_info_major">
              <div class="area--itemcard_title">
               <span class="text--itemcard_title ellipsis">
                [linkx]
                
               </span>
              </div>
              <div class="area--itemcard_price">
               <span class="price_seller">
                <span class="for-a11y">
                 상품금액
                </span>
                <strong class="text--price_seller">
                 9,500
                </strong>
                <span class="text--unit">
                 원
                </span>
               </span>
              </div>
             </div>
             <div class="section--itemcard_info_add">
              <ul class="list--addinfo">
               <li class="item">
                <span class="text--addinfo">
                 배송비 2,500원
                </span>
               </li>
              </ul>
             </div>
             <div class="section--itemcard_info_score">
              <ul class="list--score">
               <li class="item awards">
                <span class="for-a11y">
                 만족도
                 100
                 %입니다.
                </span>
                <div class="seller_awards" title="만족도 100 % 입니다">
                 <span class="awards_points" style="width:100%">
                 </span>
                 <span class="bg_star">
                 </span>
                </div>
               </li>
               <li class="item reviewcnt">
                <span class="text--reviewcnt">
                 상품평
                 17
                </span>
                <span class="for-a11y">
                 건[keywordx][symbolx][keywordx][symbolx][bracketl1][keywordx][bracketr1][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][link][link][keywordx][symbolx][keywordx][symbolx][bracketl2][keywordx][bracketr2][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx]
                </span>
               </li>
               <li class="item buycnt">
                <span class="text--buycnt">
                 구매
                 474
                </span>
                <span class="for-a11y">
                 건
                </span>
               </li>
              </ul>
             </div>
             <div class="section--itemcard_info_shop">
              [linkx]
              
              <span class="for-a11y">
               판매자평가정보
              </span>
              <ul class="list--store_info">
               <li class="item">
                <span class="text--store_info">
                 배송
                </span>
               </li>
               <li class="item">
                <span class="text--store_info">
                 상품평우수
                </span>
               </li>
              </ul>
             </div>
             <button class="button--favorite ">
              <span class="icon--favorite">
               <span class="for-a11y">
                관심상품 등록하기
               </span>
              </span>
             </button>
            </div>
           </div>
          </div>
         </div>
         <div class="component component--item_card type--general">
          <h4 class="text--module_title">
           일반상품 아이템카드
          </h4>
          <div class="itemcard">
           <div class="section--component_title">
            <p class="text--title">
             일반등록
            </p>
            <span class="text--smiledelivery_slogan">
            </span>
           </div>
           <div class="section--itemcard">
            <div class="section--itemcard_img">
             [linkx]
             
            </div>
            <div class="section--itemcard_info">
             <div class="section--itemcard_info_major">
              <div class="area--itemcard_title">
               <span class="text--itemcard_title ellipsis">
                <a class="link--itemcard" href="/DetailView.aspx?itemno=B625893262" target="_blank">
                 <span class="for-a11y">
                  브랜드명
                 </span>
                 <span class="text--brand">
                 </span>
                 <span class="for-a11y">
                  상품명
                 </span>
                 <span class="text--title">
                  (행사상품)꿀고구마_1.5KG 박스
                 </span>
                </a>
               </span>
              </div>
              <div class="area--itemcard_price">
               <span class="price_seller">
                <span class="for-a11y">
                 상품금액
                </span>
                <strong class="text--price_seller">
                 6,750
                </strong>
                <span class="text--unit">
                 원
                </span>
               </span>
              </div>
             </div>
             <div class="section--itemcard_info_add">
              <ul class="list--addinfo">
               <li class="item">
                <span class="text--addinfo">
                 당일배송
                </span>
               </li>
               <li class="item">
                <span class="text--addinfo">
                 배송비 3,000원
                </span>
               </li>
              </ul>
             </div>
             <div class="section--itemcard_info_score">
              <ul class="list--score">
               <li class="item awards">
                <span class="for-a11y">
                 만족도
                 96
                 %입니다.
                </span>
                <div class="seller_awards" title="만족도 96 % 입니다">
                 <span class="awards_points" style="width:96%">
                 </span>
                 <span class="bg_star">
                 </span>
                </div>
               </li>
               <li class="item reviewcnt">
                <span class="text--reviewcnt">
                 상품평
                 430
                </span>
                <span class="for-a11y">
                 건
                </span>
               </li>
               <li class="item buycnt">
                <span class="text--buycnt">
                 구매
                 1,023
                </span>
                <span class="for-a11y">
                 건
                </span>
               </li>
              </ul>
             </div>
             <div class="section--itemcard_info_shop">
              [ahref]
              
              <span class="for-a11y">
               판매자평가정보
              </span>
              <ul class="list--store_info">
               <li class="item top_seller">
                <div class="section--advertisement ">
                 <button class="button--notice_about_advertisement" title="최우수판매자 안내 레이어 보기" type="button">
                  <span class="text">
                   최우수판매자
                  </span>
                 </button>
                 <div class="layer--information">
                  <strong class="text--information_title">
                   최우수판매자란?
                  </strong>
                  <p class="text--information_description">
                   옥션의 판매인증 평가기준을 모두 달성한 최상위 판매자
                  </p>
                  <button class="button--close_layer" type="button">
                   <span class="ir">
                    최우수판매자
                    안내 레이어 닫기
                   </span>
                  </button>
                 </div>
                </div>
               </li>
              </ul>
             </div>
             <button class="button--favorite ">
              <span class="icon--favorite">
               <span class="for-a11y">
                관심상품 등록하기
               </span>
              </span>
             </button>
            </div>
           </div>
          </div>
         </div>
         <div class="component component--item_card type--general">
          <h4 class="text--module_title">
           일반상품 아이템카드
          </h4>
          <div class="itemcard">
           <div class="section--itemcard">
            <div class="section--itemcard_img">
             [linkx]
             
            </div>
            <div class="section--itemcard_info">
             <div class="section--itemcard_info_major">
              <div class="area--itemcard_title">
               <span class="text--itemcard_title ellipsis">
                [ahref]
                
               </span>
              </div>
              <div class="area--itemcard_price">
               <span class="price_seller">
                <span class="for-a11y">
                 상품금액
                </span>
                <strong class="text--price_seller">
                 15,900
                </strong>
                <span class="text--unit">
                 원
                </span>
               </span>
              </div>
             </div>
             <div class="section--itemcard_info_add">
              <ul class="list--addinfo">
               <li class="item">
                <span class="text--addinfo">
                 무료배송
                </span>
               </li>
              </ul>
             </div>
             <div class="section--itemcard_info_score">
              <ul class="list--score">
               <li class="item awards">
                <span class="for-a11y">
                 만족도
                 94
                 %입니다.
                </span>
                <div class="seller_awards" title="만족도 94 % 입니다">
                 <span class="awards_points" style="width:94%">
                 </span>
                 <span class="bg_star">
                 </span>
                </div>
               </li>
               <li class="item reviewcnt">
                <span class="text--reviewcnt">
                 상품평
                 1,647
                </span>
                <span class="for-a11y">
                 건
                </span>
               </li>
               <li class="item buycnt">
                <span class="text--buycnt">
                 구매
                 4,055
                </span>
                <span class="for-a11y">
                 건
                </span>
               </li>
              </ul>
             </div>
             <div class="section--itemcard_info_shop">
              [linkx]
              
              <span class="for-a11y">
               판매자평가정보
              </span>
              <ul class="list--store_info">
               <li class="item">
                <span class="text--store_info">
                 배송
                </span>
               </li>
               <li class="item">
                <span class="text--store_info">
                 상품평
                </span>
               </li>
               <li class="item">
                <span class="text--store_info">
                 고객응대우수
                </span>
               </li>
              </ul>
             </div>
             <button class="button--favorite ">
              <span class="icon--favorite">
               <span class="for-a11y">
                관심상품 등록하기
               </span>
              </span>
             </button>
            </div>
           </div>
          </div>
         </div>
         <div class="component component--item_card type--general">
          <h4 class="text--module_title">
           일반상품 아이템카드
          </h4>
          <div class="itemcard">
           <div class="section--itemcard">
            <div class="section--itemcard_img">
             [ahref]
             
            </div>
            <div class="section--itemcard_info">
             <div class="section--itemcard_info_major">
              <div class="area--itemcard_title">
               <span class="text--itemcard_title ellipsis">
                [ahref]
                
               </span>
              </div>
              <div class="area--itemcard_price">
               <span class="discount" title="할인률">
                <strong class="text--discount">
                 50
                </strong>
                <span class="text--unit">
                 %
                </span>
                <span class="for-a11y">
                 할인
                </span>
               </span>
               <span class="price_seller">
                <span class="for-a11y">
                 할인적용금액
                </span>
                <strong class="text--price_seller">
                 11,900
                </strong>
                <span class="text--unit">
                 원
                </span>
               </span>
               <span class="price_original">
                <span class="for-a11y">
                 상품금액
                </span>
                <strong class="text--price_original">
                 23,800
                </strong>
                <span class="text--unit">
                 원
                </span>
               </span>
              </div>
             </div>
             <div class="section--itemcard_info_add">
              <ul class="list--addinfo">
               <li class="item">
                <span class="text--addinfo">
                 무료배송
                </span>
               </li>
              </ul>
             </div>
             <div class="section--itemcard_info_score">
              <ul class="list--score">
               <li class="item awards">
                <span class="for-a11y">
                 만족도
                 94
                 %입니다.
                </span>
                <div class="seller_awards" title="만족도 94 % 입니다">
                 <span class="awards_points" style="width:94%">
                 </span>
                 <span class="bg_star">
                 </span>
                </div>
               </li>
               <li class="item reviewcnt">
                <span class="text--reviewcnt">
                 상품평
                 3,880
                </span>
                <span class="for-a11y">
                 건
                </span>
               </li>
               <li class="item buycnt">
                <span class="text--buycnt">
                 구매
                 12,638
                </span>
                <span class="for-a11y">
                 건
                </span>
               </li>
              </ul>
             </div>
             <div class="section--itemcard_info_shop">
              [ahref]
              
              <span class="for-a11y">
               판매자평가정보
              </span>
              <ul class="list--store_info">
               <li class="item top_seller">
                <div class="section--advertisement ">
                 <button class="button--notice_about_advertisement" title="최우수판매자 안내 레이어 보기" type="button">
                  <span class="text">
                   최우수판매자
                  </span>
                 </button>
                 <div class="layer--information">
                  <strong class="text--information_title">
                   최우수판매자란?
                  </strong>
                  <p class="text--information_description">
                   옥션의 판매인증 평가기준을 모두 달성한 최상위 판매자
                  </p>
                  <button class="button--close_layer" type="button">
                   <span class="ir">
                    최우수판매자
                    안내 레이어 닫기
                   </span>
                  </button>
                 </div>
                </div>
               </li>
              </ul>
             </div>
             <button class="button--favorite ">
              <span class="icon--favorite">
               <span class="for-a11y">
                관심상품 등록하기
               </span>
              </span>
             </button>
             <button class="button--related_item" title="연관상품 5 개가 있습니다. ">
              <span class="text--related_item">
               <b class="text--title">
                연관상품
               </b>
               <b class="text--cnt">
                5
               </b>
              </span>
             </button>
            </div>
           </div>
          </div>
          <div class="popup--related_items ">
           <h2 class="section--title">
            [mkey1][symbolx][pkey1][symbolx][keyword1][bracketl1][bracketr1][symbolx][bracketl2][siter1][bracketr2][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx]
           </h2>
           <div class="section--body">
            <div class="section--related_items">
             <div class="section--slick_area">
              <div class="list--related_items">
               <div class="slick-slider slick-initialized">
                <div class="slick-list">
                 <div class="slick-track" style="width:0%;left:NaN%">
                 </div>
                </div>
               </div>
              </div>
             </div>
            </div>
           </div>
          </div>
         </div>
         <div class="component component--item_card type--general">
          <h4 class="text--module_title">
           일반상품 아이템카드
          </h4>
          <div class="itemcard">
           <div class="section--itemcard">
            <div class="section--itemcard_img">
             [linkx]
             
            </div>
            <div class="section--itemcard_info">
             <div class="section--itemcard_info_major">
              <div class="area--itemcard_title">
               <span class="text--itemcard_title ellipsis">
                [ahref]
                
               </span>
              </div>
              <div class="area--itemcard_price">
               <span class="price_seller">
                <span class="for-a11y">
                 상품금액
                </span>
                <strong class="text--price_seller">
                 12,900
                </strong>
                <span class="text--unit">
                 원
                </span>
               </span>
              </div>
             </div>
             <div class="section--itemcard_info_add">
              <ul class="list--addinfo">
               <li class="item">
                <span class="text--addinfo">
                 무료배송
                </span>
               </li>
              </ul>
             </div>
             <div class="section--itemcard_info_score">
              <ul class="list--score">
               <li class="item awards">
                <span class="for-a11y">
                 만족도
                 94
                 %입니다.
                </span>
                <div class="seller_awards" title="만족도 94 % 입니다">
                 <span class="awards_points" style="width:94%">
                 </span>
                 <span class="bg_star">
                 </span>
                </div>
               </li>
               <li class="item reviewcnt">
                <span class="text--reviewcnt">
                 상품평
                 7,713
                </span>
                <span class="for-a11y">
                 건
                </span>
               </li>
               <li class="item buycnt">
                <span class="text--buycnt">
                 구매
                 16,818
                </span>
                <span class="for-a11y">
                 건
                </span>
               </li>
              </ul>
             </div>
             <div class="section--itemcard_info_shop">
              [linkx]
              
              <span class="for-a11y">
               판매자평가정보
              </span>
              <ul class="list--store_info">
               <li class="item">
                <span class="text--store_info">
                 상품평
                </span>
               </li>
               <li class="item">
                <span class="text--store_info">
                 고객응대우수
                </span>
               </li>
              </ul>
             </div>
             <button class="button--favorite ">
              <span class="icon--favorite">
               <span class="for-a11y">
                관심상품 등록하기
               </span>
              </span>
             </button>
             <button class="button--related_item" title="연관상품 7 개가 있습니다. ">
              <span class="text--related_item">
               <b class="text--title">
                연관상품
               </b>
               <b class="text--cnt">
                7
               </b>
              </span>
             </button>
            </div>
           </div>
          </div>
          <div class="popup--related_items ">
           <h2 class="section--title">
            <b>[mkey1][symbolx][pkey1][symbolx][keyword1][bracketl1][bracketr1][symbolx][bracketl2][siter1][bracketr2][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx]</b>
           </h2>
           <div class="section--body">
            <div class="section--related_items">
             <div class="section--slick_area">
              <div class="list--related_items">
               <div class="slick-slider slick-initialized">
                <div class="slick-list">
                 <div class="slick-track" style="width:0%;left:NaN%">
                 </div>
                </div>
               </div>
              </div>
             </div>
            </div>
           </div>
          </div>
         </div>
         <div class="component component--item_card type--general">
          <h4 class="text--module_title">
           일반상품 아이템카드
          </h4>
          <div class="itemcard">
           <div class="section--itemcard">
            <div class="section--itemcard_img">
             [ahref]
             
            </div>
            <div class="section--itemcard_info">
             <div class="section--itemcard_info_major">
              <div class="area--itemcard_title">
               <span class="text--itemcard_title ellipsis">
                <a class="link--itemcard" href="/DetailView.aspx?itemno=A964134085" target="_blank">
                 <span class="for-a11y">
                  브랜드명
                 </span>
                 <span class="text--brand">
                  e키즈약밤
                 </span>
                 <span class="for-a11y">
                  상품명
                 </span>
                 <span class="text--title">
                  온가족간식 키즈약밤1kg -한정특가
                 </span>
                </a>
               </span>
              </div>
              <div class="area--itemcard_price">
               <span class="price_seller">
                <span class="for-a11y">
                 상품금액
                </span>
                <strong class="text--price_seller">
                 7,250
                </strong>
                <span class="text--unit">
                 원
                </span>
               </span>
              </div>
             </div>
             <div class="section--itemcard_info_add">
              <ul class="list--addinfo">
               <li class="item">
                <span class="text--addinfo">
                 배송비 2,500원
                </span>
               </li>
              </ul>
             </div>
             <div class="section--itemcard_info_score">
              <ul class="list--score">
               <li class="item awards">
                <span class="for-a11y">
                 만족도
                 98
                 %입니다.
                </span>
                <div class="seller_awards" title="만족도 98 % 입니다">
                 <span class="awards_points" style="width:98%">
                 </span>
                 <span class="bg_star">
                 </span>
                </div>
               </li>
               <li class="item reviewcnt">
                <span class="text--reviewcnt">
                 상품평
                 4,157
                </span>
                <span class="for-a11y">
                 건
                </span>
               </li>
               <li class="item buycnt">
                <span class="text--buycnt">
                 구매
                 45,164
                </span>
                <span class="for-a11y">
                 건
                </span>
               </li>
              </ul>
             </div>
             <div class="section--itemcard_info_shop">
              [ahref]
              
             </div>
             <button class="button--favorite ">
              <span class="icon--favorite">
               <span class="for-a11y">
                관심상품 등록하기
               </span>
              </span>
             </button>
            </div>
           </div>
          </div>
         </div>
         <div class="component component--item_card type--general">
          <h4 class="text--module_title">
           일반상품 아이템카드
          </h4>
          <div class="itemcard">
           <div class="section--itemcard">
            <div class="section--itemcard_img">
             [linkx]
             
            </div>
            <div class="section--itemcard_info">
             <div class="section--itemcard_info_major">
              <div class="area--itemcard_title">
               <span class="text--itemcard_title ellipsis">
                [ahref]
                
               </span>
              </div>
              <div class="area--itemcard_price">
               <span class="price_seller">
                <span class="for-a11y">
                 상품금액
                </span>
                <strong class="text--price_seller">
                 15,700
                </strong>
                <span class="text--unit">
                 원
                </span>
               </span>
              </div>
             </div>
             <div class="section--itemcard_info_add">
              <ul class="list--addinfo">
               <li class="item">
                <span class="text--addinfo">
                 무료배송
                </span>
               </li>
              </ul>
             </div>
             <div class="section--itemcard_info_score">
              <ul class="list--score">
               <li class="item awards">
                <span class="for-a11y">
                 만족도
                 90
                 %입니다.
                </span>
                <div class="seller_awards" title="만족도 90 % 입니다">
                 <span class="awards_points" style="width:90%">
                 </span>
                 <span class="bg_star">
                 </span>
                </div>
               </li>
               <li class="item reviewcnt">
                <span class="text--reviewcnt">
                 상품평
                 4,477
                </span>
                <span class="for-a11y">
                 건
                </span>
               </li>
               <li class="item buycnt">
                <span class="text--buycnt">
                 구매
                 12,741
                </span>
                <span class="for-a11y">
                 건
                </span>
               </li>
              </ul>
             </div>
             <div class="section--itemcard_info_shop">
              <a class="link--shop" href="/rohsc333" target="_blank" title="스토어로 이동">
               <span class="for-a11y">
                판매자
               </span>
               <span class="text">
                가나안농산
               </span>
              </a>
              <span class="for-a11y">
               판매자평가정보
              </span>
              <ul class="list--store_info">
               <li class="item">
                <span class="text--store_info">
                 배송
                </span>
               </li>
               <li class="item">
                <span class="text--store_info">
                 상품평우수
                </span>
               </li>
              </ul>
             </div>
             <button class="button--favorite ">
              <span class="icon--favorite">
               <span class="for-a11y">
                관심상품 등록하기
               </span>
              </span>
             </button>
            </div>
           </div>
          </div>
         </div>
         <div class="component component--item_card type--general">
          <h4 class="text--module_title">
           일반상품 아이템카드
          </h4>
          <div class="itemcard">
           <div class="section--itemcard">
            <div class="section--itemcard_img">
             <a class="link--itemcard image--loading" href="/DetailView.aspx?itemno=B346138844" target="_blank">
              <div class="lazyload-placeholder" style="height:100%">
              </div>
             </a>
            </div>
            <div class="section--itemcard_info">
             <div class="section--itemcard_info_major">
              <div class="area--itemcard_title">
               <span class="text--itemcard_title ellipsis">
                [linkx]
                
               </span>
              </div>
              <div class="area--itemcard_price">
               <span class="price_seller">
                <span class="for-a11y">
                 상품금액
                </span>
                <strong class="text--price_seller">
                 6,900
                </strong>
                <span class="text--unit">
                 원
                </span>
               </span>
              </div>
             </div>
             <div class="section--itemcard_info_add">
              <ul class="list--addinfo">
               <li class="item">
                <span class="text--addinfo">
                 무료배송
                </span>
               </li>
              </ul>
             </div>
             <div class="section--itemcard_info_score">
              <ul class="list--score">
               <li class="item awards">
                <span class="for-a11y">
                 만족도
                 94
                 %입니다.
                </span>
                <div class="seller_awards" title="만족도 94 % 입니다">
                 <span class="awards_points" style="width:94%">
                 </span>
                 <span class="bg_star">
                 </span>
                </div>
               </li>
               <li class="item reviewcnt">
                <span class="text--reviewcnt">
                 상품평
                 844
                </span>
                <span class="for-a11y">
                 건
                </span>
               </li>
               <li class="item buycnt">
                <span class="text--buycnt">
                 구매
                 1,961
                </span>
                <span class="for-a11y">
                 건
                </span>
               </li>
              </ul>
             </div>
             <div class="section--itemcard_info_shop">
              [linkx]
              
              <span class="for-a11y">
               판매자평가정보
              </span>
              <ul class="list--store_info">
               <li class="item top_seller">
                <div class="section--advertisement ">
                 <button class="button--notice_about_advertisement" title="최우수판매자 안내 레이어 보기" type="button">
                  <span class="text">
                   최우수판매자
                  </span>
                 </button>
                 <div class="layer--information">
                  <strong class="text--information_title">
                   최우수판매자란?
                  </strong>
                  <p class="text--information_description">
                   옥션의 판매인증 평가기준을 모두 달성한 최상위 판매자
                  </p>
                  <button class="button--close_layer" type="button">
                   <span class="ir">
                    최우수판매자
                    안내 레이어 닫기
                   </span>
                  </button>
                 </div>
                </div>
               </li>
              </ul>
             </div>
             <button class="button--favorite ">
              <span class="icon--favorite">
               <span class="for-a11y">
                관심상품 등록하기
               </span>
              </span>
             </button>
            </div>
           </div>
          </div>
         </div>
         <div class="component component--item_card type--general">
          <h4 class="text--module_title">
           일반상품 아이템카드
          </h4>
          <div class="itemcard">
           <div class="section--itemcard">
            <div class="section--itemcard_img">
             [ahref]
             
            </div>
            <div class="section--itemcard_info">
             <div class="section--itemcard_info_major">
              <div class="area--itemcard_title">
               <span class="text--itemcard_title ellipsis">
                [ahref]
                
               </span>
              </div>
              <div class="area--itemcard_price">
               <span class="discount" title="할인률">
                <strong class="text--discount">
                </strong>
                <span class="text--unit">
                </span>
                <span class="for-a11y">
                 할인
                </span>
               </span>
               <span class="price_seller">
                <span class="for-a11y">
                 할인적용금액
                </span>
                <strong class="text--price_seller">
                 15,820
                </strong>
                <span class="text--unit">
                 원
                </span>
               </span>
               <span class="price_original">
                <span class="for-a11y">
                 상품금액
                </span>
                <strong class="text--price_original">
                 15,900
                </strong>
                <span class="text--unit">
                 원
                </span>
               </span>
              </div>
             </div>
             <div class="section--itemcard_info_add">
              <ul class="list--addinfo">
               <li class="item">
                <span class="text--addinfo">
                 무료배송
                </span>
               </li>
              </ul>
             </div>
             <div class="section--itemcard_info_score">
              <ul class="list--score">
               <li class="item awards">
                <span class="for-a11y">
                 만족도
                 92
                 %입니다.
                </span>
                <div class="seller_awards" title="만족도 92 % 입니다">
                 <span class="awards_points" style="width:92%">
                 </span>
                 <span class="bg_star">
                 </span>
                </div>
               </li>
               <li class="item reviewcnt">
                <span class="text--reviewcnt">
                 상품평
                 121
                </span>
                <span class="for-a11y">
                 건
                </span>
               </li>
               <li class="item buycnt">
                <span class="text--buycnt">
                 구매
                 255
                </span>
                <span class="for-a11y">
                 건
                </span>
               </li>
              </ul>
             </div>
             <div class="section--itemcard_info_shop">
              [linkx]
              
              <span class="for-a11y">
               판매자평가정보
              </span>
              <ul class="list--store_info">
               <li class="item top_seller">
                <div class="section--advertisement ">
                 <button class="button--notice_about_advertisement" title="최우수판매자 안내 레이어 보기" type="button">
                  <span class="text">
                   최우수판매자
                  </span>
                 </button>
                 <div class="layer--information">
                  <strong class="text--information_title">
                   최우수판매자란?
                  </strong>
                  <p class="text--information_description">
                   옥션의 판매인증 평가기준을 모두 달성한 최상위 판매자
                  </p>
                  <button class="button--close_layer" type="button">
                   <span class="ir">
                    최우수판매자
                    안내 레이어 닫기
                   </span>
                  </button>
                 </div>
                </div>
               </li>
              </ul>
             </div>
             <button class="button--favorite ">
              <span class="icon--favorite">
               <span class="for-a11y">
                관심상품 등록하기
               </span>
              </span>
             </button>
             <button class="button--related_item" title="연관상품 4 개가 있습니다. ">
              <span class="text--related_item">
               <b class="text--title">
                연관상품
               </b>
               <b class="text--cnt">
                4
               </b>
              </span>
             </button>
            </div>
           </div>
          </div>
          <div class="popup--related_items ">
           <h2 class="section--title">
            <b>[mkey1][symbolx][pkey1][symbolx][keyword1][bracketl1][bracketr1][symbolx][bracketl2][siter1][bracketr2][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx]</b>
           </h2>
           <div class="section--body">
            <div class="section--related_items">
             <div class="section--slick_area">
              <div class="list--related_items">
               <div class="slick-slider slick-initialized">
                <div class="slick-list">
                 <div class="slick-track" style="width:0%;left:NaN%">
                 </div>
                </div>
               </div>
              </div>
             </div>
            </div>
           </div>
          </div>
         </div>
         <div class="component component--item_card type--general">
          <h4 class="text--module_title">
           일반상품 아이템카드
          </h4>
          <div class="itemcard">
           <div class="section--itemcard">
            <div class="section--itemcard_img">
             [ahref]
             
            </div>
            <div class="section--itemcard_info">
             <div class="section--itemcard_info_major">
              <div class="area--itemcard_title">
               <span class="text--itemcard_title ellipsis">
                [linkx]
                
               </span>
              </div>
              <div class="area--itemcard_price">
               <span class="price_seller">
                <span class="for-a11y">
                 상품금액
                </span>
                <strong class="text--price_seller">
                 20,000
                </strong>
                <span class="text--unit">
                 원
                </span>
               </span>
              </div>
             </div>
             <div class="section--itemcard_info_add">
              <ul class="list--addinfo">
               <li class="item">
                <span class="text--addinfo">
                 무료배송
                </span>
               </li>
              </ul>
             </div>
             <div class="section--itemcard_info_score">
              <ul class="list--score">
               <li class="item awards">
                <span class="for-a11y">
                 만족도
                 98
                 %입니다.
                </span>
                <div class="seller_awards" title="만족도 98 % 입니다">
                 <span class="awards_points" style="width:98%">
                 </span>
                 <span class="bg_star">
                 </span>
                </div>
               </li>
               <li class="item reviewcnt">
                <span class="text--reviewcnt">
                 상품평
                 73
                </span>
                <span class="for-a11y">
                 건
                </span>
               </li>
               <li class="item buycnt">
                <span class="text--buycnt">
                 구매
                 339
                </span>
                <span class="for-a11y">
                 건
                </span>
               </li>
              </ul>
             </div>
             <div class="section--itemcard_info_shop">
              [linkx]
              
              <span class="for-a11y">
               판매자평가정보
              </span>
              <ul class="list--store_info">
               <li class="item top_seller">
                <div class="section--advertisement ">
                 <button class="button--notice_about_advertisement" title="최우수판매자 안내 레이어 보기" type="button">
                  <span class="text">
                   최우수판매자
                  </span>
                 </button>
                 <div class="layer--information">
                  <strong class="text--information_title">
                   최우수판매자란?
                  </strong>
                  <p class="text--information_description">
                   옥션의 판매인증 평가기준을 모두 달성한 최상위 판매자
                  </p>
                  <button class="button--close_layer" type="button">
                   <span class="ir">
                    최우수판매자
                    안내 레이어 닫기
                   </span>
                  </button>
                 </div>
                </div>
               </li>
              </ul>
             </div>
             <button class="button--favorite ">
              <span class="icon--favorite">
               <span class="for-a11y">
                관심상품 등록하기
               </span>
              </span>
             </button>
            </div>
           </div>
          </div>
         </div>
         <div class="component component--item_card type--general">
          <h4 class="text--module_title">
           일반상품 아이템카드
          </h4>
          <div class="itemcard">
           <div class="section--itemcard">
            <div class="section--itemcard_img">
             [linkx]
             
            </div>
            <div class="section--itemcard_info">
             <div class="section--itemcard_info_major">
              <div class="area--itemcard_title">
               <span class="text--itemcard_title ellipsis">
                [ahref]
                
               </span>
              </div>
              <div class="area--itemcard_price">
               <span class="price_seller">
                <span class="for-a11y">
                 상품금액
                </span>
                <strong class="text--price_seller">
                 13,900
                </strong>
                <span class="text--unit">
                 원
                </span>
               </span>
              </div>
             </div>
             <div class="section--itemcard_info_add">
              <ul class="list--addinfo">
               <li class="item">
                <span class="text--addinfo">
                 무료배송
                </span>
               </li>
              </ul>
             </div>
             <div class="section--itemcard_info_score">
              <ul class="list--score">
               <li class="item awards">
                <span class="for-a11y">
                 만족도
                 96
                 %입니다.
                </span>
                <div class="seller_awards" title="만족도 96 % 입니다">
                 <span class="awards_points" style="width:96%">
                 </span>
                 <span class="bg_star">
                 </span>
                </div>
               </li>
               <li class="item reviewcnt">
                <span class="text--reviewcnt">
                 상품평
                 122
                </span>
                <span class="for-a11y">
                 건
                </span>
               </li>
               <li class="item buycnt">
                <span class="text--buycnt">
                 구매
                 286
                </span>
                <span class="for-a11y">
                 건
                </span>
               </li>
              </ul>
             </div>
             <div class="section--itemcard_info_shop">
              [ahref]
              
              <span class="for-a11y">
               판매자평가정보
              </span>
              <ul class="list--store_info">
               <li class="item top_seller">
                <div class="section--advertisement ">
                 <button class="button--notice_about_advertisement" title="최우수판매자 안내 레이어 보기" type="button">
                  <span class="text">
                   최우수판매자
                  </span>
                 </button>
                 <div class="layer--information">
                  <strong class="text--information_title">
                   최우수판매자란?
                  </strong>
                  <p class="text--information_description">
                   옥션의 판매인증 평가기준을 모두 달성한 최상위 판매자
                  </p>
                  <button class="button--close_layer" type="button">
                   <span class="ir">
                    최우수판매자
                    안내 레이어 닫기
                   </span>
                  </button>
                 </div>
                </div>
               </li>
              </ul>
             </div>
             <button class="button--favorite ">
              <span class="icon--favorite">
               <span class="for-a11y">
                관심상품 등록하기
               </span>
              </span>
             </button>
             <button class="button--related_item" title="연관상품 4 개가 있습니다. ">
              <span class="text--related_item">
               <b class="text--title">
                연관상품
               </b>
               <b class="text--cnt">
                4
               </b>
              </span>
             </button>
            </div>
           </div>
          </div>
          <div class="popup--related_items ">
           <h2 class="section--title">
            [mkey1][symbolx][pkey1][symbolx][keyword1][bracketl1][bracketr1][symbolx][bracketl2][siter1][bracketr2][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx]
           </h2>
           <div class="section--body">
            <div class="section--related_items">
             <div class="section--slick_area">
              <div class="list--related_items">
               <div class="slick-slider slick-initialized">
                <div class="slick-list">
                 <div class="slick-track" style="width:0%;left:NaN%">
                 </div>
                </div>
               </div>
              </div>
             </div>
            </div>
           </div>
          </div>
         </div>
        </div>
        <div class="section--module_wrap" module-design-id="24">
         <div class="component component--pagination">
          <h4 class="text--module_title">
           페이징
          </h4>
          <span class="link--previous_page off" title="첫 페이지 입니다">
           <span class="icon">
            <span class="ir">
             첫 페이지 입니다.
            </span>
           </span>
          </span>
          <span class="link--page on" title="현재 페이지는 1 페이지 입니다.">
           1
           <span class="ir">
            현재 페이지는 1 페이지 입니다.
           </span>
          </span>
          [linkx]
          
          [linkx]
          
          [linkx]
          
          <a class="link--page" href="/list?category=51220100&amp;k=11&amp;p=5" title="5 페이지로 이동합니다.">
           5
           <span class="ir">
            5 페이지로 이동합니다.
           </span>
          </a>
          [linkx]
          
          [linkx]
          
          [ahref]
          
          <a class="link--page" href="/list?category=51220100&amp;k=11&amp;p=9" title="9 페이지로 이동합니다.">
           9
           <span class="ir">
            9 페이지로 이동합니다.
           </span>
          </a>
          [ahref]
          
          [linkx]
          
         </div>
        </div>
        <div class="section--module_wrap" module-design-id="25">
         <div class="component component--sponsor_link">
          <h4 class="text--module_title">
           스폰서링크
          </h4>
          <div class="section--component_title">
           <p class="text--title">
            스폰서링크
           </p>
           <div class="section--advertisement ">
            <button class="button--notice_about_advertisement" title="광고 안내 레이어 보기" type="button">
             <span class="text">
              광고
             </span>
            </button>
            <div class="layer--information">
             <strong class="text--information_title">
              스폰서링크란?
             </strong>
             <p class="text--information_description">
              제휴사의 광고가 전시되는 영역입니다.
             </p>
             <button class="button--close_layer" type="button">
              <span class="ir">
               광고
               안내 레이어 닫기
              </span>
             </button>
            </div>
           </div>
          </div>
          [ahref]
          
          <ul class="section--link_list">
           <li class="item">
            <div class="section--item_index">
             <span class="text--item_index">
              1
             </span>
            </div>
            [linkx]
            
           </li>
           <li class="item">
            <div class="section--item_index">
             <span class="text--item_index">
              2
             </span>
            </div>
            [ahref]
            
           </li>
           <li class="item">
            <div class="section--item_index">
             <span class="text--item_index">
              3
             </span>
            </div>
            [linkx]
            
           </li>
           <li class="item">
            <div class="section--item_index">
             <span class="text--item_index">
              4
             </span>
            </div>
            [ahref]
            
           </li>
           <li class="item">
            <div class="section--item_index">
             <span class="text--item_index">
              5
             </span>
            </div>
            [linkx]
            
           </li>
          </ul>
         </div>
        </div>
       </div>
      </div>
     </div>
    </div>
    <div id="portal--layer">
    </div>
   </div>
  </div>
  <b style="color:black;background-color:#a0ffff">
   jnice09-ipp30-wq-zq-0120
  </b>
 </body>
</html>|<---