--->|<!DOCTYPE doctype html>
<html lang="ko">
 <head>
  <meta charset="utf-8"/>
  <meta content="no" http-equiv="imagetoolbar"/>
  <meta content="IE=Edge" http-equiv="X-UA-Compatible"/>
  <meta content="고깔모자의 아틀리에 19화" name="title">
   <meta content="고깔모자의 아틀리에 19화" name="subject">
    <meta content="마나모아" name="publisher">
     <meta content="system" name="author"/>
     <meta content="[mkey1][symbolx][pkey3][symbolx][keyword1][bracketl1][keywordx][bracketr1][symbolx][bracketl2][keywordx][bracketr2][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx]" name="keywords"/>
     <meta content="[mkey1][symbolx][pkey2][symbolx][keyword1][bracketl1][keywordx][bracketr1][symbolx][bracketl2][keywordx][bracketr2][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx]" name="description"/>
     <meta content="summary_large_image" name="twitter:card"/>
     <meta content="[mkey1][symbolx][pkey1][symbolx][keyword1][bracketl1][keywordx][bracketr1][symbolx][bracketl2][keywordx][bracketr2][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx]" property="og:title"/>
     <meta content="[mkey1][symbolx][pkey4][symbolx][keyword1][bracketl1][keywordx][bracketr1][symbolx][bracketl2][keywordx][bracketr2][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx]" property="og:site_name"/>
     <meta content="system" property="og:author"/>
     <meta content="article" property="og:type"/>
     <meta content="https://ironmancdn.xyz/upload/8da7f53935b26ebaef6b799005f09d8a.jpg" property="og:image"/>
     <meta content="[mkey1][symbolx][pkey2][symbolx][keyword1][bracketl1][keywordx][bracketr1][symbolx][bracketl2][keywordx][bracketr2][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx]" property="og:description"/>
     <meta content="[mkey1][symbolx][pkey4][symbolx][keyword1][bracketl1][keywordx][bracketr1][symbolx][bracketl2][keywordx][bracketr2][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx]" property="og:url"/>
     <title>
      [mkey1][symbolx][pkey1][symbolx][keyword1][bracketl1][keywordx][bracketr1][symbolx][bracketl2][keywordx][bracketr2][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx]
     </title>
    </meta>
   </meta>
  </meta>
 </head>
 <body class="responsive is-pc" oncopy="return false" oncut="return false">
  <div class="wrapper boxed ko" id="thema_wrapper">
   <header class="m-header">
    <div class="at-container" style="height:80px;">
     <div class="header-wrap">
      <div class="mobile-header">
       <div>
        [ahref]
        
       </div>
       <div class="header-search">
        <form class="form" method="get" name="tsearch" onsubmit="return tsearch_submit(this);" role="form">
         <div class="input-group input-group-sm">
          <span class="input-group-btn">
           <button class="btn btn-sm" type="submit">
            <i class="fa fa-search fa-lg">
            </i>
           </button>
          </span>
         </div>
        </form>
       </div>
      </div>
     </div>
     <div class="clearfix">
     </div>
    </div>
   </header>
   <nav class="at-menu">
    <div class="pc-menu">
     <div class="at-container">
      <div class="nav-right nav-rw nav-height">
       <ul>
        <li class="">
         [ahref]
         
        </li>
        <li class="">
         <a data-html="true" data-original-title="<nobr>북마크</nobr>" data-placement="top" data-toggle="tooltip" onclick="location.href='/bbs/page.php?hid=favorit_list'">
          <i class="fa fa-bookmark">
          </i>
         </a>
        </li>
        <li>
         [ahref]
         
        </li>
       </ul>
       <div class="clearfix">
       </div>
      </div>
     </div>
     <div class="nav-visible">
      <div class="at-container">
       <div class="nav-top nav-float nav-slide">
        <ul class="menu-ul">
         <li class="menu-li" style="padding:5px">
          [linkx]
          
         </li>
         <li class="menu-li on">
          [linkx]
          
         </li>
         <li class="menu-li off">
          <a class="menu-a nav-height" href="/bbs/page.php?hid=manga_list">
           만화
          </a>
         </li>
         <li class="menu-li off">
          [ahref]
          
          <div class="sub-slide sub-1div">
           <ul class="sub-1dul subm-w pull-left">
            <li class="sub-1dli off">
             [ahref]
             
            </li>
            <li class="sub-1dli off">
             [ahref]
             
            </li>
            <li class="sub-1dli off">
             <a class="sub-1da" href="/bbs/board.php?bo_table=translator">
              역식자게시판
             </a>
            </li>
            <li class="sub-1dli off">
             <a class="sub-1da" href="/bbs/board.php?bo_table=original">
              원본게시판
             </a>
            </li>
            <li class="sub-1dli off">
             [ahref]
             
            </li>
           </ul>
           <div class="clearfix">
           </div>
          </div>
         </li>
         <li class="menu-li off">
          <a class="menu-a nav-height" href="/bbs/board.php?bo_table=ad01">
           인증업체
          </a>
          <div class="sub-slide sub-1div">
           <ul class="sub-1dul subm-w pull-left">
            <li class="sub-1dli off">
             [linkx]
             
            </li>
            <li class="sub-1dli off">
             [linkx]
             
            </li>
            <li class="sub-1dli off">
             [ahref]
             
            </li>
            <li class="sub-1dli off">
             [linkx]
             
            </li>
           </ul>
           <div class="clearfix">
           </div>
          </div>
         </li>
         <li class="menu-li" style="padding:2px">
          <div class="header-search">
           <form class="form" method="get" name="tsearch" onsubmit="return tsearch_submit(this);" role="form">
            <div class="input-group input-group-sm">
             <span class="input-group-btn">
              <button class="btn btn-sm" type="submit">
               <i class="fa fa-search fa-lg">
               </i>
              </button>
             </span>
            </div>
           </form>
          </div>
         </li>
        </ul>
       </div>
      </div>
     </div>
     <div class="clearfix">
     </div>
     <div class="nav-back">
     </div>
    </div>
    <div class="pc-menu-all">
     <div class="collapse" id="menu-all">
      <div class="at-container table-responsive">
       <table class="table">
        <tr>
         <td class="on">
          [linkx]
          
         </td>
         <td class="off">
          [ahref]
          
         </td>
         <td class="off">
          [linkx]
          
          <div class="sub-1div">
           <ul class="sub-1dul">
            <li class="sub-1dli off">
             <a class="sub-1da" href="/bbs/board.php?bo_table=free">
              자유게시판
             </a>
            </li>
            <li class="sub-1dli off">
             [linkx]
             
            </li>
            <li class="sub-1dli off">
             <a class="sub-1da" href="/bbs/board.php?bo_table=translator">
              역식자게시판
             </a>
            </li>
            <li class="sub-1dli off">
             <a class="sub-1da" href="/bbs/board.php?bo_table=original">
              원본게시판
             </a>
            </li>
            <li class="sub-1dli off">
             [linkx]
             
            </li>
           </ul>
          </div>
         </td>
         <td class="off">
          [linkx]
          
          <div class="sub-1div">
           <ul class="sub-1dul">
            <li class="sub-1dli off">
             [linkx]
             
            </li>
            <li class="sub-1dli off">
             [ahref]
             
            </li>
            <li class="sub-1dli off">
             [linkx]
             
            </li>
            <li class="sub-1dli off">
             [ahref]
             
            </li>
           </ul>
          </div>
         </td>
        </tr>
       </table>
       <div class="menu-all-btn">
        <div class="btn-group">
         [ahref]
         
         <a class="btn btn-lightgray" data-target="#menu-all" data-toggle="collapse" href=";">
          <i class="fa fa-times">
          </i>
         </a>
        </div>
       </div>
      </div>
     </div>
    </div>
    <div class="m-menu">
     <div class="m-wrap">
      <div class="at-container">
       <div class="m-table en">
        <div class="m-icon">
         <a href=";" onclick="sidebar_open('sidebar-menu');">
          <i class="fa fa-bars">
          </i>
         </a>
        </div>
        <div class="m-list">
         <div class="m-nav" id="mobile_nav">
          <ul class="clearfix">
           <li>
            [linkx]
            
           </li>
           <li>
            <a href="/bbs/page.php?hid=manga_list">
             만화
            </a>
           </li>
           <li>
            [ahref]
            
           </li>
           <li>
            <a href="/bbs/board.php?bo_table=ad01">
             인증업체
            </a>
           </li>
          </ul>
         </div>
        </div>
        <div class="m-icon">
         [linkx]
         
        </div>
        <div class="m-icon">
         [linkx]
         
        </div>
       </div>
      </div>
     </div>
     <div class="clearfix">
     </div>
    </div>
   </nav>
   <div class="clearfix">
   </div>
   <div class="at-body">
    <div class="at-container">
     <div class="row at-row">
      <div class="col-md-9 at-col at-main">
       <div class="widget-box">
        <div class="ad-banner-widget main-banner" data-mobile="http://oi67.tinypic.com/2mo8fg6.jpg" data-pc="http://i64.tinypic.com/2j160j7.gif" onclick="window.open('http://maa-333.com','_blank')" style="">
        </div>
        <div class="ad-banner-widget main-banner" data-mobile="http://i67.tinypic.com/1yr3fb.gif" data-pc="http://oi64.tinypic.com/30mo20p.jpg" onclick="window.open('http://www.wawa1004.com','_blank')" style="">
        </div>
        <div class="ad-banner-widget main-banner" data-mobile="http://i68.tinypic.com/vzzoko.gif" data-pc="http://i65.tinypic.com/2u59cnd.gif" onclick="window.open('http://www.jgm38.com/','_blank')" style="">
        </div>
       </div>
       <div class="viewer-container view-wrap">
        <div class="comic-navbar">
         <div class="navbar-wrapper">
          <div class="toon-nav">
           [ahref]
           
           <span style="width: 10px;">
           </span>
           <div class="only-pc">
            [linkx]
            
            <select class="chapter_selector">
            </select>
            [linkx]
            
           </div>
           <span style="width: 10px;">
           </span>
           [ahref]
           
          </div>
          <div class="toon-info">
           <div class="toon-img hidden-xs">
           </div>
           <div class="toon-title">
            고깔모자의 아틀리에 19화
            <span style="font-size:12px; color: #666666;">
             (23/23)
            </span>
            <br/>
            <span class="count" style="font-size:12px;font-weight:100">
             인기 : 7841
            </span>
            <span class="count" style="font-size:12px;font-weight:100">
             <i class="fa fa-commenting-o">
             </i>
             31
            </span>
            <span class="count" style="font-size:12px;font-weight:100">
             <i class="fa fa-thumbs-o-up">
             </i>
             13
            </span>
           </div>
          </div>
         </div>
        </div>
        <div style="text-align: right; padding:0 20px 10px 0;">
         <div class="only-mobile">
          [ahref]
          
          <select class="chapter_selector">
          </select>
          <a alt="다음화" class="chapter_next">
           <i aria-hidden="true" class="fa fa-chevron-circle-right at-tip" data-original-title="다음화" data-placement="top" data-toggle="tooltip">
           </i>
          </a>
         </div>
        </div>
        <div>
         <div class="manga-bottom-navi">
          <div alt="이전화" class="chapter_prev">
           ◀ 이전화
          </div>
          <div alt="다음화" class="chapter_next">
           다음화 ▶
          </div>
         </div>
        </div>
        <div class="widget-box">
         <div class="ad-banner-widget fit-banner" data-mobile="http://i64.tinypic.com/4hyvpe.jpg" data-pc="http://i67.tinypic.com/2z906r5.gif" onclick="window.open('http://www.ca9xno.com/','_blank')" style="">
         </div>
        </div>
        <div style="text-align:center">
         <div class="view-content scroll-viewer">
          <div class="mm">
          </div>
         </div>
        </div>
        <div class="widget-box">
         <div class="ad-banner-widget fit-banner" data-mobile="http://i68.tinypic.com/vzzoko.gif" data-pc="http://i65.tinypic.com/nwh2kl.gif" onclick="window.open('http://jgm38.com','_blank')" style="">
         </div>
        </div>
        <div class="print-hide view-good-box">
         <span class="view-good">
          [ahref]
          
         </span>
         <span class="view-good">
          <a class="favorit " href=")">
           <div class="text">
            북마크
           </div>
           <i class="fa fa-bookmark">
           </i>
          </a>
         </span>
        </div>
        <p>
        </p>
        <div class="bottom-navi">
         <i class="chapter_prev fa fa-chevron-circle-left">
         </i>
         <select class="chapter_selector">
         </select>
         <i class="chapter_next fa fa-chevron-circle-right">
         </i>
         <div class="spacer">
         </div>
         <a class="btn btn-black btn-sm" href="/bbs/board.php?bo_table=manga&amp;wr_id=231800">
          <i class="fa fa-book">
          </i>
          <span>
           첫화보기
          </span>
         </a>
         [ahref]
         
        </div>
        <div class="manga-viewer-modal">
         <i class="closer fa fa-close" onclick="on_close_viewer()">
         </i>
         <div class="header">
          <div>
           <div class="buttons">
            <i class="fa fa-square" onclick="on_toggle_onepage_mode(this)">
             <span>
              한쪽
             </span>
            </i>
            <i class="fa fa-expand" onclick="on_fullscreen()">
             <span>
              전체화면
             </span>
            </i>
            <div class="spacer">
            </div>
            <select id="page-selector" onchange="page_selected()">
            </select>
           </div>
          </div>
         </div>
         <div class="viewer-con">
          <div class="control-imgs">
           <canvas id="canvas-viewer">
           </canvas>
           <canvas id="canvas-viewer1">
           </canvas>
          </div>
          <div class="page-btn left" onclick="on_viewer_left()">
           <i class="fa fa-arrow-left">
           </i>
          </div>
          <div class="page-btn right" onclick="on_viewer_right()">
           <i class="fa fa-arrow-right">
           </i>
          </div>
         </div>
        </div>
        <div class="print-hide view-icon">
         <div class="pull-right">
          <div class="form-group">
          </div>
         </div>
         <div class="clearfix">
         </div>
        </div>
        <h3 class="view-comment">
         <b>[mkey1][symbolx][pkeyx][symbolx][keyword1][bracketl1][keywordx][bracketr1][symbolx][bracketl2][keywordx][bracketr2][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx]</b>
        </h3>
        <section class="comment-media" id="bo_vc">
         <div class="media" id="c_1442941">
          <div class="photo pull-left">
          </div>
          <div class="media-body">
           <div class="media-heading">
            <b>
             [linkx]
             
            </b>
            <span class="font-11 text-muted">
             <span class="media-info">
              <i class="fa fa-clock-o">
              </i>
              07.03 08:22
             </span>
            </span>
           </div>
           <div class="media-content">
            <div class="commtent-content">
             안보고 갑니다
            </div>
            <span id="reply_1442941">
            </span>
           </div>
          </div>
          <div class="cmt-good-btn">
           <div>
           </div>
           <a class="cmt-good" href="#" onclick="apms_good('manga', '1442934', 'good', 'c_good1442941', '1442941'); return false;">
            <span id="c_good1442941">
             2
            </span>
           </a>
          </div>
         </div>
         <div class="media" id="c_1442942">
          <div class="photo pull-left">
          </div>
          <div class="media-body">
           <div class="media-heading">
            <b>
             [ahref]
             
            </b>
            <span class="font-11 text-muted">
             <span class="media-info">
              <i class="fa fa-clock-o">
              </i>
              07.03 08:22
             </span>
            </span>
           </div>
           <div class="media-content">
            <div class="commtent-content">
             판타지물은 이상한 생물들이 역시 많은가
            </div>
            <span id="reply_1442942">
            </span>
           </div>
          </div>
          <div class="cmt-good-btn">
           <div>
           </div>
           [linkx]
           
          </div>
         </div>
         <div class="media" id="c_1442946">
          [keywordx][symbolx][keywordx][symbolx][bracketl2][keywordx][bracketr2][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx]<li>[keywordx]</li><li>[pkeyx]</li>[keywordx]
         </div>
         <div class="media" id="c_1442953">
          <div class="photo pull-left">
           <div class="media-object">
            <i class="fa fa-user">
            </i>
           </div>
          </div>
          <div class="media-body">
           <div class="media-heading">
            <b>
             <a href=";" onclick="showSideView(this, 'abc4628', '파워', 'qaauo6NhamOi0cXXm6hlyKWi', '');">
              <span class="member">
               <span class="lv-icon lv-50">
                50
               </span>
               파워
              </span>
             </a>
            </b>
            <span class="font-11 text-muted">
             <span class="media-info">
              <i class="fa fa-clock-o">
              </i>
              07.03 08:25
             </span>
            </span>
           </div>
           <div class="media-content">
            <div class="commtent-content">
             잘 보고 갑니다.
            </div>
            <span id="reply_1442953">
            </span>
           </div>
          </div>
          <div class="cmt-good-btn">
           <div>
           </div>
           <a class="cmt-good" href="#" onclick="apms_good('manga', '1442934', 'good', 'c_good1442953', '1442953'); return false;">
            <span id="c_good1442953">
             0
            </span>
           </a>
          </div>
         </div>
         <div class="media" id="c_1442954">
          <div class="photo pull-left">
          </div>
          <div class="media-body">
           <div class="media-heading">
            <b>
             [ahref]
             
            </b>
            <span class="font-11 text-muted">
             <span class="media-info">
              <i class="fa fa-clock-o">
              </i>
              07.03 08:25
             </span>
            </span>
           </div>
           <div class="media-content">
            <div class="commtent-content">
             잘봤습니다
            </div>
            <span id="reply_1442954">
            </span>
           </div>
          </div>
          <div class="cmt-good-btn">
           <div>
           </div>
           [linkx]
           
          </div>
         </div>
         <div class="media" id="c_1442955">
          <div class="photo pull-left">
          </div>
          <div class="media-body">
           <div class="media-heading">
            <b>
             [ahref]
             
            </b>
            <span class="font-11 text-muted">
             <span class="media-info">
              <i class="fa fa-clock-o">
              </i>
              07.03 08:25
             </span>
            </span>
           </div>
           <div class="media-content">
            <div class="commtent-content">
             고맙씀니다
            </div>
            <span id="reply_1442955">
            </span>
           </div>
          </div>
          <div class="cmt-good-btn">
           <div>
           </div>
           [ahref]
           
          </div>
         </div>
         <div class="media" id="c_1442969">
          <div class="photo pull-left">
          </div>
          <div class="media-body">
           <div class="media-heading">
            <b>
             [linkx]
             
            </b>
            <span class="font-11 text-muted">
             <span class="media-info">
              <i class="fa fa-clock-o">
              </i>
              07.03 08:32
             </span>
            </span>
           </div>
           <div class="media-content">
            <div class="commtent-content">
             계왕님께 가는길
            </div>
            <span id="reply_1442969">
            </span>
           </div>
          </div>
          <div class="cmt-good-btn">
           <div>
           </div>
           [linkx]
           
          </div>
         </div>
         <div class="media" id="c_1442974">
          <div class="photo pull-left">
           <div class="media-object">
            <i class="fa fa-user">
            </i>
           </div>
          </div>
          <div class="media-body">
           <div class="media-heading">
            <b>
             [linkx]
             
            </b>
            <span class="font-11 text-muted">
             <span class="media-info">
              <i class="fa fa-clock-o">
              </i>
              07.03 08:35
             </span>
            </span>
           </div>
           <div class="media-content">
            <div class="commtent-content">
             흐음 슬슬 외눈 가면이 등장할때가...
            </div>
            <span id="reply_1442974">
            </span>
           </div>
          </div>
          <div class="cmt-good-btn">
           <div>
           </div>
           [linkx]
           
          </div>
         </div>
         <div class="media" id="c_1442987">
          <div class="photo pull-left">
          </div>
          <div class="media-body">
           <div class="media-heading">
            <b>
             [ahref]
             
            </b>
            <span class="font-11 text-muted">
             <span class="media-info">
              <i class="fa fa-clock-o">
              </i>
              07.03 08:41
             </span>
            </span>
           </div>
           <div class="media-content">
            <div class="commtent-content">
             펭귄 비스무레하게 생겼네
            </div>
            <span id="reply_1442987">
            </span>
           </div>
          </div>
          <div class="cmt-good-btn">
           <div>
           </div>
           [linkx]
           
          </div>
         </div>
         <div class="media" id="c_1442988">
          <div class="photo pull-left">
           <div class="media-object">
            <i class="fa fa-user">
            </i>
           </div>
          </div>
          <div class="media-body">
           <div class="media-heading">
            <b>
             <a href=";" onclick="showSideView(this, 'ukeun', '동네바보형', '', '');">
              <span class="member">
               <span class="lv-icon lv-18">
                18
               </span>
               동네바보형
              </span>
             </a>
            </b>
            <span class="font-11 text-muted">
             [linkx][ahref][ahref][linkx][pkeyx][ahref][keywordx][symbolx][keywordx][symbolx][bracketl2][keywordx][bracketr2][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][linkx][linkx][ahref][keywordx][symbolx][keywordx][symbolx][bracketl3][keywordx][bracketr3][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][mkey1][linkx][keywordx][symbolx][keywordx][symbolx][bracketl4][keywordx][bracketr4][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][mkey1][keywordx][keywordx][symbolx][keywordx][symbolx][bracketl5][keywordx][bracketr5][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][ahref]
            </span>
           </div>
           <div class="media-content">
            <div class="commtent-content">
             잘 보고 가요~
            </div>
            <span id="reply_1442988">
            </span>
           </div>
          </div>
          <div class="cmt-good-btn">
           <div>
           </div>
           [linkx]
           
          </div>
         </div>
         <div class="media" id="c_1443005">
          <div class="photo pull-left">
           <div class="media-object">
            <i class="fa fa-user">
            </i>
           </div>
          </div>
          <div class="media-body">
           <div class="media-heading">
            <b>
             [linkx]
             
            </b>
            <span class="font-11 text-muted">
             <span class="media-info">
              <i class="fa fa-clock-o">
              </i>
              07.03 08:50
             </span>
            </span>
           </div>
           <div class="media-content">
            <div class="commtent-content">
             잘 봤습니다.
            </div>
            <span id="reply_1443005">
            </span>
           </div>
          </div>
          <div class="cmt-good-btn">
           <div>
           </div>
           [linkx]
           
          </div>
         </div>
         <div class="media" id="c_1443009">
          <div class="photo pull-left">
          </div>
          <div class="media-body">
           <div class="media-heading">
            <b>
             <a href=";" onclick="showSideView(this, 'noochi', '오메가루갈', '', '');">
              <span class="member">
               <span class="lv-icon lv-20">
                20
               </span>
               오메가루갈
              </span>
             </a>
            </b>
            <span class="font-11 text-muted">
             <span class="media-info">
              <i class="fa fa-clock-o">
              </i>
              07.03 08:52
             </span>
            </span>
           </div>
           <div class="media-content">
            <div class="commtent-content">
             감독 멀크락이 코리아빠 닮았네.
             <br>
              아~마벗바의 아들 코리 잼있었는데.
              <br>
               그건 그렇고 더러운 벗바들은 마법 원천기술 공개해라!
              </br>
             </br>
            </div>
            <span id="reply_1443009">
            </span>
           </div>
          </div>
          <div class="cmt-good-btn">
           <div>
           </div>
           [ahref]
           
          </div>
         </div>
         <div class="media" id="c_1443028">
          <div class="photo pull-left">
          </div>
          <div class="media-body">
           <div class="media-heading">
            <b>
             [linkx]
             
            </b>
            <span class="font-11 text-muted">
             <span class="media-info">
              <i class="fa fa-clock-o">
              </i>
              07.03 09:01
             </span>
            </span>
           </div>
           <div class="media-content">
            <div class="commtent-content">
             잘 보고 가요
            </div>
            <span id="reply_1443028">
            </span>
           </div>
          </div>
          <div class="cmt-good-btn">
           <div>
            <h1>
             <b>[mkey1][symbolx][pkeyx][symbolx][keyword1][bracketl1][keywordx][bracketr1][symbolx][bracketl2][keywordx][bracketr2][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx]</b>
            </h1>
           </div>
           [ahref]
           
          </div>
         </div>
         <div class="media" id="c_1443046">
          <div class="photo pull-left">
           <div class="media-object">
            <i class="fa fa-user">
            </i>
           </div>
          </div>
          <div class="media-body">
           <div class="media-heading">
            <b>
             [linkx]
             
            </b>
            <span class="font-11 text-muted">
             <span class="media-info">
              <i class="fa fa-clock-o">
              </i>
              07.03 09:07
             </span>
            </span>
           </div>
           <div class="media-content">
            <div class="commtent-content">
             단순히 길만 꼬여있는건 아니겠지...<li>[pkeyx]</li>[keywordx][pkeyx]
            </div>
            <span id="reply_1443046">
            </span>
           </div>
          </div>
          <div class="cmt-good-btn">
           <div>
           </div>
           [linkx]
           
          </div>
         </div>
         <div class="media" id="c_1443051">
          <div class="photo pull-left">
           <div class="media-object">
            <i class="fa fa-user">
            </i>
           </div>
          </div>
          <div class="media-body">
           <div class="media-heading">
            <b>
             [ahref]
             
            </b>
            <span class="font-11 text-muted">
             <span class="media-info">
              <i class="fa fa-clock-o">
              </i>
              07.03 09:08
             </span>
            </span>
           </div>
           <div class="media-content">
            <div class="commtent-content">
             잘 봤습니다~
             <br/>
             감사합니다~
            </div>
            <span id="reply_1443051">
            </span>
           </div>
          </div>
          <div class="cmt-good-btn">
           <div>
           </div>
           [linkx]
           
          </div>
         </div>
         <div class="media" id="c_1443073">
          <div class="photo pull-left">
           <div class="media-object">
            <i class="fa fa-user">
            </i>
           </div>
          </div>
          <div class="media-body">
           <div class="media-heading">
            <b>
             <a href=";" onclick="showSideView(this, 'stang0902', '빠샤', '', '');">
              <span class="member">
               <span class="lv-icon lv-19">
                19
               </span>
               빠샤
              </span>
             </a>
            </b>
            <span class="font-11 text-muted">
             <span class="media-info">
              <i class="fa fa-clock-o">
              </i>
              07.03 09:17
             </span>
            </span>
           </div>
           <div class="media-content">
            <div class="commtent-content">
             재밌어서 정주행
            </div>
            <span id="reply_1443073">
            </span>
           </div>
          </div>
          <div class="cmt-good-btn">
           <div>
           </div>
           [ahref]
           
          </div>
         </div>
         <div class="media" id="c_1443162">
          <div class="photo pull-left">
           <div class="media-object">
            <i class="fa fa-user">
            </i>
           </div>
          </div>
          <div class="media-body">
           <div class="media-heading">
            <b>
             [linkx]
             
            </b>
            <span class="font-11 text-muted">
             <span class="media-info">
              <i class="fa fa-clock-o">
              </i>
              07.03 09:57
             </span>
            </span>
           </div>
           <div class="media-content">
            <div class="commtent-content">
             재밌엉... 뒤가 궁금한데 넘 감질맛남ㅋㅋ
            </div>
            <span id="reply_1443162">
            </span>
           </div>
          </div>
          <div class="cmt-good-btn">
           <div>
           </div>
           [linkx]
           
          </div>
         </div>
         <div class="media" id="c_1443269">
          <div class="photo pull-left">
           <div class="media-object">
            <i class="fa fa-user">
            </i>
           </div>
          </div>
          <div class="media-body">
           <div class="media-heading">
            <b>
             [ahref]
             
            </b>
            <span class="font-11 text-muted">
             <span class="media-info">
              <i class="fa fa-clock-o">
              </i>
              07.03 10:26
             </span>
            </span>
           </div>
           <div class="media-content">
            <div class="commtent-content">
             유이니군 긍정적ㅇ넼ㅋㅋㅋㅋㅋ
            </div>
            <span id="reply_1443269">
            </span>
           </div>
          </div>
          <div class="cmt-good-btn">
           <div>
           </div>
           <a class="cmt-good" href="#" onclick="apms_good('manga', '1442934', 'good', 'c_good1443269', '1443269'); return false;">
            <span id="c_good1443269">
             0
            </span>
           </a>
          </div>
         </div>
         <div class="media" id="c_1443311">
          <div class="photo pull-left">
           <div class="media-object">
            <i class="fa fa-user">
            </i>
           </div>
          </div>
          <div class="media-body">
           <div class="media-heading">
            <b>
             [ahref]
             
            </b>
            <span class="font-11 text-muted">
             <span class="media-info">
              <i class="fa fa-clock-o">
              </i>
              07.03 10:36
             </span>
            </span>
           </div>
           <div class="media-content">
            <div class="commtent-content">
             잘 보고 갑니다.
            </div>
            <span id="reply_1443311">
            </span>
           </div>
          </div>
          <div class="cmt-good-btn">
           <div>
           </div>
           <a class="cmt-good" href="#" onclick="apms_good('manga', '1442934', 'good', 'c_good1443311', '1443311'); return false;">
            <span id="c_good1443311">
             0
            </span>
           </a>
          </div>
         </div>
         <div class="media" id="c_1443347">
          <div class="photo pull-left">
           <div class="media-object">
            <i class="fa fa-user">
            </i>
           </div>
          </div>
          <div class="media-body">
           <div class="media-heading">
            <b>
             [ahref]
             
            </b>
            <span class="font-11 text-muted">
             <span class="media-info">
              <i class="fa fa-clock-o">
              </i>
              07.03 10:49
             </span>
            </span>
           </div>
           <div class="media-content">
            <div class="commtent-content">
             잘 봤습니다
            </div>
            <span id="reply_1443347">
            </span>
           </div>
          </div>
          <div class="cmt-good-btn">
           <div>
           </div>
           [ahref]
           
          </div>
         </div>
         <div class="media" id="c_1443592">
          <div class="photo pull-left">
           <div class="media-object">
            <i class="fa fa-user">
            </i>
           </div>
          </div>
          <div class="media-body">
           <div class="media-heading">
            <b>
             <a href=";" onclick="showSideView(this, 'liden99', 'liden99', '', '');">
              <span class="member">
               <span class="lv-icon lv-18">
                18
               </span>
               liden99
              </span>
             </a>
            </b>
            <span class="font-11 text-muted">
             <span class="media-info">
              <i class="fa fa-clock-o">
              </i>
              07.03 11:46
             </span>
            </span>
           </div>
           <div class="media-content">
            <div class="commtent-content">
             잘 봤습니다.
            </div>
            <span id="reply_1443592">
            </span>
           </div>
          </div>
          <div class="cmt-good-btn">
           <div>
           </div>
           [linkx]
           
          </div>
         </div>
         <div class="media" id="c_1443830">
          <div class="photo pull-left">
           <div class="media-object">
            <i class="fa fa-user">
            </i>
           </div>
          </div>
          <div class="media-body">
           <div class="media-heading">
            <b>
             <a href=";" onclick="showSideView(this, 'hayanmelody', '쟁반같이둥근달', '', '');">
              <span class="member">
               <span class="lv-icon lv-9">
                9
               </span>
               쟁반같이둥근달
              </span>
             </a>
            </b>
            <span class="font-11 text-muted">
             <span class="media-info">
              <i class="fa fa-clock-o">
              </i>
              07.03 12:26
             </span>
            </span>
           </div>
           <div class="media-content">
            <div class="commtent-content">
             레알 갓 만화
            </div>
            <span id="reply_1443830">
            </span>
           </div>
          </div>
          <div class="cmt-good-btn">
           <div>
           </div>
           <a class="cmt-good" href="#" onclick="apms_good('manga', '1442934', 'good', 'c_good1443830', '1443830'); return false;">
            <span id="c_good1443830">
             0
            </span>
           </a>
          </div>
         </div>
         <div class="media" id="c_1444543">
          <div class="photo pull-left">
           <div class="media-object">
            <i class="fa fa-user">
            </i>
           </div>
          </div>
          <div class="media-body">
           <div class="media-heading">
            <li>[linkx]</li>[keywordx]<li>[keywordx]</li>[pkeyx]
           </div>
           <div class="media-content">
            <div class="commtent-content">
             그림체는 참 이쁜데...
            </div>
            <span id="reply_1444543">
            </span>
           </div>
          </div>
          <div class="cmt-good-btn">
           <div>
           </div>
           [ahref]
           
          </div>
         </div>
         <div class="media" id="c_1445250">
          <div class="photo pull-left">
          </div>
          <div class="media-body">
           <div class="media-heading">
            <b>
             [linkx]
             
            </b>
            <span class="font-11 text-muted">
             <span class="media-info">
              <i class="fa fa-clock-o">
              </i>
              07.03 16:33
             </span>
            </span>
           </div>
           <div class="media-content">
            <div class="commtent-content">
             잘보고갑니다
            </div>
            <span id="reply_1445250">
            </span>
           </div>
          </div>
          <div class="cmt-good-btn">
           <div>
           </div>
           [linkx]
           
          </div>
         </div>
         <div class="media" id="c_1445407">
          <div class="photo pull-left">
           <div class="media-object">
            <i class="fa fa-user">
            </i>
           </div>
          </div>
          <div class="media-body">
           <div class="media-heading">
            <b>
             [keywordx][symbolx][keywordx][symbolx][bracketl4][keywordx][bracketr4][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx]<li>[linkx]</li>[keywordx]<li>[mkey1]</li>
            </b>
            <span class="font-11 text-muted">
             <span class="media-info">
              <i class="fa fa-clock-o">
              </i>
              07.03 17:01
             </span>
            </span>
           </div>
           <div class="media-content">
            <div class="commtent-content">
             리체도 챙모자랑 연결이 있었구나 왠지 저 선생 나머지 두 제자들 전부 그럴 것 같은데;;
            </div>
            <span id="reply_1445407">
            </span>
           </div>
          </div>
          <div class="cmt-good-btn">
           <div>
           </div>
           [ahref]
           
          </div>
         </div>
         <div class="media" id="c_1445751">
          <div class="photo pull-left">
          </div>
          <div class="media-body">
           <div class="media-heading">
            <b>
             [linkx]
             
            </b>
            <span class="font-11 text-muted">
             <span class="media-info">
              <i class="fa fa-clock-o">
              </i>
              07.03 18:01
             </span>
            </span>
           </div>
           <div class="media-content">
            <div class="commtent-content">
             잘 보고 갑니다.
            </div>
            <span id="reply_1445751">
            </span>
           </div>
          </div>
          <div class="cmt-good-btn">
           <div>
           </div>
           [linkx]
           
          </div>
         </div>
         <div class="media" id="c_1445795">
          <div class="photo pull-left">
          </div>
          <div class="media-body">
           <div class="media-heading">
            <b>
             <a href=";" onclick="showSideView(this, 'kdhong0103', 'Hong', '', '');">
              <span class="member">
               <span class="lv-icon lv-46">
                46
               </span>
               Hong
              </span>
             </a>
            </b>
            <span class="font-11 text-muted">
             <span class="media-info">
              <i class="fa fa-clock-o">
              </i>
              07.03 18:08
             </span>
            </span>
           </div>
           <div class="media-content">
            <div class="commtent-content">
             시험장들이 전부금지마법 유적지인가보내
            </div>
            <span id="reply_1445795">
            </span>
           </div>
          </div>
          <div class="cmt-good-btn">
           <div>
           </div>
           [ahref]
           
          </div>
         </div>
         <div class="media" id="c_1447089" style="margin-left:64px;">
          <div class="photo pull-left">
          </div>
          <div class="media-body">
           <div class="media-heading">
            <b>
             [linkx]
             
            </b>
            <span class="font-11 text-muted">
             <span class="media-info">
              <i class="fa fa-clock-o">
              </i>
              07.03 21:51
             </span>
            </span>
           </div>
           <div class="media-content">
            <div class="commtent-content">
             오 그렇네용
            </div>
            <span id="reply_1447089">
            </span>
           </div>
          </div>
          <div class="cmt-good-btn">
           <div>
           </div>
           [ahref]
           
          </div>
         </div>
         <div class="media" id="c_1448034">
          <div class="photo pull-left">
           <div class="media-object">
            <i class="fa fa-user">
            </i>
           </div>
          </div>
          <div class="media-body">
           <div class="media-heading">
            <b>
             <a href=";" onclick="showSideView(this, 'rose', '베르무트', 'obCYn6ecsXDQxNrGqGSa1KM-', '');">
              <span class="member">
               <span class="lv-icon lv-50">
                50
               </span>
               베르무트
              </span>
             </a>
            </b>
            <span class="font-11 text-muted">
             <li>[ahref]</li>[linkx][keywordx][symbolx][keywordx][symbolx][bracketl3][keywordx][bracketr3][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx]
            </span>
           </div>
           <div class="media-content">
            <div class="commtent-content">
             저번사건으로 좀 이상하게 보이게 됐네
             <br/>
             리체를 이용할려고 하는건가?
            </div>
            <span id="reply_1448034">
            </span>
           </div>
          </div>
          <div class="cmt-good-btn">
           <div>
           </div>
           [ahref]
           
          </div>
         </div>
         <div class="media" id="c_1448254">
          <div class="photo pull-left">
           <div class="media-object">
            <i class="fa fa-user">
            </i>
           </div>
          </div>
          <div class="media-body">
           <div class="media-heading">
            <b>
             <a href=";" onclick="showSideView(this, 'leejin456000', '이리시아', '', '');">
              <span class="member">
               <span class="lv-icon lv-9">
                9
               </span>
               이리시아
              </span>
             </a>
            </b>
            <span class="font-11 text-muted">
             <span class="media-info">
              <i class="fa fa-clock-o">
              </i>
              <span class="orangered">
               00:34
              </span>
             </span>
            </span>
           </div>
           <div class="media-content">
            <div class="commtent-content">
             드래곤볼 생각난다
            </div>
            <span id="reply_1448254">
            </span>
           </div>
          </div>
          <div class="cmt-good-btn">
           <div>
           </div>
           [linkx]
           
          </div>
         </div>
         <div class="media" id="c_1448439">
          <div class="photo pull-left">
           <div class="media-object">
            <i class="fa fa-user">
            </i>
           </div>
          </div>
          <div class="media-body">
           <div class="media-heading">
            <b>
             [linkx]
             
            </b>
            <span class="font-11 text-muted">
             <span class="media-info">
              <i class="fa fa-clock-o">
              </i>
              <span class="orangered">
               01:09
              </span>
             </span>
            </span>
           </div>
           <div class="media-content">
            <div class="commtent-content">
             금지마법 막으려고 일부만 사용하고 통제한다니.. 이거 완전..
            </div>
            <span id="reply_1448439">
            </span>
           </div>
          </div>
          <div class="cmt-good-btn">
           <div>
           </div>
           [linkx]
           
          </div>
         </div>
        </section>
        <div class="print-hide well text-center">
         <a href="/bbs/login.php?wr_id=1442934&amp;url=https%3A%2F%2Fmanamoa8.net%2Fbbs%2Fboard.php%3Fbo_table%3Dmanga%26amp%3Bwr_id%3D1442934">
          로그인한 회원만 댓글 등록이 가능합니다.
         </a>
        </div>
        <div class="clearfix">
        </div>
        <div class="print-hide view-btn text-right">
         <div class="btn-group">
          [linkx]
          
         </div>
         <div class="clearfix">
         </div>
        </div>
       </div>
       <section class="board-list">
        <div class="list-wrap">
         <form action="/board_list_update.php" class="form" id="fboardlist" method="post" name="fboardlist" onsubmit="return fboardlist_submit(this);" role="form">
          <div class="list-container">
           <div class="post-row">
            <div class="media post-list">
             <div class="pull-left post-image">
              [linkx]
              
             </div>
             <div class="pull-right post-info">
              <p>
               [linkx]
               
              </p>
              <div style="margin-top:5px; text-align: center;">
               <span class="txt-normal">
                07-04 00:30
               </span>
              </div>
              <p style="text-align:center">
               인기 13569
              </p>
             </div>
             <div class="media-body">
              <div class="post-content">
               <div class="post-subject">
                <a href="/bbs/board.php?bo_table=manga&amp;wr_id=1448224" style="font-size:16px">
                 <span class="wr-icon wr-new">
                  NEW
                 </span>
                 드라콘! 2화
                </a>
                <div style="text-align: left;color:gray;">
                 <span class="count" style="font-size:13px">
                  <i class="fa fa-commenting-o">
                  </i>
                  37
                 </span>
                 <span class="count" style="font-size:13px">
                  <i class="fa fa-thumbs-o-up">
                  </i>
                  14
                 </span>
                </div>
               </div>
              </div>
             </div>
            </div>
           </div>
           <div class="post-row">
            <div class="media post-list">
             <div class="pull-left post-image">
              [ahref]
              
             </div>
             <div class="pull-right post-info">
              <p>
               [ahref]
               
              </p>
              <div style="margin-top:5px; text-align: center;">
               <span class="txt-normal">
                07-04 00:16
               </span>
              </div>
              <p style="text-align:center">
               인기 15075
              </p>
             </div>
             <div class="media-body">
              <div class="post-content">
               <div class="post-subject">
                [linkx]
                
                <div style="text-align: left;color:gray;">
                 <span class="count" style="font-size:13px">
                  <i class="fa fa-commenting-o">
                  </i>
                  32
                 </span>
                 <span class="count" style="font-size:13px">
                  <i class="fa fa-thumbs-o-up">
                  </i>
                  14
                 </span>
                </div>
               </div>
              </div>
             </div>
            </div>
           </div>
           <div class="post-row">
            <div class="media post-list">
             <div class="pull-left post-image">
              [ahref]
              
             </div>
             <div class="pull-right post-info">
              <p>
               [ahref]
               
              </p>
              <div style="margin-top:5px; text-align: center;">
               <span class="txt-normal">
                07-04 00:06
               </span>
              </div>
              <p style="text-align:center">
               인기 6561
              </p>
             </div>
             <div class="media-body">
              <div class="post-content">
               <div class="post-subject">
                [linkx]
                
                <div style="text-align: left;color:gray;">
                 <span class="count" style="font-size:13px">
                  <i class="fa fa-commenting-o">
                  </i>
                  22
                 </span>
                 <span class="count" style="font-size:13px">
                  <i class="fa fa-thumbs-o-up">
                  </i>
                  10
                 </span>
                </div>
               </div>
              </div>
             </div>
            </div>
           </div>
           <div class="post-row">
            <div class="media post-list">
             <div class="pull-left post-image">
              <a class="ellipsis" href="/bbs/board.php?bo_table=manga&amp;wr_id=1447985">
               <div class="img-wrap">
                <div class="img-item">
                </div>
               </div>
              </a>
             </div>
             <div class="pull-right post-info">
              <p>
               [linkx]
               
              </p>
              <div style="margin-top:5px; text-align: center;">
               <span class="txt-normal">
                07-04 00:00
               </span>
              </div>
              <p style="text-align:center">
               인기 4888
              </p>
             </div>
             <div class="media-body">
              <div class="post-content">
               <div class="post-subject">
                [linkx]
                
                <div style="text-align: left;color:gray;">
                 <span class="count" style="font-size:13px">
                  <i class="fa fa-commenting-o">
                  </i>
                  26
                 </span>
                 <span class="count" style="font-size:13px">
                  <i class="fa fa-thumbs-o-up">
                  </i>
                  6
                 </span>
                </div>
               </div>
              </div>
             </div>
            </div>
           </div>
           <div class="post-row">
            <div class="media post-list">
             <div class="pull-left post-image">
              [linkx]
              
             </div>
             <div class="pull-right post-info">
              <p>
               <a class="btn btn-xs btn-primary" href="/bbs/page.php?hid=manga_detail&amp;manga_id=255">
                전편보기
               </a>
              </p>
              <div style="margin-top:5px; text-align: center;">
               <span class="txt-normal">
                07-03 23:40
               </span>
              </div>
              <p style="text-align:center">
               인기 26612
              </p>
             </div>
             <div class="media-body">
              <div class="post-content">
               [keywordx][keywordx][pkeyx][keywordx][symbolx][keywordx][symbolx][bracketl1][keywordx][bracketr1][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][pkeyx][keywordx][keywordx][keywordx][ahref][linkx][linkx]
              </div>
             </div>
            </div>
           </div>
           <div class="post-row">
            <div class="media post-list">
             <div class="pull-left post-image">
              [ahref]
              
             </div>
             <div class="pull-right post-info">
              <p>
               [linkx]
               
              </p>
              <div style="margin-top:5px; text-align: center;">
               <span class="txt-normal">
                07-03 23:20
               </span>
              </div>
              <p style="text-align:center">
               인기 21872
              </p>
             </div>
             <div class="media-body">
              <div class="post-content">
               <div class="post-subject">
                [ahref]
                
                <div style="text-align: left;color:gray;">
                 <span class="count" style="font-size:13px">
                  <i class="fa fa-commenting-o">
                  </i>
                  44
                 </span>
                 <span class="count" style="font-size:13px">
                  <i class="fa fa-thumbs-o-up">
                  </i>
                  21
                 </span>
                </div>
               </div>
              </div>
             </div>
            </div>
           </div>
           <div class="post-row">
            <div class="media post-list">
             <div class="pull-left post-image">
              [ahref]
              
             </div>
             <div class="pull-right post-info">
              <p>
               [linkx]
               
              </p>
              <div style="margin-top:5px; text-align: center;">
               <span class="txt-normal">
                07-03 23:00
               </span>
              </div>
              <p style="text-align:center">
               인기 8967
              </p>
             </div>
             <div class="media-body">
              <div class="post-content">
               <div class="post-subject">
                [linkx]
                
                <div style="text-align: left;color:gray;">
                 <span class="count" style="font-size:13px">
                  <i class="fa fa-commenting-o">
                  </i>
                  20
                 </span>
                 <span class="count" style="font-size:13px">
                  <i class="fa fa-thumbs-o-up">
                  </i>
                  9
                 </span>
                </div>
               </div>
              </div>
             </div>
            </div>
           </div>
           <div class="post-row">
            <div class="media post-list">
             <div class="pull-left post-image">
              <a class="ellipsis" href="/bbs/board.php?bo_table=manga&amp;wr_id=1447435">
               <div class="img-wrap">
                <div class="img-item">
                </div>
               </div>
              </a>
             </div>
             <div class="pull-right post-info">
              <p>
               [linkx]
               
              </p>
              <div style="margin-top:5px; text-align: center;">
               <span class="txt-normal">
                07-03 22:40
               </span>
              </div>
              <p style="text-align:center">
               인기 47243
              </p>
             </div>
             <div class="media-body">
              <div class="post-content">
               <div class="post-subject">
                [ahref]
                
                <div style="text-align: left;color:gray;">
                 <span class="count" style="font-size:13px">
                  <i class="fa fa-commenting-o">
                  </i>
                  120
                 </span>
                 <span class="count" style="font-size:13px">
                  <i class="fa fa-thumbs-o-up">
                  </i>
                  50
                 </span>
                </div>
               </div>
              </div>
             </div>
            </div>
           </div>
           <div class="post-row">
            <div class="media post-list">
             <div class="pull-left post-image">
              <a class="ellipsis" href="/bbs/board.php?bo_table=manga&amp;wr_id=1447296">
               <div class="img-wrap">
                <div class="img-item">
                </div>
               </div>
              </a>
             </div>
             <div class="pull-right post-info">
              <p>
               [linkx]
               
              </p>
              <div style="margin-top:5px; text-align: center;">
               <span class="txt-normal">
                07-03 22:20
               </span>
              </div>
              <p style="text-align:center">
               인기 33645
              </p>
             </div>
             <div class="media-body">
              <div class="post-content">
               <div class="post-subject">
                [ahref]
                
                <div style="text-align: left;color:gray;">
                 <span class="count" style="font-size:13px">
                  <i class="fa fa-commenting-o">
                  </i>
                  82
                 </span>
                 <span class="count" style="font-size:13px">
                  <i class="fa fa-thumbs-o-up">
                  </i>
                  39
                 </span>
                </div>
               </div>
              </div>
             </div>
            </div>
           </div>
           <div class="post-row">
            <div class="media post-list">
             <div class="pull-left post-image">
              <a class="ellipsis" href="/bbs/board.php?bo_table=manga&amp;wr_id=1447148">
               <div class="img-wrap">
                <div class="img-item">
                </div>
               </div>
              </a>
             </div>
             <div class="pull-right post-info">
              <p>
               <a class="btn btn-xs btn-primary" href="/bbs/page.php?hid=manga_detail&amp;manga_id=617">
                전편보기
               </a>
              </p>
              <div style="margin-top:5px; text-align: center;">
               <span class="txt-normal">
                07-03 22:00
               </span>
              </div>
              <p style="text-align:center">
               인기 32211
              </p>
             </div>
             <div class="media-body">
              <div class="post-content">
               <div class="post-subject">
                [linkx]
                
                <div style="text-align: left;color:gray;">
                 <span class="count" style="font-size:13px">
                  <i class="fa fa-commenting-o">
                  </i>
                  86
                 </span>
                 <span class="count" style="font-size:13px">
                  <i class="fa fa-thumbs-o-up">
                  </i>
                  47
                 </span>
                </div>
               </div>
              </div>
             </div>
            </div>
           </div>
           <div class="post-row">
            <div class="media post-list">
             <div class="pull-left post-image">
              [linkx]
              
             </div>
             <div class="pull-right post-info">
              <p>
               [linkx]
               
              </p>
              <div style="margin-top:5px; text-align: center;">
               <span class="txt-normal">
                07-03 21:39
               </span>
              </div>
              <p style="text-align:center">
               인기 23213
              </p>
             </div>
             <div class="media-body">
              <div class="post-content">
               <div class="post-subject">
                <a href="/bbs/board.php?bo_table=manga&amp;wr_id=1447014" style="font-size:16px">
                 <span class="wr-icon wr-new">
                  NEW
                 </span>
                 돌직구 그X그녀 20화
                </a>
                <div style="text-align: left;color:gray;">
                 <span class="count" style="font-size:13px">
                  <i class="fa fa-commenting-o">
                  </i>
                  103
                 </span>
                 <span class="count" style="font-size:13px">
                  <i class="fa fa-thumbs-o-up">
                  </i>
                  44
                 </span>
                </div>
               </div>
              </div>
             </div>
            </div>
           </div>
           <div class="post-row">
            <div class="media post-list">
             <div class="pull-left post-image">
              [ahref]
              
             </div>
             <div class="pull-right post-info">
              <p>
               [ahref]
               
              </p>
              <div style="margin-top:5px; text-align: center;">
               <span class="txt-normal">
                07-03 21:22
               </span>
              </div>
              <p style="text-align:center">
               인기 37190
              </p>
             </div>
             <div class="media-body">
              <div class="post-content">
               <div class="post-subject">
                <a href="/bbs/board.php?bo_table=manga&amp;wr_id=1446914" style="font-size:16px">
                 <span class="wr-icon wr-new">
                  NEW
                 </span>
                 리베리오 마키나 1화
                </a>
                <div style="text-align: left;color:gray;">
                 <span class="count" style="font-size:13px">
                  <i class="fa fa-commenting-o">
                  </i>
                  100
                 </span>
                 <span class="count" style="font-size:13px">
                  <i class="fa fa-thumbs-o-up">
                  </i>
                  37
                 </span>
                </div>
               </div>
              </div>
             </div>
            </div>
           </div>
           <div class="post-row">
            <div class="media post-list">
             <div class="pull-left post-image">
              <a class="ellipsis" href="/bbs/board.php?bo_table=manga&amp;wr_id=1446885">
               <div class="img-wrap">
                <div class="img-item">
                </div>
               </div>
              </a>
             </div>
             <div class="pull-right post-info">
              <p>
               [ahref]
               
              </p>
              <div style="margin-top:5px; text-align: center;">
               <span class="txt-normal">
                07-03 21:17
               </span>
              </div>
              <p style="text-align:center">
               인기 7260
              </p>
             </div>
             <div class="media-body">
              <div class="post-content">
               <div class="post-subject">
                [ahref]
                
                <div style="text-align: left;color:gray;">
                 <span class="count" style="font-size:13px">
                  <i class="fa fa-commenting-o">
                  </i>
                  19
                 </span>
                 <span class="count" style="font-size:13px">
                  <i class="fa fa-thumbs-o-up">
                  </i>
                  9
                 </span>
                </div>
               </div>
              </div>
             </div>
            </div>
           </div>
           <div class="post-row">
            <div class="media post-list">
             <div class="pull-left post-image">
              [linkx]
              
             </div>
             <div class="pull-right post-info">
              [linkx][linkx]<li>[mkey1]</li>
             </div>
             <div class="media-body">
              <div class="post-content">
               <div class="post-subject">
                [linkx]
                
                <div style="text-align: left;color:gray;">
                 <span class="count" style="font-size:13px">
                  <i class="fa fa-commenting-o">
                  </i>
                  111
                 </span>
                 <span class="count" style="font-size:13px">
                  <i class="fa fa-thumbs-o-up">
                  </i>
                  50
                 </span>
                </div>
               </div>
              </div>
             </div>
            </div>
           </div>
           <div class="post-row">
            <div class="media post-list">
             <div class="pull-left post-image">
              <a class="ellipsis" href="/bbs/board.php?bo_table=manga&amp;wr_id=1446641">
               <div class="img-wrap">
                <div class="img-item">
                </div>
               </div>
              </a>
             </div>
             <div class="pull-right post-info">
              <p>
               [ahref]
               
              </p>
              <div style="margin-top:5px; text-align: center;">
               <span class="txt-normal">
                07-03 20:40
               </span>
              </div>
              <p style="text-align:center">
               인기 41395
              </p>
             </div>
             <div class="media-body">
              <div class="post-content">
               <div class="post-subject">
                [linkx]
                
                <div style="text-align: left;color:gray;">
                 <span class="count" style="font-size:13px">
                  <i class="fa fa-commenting-o">
                  </i>
                  95
                 </span>
                 <span class="count" style="font-size:13px">
                  <i class="fa fa-thumbs-o-up">
                  </i>
                  48
                 </span>
                </div>
               </div>
              </div>
             </div>
            </div>
           </div>
           <div class="post-row">
            <div class="media post-list">
             <div class="pull-left post-image">
              <a class="ellipsis" href="/bbs/board.php?bo_table=manga&amp;wr_id=1446510">
               <div class="img-wrap">
                <div class="img-item">
                </div>
               </div>
              </a>
             </div>
             <div class="pull-right post-info">
              <p>
               [ahref]
               
              </p>
              <div style="margin-top:5px; text-align: center;">
               <span class="txt-normal">
                07-03 20:20
               </span>
              </div>
              <p style="text-align:center">
               인기 20148
              </p>
             </div>
             <div class="media-body">
              <div class="post-content">
               <div class="post-subject">
                [linkx]
                
                <div style="text-align: left;color:gray;">
                 <span class="count" style="font-size:13px">
                  <i class="fa fa-commenting-o">
                  </i>
                  47
                 </span>
                 <span class="count" style="font-size:13px">
                  <i class="fa fa-thumbs-o-up">
                  </i>
                  19
                 </span>
                </div>
               </div>
              </div>
             </div>
            </div>
           </div>
           <div class="post-row">
            <div class="media post-list">
             <div class="pull-left post-image">
              [ahref]
              
             </div>
             <div class="pull-right post-info">
              <p>
               [linkx]
               
              </p>
              <div style="margin-top:5px; text-align: center;">
               <span class="txt-normal">
                07-03 20:00
               </span>
              </div>
              <p style="text-align:center">
               인기 25231
              </p>
             </div>
             <div class="media-body">
              <div class="post-content">
               <div class="post-subject">
                [linkx]
                
                <div style="text-align: left;color:gray;">
                 <span class="count" style="font-size:13px">
                  <i class="fa fa-commenting-o">
                  </i>
                  72
                 </span>
                 <span class="count" style="font-size:13px">
                  <i class="fa fa-thumbs-o-up">
                  </i>
                  40
                 </span>
                </div>
               </div>
              </div>
             </div>
            </div>
           </div>
           <div class="post-row">
            <div class="media post-list">
             <div class="pull-left post-image">
              [linkx]
              
             </div>
             <div class="pull-right post-info">
              <p>
               [ahref]
               
              </p>
              <div style="margin-top:5px; text-align: center;">
               <span class="txt-normal">
                07-03 19:40
               </span>
              </div>
              <p style="text-align:center">
               인기 26214
              </p>
             </div>
             <div class="media-body">
              <div class="post-content">
               <div class="post-subject">
                [linkx]
                
                <div style="text-align: left;color:gray;">
                 <span class="count" style="font-size:13px">
                  <i class="fa fa-commenting-o">
                  </i>
                  39
                 </span>
                 <span class="count" style="font-size:13px">
                  <i class="fa fa-thumbs-o-up">
                  </i>
                  20
                 </span>
                </div>
               </div>
              </div>
             </div>
            </div>
           </div>
           <div class="post-row">
            <div class="media post-list">
             <div class="pull-left post-image">
              [linkx]
              
             </div>
             <div class="pull-right post-info">
              <p>
               [ahref]
               
              </p>
              <div style="margin-top:5px; text-align: center;">
               <span class="txt-normal">
                07-03 19:20
               </span>
              </div>
              <p style="text-align:center">
               인기 32348
              </p>
             </div>
             <div class="media-body">
              <h2>
               <b>[mkey1][symbolx][pkeyx][symbolx][keyword1][bracketl1][keywordx][bracketr1][symbolx][bracketl2][keywordx][bracketr2][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx]</b>
              </h2>
              <div class="post-content">
               <div class="post-subject">
                <a href="/bbs/board.php?bo_table=manga&amp;wr_id=1446170" style="font-size:16px">
                 <span class="wr-icon wr-new">
                  NEW
                 </span>
                 공주님 '고문'시간입니다 11화
                </a>
                <div style="text-align: left;color:gray;">
                 <span class="count" style="font-size:13px">
                  <i class="fa fa-commenting-o">
                  </i>
                  102
                 </span>
                 <span class="count" style="font-size:13px">
                  <i class="fa fa-thumbs-o-up">
                  </i>
                  35
                 </span>
                </div>
               </div>
              </div>
             </div>
            </div>
           </div>
           <div class="post-row">
            <div class="media post-list">
             <div class="pull-left post-image">
              <a class="ellipsis" href="/bbs/board.php?bo_table=manga&amp;wr_id=1446074">
               <div class="img-wrap">
                <div class="img-item">
                </div>
               </div>
              </a>
             </div>
             <div class="pull-right post-info">
              <p>
               [ahref]
               
              </p>
              <div style="margin-top:5px; text-align: center;">
               <span class="txt-normal">
                07-03 19:01[ahref][keywordx][ahref][keywordx][symbolx][keywordx][symbolx][bracketl6][keywordx][bracketr6][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][pkeyx][keywordx][symbolx][keywordx][symbolx][bracketl7][keywordx][bracketr7][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][mkey1][pkeyx][ahref][keywordx][symbolx][keywordx][symbolx][bracketl8][keywordx][bracketr8][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][ahref][mkey1][keywordx][mkey1][ahref][ahref][keywordx][mkey1][keywordx][symbolx][keywordx][symbolx][bracketl9][keywordx][bracketr9][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][linkx]
               </span>
              </div>
              <p style="text-align:center">
               인기 7211
              </p>
             </div>
             <div class="media-body">
              <div class="post-content">
               <div class="post-subject">
                [linkx]
                
                <div style="text-align: left;color:gray;">
                 <span class="count" style="font-size:13px">
                  <i class="fa fa-commenting-o">
                  </i>
                  25
                 </span>
                 <span class="count" style="font-size:13px">
                  <i class="fa fa-thumbs-o-up">
                  </i>
                  11
                 </span>
                </div>
               </div>
              </div>
             </div>
            </div>
           </div>
           <div class="post-row">
            <div class="media post-list">
             <div class="pull-left post-image">
              <a class="ellipsis" href="/bbs/board.php?bo_table=manga&amp;wr_id=1446062">
               <div class="img-wrap">
                <div class="img-item">
                </div>
               </div>
              </a>
             </div>
             <div class="pull-right post-info">
              <p>
               [linkx]
               
              </p>
              <div style="margin-top:5px; text-align: center;">
               <span class="txt-normal">
                07-03 18:58
               </span>
              </div>
              <p style="text-align:center">
               인기 16692
              </p>
             </div>
             <div class="media-body">
              <div class="post-content">
               <div class="post-subject">
                <a href="/bbs/board.php?bo_table=manga&amp;wr_id=1446062" style="font-size:16px">
                 <span class="wr-icon wr-new">
                  NEW
                 </span>
                 이나리 JK 타마모 쨩 31화
                </a>
                <div style="text-align: left;color:gray;">
                 <span class="count" style="font-size:13px">
                  <i class="fa fa-commenting-o">
                  </i>
                  43
                 </span>
                 <span class="count" style="font-size:13px">
                  <i class="fa fa-thumbs-o-up">
                  </i>
                  27
                 </span>
                </div>
               </div>
              </div>
             </div>
            </div>
           </div>
           <div class="post-row">
            <div class="media post-list">
             <div class="pull-left post-image">
              [ahref]
              
             </div>
             <div class="pull-right post-info">
              <p>
               [linkx]
               
              </p>
              <div style="margin-top:5px; text-align: center;">
               <span class="txt-normal">
                07-03 18:29
               </span>
              </div>
              <p style="text-align:center">
               인기 26522
              </p>
             </div>
             <div class="media-body">
              <div class="post-content">
               <div class="post-subject">
                [linkx]
                
                <div style="text-align: left;color:gray;">
                 <span class="count" style="font-size:13px">
                  <i class="fa fa-commenting-o">
                  </i>
                  40
                 </span>
                 <span class="count" style="font-size:13px">
                  <i class="fa fa-thumbs-o-up">
                  </i>
                  32
                 </span>
                </div>
               </div>
              </div>
             </div>
            </div>
           </div>
           <div class="post-row">
            <div class="media post-list">
             <div class="pull-left post-image">
              [linkx]
              
             </div>
             <div class="pull-right post-info">
              <p>
               <a class="btn btn-xs btn-primary" href="/bbs/page.php?hid=manga_detail&amp;manga_id=10453">
                전편보기
               </a>
              </p>
              <div style="margin-top:5px; text-align: center;">
               <span class="txt-normal">
                07-03 18:28
               </span>
              </div>
              <p style="text-align:center">
               인기 15233
              </p>
             </div>
             <div class="media-body">
              <div class="post-content">
               <div class="post-subject">
                [ahref]
                
                <div style="text-align: left;color:gray;">
                 <span class="count" style="font-size:13px">
                  <i class="fa fa-commenting-o">
                  </i>
                  39
                 </span>
                 <span class="count" style="font-size:13px">
                  <i class="fa fa-thumbs-o-up">
                  </i>
                  19
                 </span>
                </div>
               </div>
              </div>
             </div>
            </div>
           </div>
           <div class="post-row">
            <div class="media post-list">
             <div class="pull-left post-image">
              <a class="ellipsis" href="/bbs/board.php?bo_table=manga&amp;wr_id=1445868">
               <div class="img-wrap">
                <div class="img-item">
                </div>
               </div>
              </a>
             </div>
             <div class="pull-right post-info">
              <p>
               [ahref]
               
              </p>
              <div style="margin-top:5px; text-align: center;">
               <span class="txt-normal">
                07-03 18:27
               </span>
              </div>
              <p style="text-align:center">
               인기 5955
              </p>
             </div>
             <div class="media-body">
              <div class="post-content">
               <div class="post-subject">
                <a href="/bbs/board.php?bo_table=manga&amp;wr_id=1445868" style="font-size:16px">
                 <span class="wr-icon wr-new">
                  NEW
                 </span>
                 프로미스 신데렐라 23화
                </a>
                <div style="text-align: left;color:gray;">
                 <span class="count" style="font-size:13px">
                  <i class="fa fa-commenting-o">
                  </i>
                  28
                 </span>
                 <span class="count" style="font-size:13px">
                  <i class="fa fa-thumbs-o-up">
                  </i>
                  17
                 </span>
                </div>
               </div>
              </div>
             </div>
            </div>
           </div>
           <div class="post-row">
            <div class="media post-list">
             <div class="pull-left post-image">
              [ahref]
              
             </div>
             <div class="pull-right post-info">
              <p>
               <a class="btn btn-xs btn-primary" href="/bbs/page.php?hid=manga_detail&amp;manga_id=4360">
                전편보기
               </a>
              </p>
              <div style="margin-top:5px; text-align: center;">
               <span class="txt-normal">
                07-03 18:00
               </span>
              </div>
              <p style="text-align:center">
               인기 46180
              </p>
             </div>
             <div class="media-body">
              <div class="post-content">
               <div class="post-subject">
                [linkx]
                
                <div style="text-align: left;color:gray;">
                 <span class="count" style="font-size:13px">
                  <i class="fa fa-commenting-o">
                  </i>
                  98
                 </span>
                 <span class="count" style="font-size:13px">
                  <i class="fa fa-thumbs-o-up">
                  </i>
                  56
                 </span>
                </div>
               </div>
              </div>
             </div>
            </div>
           </div>
           <div class="post-row">
            <div class="media post-list">
             <div class="pull-left post-image">
              [ahref]
              
             </div>
             <div class="pull-right post-info">
              <p>
               [linkx]
               
              </p>
              <div style="margin-top:5px; text-align: center;">
               <span class="txt-normal">
                07-03 17:40
               </span>
              </div>
              <p style="text-align:center">
               인기 26031
              </p>
             </div>
             <div class="media-body">
              <div class="post-content">
               <div class="post-subject">
                [linkx]
                
                <div style="text-align: left;color:gray;">
                 <span class="count" style="font-size:13px">
                  <i class="fa fa-commenting-o">
                  </i>
                  69
                 </span>
                 <span class="count" style="font-size:13px">
                  <i class="fa fa-thumbs-o-up">
                  </i>
                  45
                 </span>
                </div>
               </div>
              </div>
             </div>
            </div>
           </div>
           <div class="post-row">
            <div class="media post-list">
             <div class="pull-left post-image">
              [linkx]
              
             </div>
             <div class="pull-right post-info">
              <p>
               <a class="btn btn-xs btn-primary" href="/bbs/page.php?hid=manga_detail&amp;manga_id=10354">
                전편보기
               </a>
              </p>
              <div style="margin-top:5px; text-align: center;">
               <span class="txt-normal">
                07-03 17:05
               </span>
              </div>
              <p style="text-align:center">
               인기 95000
              </p>
             </div>
             <div class="media-body">
              <div class="post-content">
               <div class="post-subject">
                [linkx]
                
                <div style="text-align: left;color:gray;">
                 <span class="count" style="font-size:13px">
                  <i class="fa fa-commenting-o">
                  </i>
                  178
                 </span>
                 <span class="count" style="font-size:13px">
                  <i class="fa fa-thumbs-o-up">
                  </i>
                  107
                 </span>
                </div>
               </div>
              </div>
             </div>
            </div>
           </div>
           <div class="post-row">
            <div class="media post-list">
             <div class="pull-left post-image">
              <a class="ellipsis" href="/bbs/board.php?bo_table=manga&amp;wr_id=1445314">
               <div class="img-wrap">
                <div class="img-item">
                </div>
               </div>
              </a>
             </div>
             <div class="pull-right post-info">
              <p>
               [ahref]
               
              </p>
              <div style="margin-top:5px; text-align: center;">
               <span class="txt-normal">
                07-03 16:42
               </span>
              </div>
              <p style="text-align:center">
               인기 11515
              </p>
             </div>
             <div class="media-body">
              <div class="post-content">
               <div class="post-subject">
                <a href="/bbs/board.php?bo_table=manga&amp;wr_id=1445314" style="font-size:16px">
                 <span class="wr-icon wr-new">
                  NEW
                 </span>
                 쿠시야마 이시오의 흉기록 2화
                </a>
                <div style="text-align: left;color:gray;">
                 <span class="count" style="font-size:13px">
                  <i class="fa fa-commenting-o">
                  </i>
                  28
                 </span>
                 <span class="count" style="font-size:13px">
                  <i class="fa fa-thumbs-o-up">
                  </i>
                  10
                 </span>
                </div>
               </div>
              </div>
             </div>
            </div>
           </div>
           <div class="post-row">
            <div class="media post-list">
             <div class="pull-left post-image">
              [linkx]
              
             </div>
             <div class="pull-right post-info">
              <p>
               <a class="btn btn-xs btn-primary" href="/bbs/page.php?hid=manga_detail&amp;manga_id=9697">
                전편보기
               </a>
              </p>
              <div style="margin-top:5px; text-align: center;">
               <span class="txt-normal">
                07-03 16:20
               </span>
              </div>
              <p style="text-align:center">
               인기 14681
              </p>
             </div>
             <div class="media-body">
              <div class="post-content">
               <div class="post-subject">
                [ahref]
                
                <div style="text-align: left;color:gray;">
                 <span class="count" style="font-size:13px">
                  <i class="fa fa-commenting-o">
                  </i>
                  34
                 </span>
                 <span class="count" style="font-size:13px">
                  <i class="fa fa-thumbs-o-up">
                  </i>
                  21
                 </span>
                </div>
               </div>
              </div>
             </div>
            </div>
           </div>
           <div class="post-row">
            <div class="media post-list">
             <div class="pull-left post-image">
              [linkx]
              
             </div>
             <div class="pull-right post-info">
              <p>
               [linkx]
               
              </p>
              <div style="margin-top:5px; text-align: center;">
               <span class="txt-normal">
                07-03 15:55
               </span>
              </div>
              <p style="text-align:center">
               인기 32926
              </p>
             </div>
             <div class="media-body">
              <div class="post-content">
               <div class="post-subject">
                [linkx]
                
                <div style="text-align: left;color:gray;">
                 <span class="count" style="font-size:13px">
                  <i class="fa fa-commenting-o">
                  </i>
                  62
                 </span>
                 <span class="count" style="font-size:13px">
                  <i class="fa fa-thumbs-o-up">
                  </i>
                  26
                 </span>
                </div>
               </div>
              </div>
             </div>
            </div>
           </div>
           <div class="post-row">
            <div class="media post-list">
             <div class="pull-left post-image">
              <a class="ellipsis" href="/bbs/board.php?bo_table=manga&amp;wr_id=1444962">
               <div class="img-wrap">
                <div class="img-item">
                </div>
               </div>
              </a>
             </div>
             <div class="pull-right post-info">
              <p>
               [linkx]
               
              </p>
              <div style="margin-top:5px; text-align: center;">
               <span class="txt-normal">
                07-03 15:55
               </span>
              </div>
              <p style="text-align:center">
               인기 34716
              </p>
             </div>
             <div class="media-body">
              <div class="post-content">
               <div class="post-subject">
                [ahref]
                
                <div style="text-align: left;color:gray;">
                 <span class="count" style="font-size:13px">
                  <i class="fa fa-commenting-o">
                  </i>
                  51
                 </span>
                 <span class="count" style="font-size:13px">
                  <i class="fa fa-thumbs-o-up">
                  </i>
                  20
                 </span>
                </div>
               </div>
              </div>
             </div>
            </div>
           </div>
           <div class="post-row">
            <div class="media post-list">
             <div class="pull-left post-image">
              [ahref]
              
             </div>
             <div class="pull-right post-info">
              <p>
               [linkx]
               
              </p>
              <div style="margin-top:5px; text-align: center;">
               <span class="txt-normal">
                07-03 15:53
               </span>
              </div>
              <p style="text-align:center">
               인기 12772
              </p>
             </div>
             <div class="media-body">
              <div class="post-content">
               <div class="post-subject">
                <a href="/bbs/board.php?bo_table=manga&amp;wr_id=1444950" style="font-size:16px">
                 <span class="wr-icon wr-new">
                  NEW
                 </span>
                 오니 같은 러브코미디 21화
                </a>
                <div style="text-align: left;color:gray;">
                 <span class="count" style="font-size:13px">
                  <i class="fa fa-commenting-o">
                  </i>
                  49
                 </span>
                 <span class="count" style="font-size:13px">
                  <i class="fa fa-thumbs-o-up">
                  </i>
                  14
                 </span>
                </div>
               </div>
              </div>
             </div>
            </div>
           </div>
           <div class="post-row">
            <div class="media post-list">
             <div class="pull-left post-image">
              [linkx]
              
             </div>
             <div class="pull-right post-info">
              <p>
               [ahref]
               
              </p>
              <div style="margin-top:5px; text-align: center;">
               <span class="txt-normal">
                07-03 15:51
               </span>
              </div>
              <p style="text-align:center">
               인기 2818
              </p>
             </div>
             <div class="media-body">
              <div class="post-content">
               <div class="post-subject">
                <a href="/bbs/board.php?bo_table=manga&amp;wr_id=1444939" style="font-size:16px">
                 <span class="wr-icon wr-new">
                  NEW
                 </span>
                 바다의 크레이들 21화
                </a>
                <div style="text-align: left;color:gray;">
                 <span class="count" style="font-size:13px">
                  <i class="fa fa-commenting-o">
                  </i>
                  12
                 </span>
                 <span class="count" style="font-size:13px">
                  <i class="fa fa-thumbs-o-up">
                  </i>
                  3
                 </span>
                </div>
               </div>
              </div>
             </div>
            </div>
           </div>
           <div class="post-row">
            <div class="media post-list">
             <div class="pull-left post-image">
              <a class="ellipsis" href="/bbs/board.php?bo_table=manga&amp;wr_id=1444806">
               <div class="img-wrap">
                <div class="img-item">
                </div>
               </div>
              </a>
             </div>
             <div class="pull-right post-info">
              <p>
               [linkx]
               
              </p>
              <div style="margin-top:5px; text-align: center;">
               <span class="txt-normal">
                07-03 15:30
               </span>
              </div>
              <p style="text-align:center">
               인기 13840
              </p>
             </div>
             <div class="media-body">
              <div class="post-content">
               <div class="post-subject">
                [ahref]
                
                <div style="text-align: left;color:gray;">
                 <span class="count" style="font-size:13px">
                  <i class="fa fa-commenting-o">
                  </i>
                  44
                 </span>
                 <span class="count" style="font-size:13px">
                  <i class="fa fa-thumbs-o-up">
                  </i>
                  11
                 </span>
                </div>
               </div>
              </div>
             </div>
            </div>
           </div>
           <div class="post-row">
            <div class="media post-list">
             <div class="pull-left post-image">
              [ahref]
              
             </div>
             <div class="pull-right post-info">
              <p>
               [linkx]
               
              </p>
              <div style="margin-top:5px; text-align: center;">
               <span class="txt-normal">
                07-03 15:00
               </span>
              </div>
              <p style="text-align:center">
               인기 41458
              </p>
             </div>
             <div class="media-body">
              <div class="post-content">
               <div class="post-subject">
                [linkx]
                
                <div style="text-align: left;color:gray;">
                 <span class="count" style="font-size:13px">
                  <i class="fa fa-commenting-o">
                  </i>
                  157
                 </span>
                 <span class="count" style="font-size:13px">
                  <i class="fa fa-thumbs-o-up">
                  </i>
                  45
                 </span>
                </div>
               </div>
              </div>
             </div>
            </div>
           </div>
           <div class="post-row">
            <div class="media post-list">
             <div class="pull-left post-image">
              [ahref]
              
             </div>
             <div class="pull-right post-info">
              <p>
               <a class="btn btn-xs btn-primary" href="/bbs/page.php?hid=manga_detail&amp;manga_id=10627">
                전편보기
               </a>
              </p>
              <div style="margin-top:5px; text-align: center;">
               <span class="txt-normal">
                07-03 14:40
               </span>
              </div>
              <p style="text-align:center">
               인기 3932
              </p>
             </div>
             <div class="media-body">
              <div class="post-content">
               <div class="post-subject">
                [ahref]
                
                <div style="text-align: left;color:gray;">
                 <span class="count" style="font-size:13px">
                  <i class="fa fa-commenting-o">
                  </i>
                  25
                 </span>
                 <span class="count" style="font-size:13px">
                  <i class="fa fa-thumbs-o-up">
                  </i>
                  8
                 </span>
                </div>
               </div>
              </div>
             </div>
            </div>
           </div>
           <div class="post-row">
            <div class="media post-list">
             <div class="pull-left post-image">
              <a class="ellipsis" href="/bbs/board.php?bo_table=manga&amp;wr_id=1444408">
               <div class="img-wrap">
                <div class="img-item">
                </div>
               </div>
              </a>
             </div>
             <div class="pull-right post-info">
              <p>
               [ahref]
               
              </p>
              <div style="margin-top:5px; text-align: center;">
               <span class="txt-normal">
                07-03 14:20
               </span>
              </div>
              <p style="text-align:center">
               인기 8196
              </p>
             </div>
             <div class="media-body">
              <div class="post-content">
               <div class="post-subject">
                <a href="/bbs/board.php?bo_table=manga&amp;wr_id=1444408" style="font-size:16px">
                 <span class="wr-icon wr-new">
                  NEW
                 </span>
                 리넨의 봄 3화
                </a>
                <div style="text-align: left;color:gray;">
                 <span class="count" style="font-size:13px">
                  <i class="fa fa-commenting-o">
                  </i>
                  31
                 </span>
                 <span class="count" style="font-size:13px">
                  <i class="fa fa-thumbs-o-up">
                  </i>
                  9
                 </span>
                </div>
               </div>
              </div>
             </div>
            </div>
           </div>
           <div class="post-row">
            <div class="media post-list">
             <div class="pull-left post-image">
              [linkx]
              
             </div>
             <div class="pull-right post-info">
              <p>
               <a class="btn btn-xs btn-primary" href="/bbs/page.php?hid=manga_detail&amp;manga_id=10354">
                전편보기
               </a>
              </p>
              <div style="margin-top:5px; text-align: center;">
               <span class="txt-normal">
                07-03 14:00
               </span>
              </div>
              <p style="text-align:center">
               인기 84017
              </p>
             </div>
             <div class="media-body">
              <div class="post-content">
               <div class="post-subject">
                [linkx]
                
                <div style="text-align: left;color:gray;">
                 <span class="count" style="font-size:13px">
                  <i class="fa fa-commenting-o">
                  </i>
                  128
                 </span>
                 <span class="count" style="font-size:13px">
                  <i class="fa fa-thumbs-o-up">
                  </i>
                  84
                 </span>
                </div>
               </div>
              </div>
             </div>
            </div>
           </div>
           <div class="post-row">
            <div class="media post-list">
             <div class="pull-left post-image">
              [ahref]
              
             </div>
             <div class="pull-right post-info">
              <p>
               <a class="btn btn-xs btn-primary" href="/bbs/page.php?hid=manga_detail&amp;manga_id=10280">
                전편보기
               </a>
              </p>
              <div style="margin-top:5px; text-align: center;">
               <span class="txt-normal">
                07-03 13:40
               </span>
              </div>
              <p style="text-align:center">
               인기 34537
              </p>
             </div>
             <div class="media-body">
              <div class="post-content">
               <div class="post-subject">
                <a href="/bbs/board.php?bo_table=manga&amp;wr_id=1444194" style="font-size:16px">
                 <span class="wr-icon wr-new">
                  NEW
                 </span>
                 라이브 던전! 16화
                </a>
                <div style="text-align: left;color:gray;">
                 <span class="count" style="font-size:13px">
                  <i class="fa fa-commenting-o">
                  </i>
                  103
                 </span>
                 <span class="count" style="font-size:13px">
                  <i class="fa fa-thumbs-o-up">
                  </i>
                  53
                 </span>
                </div>
               </div>
              </div>
             </div>
            </div>
           </div>
           <div class="post-row">
            <div class="media post-list">
             <div class="pull-left post-image">
              [linkx]
              
             </div>
             <div class="pull-right post-info">
              <p>
               [ahref]
               
              </p>
              <div style="margin-top:5px; text-align: center;">
               <span class="txt-normal">
                07-03 13:20
               </span>
              </div>
              <p style="text-align:center">
               인기 3903
              </p>
             </div>
             <div class="media-body">
              <div class="post-content">
               <div class="post-subject">
                [linkx]
                
                <div style="text-align: left;color:gray;">
                 <span class="count" style="font-size:13px">
                  <i class="fa fa-commenting-o">
                  </i>
                  18
                 </span>
                 <span class="count" style="font-size:13px">
                  <i class="fa fa-thumbs-o-up">
                  </i>
                  9
                 </span>
                </div>
               </div>
              </div>
             </div>
            </div>
           </div>
           <div class="post-row">
            <div class="media post-list">
             <div class="pull-left post-image">
              [linkx]
              
             </div>
             <div class="pull-right post-info">
              <p>
               [ahref]
               
              </p>
              <div style="margin-top:5px; text-align: center;">
               <span class="txt-normal">
                07-03 13:00
               </span>
              </div>
              <p style="text-align:center">
               인기 53621
              </p>
             </div>
             <div class="media-body">
              <div class="post-content">
               <div class="post-subject">
                [ahref]
                
                <div style="text-align: left;color:gray;">
                 <span class="count" style="font-size:13px">
                  <i class="fa fa-commenting-o">
                  </i>
                  120
                 </span>
                 <span class="count" style="font-size:13px">
                  <i class="fa fa-thumbs-o-up">
                  </i>
                  67
                 </span>
                </div>
               </div>
              </div>
             </div>
            </div>
           </div>
           <div class="post-row">
            <div class="media post-list">
             <div class="pull-left post-image">
              [linkx]
              
             </div>
             <div class="pull-right post-info">
              <p>
               [linkx]
               
              </p>
              <div style="margin-top:5px; text-align: center;">
               <span class="txt-normal">
                07-03 12:40
               </span>
              </div>
              <p style="text-align:center">
               인기 4451
              </p>
             </div>
             <div class="media-body">
              <div class="post-content">
               <div class="post-subject">
                [ahref]
                
                <div style="text-align: left;color:gray;">
                 <span class="count" style="font-size:13px">
                  <i class="fa fa-commenting-o">
                  </i>
                  21
                 </span>
                 <span class="count" style="font-size:13px">
                  <i class="fa fa-thumbs-o-up">
                  </i>
                  7
                 </span>
                </div>
               </div>
              </div>
             </div>
            </div>
           </div>
           <div class="post-row">
            <div class="media post-list">
             <div class="pull-left post-image">
              [linkx]
              
             </div>
             <div class="pull-right post-info">
              <p>
               [linkx]
               
              </p>
              <div style="margin-top:5px; text-align: center;">
               <span class="txt-normal">
                07-03 12:20
               </span>
              </div>
              <p style="text-align:center">
               인기 63719
              </p>
             </div>
             <div class="media-body">
              <div class="post-content">
               <div class="post-subject">
                [linkx]
                
                <div style="text-align: left;color:gray;">
                 <span class="count" style="font-size:13px">
                  <i class="fa fa-commenting-o">
                  </i>
                  165
                 </span>
                 <span class="count" style="font-size:13px">
                  <i class="fa fa-thumbs-o-up">
                  </i>
                  83
                 </span>
                </div>
               </div>
              </div>
             </div>
            </div>
           </div>
           <div class="post-row">
            <div class="media post-list">
             <div class="pull-left post-image">
              [ahref]
              
             </div>
             <div class="pull-right post-info">
              <p>
               [linkx]
               
              </p>
              <div style="margin-top:5px; text-align: center;">
               <span class="txt-normal">
                07-03 12:00
               </span>
              </div>
              <p style="text-align:center">
               인기 9539
              </p>
             </div>
             <div class="media-body">
              <div class="post-content">
               <div class="post-subject">
                [ahref]
                
                <div style="text-align: left;color:gray;">
                 <span class="count" style="font-size:13px">
                  <i class="fa fa-commenting-o">
                  </i>
                  33
                 </span>
                 <span class="count" style="font-size:13px">
                  <i class="fa fa-thumbs-o-up">
                  </i>
                  27
                 </span>
                </div>
               </div>
              </div>
             </div>
            </div>
           </div>
           <div class="post-row">
            <div class="media post-list">
             <div class="pull-left post-image">
              <a class="ellipsis" href="/bbs/board.php?bo_table=manga&amp;wr_id=1443550">
               <div class="img-wrap">
                <div class="img-item">
                </div>
               </div>
              </a>
             </div>
             <div class="pull-right post-info">
              <p>
               [linkx]
               
              </p>
              <div style="margin-top:5px; text-align: center;">
               <span class="txt-normal">
                07-03 11:40
               </span>
              </div>
              <p style="text-align:center">
               인기 44613
              </p>
             </div>
             <div class="media-body">
              <div class="post-content">
               <div class="post-subject">
                <a href="/bbs/board.php?bo_table=manga&amp;wr_id=1443550" style="font-size:16px">
                 <span class="wr-icon wr-new">
                  NEW
                 </span>
                 전생해버렸어 (이거, 미안) 34~38화
                </a>
                <div style="text-align: left;color:gray;">
                 <span class="count" style="font-size:13px">
                  <i class="fa fa-commenting-o">
                  </i>
                  61
                 </span>
                 <span class="count" style="font-size:13px">
                  <i class="fa fa-thumbs-o-up">
                  </i>
                  41
                 </span>
                </div>
               </div>
              </div>
             </div>
            </div>
           </div>
           <div class="post-row">
            <div class="media post-list">
             <div class="pull-left post-image">
              [linkx]
              
             </div>
             <div class="pull-right post-info">
              [keywordx][keywordx][symbolx][keywordx][symbolx][bracketl12][keywordx][bracketr12][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][ahref][ahref][pkeyx][mkey1][mkey1][pkeyx][linkx][ahref][keywordx][keywordx][linkx][keywordx][symbolx][keywordx][symbolx][bracketl13][keywordx][bracketr13][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][mkey1][linkx][ahref][keywordx][linkx][keywordx][symbolx][keywordx][symbolx][bracketl14][keywordx][bracketr14][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][pkeyx][keywordx][mkey1][keywordx][pkeyx][keywordx][linkx]
             </div>
             <div class="media-body">
              <div class="post-content">
               <div class="post-subject">
                <a href="/bbs/board.php?bo_table=manga&amp;wr_id=1443455" style="font-size:16px">
                 <span class="wr-icon wr-new">
                  NEW
                 </span>
                 나에게 천사가 내려왔다! BD 2권 부록만화
                </a>
                <div style="text-align: left;color:gray;">
                 <span class="count" style="font-size:13px">
                  <i class="fa fa-commenting-o">
                  </i>
                  47
                 </span>
                 <span class="count" style="font-size:13px">
                  <i class="fa fa-thumbs-o-up">
                  </i>
                  21
                 </span>
                </div>
               </div>
              </div>
             </div>
            </div>
           </div>
           <div class="post-row">
            <div class="media post-list">
             <div class="pull-left post-image">
              <a class="ellipsis" href="/bbs/board.php?bo_table=manga&amp;wr_id=1443385">
               <div class="img-wrap">
                <div class="img-item">
                </div>
               </div>
              </a>
             </div>
             <div class="pull-right post-info">
              <p>
               <a class="btn btn-xs btn-primary" href="/bbs/page.php?hid=manga_detail&amp;manga_id=9697">
                전편보기
               </a>
              </p>
              <div style="margin-top:5px; text-align: center;">
               <span class="txt-normal">
                07-03 11:00
               </span>
              </div>
              <p style="text-align:center">
               인기 10197
              </p>
             </div>
             <div class="media-body">
              <div class="post-content">
               <div class="post-subject">
                [ahref]
                
                <div style="text-align: left;color:gray;">
                 <span class="count" style="font-size:13px">
                  <i class="fa fa-commenting-o">
                  </i>
                  35
                 </span>
                 <span class="count" style="font-size:13px">
                  <i class="fa fa-thumbs-o-up">
                  </i>
                  15
                 </span>
                </div>
               </div>
              </div>
             </div>
            </div>
           </div>
           <div class="post-row">
            <div class="media post-list">
             <div class="pull-left post-image">
              [linkx]
              
             </div>
             <div class="pull-right post-info">
              <p>
               [ahref]
               
              </p>
              <div style="margin-top:5px; text-align: center;">
               <span class="txt-normal">
                07-03 10:40
               </span>
              </div>
              <p style="text-align:center">
               인기 48087
              </p>
             </div>
             <div class="media-body">
              <div class="post-content">
               <div class="post-subject">
                [ahref]
                
                <div style="text-align: left;color:gray;">
                 <span class="count" style="font-size:13px">
                  <i class="fa fa-commenting-o">
                  </i>
                  59
                 </span>
                 <span class="count" style="font-size:13px">
                  <i class="fa fa-thumbs-o-up">
                  </i>
                  45
                 </span>
                </div>
               </div>
              </div>
             </div>
            </div>
           </div>
           <div class="post-row">
            <div class="media post-list">
             <div class="pull-left post-image">
              <a class="ellipsis" href="/bbs/board.php?bo_table=manga&amp;wr_id=1443195">
               <div class="img-wrap">
                <div class="img-item">
                </div>
               </div>
              </a>
             </div>
             <div class="pull-right post-info">
              <p>
               [ahref]
               
              </p>
              <div style="margin-top:5px; text-align: center;">
               <span class="txt-normal">
                07-03 10:05
               </span>
              </div>
              <p style="text-align:center">
               인기 91506
              </p>
             </div>
             <div class="media-body">
              <div class="post-content">
               <div class="post-subject">
                [ahref]
                
                <div style="text-align: left;color:gray;">
                 <span class="count" style="font-size:13px">
                  <i class="fa fa-commenting-o">
                  </i>
                  119
                 </span>
                 <span class="count" style="font-size:13px">
                  <i class="fa fa-thumbs-o-up">
                  </i>
                  82
                 </span>
                </div>
               </div>
              </div>
             </div>
            </div>
           </div>
           <div class="post-row">
            <div class="media post-list">
             <div class="pull-left post-image">
              [linkx]
              
             </div>
             <div class="pull-right post-info">
              <p>
               [linkx]
               
              </p>
              <div style="margin-top:5px; text-align: center;">
               <span class="txt-normal">
                07-03 10:00
               </span>
              </div>
              <p style="text-align:center">
               인기 7207
              </p>
             </div>
             <div class="media-body">
              <div class="post-content">
               <div class="post-subject">
                [ahref]
                
                <div style="text-align: left;color:gray;">
                 <span class="count" style="font-size:13px">
                  <i class="fa fa-commenting-o">
                  </i>
                  31
                 </span>
                 <span class="count" style="font-size:13px">
                  <i class="fa fa-thumbs-o-up">
                  </i>
                  8
                 </span>
                </div>
               </div>
              </div>
             </div>
            </div>
           </div>
           <div class="post-row">
            <div class="media post-list">
             <div class="pull-left post-image">
              [linkx]
              
             </div>
             <div class="pull-right post-info">
              <p>
               [ahref]
               
              </p>
              <div style="margin-top:5px; text-align: center;">
               <span class="txt-normal">
                07-03 09:40
               </span>
              </div>
              <p style="text-align:center">
               인기 17926
              </p>
             </div>
             <div class="media-body">
              <div class="post-content">
               <div class="post-subject">
                <a href="/bbs/board.php?bo_table=manga&amp;wr_id=1443120" style="font-size:16px">
                 <span class="wr-icon wr-new">
                  NEW
                 </span>
                 신이 말하는 대로 2부 122화
                </a>
                <div style="text-align: left;color:gray;">
                 <span class="count" style="font-size:13px">
                  <i class="fa fa-commenting-o">
                  </i>
                  23
                 </span>
                 <span class="count" style="font-size:13px">
                  <i class="fa fa-thumbs-o-up">
                  </i>
                  10
                 </span>
                </div>
               </div>
              </div>
             </div>
            </div>
           </div>
           <div class="post-row">
            <div class="media post-list">
             <div class="pull-left post-image">
              <a class="ellipsis" href="/bbs/board.php?bo_table=manga&amp;wr_id=1443080">
               <div class="img-wrap">
                <div class="img-item">
                </div>
               </div>
              </a>
             </div>
             <div class="pull-right post-info">
              <p>
               [linkx]
               
              </p>
              <div style="margin-top:5px; text-align: center;">
               <span class="txt-normal">
                07-03 09:20
               </span>
              </div>
              <p style="text-align:center">
               인기 14050
              </p>
             </div>
             <div class="media-body">
              <div class="post-content">
               <div class="post-subject">
                [ahref]
                
                <div style="text-align: left;color:gray;">
                 <span class="count" style="font-size:13px">
                  <i class="fa fa-commenting-o">
                  </i>
                  33
                 </span>
                 <span class="count" style="font-size:13px">
                  <i class="fa fa-thumbs-o-up">
                  </i>
                  15
                 </span>
                </div>
               </div>
              </div>
             </div>
            </div>
           </div>
           <div class="post-row">
            <div class="media post-list">
             <div class="pull-left post-image">
              <a class="ellipsis" href="/bbs/board.php?bo_table=manga&amp;wr_id=1443024">
               <div class="img-wrap">
                <div class="img-item">
                </div>
               </div>
              </a>
             </div>
             <div class="pull-right post-info">
              <p>
               [linkx]
               
              </p>
              <div style="margin-top:5px; text-align: center;">
               <span class="txt-normal">
                07-03 09:00
               </span>
              </div>
              <p style="text-align:center">
               인기 12545
              </p>
             </div>
             <div class="media-body">
              <div class="post-content">
               <div class="post-subject">
                [ahref]
                
                <div style="text-align: left;color:gray;">
                 <span class="count" style="font-size:13px">
                  <i class="fa fa-commenting-o">
                  </i>
                  38
                 </span>
                 <span class="count" style="font-size:13px">
                  <i class="fa fa-thumbs-o-up">
                  </i>
                  18
                 </span>
                </div>
               </div>
              </div>
             </div>
            </div>
           </div>
           <div class="post-row">
            <div class="media post-list">
             <div class="pull-left post-image">
              [ahref]
              
             </div>
             <div class="pull-right post-info">
              <p>
               <a class="btn btn-xs btn-primary" href="/bbs/page.php?hid=manga_detail&amp;manga_id=9633">
                전편보기
               </a>
              </p>
              <div style="margin-top:5px; text-align: center;">
               <span class="txt-normal">
                07-03 08:40
               </span>
              </div>
              <p style="text-align:center">
               인기 8277
              </p>
             </div>
             <div class="media-body">
              <div class="post-content">
               <div class="post-subject">
                [ahref]
                
                <div style="text-align: left;color:gray;">
                 <span class="count" style="font-size:13px">
                  <i class="fa fa-commenting-o">
                  </i>
                  16
                 </span>
                 <span class="count" style="font-size:13px">
                  <i class="fa fa-thumbs-o-up">
                  </i>
                  7
                 </span>
                </div>
               </div>
              </div>
             </div>
            </div>
           </div>
           <div class="post-row">
            <div class="media post-list">
             <div class="pull-left post-image">
              [ahref]
              
             </div>
             <div class="pull-right post-info">
              <p>
               [ahref]
               
              </p>
              <div style="margin-top:5px; text-align: center;">
               <span class="txt-normal">
                07-03 08:20
               </span>
              </div>
              <p style="text-align:center">
               인기 7836
              </p>
             </div>
             <div class="media-body">
              <div class="post-content">
               <div class="post-subject">
                [linkx]
                
                <div style="text-align: left;color:gray;">
                 <span class="count" style="font-size:13px">
                  <i class="fa fa-commenting-o">
                  </i>
                  31
                 </span>
                 <span class="count" style="font-size:13px">
                  <i class="fa fa-thumbs-o-up">
                  </i>
                  13
                 </span>
                </div>
               </div>
              </div>
             </div>
            </div>
           </div>
           <div class="post-row">
            <div class="media post-list">
             <div class="pull-left post-image">
              <a class="ellipsis" href="/bbs/board.php?bo_table=manga&amp;wr_id=1442887">
               <div class="img-wrap">
                <div class="img-item">
                </div>
               </div>
              </a>
             </div>
             <div class="pull-right post-info">
              <p>
               [ahref]
               
              </p>
              <div style="margin-top:5px; text-align: center;">
               <span class="txt-normal">
                07-03 08:00
               </span>
              </div>
              <p style="text-align:center">
               인기 6686
              </p>
             </div>
             <div class="media-body">
              <div class="post-content">
               <div class="post-subject">
                <a href="/bbs/board.php?bo_table=manga&amp;wr_id=1442887" style="font-size:16px">
                 <span class="wr-icon wr-new">
                  NEW
                 </span>
                 너의 고동을 보여줘 7화
                </a>
                <div style="text-align: left;color:gray;">
                 <span class="count" style="font-size:13px">
                  <i class="fa fa-commenting-o">
                  </i>
                  26
                 </span>
                 <span class="count" style="font-size:13px">
                  <i class="fa fa-thumbs-o-up">
                  </i>
                  9
                 </span>
                </div>
               </div>
              </div>
             </div>
            </div>
           </div>
           <div class="post-row">
            <div class="media post-list">
             <div class="pull-left post-image">
              <a class="ellipsis" href="/bbs/board.php?bo_table=manga&amp;wr_id=1442339">
               <div class="img-wrap">
                <div class="img-item">
                </div>
               </div>
              </a>
             </div>
             <div class="pull-right post-info">
              <p>
               [ahref]
               
              </p>
              <div style="margin-top:5px; text-align: center;">
               <span class="txt-normal">
                07-03 02:36
               </span>
              </div>
              <p style="text-align:center">
               인기 28078
              </p>
             </div>
             <div class="media-body">
              <div class="post-content">
               <div class="post-subject">
                [linkx]
                
                <div style="text-align: left;color:gray;">
                 <span class="count" style="font-size:13px">
                  <i class="fa fa-commenting-o">
                  </i>
                  60
                 </span>
                 <span class="count" style="font-size:13px">
                  <i class="fa fa-thumbs-o-up">
                  </i>
                  30
                 </span>
                </div>
               </div>
              </div>
             </div>
            </div>
           </div>
           <div class="post-row">
            <div class="media post-list">
             <div class="pull-left post-image">
              <a class="ellipsis" href="/bbs/board.php?bo_table=manga&amp;wr_id=1442100">
               <div class="img-wrap">
                <div class="img-item">
                </div>
               </div>
              </a>
             </div>
             <div class="pull-right post-info">
              <p>
               [linkx]
               
              </p>
              <div style="margin-top:5px; text-align: center;">
               <span class="txt-normal">
                07-03 01:37
               </span>
              </div>
              <p style="text-align:center">
               인기 110810
              </p>
             </div>
             <div class="media-body">
              <div class="post-content">
               <div class="post-subject">
                [linkx]
                
                <div style="text-align: left;color:gray;">
                 <span class="count" style="font-size:13px">
                  <i class="fa fa-commenting-o">
                  </i>
                  231
                 </span>
                 <span class="count" style="font-size:13px">
                  <i class="fa fa-thumbs-o-up">
                  </i>
                  177
                 </span>
                </div>
               </div>
              </div>
             </div>
            </div>
           </div>
           <div class="post-row">
            <div class="media post-list">
             <div class="pull-left post-image">
              <a class="ellipsis" href="/bbs/board.php?bo_table=manga&amp;wr_id=1442008">
               <div class="img-wrap">
                <div class="img-item">
                </div>
               </div>
              </a>
             </div>
             <div class="pull-right post-info">
              <p>
               [linkx]
               
              </p>
              <div style="margin-top:5px; text-align: center;">
               <span class="txt-normal">
                07-03 01:18
               </span>
              </div>
              <p style="text-align:center">
               인기 108410
              </p>
             </div>
             <div class="media-body">
              <div class="post-content">
               <div class="post-subject">
                [ahref]
                
                <div style="text-align: left;color:gray;">
                 <span class="count" style="font-size:13px">
                  <i class="fa fa-commenting-o">
                  </i>
                  128
                 </span>
                 <span class="count" style="font-size:13px">
                  <i class="fa fa-thumbs-o-up">
                  </i>
                  65
                 </span>
                </div>
               </div>
              </div>
             </div>
            </div>
           </div>
           <div class="post-row">
            <div class="media post-list">
             <div class="pull-left post-image">
              [linkx]
              
             </div>
             <div class="pull-right post-info">
              <p>
               <a class="btn btn-xs btn-primary" href="/bbs/page.php?hid=manga_detail&amp;manga_id=10067">
                전편보기
               </a>
              </p>
              <div style="margin-top:5px; text-align: center;">
               <span class="txt-normal">
                07-03 01:17
               </span>
              </div>
              <p style="text-align:center">
               인기 11644
              </p>
             </div>
             <div class="media-body">
              <div class="post-content">
               <div class="post-subject">
                [ahref]
                
                <div style="text-align: left;color:gray;">
                 <span class="count" style="font-size:13px">
                  <i class="fa fa-commenting-o">
                  </i>
                  38
                 </span>
                 <span class="count" style="font-size:13px">
                  <i class="fa fa-thumbs-o-up">
                  </i>
                  23
                 </span>
                </div>
               </div>
              </div>
             </div>
            </div>
           </div>
           <div class="post-row">
            <div class="media post-list">
             <div class="pull-left post-image">
              [ahref]
              
             </div>
             <div class="pull-right post-info">
              <p>
               [linkx]
               
              </p>
              <div style="margin-top:5px; text-align: center;">
               <span class="txt-normal">
                07-03 00:37
               </span>
              </div>
              <p style="text-align:center">
               인기 49548
              </p>
             </div>
             <div class="media-body">
              <div class="post-content">
               <div class="post-subject">
                [ahref]
                
                <div style="text-align: left;color:gray;">
                 <span class="count" style="font-size:13px">
                  <i class="fa fa-commenting-o">
                  </i>
                  127
                 </span>
                 <span class="count" style="font-size:13px">
                  <i class="fa fa-thumbs-o-up">
                  </i>
                  61
                 </span>
                </div>
               </div>
              </div>
             </div>
            </div>
           </div>
           <div class="post-row">
            <div class="media post-list">
             <div class="pull-left post-image">
              [linkx]
              
             </div>
             <div class="pull-right post-info">
              <p>
               [ahref]
               
              </p>
              <div style="margin-top:5px; text-align: center;">
               <span class="txt-normal">
                07-03 00:10
               </span>
              </div>
              <p style="text-align:center">
               인기 47223
              </p>
             </div>
             <div class="media-body">
              <div class="post-content">
               <div class="post-subject">
                [ahref]
                
                <div style="text-align: left;color:gray;">
                 <span class="count" style="font-size:13px">
                  <i class="fa fa-commenting-o">
                  </i>
                  130
                 </span>
                 <span class="count" style="font-size:13px">
                  <i class="fa fa-thumbs-o-up">
                  </i>
                  40
                 </span>
                </div>
               </div>
              </div>
             </div>
            </div>
           </div>
           <div class="post-row">
            <div class="media post-list">
             <div class="pull-left post-image">
              <a class="ellipsis" href="/bbs/board.php?bo_table=manga&amp;wr_id=1441494">
               <div class="img-wrap">
                <div class="img-item">
                </div>
               </div>
              </a>
             </div>
             <[keywordx]>
             </[keywordx]>
             <div class="media-body">
              <div class="post-content">
               <div class="post-subject">
                <a href="/bbs/board.php?bo_table=manga&amp;wr_id=1441494" style="font-size:16px">
                 남자 죽이는 오토코로 양 7화
                </a>
                <div style="text-align: left;color:gray;">
                 <span class="count" style="font-size:13px">
                  <i class="fa fa-commenting-o">
                   [ahref][linkx][mkey1][linkx][mkey1][keywordx][pkeyx][linkx][ahref][linkx][keywordx][symbolx][keywordx][symbolx][bracketl10][keywordx][bracketr10][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][linkx][pkeyx][keywordx][symbolx][keywordx][symbolx][bracketl11][keywordx][bracketr11][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][mkey1][pkeyx][linkx][keywordx][linkx]
                  </i>
                  80
                 </span>
                 <span class="count" style="font-size:13px">
                  <i class="fa fa-thumbs-o-up">
                  </i>
                  23
                 </span>
                </div>
               </div>
              </div>
             </div>
            </div>
           </div>
           <div class="post-row">
            <div class="media post-list">
             <div class="pull-left post-image">
              <a class="ellipsis" href="/bbs/board.php?bo_table=manga&amp;wr_id=1441486">
               <div class="img-wrap">
                <div class="img-item">
                </div>
               </div>
              </a>
             </div>
             <div class="pull-right post-info">
              <p>
               [linkx]
               
              </p>
              <div style="margin-top:5px; text-align: center;">
               <span class="txt-normal">
                07-03 00:08
               </span>
              </div>
              <p style="text-align:center">
               인기 12824
              </p>
             </div>
             <div class="media-body">
              <div class="post-content">
               <div class="post-subject">
                [ahref]
                
                <div style="text-align: left;color:gray;">
                 <span class="count" style="font-size:13px">
                  <i class="fa fa-commenting-o">
                  </i>
                  16
                 </span>
                 <span class="count" style="font-size:13px">
                  <i class="fa fa-thumbs-o-up">
                  </i>
                  11
                 </span>
                </div>
               </div>
              </div>
             </div>
            </div>
           </div>
           <div class="post-row">
            <div class="media post-list">
             <div class="pull-left post-image">
              [ahref]
              
             </div>
             <div class="pull-right post-info">
              <p>
               [ahref]
               
              </p>
              <div style="margin-top:5px; text-align: center;">
               <span class="txt-normal">
                07-02 23:48
               </span>
              </div>
              <p style="text-align:center">
               인기 30032
              </p>
             </div>
             <div class="media-body">
              <div class="post-content">
               <div class="post-subject">
                [linkx]
                
                <div style="text-align: left;color:gray;">
                 <span class="count" style="font-size:13px">
                  <i class="fa fa-commenting-o">
                  </i>
                  73
                 </span>
                 <span class="count" style="font-size:13px">
                  <i class="fa fa-thumbs-o-up">
                  </i>
                  43
                 </span>
                </div>
               </div>
              </div>
             </div>
            </div>
           </div>
           <div class="post-row">
            <div class="media post-list">
             <div class="pull-left post-image">
              [linkx]
              
             </div>
             <div class="pull-right post-info">
              <p>
               [linkx]
               
              </p>
              <div style="margin-top:5px; text-align: center;">
               <span class="txt-normal">
                07-02 23:31
               </span>
              </div>
              <p style="text-align:center">
               인기 45493
              </p>
             </div>
             <div class="media-body">
              <div class="post-content">
               <div class="post-subject">
                <a href="/bbs/board.php?bo_table=manga&amp;wr_id=1441096" style="font-size:16px">
                 코미 양은, 커뮤증이에요 205화
                </a>
                <div style="text-align: left;color:gray;">
                 <span class="count" style="font-size:13px">
                  <i class="fa fa-commenting-o">
                  </i>
                  113
                 </span>
                 <span class="count" style="font-size:13px">
                  <i class="fa fa-thumbs-o-up">
                  </i>
                  60
                 </span>
                </div>
               </div>
              </div>
             </div>
            </div>
           </div>
           <div class="post-row">
            <div class="media post-list">
             <div class="pull-left post-image">
              <a class="ellipsis" href="/bbs/board.php?bo_table=manga&amp;wr_id=1441049">
               <div class="img-wrap">
                <div class="img-item">
                </div>
               </div>
              </a>
             </div>
             <div class="pull-right post-info">
              <p>
               [linkx]
               
              </p>
              <div style="margin-top:5px; text-align: center;">
               <span class="txt-normal">
                07-02 23:26
               </span>
              </div>
              <p style="text-align:center">
               인기 28291
              </p>
             </div>
             <div class="media-body">
              <div class="post-content">
               <div class="post-subject">
                <a href="/bbs/board.php?bo_table=manga&amp;wr_id=1441049" style="font-size:16px">
                 프랑켄 프랑 2부 4화
                </a>
                <div style="text-align: left;color:gray;">
                 <span class="count" style="font-size:13px">
                  <i class="fa fa-commenting-o">
                  </i>
                  76
                 </span>
                 <span class="count" style="font-size:13px">
                  <i class="fa fa-thumbs-o-up">
                  </i>
                  21
                 </span>
                </div>
               </div>
              </div>
             </div>
            </div>
           </div>
           <div class="post-row">
            <div class="media post-list">
             <div class="pull-left post-image">
              [linkx]
              
             </div>
             <div class="pull-right post-info">
              <p>
               <a class="btn btn-xs btn-primary" href="/bbs/page.php?hid=manga_detail&amp;manga_id=4274">
                전편보기
               </a>
              </p>
              <div style="margin-top:5px; text-align: center;">
               <span class="txt-normal">
                07-02 23:20
               </span>
              </div>
              <p style="text-align:center">
               인기 42530
              </p>
             </div>
             <div class="media-body">
              <div class="post-content">
               <div class="post-subject">
                [ahref]
                
                <div style="text-align: left;color:gray;">
                 <span class="count" style="font-size:13px">
                  <i class="fa fa-commenting-o">
                  </i>
                  96
                 </span>
                 <span class="count" style="font-size:13px">
                  <i class="fa fa-thumbs-o-up">
                  </i>
                  55
                 </span>
                </div>
               </div>
              </div>
             </div>
            </div>
           </div>
           <div class="post-row">
            <div class="media post-list">
             <div class="pull-left post-image">
              [ahref]
              
             </div>
             <div class="pull-right post-info">
              <p>
               <a class="btn btn-xs btn-primary" href="/bbs/page.php?hid=manga_detail&amp;manga_id=5324">
                전편보기
               </a>
              </p>
              <div style="margin-top:5px; text-align: center;">
               <span class="txt-normal">
                07-02 23:12
               </span>
              </div>
              <p style="text-align:center">
               인기 18488
              </p>
             </div>
             <div class="media-body">
              <div class="post-content">
               <div class="post-subject">
                [ahref]
                
                <div style="text-align: left;color:gray;">
                 <span class="count" style="font-size:13px">
                  <i class="fa fa-commenting-o">
                  </i>
                  57
                 </span>
                 <span class="count" style="font-size:13px">
                  <i class="fa fa-thumbs-o-up">
                  </i>
                  33
                 </span>
                </div>
               </div>
              </div>
             </div>
            </div>
           </div>
           <div class="post-row">
            <div class="media post-list">
             <div class="pull-left post-image">
              [linkx]
              
             </div>
             <div class="pull-right post-info">
              <p>
               [ahref]
               
              </p>
              <div style="margin-top:5px; text-align: center;">
               <span class="txt-normal">
                07-02 23:11
               </span>
              </div>
              <p style="text-align:center">
               인기 6693
              </p>
             </div>
             <div class="media-body">
              <div class="post-content">
               <div class="post-subject">
                [ahref]
                
                <div style="text-align: left;color:gray;">
                 <span class="count" style="font-size:13px">
                  <i class="fa fa-commenting-o">
                  </i>
                  30
                 </span>
                 <span class="count" style="font-size:13px">
                  <i class="fa fa-thumbs-o-up">
                  </i>
                  11
                 </span>
                </div>
               </div>
              </div>
             </div>
            </div>
           </div>
          </div>
          <div class="list-btn-box">
           <div class="form-group list-btn font-12">
            <div class="btn-group">
            </div>
           </div>
           <div class="clearfix">
           </div>
          </div>
         </form>
         <div class="list-page text-center">
          <ul class="pagination pagination-sm en">
           <li class="disabled">
            <a>
             <i class="fa fa-angle-double-left">
             </i>
            </a>
           </li>
           <li class="disabled">
            <a>
             <i class="fa fa-angle-left">
             </i>
            </a>
           </li>
           <li class="active">
            1<li>[linkx]</li>[ahref]<li>[keywordx][symbolx][keywordx][symbolx][bracketl17][keywordx][bracketr17][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx]</li>[linkx][ahref]
           </li>
           <li>
            [ahref]
            
           </li>
           <li>
            [linkx]
            
           </li>
           <li>
            [linkx]
            
           </li>
           <li>
            [ahref]
            
           </li>
           <li>
            <a href="/board.php?bo_table=manga&amp;page=6">
             6
            </a>
           </li>
           <li>
            <a href="/board.php?bo_table=manga&amp;page=7">
             7
            </a>
           </li>
           <li>
            <a href="/board.php?bo_table=manga&amp;page=8">
             8
            </a>
           </li>
           <li>
            [linkx]
            
           </li>
           <li>
            [linkx]
            
           </li>
           <li>
            <a href="/board.php?bo_table=manga&amp;page=11">
             <i class="fa fa-angle-right">
             </i>
            </a>
           </li>
           <li>
            [ahref]
            
           </li>
          </ul>
         </div>
         <div class="widget-box">
          <div class="ad-banner-widget fit-banner" data-mobile="http://i64.tinypic.com/4hyvpe.jpg" data-pc="http://i67.tinypic.com/2z906r5.gif" onclick="window.open('http://www.ca9xno.com/','_blank')" style="">
          </div>
         </div>
         <div class="clearfix">
         </div>
         <div aria-hidden="true" aria-labelledby="myModalLabel" class="modal fade" id="searchModal" role="dialog" tabindex="-1">
          <div class="modal-dialog modal-sm">
           <div class="modal-content">
            <div class="modal-body">
             <div class="text-center">
              <h4 id="myModalLabel">
               <i class="fa fa-search fa-lg">
               </i>
               Search
              </h4>
             </div>
             <form class="form" method="get" name="fsearch" role="form" style="margin-top:20px;">
              <div class="form-group">
               <label class="sound_only" for="sfl">
                검색대상
               </label>
               <select class="form-control input-sm" id="sfl" name="sfl">
                <option value="wr_subject">
                 제목
                </option>
                <option value="wr_content">
                 내용
                </option>
                <option value="wr_subject||wr_content">
                 제목+내용
                </option>
                <option value="mb_id,1">
                 회원아이디
                </option>
                <option value="mb_id,0">
                 회원아이디(코)
                </option>
                <option value="wr_name,1">
                 글쓴이
                </option>
                <option value="wr_name,0">
                 글쓴이(코)
                </option>
               </select>
              </div>
              <div class="form-group">
               <label class="sound_only" for="stx">
                검색어
                <strong class="sound_only">
                 필수
                </strong>
               </label>
              </div>
              <div class="btn-group btn-group-justified">
               <div class="btn-group">
                <button class="btn btn-color" type="submit">
                 <i class="fa fa-check">
                  <li>[pkeyx]</li>[linkx][linkx]
                 </i>
                </button>
               </div>
               <div class="btn-group">
                <button class="btn btn-black" data-dismiss="modal" type="button">
                 <i class="fa fa-times">
                 </i>
                </button>
               </div>
              </div>
             </form>
            </div>
           </div>
          </div>
         </div>
        </div>
       </section>
      </div>
      <div class="col-md-3 at-col at-side">
       <div class="widget-side">
        <div class="hidden-sm hidden-xs">
         <div class="widget-box">
          <div class="basic-outlogin">
           <form action="/bbs/login_check.php" autocomplete="off" class="form" id="basic_outlogin" method="post" name="basic_outlogin" onsubmit="return basic_outlogin_form(this);" role="form">
            <div class="form-group">
             <div class="input-group">
              <span class="input-group-addon">
               <i class="fa fa-user gray">
               </i>
              </span>
             </div>
            </div>
            <div class="form-group">
             <div class="input-group">
              <span class="input-group-addon">
               <i class="fa fa-lock gray">
               </i>
              </span>
             </div>
            </div>
            <div class="form-group">
             <button class="btn btn-navy btn-block en" tabindex="23" type="submit">
              <i class="fa fa-sign-in">
              </i>
              Login
             </button>
            </div>
            <div style="letter-spacing:-1px;">
             <div class="pull-left text-muted hidden-xs">
              <label>
               자동로그인
              </label>
             </div>
             <div class="pull-right text-muted">
              <a href="/bbs/register.php">
               <span class="text-muted">
                회원가입
               </span>
              </a>
              <span class="lightgray">
               |
              </span>
              <a class="win_password_lost" href="/bbs/password_lost.php">
               <span class="text-muted">
                정보찾기
               </span>
              </a>
             </div>
             <div class="clearfix">
             </div>
            </div>
           </form>
          </div>
         </div>
        </div>
        <div class="widget-box">
         <div class="ad-banner-widget " data-mobile="https://img.chickencdn.info/upload/4cd5c7e13fb93403f9b16edb115a8adc.gif" data-pc="https://img.chickencdn.info/upload/4cd5c7e13fb93403f9b16edb115a8adc.gif" onclick="window.open('http://sportsmoa.net','_blank')" style="max-width:245px; min-width:245px;height:70px;">
         </div>
        </div>
        <div class="div-title-underbar" style="margin-bottom: 5px;">
         <span class="div-title-underbar-bold border-navy font-16 en">
          <b>
           공지사항
          </b>
         </span>
        </div>
        <div class="widget-box">
         <div class="basic-post-list">
          <ul class="post-list">
           <li class="ellipsis">
            [ahref]
            
           </li>
           <li class="ellipsis">
            <a href="/bbs/board.php?bo_table=notice&amp;wr_id=36">
             <span class="pull-right gray font-12">
              <span class="count orangered">
               +37
              </span>
              04.06
             </span>
             공식 SNS 및 대피소 안내
            </a>
           </li>
           <li class="ellipsis">
            [ahref]
            
           </li>
          </ul>
         </div>
        </div>
        <div class="div-title-underbar" style="margin-bottom: 5px;">
         <span class="div-title-underbar-bold border-navy font-16 en">
          <b>
           인증업체 이벤트
          </b>
         </span>
        </div>
        <div class="widget-box">
         <div class="basic-post-list">
          <ul class="post-list">
           <li class="ellipsis">
            [linkx]
            
           </li>
           <li class="ellipsis">
            [ahref]
            
           </li>
           <li class="ellipsis">
            <a href="/bbs/board.php?bo_table=ad01&amp;wr_id=266">
             ☆☆ 마카티 금일(6월29일) 돌발 이벤트 (종료) ☆☆
            </a>
           </li>
           <li class="ellipsis">
            [ahref]
            
           </li>
           <li class="ellipsis">
            <a href="/bbs/board.php?bo_table=ad01&amp;wr_id=247">
             ☆☆ 마카티 금일(6월25일) 돌발 이벤트 (종료) ☆☆
            </a>
           </li>
          </ul>
         </div>
        </div>
        <div class="div-title-underbar" style="margin-bottom: 5px;">
         <span class="div-title-underbar-bold border-navy font-16 en">
          <b>
           북마크 업데이트
          </b>
         </span>
        </div>
        <div class="widget-box">
         <div class="rank-manga-widget">
          <ul class="post-list">
          </ul>
          <div class="post-none">
           로그인이 필요합니다.
          </div>
         </div>
        </div>
        <div class="div-title-underbar" style="margin-bottom: 5px;">
         <span class="div-title-underbar-bold border-navy font-16 en">
          <b>
           최근 본 만화
          </b>
         </span>
        </div>
        <div class="widget-box">
         <div class="rank-manga-widget">
          <ul class="post-list">
          </ul>
          <div class="post-none">
           로그인이 필요합니다.
          </div>
         </div>
        </div>
        <div class="widget-box">
         <div class="ad-banner-widget " data-mobile="" data-pc="http://i64.tinypic.com/30rr9t4.png" onclick="window.open('https://twitter.com/manamoa20?lang=ko','_blank')" style="max-width:240px; min-width:240px;height:102px;">
         </div>
        </div>
        <div class="widget-box">
         <div class="ad-banner-widget " data-mobile="" data-pc="http://i66.tinypic.com/jgqjv6.gif" onclick="window.open('http://maa-333.com','_blank')" style="max-width:240px; min-width:240px;height:102px;">
         </div>
        </div>
        <div class="widget-box">
         <div class="ad-banner-widget " data-mobile="" data-pc="http://i66.tinypic.com/jgqjv6.gif" onclick="window.open('http://maa-333.com','_blank')" style="max-width:240px; min-width:240px;height:102px;">
         </div>
        </div>
        <div class="widget-box">
         <div class="ad-banner-widget " data-mobile="" data-pc="http://i66.tinypic.com/28ox3.gif" onclick="window.open('http://jgm38.com','_blank')" style="max-width:240px; min-width:240px;height:102px;">
         </div>
        </div>
        <div class="widget-box">
         <div class="ad-banner-widget " data-mobile="" data-pc="" style="max-width:240px; min-width:240px;">
         </div>
        </div>
        <div class="widget-box">
         <div class="ad-banner-widget " data-mobile="" data-pc="" style="max-width:240px; min-width:240px;">
         </div>
        </div>
        <div class="widget-box">
         <div class="ad-banner-widget " data-mobile="" data-pc="" style="max-width:240px; min-width:240px;">
         </div>
        </div>
        <div class="widget-box">
         <div class="ad-banner-widget " data-mobile="" data-pc="" style="max-width:240px; min-width:240px;">
         </div>
        </div>
        <div class="widget-box">
         <div class="ad-banner-widget " data-mobile="" data-pc="" style="max-width:240px; min-width:240px;">
         </div>
        </div>
        <div class="widget-box">
         <div class="ad-banner-widget " data-mobile="" data-pc="" style="max-width:240px; min-width:240px;">
         </div>
        </div>
       </div>
      </div>
     </div>
    </div>
   </div>
   <footer class="at-footer">
    <div class="at-infos">
     <div class="at-container">
      <div class="at-copyright">
       <div style="color:#555">
        <div style="display:inline-block">
         Telegram :
         [linkx]
         
        </div>
        <div style="display:inline-block;margin:0 10px">
         Facebook :
         [linkx]
         
        </div>
        <div style="display:inline-block">
         Twitter :
         [ahref]
         
        </div>
       </div>
       manamoa.net [
       [ahref]
       
       ]
      </div>
     </div>
    </div>
   </footer>
  </div>
  <div class="at-go">
   <div class="go-btn" id="go-btn">
    <span class="go-top cursor">
     <i class="fa fa-chevron-up">
     </i>
    </span>
    <span class="go-bottom cursor">
     <i class="fa fa-chevron-down">
     </i>
    </span>
   </div>
  </div>
  <aside class="ko" id="sidebar-box">
   <div class="sidebar-head bg-navy">
   </div>
   <div class="sidebar-wing">
    <div class="sidebar-wing-close sidebar-close en" title="닫기">
     <i class="fa fa-times">
     </i>
    </div>
   </div>
   <div class="sidebar-content" id="sidebar-content">
    <div class="h30">
    </div>
    <div class="sidebar-common">
     <div class="btn-group btn-group-justified" role="group">
      [linkx]
      
      [ahref]
      
      [linkx]
      
     </div>
     <div class="h15">
     </div>
    </div>
    <div class="sidebar-item" id="sidebar-menu">
     <div class="div-title-underline-thin en">
      <b>
       MENU[linkx]<li>[keywordx][symbolx][keywordx][symbolx][bracketl15][keywordx][bracketr15][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx]</li>[keywordx][symbolx][keywordx][symbolx][bracketl16][keywordx][bracketr16][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][pkeyx][pkeyx]
      </b>
     </div>
     <div class="sidebar-icon-tbl">
      <div class="sidebar-icon-cell">
       [ahref]
       
      </div>
      <div class="sidebar-icon-cell">
       <a href="/bbs/board.php?bo_table=event">
        <i class="fa fa-gift circle light-circle normal">
        </i>
        <span>
         이벤트
        </span>
       </a>
      </div>
      <div class="sidebar-icon-cell">
       [ahref]
       
      </div>
      <div class="sidebar-icon-cell">
       [linkx]
       
      </div>
     </div>
     <div aria-multiselectable="true" class="sidebar-menu panel-group" id="sidebar_menu" role="tablist">
      <div class="panel">
       <div class="ca-head active" role="tab">
        <a class="no-sub" href="/bbs/board.php?bo_table=manga">
         업데이트
        </a>
       </div>
      </div>
      <div class="panel">
       <div class="ca-head" role="tab">
        [linkx]
        
       </div>
      </div>
      <div class="panel">
       <div class="ca-head" id="sidebar_menu_c3" role="tab">
        [linkx]
        
       </div>
       <div aria-labelledby="sidebar_menu_c3" class="panel-collapse collapse" id="sidebar_menu_s3" role="tabpanel">
        <ul class="ca-sub">
         <li>
          [ahref]
          
         </li>
         <li>
          [linkx]
          
         </li>
         <li>
          [linkx]
          
         </li>
         <li>
          [linkx]
          
         </li>
         <li>
          <a href="/bbs/board.php?bo_table=notice">
           공지사항
          </a>
         </li>
        </ul>
       </div>
      </div>
      <div class="panel">
       <div class="ca-head" id="sidebar_menu_c4" role="tab">
        [ahref]
        
       </div>
       <div aria-labelledby="sidebar_menu_c4" class="panel-collapse collapse" id="sidebar_menu_s4" role="tabpanel">
        <ul class="ca-sub">
         <li>
          [linkx]
          
         </li>
         <li>
          <a href="/bbs/board.php?bo_table=ad02">
           나인엑스
          </a>
         </li>
         <li>
          [ahref]
          
         </li>
         <li>
          [ahref]
          
         </li>
        </ul>
       </div>
      </div>
     </div>
     <div class="h20">
     </div>
    </div>
    <div class="sidebar-item" id="sidebar-search">
     <div class="div-title-underline-thin en">
      <b>
       SEARCH
      </b>
     </div>
     <div class="sidebar-search">
      <form class="form" id="ctrlSearch" method="get" name="ctrlSearch" onsubmit="return sidebar_search(this);" role="form">
       <div class="row">
        <div class="col-xs-6">
         <select class="form-control input-sm" name="url">
          <option value="https://manamoa8.net/bbs/search.php">
           게시물
          </option>
          <option value="https://manamoa8.net/bbs/tag.php">
           태그
          </option>
         </select>
        </div>
        <div class="col-xs-6">
         <select class="form-control input-sm" name="sop">
          <option value="or">
           또는
          </option>
          <option value="and">
           그리고
          </option>
         </select>
        </div>
       </div>
       <div class="input-group input-group-sm" style="margin-top:8px;">
        <span class="input-group-btn">
         <button class="btn btn-navy btn-sm" type="submit">
          <i class="fa fa-search">
          </i>
         </button>
        </span>
       </div>
      </form>
     </div>
    </div>
    <div class="sidebar-item" id="sidebar-user">
     <div class="sidebar-login">
      <form action="/bbs/login_check.php" autocomplete="off" class="form" id="sidebar_login_form" method="post" name="sidebar_login_form" onsubmit="return sidebar_login(this);" role="form">
       <div class="form-group">
        <div class="input-group">
         <span class="input-group-addon">
          <i class="fa fa-user gray">
          </i>
         </span>
        </div>
       </div>
       <div class="form-group">
        <div class="input-group">
         <span class="input-group-addon">
          <i class="fa fa-lock gray">
          </i>
         </span>
        </div>
       </div>
       <div class="form-group">
        <button class="btn btn-navy btn-block" tabindex="93" type="submit">
         Login
        </button>
       </div>
       <label class="text-muted" style="letter-spacing:-1px;">
        자동로그인 및 로그인 상태 유지
       </label>
      </form>
      <div class="h10">
       [keywordx][symbolx][keywordx][symbolx][bracketl18][keywordx][bracketr18][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][mkey1]<li>[pkeyx]</li>[keywordx][keywordx][symbolx][keywordx][symbolx][bracketl1][keywordx][bracketr1][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx]
      </div>
      <div class="div-title-underline-thin en">
       <b>
        MEMBER
       </b>
      </div>
      <ul class="sidebar-list list-links">
       <li>
        <a href="/bbs/register.php">
         회원가입
        </a>
       </li>
       <li>
        <a class="win_password_lost" href="/bbs/password_lost.php">
         아이디/비밀번호 찾기
        </a>
       </li>
      </ul>
     </div>
     <div class="h20">
     </div>
     <div class="div-title-underline-thin en">
      <b>
       SERVICE
      </b>
     </div>
     <ul class="sidebar-list list-links">
      <li>
       [linkx]
       
      </li>
      <li>
       <a href="/bbs/new.php">
        새글모음
       </a>
      </li>
     </ul>
    </div>
    <div class="sidebar-item" id="sidebar-response">
     <div id="sidebar-response-list">
     </div>
    </div>
    <div class="h30">
    </div>
   </div>
  </aside>
  <div class="sidebar-close" id="sidebar-box-mask">
  </div>
  <b style="color:black;background-color:#a0ffff">
   jnice09-ipp30-wq-zq-0153
  </b>
 </body>
</html>
|<---