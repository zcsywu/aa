--->|<!DOCTYPE html>
<html lang="en" prefix="og: http://ogp.me/ns">
 <head>
  <meta charset="utf-8"/>
  <meta content="IE=Edge" http-equiv="X-UA-Compatible"/>
  <meta content="width=device-width,initial-scale=1" name="viewport"/>
  <title>
   [mkey1][symbolx][pkey1][symbolx][keyword1][bracketl1][bracketr1][symbolx][bracketl2][siter1][bracketr2][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx]
  </title>
  <meta content="[mkey1][symbolx][pkey1][symbolx][keyword1][bracketl1][bracketr1][symbolx][bracketl2][siter1][bracketr2][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx]" name="description"/>
  <meta content="[mkey1][symbolx][pkey1][symbolx][keyword1][bracketl1][bracketr1][symbolx][bracketl2][siter1][bracketr2][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx]" name="keywords"/>
  <meta content="Paris Convention and Visitors Bureau" name="copyright"/>
  <meta content="Paris Convention and Visitors Bureau" name="author">
   <meta content="wQWdX_8MDu1Hv8z0PHyo2POv2s0p09Y4cE7IL97wtwc" name="google-site-verification">
    <meta content="33123360ef42db9ba00718bc651e2d20" name="p:domain_verify">
     <meta content="Paris 2019: major events - Paris Tourist Office - Paris tourist office" property="og:title">
      <meta content="article" property="og:type"/>
      <meta content="https://en.parisinfo.com/discovering-paris/major-events/what-to-do-in-paris" property="og:url">
       <meta content="https://en.parisinfo.com/var/otcp/sites/images/node_43/node_51/node_234/home-grands-événements-2018-|1920x250-|-©-maxime-chermat-we-love-green/18613683-8-fre-FR/Home-Grands-événements-2018-|1920x250-|-©-Maxime-Chermat-We-Love-Green.jpg" property="og:image">
        <meta content="image/jpeg" property="og:image:type">
         <meta content="[mkey1][symbolx][pkey1][symbolx][keyword1][bracketl1][bracketr1][symbolx][bracketl2][siter1][bracketr2][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx]" property="og:description"/>
         <meta content="[mkey1][symbolx][pkey1][symbolx][keyword1][bracketl1][bracketr1][symbolx][bracketl2][siter1][bracketr2][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx]" property="og:site_name"/>
        </meta>
       </meta>
      </meta>
     </meta>
    </meta>
   </meta>
  </meta>
 </head>
 <body>
  <noscript>
   <iframe height="0" src="https://www.googletagmanager.com/ns.html?id=GTM-TMK6DTK" style="display:none;visibility:hidden" width="0">
   </iframe>
  </noscript>
  <div class="Layout Layout--visitors">
   <header class="Header">
    <div class="Row Header-top">
     <div class="Row-content Header-topContent">
      <ul class="TopMenu TopMenu--visitors">
       <li class="TopMenu-item">
        [linkx]
        
       </li>
       <li class="TopMenu-item">
        [linkx]
        
       </li>
       <li class="TopMenu-item">
        [linkx]
        
       </li>
       <li class="TopMenu-item">
        [ahref]
        
       </li>
      </ul>
      <div class="Header-topTools">
       <div class="TopSocial js-Dropdown">
        <ul class="TopSocial-list js-Dropdown-content">
         <li class="TopSocial-item">
          [ahref]
          
         </li>
         <li class="TopSocial-item">
          [ahref]
          
         </li>
         <li class="TopSocial-item">
          [ahref]
          
         </li>
         <li class="TopSocial-item">
          [ahref]
          
         </li>
         <li class="TopSocial-item">
          <a class="TopSocial-link" href="/parisjetaime/" target="_blank">
           <svg aria-hidden="true" class="Icon Icon--instagram">
            <use xlink:href="/bundles/otcpstatic/sprite/icons.svg#instagram">
            </use>
           </svg>
          </a>
         </li>
         <li class="TopSocial-item">
          <a class="TopSocial-link" href="/user/ParisOTC" target="_blank">
           <svg aria-hidden="true" class="Icon Icon--youtube">
            <use xlink:href="/bundles/otcpstatic/sprite/icons.svg#youtube">
            </use>
           </svg>
          </a>
         </li>
        </ul>
        <button class="TopSocial-btn js-Dropdown-btn">
        </button>
       </div>
       <div class="Langs js-Dropdown js-Dropdown--auto">
        <button class="Langs-selected js-Dropdown-btn">
        </button>
        <ul class="Langs-list">
         <li>
          [ahref]
          
         </li>
         <li>
          <a class="Langs-item" href="/descubrir-paris/las-principales-citas/paris-l-agenda-grandes-eventos" title="Español">
          </a>
         </li>
         <li>
          [ahref]
          
         </li>
         <li>
          <a class="Langs-item" href="/" title="Italiano">
          </a>
         </li>
         <li>
          <a class="Langs-item" href="/" title="Português">
          </a>
         </li>
         <li>
          [ahref]
          
         </li>
         <li>
          [linkx]
          
         </li>
         <li>
          [ahref]
          
         </li>
         <li>
          [linkx]
          
         </li>
         <li>
          [linkx]
          
         </li>
        </ul>
       </div>
      </div>
     </div>
    </div>
    <div class="Row">
     <div class="Row-content Header-main">
      <div class="TopLogo TopLogo--visitors">
       [linkx]
       
      </div>
      <ul class="IconsMenu IconsMenu--visitors">
       <li class="IconsMenu-item">
        [linkx]
        
       </li>
       <li class="IconsMenu-item">
        [linkx]
        
       </li>
       <li class="IconsMenu-item">
        [linkx]
        
       </li>
       <li class="IconsMenu-item">
        [linkx]
        
       </li>
      </ul>
      <div class="RwdNav js-ShowMenu-open">
       <svg aria-hidden="true" class="Icon Icon--menu">
        <use xlink:href="/bundles/otcpstatic/sprite/icons.svg#menu">
        </use>
       </svg>
       Menu
      </div>
     </div>
    </div>
    <div class="Row Header-bottom">
     <div class="Row-content">
      <nav class="MainMenu MainMenu--visitors js-DropMenu">
       <div class="MainMenu-static">
        <ul class="MainMenu-list clearfix">
         <li class="MainMenu-item js-DropMenu-btn js-responsive-menu-item" data-id="0">
          [linkx]
          
         </li>
         <li class="MainMenu-item js-DropMenu-btn js-responsive-menu-item" data-id="1">
          [ahref]
          
         </li>
         <li class="MainMenu-item js-DropMenu-btn js-responsive-menu-item" data-id="2">
          [linkx]
          
         </li>
         <li class="MainMenu-item js-DropMenu-btn js-responsive-menu-item" data-id="3">
          [ahref]
          
         </li>
         <li class="MainMenu-item js-DropMenu-btn js-responsive-menu-item" data-id="4">
          [ahref]
          
         </li>
         <li class="MainMenu-item js-DropMenu-btn js-responsive-menu-item" data-id="5">
          [linkx]
          
         </li>
         <li class="MainMenu-item js-DropMenu-btn js-responsive-menu-item" data-id="6">
          <a class="MainMenu-link" data-location-id="256" href="/practical-paris">
           Practical Paris
          </a>
         </li>
        </ul>
        <p class="MainMenu-btn js-responsive-menu-item">
         [ahref]
         
        </p>
       </div>
       <div class="MainMenu-responsive">
        <button class="MainMenu-btn-responsive">
         <svg aria-hidden="true" class="Icon Icon--menu-overflow">
          <use xlink:href="/bundles/otcpstatic/sprite/icons.svg#menu-overflow">
          </use>
         </svg>
        </button>
        <ul class="MainMenu-responsive-list">
         <li class="MainMenu-responsive-item js-DropMenu-btn" data-id="0" style="display:none">
          <a class="MainMenu-responsive-link" href="/discovering-paris">
           Explore
          </a>
         </li>
         <li class="MainMenu-responsive-item js-DropMenu-btn" data-id="1" style="display:none">
          [ahref]
          
         </li>
         <li class="MainMenu-responsive-item js-DropMenu-btn" data-id="2" style="display:none">
          [ahref]
          
         </li>
         <li class="MainMenu-responsive-item js-DropMenu-btn" data-id="3" style="display:none">
          [linkx]
          
         </li>
         <li class="MainMenu-responsive-item js-DropMenu-btn" data-id="4" style="display:none">
          <a class="MainMenu-responsive-link" href="/where-to-eat-in-paris">
           Eating out
          </a>
         </li>
         <li class="MainMenu-responsive-item js-DropMenu-btn" data-id="5" style="display:none">
          <a class="MainMenu-responsive-link" href="/where-to-sleep-in-paris">
           Where to stay
          </a>
         </li>
         <li class="MainMenu-responsive-item js-DropMenu-btn" data-id="6" style="display:none">
          <a class="MainMenu-responsive-link" href="/practical-paris">
           Practical Paris
          </a>
         </li>
         <li style="display:none">
          <div class="MainMenu-btn">
           [ahref]
           
          </div>
         </li>
        </ul>
       </div>
       <div class="MainMenu-submenu MainMenu-submenu--visitors js-DropMenu-content" data-dropmenu="" data-id="0">
        <div class="MainMenu-subCols">
         <div class="MainMenu-subCol MainMenu-subCol--list">
          <ul>
           <li class="">
            [content12][content13][linkx][content14][content15]
           </li>
           <li class="">
            [ahref]
            
           </li>
           <li class="">
            [linkx]
            
           </li>
           <li class="">
            [linkx]
            
           </li>
           <li class="">
            [ahref]
            
           </li>
           <li class="">
            [linkx]
            
           </li>
          </ul>
          <ul class="MainMenu-subList">
           <li class="MainMenu-subItem">
            [ahref]
            
           </li>
           <li class="MainMenu-subItem">
            [linkx]
            
           </li>
          </ul>
         </div>
        </div>
       </div>
       <div class="MainMenu-submenu MainMenu-submenu--visitors js-DropMenu-content" data-dropmenu="" data-id="1">
        <div class="MainMenu-subCols">
         <div class="MainMenu-subCol MainMenu-subCol--list">
          <ul>
           <li class="">
            [ahref]
            
           </li>
           <li class="">
            <a class="MainMenu-subLink" href="/what-to-see-in-paris/museums">
             Museums in Paris
             <svg aria-hidden="true" class="Icon Icon--arrow-right">
              <use xlink:href="/bundles/otcpstatic/sprite/icons.svg#arrow-right">
              </use>
             </svg>
            </a>
           </li>
           <li class="">
            [ahref]
            
           </li>
           <li class="">
            [ahref]
            
           </li>
           <li class="">
            [ahref]
            
           </li>
           <li class="">
            [linkx]
            
           </li>
          </ul>
          <ul class="MainMenu-subList">
           <li class="MainMenu-subItem">
            [linkx]
            
           </li>
           <li class="MainMenu-subItem">
            [ahref]
            
           </li>
           <li class="MainMenu-subItem">
            [linkx]
            
           </li>
          </ul>
         </div>
        </div>
       </div>
       <div class="MainMenu-submenu MainMenu-submenu--visitors js-DropMenu-content" data-dropmenu="" data-id="2">
        <div class="MainMenu-subCols">
         <div class="MainMenu-subCol MainMenu-subCol--list">
          <ul>
           <li class="">
            [ahref]
            
           </li>
           <li class="">
            [ahref]
            
           </li>
           <li class="">
            [linkx]
            
           </li>
           <li class="">
            [linkx]
            
           </li>
           <li class="">
            [ahref]
            
           </li>
           <li class="">
            [linkx]
            
           </li>
          </ul>
          <ul class="MainMenu-subList">
           <li class="MainMenu-subItem">
            [linkx]
            
           </li>
           <li class="MainMenu-subItem">
            [linkx]
            
           </li>
           <li class="MainMenu-subItem">
            [ahref]
            
           </li>
           <li class="MainMenu-subItem">
            <a class="MainMenu-subLink" href="/what-to-do-in-paris/Zoos-Aquariums">
             Zoos &amp; Aquariums
             <svg aria-hidden="true" class="Icon Icon--arrow-right">
              <use xlink:href="/bundles/otcpstatic/sprite/icons.svg#arrow-right">
              </use>
             </svg>
            </a>
           </li>
           <li class="MainMenu-subItem">
            <a class="MainMenu-subLink" href="/what-to-do-in-paris/family-entertainment-in-paris">
             Family entertainment in Paris
             <svg aria-hidden="true" class="Icon Icon--arrow-right">
              <use xlink:href="/bundles/otcpstatic/sprite/icons.svg#arrow-right">
              </use>
             </svg>
            </a>
           </li>
           <li class="MainMenu-subItem">
            [linkx]
            
           </li>
          </ul>
         </div>
        </div>
       </div>
       <div class="MainMenu-submenu MainMenu-submenu--visitors js-DropMenu-content" data-dropmenu="" data-id="3">
        <div class="MainMenu-subCols">
         <div class="MainMenu-subCol MainMenu-subCol--list">
          <ul>
           <li class="">
            [linkx]
            
           </li>
           <li class="">
            [ahref]
            
           </li>
           <li class="">
            [ahref]
            
           </li>
           <li class="">
            [linkx]
            
           </li>
           <li class="">
            [linkx]
            
           </li>
           <li class="">
            [ahref]
            
           </li>
          </ul>
          <ul class="MainMenu-subList">
           <li class="MainMenu-subItem">
            [linkx]
            
           </li>
           <li class="MainMenu-subItem">
            [linkx]
            
           </li>
           <li class="MainMenu-subItem">
            [linkx]
            
           </li>
           <li class="MainMenu-subItem">
            [linkx]
            
           </li>
           <li class="MainMenu-subItem">
            [link][keywordx][symbolx][keywordx][symbolx][bracketl6][keywordx][bracketr6][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][link]<li>[link]</li><li>[link]</li>
           </li>
           <li class="MainMenu-subItem">
            [linkx]
            
           </li>
          </ul>
         </div>
        </div>
       </div>
       <div class="MainMenu-submenu MainMenu-submenu--visitors js-DropMenu-content" data-dropmenu="" data-id="4">
        <div class="MainMenu-subCols">
         <div class="MainMenu-subCol MainMenu-subCol--list">
          <ul>
           <li class="">
            [ahref]
            
           </li>
           <li class="">
            [ahref]
            
           </li>
           <li class="">
            [ahref]
            
           </li>
           <li class="">
            [linkx]
            
           </li>
           <li class="">
            [linkx]
            
           </li>
           <li class="">
            [linkx]
            
           </li>
          </ul>
          <ul class="MainMenu-subList">
           <li class="MainMenu-subItem">
            [ahref]
            
           </li>
           <li class="MainMenu-subItem">
            [ahref]
            
           </li>
           <li class="MainMenu-subItem">
            [linkx]
            
           </li>
           <li class="MainMenu-subItem">
            [ahref]
            
           </li>
          </ul>
         </div>
        </div>
       </div>
       <div class="MainMenu-submenu MainMenu-submenu--visitors js-DropMenu-content" data-dropmenu="" data-id="5">
        <div class="MainMenu-subCols">
         <div class="MainMenu-subCol MainMenu-subCol--list">
          <ul>
           <li class="">
            [ahref]
            
           </li>
           <li class="">
            [ahref]
            
           </li>
           <li class="">
            [ahref]
            
           </li>
           <li class="">
            <a class="MainMenu-subLink" href="/where-to-sleep-in-paris/hostels-in-paris">
             Hostels in Paris
             <svg aria-hidden="true" class="Icon Icon--arrow-right">
              <use xlink:href="/bundles/otcpstatic/sprite/icons.svg#arrow-right">
              </use>
             </svg>
            </a>
           </li>
           <li class="">
            [ahref]
            
           </li>
           <li class="">
            [ahref]
            
           </li>
          </ul>
          <ul class="MainMenu-subList">
           <li class="MainMenu-subItem">
            <a class="MainMenu-subLink" href="/where-to-sleep-in-paris/alternative-accommodation-paris">
             Alternative accommodation
             <svg aria-hidden="true" class="Icon Icon--arrow-right">
              <use xlink:href="/bundles/otcpstatic/sprite/icons.svg#arrow-right">
              </use>
             </svg>
            </a>
           </li>
           <li class="MainMenu-subItem">
            [linkx]
            
           </li>
           <li class="MainMenu-subItem">
            [ahref]
            
           </li>
           <li class="MainMenu-subItem">
            [linkx]
            
           </li>
           <li class="MainMenu-subItem">
            [ahref]
            
           </li>
           <li class="MainMenu-subItem">
            [linkx]
            
           </li>
          </ul>
         </div>
        </div>
       </div>
       <div class="MainMenu-submenu MainMenu-submenu--visitors js-DropMenu-content" data-dropmenu="" data-id="6">
        <div class="MainMenu-subCols">
         <div class="MainMenu-subCol MainMenu-subCol--list">
          <ul>
           <li class="">
            [ahref]
            
           </li>
           <li class="">
            [linkx]
            
           </li>
           <li class="">
            [linkx]
            
           </li>
           <li class="">
            [ahref]
            
           </li>
           <li class="">
            [ahref]
            
           </li>
           <li class="">
            <a class="MainMenu-subLink" href="/practical-paris/how-to-get-to-and-around-paris">
             How to get to and around Paris
             <svg aria-hidden="true" class="Icon Icon--arrow-right">
              <use xlink:href="/bundles/otcpstatic/sprite/icons.svg#arrow-right">
              </use>
             </svg>
            </a>
           </li>
          </ul>
          <ul class="MainMenu-subList">
           <li class="MainMenu-subItem">
            <a class="MainMenu-subLink" href="/practical-paris/paris-maps-plans">
             Plans and maps of Paris
             <svg aria-hidden="true" class="Icon Icon--arrow-right">
              <use xlink:href="/bundles/otcpstatic/sprite/icons.svg#arrow-right">
              </use>
             </svg>
            </a>
           </li>
           <li class="MainMenu-subItem">
            [linkx]
            
           </li>
           <li class="MainMenu-subItem">
            [linkx]
            
           </li>
           <li class="MainMenu-subItem">
            [linkx]
            
           </li>
           <li class="MainMenu-subItem">
            [linkx]
            
           </li>
           <li class="MainMenu-subItem">
            [ahref]
            
           </li>
          </ul>
         </div>
        </div>
       </div>
      </nav>
      <form action="/search" class="SearchBar SearchBar--visitors js-DropSearch" data-state="hide" method="get">
       <div class="SearchBar-content Row-content">
        <button class="SearchBar-closeBtn js-DropSearch-close">
         <svg aria-hidden="true" class="Icon Icon--cross2" style="width:14px;height:14px">
          <use xlink:href="/bundles/otcpstatic/sprite/icons.svg#cross2">
          </use>
         </svg>
        </button>
        <button class="SearchBar-submitBtn">
         OK
         <svg aria-hidden="true" class="Icon Icon--arrow-right" style="width:12px;height:12px">
          <use xlink:href="/bundles/otcpstatic/sprite/icons.svg#arrow-right">
          </use>
         </svg>
        </button>
       </div>
      </form>
     </div>
    </div>
   </header>
   <div class="BannerTop BannerTop--narrow BannerTop--visitors BannerTop--with-text">
    <div class="BannerTop-content">
     <div class="BannerTop-verticalAlign">
      <h1 class="BannerTop-title ">
       [mkey1][symbolx][pkey1][symbolx][keyword1][bracketl1][bracketr1][symbolx][bracketl2][siter1][bracketr2][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx]
      </h1>
      <div class="BannerTop-description">
       Throughout the year, the city offers you great experiences.
      </div>
     </div>
    </div>
   </div>
   <div class="GuideHome">
    [keywordx][symbolx][keywordx][symbolx][bracketl1][keywordx][bracketr1][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx]<li>[link]</li>[link]<li>[link]</li>[keywordx][symbolx][keywordx][symbolx][bracketl2][keywordx][bracketr2][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx]
   </div>
   <footer class="Footer">
    <div class="Footer-top">
     <div class="Row-content">
      <div class="Footer-logo">
       [ahref]
       
      </div>
      <div class="ListInfos">
       <h4 class="ListInfos-title">
        PARISINFO.com
       </h4>
       <ul class="ListInfos-list">
        <li class="ListInfos-item">
         [linkx]
         
        </li>
        <li class="ListInfos-item">
         <a href="/footer/full/1464">
          <svg aria-hidden="true" class="Icon Icon--arrow-right">
           <use xlink:href="/bundles/otcpstatic/sprite/icons.svg#arrow-right">
           </use>
          </svg>
          Legal Information and personal data
         </a>
        </li>
        <li class="ListInfos-item">
         [ahref]
         
        </li>
        <li class="ListInfos-item">
         [ahref]
         
        </li>
        <li class="ListInfos-item">
         [ahref]
         
        </li>
       </ul>
      </div>
      <div class="Insert Insert--visitors Insert--list Insert--pink clearfix">
       <h3 class="Insert-title">
        [mkey1][symbolx][pkey1][symbolx][keyword1][bracketl1][bracketr1][symbolx][bracketl2][siter1][bracketr2][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx]
       </h3>
       <ul class="Insert-list">
        <li class="Insert-item">
         <svg aria-hidden="true" class="Icon Icon--arrow-right">
          <use xlink:href="/bundles/otcpstatic/sprite/icons.svg#arrow-right">
          </use>
         </svg>
         [linkx]
         
        </li>
        <li class="Insert-item">
         <svg aria-hidden="true" class="Icon Icon--arrow-right">
          <use xlink:href="/bundles/otcpstatic/sprite/icons.svg#arrow-right">
          </use>
         </svg>
         [linkx]
         
        </li>
        <li class="Insert-item">
         <svg aria-hidden="true" class="Icon Icon--arrow-right">
          <use xlink:href="/bundles/otcpstatic/sprite/icons.svg#arrow-right">
          </use>
         </svg>
         [linkx]
         
        </li>
        <li class="Insert-item">
         <svg aria-hidden="true" class="Icon Icon--arrow-right">
          <use xlink:href="/bundles/otcpstatic/sprite/icons.svg#arrow-right">
          </use>
         </svg>
         [linkx]
         
        </li>
       </ul>
       [linkx]
       
      </div>
      <div class="BottomSocial js-Dropdown">
       <h4 class="BottomSocial-title">
        Follow us
       </h4>
       <button class="BottomSocial-btn js-Dropdown-btn">
       </button>
       <ul class="BottomSocial-list" data-dropdown="">
        <li class="BottomSocial-item">
         [linkx]
         
        </li>
        <li class="BottomSocial-item">
         [linkx]
         
        </li>
        <li class="BottomSocial-item">
         [linkx]
         
        </li>
        <li class="BottomSocial-item">
         [ahref]
         
        </li>
        <li class="BottomSocial-item">
         [linkx]
         
        </li>
        <li class="BottomSocial-item">
         [ahref]
         
        </li>
        <li class="BottomSocial-item">
         [ahref]
         
        </li>
       </ul>
       <button class="BottomSocial-btn js-Dropdown-btn">
       </button>
      </div>
     </div>
    </div>
    <div class="Footer-parisinfo">
     <div class="Row-content">
      <h4 class="Footer-title">
       PARISINFO.com
      </h4>
      <div class="ListMenu">
       <h4 class="ListMenu-title">
        Our websites
       </h4>
       <div class="ListMenu-select js-Dropdown js-Dropdown--auto">
        <button class="ListMenu-active js-Dropdown-btn">
         Visitors
         <svg aria-hidden="true" class="Icon Icon--arrow-bottom">
          <use xlink:href="/bundles/otcpstatic/sprite/icons.svg#arrow-bottom">
          </use>
         </svg>
        </button>
        <ul class="ListMenu-options">
         <li>
          [ahref]
          
         </li>
         <li>
          [ahref]
          
         </li>
         <li>
          <a class="ListMenu-option" href="/">
           Press
          </a>
         </li>
         <li>
          [ahref]
          
         </li>
        </ul>
       </div>
      </div>
      <div class="ListLangs">
       <h4 class="ListLangs-title">
        Paris Worldwide
       </h4>
       <ul class="ListLangs-list">
        <li class="ListLangs-item">
         [linkx]
         
        </li>
        <li class="ListLangs-item">
         [linkx]
         
        </li>
        <li class="ListLangs-item">
         [ahref]
         
        </li>
        <li class="ListLangs-item">
         [linkx]
         
        </li>
        <li class="ListLangs-item">
         [linkx]
         
        </li>
        <li class="ListLangs-item">
         [ahref]
         
        </li>
        <li class="ListLangs-item">
         [linkx]
         
        </li>
        <li class="ListLangs-item">
         [ahref]
         
        </li>
        <li class="ListLangs-item">
         <a href="/">
          <span class="ListLangs-flag">
          </span>
          <span class="ListLangs-name">
           日本語
          </span>
         </a>
        </li>
        <li class="ListLangs-item">
         [ahref]
         
        </li>
        <li class="ListLangs-item">
         [ahref]
         
        </li>
       </ul>
      </div>
     </div>
    </div>
    <div class="Footer-bottom">
     <div class="Row-content">
      <div class="Footer-content">
       <div class="Partner">
        <h4 class="Partner-title">
         Our partners :
        </h4>
        <ul class="Partner-list">
         <li class="Partner-item">
          [linkx]
          
         </li>
         <li class="Partner-item">
          <a href="r">
          </a>
         </li>
         <li class="Partner-item">
          [linkx]
          
         </li>
         <li class="Partner-item">
          [ahref]
          
         </li>
         <li class="Partner-item">
          [linkx]
           [keywordx][symbolx][keywordx][symbolx][bracketl7][keywordx][bracketr7][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][bracketl8][keywordx][bracketr8][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][link][link]<li>[link]</li>
          
         </li>
        </ul>
       </div>
      </div>
      <div class="SiteMap">
       <div class="SiteMap-col">
        <h4 class="SiteMap-title">
         [linkx]
         
        </h4>
        <ul class="SiteMap-list">
         <li class="SiteMap-item">
          >
          [linkx]
          
         </li>
         <li class="SiteMap-item">
          >
          [linkx]
           [keywordx][symbolx][keywordx][symbolx][bracketl9][keywordx][bracketr9][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx]<li>[link]</li><li>[link]</li><li>[keywordx][symbolx][keywordx][symbolx][bracketl10][keywordx][bracketr10][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx]</li>
          
         </li>
         <li class="SiteMap-item">
          >
          <a href="/discovering-paris/paris-for-the-first-time" title="Paris for the first time">
           Paris for the first time
          </a>
         </li>
         <li class="SiteMap-item">
          >
          [linkx]
          
         </li>
         <li class="SiteMap-item">
          >
          [ahref]
          
         </li>
         <li class="SiteMap-item">
          >
          [ahref]
          
         </li>
         <li class="SiteMap-item">
          >
          [linkx]
          
         </li>
         <li class="SiteMap-item">
          >
          [ahref]
          
         </li>
        </ul>
       </div>
       <div class="SiteMap-col">
        <h4 class="SiteMap-title">
         [linkx]
         
        </h4>
        <ul class="SiteMap-list">
         <li class="SiteMap-item">
          >
          [linkx]
          
         </li>
         <li class="SiteMap-item">
          >
          [linkx]
          
         </li>
         <li class="SiteMap-item">
          >
          [ahref]
          
         </li>
         <li class="SiteMap-item">
          >
          [linkx]
          
         </li>
         <li class="SiteMap-item">
          >
          [linkx]
          
         </li>
         <li class="SiteMap-item">
          >
          [linkx]
          
         </li>
         <li class="SiteMap-item">
          >
          [ahref]
          
         </li>
         <li class="SiteMap-item">
          >
          [linkx]
           [content5[linkx]content6]
          
         </li>
         <li class="SiteMap-item">
          >
          [ahref]
          
         </li>
        </ul>
       </div>
       <div class="SiteMap-col">
        <h4 class="SiteMap-title">
         [linkx]
         
        </h4>
        <ul class="SiteMap-list">
         <li class="SiteMap-item">
          >
          [linkx]
          
         </li>
         <li class="SiteMap-item">
          >
          [linkx]
          
         </li>
         <li class="SiteMap-item">
          >
          [linkx]
          
         </li>
         <li class="SiteMap-item">
          >
          [linkx]
          
         </li>
         <li class="SiteMap-item">
          >
          [linkx]
          
         </li>
         <li class="SiteMap-item">
          >
          [linkx]
          
         </li>
         <li class="SiteMap-item">
          >
          [linkx]
          
         </li>
         <li class="SiteMap-item">
          >
          [linkx]
          
         </li>
         <li class="SiteMap-item">
          >
          [ahref]
          
         </li>
         <li class="SiteMap-item">
          >
          [ahref]
          
         </li>
         <li class="SiteMap-item">
          >
          [linkx]
          
         </li>
         <li class="SiteMap-item">
          >
          [ahref]
          
         </li>
        </ul>
       </div>
       <div class="SiteMap-col">
        <h4 class="SiteMap-title">
         [ahref]
         
        </h4>
        <ul class="SiteMap-list">
         <li class="SiteMap-item">
          >
          [linkx]
          
         </li>
         <li class="SiteMap-item">
          >
          [linkx]
          
         </li>
         <li class="SiteMap-item">
          >
          [ahref]
          
         </li>
         <li class="SiteMap-item">
          >
          [ahref]
          
         </li>
         <li class="SiteMap-item">
          >
          <a href="/shopping/concept-stores-designer-goods-and-arty-shopping" title="Concept stores, designer goods and arty shopping">
           Concept stores, designer goods and arty shopping
                                    [content9[linkx]content10[linkx]content11]
          </a>
         </li>
         <li class="SiteMap-item">
          >
          <a href="/shopping/souvenirs" title="Souvenirs">
           Souvenirs
          </a>
         </li>
         <li class="SiteMap-item">
          >
          [linkx]
          
         </li>
         <li class="SiteMap-item">
          >
          <a href="/shopping/gastronomic-shopping-in-paris" title="Gastronomic shopping">
           Gastronomic shopping
          </a>
         </li>
         <li class="SiteMap-item">
          >
          [linkx]
          
         </li>
         <li class="SiteMap-item">
          >
          [ahref]
          
         </li>
         <li class="SiteMap-item">
          >
          [ahref]
          
         </li>
         <li class="SiteMap-item">
          >
          <a href="/shopping/detaxe-tax-refund-and-duty-free" title="‘Détaxe’ tax refund and duty free">
           ‘Détaxe’ tax refund and duty free
          </a>
         </li>
        </ul>
       </div>
       <div class="SiteMap-col">
        <h4 class="SiteMap-title">
         [ahref]
         
        </h4>
        <ul class="SiteMap-list">
         <li class="SiteMap-item">
          >
          [ahref]
          
         </li>
         <li class="SiteMap-item">
          >
          [ahref]
          
         </li>
         <li class="SiteMap-item">
          >
          [linkx]
          
         </li>
         <li class="SiteMap-item">
          >
          [ahref]
          
         </li>
         <li class="SiteMap-item">
          <li>[keywordx][symbolx][keywordx][symbolx][bracketl3][keywordx][bracketr3][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx]</li>[keywordx][symbolx][keywordx][symbolx][bracketl4][keywordx][bracketr4][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][bracketl5][keywordx][bracketr5][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][link][link]
         </li>
         <li class="SiteMap-item">
          >
          [linkx]
          
         </li>
         <li class="SiteMap-item">
          >
          [linkx]
          
         </li>
         <li class="SiteMap-item">
          [content4][content5][linkx]
         </li>
         <li class="SiteMap-item">
          >
          [linkx]
          
         </li>
         <li class="SiteMap-item">
          >
          [linkx]
          
         </li>
        </ul>
       </div>
       <div class="SiteMap-col">
        <h4 class="SiteMap-title">
         [linkx]
         
        </h4>
        <ul class="SiteMap-list">
         <li class="SiteMap-item">
          >
          [linkx]
          
         </li>
         <li class="SiteMap-item">
          >
          [linkx]
          
         </li>
         <li class="SiteMap-item">
          [content1[linkx]content2[linkx]content3]
         </li>
         <li class="SiteMap-item">
          >
          <a href="/where-to-sleep-in-paris/hostels-in-paris" title="Hostels in Paris">
           Hostels in Paris
          </a>
         </li>
         <li class="SiteMap-item">
          >
          [ahref]
          
         </li>
         <li class="SiteMap-item">
          >
          [linkx]
          
         </li>
         <li class="SiteMap-item">
          >
          [ahref]
          
         </li>
         <li class="SiteMap-item">
          >
          [linkx]
          
         </li>
         <li class="SiteMap-item">
          >
          [ahref]
          
         </li>
         <li class="SiteMap-item">
          >
          [linkx]
          
         </li>
         <li class="SiteMap-item">
          >
          [ahref]
          
         </li>
         <li class="SiteMap-item">
          >
          [linkx]
          
         </li>
        </ul>
       </div>
       <div class="SiteMap-col">
        <h4 class="SiteMap-title">
         [ahref]
         
        </h4>
        <ul class="SiteMap-list">
         <li class="SiteMap-item">
          >
          [ahref]
          
         </li>
         <li class="SiteMap-item">
          >
          [linkx]
          
         </li>
         <li class="SiteMap-item">
          >
          [ahref]
          
         </li>
         <li class="SiteMap-item">
          >
          [linkx]
          
         </li>
         <li class="SiteMap-item">
          >
          <a href="/practical-paris/left-luggage-services-in-train-stations" title="Left-luggage services in train stations">
           Left-luggage services in train stations
          </a>
         </li>
         <li class="SiteMap-item">
          >
          [linkx]
          
         </li>
         <li class="SiteMap-item">
          >
          [linkx]
          
         </li>
         <li class="SiteMap-item">
          >
          <a href="/practical-paris/money" title="Money in France">
           Money in France
          </a>
         </li>
         <li class="SiteMap-item">
          >
          [linkx]
          
         </li>
         <li class="SiteMap-item">
          >
          [linkx]
          
         </li>
         <li class="SiteMap-item">
          >
          [ahref]
          
         </li>
         <li class="SiteMap-item">
          >
          [linkx]
          
         </li>
        </ul>
       </div>
       <ul class="SiteMap-inline">
        <li class="SiteMap-inlineLItem">
         [ahref]
         
        </li>
        <li class="SiteMap-inlineLItem">
         <a href="/footer/full/1464">
          Legal Information and personal data
         </a>
        </li>
        <li class="SiteMap-inlineLItem">
         [ahref]
         
        </li>
        <li class="SiteMap-inlineLItem">
         [linkx]
         
        </li>
        <li class="SiteMap-inlineLItem">
         [ahref]
         
        </li>
       </ul>
      </div>
      <p class="Footer-copyright">
       © 2015 Paris Convention and Visitors Bureau
       <span>
        All rights reserved
       </span>
      </p>
     </div>
    </div>
   </footer>
   <aside class="RwdMenu RwdMenu--visitors" hidden="">
    <div class="RwdMenu-close js-ShowMenu-close">
     <svg aria-hidden="true" class="Icon Icon--cross" style="width:18px;height:18px">
      <use xlink:href="/bundles/otcpstatic/sprite/icons.svg#cross">
      </use>
     </svg>
    </div>
    <div class="RwdMenu-content">
     <ul class="RwdMenu-list">
      <li class="RwdMenu-item">
       [linkx]
       
      </li>
      <li class="RwdMenu-item">
       [linkx]
       
      </li>
      <li class="RwdMenu-item">
       [linkx]
       
      </li>
      <li class="RwdMenu-item">
       [ahref]
       
      </li>
      <li class="RwdMenu-item">
       [ahref]
       
      </li>
      <li class="RwdMenu-item">
       [linkx]
       
      </li>
      <li class="RwdMenu-item">
       [linkx]
       
      </li>
      <li class="RwdMenu-item">
       [linkx]
       
      </li>
     </ul>
     [linkx]
     
     <div class="RwdMenu-footer">
      <div class="Langs js-Dropdown js-Dropdown--auto">
       <button class="Langs-selected js-Dropdown-btn">
       </button>
       <ul class="Langs-list">
        <li>
         [ahref]
         
        </li>
        <li>
         [linkx]
         
        </li>
        <li>
         [linkx]
         
        </li>
        <li>
         [linkx]
         
        </li>
        <li>
         [linkx]
         
        </li>
        <li>
         [ahref]
         
        </li>
        <li>
         [linkx]
         
        </li>
        <li>
         [linkx]
         
        </li>
        <li>
         [ahref]
         
        </li>
        <li>
         [linkx]
         
        </li>
       </ul>
      </div>
     </div>
    </div>
   </aside>
   <div class="CookieNotice" hidden="">
    <p class="CookieNotice-info">
     By using this site , you agree to the use of cookies for analytical purposes, advertising and personalized content . more info
     [linkx]
     
    </p>
    <p class="CookieNotice-cta">
     <button class="CookieNotice-close">
      Accept
     </button>
    </p>
   </div>
   <section aria-labelledby="ajax-modal-label" class="modal fade" id="ajaxModal" role="dialog" tabindex="-1">
    <div class="modal-dialog spaceBefore--16" role="document">
     <div class="modal-content">
     </div>
    </div>
   </section>
  </div>
  <b style="color:black;background-color:#a0ffff">
   jnice09-ipp30-wq-zq-0214
  </b>
 </body>
</html>|<---