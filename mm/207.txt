--->|<!DOCTYPE html>
<html lang="en" prefix="og: http://ogp.me/ns">
 <head>
  <meta charset="utf-8"/>
  <meta content="IE=Edge" http-equiv="X-UA-Compatible"/>
  <meta content="width=device-width,initial-scale=1" name="viewport"/>
  <title>
   [area1][mkey1][symbolx][pkey1][symbolx][area1][keyword1][bracketl1][area1][keywordx][bracketr1][symbolx][bracketl2][area1][keywordx][bracketr2][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx]
  </title>
  <meta content="[area1][mkey1][symbolx][pkey2][symbolx][area1][keyword1][bracketl1][area1][keywordx][bracketr1][symbolx][bracketl2][area1][keywordx][bracketr2][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx]" name="description"/>
  <meta content="[area1][mkey1][symbolx][pkey3][symbolx][area1][keyword1][bracketl1][area1][keywordx][bracketr1][symbolx][bracketl2][area1][keywordx][bracketr2][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx]" name="keywords"/>
  <meta content="Paris Convention and Visitors Bureau" name="copyright"/>
  <meta content="Paris Convention and Visitors Bureau" name="author">
   <meta content="wQWdX_8MDu1Hv8z0PHyo2POv2s0p09Y4cE7IL97wtwc" name="google-site-verification">
    <meta content="33123360ef42db9ba00718bc651e2d20" name="p:domain_verify">
     <meta content="Paris 2019: major events - Paris Tourist Office - Paris tourist office" property="og:title">
      <meta content="article" property="og:type"/>
      <meta content="https://en.parisinfo.com/discovering-paris/major-events/what-to-do-in-paris" property="og:url">
       <meta content="https://en.parisinfo.com/var/otcp/sites/images/node_43/node_51/node_234/home-grands-événements-2018-|1920x250-|-©-maxime-chermat-we-love-green/18613683-8-fre-FR/Home-Grands-événements-2018-|1920x250-|-©-Maxime-Chermat-We-Love-Green.jpg" property="og:image">
        <meta content="image/jpeg" property="og:image:type">
         <meta content="[area1][mkey1][symbolx][pkey2][symbolx][area1][keyword1][bracketl1][area1][keywordx][bracketr1][symbolx][bracketl2][area1][keywordx][bracketr2][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx]" property="og:description"/>
         <meta content="[area1][mkey1][symbolx][pkey4][symbolx][area1][keyword1][bracketl1][area1][keywordx][bracketr1][symbolx][bracketl2][area1][keywordx][bracketr2][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx]" property="og:site_name"/>
        </meta>
       </meta>
      </meta>
     </meta>
    </meta>
   </meta>
  </meta>
 </head>
 <body>
  <noscript>
   <iframe height="0" src="https://www.googletagmanager.com/ns.html?id=GTM-TMK6DTK" style="display:none;visibility:hidden" width="0">
   </iframe>
  </noscript>
  <div class="Layout Layout--visitors">
   <header class="Header">
    <div class="Row Header-top">
     <div class="Row-content Header-topContent">
      <ul class="TopMenu TopMenu--visitors">
       <li class="TopMenu-item">
        <a class="TopMenu-link TopMenu-link--visitors" href="/">
         Visitors
        </a>
       </li>
       <li class="TopMenu-item">
        [ahref]
        
       </li>
       <li class="TopMenu-item">
        [linkx]
        
       </li>
       <li class="TopMenu-item">
        [linkx]
        
       </li>
      </ul>
      <div class="Header-topTools">
       <div class="TopSocial js-Dropdown">
        <ul class="TopSocial-list js-Dropdown-content">
         <li class="TopSocial-item">
          [linkx]
          
         </li>
         <li class="TopSocial-item">
          <a class="TopSocial-link" href="/ParisJetaime" target="_blank">
           <svg aria-hidden="true" class="Icon Icon--twitter">
            <use xlink:href="/bundles/otcpstatic/sprite/icons.svg#twitter">
            </use>
           </svg>
          </a>
         </li>
         <li class="TopSocial-item">
          [linkx]
          
         </li>
         <li class="TopSocial-item">
          <a class="TopSocial-link" href="/paris_jetaime/" target="_blank">
           <svg aria-hidden="true" class="Icon Icon--pinterest">
            <use xlink:href="/bundles/otcpstatic/sprite/icons.svg#pinterest">
            </use>
           </svg>
          </a>
         </li>
         <li class="TopSocial-item">
          [ahref]
          
         </li>
         <li class="TopSocial-item">
          <a class="TopSocial-link" href="/user/ParisOTC" target="_blank">
           <svg aria-hidden="true" class="Icon Icon--youtube">
            <use xlink:href="/bundles/otcpstatic/sprite/icons.svg#youtube">
            </use>
           </svg>
          </a>
         </li>
        </ul>
        <button class="TopSocial-btn js-Dropdown-btn">
        </button>
       </div>
       <div class="Langs js-Dropdown js-Dropdown--auto">
        <button class="Langs-selected js-Dropdown-btn">
        </button>
        <ul class="Langs-list">
         <li>
          [area1][keywordx][symbolx][area1][keywordx][symbolx][bracketl18][area1][keywordx][bracketr18][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx]<li>[ahref]</li>[area1][mkey1][pkeyx]
         </li>
         <li>
          [linkx]
          
         </li>
         <li>
          [ahref]
          
         </li>
         <li>
          [linkx]
          
         </li>
         <li>
          [ahref]
          
         </li>
         <li>
          [ahref]
          
         </li>
         <li>
          [linkx]
          
         </li>
         <li>
          [ahref]
          
         </li>
         <li>
          [linkx]
          
         </li>
         <li>
          [ahref]
          
         </li>
        </ul>
       </div>
      </div>
     </div>
    </div>
    <div class="Row">
     <div class="Row-content Header-main">
      <div class="TopLogo TopLogo--visitors">
       [linkx]
       
      </div>
      <ul class="IconsMenu IconsMenu--visitors">
       <li class="IconsMenu-item">
        [linkx]
        
       </li>
       <li class="IconsMenu-item">
        [ahref]
        
       </li>
       <li class="IconsMenu-item">
        [linkx]
        
       </li>
       <li class="IconsMenu-item">
        [ahref]
        
       </li>
      </ul>
      <div class="RwdNav js-ShowMenu-open">
       <svg aria-hidden="true" class="Icon Icon--menu">
        <use xlink:href="/bundles/otcpstatic/sprite/icons.svg#menu">
        </use>
       </svg>
       Menu
      </div>
     </div>
    </div>
    <div class="Row Header-bottom">
     <div class="Row-content">
      <nav class="MainMenu MainMenu--visitors js-DropMenu">
       <div class="MainMenu-static">
        <ul class="MainMenu-list clearfix">
         <li class="MainMenu-item js-DropMenu-btn js-responsive-menu-item" data-id="0">
          [ahref]
          
         </li>
         <li class="MainMenu-item js-DropMenu-btn js-responsive-menu-item" data-id="1">
          [linkx]
          
         </li>
         <li class="MainMenu-item js-DropMenu-btn js-responsive-menu-item" data-id="2">
          [ahref]
          
         </li>
         <li class="MainMenu-item js-DropMenu-btn js-responsive-menu-item" data-id="3">
          <a class="MainMenu-link" data-location-id="130468" href="/shopping">
           Shopping
          </a>
         </li>
         <li class="MainMenu-item js-DropMenu-btn js-responsive-menu-item" data-id="4">
          [ahref]
          
         </li>
         <li class="MainMenu-item js-DropMenu-btn js-responsive-menu-item" data-id="5">
          [ahref]
          
         </li>
         <li class="MainMenu-item js-DropMenu-btn js-responsive-menu-item" data-id="6">
          <a class="MainMenu-link" data-location-id="256" href="/practical-paris">
           Practical Paris
          </a>
         </li>
        </ul>
        <p class="MainMenu-btn js-responsive-menu-item">
         [linkx]
         
        </p>
       </div>
       <div class="MainMenu-responsive">
        <button class="MainMenu-btn-responsive">
         <svg aria-hidden="true" class="Icon Icon--menu-overflow">
          <use xlink:href="/bundles/otcpstatic/sprite/icons.svg#menu-overflow">
          </use>
         </svg>
        </button>
        <ul class="MainMenu-responsive-list">
         <li class="MainMenu-responsive-item js-DropMenu-btn" data-id="0" style="display:none">
          [linkx]
          
         </li>
         <li class="MainMenu-responsive-item js-DropMenu-btn" data-id="1" style="display:none">
          <a class="MainMenu-responsive-link" href="/what-to-see-in-paris">
           What to see
          </a>
         </li>
         <li class="MainMenu-responsive-item js-DropMenu-btn" data-id="2" style="display:none">
          <a class="MainMenu-responsive-link" href="/what-to-do-in-paris">
           Going out
          </a>
         </li>
         <li class="MainMenu-responsive-item js-DropMenu-btn" data-id="3" style="display:none">
          [ahref]
          
         </li>
         <li class="MainMenu-responsive-item js-DropMenu-btn" data-id="4" style="display:none">
          [linkx]
          
         </li>
         <li class="MainMenu-responsive-item js-DropMenu-btn" data-id="5" style="display:none">
          <a class="MainMenu-responsive-link" href="/where-to-sleep-in-paris">
           Where to stay
          </a>
         </li>
         <li class="MainMenu-responsive-item js-DropMenu-btn" data-id="6" style="display:none">
          <a class="MainMenu-responsive-link" href="/practical-paris">
           Practical Paris
          </a>
         </li>
         <li style="display:none">
          <div class="MainMenu-btn">
           [linkx]
           
          </div>
         </li>
        </ul>
       </div>
       <div class="MainMenu-submenu MainMenu-submenu--visitors js-DropMenu-content" data-dropmenu="" data-id="0">
        <div class="MainMenu-subCols">
         <div class="MainMenu-subCol MainMenu-subCol--list">
          <ul>
           <li class="">
            [ahref]
            
           </li>
           <li class="">
            [ahref]
            
           </li>
           <li class="">
            [ahref]
            
           </li>
           <li class="">
            [ahref]
            
           </li>
           <li class="">
            [ahref]
            
           </li>
           <li class="">
            [linkx]
            
           </li>
          </ul>
          <ul class="MainMenu-subList">
           <li class="MainMenu-subItem">
            [linkx]
            
           </li>
           <li class="MainMenu-subItem">
            [ahref]
            
           </li>
          </ul>
         </div>
        </div>
       </div>
       <div class="MainMenu-submenu MainMenu-submenu--visitors js-DropMenu-content" data-dropmenu="" data-id="1">
        <div class="MainMenu-subCols">
         <div class="MainMenu-subCol MainMenu-subCol--list">
          <ul>
           <li class="">
            [ahref]
            
           </li>
           <li class="">
            [ahref]
            
           </li>
           <li class="">
            [ahref]
            
           </li>
           <li class="">
            [linkx]
            
           </li>
           <li class="">
            [ahref]
            
           </li>
           <li class="">
            [linkx]
            
           </li>
          </ul>
          <ul class="MainMenu-subList">
           <li class="MainMenu-subItem">
            [linkx]
            
           </li>
           <li class="MainMenu-subItem">
            [linkx]
            
           </li>
           <li class="MainMenu-subItem">
            [linkx]
            
           </li>
          </ul>
         </div>
        </div>
       </div>
       <div class="MainMenu-submenu MainMenu-submenu--visitors js-DropMenu-content" data-dropmenu="" data-id="2">
        <div class="MainMenu-subCols">
         <div class="MainMenu-subCol MainMenu-subCol--list">
          <ul>
           <li class="">
            [ahref]
            
           </li>
           <li class="">
            <a class="MainMenu-subLink" href="/what-to-do-in-paris/shows-in-paris">
             Shows in Paris
             <svg aria-hidden="true" class="Icon Icon--arrow-right">
              <use xlink:href="/bundles/otcpstatic/sprite/icons.svg#arrow-right">
              </use>
             </svg>
            </a>
           </li>
           <li class="">
            [ahref]
            
           </li>
           <li class="">
            <a class="MainMenu-subLink" href="/what-to-do-in-paris/cabarets-in-paris">
             Paris: the cabaret capital
             <svg aria-hidden="true" class="Icon Icon--arrow-right">
              <use xlink:href="/bundles/otcpstatic/sprite/icons.svg#arrow-right">
              </use>
             </svg>
            </a>
           </li>
           <li class="">
            [linkx]
            
           </li>
           <li class="">
            [ahref]
            
           </li>
          </ul>
          <ul class="MainMenu-subList">
           <li class="MainMenu-subItem">
            [linkx]
            
           </li>
           <li class="MainMenu-subItem">
            [linkx]
             [linkx][pkeyx][linkx][area1][keywordx][symbolx][area1][keywordx][symbolx][bracketl1][area1][keywordx][bracketr1][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][linkx][linkx][pkeyx][area1][keywordx][pkeyx][area1][keywordx][area1][keywordx][symbolx][area1][keywordx][symbolx][bracketl2][area1][keywordx][bracketr2][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][ahref][linkx][area1][mkey1][area1][keywordx][symbolx][area1][keywordx][symbolx][bracketl3][area1][keywordx][bracketr3][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][mkey1][area1][mkey1][pkeyx][area1][keywordx][ahref]
            
           </li>
           <li class="MainMenu-subItem">
            [linkx]
            
           </li>
           <li class="MainMenu-subItem">
            <a class="MainMenu-subLink" href="/what-to-do-in-paris/Zoos-Aquariums">
             Zoos &amp; Aquariums
             <svg aria-hidden="true" class="Icon Icon--arrow-right">
              <use xlink:href="/bundles/otcpstatic/sprite/icons.svg#arrow-right">
              </use>
             </svg>
            </a>
           </li>
           <li class="MainMenu-subItem">
            [linkx]
            
           </li>
           <li class="MainMenu-subItem">
            <a class="MainMenu-subLink" href="/what-to-do-in-paris/trips-and-outdoors">
             Trips and outdoors
             <svg aria-hidden="true" class="Icon Icon--arrow-right">
              <use xlink:href="/bundles/otcpstatic/sprite/icons.svg#arrow-right">
              </use>
             </svg>
            </a>
           </li>
          </ul>
         </div>
        </div>
       </div>
       <div class="MainMenu-submenu MainMenu-submenu--visitors js-DropMenu-content" data-dropmenu="" data-id="3">
        <div class="MainMenu-subCols">
         <div class="MainMenu-subCol MainMenu-subCol--list">
          <ul>
           <li class="">
            [area1][mkey1][area1][mkey1][area1][mkey1][area1][keywordx][symbolx][area1][keywordx][symbolx][bracketl4][area1][keywordx][bracketr4][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][linkx][area1][keywordx][ahref][area1][keywordx][area1][keywordx][symbolx][area1][keywordx][symbolx][bracketl5][area1][keywordx][bracketr5][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][linkx][area1][keywordx][area1][mkey1][area1][keywordx][area1][keywordx][pkeyx][linkx][pkeyx][area1][keywordx][pkeyx][area1][keywordx][area1][keywordx][linkx]
           </li>
           <li class="">
            [ahref]
            
           </li>
           <li class="">
            [linkx]
            
           </li>
           <li class="">
            [ahref]
            
           </li>
           <li class="">
            [ahref]
            
           </li>
           <li class="">
            [ahref]
            
           </li>
          </ul>
          <ul class="MainMenu-subList">
           <li class="MainMenu-subItem">
            [linkx]
            
           </li>
           <li class="MainMenu-subItem">
            [linkx]
            
           </li>
           <li class="MainMenu-subItem">
            [linkx]
            
           </li>
           <li class="MainMenu-subItem">
            [ahref]
            
           </li>
           <li class="MainMenu-subItem">
            [ahref]
            
           </li>
           <li class="MainMenu-subItem">
            [linkx]
            
           </li>
          </ul>
         </div>
        </div>
       </div>
       <div class="MainMenu-submenu MainMenu-submenu--visitors js-DropMenu-content" data-dropmenu="" data-id="4">
        <div class="MainMenu-subCols">
         <div class="MainMenu-subCol MainMenu-subCol--list">
          <ul>
           <li class="">
            [ahref]
            
           </li>
           <li class="">
            [ahref]
            
           </li>
           <li class="">
            [ahref]
            
           </li>
           <li class="">
            [ahref]
            
           </li>
           <li class="">
            [linkx]
            
           </li>
           <li class="">
            [ahref]
            
           </li>
          </ul>
          <ul class="MainMenu-subList">
           <li class="MainMenu-subItem">
            [linkx]
            
           </li>
           <li class="MainMenu-subItem">
            [linkx]
            
           </li>
           <li class="MainMenu-subItem">
            [ahref]
            
           </li>
           <li class="MainMenu-subItem">
            [ahref]
            
           </li>
          </ul>
         </div>
        </div>
       </div>
       <div class="MainMenu-submenu MainMenu-submenu--visitors js-DropMenu-content" data-dropmenu="" data-id="5">
        <div class="MainMenu-subCols">
         <div class="MainMenu-subCol MainMenu-subCol--list">
          <ul>
           <li class="">
            [linkx]
            
           </li>
           <li class="">
            [linkx]
            
           </li>
           <li class="">
            [ahref]
            
           </li>
           <li class="">
            <a class="MainMenu-subLink" href="/where-to-sleep-in-paris/hostels-in-paris">
             Hostels in Paris
             <svg aria-hidden="true" class="Icon Icon--arrow-right">
              <use xlink:href="/bundles/otcpstatic/sprite/icons.svg#arrow-right">
              </use>
             </svg>
            </a>
           </li>
           <li class="">
            [linkx]
            
           </li>
           <li class="">
            [linkx]
            
           </li>
          </ul>
          <ul class="MainMenu-subList">
           <li class="MainMenu-subItem">
            [linkx]
            
           </li>
           <li class="MainMenu-subItem">
            [ahref]
            
           </li>
           <li class="MainMenu-subItem">
            [linkx]
            
           </li>
           <li class="MainMenu-subItem">
            [ahref]
            
           </li>
           <li class="MainMenu-subItem">
            [ahref]
            
           </li>
           <li class="MainMenu-subItem">
            <a class="MainMenu-subLink" href="/where-to-sleep-in-paris/tourist-tax">
             Tourist tax
             <svg aria-hidden="true" class="Icon Icon--arrow-right">
              <use xlink:href="/bundles/otcpstatic/sprite/icons.svg#arrow-right">
              </use>
             </svg>
            </a>
           </li>
          </ul>
         </div>
        </div>
       </div>
       <div class="MainMenu-submenu MainMenu-submenu--visitors js-DropMenu-content" data-dropmenu="" data-id="6">
        <div class="MainMenu-subCols">
         <div class="MainMenu-subCol MainMenu-subCol--list">
          <ul>
           <li class="">
            [linkx]
            
           </li>
           <li class="">
            <a class="MainMenu-subLink" href="/practical-paris/paris-convention-and-visitors-bureau">
             Paris Convention and Visitors Bureau
             <svg aria-hidden="true" class="Icon Icon--arrow-right">
              <use xlink:href="/bundles/otcpstatic/sprite/icons.svg#arrow-right">
              </use>
             </svg>
            </a>
           </li>
           <li class="">
            <a class="MainMenu-subLink" href="/practical-paris/planning-your-stay-in-paris">
             Planning your stay in Paris
             <svg aria-hidden="true" class="Icon Icon--arrow-right">
              <use xlink:href="/bundles/otcpstatic/sprite/icons.svg#arrow-right">
              </use>
             </svg>
            </a>
           </li>
           <li class="">
            <a class="MainMenu-subLink" href="/practical-paris/getting-to-paris">
             Getting to Paris
             <svg aria-hidden="true" class="Icon Icon--arrow-right">
              <use xlink:href="/bundles/otcpstatic/sprite/icons.svg#arrow-right">
              </use>
             </svg>
            </a>
           </li>
           <li class="">
            [linkx]
            
           </li>
           <li class="">
            [ahref]
            
           </li>
          </ul>
          <ul class="MainMenu-subList">
           <li class="MainMenu-subItem">
            [linkx]
            
           </li>
           <li class="MainMenu-subItem">
            [ahref]
            
           </li>
           <li class="MainMenu-subItem">
            [area1][keywordx][area1][keywordx][linkx][ahref][area1][keywordx][symbolx][area1][keywordx][symbolx][bracketl11][area1][keywordx][bracketr11][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][bracketl12][area1][keywordx][bracketr12][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][linkx][pkeyx][ahref][area1][keywordx][symbolx][area1][keywordx][symbolx][bracketl13][area1][keywordx][bracketr13][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx]
           </li>
           <li class="MainMenu-subItem">
            <a class="MainMenu-subLink" href="/practical-paris/useful-info">
             Daily life: useful info
             <svg aria-hidden="true" class="Icon Icon--arrow-right">
              <use xlink:href="/bundles/otcpstatic/sprite/icons.svg#arrow-right">
              </use>
             </svg>
            </a>
           </li>
           <li class="MainMenu-subItem">
            [linkx]
            
           </li>
           <li class="MainMenu-subItem">
            [linkx]
            
           </li>
          </ul>
         </div>
        </div>
       </div>
      </nav>
      <form action="/search" class="SearchBar SearchBar--visitors js-DropSearch" data-state="hide" method="get">
       <div class="SearchBar-content Row-content">
        <button class="SearchBar-closeBtn js-DropSearch-close">
         <svg aria-hidden="true" class="Icon Icon--cross2" style="width:14px;height:14px">
          <use xlink:href="/bundles/otcpstatic/sprite/icons.svg#cross2">
          </use>
         </svg>
        </button>
        <button class="SearchBar-submitBtn">
         OK
         <svg aria-hidden="true" class="Icon Icon--arrow-right" style="width:12px;height:12px">
          <use xlink:href="/bundles/otcpstatic/sprite/icons.svg#arrow-right">
          </use>
         </svg>
        </button>
       </div>
      </form>
     </div>
    </div>
   </header>
   <div class="BannerTop BannerTop--narrow BannerTop--visitors BannerTop--with-text">
    <div class="BannerTop-content">
     <div class="BannerTop-verticalAlign">
      <h1 class="BannerTop-title ">
       <b>[area1][mkey1][symbolx][pkeyx][symbolx][area1][keyword1][bracketl1][area1][keywordx][bracketr1][symbolx][bracketl2][area1][keywordx][bracketr2][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx]</b>
      </h1>
      <div class="BannerTop-description">
       Throughout the year, the city offers you great experiences.
      </div>
     </div>
    </div>
   </div>
   <div class="GuideHome">
    <div class="Row Row--visitors">
     <div class="GuideHome-main Row-content Row-content--narrow">
      <div class="GuideHome-text">
       The French capital has a packed programme for you this year! Top exhibitions, major sporting events, not-to-be-missed festivals, big gastronomic events, new entertainment for families … In 2019, one exciting moment rolls into another in Paris . Whatever the season, the city is a fantastic place to be: come and see!
      </div>
      <ul class="LightTeasers">
       <li class="LightTeasers-item">
        [ahref]
        
       </li>
       <li class="LightTeasers-item">
        <a class="LightTeasers-link" href="/discovering-paris/major-events/what-to-do-in-paris/in-february-paris-is-for-lovers">
         <div class="LightTeasers-inner">
          <div class="LightTeasers-pic" title="© Studio TTG">
          </div>
          <div class="LightTeasers-text">
           <h3 class="LightTeasers-title">
            <b>[area1][mkey1][symbolx][pkeyx][symbolx][area1][keyword1][bracketl1][area1][keywordx][bracketr1][symbolx][bracketl2][area1][keywordx][bracketr2][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx]</b>[pkeyx][area1][mkey1][area1][keywordx][pkeyx][linkx][linkx][area1][mkey1][linkx][area1][mkey1][area1][mkey1][area1][mkey1][area1][keywordx][symbolx][area1][keywordx][symbolx][bracketl6][area1][keywordx][bracketr6][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][bracketl7][area1][keywordx][bracketr7][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][pkeyx][area1][keywordx][symbolx][area1][keywordx][symbolx][bracketl8][area1][keywordx][bracketr8][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][pkeyx][area1][mkey1][area1][keywordx][symbolx][area1][keywordx][symbolx][bracketl9][area1][keywordx][bracketr9][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][ahref][area1][keywordx][symbolx][area1][keywordx][symbolx][bracketl10][area1][keywordx][bracketr10][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][linkx][ahref]
           </h3>
           <p>
            Come and spend Valentine’s Day in the world’s most romantic city!
           </p>
          </div>
         </div>
        </a>
       </li>
       <li class="LightTeasers-item">
        [ahref]
        
       </li>
       <li class="LightTeasers-item">
        [linkx]
        
       </li>
       <li class="LightTeasers-item">
        [ahref]
        
       </li>
       <li class="LightTeasers-item">
        <a class="LightTeasers-link" href="/discovering-paris/major-events/what-to-do-in-paris/what-to-do-in-paris-in-september">
         <div class="LightTeasers-inner">
          <div class="LightTeasers-pic" title="© Daniel Thierry">
          </div>
          <div class="LightTeasers-text">
           <h3 class="LightTeasers-title">
            [area1][mkey1][symbolx][pkeyx][symbolx][area1][keyword1][bracketl1][area1][keywordx][bracketr1][symbolx][bracketl2][area1][keywordx][bracketr2][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx]
           </h3>
           <p>
            After the summer holidays, Parisians gear up for a variety of cultural and festive outings
           </p>
          </div>
         </div>
        </a>
       </li>
       <li class="LightTeasers-item">
        [linkx]
        
       </li>
       <li class="LightTeasers-item">
        [linkx]
        
       </li>
      </ul>
      <div class="Share-bar Share-bar--visitors">
       [ahref]
       
       [linkx]
       
       <a class="Share-icon" href="/discovering-paris/major-events/what-to-do-in-paris&amp;subject=What%20to%20do%20in%20Paris%20in%202019">
        <svg aria-hidden="true" class="Icon Icon--mail" style="width:32px;height:21px">
         <use xlink:href="/bundles/otcpstatic/sprite/icons.svg#mail">
         </use>
        </svg>
       </a>
       [ahref]
       
       [ahref]
       
       [ahref]
       
      </div>
     </div>
     <div class="Row-content Row-content--narrow">
      <div class="Separator Separator--even">
       <svg aria-hidden="true" class="Icon Icon--pantheon">
        <use xlink:href="/bundles/otcpstatic/sprite/icons.svg#pantheon">
        </use>
       </svg>
      </div>
     </div>
     <div class="Row-content Row-content--more Row-content--narrow">
      <h2 class="Row-title spaceAfter--3">
       [area1][mkey1][symbolx][pkeyx][symbolx][area1][keyword1][bracketl1][area1][keywordx][bracketr1][symbolx][bracketl2][area1][keywordx][bracketr2][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx]
      </h2>
      <ul class="DarkTeasers">
       <li class="DarkTeasers-item">
        [ahref]
        
       </li>
       <li class="DarkTeasers-item">
        [linkx]
        
       </li>
       <li class="DarkTeasers-item">
        [ahref]
        
       </li>
      </ul>
      <a class="Row-more" href="/discovering-paris/major-events">
       See all the guides
       <svg aria-hidden="true" class="Icon Icon--arrow-right" style="width:14px;height:14px">
        <use xlink:href="/bundles/otcpstatic/sprite/icons.svg#arrow-right">
        </use>
       </svg>
      </a>
     </div>
     <div class="Row-content hidden-phone">
      <div class="Separator Separator--even">
      </div>
      <div class="Banner Banner--noMobile">
       [linkx]
       
      </div>
     </div>
    </div>
   </div>
   <footer class="Footer">
    <div class="Footer-top">
     <div class="Row-content">
      <div class="Footer-logo">
       <li>[area1][mkey1]</li><li>[linkx]</li>[ahref][area1][mkey1]
      </div>
      <div class="ListInfos">
       <h4 class="ListInfos-title">
        PARISINFO.com
       </h4>
       <ul class="ListInfos-list">
        <li class="ListInfos-item">
         [linkx]
         
        </li>
        <li class="ListInfos-item">
         <li>[area1][keywordx][symbolx][area1][keywordx][symbolx][bracketl3][area1][keywordx][bracketr3][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx]</li><li>[area1][mkey1]</li>[ahref][linkx]
        </li>
        <li class="ListInfos-item">
         [ahref]
         
        </li>
        <li class="ListInfos-item">
         <a href="/footer/full/210347">
          <svg aria-hidden="true" class="Icon Icon--arrow-right">
           <use xlink:href="/bundles/otcpstatic/sprite/icons.svg#arrow-right">
           </use>
          </svg>
          Espace emploi
         </a>
        </li>
        <li class="ListInfos-item">
         [linkx]
         
        </li>
       </ul>
      </div>
      <div class="Insert Insert--visitors Insert--list Insert--pink clearfix">
       <h3 class="Insert-title">
        <b>[area1][mkey1][symbolx][pkeyx][symbolx][area1][keyword1][bracketl1][area1][keywordx][bracketr1][symbolx][bracketl2][area1][keywordx][bracketr2][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx]</b>
       </h3>
       <ul class="Insert-list">
        <li class="Insert-item">
         <svg aria-hidden="true" class="Icon Icon--arrow-right">
          <use xlink:href="/bundles/otcpstatic/sprite/icons.svg#arrow-right">
          </use>
         </svg>
         [linkx]
         
        </li>
        <li class="Insert-item">
         <li>[ahref]</li>[area1][mkey1][area1][keywordx]
        </li>
        <li class="Insert-item">
         <svg aria-hidden="true" class="Icon Icon--arrow-right">
          <use xlink:href="/bundles/otcpstatic/sprite/icons.svg#arrow-right">
          </use>
         </svg>
         [linkx]
         
        </li>
        <li class="Insert-item">
         <svg aria-hidden="true" class="Icon Icon--arrow-right">
          <use xlink:href="/bundles/otcpstatic/sprite/icons.svg#arrow-right">
          </use>
         </svg>
         <a href="/footer/full/1463" title="General Conditions of Sale">
          General Conditions of Sale
         </a>
        </li>
       </ul>
       [linkx]
       
      </div>
      <div class="BottomSocial js-Dropdown">
       <h4 class="BottomSocial-title">
        Follow us
       </h4>
       <button class="BottomSocial-btn js-Dropdown-btn">
       </button>
       <ul class="BottomSocial-list" data-dropdown="">
        <li class="BottomSocial-item">
         [linkx]
         
        </li>
        <li class="BottomSocial-item">
         [ahref]
         
        </li>
        <li class="BottomSocial-item">
         [ahref]
         
        </li>
        <li class="BottomSocial-item">
         [ahref]
         
        </li>
        <li class="BottomSocial-item">
         [linkx]
         
        </li>
        <li class="BottomSocial-item">
         <a class="BottomSocial-link" href="/user/ParisOTC" target="_blank" title="YouTube">
          <svg aria-hidden="true" class="Icon Icon--youtube">
           <use xlink:href="/bundles/otcpstatic/sprite/icons.svg#youtube">
           </use>
          </svg>
         </a>
        </li>
        <li class="BottomSocial-item">
         <a class="BottomSocial-link" href="/Attraction_Review-g187147-d310851-Reviews-Office_du_Tourisme_et_des_Congres_de_Paris-Paris_Ile_de_France.html" target="_blank" title="TripAdvisor">
          <li>[linkx]</li><li>[area1][mkey1]</li>[pkeyx][linkx][linkx]
         </a>
        </li>
       </ul>
       <button class="BottomSocial-btn js-Dropdown-btn">
       </button>
      </div>
     </div>
    </div>
    <div class="Footer-parisinfo">
     <div class="Row-content">
      <h4 class="Footer-title">
       PARISINFO.com
      </h4>
      <div class="ListMenu">
       <h4 class="ListMenu-title">
        Our websites
       </h4>
       <div class="ListMenu-select js-Dropdown js-Dropdown--auto">
        <button class="ListMenu-active js-Dropdown-btn">
         Visitors
         <svg aria-hidden="true" class="Icon Icon--arrow-bottom">
          <use xlink:href="/bundles/otcpstatic/sprite/icons.svg#arrow-bottom">
          </use>
         </svg>
        </button>
        <ul class="ListMenu-options">
         <li>
          [ahref]
          
         </li>
         <li>
          <a class="ListMenu-option" href="/">
           Professionals
          </a>
         </li>
         <li>
          [linkx]
           [area1][keywordx][symbolx][area1][keywordx][symbolx][bracketl1][area1][keywordx][bracketr1][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][bracketl2][area1][keywordx][bracketr2][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx]<li>[linkx]</li>[area1][keywordx]
          
         </li>
         <li>
          [ahref]
          
         </li>
        </ul>
       </div>
      </div>
      <div class="ListLangs">
       <h4 class="ListLangs-title">
        Paris Worldwide
       </h4>
       <ul class="ListLangs-list">
        <li class="ListLangs-item">
         <a href="/">
          <span class="ListLangs-flag">
          </span>
          <span class="ListLangs-name">
           French
          </span>
         </a>
        </li>
        <li class="ListLangs-item">
         [linkx]
         
        </li>
        <li class="ListLangs-item">
         [linkx]
         
        </li>
        <li class="ListLangs-item">
         <li>[ahref]</li>[pkeyx]<li>[pkeyx]</li><li>[pkeyx]</li>
        </li>
        <li class="ListLangs-item">
         [linkx]
         
        </li>
        <li class="ListLangs-item">
         [linkx]
         
        </li>
        <li class="ListLangs-item">
         <a href="/">
          <span class="ListLangs-flag">
          </span>
          <span class="ListLangs-name">
           Nederlands
          </span>
         </a>
        </li>
        <li class="ListLangs-item">
         [linkx]
         
        </li>
        <li class="ListLangs-item">
         <a href="/">
          <span class="ListLangs-flag">
          </span>
          <span class="ListLangs-name">
           日本語
          </span>
         </a>
        </li>
        <li class="ListLangs-item">
         [linkx]
         
        </li>
        <li class="ListLangs-item">
         [ahref]
         
        </li>
       </ul>
      </div>
     </div>
    </div>
    <div class="Footer-bottom">
     <div class="Row-content">
      <div class="Footer-content">
       <div class="Partner">
        <h4 class="Partner-title">
         Our partners :
        </h4>
        <ul class="Partner-list">
         <li class="Partner-item">
          <a href="r">
          </a>
         </li>
         <li class="Partner-item">
          [ahref]
          
         </li>
         <li class="Partner-item">
          [ahref]
          
         </li>
         <[area1][keywordx]>
         </[area1][keywordx]>
         <li class="Partner-item">
          [ahref]
          
         </li>
        </ul>
       </div>
      </div>
      <div class="SiteMap">
       <div class="SiteMap-col">
        <h4 class="SiteMap-title">
         [linkx]
         
        </h4>
        <ul class="SiteMap-list">
         <li class="SiteMap-item">
          >
          [ahref]
          
         </li>
         <li class="SiteMap-item">
          >
          [linkx]
          
         </li>
         <li class="SiteMap-item">
          >
          [ahref]
          
         </li>
         <li class="SiteMap-item">
          >
          [linkx]
          
         </li>
         <li class="SiteMap-item">
          >
          [linkx]
          
         </li>
         <li class="SiteMap-item">
          >
          [ahref]
          
         </li>
         <li class="SiteMap-item">
          >
          [ahref]
          
         </li>
         <li class="SiteMap-item">
          >
          [linkx]
          
         </li>
        </ul>
       </div>
       <div class="SiteMap-col">
        <h4 class="SiteMap-title">
         [linkx]
         
        </h4>
        <ul class="SiteMap-list">
         <li class="SiteMap-item">
          >
          [linkx]
          
         </li>
         <li class="SiteMap-item">
          >
          [linkx]
          
         </li>
         <li class="SiteMap-item">
          >
          [linkx]
          
         </li>
         <li class="SiteMap-item">
          >
          <a href="/what-to-see-in-paris/guided-tours" title="Guided tours">
           Guided tours
          </a>
         </li>
         <li class="SiteMap-item">
          >
          [linkx]
          
         </li>
         <li class="SiteMap-item">
          >
          [ahref]
          
         </li>
         <li class="SiteMap-item">
          >
          [linkx]
          
         </li>
         <li class="SiteMap-item">
          >
          [ahref]
          
         </li>
         <li class="SiteMap-item">
          >
          [linkx]
          
         </li>
        </ul>
       </div>
       <div class="SiteMap-col">
        <h4 class="SiteMap-title">
         <a href="/what-to-do-in-paris" title="What to do in Paris?">
          What to do in Paris?
         </a>
        </h4>
        <ul class="SiteMap-list">
         <li class="SiteMap-item">
          >
          [ahref]
          
         </li>
         <li class="SiteMap-item">
          >
          [linkx]
          
         </li>
         <li class="SiteMap-item">
          >
          [ahref]
          
         </li>
         <li class="SiteMap-item">
          >
          [ahref]
          
         </li>
         <li class="SiteMap-item">
          >
          [ahref]
          
         </li>
         <li class="SiteMap-item">
          >
          <a href="/what-to-do-in-paris/celebrations-and-festivals-in-paris" title="Celebrations and festivals in Paris">
           Celebrations and festivals in Paris
          </a>
         </li>
         <li class="SiteMap-item">
          >
          [ahref]
          
         </li>
         <li class="SiteMap-item">
          >
          [linkx]
          
         </li>
         <li class="SiteMap-item">
          >
          [ahref]
          
         </li>
         <li class="SiteMap-item">
          >
          <a href="/what-to-do-in-paris/Zoos-Aquariums" title="Zoos &amp; Aquariums">
           Zoos &amp; Aquariums
          </a>
         </li>
         <li class="SiteMap-item">
          >
          [linkx]
          
         </li>
         <li class="SiteMap-item">
          >
          [ahref]
          
         </li>
        </ul>
       </div>
       <div class="SiteMap-col">
        <h4 class="SiteMap-title">
         [ahref]
         
        </h4>
        <ul class="SiteMap-list">
         <li class="SiteMap-item">
          >
          [ahref]
          
         </li>
         <li class="SiteMap-item">
          >
          [linkx]
          
         </li>
         <li class="SiteMap-item">
          >
          [ahref]
          
         </li>
         <li class="SiteMap-item">
          >
          [ahref]
          
         </li>
         <li class="SiteMap-item">
          >
          <a href="/shopping/concept-stores-designer-goods-and-arty-shopping" title="Concept stores, designer goods and arty shopping">
           Concept stores, designer goods and arty shopping
          </a>
         </li>
         <li class="SiteMap-item">
          >
          [ahref]
          
         </li>
         <li class="SiteMap-item">
          >
          [ahref]
          
         </li>
         <li class="SiteMap-item">
          >
          [linkx]
          
         </li>
         <li class="SiteMap-item">
          >
          <a href="/shopping/shop-as-you-visit-in-paris" title="Shop as you visit">
           Shop as you visit
          </a>
         </li>
         <li class="SiteMap-item">
          >
          [ahref]
          
         </li>
         <li class="SiteMap-item">
          >
          [ahref]
          
         </li>
         <li class="SiteMap-item">
          >
          [linkx]
          
         </li>
        </ul>
       </div>
       <div class="SiteMap-col">
        <h4 class="SiteMap-title">
         <a href="/where-to-eat-in-paris" title="Where to eat in Paris?">
          Where to eat in Paris?
         </a>
        </h4>
        <ul class="SiteMap-list">
         <li class="SiteMap-item">
          >
          [ahref]
          
         </li>
         <li class="SiteMap-item">
          >
          [linkx]
          
         </li>
         <li class="SiteMap-item">
          >
          [linkx]
          
         </li>
         <li class="SiteMap-item">
          >
          [linkx]
          
         </li>
         <li class="SiteMap-item">
          >
          [ahref]
          
         </li>
         <li class="SiteMap-item">
          >
          [ahref]
          
         </li>
         <li class="SiteMap-item">
          >
          [ahref]
          
         </li>
         <li class="SiteMap-item">
          >
          <a href="/where-to-eat-in-paris/fine-food-shops-and-caterers" title="Fine food shops and caterers">
           Fine food shops and caterers
          </a>
         </li>
         <li class="SiteMap-item">
          >
          [ahref]
          
         </li>
         <li class="SiteMap-item">
          >
          [linkx]
          
         </li>
        </ul>
       </div>
       <div class="SiteMap-col">
        <h4 class="SiteMap-title">
         <li>[area1][keywordx]</li>[area1][keywordx][pkeyx]<li>[ahref]</li>
        </h4>
        <ul class="SiteMap-list">
         <li class="SiteMap-item">
          >
          [linkx]
          
         </li>
         <li class="SiteMap-item">
          >
          [linkx]
          
         </li>
         <li class="SiteMap-item">
          >
          [ahref]
          
         </li>
         <li class="SiteMap-item">
          >
          [ahref]
          
         </li>
         <li class="SiteMap-item">
          >
          <a href="/where-to-sleep-in-paris/camping" title="Camping">
           Camping
          </a>
         </li>
         <li class="SiteMap-item">
          >
          [linkx]
          
         </li>
         <li class="SiteMap-item">
          >
          [linkx]
          
         </li>
         <li class="SiteMap-item">
          >
          [ahref]
          
         </li>
         <li class="SiteMap-item">
          >
          <a href="/where-to-sleep-in-paris/bed-and-breakfast" title="Bed &amp; Breakfast accommodation in Paris">
           Bed &amp; Breakfast accommodation in Paris
          </a>
         </li>
         <li class="SiteMap-item">
          >
          [linkx]
          
         </li>
         <li class="SiteMap-item">
          >
          [linkx]
          
         </li>
         <li class="SiteMap-item">
          >
          <a href="/where-to-sleep-in-paris/tourist-tax" title="Tourist tax">
           Tourist tax
          </a>
         </li>
        </ul>
       </div>
       <div class="SiteMap-col">
        <h4 class="SiteMap-title">
         [linkx]
         
        </h4>
        <ul class="SiteMap-list">
         <li class="SiteMap-item">
          >
          [linkx]
          
         </li>
         <li class="SiteMap-item">
          >
          <a href="/practical-paris/paris-convention-and-visitors-bureau" title="Paris Convention and Visitors Bureau">
           Paris Convention and Visitors Bureau
          </a>
         </li>
         <li class="SiteMap-item">
          >
          <a href="/practical-paris/planning-your-stay-in-paris" title="Planning your stay in Paris">
           Planning your stay in Paris
          </a>
         </li>
         <li class="SiteMap-item">
          >
          [ahref]
          
         </li>
         <li class="SiteMap-item">
          >
          [linkx]
          
         </li>
         <li class="SiteMap-item">
          >
          [linkx]
          
         </li>
         <li class="SiteMap-item">
          >
          [linkx]
          
         </li>
         <li class="SiteMap-item">
          >
          <a href="/practical-paris/money" title="Money in France">
           Money in France
          </a>
         </li>
         <li class="SiteMap-item">
          >
          [linkx]
          
         </li>
         <li class="SiteMap-item">
          >
          [linkx]
          
         </li>
         <li class="SiteMap-item">
          >
          [linkx]
          
         </li>
         <li class="SiteMap-item">
          >
          [linkx]
          
         </li>
        </ul>
       </div>
       <ul class="SiteMap-inline">
        <li class="SiteMap-inlineLItem">
         [pkeyx][linkx]<li>[area1][keywordx][symbolx][area1][keywordx][symbolx][bracketl4][area1][keywordx][bracketr4][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx]</li>
        </li>
        <li class="SiteMap-inlineLItem">
         [ahref]
         
        </li>
        <li class="SiteMap-inlineLItem">
         [linkx]
         
        </li>
        <li class="SiteMap-inlineLItem">
         <a href="/footer/full/210347">
          Espace emploi
         </a>
        </li>
        <li class="SiteMap-inlineLItem">
         [ahref]
         
        </li>
       </ul>
      </div>
      <p class="Footer-copyright">
       © 2015 Paris Convention and Visitors Bureau
       <span>
        All rights reserved<li>[area1][keywordx][symbolx][area1][keywordx][symbolx][bracketl17][area1][keywordx][bracketr17][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx]</li><li>[linkx]</li><li>[pkeyx]</li>[area1][keywordx]<li>[ahref]</li>
       </span>
      </p>
     </div>
    </div>
   </footer>
   <aside class="RwdMenu RwdMenu--visitors" hidden="">
    <div class="RwdMenu-close js-ShowMenu-close">
     <svg aria-hidden="true" class="Icon Icon--cross" style="width:18px;height:18px">
      <use xlink:href="/bundles/otcpstatic/sprite/icons.svg#cross">
      </use>
     </svg>
    </div>
    <div class="RwdMenu-content">
     <ul class="RwdMenu-list">
      <li class="RwdMenu-item">
       [ahref]
       
      </li>
      <li class="RwdMenu-item">
       <a href="/discovering-paris" title="Discovering Paris">
        Explore
       </a>
      </li>
      <li class="RwdMenu-item">
       [ahref]
       
      </li>
      <li class="RwdMenu-item">
       [ahref]
       
      </li>
      <li class="RwdMenu-item">
       [ahref]
       
      </li>
      <li class="RwdMenu-item">
       [linkx]
       
      </li>
      <li class="RwdMenu-item">
       [linkx]
       
      </li>
      <li class="RwdMenu-item">
       [linkx]
       
      </li>
     </ul>
     [linkx]
     
     <div class="RwdMenu-footer">
      <div class="Langs js-Dropdown js-Dropdown--auto">
       <button class="Langs-selected js-Dropdown-btn">
       </button>
       <ul class="Langs-list">
        <li>
         [linkx]
         
        </li>
        <li>
         [linkx]
         
        </li>
        <li>
         [area1][mkey1][area1][keywordx][symbolx][area1][keywordx][symbolx][bracketl14][area1][keywordx][bracketr14][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][bracketl15][area1][keywordx][bracketr15][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][bracketl16][area1][keywordx][bracketr16][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][pkeyx][area1][keywordx][pkeyx][linkx][linkx][pkeyx][pkeyx][area1][keywordx][ahref]
        </li>
        <li>
         [linkx]
         
        </li>
        <li>
         <a class="Langs-item" href="/" title="Português">
         </a>
        </li>
        <li>
         [ahref]
         
        </li>
        <li>
         <a class="Langs-item" href="/" title="Русский">
         </a>
        </li>
        <li>
         [linkx]
         
        </li>
        <li>
         [ahref]
         
        </li>
        <li>
         [linkx]
         
        </li>
       </ul>
      </div>
     </div>
    </div>
   </aside>
   <div class="CookieNotice" hidden="">
    <p class="CookieNotice-info">
     By using this site , you agree to the use of cookies for analytical purposes, advertising and personalized content . more info
     [linkx]
     
    </p>
    <p class="CookieNotice-cta">
     <button class="CookieNotice-close">
      Accept
     </button>
    </p>
   </div>
   <section aria-labelledby="ajax-modal-label" class="modal fade" id="ajaxModal" role="dialog" tabindex="-1">
    <div class="modal-dialog spaceBefore--16" role="document">
     <div class="modal-content">
     </div>
    </div>
   </section>
  </div>
  <b style="color:black;background-color:#a0ffff">
   jnice09-ipp30-wq-zq-0219
  </b>
 </body>
</html>|<---