--->|<!DOCTYPE html>
<html dir="ltr" lang="ko-KR" xml:lang="ko-KR" xmlns="https://www.w3.org/1999/xhtml">
 <head>
  <base href="https://www.raileurope.co.kr/"/>
  <meta content="text/html; charset=utf-8" http-equiv="Content-Type"/>
  <meta content="ie=edge" http-equiv="x-ua-compatible"/>
  <meta content="width=device-width, initial-scale=1.0" name="viewport"/>
  <meta content="document" name="resource-type"/>
  <meta content="10 Days" name="revisit-after"/>
  <title>
   [mkey1][symbolx][pkey1][symbolx][keyword1][bracketl1][keywordx][bracketr1][symbolx][bracketl2][keywordx][bracketr2][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx]
  </title>
  <meta content="[mkey1][symbolx][pkey3][symbolx][keyword1][bracketl1][keywordx][bracketr1][symbolx][bracketl2][keywordx][bracketr2][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx]" name="keywords"/>
  <meta content="[mkey1][symbolx][pkey2][symbolx][keyword1][bracketl1][keywordx][bracketr1][symbolx][bracketl2][keywordx][bracketr2][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx]" name="description"/>
 </head>
 <body class="ui-responsive-panel" id="journeys">
  <div class="banner_hp_bg" id="banner_bg">
   <div class="banner_overlay hidden">
   </div>
  </div>
  <header>
   <div id="header">
    <div id="header-top">
     <div class="menu_button pointer">
      <div class="sprite f-left">
      </div>
      메뉴
     </div>
     <div class="header_button f-left dropdown" id="money_changer">
      [keywordx][mkey1][ahref][mkey1][keywordx][symbolx][keywordx][symbolx][bracketl11][keywordx][bracketr11][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][bracketl12][keywordx][bracketr12][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][keywordx][symbolx][keywordx][symbolx][bracketl13][keywordx][bracketr13][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][mkey1][keywordx][keywordx][symbolx][keywordx][symbolx][bracketl14][keywordx][bracketr14][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][linkx][pkeyx][mkey1][linkx][keywordx][symbolx][keywordx][symbolx][bracketl15][keywordx][bracketr15][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][ahref][linkx][mkey1][pkeyx][keywordx][symbolx][keywordx][symbolx][bracketl16][keywordx][bracketr16][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][linkx]
     </div>
     <div class="button_content money_changer">
      [linkx][linkx][mkey1][keywordx][symbolx][keywordx][symbolx][bracketl8][keywordx][bracketr8][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][ahref][pkeyx][pkeyx][linkx][pkeyx][linkx][pkeyx][keywordx][symbolx][keywordx][symbolx][bracketl9][keywordx][bracketr9][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][ahref][keywordx][symbolx][keywordx][symbolx][bracketl10][keywordx][bracketr10][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx]
     </div>
     <div class="header_button menu_btn dropdown" id="header_form">
      <span>
       예약[ahref][mkey1][mkey1][keywordx][symbolx][keywordx][symbolx][bracketl17][keywordx][bracketr17][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][keywordx][mkey1][keywordx][linkx][ahref][pkeyx][ahref][keywordx][symbolx][keywordx][symbolx][bracketl18][keywordx][bracketr18][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][ahref][keywordx]
      </span>
     </div>
     <div class="form_button_content header_form_tabs" id="content">
      <ul class="clearfix container_tabs" rel="header_form_tabs">
       <li class="rtab active" id="tab01">
        [ahref]
         [pkeyx][keywordx][symbolx][keywordx][symbolx][bracketl1][keywordx][bracketr1][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][linkx][mkey1][keywordx][symbolx][keywordx][symbolx][bracketl2][keywordx][bracketr2][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][linkx][keywordx][keywordx][symbolx][keywordx][symbolx][bracketl3][keywordx][bracketr3][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][bracketl4][keywordx][bracketr4][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][ahref][keywordx][symbolx][keywordx][symbolx][bracketl5][keywordx][bracketr5][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][bracketl6][keywordx][bracketr6][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][linkx][pkeyx][mkey1][pkeyx][ahref][pkeyx][mkey1][linkx][keywordx][linkx][keywordx][mkey1][keywordx][symbolx][keywordx][symbolx][bracketl7][keywordx][bracketr7][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][pkeyx]
        
       </li>
      </ul>
      <div id="header_form_tabs">
       <div class="rtab_content active" id="rtab_content_tab01">
        <div class="center ptp-gradient ptp-form-loading">
         <br/>
         <br/>
         <h3 class="white">
          <b>[mkey1][symbolx][pkeyx][symbolx][keyword1][bracketl1][keywordx][bracketr1][symbolx][bracketl2][keywordx][bracketr2][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx]</b>
         </h3>
         <br/>
         <br/>
        </div>
       </div>
      </div>
     </div>
     <div class="formRailEurope f-right col24">
      <div class="header_button menu_btn dropdown" id="header_help">
       <span>
        도움받기
       </span>
      </div>
      <ul class="button_content button_list header_help">
       <li>
        <a href="/faq/" title="자주 물어보는 질문">
         자주 물어보는 질문
        </a>
       </li>
       <li>
        [ahref]
        
       </li>
      </ul>
      <div class="header_button menu_btn dropdown" data-label="로그인" id="header_login">
       <span>
        로그인
       </span>
      </div>
      <ul class="button_content header_login">
      </ul>
      <div id="ure_logged">
      </div>
      <ul class="button_content header_cart">
       <li class="rcart-empty">
       </li>
      </ul>
     </div>
     <div class="m-auto col22 center header_logo">
      <a class="noborder" href="/" title="Rail Europe">
      </a>
     </div>
    </div>
    <div class="clearfix" id="breadcrumb">
     <span id="search_form_holder">
      <div class="champs_search">
       <form action="e" id="top_search" method="get" name="top_search">
        <fieldset class="search">
         [keywordx][symbolx][keywordx][symbolx][bracketl2][keywordx][bracketr2][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx]<li>[keywordx][symbolx][keywordx][symbolx][bracketl3][keywordx][bracketr3][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx]</li>[linkx][ahref]
        </fieldset>
       </form>
      </div>
     </span>
     [ahref]
     
     <span class="delimiter">
      >
     </span>
     <a href="/journeys/" title="유럽을 발견하십시오">
      유럽을 발견하십시오
     </a>
     >
				파리(Paris) - 암스테르담(Amsterdam)
    </div>
   </div>
  </header>
  <b style="color:black;background-color:#a0ffff">
   jnice09-ipp30-wq-zq-0227
  </b>
 </body>
</html>
<div id="header_menu">
 <div class="close-menu">
  X
 </div>
 <div class="container_menu">
  <div class="clearfix head_menu center">
   <p class="h2 uppercase white">
    환영합니다!
   </p>
   <p>
    고객님의 개인정보, 예약, 일정이 여기에 있습니다.
   </p>
   <div id="header_menu_login">
    <p>
     [linkx]
     
    </p>
    <p>
     [linkx]
     
    </p>
   </div>
   <div class="hidden" id="header_menu_logged">
    <p>
     [ahref]
     
    </p>
    <p>
     <form action="/spip.php?page=sales">
      <div>
       [ahref]
       
      </div>
     </form>
    </p>
   </div>
  </div>
  <ul>
   <li id="bton06">
    <span id="search_form_holder">
     <div class="champs_search">
      <form action="e" id="top_search" method="get" name="top_search">
       <fieldset class="search">
        [ahref]
        
        <br/>
       </fieldset>
      </form>
     </div>
    </span>
   </li>
   <li id="bton01">
    [linkx]
    
    <div class="sub_menu hidden" id="sub_menu01">
    </div>
   </li>
   <li id="bton02">
    [ahref]
    
    <div class="sub_menu hidden" id="sub_menu02">
    </div>
   </li>
   <li id="bton03">
    [ahref]
    
    <div class="sub_menu hidden" id="sub_menu03">
    </div>
   </li>
   <li id="bton04">
    [ahref]
    
    <div class="sub_menu hidden" id="sub_menu04">
    </div>
   </li>
   <li id="bton05">
    <a class="header_menu_a" href="/" id="menu05" title="특가와 프로모션">
     <span class="sprite sprite-arrow-right f-right">
     </span>
     특가와 프로모션
    </a>
    <div class="sub_menu hidden" id="sub_menu05">
    </div>
   </li>
   <li id="bton06">
    [ahref]
    
    <div class="sub_menu hidden" id="sub_menu06">
    </div>
   </li>
   <li id="bton07">
    <a class="header_menu_a" href="/" id="menu07" title="레일유럽 소개">
     <span class="sprite sprite-arrow-right f-right">
     </span>
     레일유럽 소개
    </a>
    <div class="sub_menu hidden" id="sub_menu07">
    </div>
   </li>
   <li>
    [linkx]
    
   </li>
  </ul>
 </div>
</div>
<div id="waiting-page">
 <div class="w_message">
  <br/>
  <div class="waiting_page_loader m-auto">
  </div>
 </div>
 <div id="w_photos_container">
 </div>
</div>
<div class="clearfix" data-role="page" id="content">
 <div itemscope="" itemtype="https://schema.org/Product" style="display:none;">
  <span itemprop="name">
   파리(Paris) - 암스테르담(Amsterdam)
  </span>
  <div itemprop="offers" itemscope="" itemtype="https://schema.org/Offer">
   <span content="EUR" itemprop="priceCurrency">
    €
   </span>
   <span content="35" itemprop="price">
    35
   </span>
   In stock
  </div>
 </div>
 <article>
  <div>
   <div class="ui-content">
    <div class="center">
     <h1 class="title a-color inline-block border-bottom">
      <b>[mkey1][symbolx][pkeyx][symbolx][keyword1][bracketl1][keywordx][bracketr1][symbolx][bracketl2][keywordx][bracketr2][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx]</b>
     </h1>
     <br class="clearboth"/>
     유효기간 
						03:17
						
						
						 -
     <span class="top_price">
      부터
      <span class="noborder blue">
       <span class="small_currency">
        €
       </span>
       35
      </span>
     </span>
    </div>
    <br class="clearboth"/>
   </div>
   <div class="top-full-image cover" style="background-image:url(https://static5.mytraintravel.com/local/cache-vignettes/L1679xH457/99.-banner-2-0f4ec.jpg?1556209925);padding: 1px 0 160px;margin-bottom: 60px;">
    <div class="ptp-gradient" id="searchTickets" style="margin-top:160px;">
     <div class="railengine obu-v1 ">
      <div class="railenginecontent" data-domain="ptp" data-oper="FORM">
       <div id="ure-form-errors">
       </div>
       <div class="js-ptpform ptpform horizontal">
        <form action="/spip.php?page=sales" class="js-ptpform ptpform-form " method="post">
         <div class="ptp__roundtrip">
          <div class="ptp__roundtrip-inner">
           <div class="ptp__roundtrip-select" id="roundtrip-select">
            <div class="js-roundtripselect-multi select-radios">
             <div class="form-item form-type-radio">
              <label for="ptpform-oneway">
               편도
              </label>
             </div>
             <div class="form-item form-type-radio">
              <label for="ptpform-roundtrip">
               왕복
              </label>
             </div>
             <div class="form-item form-type-radio">
              <label for="ptpform-multicity">
               Multi-City
              </label>
             </div>
            </div>
           </div>
          </div>
         </div>
         <div class="ptpsearch-outer">
          <div class="js-ptpsearch-inner ptpsearch-inner roundtrip">
           <div class="js-ptpsearch ptpsearch">
           </div>
           <div class="ptp-form-bottom-actions js-ptp-form-bottom-actions">
            [ahref]
            
            <div class="form-item form-type-checkbox js-ptpform-passreservation ptpform-passreservation">
             <label for="ptpform-passreservation">
              철도 패스를 소지하고 있습니다.
             </label>
             <div class="tooltip tooltip-icon js-passholder-tooltip" title="체크 상자에 체크하는 것으로 나는 여행을 위한 철도 패스 예약에 동의합니다. 또한, 특정 예약 건에 해당하는 패스 소지자 적용 요금 정보를 받는 것에 동의합니다. 일부 열차는 패스 소지자에게 할인 요금을 적용하며, 이 할인 요금을 보려면 " 나는="" 소지자입니다"라는="" 옵션에="" 철도="" 체크해야만="" 패스="" 합니다."="">
              <span class="tooltip-empty">
               ?
              </span>
             </div>
            </div>
            <div class="form-item js-ptpform-passselector ptpform-passselector" style="display:none;">
            </div>
            <div class="js-ptpform-passselector-dialog ptpform-passselector-dialog" data-default-label="패스 종류" style="display:none;">
             <div class="ui-widget">
              <select class="js-ptpform-passselector-combobox selectFieldImp required forcevalidate" id="ptp-form-pass-select" name="re_passfamily_1_name">
               <option value="">
                패스를 선택하세요
               </option>
               <option data-countries-needed=" 0" value="Eurail Poland Pass Free Day Promotion">
                Poland Pass
               </option>
               <option data-countries-needed=" 0" value="Eurail Slovenia Pass Free Day Promotion">
                Slovenia Pass
               </option>
               <option data-countries-needed=" 0" value="German Rail Pass">
                독일 철도 패스
               </option>
               <option data-countries-needed=" 0" value="Balkan Pass">
                발칸 패스
               </option>
               <option data-countries-needed=" 0" value="Swiss Travel Pass">
                스위스 트래블 패스
               </option>
               <option data-countries-needed=" 0" value="Swiss Travel Pass Print at Home">
                스위스 패스
               </option>
               <option data-countries-needed=" 0" value="BritRail South West Pass">
                영국철도 남서부 패스
               </option>
               <option data-countries-needed=" 0" value="BritRail - London Plus Pass">
                영국철도 런던 플러스 패스
               </option>
               <option data-countries-needed=" 0" value="BritRail - Central Scotland Pass">
                영국철도 센트럴 스코틀랜드
               </option>
               <option data-countries-needed=" 0" value="BritRail Central Scotland Pass">
                영국철도 센트럴 스코틀랜드 패스
               </option>
               <option data-countries-needed=" 0" value="BritRail Scottish Freedom Pass">
                영국철도 스코트랜드 프리덤 패스
               </option>
               <option data-countries-needed=" 0" value="Britrail England Pass">
                영국철도 잉글랜드 패스
               </option>
               <option data-countries-needed=" 0" value="Britrail Pass">
                영국철도 패스
               </option>
               <option data-countries-needed=" 0" value="European East Pass">
                유러피언 이스트 패스
               </option>
               <option data-countries-needed=" 0" value="Eurail Greece Pass">
                유레일 그리스 패스
               </option>
               <option data-countries-needed=" 0" value="Eurail Global Pass">
                유레일 글로벌 패스
               </option>
               <option data-countries-needed=" 0" value="Eurail Norway Pass">
                유레일 노르웨이 패스
               </option>
               <option data-countries-needed=" 0" value="Eurail Denmark Pass">
                유레일 덴마크 패스
               </option>
               <option data-countries-needed=" 0" value="Eurail Romania Pass">
                유레일 루마니아 패스
               </option>
               <option data-countries-needed=" 0" value="Eurail Benelux Pass">
                유레일 베네룩스 패스
               </option>
               <option data-countries-needed=" 0" value="Eurail Bulgaria Pass">
                유레일 불가리아 패스
               </option>
               <option data-countries-needed=" 2" value="Eurail Two Country Select Pass">
                유레일 셀렉트 2개국 패스
               </option>
               <option data-countries-needed=" 3" value="Eurail Three Country Select Pass">
                유레일 셀렉트 3개국 패스
               </option>
               <option data-countries-needed=" 4" value="Eurail Four Country Select Pass">
                유레일 셀렉트 4개국 패스
               </option>
               <option data-countries-needed=" 0" value="Eurail Sweden Pass">
                유레일 스웨덴 패스
               </option>
               <option data-countries-needed=" 0" value="Eurail Scandinavia Pass">
                유레일 스칸디나비아 패스
               </option>
               <option data-countries-needed=" 0" value="Eurail Spain Pass Off Peak">
                유레일 스페인 패스
               </option>
               <option data-countries-needed=" 0" value="Eurail Slovakia Pass">
                유레일 슬로바키아 패스
               </option>
               <option data-countries-needed=" 0" value="Eurail Slovenia Pass">
                유레일 슬로베니아 패스
               </option>
               <option data-countries-needed=" 0" value="Eurail Ireland Pass">
                유레일 아일랜드 패스
               </option>
               <option data-countries-needed=" 0" value="Eurail Austria Pass">
                유레일 오스트리아 패스
               </option>
               <option data-countries-needed=" 0" value="Eurail Italy Pass">
                유레일 이탈리아 패스
               </option>
               <option data-countries-needed=" 0" value="Eurail Czech Republic Pass">
                유레일 체코 패스
               </option>
               <option data-countries-needed=" 0" value="Eurail Croatia Pass">
                유레일 크로아티아 패스
               </option>
               <option data-countries-needed=" 0" value="Eurail Portugal Pass">
                유레일 포르투갈 패스
               </option>
               <option data-countries-needed=" 0" value="Eurail Poland Pass">
                유레일 폴란드 패스
               </option>
               <option data-countries-needed=" 0" value="Eurail Finland Pass">
                유레일 핀란드 패스
               </option>
               <option data-countries-needed=" 0" value="Eurail Hungary Pass">
                유레일 헝가리 패스
               </option>
               <option data-countries-needed=" 0" value="Central Europe Triangle Pass">
                중앙 유럽 트라이앵글 패스
               </option>
               <option data-countries-needed=" 0" value="Eurail France Pass">
                프랑스 패스
               </option>
              </select>
             </div>
             <span>
              소지하신 철도 패스의 좌석 등급
             </span>
             <div class="form-item form-type-radio">
             </div>
             <div class="form-item form-type-radio">
             </div>
             <div class="eurailType_2 eurailTypes" data-countries-total="2" style="display:none;">
              <div class="form-item form-type-select">
               <label for="passholder_country_select_0_2">
                <span>
                 첫 번째 국가를 선택하세요
                </span>
               </label>
               <select class="form-select js-ptpform-eurailcountryselector-combobox required forcevalidate" data-country-idx="0" data-errormsg="WRONG" disabled="disabled" id="passholder_country_select_0_2" name="re_passfamily_0_country">
                <option disabled="" selected="" value="">
                 첫 번째 국가를 선택하세요
                </option>
                <option value="DE">
                 Germany
                </option>
                <option value="PT">
                 Portugal
                </option>
                <option value="CH">
                 Switzerland
                </option>
                <option value="BG">
                 Bulgaria
                </option>
                <option value="SIHR">
                 Croatia/Slovenia
                </option>
                <option value="DK">
                 Denmark
                </option>
                <option value="IT">
                 Italy
                </option>
                <option value="GR">
                 Greece
                </option>
                <option value="FR">
                 France
                </option>
                <option value="HU">
                 Hungary
                </option>
                <option value="ES">
                 Spain
                </option>
                <option value="SE">
                 Sweden
                </option>
                <option value="AT">
                 Austria
                </option>
                <option value="BX">
                 Benelux
                </option>
                <option value="CZ">
                 Czech Republic
                </option>
                <option value="SK">
                 Slovakia
                </option>
                <option value="PL">
                 Poland
                </option>
                <option value="MERS">
                 Montenegro/Serbia
                </option>
                <option value="RO">
                 Romania
                </option>
                <option value="TR">
                 Turkey
                </option>
               </select>
              </div>
              <div class="form-item form-type-select">
               <label for="passholder_country_select_1_2">
                <span>
                 두 번째 국가를 선택하세요
                </span>
               </label>
               <select class="form-select js-ptpform-eurailcountryselector-combobox required forcevalidate" data-country-idx="1" data-errormsg="WRONG" disabled="disabled" id="passholder_country_select_1_2" name="re_passfamily_1_country">
                <option disabled="" selected="" value="">
                 두 번째 국가를 선택하세요
                </option>
                <option value="DE">
                 Germany
                </option>
                <option value="PT">
                 Portugal
                </option>
                <option value="CH">
                 Switzerland
                </option>
                <option value="BG">
                 Bulgaria
                </option>
                <option value="SIHR">
                 Croatia/Slovenia
                </option>
                <option value="DK">
                 Denmark
                </option>
                <option value="IT">
                 Italy
                </option>
                <option value="GR">
                 Greece
                </option>
                <option value="FR">
                 France
                </option>
                <option value="HU">
                 Hungary
                </option>
                <option value="ES">
                 Spain
                </option>
                <option value="SE">
                 Sweden
                </option>
                <option value="AT">
                 Austria
                </option>
                <option value="BX">
                 Benelux
                </option>
                <option value="CZ">
                 Czech Republic
                </option>
                <option value="SK">
                 Slovakia
                </option>
                <option value="PL">
                 Poland
                </option>
                <option value="MERS">
                 Montenegro/Serbia
                </option>
                <option value="RO">
                 Romania
                </option>
                <option value="TR">
                 Turkey
                </option>
               </select>
              </div>
             </div>
             <div class="eurailType_3 eurailTypes" data-countries-total="3" style="display:none;">
              <div class="form-item form-type-select">
               <label for="passholder_country_select_0_3">
                <span>
                 첫 번째 국가를 선택하세요
                </span>
               </label>
               <select class="form-select js-ptpform-eurailcountryselector-combobox required forcevalidate" data-country-idx="0" data-errormsg="WRONG" disabled="disabled" id="passholder_country_select_0_3" name="re_passfamily_0_country">
                <option disabled="" selected="" value="">
                 첫 번째 국가를 선택하세요
                </option>
                <option value="DE">
                 Germany
                </option>
                <option value="NO">
                 Norway
                </option>
                <option value="FI">
                 Finland
                </option>
                <option value="PT">
                 Portugal
                </option>
                <option value="CH">
                 Switzerland
                </option>
                <option value="BG">
                 Bulgaria
                </option>
                <option value="SIHR">
                 Croatia/Slovenia
                </option>
                <option value="DK">
                 Denmark
                </option>
                <option value="IT">
                 Italy
                </option>
                <option value="GR">
                 Greece
                </option>
                <option value="FR">
                 France
                </option>
                <option value="HU">
                 Hungary
                </option>
                <option value="ES">
                 Spain
                </option>
                <option value="SE">
                 Sweden
                </option>
                <option value="AT">
                 Austria
                </option>
                <option value="BX">
                 Benelux
                </option>
                <option value="CZ">
                 Czech Republic
                </option>
                <option value="SK">
                 Slovakia
                </option>
                <option value="IE">
                 Ireland
                </option>
                <option value="MERS">
                 Montenegro/Serbia
                </option>
                <option value="RO">
                 Romania
                </option>
                <option value="TR">
                 Turkey
                </option>
               </select>
              </div>
              <div class="form-item form-type-select">
               <label for="passholder_country_select_1_3">
                <span>
                 두 번째 국가를 선택하세요
                </span>
               </label>
               <select class="form-select js-ptpform-eurailcountryselector-combobox required forcevalidate" data-country-idx="1" data-errormsg="WRONG" disabled="disabled" id="passholder_country_select_1_3" name="re_passfamily_1_country">
                <option disabled="" selected="" value="">
                 두 번째 국가를 선택하세요
                </option>
                <option value="DE">
                 Germany
                </option>
                <option value="NO">
                 Norway
                </option>
                <option value="FI">
                 Finland
                </option>
                <option value="PT">
                 Portugal
                </option>
                <option value="CH">
                 Switzerland
                </option>
                <option value="BG">
                 Bulgaria
                </option>
                <option value="SIHR">
                 Croatia/Slovenia
                </option>
                <option value="DK">
                 Denmark
                </option>
                <option value="IT">
                 Italy
                </option>
                <option value="GR">
                 Greece
                </option>
                <option value="FR">
                 France
                </option>
                <option value="HU">
                 Hungary
                </option>
                <option value="ES">
                 Spain
                </option>
                <option value="SE">
                 Sweden
                </option>
                <option value="AT">
                 Austria
                </option>
                <option value="BX">
                 Benelux
                </option>
                <option value="CZ">
                 Czech Republic
                </option>
                <option value="SK">
                 Slovakia
                </option>
                <option value="IE">
                 Ireland
                </option>
                <option value="MERS">
                 Montenegro/Serbia
                </option>
                <option value="RO">
                 Romania<li>[mkey1]</li><li>[linkx]</li><li>[keywordx]</li>[mkey1]
                </option>
                <option value="TR">
                 Turkey
                </option>
               </select>
              </div>
              <div class="form-item form-type-select">
               <label for="passholder_country_select_2_3">
                <span>
                 세 번째 국가를 선택하세요
                </span>
               </label>
               <select class="form-select js-ptpform-eurailcountryselector-combobox required forcevalidate" data-country-idx="2" data-errormsg="WRONG" disabled="disabled" id="passholder_country_select_2_3" name="re_passfamily_2_country">
                <option disabled="" selected="" value="">
                 세 번째 국가를 선택하세요
                </option>
                <option value="DE">
                 Germany
                </option>
                <option value="NO">
                 Norway
                </option>
                <option value="FI">
                 Finland
                </option>
                <option value="PT">
                 Portugal
                </option>
                <option value="CH">
                 Switzerland
                </option>
                <option value="BG">
                 Bulgaria
                </option>
                <option value="SIHR">
                 Croatia/Slovenia
                </option>
                <option value="DK">
                 Denmark
                </option>
                <option value="IT">
                 Italy
                </option>
                <option value="GR">
                 Greece
                </option>
                <option value="FR">
                 France
                </option>
                <option value="HU">
                 Hungary
                </option>
                <option value="ES">
                 Spain
                </option>
                <option value="SE">
                 Sweden
                </option>
                <option value="AT">
                 Austria
                </option>
                <option value="BX">
                 Benelux
                </option>
                <option value="CZ">
                 Czech Republic
                </option>
                <option value="SK">
                 Slovakia
                </option>
                <option value="IE">
                 Ireland
                </option>
                <option value="MERS">
                 Montenegro/Serbia
                </option>
                <option value="RO">
                 Romania
                </option>
                <option value="TR">
                 Turkey
                </option>
               </select>
              </div>
             </div>
             <div class="eurailType_4 eurailTypes" data-countries-total="4" style="display:none;">
              <div class="form-item form-type-select">
               <label for="passholder_country_select_0_4">
                <span>
                 첫 번째 국가를 선택하세요
                </span>
               </label>
               <select class="form-select js-ptpform-eurailcountryselector-combobox required forcevalidate" data-country-idx="0" data-errormsg="WRONG" disabled="disabled" id="passholder_country_select_0_4" name="re_passfamily_0_country">
                <option disabled="" selected="" value="">
                 첫 번째 국가를 선택하세요
                </option>
                <option value="DE">
                 Germany
                </option>
                <option value="NO">
                 Norway
                </option>
                <option value="FI">
                 Finland
                </option>
                <option value="PT">
                 Portugal
                </option>
                <option value="BG">
                 Bulgaria
                </option>
                <option value="CH">
                 Switzerland
                </option>
                <option value="SIHR">
                 Croatia/Slovenia
                </option>
                <option value="DK">
                 Denmark
                </option>
                <option value="GR">
                 Greece
                </option>
                <option value="IT">
                 Italy
                </option>
                <option value="FR">
                 France
                </option>
                <option value="HU">
                 Hungary
                </option>
                <option value="ES">
                 Spain
                </option>
                <option value="SE">
                 Sweden
                </option>
                <option value="AT">
                 Austria
                </option>
                <option value="BX">
                 Benelux
                </option>
                <option value="CZ">
                 Czech Republic
                </option>
                <option value="SK">
                 Slovakia
                </option>
                <option value="IE">
                 Ireland
                </option>
                <option value="MERS">
                 Montenegro/Serbia
                </option>
                <option value="RO">
                 Romania
                </option>
                <option value="TR">
                 Turkey
                </option>
               </select>
              </div>
              <div class="form-item form-type-select">
               <label for="passholder_country_select_1_4">
                <span>
                 두 번째 국가를 선택하세요
                </span>
               </label>
               <select class="form-select js-ptpform-eurailcountryselector-combobox required forcevalidate" data-country-idx="1" data-errormsg="WRONG" disabled="disabled" id="passholder_country_select_1_4" name="re_passfamily_1_country">
                <option disabled="" selected="" value="">
                 두 번째 국가를 선택하세요
                </option>
                <option value="DE">
                 Germany
                </option>
                <option value="NO">
                 Norway
                </option>
                <option value="FI">
                 Finland
                </option>
                <option value="PT">
                 Portugal
                </option>
                <option value="BG">
                 Bulgaria
                </option>
                <option value="CH">
                 Switzerland
                </option>
                <option value="SIHR">
                 Croatia/Slovenia
                </option>
                <option value="DK">
                 Denmark
                </option>
                <option value="GR">
                 Greece
                </option>
                <option value="IT">
                 Italy
                </option>
                <option value="FR">
                 France
                </option>
                <option value="HU">
                 Hungary
                </option>
                <option value="ES">
                 Spain
                </option>
                <option value="SE">
                 Sweden
                </option>
                <option value="AT">
                 Austria
                </option>
                <option value="BX">
                 Benelux
                </option>
                <option value="CZ">
                 Czech Republic
                </option>
                <option value="SK">
                 Slovakia
                </option>
                <option value="IE">
                 Ireland
                </option>
                <option value="MERS">
                 Montenegro/Serbia
                </option>
                <option value="RO">
                 Romania
                </option>
                <option value="TR">
                 Turkey
                </option>
               </select>
              </div>
              <div class="form-item form-type-select">
               <label for="passholder_country_select_2_4">
                <span>
                 세 번째 국가를 선택하세요
                </span>
               </label>
               <select class="form-select js-ptpform-eurailcountryselector-combobox required forcevalidate" data-country-idx="2" data-errormsg="WRONG" disabled="disabled" id="passholder_country_select_2_4" name="re_passfamily_2_country">
                <option disabled="" selected="" value="">
                 세 번째 국가를 선택하세요
                </option>
                <option value="DE">
                 Germany
                </option>
                <option value="NO">
                 Norway
                </option>
                <option value="FI">
                 Finland
                </option>
                <option value="PT">
                 Portugal
                </option>
                <option value="BG">
                 Bulgaria
                </option>
                <option value="CH">
                 Switzerland
                </option>
                <option value="SIHR">
                 Croatia/Slovenia
                </option>
                <option value="DK">
                 Denmark
                </option>
                <option value="GR">
                 Greece
                </option>
                <option value="IT">
                 Italy
                </option>
                <option value="FR">
                 France
                </option>
                <option value="HU">
                 Hungary
                </option>
                <option value="ES">
                 Spain
                </option>
                <option value="SE">
                 Sweden
                </option>
                <option value="AT">
                 Austria
                </option>
                <option value="BX">
                 Benelux
                </option>
                <option value="CZ">
                 Czech Republic
                </option>
                <option value="SK">
                 Slovakia[pkeyx][mkey1]<li>[keywordx]</li>
                </option>
                <option value="IE">
                 Ireland
                </option>
                <option value="MERS">
                 Montenegro/Serbia
                </option>
                <option value="RO">
                 Romania
                </option>
                <option value="TR">
                 Turkey
                </option>
               </select>
              </div>
              <div class="form-item form-type-select">
               <label for="passholder_country_select_3_4">
                <span>
                 네 번째 국가를 선택하세요
                </span>
               </label>
               <select class="form-select js-ptpform-eurailcountryselector-combobox required forcevalidate" data-country-idx="3" data-errormsg="WRONG" disabled="disabled" id="passholder_country_select_3_4" name="re_passfamily_3_country">
                <option disabled="" selected="" value="">
                 네 번째 국가를 선택하세요
                </option>
                <option value="DE">
                 Germany
                </option>
                <option value="NO">
                 Norway
                </option>
                <option value="FI">
                 Finland
                </option>
                <option value="PT">
                 Portugal
                </option>
                <option value="BG">
                 Bulgaria
                </option>
                <option value="CH">
                 Switzerland
                </option>
                <option value="SIHR">
                 Croatia/Slovenia
                </option>
                <option value="DK">
                 Denmark
                </option>
                <option value="GR">
                 Greece
                </option>
                <option value="IT">
                 Italy
                </option>
                <option value="FR">
                 France
                </option>
                <option value="HU">
                 Hungary
                </option>
                <option value="ES">
                 Spain
                </option>
                <option value="SE">
                 Sweden
                </option>
                <option value="AT">
                 Austria
                </option>
                <option value="BX">
                 Benelux
                </option>
                <option value="CZ">
                 Czech Republic
                </option>
                <option value="SK">
                 Slovakia
                </option>
                <option value="IE">
                 Ireland
                </option>
                <option value="MERS">
                 Montenegro/Serbia
                </option>
                <option value="RO">
                 Romania
                </option>
                <option value="TR">
                 Turkey
                </option>
               </select>
              </div>
             </div>
             <div class="form-action">
              <span class="js-ptpform-passselector-close popup-submit">
               ok
              </span>
             </div>
            </div>
           </div>
           <div class="message info-message js-search-limit" style="display:none;">
            Searches are limited to 5 trips. For additional trips, search again.
           </div>
           <div class="form-actions">
            <button class="js-ptpform-submit form-submit btn-cta" type="button">
             <span>
              검색하기
             </span>
            </button>
           </div>
           <ul style="display:none;">
            <li class="js-recentsearchitem">
             <a>
              <span class="ptpsearch-recent-cities-label">
               Recent search
              </span>
              <span class="ptpsearch-recent-cities-od">
              </span>
              <span class="ptpsearch-recent-cities-dates">
               <span class="ptpsearch-recent-cities-dates-departure">
               </span>
               <span class="ptpsearch-recent-cities-dates-return-container" style="display:none;">
                -
                <span class="ptpsearch-recent-cities-dates-return">
                </span>
               </span>
              </span>
              <span class="ptpsearch-recent-cities-travellers">
              </span>
             </a>
            </li>
           </ul>
           <div class="js-ptpsearch-clone" style="display:none;">
           </div>
          </div>
         </div>
        </form>
       </div>
      </div>
     </div>
    </div>
   </div>
   <div class="ui-content">
    <div class="float_ul boxpurple clearfix clearboth nomargin">
     <nav>
      <div id="top_product_menu">
       <ul>
        <li>
         [ahref]
         
        </li>
        <li>
         [linkx]
         
        </li>
        <li class="no_pipe">
         [linkx]
         
        </li>
        <li class="no_pipe">
         [linkx]
         
        </li>
        <li class="no_pipe back_to_top invisible">
         <div class="hidden sprite sprite-go-top">
         </div>
        </li>
       </ul>
      </div>
     </nav>
    </div>
    <div class="main-block" id="overview">
     <section class="box-min" id="intro">
      <div>
       <span class="h2 inter">
        해당 여정에 대하여
       </span>
       일반적으로 파리와(과) 암스테르담을(를) 여행하는데 걸리는 시간은  4h09분 입니다. 가장 빠른 루트로는  3h17분이 걸립니다. 파리을(를) 출발하는 첫 차는 06:01에 있으며, 막차는 19:25에 떠납니다. 파리와(과) 암스테르담 사이에 하루 평균 27대의 열차가 28분 간격으로 운행됩니다.
       <ul class="bullet">
        <li>
         출발 역 : Paris nord (112, rue de Maubeuge  75010 Paris)
        </li>
        <li>
         도착 역 : Amsterdam cs (Stationsplein 15  1012 AB Amsterdam)
        </li>
       </ul>
      </div>
     </section>
     <section class="inter_title box-min" id="about_trip">
      <div>
       <span class="h2 inter">
        해당 여정에 대하여
       </span>
       <p>
        <strong>
         파리(Paris)에서 암스테르담(Amsterdam)으로 이동하는 기차여행
        </strong>
       </p>
       <p>
        빨간 초고속 열차 탈리스(Thalys)는 프랑스와 네덜란드, 벨기에 및 독일로 운행되며 파리-암스테르담 노선 운행 소요 시간은 대략 3시간입니다. 탈리스 열차 탑승객은 2 가지 서비스 옵션 중 하나를 선택할 수 있습니다. 컴포트 1(Comfort 1) 탑승객은 자리에서 식사 서비스를 받을 수 있으며 컴포트 2(Comfort 2) 탑승객은 가벼운 간식이 준비된 뷔페 바를 이용할 수 있습니다. 열차 내에서는 Wi-Fi 서비스가 제공되며, 이용 시2등석 탑승객에게는 별도의 요금이 부과됩니다.
       </p>
       <p>
        파리 북역은 시내 중심가에 위치하며 대중 교통으로 편리하게 연결되어 있습니다. 파리에서 탈리스에 탑승하면 운하의 도시로 여행이 시작됩니다. 도착역인 암스테르담 역은 아이 강둑에 있으며 시내 중심지는 역에서 도보로 갈 수 있는 거리에 위치합니다. 대부분의 중요 호텔도 걸어 갈 수 있는 거리에 있지만, 페리, 트램, 버스, 자전거, 택시 등도 역 바로 근처에서 이용할 수 있습니다. 공항으로 가는 교통편도 정기적으로 운행되고 있습니다.
       </p>
       <p>
        파리와 암스테르담을 여행한다면 구간 티켓이 최고의 선택입니다. 하지만 네덜란드 외 다른 국가 여행을 계획하고 있다면 선택의 폭이 넓어집니다. 유레일 베네룩스-프랑스 패스를 소지한 탑승객은 프랑스와 벨기에, 네덜란드, 룩셈부르크에서 무제한으로 열차 여행이 가능합니다.
       </p>
       <p>
        <strong>
         암스테르담을 방문한 후 기차를 타고 또 다른 인기 도시로 이동하기
        </strong>
       </p>
       <p>
        암스테르담은 모든 여행자들이 사랑하는 도시입니다. 문화를 사랑하는 여행자가 반색할 반 고흐 미술관과 레이크스 미술관이 암스테르담에 있습니다. 역사를 사랑하는 여행자에게는 안네 프랑크의 집, 운하에서의 보트 여행이 기다리고 있습니다. 쇼핑을 원하는 여행자라면 흥미로울 거리도 많고 여행을 시작하기 전에 휴식을 취하고 싶은 여행자를 위해 유쾌한 잡담을 나눌 수 있는 카페와 레스토랑이 즐비합니다. 암스테르담에서는 다른 유럽 지역으로 가는 철도 노선을 쉽게 이용할 수 있습니다. 탈리스 열차를 타고 독일이나 브뤼셀을 여행하는 것도 좋고, 자전거로 네덜란드의 작은 마을을 돌아보는 것도 좋습니다.
       </p>
      </div>
     </section>
     <section class="inter_title" id="timetables">
      <h2 class="inter">
       <b>[mkey1][symbolx][pkeyx][symbolx][keyword1][bracketl1][keywordx][bracketr1][symbolx][bracketl2][keywordx][bracketr2][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx]</b>
      </h2>
     </section>
     <br class="clearboth"/>
     <section class="boxgrey" id="practical_informations">
      <h3 class="inter">
       <b>[mkey1][symbolx][pkeyx][symbolx][keyword1][bracketl1][keywordx][bracketr1][symbolx][bracketl2][keywordx][bracketr2][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx]</b>
      </h3>
      <div class="related_objects_four">
       <ul class="container_tabs themes_full dtable" rel="popular">
        <li class="rtab purple active " id="tab11">
         [ahref]
         
        </li>
        <li class="rtab purple " id="tab12">
         [linkx]
         
        </li>
       </ul>
       <br class="clearboth"/>
       <div class=" themes_container themes_container_full edito_slider" id="popular">
        <div class="rtab_content active lazy" id="rtab_content_tab11">
         <div class="ajaxbloc" data-ajax-env="111bc06b055df883055baa7595192198" data-origin="/train-tickets/journeys/article/paris-amsterdam">
          [linkx]
          
          <div class="main_container_box edito_slider">
           <div class="clearfix clearboth full_container theme_container" id="_related_objbest_passes">
            <ul>
             <li>
              [linkx]
              
             </li>
            </ul>
           </div>
          </div>
         </div>
        </div>
        <div class="rtab_content lazy" id="rtab_content_tab12">
         <div class="ajaxbloc" data-ajax-env="badb4f87a1afeb063b00d04fa27d6814" data-origin="/train-tickets/journeys/article/paris-amsterdam">
          [ahref]
          
          <div class="main_container_box edito_slider">
           <div class="clearfix clearboth full_container theme_container" id="_related_objbest_passes">
            <ul>
             <li>
              [ahref]
              
             </li>
             <li>
              [linkx]
              
             </li>
            </ul>
           </div>
          </div>
         </div>
        </div>
       </div>
      </div>
     </section>
     <section class="inter_title box-min" id="reviews">
      <h2 class="inter">
       [mkey1][symbolx][pkeyx][symbolx][keyword1][bracketl1][keywordx][bracketr1][symbolx][bracketl2][keywordx][bracketr2][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx]
      </h2>
      <div class="ajaxbloc" data-ajax-env="74b07eef7aae60b17e1bafcc380e315d" data-origin="/train-tickets/journeys/article/paris-amsterdam">
       <h3 class="inter">
        [mkey1][symbolx][pkeyx][symbolx][keyword1][bracketl1][keywordx][bracketr1][symbolx][bracketl2][keywordx][bracketr2][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx]
       </h3>
       <ul id="notation_main">
        <li class="col-pad">
         <div itemprop="review" itemscope="" itemtype="http://schema.org/Review">
          <div class="col30 f-right">
           <div class="col49 f-left text-right col-pad">
            경제성
           </div>
           <div class=" col36 f-right">
            <span class="dblock footer_logo sprite-note4">
            </span>
           </div>
           <div class="col49 f-left text-right col-pad">
            편의성
           </div>
           <div class=" col36 f-right">
            <span class="dblock footer_logo sprite-note4">
            </span>
           </div>
          </div>
          <div class="f-left col65">
           <div class="f-left">
           </div>
           <span class="subtitle nomargin">
            Nice trip
           </span>
           |
           <span class="bold itinerary_travel " itemprop="author" itemscope="" itemtype="http://schema.org/Person">
            <span itemprop="name">
             Chungkook k.
            </span>
            |
           </span>
           <span content="2019-04-02" itemprop="datePublished">
            2 April 2019
           </span>
           <br/>
           <span class="expandable-text review-text-content-26196532" id="expandable-more-26196532" itemprop="reviewBody" rel="100">
            "Everything is Ok with me !

But it is better for customers if each carriage has the correct number.
			"
           </span>
           <div class="expandable-more-26196532 review-text hidden pointer text-right">
            <span class="text-more m-auto blue underline" rel="expandable-more-26196532">
             더 보기
            </span>
            <span class="hidden text-less m-auto blue underline" rel="expandable-more-26196532">
             view less
            </span>
           </div>
          </div>
          <br class="clearboth"/>
         </div>
        </li>
        <li class="col-pad">
         <div itemprop="review" itemscope="" itemtype="http://schema.org/Review">
          <div class="col30 f-right">
           <div class="col49 f-left text-right col-pad">
            경제성
           </div>
           <div class=" col36 f-right">
            <span class="dblock footer_logo sprite-note5">
            </span>
           </div>
           <div class="col49 f-left text-right col-pad">
            편의성
           </div>
           <div class=" col36 f-right">
            <span class="dblock footer_logo sprite-note5">
            </span>
           </div>
          </div>
          <div class="f-left col65">
           <div class="f-left">
           </div>
           <span class="subtitle nomargin">
            기차여행
           </span>
           |
           <span class="bold itinerary_travel " itemprop="author" itemscope="" itemtype="http://schema.org/Person">
            <span itemprop="name">
             Seung Beom l.
            </span>
            |
           </span>
           <span content="2019-04-02" itemprop="datePublished">
            2 April 2019
           </span>
           <br/>
           <span class="expandable-text review-text-content-28745899" id="expandable-more-28745899" itemprop="reviewBody" rel="100">
            "최고의 편안함으로 여행을.. ..
			"
           </span>
           <div class="expandable-more-28745899 review-text hidden pointer text-right">
            <span class="text-more m-auto blue underline" rel="expandable-more-28745899">
             더 보기
            </span>
            <span class="hidden text-less m-auto blue underline" rel="expandable-more-28745899">
             view less
            </span>
           </div>
          </div>
          <br class="clearboth"/>
         </div>
        </li>
       </ul>
      </div>
     </section>
     <section class="box-min">
      <div class="bottom-pad col80 m-auto top-pad border-top">
       [linkx]<li>[keywordx]</li>[mkey1][ahref]
      </div>
     </section>
     <section class="boxgrey" id="related_products">
      <div class="related">
       <h2 class="inter a-color">
        [mkey1][symbolx][pkeyx][symbolx][keyword1][bracketl1][keywordx][bracketr1][symbolx][bracketl2][keywordx][bracketr2][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx]
       </h2>
       <h3 class="inter blue">
        <b>[mkey1][symbolx][pkeyx][symbolx][keyword1][bracketl1][keywordx][bracketr1][symbolx][bracketl2][keywordx][bracketr2][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx]</b>
       </h3>
       <div class="ajaxbloc" data-ajax-env="ef012ffcd7eef0a03a48bef4e8c2c7ef" data-origin="/train-tickets/journeys/article/paris-amsterdam">
        <a id="pagination_for_related" name="pagination_for_related">
        </a>
        <div id="container_45">
        </div>
        <div class="main_container_box " id="main_container_45">
         <div class="related_objrelated clearfix clearboth">
          <ul>
           <li class="related_objects">
            <li>[keywordx]</li><li>[keywordx]</li><li>[ahref]</li>[ahref]
           </li>
           <li class="related_objects">
            <a class="noborder" href="/journeys/article/dusseldorf-paris" title="뒤셀도르프(Düsseldorf) - 파리(Paris)">
             <div class="slider_desc">
              <p class=" sh_overlay_font">
               뒤셀도르프(Düsseldorf) - 파리(Paris)
              </p>
              <span class="btn f-right">
               <span>
                더 알아보기
               </span>
              </span>
              <br class="clearboth"/>
             </div>
            </a>
           </li>
           <li class="related_objects">
            [ahref]
             [keywordx]<li>[pkeyx]</li><li>[linkx]</li>
            
           </li>
          </ul>
         </div>
         <div class="pagination">
          [linkx]
          
         </div>
        </div>
       </div>
      </div>
     </section>
    </div>
   </div>
   <span class="tracking hidden">
    Paris - Amsterdam
   </span>
  </div>
 </article>
 <div class="center clearfix boxblue" id="section_newsletter">
  <form action="/servlet/servlet.WebToLead?encoding=UTF-8" class="formRailEurope" id="formRailEurope" method="POST" onsubmit="javascript:return false;">
   <h3>
    [mkey1][symbolx][pkeyx][symbolx][keyword1][bracketl1][keywordx][bracketr1][symbolx][bracketl2][keywordx][bracketr2][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx]
   </h3>
  </form>
  <br class="clearboth"/>
  <div class="social_choice clearfix">
   SNS를 통해 혜택 정보 받기
  </div>
  <div class="social-icons">
   <div class="footer_logo sprite-widget-naver">
    [linkx]
    
   </div>
   <div class="footer_logo sprite-widget-facebook">
    [linkx]
    
   </div>
   <div class="footer_logo sprite-widget-instagram">
    [ahref]
     [linkx][ahref]<li>[ahref]</li>
    
   </div>
   <div class="footer_logo sprite-widget-twitter">
    [linkx]
    
   </div>
   <div class="footer_logo sprite-widget-youtube">
    <a class="noborder" href="/raileurope" rel="noopener" target="_BLANK">
    </a>
   </div>
   <div class="footer_logo sprite-widget-pinterest">
    [linkx]
    
   </div>
   <div class="footer_logo sprite-widget-blog">
    [linkx]
    
   </div>
   <div class="footer_logo sprite-widget-linkedin">
    <a class="noborder" href="/company/rail--europe--inc/" rel="noopener" target="_BLANK">
    </a>
   </div>
  </div>
  <div class="social_choice clearfix newsletter-GDPR-text">
  </div>
 </div>
 <footer id="footer">
  <div id="bottom_blocks">
   <div class="vhidden f-left transparent-black" id="gotop">
    <a href="r">
     <span class="footer_logo sprite-go-top">
     </span>
     상단으로
    </a>
   </div>
  </div>
  <br class="clearboth"/>
  <div class="partners_middle">
   <div class=" center">
    <div class="items">
     <div class="sprite-eurostar_01">
      [ahref]
      
     </div>
     <div class="sprite-TGV">
      [ahref]
      
     </div>
     <div class="sprite-thalys">
      [ahref]
      
     </div>
     <div class="sprite-tgv_lyria">
      [linkx]
      
     </div>
     <div class="sprite-renfe_2">
      [linkx]
      
     </div>
     <div class="sprite-italo">
      [ahref]
      
     </div>
     <div class="sprite-nationalRail">
      <a class="noborder" href="/%EC%98%81%EA%B5%AD-%EC%97%B4%EC%B0%A8" title="영국 열차">
      </a>
     </div>
     <br class="clearboth"/>
     <div class="sprite-trenitalia_2">
      [linkx]
      
     </div>
     <div class="sprite-db_bahn">
      [ahref]<li>[keywordx]</li><li>[keywordx]</li>
     </div>
     <div class="sprite-sncf">
      <a class="noborder" href="/train-companies/%ED%94%84%EB%9E%91%EC%8A%A4 : SNCF" title="프랑스 : SNCF ">
      </a>
     </div>
     <div class="sprite-sts">
      [ahref]
      
     </div>
     <div class="sprite-logo_SBB">
      [ahref]
      
     </div>
     <div class="sprite-britrail">
      [linkx]
      
     </div>
     <div class="sprite-eurail">
      [linkx]
      
     </div>
    </div>
   </div>
  </div>
  <div id="footer-top">
   <div class="warning" id="warning">
   </div>
   <div class="clearfix" id="site-map">
    <div class="col30 f-left">
     <p>
     </p>
     <p class="top-marg">
      <div class="flagsCont1 f-left" id="select_country_links">
       <span aria-activedescendant="ui-id-19" aria-autocomplete="list" aria-disabled="false" aria-expanded="true" aria-haspopup="true" aria-labelledby="ui-id-79" aria-owns="lang-form-menu" class="ui-selectmenu-button ui-widget ui-state-default ui-corner-top ui-corner-bottom" id="lang-form-button-link" role="combobox" style="width: 260px;" tabindex="0">
        <span class="ui-icon ui-icon-triangle-1-s">
        </span>
        <span class="ui-selectmenu-text">
         대한민국
        </span>
       </span>
       <div class="ui-selectmenu-menu ui-front mCustomScrollbar _select_country_links">
        <div id="select_country_links">
         <div class="mCSB_container" dir="ltr" id="select_country_links_container" style="position:relative; top:0; left:0;">
          <ul aria-activedescendant="ui-id-19" aria-disabled="false" aria-hidden="false" aria-labelledby="lang-form-button-link" class="ui-menu ui-widget ui-widget-content ui-corner-bottom .mCustomScrollbar()" id="lang-form-menu-links" role="listbox" style="width: 279px;" tabindex="0">
           <li class="ui-menu-item" role="option">
            [ahref]
            
           </li>
           <li class="ui-menu-item" role="option">
            [linkx]
            
           </li>
           <li class="ui-menu-item" role="option">
            <a class="noborder" href="a" title="나미비아">
             나미비아
            </a>
           </li>
           <li class="ui-menu-item" role="option">
            [ahref]
            
           </li>
           <li class="ui-menu-item" role="option">
            [ahref]
            
           </li>
           <li class="ui-menu-item" role="option">
            [linkx]
            
           </li>
           <li class="ui-menu-item" role="option">
            [linkx]
            
           </li>
           <li class="ui-menu-item" role="option">
            [ahref]
            
           </li>
           <li class="ui-menu-item" role="option">
            [ahref]
            
           </li>
           <li class="ui-menu-item" role="option">
            <a class="noborder" href="u" title="러시아 연방">
             러시아 연방
            </a>
           </li>
           <li class="ui-menu-item" role="option">
            [linkx]
            
           </li>
           <li class="ui-menu-item" role="option">
            [linkx]
            
           </li>
           <li class="ui-menu-item" role="option">
            [linkx]
            
           </li>
           <li class="ui-menu-item" role="option">
            <a class="noborder" href="m" title="말레이시아">
             말레이시아
            </a>
           </li>
           <li class="ui-menu-item" role="option">
            <a class="noborder" href="x" title="멕시코">
             멕시코
            </a>
           </li>
           <li class="ui-menu-item" role="option">
            [linkx]
            
           </li>
           <li class="ui-menu-item" role="option">
            [ahref]
            
           </li>
           <li class="ui-menu-item" role="option">
            [linkx]
            
           </li>
           <li class="ui-menu-item" role="option">
            [ahref]
            
           </li>
           <li class="ui-menu-item" role="option">
            [ahref]
            
           </li>
           <li class="ui-menu-item" role="option">
            <a class="noborder" href="f" title="벨기에">
             벨기에
            </a>
           </li>
           <li class="ui-menu-item" role="option">
            <a class="noborder" href="a" title="보츠와나">
             보츠와나
            </a>
           </li>
           <li class="ui-menu-item" role="option">
            [linkx]
            
           </li>
           <li class="ui-menu-item" role="option">
            [ahref]
            
           </li>
           <li class="ui-menu-item" role="option">
            [ahref]
            
           </li>
           <li class="ui-menu-item" role="option">
            [ahref]
            
           </li>
           <li class="ui-menu-item" role="option">
            [ahref]
            
           </li>
           <li class="ui-menu-item" role="option">
            [linkx]
            
           </li>
           <li class="ui-menu-item" role="option">
            [ahref]
            
           </li>
           <li class="ui-menu-item" role="option">
            <a class="noborder" href="g" title="싱가포르">
             싱가포르
            </a>
           </li>
           <li class="ui-menu-item" role="option">
            [ahref]
            
           </li>
           <li class="ui-menu-item" role="option">
            [linkx]
            
           </li>
           <li class="ui-menu-item" role="option">
            [ahref]
            
           </li>
           <li class="ui-menu-item" role="option">
            [ahref]
            
           </li>
           <li class="ui-menu-item" role="option">
            [linkx]
            
           </li>
           <li class="ui-menu-item" role="option">
            [ahref]
            
           </li>
           <li class="ui-menu-item" role="option">
            [ahref]
            
           </li>
           <li class="ui-menu-item" role="option">
            [ahref]
            
           </li>
           <li class="ui-menu-item" role="option">
            [linkx]
            
           </li>
           <li class="ui-menu-item" role="option">
            [linkx]
            
           </li>
           <li class="ui-menu-item" role="option">
            [linkx]
            
           </li>
           <li class="ui-menu-item" role="option">
            [ahref]
            
           </li>
           <li class="ui-menu-item" role="option">
            [ahref]
            
           </li>
           <li class="ui-menu-item" role="option">
            <a class="noborder" href="f" title="이탈리아">
             이탈리아
            </a>
           </li>
           <li class="ui-menu-item" role="option">
            [ahref]
            
           </li>
           <li class="ui-menu-item" role="option">
            <li>[keywordx]</li>[ahref][pkeyx]
           </li>
           <li class="ui-menu-item" role="option">
            [ahref]
            
           </li>
           <li class="ui-menu-item" role="option">
            [ahref]
            
           </li>
           <li class="ui-menu-item" role="option">
            [ahref]
            
           </li>
           <li class="ui-menu-item" role="option">
            <a class="noborder" href="n" title="중국">
             중국
            </a>
           </li>
           <li class="ui-menu-item" role="option">
            [linkx]
            
           </li>
           <li class="ui-menu-item" role="option">
            [ahref]
            
           </li>
           <li class="ui-menu-item" role="option">
            <a class="noborder" href="m" title="카타르">
             카타르
            </a>
           </li>
           <li class="ui-menu-item" role="option">
            <a class="noborder" href="m" title="캄보디아">
             캄보디아
            </a>
           </li>
           <li class="ui-menu-item" role="option">
            <a class="noborder" href="a" title="캐나다">
             캐나다
            </a>
           </li>
           <li class="ui-menu-item" role="option">
            <a class="noborder" href="o" title="콜롬비아">
             콜롬비아
            </a>
           </li>
           <li class="ui-menu-item" role="option">
            [linkx]
            
           </li>
           <li class="ui-menu-item" role="option">
            [ahref]
            
           </li>
           <li class="ui-menu-item" role="option">
            <a class="noborder" href="w" title="타이완">
             타이완
            </a>
           </li>
           <li class="ui-menu-item" role="option">
            [linkx]
            
           </li>
           <li class="ui-menu-item" role="option">
            <a class="noborder" href="e" title="페루">
             페루
            </a>
           </li>
           <li class="ui-menu-item" role="option">
            [pkeyx]<li>[keywordx][symbolx][keywordx][symbolx][bracketl1][keywordx][bracketr1][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx]</li>[ahref]
           </li>
           <li class="ui-menu-item" role="option">
            [ahref]
            
           </li>
           <li class="ui-menu-item" role="option">
            [ahref]
            
           </li>
           <li class="ui-menu-item" role="option">
            [ahref]
            
           </li>
          </ul>
         </div>
        </div>
       </div>
      </div>
     </p>
     <br class="clearboth"/>
     <p>
      <div class="f-left">
       <div class="footer_logo footer_payment_logo sprite-visa" title="Visa">
       </div>
       <div class="footer_logo footer_payment_logo sprite-mastercard" title="Mastercard">
       </div>
       <div class="footer_logo footer_payment_logo sprite-amex" title="Amex">
       </div>
       <div class="footer_logo footer_payment_logo sprite-jcb" title="JCB">
       </div>
       <div class="footer_logo footer_payment_logo sprite-paypal" title="Paypal">
       </div>
      </div>
     </p>
     <br class="clearboth"/>
     <ul class="social-icons top-marg">
      <li>
       <div class="footer_logo sprite-widget-naver">
        [linkx]
        
       </div>
       <div class="footer_logo sprite-widget-facebook">
        [linkx]
        
       </div>
       <div class="footer_logo sprite-widget-instagram">
        [ahref]
        
       </div>
       <div class="footer_logo sprite-widget-twitter">
        [linkx]
        
       </div>
       <div class="footer_logo sprite-widget-youtube">
        [ahref]
        
       </div>
       <div class="footer_logo sprite-widget-pinterest">
        [linkx]
        
       </div>
       <div class="footer_logo sprite-widget-blog">
        [linkx]
        
       </div>
       <div class="footer_logo sprite-widget-linkedin">
        [linkx]
        
       </div>
      </li>
     </ul>
     <br class="clearboth"/>
    </div>
    <div class="col69 f-right">
     <div class="f-left col25">
      <h3>
       [mkey1][symbolx][pkeyx][symbolx][keyword1][bracketl1][keywordx][bracketr1][symbolx][bracketl2][keywordx][bracketr2][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx]
      </h3>
      <ul>
       <li>
        [ahref]
        
       </li>
       <li>
        [linkx]
        
       </li>
       <li>
        [ahref]
        
       </li>
       <li>
        <a href="/" title="개인정보 처리방침">
         <small>
          개인정보 처리방침
         </small>
        </a>
       </li>
      </ul>
     </div>
     <div class="f-left col25">
      <h3>
       <b>[mkey1][symbolx][pkeyx][symbolx][keyword1][bracketl1][keywordx][bracketr1][symbolx][bracketl2][keywordx][bracketr2][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx]</b>
      </h3>
      <ul>
       <li>
        [ahref]
        
       </li>
       <li>
        [linkx]
        
       </li>
       <li>
        <a href="/activities/" title="지역을 탐험하면서 여행을 강화하십시오! 박물관, 관광 투어 등에서 선택하십시오. 국가와 도시를 선택하기 만하면 기다리고있는 모든 것을 볼 수 있습니다.">
         <small>
          파트너
         </small>
        </a>
       </li>
       <li>
        [linkx]
        
       </li>
       <li>
        [linkx]
        
       </li>
       <li>
        [linkx]
        
       </li>
      </ul>
     </div>
     <div class="f-left col25">
      <h3>
       [mkey1][symbolx][pkeyx][symbolx][keyword1][bracketl1][keywordx][bracketr1][symbolx][bracketl2][keywordx][bracketr2][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx]
      </h3>
      <ul>
       <li>
        [linkx]
        
       </li>
       <li>
        <a href="/train-stations/" title="레일유럽 가이드에서 기차역 위치와 지도를 확인할 수 있습니다.">
         <small>
          기차역
         </small>
        </a>
       </li>
       <li>
        [linkx]
        
       </li>
       <li>
        <a href="/city-guides/" title="기차로 갈 수 있는 유럽의 15,000 곳이 넘는 도시와 작은 마을 중 500여 곳에 대한 가이드입니다. 레일유럽과 함께 로마에서 베를린, 헬싱키에서 브라티슬라바까지 유럽 대륙을 누비세요.">
         <small>
          도시 가이드
         </small>
        </a>
       </li>
       <li>
        [linkx]
        
       </li>
       <li>
        [linkx]
        
       </li>
       <li>
        [linkx]
        
       </li>
       <li>
        [ahref]
        
       </li>
       <li>
        [ahref]
        
       </li>
       <li>
        [ahref]
        
       </li>
      </ul>
     </div>
     <div class="f-left col25">
      <h3>
       <b>[mkey1][symbolx][pkeyx][symbolx][keyword1][bracketl1][keywordx][bracketr1][symbolx][bracketl2][keywordx][bracketr2][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx]</b>
      </h3>
      <ul>
       <li>
        <a href="/spip.php?rubrique4" title="자주 물어보는 질문">
         <small>
          자주묻는 질문
         </small>
        </a>
       </li>
       <li>
        [linkx]
        
       </li>
       <li>
        [linkx]
        
       </li>
      </ul>
     </div>
     <br class="clearboth"/>
     <div class="f-left col25">
      <h3>
       [mkey1][symbolx][pkeyx][symbolx][keyword1][bracketl1][keywordx][bracketr1][symbolx][bracketl2][keywordx][bracketr2][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx]
      </h3>
      <div class="footer_logo f-left sprite-widget-appli-large">
       [ahref]
       
      </div>
     </div>
     <div class="f-left col25">
      <h3>
       <b>[mkey1][symbolx][pkeyx][symbolx][keyword1][bracketl1][keywordx][bracketr1][symbolx][bracketl2][keywordx][bracketr2][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx]</b>
      </h3>
      <ul>
       <li>
        [ahref]
        
       </li>
      </ul>
     </div>
     <div class="f-left col25">
      <h3>
       [mkey1][symbolx][pkeyx][symbolx][keyword1][bracketl1][keywordx][bracketr1][symbolx][bracketl2][keywordx][bracketr2][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx]
      </h3>
     </div>
     <div class="f-right col25">
      <h3>
       <b>[mkey1][symbolx][pkeyx][symbolx][keyword1][bracketl1][keywordx][bracketr1][symbolx][bracketl2][keywordx][bracketr2][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx]</b>
      </h3>
      <ul>
       <li>
        [ahref]
        
       </li>
       <li>
        [linkx]
        
       </li>
       <li>
        [linkx]
        
       </li>
      </ul>
     </div>
    </div>
    <br class="clearboth"/>
    <div class="partners_middle center b2b">
     <div class="items">
      <div class="sprite-logo-railteam">
      </div>
      <div class="sprite-logo-nationalrail">
      </div>
      <div class="sprite-logo-ustoa">
      </div>
      <div class="sprite-logo-asta">
      </div>
      <div class="sprite-logo-acta">
      </div>
      <div class="sprite-logo-bsi">
      </div>
     </div>
     <div class="m-auto">
      <div class="footer_logo sprite-logo_globalsign" title="rail-web9 귀하의 정보 TLS 암호화 인증서를 보호">
      </div>
      <div class="footer_logo sprite-Nat-acredited_bleu">
      </div>
      <div class="footer_logo sprite-logo_globalcollect">
       <a class="noborder" href="m" target="_blank" title="rail-web9 글로벌 콜렉트(Global Collect)는 여행 업계에서 통용되는 주요 결제 시스템입니다.">
       </a>
      </div>
      <div class="footer_logo sprite-logo_pci">
       <a class="noborder" href="/cert.php?customerId=x4irdzlmFhnnkhjNVXtmgih5FoIBnG&amp;size=105x54&amp;style=normal" target="_blank" title="This site protected by Trustwave's Trusted Commerce program">
       </a>
      </div>
     </div>
     <span class="grey top-pad top-marg inline-block">
      © 1995 - 2019 Rail Europe
     </span>
    </div>
   </div>
  </div>
  <div class="partners_middle center nomargin">
   <div class="clearfix">
    <b>
     레일유럽 가이드 :
    </b>
    [ahref]
    
    (Japanese) -
    <span>
     <b>
      레일유럽 블로그 :
     </b>
     <a href="m">
      blog.raileurope.com
     </a>
     (English) |
     [ahref]
     
     (Korean)
    </span>
    <br class="clearboth"/>
    <br class="clearboth"/>
   </div>
  </div>
  <noscript>
   <iframe height="0" src="//www.googletagmanager.com/ns.html?id=GTM-542QQV" style="display:none;visibility:hidden" width="0">
   </iframe>
  </noscript>
  <noscript>
   <iframe height="0" src="//www.googletagmanager.com/ns.html?id=GTM-K43D28" style="display:none;visibility:hidden" width="0">
   </iframe>
  </noscript>
 </footer>
 <div class="langcont box" id="langcont">
 </div>
</div>
|<---