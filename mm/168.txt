--->|<!DOCTYPE doctype html>
<html lang="kr">
 <head>
  <meta content="IE=edge,chrome=1" http-equiv="X-UA-Compatible"/>
  <meta content="text/html; charset=utf-8" http-equiv="Content-Type"/>
  <title>
   [mkey1][symbolx][pkey1][symbolx][keyword1][bracketl1][bracketr1][symbolx][bracketl2][siter1][bracketr2][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx]
  </title>
  <meta content="[mkey1][symbolx][pkey1][symbolx][keyword1][bracketl1][bracketr1][symbolx][bracketl2][siter1][bracketr2][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx]" name="description">
   <meta content="[mkey1][symbolx][pkey1][symbolx][keyword1][bracketl1][bracketr1][symbolx][bracketl2][siter1][bracketr2][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx]" name="keywords">
    <meta content="website" property="og:type"/>
    <meta content="[mkey1][symbolx][pkey1][symbolx][keyword1][bracketl1][bracketr1][symbolx][bracketl2][siter1][bracketr2][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx]" property="og:title"/>
    <meta content="[mkey1][symbolx][pkey1][symbolx][keyword1][bracketl1][bracketr1][symbolx][bracketl2][siter1][bracketr2][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx]" property="og:description"/>
    <meta content="[mkey1][symbolx][pkey1][symbolx][keyword1][bracketl1][bracketr1][symbolx][bracketl2][siter1][bracketr2][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx]" property="og:url"/>
    <meta content="https://www.yslbeautykr.com/on/demandware.static/-/Sites-ysl-kr-Library/ko_KR/dw519cc12b/Logo/kakao_meta_logo.jpg" property="og:image"/>
    <meta content="ltotCcbFeBZ1lqRrcRZ6w1wZD2VO0idSQNBCsuVpP20" name="google-site-verification">
    </meta>
   </meta>
  </meta>
 </head>
 <body class="pt_product_details" itemscope="" itemtype="http://schema.org/WebPage">
  <div data-visual-optimizer-accountid="346942" data-visual-optimizer-librarytolerance="2500" data-visual-optimizer-settingstolerance="2000" data-visual-optimizer-useexistingjquery="false" id="visualOptimizer">
  </div>
  <div class="browser_compatibility_alert_wrapper">
   <noscript>
    <div class="browser_compatibility_alert">
     브라우저의 Javascript 기능이 꺼져 있습니다. 이 사이트의 모든 기능을 경험할 수 있도록 Javascript 기능을 켜십시오.
    </div>
   </noscript>
  </div>
  <div class="header_promo content" data-slot-id="header-promo-slot">
   <div class="promo_banner">
    <div style="font-family:'Noto Sans KR', 'Singulier-Regular', sans-serif; background-color: #E71471; ">
     <p>
      <span style="font-size: 12px;">
       <a href="/ko_KR/engraving-service/201811_engraving.html" style="text-decoration: none;">
        <b style="color:white;">
         [무료] 베스트 립 제품 각인 서비스
        </b>
       </a>
      </span>
     </p>
    </div>
    <span class="header_promo_close">
    </span>
   </div>
  </div>
  <div class="topbar">
   <div class="topslots_wrapper">
    <div class="content">
     <div class="header_customer_service js_newsletter_subscribe" data-is-popup="false" id="header_customer_service">
     </div>
    </div>
   </div>
   <div class="navigation_wrapper">
    <div class="content">
     <div class="header-top clearfix">
      <div class="minicart_wrapper">
       <div class="minicart" id="minicart">
        <li>[link]</li>[link]<li>[keywordx][symbolx][keywordx][symbolx][bracketl4][keywordx][bracketr4][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx]</li>[keywordx][symbolx][keywordx][symbolx][bracketl5][keywordx][bracketr5][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx]
       </div>
      </div>
      <div class="class.app.preferences" data-current-position-latitude="22.3833" data-current-position-longitude="114.1833" data-is-loyalty-user="false" data-is-user-authenticated="false" data-is-user-registered="false" data-is-user-subscribed="false" data-is-user-unsubscribed="false" data-loyalty-status-updated="false" data-loyalty-user-data="false" id="appPreferences">
      </div>
      <ul class="account_navigation_list">
       <li class="advantage_list_item">
        <div class="link_wrapper">
         [linkx]
         
        </div>
       </li>
       <li class="account_navigation_list_item account_navigation_login" data-welcomeback="false">
        <div class="link_wrapper">
         [linkx]
         
        </div>
       </li>
      </ul>
      <div class="lpchatheader" id="lpchatheader">
       클릭하여 채팅하기
      </div>
      <ul class="utility_navigation_list">
       <li class="storelocator-li">
        <div class="link_wrapper">
         [ahref]
         
        </div>
       </li>
       <li class="helplink_li">
        <div class="link_wrapper">
         [linkx]
         
        </div>
       </li>
       <li class="newsletter_subscribe">
        <div class="link_wrapper">
         <a class="newsletter_subscribe_link" id="newsletter_subscribe_link" title="이메일 뉴스레터 신청하기">
          이메일 뉴스레터 신청하기
         </a>
        </div>
       </li>
       <li class="header_h1">
        <div class="link_wrapper">
         <h1 class="homepage__title">
          [mkey1][symbolx][pkey1][symbolx][keyword1][bracketl1][bracketr1][symbolx][bracketl2][siter1][bracketr2][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx]
         </h1>
        </div>
       </li>
       <li>
       </li>
      </ul>
     </div>
    </div>
   </div>
  </div>
  <div class="header">
   <div class="content inner_header_content">
    [ahref]
    
   </div>
   <div class="hidden" itemscope="" itemtype="http://schema.org/Store">
    <meta content="입생로랑 뷰티 - 입생로랑 향수, 메이크업, 화장품, 스킨케어 - 공식 온라인몰" itemprop="name">
     <meta content="고객지원실 전화번호" itemprop="telephone">
      <div itemprop="address" itemscope="" itemtype="http://schema.org/PostalAddress">
       <meta content="서울특별시 강남구" itemprop="streetAddress"/>
       <meta content="06164" itemprop="postalCode"/>
       <meta content="영동대로 517 아셈타워 32층" itemprop="addressLocality"/>
      </div>
     </meta>
    </meta>
   </div>
  </div>
  <div class="search_icon_container">
   <span class="icons search_icon">
   </span>
  </div>
  <div class="main_navigation_wrapper">
   <div class="navigation" role="navigation">
    <div class="content clearfix">
     <div class="js_sticky_content">
      <div class="js_sticky_search">
      </div>
     </div>
     <div class="mobile_navigation">
      <h2 class="navigation_header">
       <b>[mkey1][symbolx][pkey1][symbolx][keyword1][bracketl1][bracketr1][symbolx][bracketl2][siter1][bracketr2][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx]</b>
      </h2>
      [ahref]
      
      [ahref]
      
      <div class="search_trigger search_mobile">
       [ahref]
       
      </div>
     </div>
     <div class="mobile_my_account">
      <div class="header_search_mobile search_suggestions_container">
       <form action="/on/demandware.store/Sites-ysl-kr-Site/ko_KR/Search-Show" class="search class.search.form" id="search" method="get" name="simpleSearch" role="search">
        <fieldset>
         <label class="search_label class.search.label" for="q">
          검색
         </label>
         <button class="search_button button class.search.button" type="submit" value="확인">
          확인
         </button>
        </fieldset>
       </form>
      </div>
      <span class="close_responsive_menu">
       닫기
      </span>
     </div>
     <ul class="level_1_list clearfix">
      <li class="level_1_list_item menu_list_item_1 cat_WHAT'S NEW " data-page="WHAT'S NEW">
       [linkx]
       
       <div class="navigation_dropdown">
        <div class="content">
         <ul class="level_2_list menu_list_1">
          <li class="level_2_list_item menu_list_item_1_1 menu_list_item_last cat_Vernis_A_Levres_Water_Stain_2019">
           <a class="level_2_list_item_link level_2 category_link" href="/ko_KR/landing?lpid=Vernis_A_Levres_Water_Stain_2019" title="NEW 베르니 아 레브르 워터 스테인">
            NEW 베르니 아 레브르 워터 스테인
            <span class="mobile_expand">
            </span>
           </a>
           <div class="level_2_list_link_wrapper">
            [ahref]
            
           </div>
          </li>
         </ul>
        </div>
       </div>
      </li>
      <li class="separator">
      </li>
      <li class="level_1_list_item menu_list_item_2 cat_exclusive-offer-shop " data-page="exclusive-offer-shop">
       <a class="level_1_list_item_link category_link exclusive-offer-shop " href="/ko_KR/monthly-benefits/monthlybenefit.html">
        공식몰 혜택
        <span class="mobile_expand">
        </span>
       </a>
       <div class="navigation_dropdown">
        <div class="content">
         <ul class="level_2_list menu_list_2">
          <li class="level_2_list_item menu_list_item_2_1 cat_OnlineExclu_regbenefit">
           [ahref]
           
           <div class="level_2_list_link_wrapper">
            [linkx]
            
           </div>
          </li>
          <li class="level_2_list_item menu_list_item_2_2 cat_OnlineExclu_monthly">
           [ahref]
           
           <div class="level_2_list_link_wrapper">
            [ahref]
            
           </div>
          </li>
          <li class="level_2_list_item menu_list_item_2_3 cat_YSL_GiftGuide">
           <a class="level_2_list_item_link level_2 category_link" href="/ko_KR/ysl-%EC%84%A0%EB%AC%BC-%EA%B0%80%EC%9D%B4%EB%93%9C/YSL_GiftGuide.html" title="YSL 선물 가이드">
            YSL 선물 가이드
            <span class="mobile_expand">
            </span>
           </a>
           <div class="level_2_list_link_wrapper">
            [ahref]
            
           </div>
          </li>
          <li class="level_2_list_item menu_list_item_2_4 menu_list_item_last cat_201811_Engraving_service">
           [ahref]
           
           <div class="level_2_list_link_wrapper">
            [linkx]
            
           </div>
          </li>
         </ul>
         <div class="navigation_slots_wrapper">
          <div class="navigation_slots clearfix">
           <div class="custom_navigation_slot_1 custom_navigation_slot">
            <div class="content_asset asset_1 " data-slot="asset_1">
             <div class="slot-asset">
              <div class="text-wrapper">
               <h3>
                [mkey1][symbolx][pkey1][symbolx][keyword1][bracketl1][bracketr1][symbolx][bracketl2][siter1][bracketr2][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx]
               </h3>
               <p>
                이 달의 특별 선물 안내
                <br/>
               </p>
               [linkx]
               
              </div>
              <div class="image-wrapper">
               <a href="/ko_KR/monthly-benefits/monthlybenefit.html" title="이 달의 특별 선물">
               </a>
              </div>
             </div>
             <span data-tracking-promotion-impression='{"id": "megamenu_push_promotion_02","name" : "OnlineExclu_monthly","creative":"launch_banner", "position":  "slot1"}' style="display:none;">
             </span>
            </div>
           </div>
           <div class="custom_navigation_slot_2 custom_navigation_slot">
            <div class="content_asset asset_1 " data-slot="asset_1">
             <div class="slot-asset">
              <div class="text-wrapper">
               <h3>
                [mkey1][symbolx][pkey1][symbolx][keyword1][bracketl1][bracketr1][symbolx][bracketl2][siter1][bracketr2][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx]
               </h3>
               <p>
                공식 온라인 부티크 한정
                <br/>
                립스틱 이니셜 각인 서비스
               </p>
               [ahref]
               
              </div>
              <div class="image-wrapper">
               [ahref]
               
              </div>
             </div>
             <span data-tracking-promotion-impression='{"id": "megamenu_push_promotion_01","name" : "201811_engraving","creative":"launch_banner", "position":  "slot1"}' style="display:none;">
             </span>
            </div>
           </div>
          </div>
         </div>
        </div>
       </div>
      </li>
      <li class="separator">
      </li>
      <li class="level_1_list_item menu_list_item_3 cat_new " data-page="new">
       [ahref]
       
       <div class="navigation_dropdown">
        <div class="content">
        </div>
       </div>
      </li>
      <li class="separator">
      </li>
      <li class="level_1_list_item menu_list_item_4 cat_best-seller " data-page="best-seller">
       [linkx]
       
       <div class="navigation_dropdown">
        <div class="content">
        </div>
       </div>
      </li>
      <li class="separator">
      </li>
      <li class="level_1_list_item menu_list_item_5 cat_makeup " data-page="makeup">
       <a class="level_1_list_item_link category_link makeup " href="/ko_KR/makeup">
        메이크업
        <span class="mobile_expand">
        </span>
       </a>
       <div class="navigation_dropdown">
        <div class="content">
         <ul class="level_2_list menu_list_5">
          <li class="level_2_list_item menu_list_item_5_1 cat_makeup-complexion">
           [linkx]
           
           <div class="level_2_list_link_wrapper">
            [linkx]
            
           </div>
           <ul class="level_3_list menu_list_5_1">
            <li class="level_3_list_item menu_list_item_5_1_1 cat_makeup-primer">
             [linkx]
             
            </li>
            <li class="level_3_list_item menu_list_item_5_1_2 cat_makeup-cushion">
             [ahref]
             
            </li>
            <li class="level_3_list_item menu_list_item_5_1_3 cat_makeup-foundation">
             [ahref]
             
            </li>
            <li class="level_3_list_item menu_list_item_5_1_4 cat_makeup-concealer">
             [ahref]
             
            </li>
            <li class="level_3_list_item menu_list_item_5_1_5 cat_makeup-powder">
             <a class="level_3_list_item_link category_link" href="/ko_KR/makeup/complextion/compact-powder">
              컴팩트/파우더
             </a>
            </li>
            <li class="level_3_list_item menu_list_item_5_1_6 cat_makeup-blush">
             [linkx]
             
            </li>
            <li class="level_3_list_item menu_list_item_5_1_7 menu_list_item_last cat_makeup-hightlighter">
             <a class="level_3_list_item_link category_link" href="/ko_KR/makeup/complextion/hightlighter">
              하이라이터
             </a>
            </li>
           </ul>
          </li>
          <li class="level_2_list_item menu_list_item_5_2 cat_makeup-lips">
           <a class="level_2_list_item_link level_2 category_link" href="/ko_KR/makeup/lips" title="립">
            립
            <span class="mobile_expand">
            </span>
           </a>
           <div class="level_2_list_link_wrapper">
            [linkx]
            
           </div>
           <ul class="level_3_list menu_list_5_2">
            <li class="level_3_list_item menu_list_item_5_2_1 cat_makeup-lipstick">
             [ahref]
             
            </li>
            <li class="level_3_list_item menu_list_item_5_2_2 cat_makeup-lip-tint">
             [ahref]
             
            </li>
            <li class="level_3_list_item menu_list_item_5_2_3 cat_makeup-lip-gloss">
             [linkx]
             
            </li>
            <li class="level_3_list_item menu_list_item_5_2_4 menu_list_item_last cat_makeup-lip-liner">
             <a class="level_3_list_item_link category_link" href="/ko_KR/makeup/lips/liner">
              립펜슬
             </a>
            </li>
           </ul>
          </li>
          <li class="level_2_list_item menu_list_item_5_3 cat_makeup-eyes">
           [content2[linkx]content3[linkx]content4]
          </li>
          <li class="level_2_list_item menu_list_item_5_4 cat_makeup-nails">
           [linkx]
           
           <div class="level_2_list_link_wrapper">
            <a class="level_2_list_link" href="/ko_KR/makeup/nails" title="네일">
             네일
        전체보기
            </a>
           </div>
           <ul class="level_3_list menu_list_5_4">
            <li class="level_3_list_item menu_list_item_5_4_1 menu_list_item_last cat_nail-lacquer">
             [linkx]
             
            </li>
           </ul>
          </li>
          <li class="level_2_list_item menu_list_item_5_5 menu_list_item_last cat_makeup-accessories">
           [linkx]
           
           <div class="level_2_list_link_wrapper">
            <a class="level_2_list_link" href="/ko_KR/makeup/accessories" title="악세서리">
             악세서리
        전체보기
            </a>
           </div>
           <ul class="level_3_list menu_list_5_5">
            <li class="level_3_list_item menu_list_item_5_5_1 cat_makeup-accessories-brush&amp;applicator">
             [ahref]
             
            </li>
            <li class="level_3_list_item menu_list_item_5_5_2 menu_list_item_last cat_makeup-accessories-etc">
             <a class="level_3_list_item_link category_link" href="/ko_KR/makeup/accessories/etc">
              기타 악세서리
             </a>
            </li>
           </ul>
          </li>
         </ul>
         <div class="navigation_slots_wrapper">
          <div class="navigation_slots clearfix">
           <div class="custom_navigation_slot_1 custom_navigation_slot">
            <div class="content_asset asset_1 " data-slot="asset_1">
             <div class="slot-asset">
              <div class="text-wrapper">
               <h3>
                [mkey1][symbolx][pkey1][symbolx][keyword1][bracketl1][bracketr1][symbolx][bracketl2][siter1][bracketr2][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx]
               </h3>
               <p>
                틴트, 워터에 빠지다
                <br/>
                입생로랑의 틴트 혁명 - 워터 틴트
               </p>
               <a href="/ko_KR/makeup/lip/vernis_a_levres_water_stain/WW-50357YSL.html" title="Vernis A Levres Water Stain 2019">
                자세히 보기
               </a>
              </div>
              <div class="image-wrapper">
               [linkx]
               
              </div>
             </div>
             <span data-tracking-promotion-impression='{"id": "megamenu_push_collection_01","name" : "Fall Look","creative":"launch_banner", "position":  "slot1"}' style="display:none;">
             </span>
            </div>
           </div>
           <div class="custom_navigation_slot_2 custom_navigation_slot">
            <div class="content_asset asset_1 " data-slot="asset_1">
             <div class="slot-asset">
              <div class="text-wrapper">
               <h3>
                [mkey1][symbolx][pkey1][symbolx][keyword1][bracketl1][bracketr1][symbolx][bracketl2][siter1][bracketr2][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx]
               </h3>
               <p>
                매트, 글로시, 샤인, 새틴 - 매혹적인 4가지 텍스처와
                <br/>
                시선을 압도하는 16가지 레드 컬러​
               </p>
               [ahref]
               
              </div>
              <div class="image-wrapper">
               <a href="/ko_KR/makeup/lips" title="NEW" 레드="" 미="" 인데인저="">
               </a>
              </div>
             </div>
             <span data-tracking-promotion-impression='{"id": "megamenu_push_makeup_01","name" : "Touche Eclat Le Cushion","creative":"launch_banner", "position":  "slot1"}' style="display:none;">
             </span>
            </div>
           </div>
          </div>
         </div>
        </div>
       </div>
      </li>
      <li class="separator">
      </li>
      <li class="level_1_list_item menu_list_item_6 cat_skincare " data-page="skincare">
       <a class="level_1_list_item_link category_link skincare " href="/ko_KR/skincare">
        스킨케어
        <span class="mobile_expand">
        </span>
       </a>
       <div class="navigation_dropdown">
        <div class="content">
         <div class="header_menu_info">
          <h3>
           [mkey1][symbolx][pkey1][symbolx][keyword1][bracketl1][bracketr1][symbolx][bracketl2][siter1][bracketr2][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx]
          </h3>
          <p>
           혁신적인 테크놀러지로 피부에 활력을 불어 넣어 자신감 넘치는 아름다운 피부로 가꿔주는 입생로랑 스킨케어 컬렉션
          </p>
          [linkx]
          
         </div>
         <ul class="level_2_list menu_list_6">
          <li class="level_2_list_item menu_list_item_6_1 cat_skincare-category">
           [ahref]
           
           <div class="level_2_list_link_wrapper">
            <a class="level_2_list_link" href="/ko_KR/skincare/category" title="제품 유형별">
             제품 유형별
        전체보기
            </a>
           </div>
           <ul class="level_3_list menu_list_6_1">
            <li class="level_3_list_item menu_list_item_6_1_1 cat_skincare-cleansers-and-toners">
             [ahref]
             
            </li>
            <li class="level_3_list_item menu_list_item_6_1_2 cat_skincare-serums">
             <a class="level_3_list_item_link category_link" href="/ko_KR/skincare/category/serums">
              세럼
             </a>
            </li>
            <li class="level_3_list_item menu_list_item_6_1_3 cat_skincare-emulsion-and-cream">
             [linkx]
             
            </li>
            <li class="level_3_list_item menu_list_item_6_1_4 cat_skincare-eye&amp;lip-care">
             <a class="level_3_list_item_link category_link" href="/ko_KR/%EC%8A%A4%ED%82%A8%EC%BC%80%EC%96%B4/%EC%A0%9C%ED%92%88-%EC%9C%A0%ED%98%95%EB%B3%84/%EC%95%84%EC%9D%B4%2F%EB%A6%BD-%EC%BC%80%EC%96%B4">
              아이/립 케어
             </a>
            </li>
            <li class="level_3_list_item menu_list_item_6_1_5 cat_skincare-uvprotection&amp;base">
             [linkx]
             
            </li>
            <li class="level_3_list_item menu_list_item_6_1_6 cat_skincare-specialists">
             [linkx]
             
            </li>
            <li class="level_3_list_item menu_list_item_6_1_7 menu_list_item_last cat_skincare-makeup-setting-spray">
             <a class="level_3_list_item_link category_link" href="/ko_KR/skincare/category/makeup-setting-spray">
              메이크업 세팅 스프레이
             </a>
            </li>
           </ul>
          </li>
          <li class="level_2_list_item menu_list_item_6_2 cat_skincare-concern">
           [linkx]
           
           <div class="level_2_list_link_wrapper">
            [ahref]
            
           </div>
           <ul class="level_3_list menu_list_6_2">
            <li class="level_3_list_item menu_list_item_6_2_1 cat_skincare-hydration">
             [linkx]
             
            </li>
            <li class="level_3_list_item menu_list_item_6_2_2 cat_skincare-skin&amp;uv-protection">
             <a class="level_3_list_item_link category_link" href="/ko_KR/skincare/concern/skin-uv-protection">
              피부 보호 &amp; 자외선 차단
             </a>
            </li>
            <li class="level_3_list_item menu_list_item_6_2_3 cat_skincare-whitening-brilliant">
             <a class="level_3_list_item_link category_link" href="/ko_KR/skincare/concern/whitening-brilliant">
              화이트닝 &amp; 광채
             </a>
            </li>
            <li class="level_3_list_item menu_list_item_6_2_4 cat_skincare-lines-and-wrinkle">
             [ahref]
             
            </li>
            <li class="level_3_list_item menu_list_item_6_2_5 menu_list_item_last cat_skincare-premiumcare">
             <a class="level_3_list_item_link category_link" href="/ko_KR/skincare/concern/premiumcare">
              프리미엄 스킨케어
             </a>
            </li>
           </ul>
          </li>
          <li class="level_2_list_item menu_list_item_6_3 menu_list_item_last cat_skincare-productline">
           [linkx]
           
           <div class="level_2_list_link_wrapper">
            [linkx]
            
           </div>
           <ul class="level_3_list menu_list_6_3">
            <li class="level_3_list_item menu_list_item_6_3_1 cat_productline-topsecret">
             [linkx]
             
            </li>
            <li class="level_3_list_item menu_list_item_6_3_2 cat_productline-blanc-pur-couture">
             [ahref]
             
            </li>
            <li class="level_3_list_item menu_list_item_6_3_3 cat_productline-forever-youth-liberator">
             [linkx]
             
            </li>
            <li class="level_3_list_item menu_list_item_6_3_4 menu_list_item_last cat_productline-or-rouge">
             <a class="level_3_list_item_link category_link" href="/ko_KR/skincare/productline/or-rouge">
              오 후즈
             </a>
            </li>
           </ul>
          </li>
         </ul>
         <div class="navigation_slots_wrapper">
          <div class="navigation_slots clearfix">
           <div class="custom_navigation_slot_1 custom_navigation_slot">
            <div class="content_asset asset_1 " data-slot="asset_1">
             <div class="slot-asset">
              <div class="text-wrapper">
               <h3>
                [mkey1][symbolx][pkey1][symbolx][keyword1][bracketl1][bracketr1][symbolx][bracketl2][siter1][bracketr2][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx]
               </h3>
               <p>
                결보정 모공 프라이머
               </p>
               <a href="/ko_KR/skincare/top_secrets_instant_matte_pore_refiner/WW-50292YSL.html" title="결보정 모공 프라이머">
                자세히 보기
               </a>
              </div>
              <div class="image-wrapper">
               [linkx]
               
              </div>
             </div>
             <span data-tracking-promotion-impression='{"id": "megamenu_push_skincare_01","name" : "Top secret Moisture Glow","creative":"launch_banner", "position":  "slot1"}' style="display:none;">
             </span>
            </div>
           </div>
           <div class="custom_navigation_slot_2 custom_navigation_slot">
            <div class="content_asset asset_1 " data-slot="asset_1">
             <div class="slot-asset">
              <div class="text-wrapper">
               <h3>
                [mkey1][symbolx][pkey1][symbolx][keyword1][bracketl1][bracketr1][symbolx][bracketl2][siter1][bracketr2][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx]
               </h3>
               <p>
                수분 플럼핑 &amp; 메이크업 밀착 부스팅
                <br/>
                모이스처라이징 로션
               </p>
               [ahref]
               
              </div>
              <div class="image-wrapper">
               [ahref]
               
              </div>
             </div>
             <span data-tracking-promotion-impression='{"id": "megamenu_push_skincare_01","name" : "Top secret Moisture Glow","creative":"launch_banner", "position":  "slot1"}' style="display:none;">
             </span>
            </div>
           </div>
          </div>
         </div>
        </div>
       </div>
      </li>
      <li class="separator">
      </li>
      <li class="level_1_list_item menu_list_item_7 cat_fragrance menu_list_item_last " data-page="fragrance">
       [keywordx][symbolx][keywordx][symbolx][bracketl6][keywordx][bracketr6][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][link][link]<li>[keywordx][symbolx][keywordx][symbolx][bracketl7][keywordx][bracketr7][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx]</li>
      </li>
      <li class="level_1_list_item account_list_wrapper">
       <a class="level_1_list_item_link non_expandable" href="/ko_KR/my-account?returnURL=%2Fko_KR%2Ffragrance%2Fmon_paris_edp%2FWW-41800YSL.html" title="내 계정">
        <span>
         내 계정
        </span>
       </a>
      </li>
      <li class="level_1_list_item mobile_display">
       [ahref]
       
      </li>
     </ul>
     <div class="search_wrapper">
      <div class="header_search search_suggestions_container">
       <form action="/on/demandware.store/Sites-ysl-kr-Site/ko_KR/Search-Show" class="search class.search.form" id="search" method="get" name="simpleSearch" role="search">
        <fieldset>
         <label class="search_label class.search.label" for="q">
          검색
         </label>
         <button class="search_button button class.search.button" type="submit" value="확인">
          확인
         </button>
        </fieldset>
       </form>
      </div>
     </div>
    </div>
   </div>
  </div>
  <div class="first_arrival_slot_promo general_promo hidden">
   <div class="content">
   </div>
  </div>
  <div class="first_arrival_slot_promo newsletter-promo hidden">
   <div class="content">
   </div>
  </div>
  <div class="main fragrance_mon_paris " role="main">
   <div class="content">
    <ul class="breadcrumb t-test1" itemscope="" itemtype="http://schema.org/BreadcrumbList">
     <li class="" itemprop="itemListElement" itemscope="" itemtype="http://schema.org/ListItem">
      [linkx]
      
      <meta content="1" itemprop="position"/>
     </li>
     <li class="" itemprop="itemListElement" itemscope="" itemtype="http://schema.org/ListItem">
      [linkx]
      
      <meta content="2" itemprop="position"/>
     </li>
     <li class="" itemprop="itemListElement" itemscope="" itemtype="http://schema.org/ListItem">
      [linkx]
      
      <meta content="3" itemprop="position"/>
     </li>
     <li class="" itemprop="itemListElement" itemscope="" itemtype="http://schema.org/ListItem">
      <a class="" href="/ko_KR/fragrance/for-her/monparis" itemprop="item">
       <span itemprop="name">
        몽파리
       </span>
      </a>
      <meta content="4" itemprop="position"/>
     </li>
     <li itemprop="name">
      몽 파리 오 드 빠르펭
     </li>
    </ul>
    <div class="pdp_main primary js_pdpMain" id="pdpMain" itemscope="" itemtype="http://schema.org/Product">
     <div class="facebook ">
      <div id="fb-root">
      </div>
     </div>
     <div class="product_sections_navigation desktop_only tablet_only">
      <div class="product_sections">
       <ul class="sections_menu" id="sections_menu">
        <li class="pdp_navigation_item active_item">
         <p class="product_name" itemprop="name">
          [ahref]
          
         </p>
        </li>
        <div class=" content_asset pdp-sticky-navigation ">
         <li class="pdp_navigation_item">
          [linkx]
          
         </li>
         <li class="pdp_navigation_item">
          [ahref]
          
         </li>
         <li class="pdp_navigation_item">
          [ahref]
          
         </li>
        </div>
       </ul>
      </div>
     </div>
     <div class="mobile_content">
      <div class="pdp-loyalty">
       Earn 350pts with this purchase
       <a href="#">
        Learn More
       </a>
      </div>
     </div>
     <div class="section_scroll section_about clearfix has_product_sizes" data-section-label="제품" id="pdp_section_about">
      <div class="pdp_right_column pdp_right_column_top">
       <div class="product_sharing_container desktop_content tablet_content">
        <p class="share_section_title desktop_content tablet_content">
         공유하기
        </p>
        <ul class="product_social_networking">
         <li class="social-share-buttons social_toolbox social_default_style social_toolbox_fix">
          <a class="facebook social-btn-pdt facebook_share new-window" data-provider="facebook" href="/sharer/sharer.php?u=.www.yslbeautykr.com/ko_KR/fragrance/mon_paris_edp/3614270561658.html&amp;title=입생로랑 뷰티의 몽 파리 오 드 빠르펭 고급 제품 옵션&amp;picture=https%3A%2F%2Fwww.yslbeautykr.com%2Fdw%2Fimage%2Fv2%2FAAWH_PRD%2Fon%2Fdemandware.static%2F-%2FSites-ysl-master-catalog%2Fdefault%2Fdw8d18c709%2FFragrance%2FFor%2520Her%2FMon%2520Paris%2520EDP%2F3614270561658_50_mon-paris-eau-de-parfum_Alt1.png%3Fsw%3D400%26sh%3D400%26sm%3Dfit%26q%3D70&amp;description=입생로랑 뷰티 공식 온라인몰에서 몽 파리 오 드 빠르펭 구매 안전한 온라인 결제로 한정판 컬렉션을 만나보세요" target="_blank" title="페이스북에 공유하기">
           <span class="social_icon_facebook">
           </span>
          </a>
          <a class="twitter social-btn-pdt twitter_share new-window" data-provider="twitter" href="/intent/tweet/?url=.www.yslbeautykr.com/ko_KR/fragrance/mon_paris_edp/3614270561658.html&amp;text=%EC%9E%85%EC%83%9D%EB%A1%9C%EB%9E%91%20%EB%B7%B0%ED%8B%B0%20%EA%B3%B5%EC%8B%9D%20%EC%98%A8%EB%9D%BC%EC%9D%B8%EB%AA%B0%EC%97%90%EC%84%9C%20%EB%AA%BD%20%ED%8C%8C%EB%A6%AC%20%EC%98%A4%20%EB%93%9C%20%EB%B9%A0%EB%A5%B4%ED%8E%AD%20%EA%B5%AC%EB%A7%A4%20%EC%95%88%EC%A0%84%ED%95%9C%20%EC%98%A8%EB%9D%BC%EC%9D%B8%20%EA%B2%B0%EC%A0%9C%EB%A1%9C%20%ED%95%9C%EC%A0%95%ED%8C%90%20%EC%BB%AC%EB%A0%89%EC%85%98%EC%9D%84%20%EB%A7%8C%EB%82%98%EB%B3%B4%EC%84%B8%EC%9A%94" target="_blank" title="">
           <span class="social_icon_twitter">
           </span>
          </a>
          [ahref]
          
          <a class="kakaostory social_mobile_display" data-img="https%3A%2F%2Fwww.yslbeautykr.com%2Fdw%2Fimage%2Fv2%2FAAWH_PRD%2Fon%2Fdemandware.static%2F-%2FSites-ysl-master-catalog%2Fdefault%2Fdw8d18c709%2FFragrance%2FFor%2520Her%2FMon%2520Paris%2520EDP%2F3614270561658_50_mon-paris-eau-de-parfum_Alt1.png%3Fsw%3D400%26sh%3D400%26sm%3Dfit%26q%3D70" data-kakao-key="null" data-label="입생로랑 뷰티의 몽 파리 오 드 빠르펭 고급 제품 옵션" data-provider="kakaostory" data-url="https://www.yslbeautykr.com/ko_KR/fragrance/mon_paris_edp/3614270561658.html" title="">
           <span class="social_icon_kakaostory">
           </span>
          </a>
          [ahref]
          
          [linkx]
          
          [linkx]
           [content11[linkx]content12[linkx]content13[linkx]content14[linkx]content15]
          
         </li>
        </ul>
       </div>
       <div class="pdp_top_content_wrapper pdp_right_column_inner">
        <div class="pdp_top_content_wrapper">
         <h1 class="product_name" itemprop="name">
          <b>[mkey1][symbolx][pkey1][symbolx][keyword1][bracketl1][bracketr1][symbolx][bracketl2][siter1][bracketr2][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx]</b>
         </h1>
         <meta content="입생로랑 뷰티" itemprop="brand"/>
         <div class="rating hidden" itemprop="aggregateRating" itemscope="" itemtype="http://schema.org/AggregateRating">
          <meta content="5.0" itemprop="ratingValue"/>
          <meta content="1.0" itemprop="reviewCount"/>
         </div>
         <h2 class="product_subtitle">
          <b>[mkey1][symbolx][pkey1][symbolx][keyword1][bracketl1][bracketr1][symbolx][bracketl2][siter1][bracketr2][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx]</b>
         </h2>
         <div class="pdp_actions_wrapper clearfix">
          <div class="product_rating_wrapper">
           <div class="start">
            <span class="bv-rating " data-ratig="5.0">
             <span class="bv-rating_empty">
              <span class="bv-rating_item">
              </span>
              <span class="bv-rating_item">
              </span>
              <span class="bv-rating_item">
              </span>
              <span class="bv-rating_item">
              </span>
              <span class="bv-rating_item">
              </span>
             </span>
             <span class="bv-rating_value" style="width:100.0%">
              <span class="bv-rating_item">
              </span>
              <span class="bv-rating_item">
              </span>
              <span class="bv-rating_item">
              </span>
              <span class="bv-rating_item">
              </span>
              <span class="bv-rating_item">
              </span>
             </span>
            </span>
           </div>
          </div>
         </div>
        </div>
       </div>
      </div>
      <div class="pdp_left_column">
       <div class="product_image_section clearfix">
        <div class="product_image_container">
         <div class="product_primary_image">
          <meta content="https://www.yslbeautykr.com/dw/image/v2/AAWH_PRD/on/demandware.static/-/Sites-ysl-master-catalog/default/dw8d18c709/Fragrance/For Her/Mon Paris EDP/3614270561658_50_mon-paris-eau-de-parfum_Alt1.jpg?sw=355&amp;sh=785&amp;sm=fit&amp;sfrm=png&amp;q=70" itemprop="image"/>
          [linkx]
          
          <div class="zoom_help_text">
           마우스를 올려 확대/축소
          </div>
         </div>
         <div aria-label="BEST SELLER" class="product_badge productbadge_bestSelling " tabindex="0">
          <span class="">
           BEST SELLER
          </span>
         </div>
         <div class="product_thumbnails" id="thumbnails">
          <p class="product_thumbnails_title">
           대체 제품 보기
          </p>
          <div class="carousel horizontal_carousel" data-slide-width-sample=".slide-width-sample" data-visibleondevices="['desktop','mobile','tablet']" id="thumbnails_carousel">
           <div class="value jcarousel-clip jcarousel-clip-horizontal">
            <ul class="contentcarousel_list">
             <li class="thumb selected">
              [ahref]
              
             </li>
            </ul>
            <div class="slide-width-sample">
            </div>
           </div>
          </div>
         </div>
         <ul class="product_actions product_wishlist">
          <li class="wishlist_add_container ">
           <button class="wishlist_action" data-cm_categoryid="Wishlist" data-cm_elementid="Add to Wishlist" data-product-id="3614270561658" type="submit">
            <span class="add_wishlist_text">
             위시리스트 추가
            </span>
           </button>
          </li>
         </ul>
         [ahref]
         
        </div>
       </div>
      </div>
      <div class="pdp_right_column pdp_right_column_bottom">
       <div class="product_detail pdp_right_column_inner">
        <div class="product_content js_product_content" id="product_content">
         <div class="product-variations colorrounds" data-current='{"size":{"displayName":"Volume","value":"1.6 oz.","displayValue":"50ml"}}' data-product-variant-impressions='{"3614270561665":{"name":"몽 파리 오 드 빠르펭","id":"3614270561665","brand":"YSL","category":"몽파리","variant":"women' fragrances","dimension35":"1.0="" fragrances","dimension35":"1.6="" fragrances","dimension35":"3.0="" oz.","dimension36":"","dimension37":"","dimension38":0,"dimension40":"","dimension39":"in="" s="" stock","price":148000,"dimension152":148000}}'="" stock","price":214000,"dimension152":214000},"3614270561658":{"name":"몽="" stock","price":95000,"dimension152":95000},"3614270561634":{"name":"몽="" 드="" 빠르펭","id":"3614270561634","brand":"ysl","category":"몽파리","variant":"women's="" 빠르펭","id":"3614270561658","brand":"ysl","category":"몽파리","variant":"women's="" 오="" 파리="">
          <ul>
           <li class="swatch_wrapper variant_dropdown">
            <div class="carousel horizontal_carousel swatch_carousel " data-pagination-enabled="true" data-show-pagination-content="true" data-visibleondevices="['desktop','mobile','tablet']">
             <div class="value jcarousel-clip jcarousel-clip-horizontal sizes-carousel">
              <ul class="js_swatches size contentcarousel_list">
               <li class="selectboxit-option" data-pricemoney="95,000원">
                [ahref]
                
               </li>
               <li class="selectboxit-option selectboxit-selected selected" data-pricemoney="148,000원">
                [ahref]
                
               </li>
               <li class="selectboxit-option" data-pricemoney="214,000원">
                [linkx]
                
               </li>
              </ul>
             </div>
            </div>
           </li>
          </ul>
         </div>
         <div class="color_selectbox_wrapper">
         </div>
         <div class="product_tab_shades_left" id="product_shades_colorchangeimg">
         </div>
         <div class="product_add_to_cart" itemprop="offers" itemscope="" itemtype="http://schema.org/Offer">
          <form action="/on/demandware.store/Sites-ysl-kr-Site/ko_KR/YSLProduct-AddToCartForm/C1113083353" class="pdpForm product_avaliable js_addtocartform" data-engraving-action="/on/demandware.store/Sites-ysl-kr-Site/ko_KR/Engraving-AddMessages" id="dwfrm_product_addtocart_d0vgydwnxqcb" method="post">
           <fieldset class="pdp_form_fieldset">
            <div class="product_info_wrapper">
             <div class="sticky_product_info_wrapper left_column sticky_add_to_cart">
              <div class="sticky_product_image left_column">
              </div>
              <div class="sticky_product_info left_column">
               <h1 class="product_name" itemprop="name">
                <b>[mkey1][symbolx][pkey1][symbolx][keyword1][bracketl1][bracketr1][symbolx][bracketl2][siter1][bracketr2][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx]</b>
               </h1>
               <meta content="입생로랑 뷰티" itemprop="brand"/>
               <div class="rating hidden" itemprop="aggregateRating" itemscope="" itemtype="http://schema.org/AggregateRating">
                <meta content="5.0" itemprop="ratingValue"/>
                <meta content="1.0" itemprop="reviewCount"/>
               </div>
               <h2 class="product_subtitle">
                [mkey1][symbolx][pkey1][symbolx][keyword1][bracketl1][bracketr1][symbolx][bracketl2][siter1][bracketr2][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx]
               </h2>
              </div>
             </div>
             <div class="from_row pdp_search_wrapper clearfix sticky_add_to_cart">
              <div class="product-variations colorrounds" data-current='{"size":{"displayName":"Volume","value":"1.6 oz.","displayValue":"50ml"}}' data-product-variant-impressions='{"3614270561665":{"name":"몽 파리 오 드 빠르펭","id":"3614270561665","brand":"YSL","category":"몽파리","variant":"women' fragrances","dimension35":"1.0="" fragrances","dimension35":"1.6="" fragrances","dimension35":"3.0="" oz.","dimension36":"","dimension37":"","dimension38":0,"dimension40":"","dimension39":"in="" s="" stock","price":148000,"dimension152":148000}}'="" stock","price":214000,"dimension152":214000},"3614270561658":{"name":"몽="" stock","price":95000,"dimension152":95000},"3614270561634":{"name":"몽="" 드="" 빠르펭","id":"3614270561634","brand":"ysl","category":"몽파리","variant":"women's="" 빠르펭","id":"3614270561658","brand":"ysl","category":"몽파리","variant":"women's="" 오="" 파리="">
               <ul>
                <li class="attribute variant_dropdown">
                 <label class="label" for="va-size">
                  Volume:
                 </label>
                 <select aria-labelledby="va-size" class="variation-select" id="va-size" name="dwvar_WW-41800YSL_size">
                  <option data-pid="3614270561665" data-pricemoney="₩95000.00" data-pricevalue="95000.0" value="https://www.yslbeautykr.com/on/demandware.store/Sites-ysl-kr-Site/ko_KR/Product-Variation?pid=WW-41800YSL&amp;dwvar_WW-41800YSL_size=1%2e0%20oz%2e&amp;source=productdetail">
                   30ml
                  </option>
                  <option data-pid="3614270561658" data-pricemoney="₩148000.00" data-pricevalue="148000.0" selected="selected" value="https://www.yslbeautykr.com/on/demandware.store/Sites-ysl-kr-Site/ko_KR/Product-Variation?pid=WW-41800YSL&amp;dwvar_WW-41800YSL_size=&amp;source=productdetail">
                   50ml
                  </option>
                  <option data-pid="3614270561634" data-pricemoney="₩214000.00" data-pricevalue="214000.0" value="https://www.yslbeautykr.com/on/demandware.store/Sites-ysl-kr-Site/ko_KR/Product-Variation?pid=WW-41800YSL&amp;dwvar_WW-41800YSL_size=3%2e0%20oz%2e&amp;source=productdetail">
                   90ml
                  </option>
                 </select>
                </li>
                <li class="attribute_selected hidden">
                </li>
               </ul>
              </div>
             </div>
             <div class="hidden-mobile-important">
              <div class="pdp-loyalty">
               Earn 350pts with this purchase
               [linkx]
               
              </div>
             </div>
             <div class="sticky_add_to_cart sticky_wishlist_wrapper">
              <span class="sticky_wishlist_text">
               내 구매 목록
              </span>
              <ul class="product_actions product_wishlist">
               <li class="wishlist_add_container ">
                <button class="wishlist_action" data-cm_categoryid="Wishlist" data-cm_elementid="Add to Wishlist" data-product-id="3614270561658" type="submit">
                 <span class="add_wishlist_text">
                  위시리스트 추가
                 </span>
                </button>
               </li>
              </ul>
             </div>
             <div class="button_wrapper clearfix has_sticky">
              <div class="quantity">
               <label aria-labelledby="수량" class="" data-for="quantity" for="quantity">
                수량
               </label>
               <div class="quantity_error ">
               </div>
              </div>
              <div class="price b-price">
               <p class="product_price price_sale b-product_price-sale b-product_price" content="148000.0" data-pricevalue="148000.0" itemprop="price" title="판매 가격">
                <span class="product_price_title b-product_price-title">
                </span>
                <span class="product_price_currency" content="KRW" itemprop="priceCurrency">
                 <li>[link]</li><li>[keywordx][symbolx][keywordx][symbolx][bracketl1][keywordx][bracketr1][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx]</li><li>[link]</li><li>[link]</li>[keywordx][symbolx][keywordx][symbolx][bracketl2][keywordx][bracketr2][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx]
                </span>
                148,000원
               </p>
               <meta content="KRW" itemprop="priceCurrency"/>
               <meta content="148000.0" itemprop="price"/>
               <meta content="http://schema.org/NewCondition" itemprop="itemCondition" itemtype="http://schema.org/OfferItemCondition"/>
              </div>
              <button class="button js_addtocart add_to_cart addtocartbutton" title="장바구니에 추가" type="submit" value="장바구니에 추가">
               <span>
                장바구니에 추가
               </span>
               <span class="mobile-sticky-only">
                바로 구매하기
               </span>
              </button>
              <div class="product-addtobag-info-box">
              </div>
              <div class=" content_asset product-addtobag-info ">
               <div class="product-addtobag-img">
               </div>
               <p>
                <span style="font-size:12px;">
                 Livraison offerte dès 70€
                </span>
               </p>
              </div>
              <div class="product-return-policy">
               <div class=" content_asset product-return-policy ">
                <div class="product-return-policy-img">
                </div>
                <p>
                 <span style="font-size:12px;">
                  Retour facile
                 </span>
                </p>
               </div>
              </div>
             </div>
             <div class="availability wrapper-in_stock">
              <p class="availability_label">
              </p>
              <p class="availability_value in_stock">
               <span class="in_stock">
                재고 있음
               </span>
               <p class="availability_shipping">
                -오픈 2일차
               </p>
              </p>
             </div>
             <meta content="http://schema.org/InStock" itemprop="availability"/>
             <div class="clearfix">
             </div>
            </div>
           </fieldset>
          </form>
         </div>
         <span data-product-impression='{"3614270561658":{"name":"몽 파리 오 드 빠르펭","id":"3614270561658","brand":"YSL","category":"몽파리","variant":"women' data-product-impressionid="3614270561658" data-product-total-ratings="0" fragrances","dimension35":"1.6="" oz.","dimension36":"","dimension37":"","dimension38":0,"dimension40":"","dimension39":"in="" s="" stock","price":148000,"dimension152":148000}}'="" style="display:none;">
         </span>
        </div>
        <span class="mobile_category_name" style="display:none;">
         향수
        </span>
       </div>
      </div>
     </div>
     <div class="product_sections_wrapper">
      <div class="section_scroll" id="description">
       <div class="product_section product_section_description">
        <div class="product_section_content product_section_description_content" id="section_description">
         <div class="description_benefits_section_wrapper" id="description_benefits_section_wrapper">
          <div class="description_benefits_section">
           <div class="pdp_acordion_section" id="pdp_section_decription">
            <div class="product_description product_section">
             <div class="product_detail_tabs_wrapper">
              <div class="product_tabs">
               <ul class="tabs_menu">
                <li class="first_ui_tab">
                 <a href="s">
                  제품 정보
                 </a>
                </li>
                <li class="">
                 [linkx]
                 
                </li>
                <li class=" last_ui_tab">
                 [linkx]
                 
                </li>
               </ul>
               <ul class="tabs_description_section">
                <li class="tabs_description">
                 <div class="tab_content longdescription" id="tab_details" itemprop="description">
                  * 열정적인 사랑의 도시, 파리의 향기와 사랑의 정수를 담은 매혹적인 시프레 플로럴 시프레 향의 꾸뛰르 여성 향수
                  <br/>
                  <br/>
                  * 사랑의 달콤함을 담은 라즈베리-스트로베리의 푸르티 향을 시작으로, 다투라-화이트 피어니와 화이트 머스크의 하모니는 관능적인 매력과 깨끗하고 매혹적인 잔향을 선사합니다.
                  <br/>
                  <br/>
                  * 완벽하게 커팅된 눈부신 글래스 바틀에 시크한 블랙 라발리에 타이를 한 디자인은 입생로랑 여성의 모던하고 엣지있는 꾸뛰르 스타일을 표현합니다.
                  <br/>
                  <br/>
                  상품고시정보
                  <button class="btn_pdInfo">
                   <strong>
                    더 알아보기
                   </strong>
                  </button>
                  <br/>
                  <div class="product_info">
                   * 용량 또는 중량 : 50ml, 90ml
                   <br/>
                   * 제품 주요 사항 : 모든 피부용
                   <br/>
                   * 책임판매업자 : 엘오케이(유)
                   <br/>
                   * 제조국 : 프랑스
                   <br/>
                   * 기능성화장품 심사필여부 : 해당 사항 없음
                   <br/>
                   * 사용기한 또는 개봉후 사용기간 : 배송되는 제품은 사용기한이 12개월 이상 남아있는 제품부터 순차적으로 배송됩니다.
                   <br/>
                   * 사용시 주의 사항 :
                   <br/>
                   <font style="color:red">
                    1. 화장품 사용 시 또는 사용 후 직사광선에 의하여 사용부위가 붉은 반점, 부어오름 또는 가려움증 등의 이상 증상이나 부작용이 있는 경우 전문의 등과 상담할 것
                    <br>
                     2. 상처가 있는 부위 등에는 사용을 자제할 것
                     <br>
                      3. 보관 및 취급 시의 주의사항
                      <br>
                       가) 어린이의 손이 닿지 않는 곳에 보관할 것
                       <br>
                        나) 직사광선을 피해서 보관할 것
                        <br>
                         <br>
                          상세한 주의사항 내용은 제품에 부착된 라벨내용을 참조해 주십시오.
                         </br>
                        </br>
                       </br>
                      </br>
                     </br>
                    </br>
                   </font>
                   <br/>
                   * 품질 보증 기준 : 본 제품에 이상이 있을 경우 공정거래위원회 고시 품목별 소비자 분쟁해결기준에 의해 보상해드립니다.
                   <br/>
                   * 소비자상담 전화번호 : 080-835-0089
                  </div>
                  <a class="tab_read_more js_hide" href="">
                   자세히 보기
                  </a>
                  [ahref]
                  
                 </div>
                 <div class="tab_content " id="tab_composition">
                  플로럴 시프레
                  <br/>
                  라즈베리 -  다투라 - 피어니 - 패출리 -  화이트 머스크
                 </div>
                 <div class="tab_content" id="tab_ingredients">
                  <div class=" content_asset WW-41800YSL_ingredient ">
                   에탄올 향료 정제수 벤질살리실레이트 리날룰 벤질알코올 하이드록시시트로넬알 에칠헥실메톡시신나메이트 리모넨 헥실신남알 제라니올 시트로넬올 부틸메톡시디벤조일메탄 에칠헥실살리실레이트 유제놀 시트랄 트리스(테트라메칠하이드록시피페리디놀)시트레이트 벤질벤조에이트 파네솔 비에이치티 적색227호 자색401호
                  </div>
                 </div>
                </li>
               </ul>
              </div>
             </div>
            </div>
           </div>
           <div class="social_media_wrapper clearfix mobile_content">
            <p class="share_section_title desktop_content tablet_content">
             공유하기
            </p>
            <ul class="product_social_networking">
             <li class="social-share-buttons social_toolbox social_default_style social_toolbox_fix">
              [ahref]
              
              <a class="twitter social-btn-pdt twitter_share new-window" data-provider="twitter" href="/intent/tweet/?url=.www.yslbeautykr.com/ko_KR/fragrance/mon_paris_edp/3614270561658.html&amp;text=%EC%9E%85%EC%83%9D%EB%A1%9C%EB%9E%91%20%EB%B7%B0%ED%8B%B0%20%EA%B3%B5%EC%8B%9D%20%EC%98%A8%EB%9D%BC%EC%9D%B8%EB%AA%B0%EC%97%90%EC%84%9C%20%EB%AA%BD%20%ED%8C%8C%EB%A6%AC%20%EC%98%A4%20%EB%93%9C%20%EB%B9%A0%EB%A5%B4%ED%8E%AD%20%EA%B5%AC%EB%A7%A4%20%EC%95%88%EC%A0%84%ED%95%9C%20%EC%98%A8%EB%9D%BC%EC%9D%B8%20%EA%B2%B0%EC%A0%9C%EB%A1%9C%20%ED%95%9C%EC%A0%95%ED%8C%90%20%EC%BB%AC%EB%A0%89%EC%85%98%EC%9D%84%20%EB%A7%8C%EB%82%98%EB%B3%B4%EC%84%B8%EC%9A%94" target="_blank" title="">
               <span class="social_icon_twitter">
               </span>
              </a>
              <a class="line new-window social_mobile_display" data-provider="line" href="/R/msg/text/?입생로랑 뷰티의 몽 파리 오 드 빠르펭 고급 제품 옵션-.www.yslbeautykr.com/ko_KR/fragrance/mon_paris_edp/3614270561658.html" target="_blank" title="">
               <span class="social_icon_line">
               </span>
              </a>
              [ahref]
              
              [linkx]
              
              <a class="social-btn-pdt social_button_send_to send_to_friend" data-dlg-class="send_to_friend_pdp" href="/on/demandware.store/Sites-ysl-kr-Site/ko_KR/SendToFriend-Start?pid=3614270561658&amp;source=productdetail" title="친구에게 공유하기">
              </a>
              [ahref]
              
             </li>
            </ul>
           </div>
          </div>
         </div>
        </div>
       </div>
      </div>
      <div class="section_scroll" data-section-label="추천 제품" id="youmayalsolike">
       <div class="product_section ">
        <div class="section_title_hidden" id="headline_section_youmayalsolike">
        </div>
        <div class="product_section_content product_section_youmayalsolike_content" id="section_youmayalsolike">
         <div class="recommendations_block carousel" data-badge="" data-certona-scheme="product_rr" data-change-title="false" data-disablename="false" data-disablepricing="false" data-disablepromotion="false" data-disablesubtitle="false" data-disableswatches="false" data-maxrecommendations="4" data-product-name-classes="" data-productimagemode="image" data-producttilecustomcssclasses="" data-producttilecustomimagetypes="" data-producttiletype="default" data-recommendations-provider="DEMANDWARE" data-recommendations-type="demandwareCrossSell" data-richrelevance-placement="item_page.product_1" data-showaddtocart="true" data-showratings="true" data-showselectedswatchonly="false" data-slotcontent-products-ids="194YSL|1020YSL" data-title="추천 제품" data-viewtype="recommendation" data-zone="PDP">
          <div class="recommendation_title bg_title_box">
           <span>
            추천 제품
           </span>
          </div>
          <div class="carousel productcarousel carousel horizontal_carousel disable-carousel-buttons" data-animation-duration="" data-auto-scroll="false" data-auto-scroll-autostart="true" data-auto-scroll-interval="3000.0" data-carousel-easing="linear" data-carousel-navigation="true" data-carousel-step="1.0" data-carousel-wrap="" data-pagination-enabled="true" data-recalculate-height="true" data-scroll-fade="" data-scroll-fade-duration="" data-show-pagination-content="true" data-title="추천 제품" data-visibleondevices="">
           <div class="jcarousel-clip jcarousel-clip-horizontal">
            <ul class="productcarousel_list">
            </ul>
           </div>
          </div>
         </div>
        </div>
       </div>
      </div>
      <div class="section_scroll" data-section-label="후기" id="reviews">
       <div class="product_section">
        <span class="product_section_headline" id="headline_section_reviews">
         고객 후기
        </span>
        <div class="product_section_content product_section_reviews_content">
         <div class="js_ajax_reviews loading" data-pid="3614270561658" data-visibleondevices="['desktop','mobile','tablet']" id="product_reviews">
         </div>
        </div>
       </div>
      </div>
     </div>
     <div class="pdp_storelocator_mobile">
      [linkx]
      
     </div>
    </div>
   </div>
  </div>
  <div class="footer_main">
   <div class="footer_main_content">
    <div class="content clearfix">
     <div class="hidden back_to_top_block" id="backToTop">
      Top
     </div>
     <div class="footer_content_sidebar clearfix">
      <ul class="country_selector_wrapper">
       <li class="country-selector-li">
        <div class="link_wrapper">
         <a class="country-selector" id="country_selector" title="글로벌 사이트">
          글로벌 사이트
         </a>
        </div>
       </li>
      </ul>
      <div class="footer_asset footer_genuineproductcertification_asset" data-content-asset-id="footer-genuineproductcertification-asset">
       <div class=" content_asset footer-genuineproductcertification-asset ">
       </div>
      </div>
      <div class="footer_asset footer_social_media_asset" data-content-asset-id="footer-social-media-asset">
       <div class=" content_asset footer-social-media-asset ">
        <ul class="footer_sosial_links">
         <li>
          [linkx]
          
         </li>
         <li>
          [ahref]
          
         </li>
         <li>
          [linkx]
          
         </li>
         <li>
          [linkx]
          
         </li>
        </ul>
       </div>
      </div>
     </div>
     <div class="footer_asset footer_customerservice_asset" data-content-asset-id="footer-customerservice-asset">
      <div class=" content_asset footer-customerservice-asset ">
       <ul>
        <li>
         <h3>
          [mkey1][symbolx][pkey1][symbolx][keyword1][bracketl1][bracketr1][symbolx][bracketl2][siter1][bracketr2][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx]
         </h3>
        </li>
        <li>
         <p>
          구매/배송/사이트 이용 문의 080-835-0089
         </p>
        </li>
        <li>
         <p>
          제품문의 080-347-0089
         </p>
        </li>
        <li>
         <p>
          상담 시간: 월~금 9:00~18:00
         </p>
        </li>
        <li>
         (토/일/공휴일 휴무)[content6][content7][linkx][content8][content9][content10]
        </li>
        <li>
         <p>
          *점심시간: 12:30~13:30
         </p>
        </li>
        <li>
         <p style="float: left;margin-right: 10px;">
          [ahref]
          
         </p>
         <p class="wraper_policy_mobile">
          <a href="/ko_KR/order-search">
           <b>
            <u>
             비회원 주문 확인
            </u>
           </b>
          </a>
         </p>
        </li>
       </ul>
      </div>
     </div>
     <div class="footer_asset footer_navigation_asset" data-content-asset-id="footer-navigation-asset">
      <div class=" content_asset footer-navigation-asset ">
       <ul class="footer_nav_list">
        <li>
         <a href="/ko_KR/faq">
          자주 묻는 질문
         </a>
        </li>
        <li>
         [linkx]
         
        </li>
        <li>
         <a href="/ko_KR/order-search">
          비회원 주문 확인
         </a>
        </li>
        <li>
         [ahref]
         
        </li>
        <li>
         <a href="/ko_KR/%EC%9E%85%EC%83%9D%EB%A1%9C%EB%9E%91-%EB%B7%B0%ED%8B%B0-%EC%A3%BC%EB%AC%B8-%EB%B0%8F-%EA%B2%B0%EC%A0%9C-%EC%95%88%EB%82%B4/customer-service-order-tracking.html">
          주문/결제 안내
         </a>
        </li>
        <li>
         [ahref]
         
        </li>
        <li>
         <a href="/ko_KR/%EA%B0%9C%EC%9D%B8%EC%A0%95%EB%B3%B4%EC%B2%98%EB%A6%AC%EB%B0%A9%EC%B9%A8/privacy_policy_as_of_20190510.html">
          <h3 style="font-size:16px; margin-bottom: 0px;">
           [mkey1][symbolx][pkey1][symbolx][keyword1][bracketl1][bracketr1][symbolx][bracketl2][siter1][bracketr2][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx]
          </h3>
         </a>
        </li>
        <li>
         <a href="/ko_KR/sitemap">
          사이트맵
         </a>
        </li>
       </ul>
      </div>
     </div>
     <div class="footer_asset footer_mandatoryinformation_asset" data-content-asset-id="footer-mandatoryinformation-asset">
      <div class=" content_asset footer-mandatoryinformation-asset ">
       <p style="font-size:8pt">
        사업자명: 엘오케이(유) 대표: 얀 브노와르 부르동
        <br/>
        사업자 등록번호: 220-81-73483 (
        <a href="/info/bizinfo/communicationViewPopup.jsp?wrkr_no=2208173483" onclick="window.open(this.href, '', 'resizable=no,status=no,location=no,toolbar=no,menubar=no,fullscreen=no,scrollbars=no,dependent=no,width=750,height=700'); return false;">
         <u>
          사업자정보 확인
         </u>
        </a>
        )
        <br/>
        주소: 서울특별시 강남구 영동대로 517 아셈타워 31층
        <br/>
        통신판매업신고: 2012-서울강남-01663
        <br/>
        개인정보관리책임자: 서지영 | 고객케어센터: 080-835-0089
        <br/>
        © 2019 Yves Saint Laurent Cosmetics. All rights reserved.
       </p>
       <ul>
        <li>
         [linkx]
         
        </li>
       </ul>
       <ul class="wraper_policy_mobile">
        <li style="margin-right: 10px;">
         [linkx]
         
        </li>
        <li>
         [ahref]
         
        </li>
       </ul>
      </div>
     </div>
     <div class="footer_content_bottom">
     </div>
    </div>
   </div>
   <div class="footer_copyring_wrap_after clearfix">
    <div class="content">
     <div class="footer_country_selector">
      [linkx]
      
     </div>
     <div class=" content_asset footer-country-selector ">
      <div class="footer_country_selector_content">
       <ul class="footer_country_selector_continents" id="footer_country_selector_continents">
        <li>
         <a id="america">
          미주
         </a>
        </li>
        <li>
         [linkx]
         
        </li>
        <li>
         [linkx]
         
        </li>
        <li>
         <a id="middle_east">
          중동
         </a>
        </li>
       </ul>
       <ul class="footer_country_selector_items" data-continent="america">
        <li>
         [linkx]
         
        </li>
        <li>
         [ahref]
         
        </li>
        <li>
         <a href="/">
          캐나다
         </a>
        </li>
        <li>
         [linkx]
         
        </li>
       </ul>
       <ul class="footer_country_selector_items" data-continent="europe">
        <li>
         [linkx]
         
        </li>
        <li>
         <a href="/fr-BE/">
          벨기에
         </a>
        </li>
        <li>
         [linkx]
         
        </li>
        <li>
         <a href="/fi-FI/">
          핀란드
         </a>
        </li>
        <li>
         [ahref]
         
        </li>
        <li>
         [ahref]
         
        </li>
        <li>
         [linkx]
         
        </li>
        <li>
         <a href="/it-IT">
          이탈리아
         </a>
        </li>
        [linkx]
        
        <li>
         <a href="/pt-PT/">
          포르투갈
         </a>
        </li>
       </ul>
       <ul class="footer_country_selector_items" data-continent="asia">
        <li>
         [linkx]
         
        </li>
        <li>
         [linkx]
         
        </li>
        <li>
         <a href="/">
          일본
         </a>
        </li>
        <li>
         [ahref]
         
        </li>
        <li>
         <a href="/en-SG/">
          싱가포르
         </a>
        </li>
        <li>
         <a href="u">
          러시아
         </a>
        </li>
        <li>
         <a href="u">
          호주
         </a>
        </li>
       </ul>
       <ul class="footer_country_selector_items" data-continent="middle_east">
        <li>
         [linkx]
          <li>[keywordx][symbolx][keywordx][symbolx][bracketl8][keywordx][bracketr8][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx]</li><li>[link]</li>[link]<li>[keywordx][symbolx][keywordx][symbolx][bracketl9][keywordx][bracketr9][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx]</li>[link]
         
        </li>
        <li>
         [linkx]
         
        </li>
       </ul>
      </div>
     </div>
    </div>
   </div>
  </div>
  <div class="wraper-sticky-banner">
   <div class="js_modalpopup" data-config='{
    "assetId": "modal-popup-sticky-banner",
    "url": "/on/demandware.store/Sites-ysl-kr-Site/ko_KR/Page-Include?cid=modal-popup-newsletter",
    "id": "modal-popup-2",
    "pages":["homepage","storefront","search","moodboards","product","customerservice","MyAccount","shadefinder","colormirror"],
    "customClass": "js_hide",
    "promoCode": "sign-up-offer-10",
    "promoCodeUrl": "/on/demandware.store/Sites-ysl-kr-Site/ko_KR/YSLCheckout-GeneratePromoCode?id=sign-up-offer-10"
}'>
   </div>
  </div>
  <div class="sticky-banner">
   <div class="html_slot_container " data-title="">
    <div class="sticky-promotion" style="
   cursor: default; background:  #E71471;">
     <strong>
      <a href="/ko_KR/monthly-benefits/monthlybenefit.html" style="color:white;">
       [회원] 무료배송 및 2종 증정
      </a>
     </strong>
    </div>
    <p>
     <span class="js_modal_sticky_close">
     </span>
    </p>
   </div>
  </div>
  <div id="dialogcontainer_outofstock_global" style="display: none;">
   <div class="dialog_content1">
   </div>
   <div class="dialog_content2">
   </div>
  </div>
  <div style="display:none;">
   <div id="notifyme_form">
    <p>
     아래에 이메일 주소를 입력하시면 이 제품을 구매할 수 있을 때 알림을 보내드립니다.
    </p>
    <p>
     이메일을 보내면 장바구니에서 이 제품이 자동으로 삭제됩니다.
    </p>
    <p class="invalid_email">
     <li>[link]</li>[keywordx][symbolx][keywordx][symbolx][bracketl3][keywordx][bracketr3][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx]<li>[link]</li>
    </p>
    <div class="formfield">
     <label class="f_label" for="outofstockemail">
      이메일
     </label>
    </div>
    <p class="invalid_privacy">
    </p>
    <div class="formfield formfield_button dialogButtons">
     <button class="button button_submit" title="등록" type="button" value="등록">
      <span>
       등록
      </span>
     </button>
     <button class="button button_cancel" title="취소" type="button" value="취소">
      <span>
       취소
      </span>
     </button>
    </div>
   </div>
   <div class="dialogButtons">
    <button class="button button_cancel" title="Continue Shopping" type="button" value="Continue Shopping">
     <span>
      쇼핑 계속하기
     </span>
    </button>
   </div>
  </div>
  <div class="robots-noindex robots-follow robots-nocontent">
  </div>
  <b style="color:black;background-color:#a0ffff">
   jnice09-ipp30-wq-zq-0173
  </b>
 </body>
</html>
|<---