--->|<!DOCTYPE HTML>
<html class="lazy" lang="ko-KR">
 <head>
  <meta content="[area1][mkey1][symbolx][pkey3][symbolx][area1][keyword1][bracketl1][area1][keywordx][bracketr1][symbolx][bracketl2][area1][keywordx][bracketr2][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx]" name="keywords"/>
  <meta content="[area1][mkey1][symbolx][pkey2][symbolx][area1][keyword1][bracketl1][area1][keywordx][bracketr1][symbolx][bracketl2][area1][keywordx][bracketr2][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx]" name="description"/>
  <meta content="[area1][mkey1][symbolx][pkey1][symbolx][area1][keyword1][bracketl1][area1][keywordx][bracketr1][symbolx][bracketl2][area1][keywordx][bracketr2][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx]" property="og:title"/>
  <meta content="website" property="og:type"/>
  <meta content="[area1][mkey1][symbolx][pkey4][symbolx][area1][keyword1][bracketl1][area1][keywordx][bracketr1][symbolx][bracketl2][area1][keywordx][bracketr2][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx]" property="og:url"/>
  <meta content="summary_large_image" name="twitter:card"/>
  <meta content="@SchneiderElec" name="twitter:site"/>
  <meta content="//www.apc.com/kr/ko/Images/Schneider-Electric-Social.png" property="og:image"/>
  <meta content="https://www.apc.com/kr/ko/Images/Schneider-Electric-Social.png" property="twitter:image"/>
  <meta content="[area1][mkey1][symbolx][pkey2][symbolx][area1][keyword1][bracketl1][area1][keywordx][bracketr1][symbolx][bracketl2][area1][keywordx][bracketr2][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx]" property="og:description"/>
  <meta content="width=device-width, initial-scale=1" name="viewport"/>
  <meta charset="utf-8">
   <title>
    [area1][mkey1][symbolx][pkey1][symbolx][area1][keyword1][bracketl1][area1][keywordx][bracketr1][symbolx][bracketl2][area1][keywordx][bracketr2][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx]
   </title>
   <meta content="width=device-width, initial-scale=1" name="viewport"/>
   <meta charset="utf-8">
   </meta>
  </meta>
 </head>
</html>
<body id="">
 <div id="page">
  <div class="breadcrumb">
   <nav class="trail js-trail" id="trail">
   </nav>
  </div>
  <div class="header-container header-container_fss">
   <div class="header-top">
    <div>
     <ul>
      <li id="header-country-selector">
       [linkx]
       
      </li>
      <li id="header-login-link">
       [linkx]
       
       |
       [ahref]
       
      </li>
     </ul>
    </div>
   </div>
   <div class="header-content">
    <ul class="main-menu">
     <li>
      [linkx]
      
     </li>
     <li>
      <ul>
       <li class="mobile-only current-account" id="my-account" style="display: none;">
       </li>
       <li class="mobile-only wish-list" style="display: none;">
        [ahref]
        
       </li>
       <li>
        [ahref]
        
        <div class="products-services-menu-tab">
         <div>
          [linkx]
          
          <ul class="menu-level-two" id="productsMenu">
           <li class="menu-level-two-links">
            [ahref]
            
            <div>
             <div>
              [linkx]
              
              <ul class="menu-level-three">
               <li class="title menu-level-three-links">
                [linkx]
                
                <span>
                </span>
               </li>
               <div class="menu-level-three-links-wrapper js-menu-level-three-links-wrapper">
                <li class="menu-level-three-links">
                 <em>
                  무정전전원장치(UPS)
                 </em>
                 <ul class="menu-level-four">
                  <li class="menu-level-four-links">
                   [ahref]
                   
                  </li>
                  <li class="menu-level-four-links">
                   [linkx]
                   
                  </li>
                  <li class="menu-level-four-links">
                   <a href="/shop/kr/ko/categories/power/uninterruptible-power-supply-ups-/data-center-and-facility-3-phase-ups/N-n7ggzf">
                    Data Center and Facility 3 Phase UPS
                   </a>
                  </li>
                  <li class="menu-level-four-links">
                   [linkx]
                   
                  </li>
                  <li class="menu-level-four-links">
                   [ahref]
                   
                  </li>
                  <li class="menu-level-four-links">
                   <a href="/shop/kr/ko/categories/power/uninterruptible-power-supply-ups-/ups-replacement-batteries/N-ttpw47">
                    UPS 교체 배터리
                   </a>
                  </li>
                 </ul>
                </li>
                <li class="menu-level-three-links">
                 <em>
                  서지 방지 및 전원 보호
                 </em>
                 <ul class="menu-level-four">
                  <li class="menu-level-four-links">
                   [linkx]
                   
                  </li>
                  <li class="menu-level-four-links">
                   [linkx]
                   
                  </li>
                 </ul>
                </li>
                <li class="menu-level-three-links">
                 <em>
                  모바일 액세서리
                 </em>
                 <ul class="menu-level-four">
                  <li class="menu-level-four-links">
                   [linkx]
                   
                  </li>
                 </ul>
                </li>
               </div>
              </ul>
             </div>
            </div>
           </li>
           <li class="menu-level-two-links">
            [ahref]
            
            <div>
             <div>
              [ahref]
              
              <ul class="menu-level-three">
               <li class="title menu-level-three-links">
                [ahref]
                
                <span>
                </span>
               </li>
               <div class="menu-level-three-links-wrapper js-menu-level-three-links-wrapper">
                <li class="menu-level-three-links">
                 <em>
                  Air Economizers
                 </em>
                 <ul class="menu-level-four">
                  <li class="menu-level-four-links">
                   [ahref]
                   
                  </li>
                 </ul>
                </li>
                <li class="menu-level-three-links">
                 <em>
                  Containment and Air Distribution
                 </em>
                 <ul class="menu-level-four">
                  <li class="menu-level-four-links">
                   [linkx]
                   
                  </li>
                  <li class="menu-level-four-links">
                   [ahref]
                   
                  </li>
                 </ul>
                </li>
                <li class="menu-level-three-links">
                 <em>
                  냉각 장치
                 </em>
                 <ul class="menu-level-four">
                  <li class="menu-level-four-links">
                   <a href="/shop/kr/ko/categories/cooling/chillers/aquaflair-wc/N-grud5p">
                    Aquaflair WC
                   </a>
                  </li>
                  <li class="menu-level-four-links">
                   [linkx]
                   
                  </li>
                  <li class="menu-level-four-links">
                   [linkx]
                   
                  </li>
                  <li class="menu-level-four-links">
                   [linkx]
                   
                  </li>
                 </ul>
                </li>
                <li class="menu-level-three-links">
                 <em>
                  밀착형 에어컨
                 </em>
                 <ul class="menu-level-four">
                  <li class="menu-level-four-links">
                   [linkx]
                    [area1][mkey1]<li>[ahref]</li>[ahref]<li>[ahref]</li>
                   
                  </li>
                  <li class="menu-level-four-links">
                   [ahref]
                   
                  </li>
                  <li class="menu-level-four-links">
                   <a href="/shop/kr/ko/categories/cooling/close-coupled-air-conditioners/row-cooling-accessories/N-1m8sbuq">
                    장비열 냉각 주변 기기
                   </a>
                  </li>
                 </ul>
                </li>
                <li class="menu-level-three-links">
                 <em>
                  실내 공조기
                 </em>
                 <ul class="menu-level-four">
                  <li class="menu-level-four-links">
                   [linkx]
                   
                  </li>
                  <li class="menu-level-four-links">
                   [linkx]
                   
                  </li>
                  <li class="menu-level-four-links">
                   [linkx]
                   
                  </li>
                  <li class="menu-level-four-links">
                   [ahref]
                   
                  </li>
                  <li class="menu-level-four-links">
                   [linkx]
                   
                  </li>
                  <li class="menu-level-four-links">
                   [linkx]
                   
                  </li>
                 </ul>
                </li>
               </div>
              </ul>
             </div>
            </div>
           </li>
           <li class="menu-level-two-links">
            [ahref]
            
            <div>
             <div>
              [ahref]
              
              <ul class="menu-level-three">
               <li class="title menu-level-three-links">
                [linkx]
                
                <span>
                </span>
               </li>
               <div class="menu-level-three-links-wrapper js-menu-level-three-links-wrapper">
                <li class="menu-level-three-links">
                 <em>
                  센서 / 카메라 / 라이센스 / 액세서리
                 </em>
                 <ul class="menu-level-four">
                  <li class="menu-level-four-links">
                   [ahref]
                   
                  </li>
                  <li class="menu-level-four-links">
                   <a href="/shop/kr/ko/categories/security-and-environmental-monitoring/sensors-cameras-licenses-accessories/netbotz-accessories-and-cables/N-1o7fy5r">
                    NetBotz 주변 기기 및 케이블
                   </a>
                  </li>
                  <li class="menu-level-four-links">
                   [linkx]
                   
                  </li>
                  <li class="menu-level-four-links">
                   [linkx]
                   
                  </li>
                  <li class="menu-level-four-links">
                   <a href="/shop/kr/ko/categories/security-and-environmental-monitoring/sensors-cameras-licenses-accessories/software-for-netbotz-appliances/N-1brtzsx">
                    NetBotz 장비용 소프트웨어
                   </a>
                  </li>
                 </ul>
                </li>
                <li class="menu-level-three-links">
                 <em>
                  보안 및 환경 장비
                 </em>
                 <ul class="menu-level-four">
                  [area1][keywordx][symbolx][area1][keywordx][symbolx][bracketl9][area1][keywordx][bracketr9][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][linkx][linkx][ahref][pkeyx][pkeyx]
                 </ul>
                </li>
               </div>
              </ul>
             </div>
            </div>
           </li>
           <li class="menu-level-two-links">
            [ahref]
            
            <div>
             <div>
              <li>[area1][mkey1]</li>[pkeyx]<li>[area1][mkey1]</li><li>[pkeyx]</li>
             </div>
            </div>
           </li>
           <li class="menu-level-two-links">
            <a href="#" title="">
             전원 분배
            </a>
            <div>
             <div>
              [ahref]
              
              <ul class="menu-level-three">
               <li class="title menu-level-three-links">
                [area1][keywordx]<li>[pkeyx]</li><li>[linkx]</li><li>[area1][keywordx][symbolx][area1][keywordx][symbolx][bracketl17][area1][keywordx][bracketr17][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx]</li><li>[ahref]</li>
               </li>
               <div class="menu-level-three-links-wrapper js-menu-level-three-links-wrapper">
                <li class="menu-level-three-links">
                 <em>
                  Row 3 Phase Power Distribution
                 </em>
                 <ul class="menu-level-four">
                  <li class="menu-level-four-links">
                   [ahref]
                   
                  </li>
                  <li class="menu-level-four-links">
                   [ahref]
                   
                  </li>
                  <li class="menu-level-four-links">
                   [ahref]
                   
                  </li>
                  <li class="menu-level-four-links">
                   [ahref]
                   
                  </li>
                  <li class="menu-level-four-links">
                   [linkx]
                   
                  </li>
                 </ul>
                </li>
                <li class="menu-level-three-links">
                 <em>
                  랙 배전 장치
                 </em>
                 <ul class="menu-level-four">
                  <li class="menu-level-four-links">
                   [ahref]
                   
                  </li>
                  <li class="menu-level-four-links">
                   [ahref]
                   
                  </li>
                  <li class="menu-level-four-links">
                   [ahref]
                   
                  </li>
                  <li class="menu-level-four-links">
                   [linkx]
                   
                  </li>
                  <li class="menu-level-four-links">
                   [linkx]
                   
                  </li>
                  <li class="menu-level-four-links">
                   <a href="/shop/kr/ko/categories/power-distribution/rack-power-distribution/power-cords/N-1c9rl4u">
                    전원 코드
                   </a>
                  </li>
                  <li class="menu-level-four-links">
                   [ahref]
                   
                  </li>
                 </ul>
                </li>
                <li class="menu-level-three-links">
                 <em>
                  전송 스위치
                 </em>
                 <ul class="menu-level-four">
                  <li class="menu-level-four-links">
                   [linkx]
                   
                  </li>
                 </ul>
                </li>
               </div>
              </ul>
             </div>
            </div>
           </li>
           <li class="menu-level-two-links">
            [linkx]
            
            <div>
             <div>
              [linkx]
              
              <ul class="menu-level-three">
               <li class="title menu-level-three-links">
                [ahref]
                
                <span>
                </span>
               </li>
               <div class="menu-level-three-links-wrapper js-menu-level-three-links-wrapper">
                <li class="menu-level-three-links">
                 <em>
                  냉각 모듈
                 </em>
                 <ul class="menu-level-four">
                  <li class="menu-level-four-links">
                   [linkx]
                   
                  </li>
                 </ul>
                </li>
                <li class="menu-level-three-links">
                 <em>
                  전력 모듈
                 </em>
                 <ul class="menu-level-four">
                  <li class="menu-level-four-links">
                   [linkx]
                   
                  </li>
                  <li class="menu-level-four-links">
                   [linkx]
                   
                  </li>
                 </ul>
                </li>
                <li class="menu-level-three-links">
                 <em>
                  IT 모듈
                 </em>
                 <ul class="menu-level-four">
                  <li class="menu-level-four-links">
                   [ahref]
                   
                  </li>
                  <li class="menu-level-four-links">
                   <a href="/shop/kr/ko/categories/prefabricated-data-center-modules/it-modules/smartshelter-module/N-9j8vnh">
                    SmartShelter 모듈
                   </a>
                  </li>
                  <li class="menu-level-four-links">
                   <a href="/shop/kr/ko/categories/prefabricated-data-center-modules/it-modules/smartshelter-data-hall/N-127arzn">
                    SmartShelter Data Hall
                   </a>
                  </li>
                 </ul>
                </li>
               </div>
              </ul>
             </div>
            </div>
           </li>
           <li class="menu-level-two-links">
            [ahref]
            
            <div>
             <div>
              [linkx]
              
              <ul class="menu-level-three">
               <li class="title menu-level-three-links">
                [linkx]
                
                <span>
                </span>
               </li>
               <div class="menu-level-three-links-wrapper js-menu-level-three-links-wrapper">
                <li class="menu-level-three-links">
                 <em>
                  Monitoring &amp; Control
                 </em>
                 <ul class="menu-level-four">
                  [ahref][area1][keywordx][symbolx][area1][keywordx][symbolx][bracketl5][area1][keywordx][bracketr5][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][ahref][area1][keywordx][ahref][area1][keywordx][symbolx][area1][keywordx][symbolx][bracketl6][area1][keywordx][bracketr6][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][bracketl7][area1][keywordx][bracketr7][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][area1][keywordx][symbolx][area1][keywordx][symbolx][bracketl8][area1][keywordx][bracketr8][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][ahref][area1][mkey1][linkx][area1][keywordx][area1][mkey1][ahref][linkx]
                 </ul>
                </li>
                <li class="menu-level-three-links">
                 <em>
                  Software Services
                 </em>
                 <ul class="menu-level-four">
                  <h3>
                   [area1][mkey1][symbolx][pkeyx][symbolx][area1][keyword1][bracketl1][area1][keywordx][bracketr1][symbolx][bracketl2][area1][keywordx][bracketr2][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx]
                  </h3>
                  <li class="menu-level-four-links">
                   [linkx]
                   
                  </li>
                  <li class="menu-level-four-links">
                   <a href="/shop/kr/ko/categories/data-center-software/software-services/software-configuration/N-t5wlt6">
                    소프트웨어 구성
                   </a>
                  </li>
                  <li class="menu-level-four-links">
                   [linkx]
                   
                  </li>
                  <li class="menu-level-four-links">
                   [ahref]
                   
                  </li>
                 </ul>
                </li>
                <li class="menu-level-three-links">
                 <em>
                  Cloud Based Operations
                 </em>
                 <ul class="menu-level-four">
                  <li class="menu-level-four-links">
                   [linkx]
                   
                  </li>
                 </ul>
                </li>
                <li class="menu-level-three-links">
                 <em>
                  운영
                 </em>
                 <ul class="menu-level-four">
                  <li class="menu-level-four-links">
                   [ahref]
                    [area1][keywordx][symbolx][area1][keywordx][symbolx][bracketl11][area1][keywordx][bracketr11][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][ahref][area1][keywordx][symbolx][area1][keywordx][symbolx][bracketl12][area1][keywordx][bracketr12][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][bracketl13][area1][keywordx][bracketr13][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][pkeyx][area1][keywordx][area1][keywordx][pkeyx][pkeyx][linkx]
                   
                  </li>
                  <li class="menu-level-four-links">
                   [ahref]
                   
                  </li>
                  <li class="menu-level-four-links">
                   [area1][keywordx][symbolx][area1][keywordx][symbolx][bracketl10][area1][keywordx][bracketr10][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][linkx][ahref][linkx][area1][keywordx][area1][keywordx][area1][keywordx][area1][mkey1][area1][mkey1][pkeyx][pkeyx][area1][keywordx]
                  </li>
                  <li class="menu-level-four-links">
                   <a href="/shop/kr/ko/categories/data-center-software/operations/data-center-operation-it-optimize/N-1yq78gw">
                    데이터센터 운영: IT 최적화
                   </a>
                  </li>
                  <li class="menu-level-four-links">
                   [linkx]
                   
                  </li>
                  <li class="menu-level-four-links">
                   <a href="/shop/kr/ko/categories/data-center-software/operations/data-center-operation-cooling-optimize/N-1dasmls">
                    데이터센터 운영: 냉각 최적화
                   </a>
                  </li>
                  <li class="menu-level-four-links">
                   [ahref]
                   
                  </li>
                 </ul>
                </li>
               </div>
              </ul>
             </div>
            </div>
           </li>
           <li class="menu-level-two-links">
            [linkx]
            
            <div>
             <div>
              [linkx]
              
              <ul class="menu-level-three">
               <li class="title menu-level-three-links">
                [linkx]
                
                <span>
                </span>
               </li>
               <div class="menu-level-three-links-wrapper js-menu-level-three-links-wrapper">
                <li class="menu-level-three-links">
                 <em>
                  계획
                 </em>
                 <ul class="menu-level-four">
                  <li class="menu-level-four-links">
                   [linkx]
                   
                  </li>
                 </ul>
                </li>
                <li class="menu-level-three-links">
                 <em>
                  설치
                 </em>
                 <ul class="menu-level-four">
                  <li class="menu-level-four-links">
                   [ahref]
                   
                  </li>
                  <li class="menu-level-four-links">
                   [ahref]
                   
                  </li>
                 </ul>
                </li>
                <li class="menu-level-three-links">
                 <em>
                  작동<li>[area1][keywordx]</li><li>[pkeyx]</li><li>[linkx]</li>[area1][keywordx]<li>[pkeyx]</li>
                 </em>
                 <ul class="menu-level-four">
                  <li class="menu-level-four-links">
                   [ahref]
                   
                  </li>
                  <li class="menu-level-four-links">
                   [linkx]
                   
                  </li>
                  <li class="menu-level-four-links">
                   <a href="/shop/kr/ko/categories/services/operate/extended-warranties/N-o0sjw4">
                    보증 연장
                   </a>
                  </li>
                  <li class="menu-level-four-links">
                   [ahref]
                   
                  </li>
                  <li class="menu-level-four-links">
                   [ahref]
                   
                  </li>
                  <li class="menu-level-four-links">
                   [ahref]
                   
                  </li>
                  <li class="menu-level-four-links">
                   [ahref]
                   
                  </li>
                 </ul>
                </li>
                <li class="menu-level-three-links">
                 <em>
                  최적화
                 </em>
                 <ul class="menu-level-four">
                  <li class="menu-level-four-links">
                   [linkx]
                   
                  </li>
                 </ul>
                </li>
                <li class="menu-level-three-links">
                 <[area1][keywordx]>
                 </[area1][keywordx]>
                 <ul class="menu-level-four">
                  <li class="menu-level-four-links">
                   <a href="/shop/kr/ko/categories/services/renew/renew-mprs/N-1ubkg7d">
                    MPRS 갱신
                   </a>
                  </li>
                 </ul>
                </li>
                <li class="menu-level-three-links">
                 <em>
                  제품 기반 서비스
                 </em>
                 <ul class="menu-level-four">
                  <li class="menu-level-four-links">
                   [ahref]
                   
                  </li>
                 </ul>
                </li>
               </div>
              </ul>
             </div>
            </div>
           </li>
          </ul>
         </div>
        </div>
       </li>
       <li>
        [linkx]
        
        <div class="solutions-menu-tab" id="solutions-menu">
         <div>
          [linkx]
          
          <ul class="menu-level-two js-solutions-tab-menu-level-two">
           <li class="menu-level-two-links js-solutions-tab-menu-level-two-links">
            [linkx]
            
            <div>
             <div>
              <a class="back-button" href="#" title="비즈니스 솔루션">
               비즈니스 솔루션
              </a>
              <ul class="image-menu menu-level-three">
               <li class="menu-level-three-links">
                <a href="/kr/ko/solutions/business-solutions/edge-computing/index.jsp" tridion:textonfail="false">
                 <p>
                  엣지 컴퓨팅
                 </p>
                </a>
               </li>
               <li class="menu-level-three-links">
                [linkx]
                
               </li>
               <li class="menu-level-three-links">
                [linkx]
                
               </li>
               <li class="menu-level-three-links">
                <li>[linkx]</li>[area1][keywordx][symbolx][area1][keywordx][symbolx][bracketl14][area1][keywordx][bracketr14][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][bracketl15][area1][keywordx][bracketr15][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][pkeyx][area1][keywordx][symbolx][area1][keywordx][symbolx][bracketl16][area1][keywordx][bracketr16][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx]
               </li>
               <li class="menu-level-three-links">
                [ahref]
                
               </li>
               <li class="menu-level-three-links">
                [ahref]
                
               </li>
               <li class="is-hidden-on-desktop">
                [linkx]
                
               </li>
               <li class="is-hidden-on-desktop">
                [linkx]
                
               </li>
              </ul>
             </div>
            </div>
           </li>
           <li class="menu-level-two-links js-solutions-tab-menu-level-two-links">
            [ahref]
            
            <div>
             <div>
              [ahref]
              
              <ul class="image-menu menu-level-three">
               <li class="menu-level-three-links">
                <a href="/kr/ko/solutions/home-solutions/home-office.jsp" tridion:textonfail="false">
                 <p>
                  홈 오피스
                 </p>
                </a>
               </li>
               <li class="menu-level-three-links">
                [ahref]
                
               </li>
               <li class="menu-level-three-links">
                [linkx]
                
               </li>
               <li class="is-hidden-on-desktop">
                [ahref]
                
               </li>
               <li class="is-hidden-on-desktop">
                [linkx]
                 [area1][keywordx]<li>[area1][keywordx][symbolx][area1][keywordx][symbolx][bracketl2][area1][keywordx][bracketr2][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx]</li><li>[pkeyx]</li>
                
               </li>
              </ul>
             </div>
            </div>
           </li>
          </ul>
          <ul class="additional-links all-solutions-link additional-links" style="display: none;">
           <li class="view-all-solutions-link menu-level-three-links">
            [linkx]
            
           </li>
          </ul>
         </div>
        </div>
       </li>
       <li>
        [ahref]
        
        <div class="support-menu-tab">
         <div>
          [linkx]
          
          <ul class="menu-level-two js-support-tab-menu-level-two">
           <li class="menu-level-two-links js-support-tab-menu-level-two-links">
            [ahref]
            
            <div>
             <div>
              [linkx]
              
              <ul>
              </ul>
             </div>
            </div>
           </li>
           <li class="menu-level-two-links js-support-tab-menu-level-two-links js-support-tab-menu-level-two-non-redirected-on-mobile-links">
            [ahref]
             [ahref]<li>[linkx]</li><li>[area1][keywordx][symbolx][area1][keywordx][symbolx][bracketl1][area1][keywordx][bracketr1][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx]</li>
            
            <div>
             <div>
              [linkx]
              
              <ul>
               <li>
                <span>
                </span>
               </li>
               <li>
                [linkx]
                
               </li>
               <li>
                [linkx]
                
               </li>
               <li>
                [ahref]
                
               </li>
               <li>
                [ahref]
                 [area1][mkey1][linkx][area1][keywordx][symbolx][area1][keywordx][symbolx][bracketl18][area1][keywordx][bracketr18][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx]
                
               </li>
               <li>
                [ahref]
                
               </li>
               <li>
                [linkx]
                
               </li>
               <li class="is-hidden-on-desktop">
                [linkx]
                
               </li>
              </ul>
             </div>
            </div>
           </li>
           <li class="menu-level-two-links js-support-tab-menu-level-two-links js-support-tab-menu-level-two-non-redirected-on-mobile-links">
            [ahref]
            
            <div>
             <div>
              <a class="back-button" href="#" style="margin-left: 346px;" title="">
               지원 커뮤니티
              </a>
              <ul>
               <li>
                <span>
                </span>
               </li>
               <li>
                [ahref]
                
               </li>
               <li class="is-hidden-on-desktop">
                [ahref]
                
               </li>
              </ul>
             </div>
            </div>
           </li>
           <li class="menu-level-two-links js-support-tab-menu-level-two-links support-tab-menu-level-two-non-clickable-links">
            [ahref]
             <li>[area1][mkey1]</li><li>[ahref]</li><li>[pkeyx]</li>[area1][keywordx]
            
            <div>
             <div>
              <a class="back-button" href="#" style="margin-left: 346px;" title="">
               제품 지원
              </a>
              <ul>
               <li>
                <span>
                </span>
               </li>
               <li>
                [ahref]
                
               </li>
               <li>
                [ahref]
                
               </li>
               <li>
                [ahref]
                
               </li>
               <li>
                [linkx]
                
               </li>
              </ul>
             </div>
            </div>
           </li>
           <li class="menu-level-two-links js-support-tab-menu-level-two-links js-support-tab-menu-level-two-non-redirected-on-mobile-links">
            [linkx]
            
            <div>
             <div>
              [linkx]
              
              <ul>
               <li>
                <span>
                </span>
               </li>
               <li>
                [linkx]
                
               </li>
               <li class="is-hidden-on-desktop">
                [ahref]
                
               </li>
              </ul>
             </div>
            </div>
           </li>
           <li class="menu-level-two-links js-support-tab-menu-level-two-links">
            [linkx]
            
            <div>
             <div>
              [linkx]
              
              <ul>
              </ul>
             </div>
            </div>
           </li>
          </ul>
         </div>
        </div>
       </li>
       <li>
        [linkx]
        
       </li>
       <li>
        <a class="menu-link-out" href="/kr/ko/partners-alliances/index.jsp" tridion:textonfail="false">
         파트너 및 제휴사
        </a>
       </li>
       <li class="mobile-only">
        [linkx]
        
       </li>
       <li class="mobile-only">
        [ahref]
        
       </li>
       <li class="mobile-only" style="display: none;">
        [linkx]
        
       </li>
       <li class="mobile-only" style="display: none;">
        [linkx]
        
       </li>
       <li class="mobile-only" style="display: none;">
        [linkx]
        
       </li>
       <li class="mobile-only" style="display: none;">
        <a href="" title="">
         Find a Reseller
        </a>
       </li>
       <li class="mobile-only" style="display: none;">
        [ahref]
        
       </li>
       <li class="mobile-country-selector">
        [linkx]
        
       </li>
       <li class="mobile-country-selector" style="display: none;">
        [linkx]
        
       </li>
       <li class="mobile-language-selector" style="display: none;">
        [ahref]
        
        <ul>
         <li class="current">
          [linkx]
          
         </li>
         <li>
          <a href="#" title="">
           French
          </a>
         </li>
        </ul>
       </li>
      </ul>
     </li>
     <li>
      <div class="search-layer">
       <div class="global-search" id="GlobalSearchApp">
        <div class="searchInput">
         <form action="/shop/kr/ko/search" autocomplete="off" data-symbols-limit="3" name="searchFormAPC" novalidate="">
          <div class="searchInput__controlButtons">
           <div class="searchInput__searchButton">
            <button class="searchInput__submitButton" type="submit">
             <svg class="searchInput__searchButtonIconNew" height="18" viewbox="0 0 18 18" width="18">
              <use xlink:href="#icon-search" xmlns:xlink="http://www.w3.org/1999/xlink">
              </use>
             </svg>
             <svg class="searchInput__searchButtonIconOld" fill="#ffffff" height="13" viewbox="0 0 16 16" width="13" xmlns="http://www.w3.org/2000/svg">
              <path d="M10.9 9.464l4.822 4.823a1 1 0 0 1-1.415 1.414L9.49 10.882a6 6 0 1 1 1.41-1.418zM6 10a4 4 0 1 0 0-8 4 4 0 0 0 0 8z">
              </path>
             </svg>
            </button>
           </div>
          </div>
         </form>
        </div>
       </div>
       <multi-login-container>
       </multi-login-container>
      </div>
     </li>
     <li>
      [ahref]
      
     </li>
    </ul>
   </div>
  </div>
  <div class="wrap-content">
   <div class="main">
    <div class="intro">
     <h1>
      <b>[area1][mkey1][symbolx][pkeyx][symbolx][area1][keyword1][bracketl1][area1][keywordx][bracketr1][symbolx][bracketl2][area1][keywordx][bracketr2][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx]</b>
     </h1>
    </div>
    <div class="intro">
     <h2>
      <b>[area1][mkey1][symbolx][pkeyx][symbolx][area1][keyword1][bracketl1][area1][keywordx][bracketr1][symbolx][bracketl2][area1][keywordx][bracketr2][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx]</b>
     </h2>
     <div>
      리소스, 도구, FAQ, 설명서
     </div>
    </div>
    <div class="flex-container content-group-1">
     <div class="tips-vertical">
      <h2 class="h2">
       [area1][mkey1][symbolx][pkeyx][symbolx][area1][keyword1][bracketl1][area1][keywordx][bracketr1][symbolx][bracketl2][area1][keywordx][bracketr2][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx]
      </h2>
      <p>
       당사의 광범위한 데이터베이스를 손쉽게 검색하여 모든 APC 제품에 대한 사용자 설명서를 다운로드할 수 있습니다. 아래 목록에서 가장 인기 있는 항목부터 시작해 보십시오. 또는 메뉴에서 제품명이나 제품 번호를 선택한 뒤 해당 다운로드 항목을 열어도 됩니다.
      </p>
      <ul class="list-links">
       <li>
        [linkx]
        
       </li>
      </ul>
     </div>
     <div class="tips-vertical">
      <h2 class="h2">
       <b>[area1][mkey1][symbolx][pkeyx][symbolx][area1][keyword1][bracketl1][area1][keywordx][bracketr1][symbolx][bracketl2][area1][keywordx][bracketr2][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx]</b>
      </h2>
      <p>
       귀사의 IT 요구에 가장 적합한 제품과 솔루션을 파악할 수 있도록 도와드리겠습니다. 아래의 범주 중 하나를 선택하거나 제품 어드바이저 도구를 사용하여 시작하십시오.
       <ul>
        <li>
         [linkx]
         
        </li>
        <li>
         [linkx]
         
        </li>
        <li>
         [linkx]
         
        </li>
        <li>
         [linkx]
         
        </li>
       </ul>
      </p>
      <ul class="list-links">
       <li>
        [linkx]
        
       </li>
      </ul>
     </div>
     <div class="tips-vertical">
      <h2 class="h2">
       [area1][mkey1][symbolx][pkeyx][symbolx][area1][keyword1][bracketl1][area1][keywordx][bracketr1][symbolx][bracketl2][area1][keywordx][bracketr2][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx]
      </h2>
      <p>
       최신 소프트웨어 및 펌웨어 업데이트를 다운로드하여 APC 제품이 최고의 성능을 유지하도록 하십시오. 시작하려면 모든 다운로드를 검색하십시오.
      </p>
      <ul class="list-links">
       <li>
        [linkx]
        
       </li>
      </ul>
     </div>
    </div>
    <div class="flex-container content-group-2">
     <div class="tips-vertical">
      <h2 class="h2">
       [area1][mkey1][symbolx][pkeyx][symbolx][area1][keyword1][bracketl1][area1][keywordx][bracketr1][symbolx][bracketl2][area1][keywordx][bracketr2][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx]
      </h2>
      <p>
       사용자 설명서에 나와 있는 관련 단계들을 따랐는데도 제품 문제가 해결되지 않을 경우에는 APC가 제공하는 추가 지침 및 권장사항과 지원 커뮤니티를 검색해 보십시오.
       <ul>
        <li>
         [ahref]
         
        </li>
        <li>
         [ahref]
         
        </li>
        <li>
         <a href="/prod_docs/results.cfm?DocType=App%20Note&amp;Query_Type=7&amp;Value=27" target="_blank">
          InfraStruxure
         </a>
        </li>
        <li>
         <a href="/prod_docs/results.cfm?DocType=App%20Note&amp;Query_Type=7&amp;Value=22" target="_blank">
          전력
         </a>
        </li>
        <li>
         [ahref]
         
        </li>
        <li>
         [ahref]
         
        </li>
       </ul>
      </p>
      <ul class="list-links">
       <li>
        [linkx]
        
       </li>
      </ul>
     </div>
     <div class="tips-vertical">
      <h2 class="h2">
       [area1][mkey1][symbolx][pkeyx][symbolx][area1][keyword1][bracketl1][area1][keywordx][bracketr1][symbolx][bracketl2][area1][keywordx][bracketr2][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx]
      </h2>
      <p>
       APC 전반의 주요 기고자들의 앞선 생각이 담긴 콘텐츠를 검색하고 다운로드할 수 있습니다.
       <br/>
       아카이브 검색으로 시작하십시오.
      </p>
      <ul class="list-links">
       <li>
        [ahref]
        
       </li>
      </ul>
     </div>
     <div class="tips-vertical">
      <h2 class="h2">
       <b>[area1][mkey1][symbolx][pkeyx][symbolx][area1][keyword1][bracketl1][area1][keywordx][bracketr1][symbolx][bracketl2][area1][keywordx][bracketr2][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx]</b>
      </h2>
      <p>
       이 간단한 대화형 도구로 데이터와 과학을 이용한 다양한 '가상(what if)' 시나리오를 손쉽게 실험해 봄으로써 결과를 정확하게 예측할 수 있습니다.
이를 통해 데이터 센터 계획 시에 다양한 파라미터를 생성하고 조정하여 필요한 절충안들을 알아낼 수 있습니다.
      </p>
      <ul class="list-links">
       <li>
        [linkx]
        
       </li>
      </ul>
     </div>
    </div>
    <div class="two-columns">
     <div class="target_content">
      <h2 class="info-article-image__title">
       [area1][mkey1][symbolx][pkeyx][symbolx][area1][keyword1][bracketl1][area1][keywordx][bracketr1][symbolx][bracketl2][area1][keywordx][bracketr2][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx]
      </h2>
      <p>
       누구보다도 먼저 새로운 추이를 알아내고 APC 솔루션에 대해 자세히 알고 싶다면 서둘러 학습 이벤트에 참석하십시오. 온라인 및 직접대면 방식으로 제공되는 이 기회를 통해 APC 전문가와 직접적인 질의응답 시간을 가질 수 있습니다.
       <br/>
      </p>
      <ul>
       <li>
        컨퍼런스
       </li>
       <li>
        세미나
       </li>
       <li>
        무역박람회
       </li>
       <li>
        라이브 웹 세미나
       </li>
       <li>
        온디맨드 웹 세미나
       </li>
      </ul>
      <p>
       [linkx]
       
      </p>
     </div>
     <div class="image">
     </div>
    </div>
   </div>
  </div>
  <div class="footer-container">
   <div class="footer-pusher">
   </div>
   <footer class="apc-footer-wrapper wrapper" id="apcFooterWrapper">
    <section class="footer-subscription--section footer-subscription">
     <div class="footer-subscription-logo">
      <a href="/b2b/en/campaign/life-is-on/life-is-on.jsp" target="_blank">
      </a>
     </div>
     <div class="footer-subscribe js-footer-subscribe footer-apc-subscribe js-footer-apc-subscribe">
      <section class="footer-subscribe-description">
       <p class="footer-subscribe-title">
        이메일에 가입
       </p>
       <p class="footer-subscribe-text">
        <li>[area1][mkey1]</li><li>[area1][keywordx]</li>[ahref]<li>[area1][mkey1]</li>
       </p>
      </section>
      <form class="native-validation js-footer-subscribe-form footer-subscribe-form js-footer-subscribe-form footer-subscribe-form--container" id="mktoForm_1609" method="POST" novalidate="">
      </form>
     </div>
    </section>
    <ul class="footer-information">
     <li>
      [pkeyx][linkx][ahref][area1][keywordx][symbolx][area1][keywordx][symbolx][bracketl1][area1][keywordx][bracketr1][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][ahref][linkx][linkx][ahref][ahref][linkx][area1][mkey1][area1][keywordx][symbolx][area1][keywordx][symbolx][bracketl2][area1][keywordx][bracketr2][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][ahref][area1][keywordx][area1][keywordx][symbolx][area1][keywordx][symbolx][bracketl3][area1][keywordx][bracketr3][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][linkx][linkx][pkeyx][area1][keywordx][symbolx][area1][keywordx][symbolx][bracketl4][area1][keywordx][bracketr4][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][pkeyx][area1][mkey1][area1][keywordx][area1][mkey1][area1][keywordx][area1][keywordx][area1][keywordx][ahref][area1][keywordx][linkx]
     </li>
     <li>
      <p>
       소셜 미디어
      </p>
      <ul>
       <li>
        [ahref]
        
       </li>
       <li>
        <a href="/" target="_blank">
         APC Blog
        </a>
       </li>
       <li>
        [ahref]
        
       </li>
       <li>
        [ahref]
        
       </li>
      </ul>
     </li>
     <li>
      <p>
       리셀러 검색
      </p>
      <form action="/kr/ko/tools/locator/" method="GET" target="_blank">
       <div class="code-inputs">
       </div>
      </form>
     </li>
     <li>
      <p>
       키코드 검색
      </p>
      <form action="/kr/ko/sdltfosvc/apc/promocode.request" method="POST" target="_blank">
      </form>
     </li>
     <ul class="footer-links">
      <li>
       <ul class="footer-social">
        <li>
         [linkx]
         
        </li>
        <li>
         [ahref]
         
        </li>
        <li>
         [ahref]
         
        </li>
        <li>
         [ahref]
         
        </li>
        <li>
         <a href="/kr/ko/tools/rss/index.cfm" target="_blank" title="RSS">
          <i class="ic-rss">
          </i>
         </a>
        </li>
       </ul>
      </li>
     </ul>
    </ul>
   </footer>
   <div class="footer-bottom-bar" id="footerBottomBar">
    <div class="wrapper">
     <ul class="footer-legal">
      <li class="footer-legal__list-item">
       [linkx]
       
      </li>
      <li class="footer-legal__list-item">
       [ahref]
       
      </li>
      <li class="footer-legal__list-item">
       2019, APC by Schneider Electric
      </li>
     </ul>
    </div>
   </div>
   <div>
    <div class="overlaying-mobile-search-area-wrap js-global-search js-global-search_mobile">
     <div class="overlaying-mobile-search-area js-overlaying-mobile-search-area">
      <form action="/shop/kr/ko/search" autocomplete="off" class="overlaying-mobile-search-area__form js-global-search__form js-global-search__form_mobile" data-ajax-source="//www.apc.com/shop/kr/ko/global/searchSuggestions.jsp" data-symbols-limit="3" id="searchFormAPCMob" name="searchFormAPCMob" novalidate="">
       <div class="overlaying-mobile-search-area__field-wrap">
        <button class="overlaying-mobile-search-area__submit js-global-search__submit" type="button">
        </button>
       </div>
      </form>
      <div class="overlaying-mobile-search-area__suggestions js-global-search__suggestions js-global-search__suggestions_mobile">
       <ul class="search-phrase-suggestions-list" id="search-phrase-suggestions-list">
       </ul>
      </div>
     </div>
    </div>
   </div>
  </div>
  <div class="notification notification--cookie js-cookie-notification hidden">
   <div>
    <p>
     더 나은 웹사이트 이용 환경을 제공하기 위해 쿠키를 사용합니다.
     [linkx]
     
     에 따라 슈나이더 일렉트릭 쿠키 사용에 동의합니다.
    </p>
    [linkx]
    
   </div>
  </div>
 </div>
 <b style="color:black;background-color:#a0ffff">
  jnice09-ipp30-wq-zq-0426
 </b>
</body>
|<---