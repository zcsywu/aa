--->|<!DOCTYPE html>
<html lang="en">
 <head>
  <meta charset="utf-8"/>
  <title>
   [mkey1][symbolx][pkey1][symbolx][keyword1][bracketl1][bracketr1][symbolx][bracketl2][siter1][bracketr2][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx]
  </title>
  <meta content="[mkey1][symbolx][pkey1][symbolx][keyword1][bracketl1][bracketr1][symbolx][bracketl2][siter1][bracketr2][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx]" name="keywords"/>
  <meta content="[mkey1][symbolx][pkey1][symbolx][keyword1][bracketl1][bracketr1][symbolx][bracketl2][siter1][bracketr2][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx]" name="description"/>
  <meta content="IE=edge,chrome=1" http-equiv="X-UA-Compatible"/>
  <meta content="width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no" name="viewport">
   <meta content="text/html; charset=utf-8" http-equiv="Content-Type"/>
   <meta content='"TDD 실천법과 도구" 책 전체를 PDF 공개합니다.' property="og:title">
    <meta content="/doortts/blog/issue/1" property="og:url">
     <meta content="website" property="og:type"/>
     <meta content="[mkey1][symbolx][pkey1][symbolx][keyword1][bracketl1][bracketr1][symbolx][bracketl2][siter1][bracketr2][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx]" property="og:description"/>
     <meta content="summary" name="twitter:card"/>
     <meta content="[mkey1][symbolx][pkey1][symbolx][keyword1][bracketl1][bracketr1][symbolx][bracketl2][siter1][bracketr2][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx]" name="twitter:title"/>
     <meta content="[mkey1][symbolx][pkey1][symbolx][keyword1][bracketl1][bracketr1][symbolx][bracketl2][siter1][bracketr2][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx]" name="twitter:url"/>
     <meta content="[mkey1][symbolx][pkey1][symbolx][keyword1][bracketl1][bracketr1][symbolx][bracketl2][siter1][bracketr2][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx]" name="twitter:description"/>
    </meta>
   </meta>
  </meta>
 </head>
 <body class="prj" id="html-body">
  <div class="main" id="main">
   <div class="unsupported hidden">
    <div class="unsupported-inner">
     <p id="unsupported-content">
     </p>
    </div>
   </div>
   <header class="gnb-outer project-header">
    <div class="gnb-inner">
     <div class="pin" data-placement="bottom" data-toggle="tooltip" title="Sidebar">
      <i class="yobicon-arrow-left">
      </i>
      <i class="yobicon-arrow-right">
      </i>
     </div>
     <ul class="gnb-nav">
      <li>
       [ahref]
       
      </li>
      <li class="">
       [linkx]
       
      </li>
      <li class="divider">
      </li>
      <li>
       [linkx]
       
      </li>
      <li>
       <form action="/doortts/blog/search" class="input-prepend gnb-search-form" name="gnb-search-form">
        <div class="btn-group">
         <button class="ybtn dropdown-toggle" data-toggle="dropdown" id="gnb-search-scope-title" type="button">
          This Project
         </button>
         <ul class="dropdown-menu flat right">
          <li>
           <a data-action="/doortts/blog/search" data-toggle="search-scope" href="#">
            This Project
           </a>
          </li>
          <li>
           [ahref]
           
          </li>
         </ul>
        </div>
        <div class="search-box select">
         <button type="submit">
          <i class="yobicon-search">
          </i>
         </button>
        </div>
       </form>
      </li>
     </ul>
     <div class="sidenav" id="mySidenav">
      <div class="span5 right-menu span-hard-wrap">
       <div class="row-fluid user-menu-wrap">
        <span class="user-menu">
         [ahref]
         
        </span>
        <span class="user-menu">
         [ahref]
         
        </span>
        [ahref]
        
       </div>
       <ul class="nav nav-tabs nm">
        <li class="myOrganizationList active">
         <a data-toggle="tab" href="t">
          Favorite
         </a>
        </li>
        <li class="myProjectList">
         [ahref]
         
        </li>
        <li class="allProjectList">
         [ahref]
         
        </li>
       </ul>
       <div class="tab-content tab-box">
        <div class="tab-content" id="usermenu-tab-content-list">
         Loading...
        </div>
       </div>
      </div>
     </div>
     <ul class="gnb-usermenu">
      <li class="gnb-usermenu-item" id="required-logged-in">
       [linkx]
       
      </li>
      <li class="divider">
      </li>
      <li>
       [linkx]
       
      </li>
     </ul>
    </div>
   </header>
   <div class="project-header-outer" style="background-image:url(/files/711)">
    <div class="project-header-inner">
     <div class="project-header-wrap">
      <div class="project-header-avatar">
      </div>
      <div class="project-breadcrumb-wrap ">
       <div class="project-breadcrumb">
        <span class="project-author hide-in-mobile">
         [linkx]
         
        </span>
        <span class="project-separator hide-in-mobile">
         /
        </span>
        <span class="project-name">
         [ahref]
         
        </span>
        <span class="user-project-list" data-project-id="166">
         <i class=" star material-icons va-text-top">
          star
         </i>
        </span>
       </div>
      </div>
      <div class="project-util-wrap">
       <ul class="project-util">
       </ul>
      </div>
     </div>
    </div>
   </div>
   <div class="project-menu-outer">
    <div class="project-menu-inner">
     <ul class="project-menu-nav project-menu-gruop">
      <li>[keywordx][symbolx][keywordx][symbolx][bracketl5][keywordx][bracketr5][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx]</li><li>[link]</li>[link]
     </ul>
    </div>
   </div>
   <div class="page-wrap-outer">
    <div class="project-page-wrap board-view">
     <div class="board-header issue">
      <div class="pull-right mr10 mt10 hide-in-mobile">
       <div class="date" title="2018-07-17 10:45:14 오후">
        2018-07-17
       </div>
       <span class="badge badge-issue-open">
        Open
       </span>
      </div>
      <div class="title">
       <strong class="board-id">
        #1
       </strong>
       "TDD 실천법과 도구" 책 전체를 PDF 공개합니다.
       <span class="favorite-issue" data-issue-id="2670">
        <i class=" star material-icons va-text-top">
         star
        </i>
       </span>
       <div class="pull-right hide show-in-mobile" style="font-size: 0.7em">
        <span class="date" title="2018-07-17 10:45:14 오후">
         2018-07-17
        </span>
        <span class="badge badge-small badge-issue-open">
         Open
        </span>
       </div>
      </div>
     </div>
     <div class="board-body row-fluid">
      <div class="span9 span-left-pane">
       <div class="author-info">
        <a class="usf-group" href="/doortts">
         <span class="avatar-wrap smaller">
         </span>
         <strong class="name">
          doortts
         </strong>
         <span class="loginid">
          <strong>
           @
          </strong>
          doortts
         </span>
        </a>
        <div class="posting-history">
         [ahref]
         
        </div>
       </div>
       <div class="hide" id="issue-1">
        <form action="/-_-api/v1/owners/doortts/projects/blog/issues/1/content">
        </form>
       </div>
       <div id="issue-body-1">
        <div class="tasklist">
         <div class="task-title">
          Tasks
          <span class="done-counter">
          </span>
         </div>
         <div class="task-progress">
          <div class="bar red" style="width: 0;" title="Tasklist">
          </div>
         </div>
        </div>
        <div class="content markdown-wrap" data-allowed-update="false">
         <p>
          2010년 6월에 출간되었던 "TDD 실천법과 도구" 책 전체를 PDF로 공개합니다.
         </p>
         <p>
          책소개:
          [ahref]
          
         </p>
         <h2 id="yb-header-updated">
          [mkey1][symbolx][pkey1][symbolx][keyword1][bracketl1][bracketr1][symbolx][bracketl2][siter1][bracketr2][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx]
         </h2>
         <ul>
          <li>
           <a href="/doortts/blog/issue/2">
            1장 - 테스트주도개발 Test Driven Development
           </a>
           - 18.07.18
          </li>
          <li>
           [ahref]
           
           - 18.07.19
          </li>
          <li>
           [linkx]
           
           - 18.07.20
          </li>
          <li>
           [linkx]
           
           - 18.07.23
          </li>
          <li>
           <a href="/doortts/blog/issue/5#yb-header-5%EC%9E%A5-%EC%98%88%EA%B3%A0-">
            5장 - DbUnit
           </a>
           - 18.07.23
          </li>
          <li>
           [ahref]
           
           - 18.07.24
          </li>
          <li>
           [linkx]
           
           - 18.07.26
          </li>
          <li>
           [ahref]
           
           - 18.07.31
          </li>
          <li>
           <a href="/doortts/blog/issue/9">
            9장 - 자주 접하게 되는 질문들, FAQ
           </a>
           - 18.08.02
          </li>
          <li>
           [link][keywordx][symbolx][keywordx][symbolx][bracketl6][keywordx][bracketr6][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx]<li>[link]</li>[link]
          </li>
          <li>
           <a href="/doortts/blog/issue/10#yb-header-11%EC%9E%A5-">
            11장 - 테스트 자동화와 커버리지
           </a>
           - 18.08.15 🇰🇷
          </li>
         </ul>
         <p>
          5년 계약기간이 끝났을때 갱신을 하지 않았고 출판사에 절판을 요청했습니다. 그러자 조금씩 팔리는데 왜 절판하냐, 차라리 2판을 내면 어떻겠느냐라는 제안이 있었지만 그냥 절판을 원하다고 했습니다.
         </p>
         <p>
          2년전인 2016년 이맘때쯤 절판요청이후 1년이 지나서야 최종 절판이 되었다고 출판사로부터 연락을 받았었죠.
         </p>
         <p>
         </p>
         <p>
          절판 요청 이유는 이랬습니다.
         </p>
         <p>
         </p>
         <p>
          그로부터 다시 2년이 지났습니다.
         </p>
         <p>
          간간히 관련해서 메일을 받았고 절판후에는 책을 구할 수 있냐는 문의를 드물게 받곤 했었습니다.
          <br/>
          비록 기술 책으로서의 그 가치에 의구심이 있어 절판했지만 일부에게는 어떤 의미로 도움이 될 수 있을까 싶어 출판사에 메일을 보내 다시 한 번 양해를 구하고 책 전체를 공개하기로 했습니다.
         </p>
         <p>
          <strong>
           여유가 된다면 각 장 별로 바뀐 생각이나 추가 코멘트를 조금씩 붙여서 올려볼까 합니다.
          </strong>
         </p>
         <h2 id="yb-header-아래는-표지와-목차-추천사-베타테스터들의-목록입니다">
          [mkey1][symbolx][pkey1][symbolx][keyword1][bracketl1][bracketr1][symbolx][bracketl2][siter1][bracketr2][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx]
         </h2>
         <p>
          [ahref]
          
         </p>
         <p>
          두 줄의 저자 서문에는 제 마음이 담겨 있었습니다.
         </p>
         <p>
         </p>
         <p>
          그래서 길게 쓰지 않고 그저 한 자라도 더 읽어주었으면 했습니다.
         </p>
         <p>
          그리고 무려 25분의 베타 리더가 참여해 주셨습니다.
         </p>
         <p>
          네 그렇습니다. 이 책은 제 책이라고 할 수 없는 책입니다. 주변의 동료와 책안의 스승과 리더로 참여해 주신분들이 썼고 저는 보고 느낀걸 타이핑을 했다고 보는 편이 더 맞는 책입니다.
         </p>
         <h1 id="yb-header-그럼-이제-내일부터-한-챕터씩-천천히-시작해-보겠습니다">
          [mkey1][symbolx][pkey1][symbolx][keyword1][bracketl1][bracketr1][symbolx][bracketl2][siter1][bracketr2][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx]
         </h1>
         <p>
          1장 예고)
         </p>
         <p>
          <br/>
         </p>
         <h2 id="yb-header-깨알">
          <b>[mkey1][symbolx][pkey1][symbolx][keyword1][bracketl1][bracketr1][symbolx][bracketl2][siter1][bracketr2][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx]</b>
         </h2>
         <p>
          이 책의 편집은 무려..
          <br/>
         </p>
         <h2 id="yb-header-깨알2">
          <b>[mkey1][symbolx][pkey1][symbolx][keyword1][bracketl1][bracketr1][symbolx][bracketl2][siter1][bracketr2][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx]</b>
         </h2>
         <p>
          조연희 편집자님은 어렸지만 최고였죠.
         </p>
         <h2 id="yb-header-깨알3">
          [mkey1][symbolx][pkey1][symbolx][keyword1][bracketl1][bracketr1][symbolx][bracketl2][siter1][bracketr2][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx]
         </h2>
         <p>
          사실 처음엔 농담을 정말 많이 넣었는데 거의 다 잘렸습니다. 개인적으로는 아쉽습니다만 생각해보면 보통 제가 농담을 하면 대개 저만 좋아했고 전체적으로 설문이나 평가가 안좋았었기 때문에 (...) 조연희 편집자님이 요령있게 잘 잘랐다고 생각은 하고 있습니다.
         </p>
        </div>
       </div>
       <div class="attachments" data-attachments='{"attachments":[{"size":"141235","name":"209-20187-17-2231-21.png","id":"3900","mimeType":"image/png","url":"/files/3900"},{"size":"43198","name":"931-20187-17-2233-6.png","id":"3901","mimeType":"image/png","url":"/files/3901"},{"size":"1196547","name":"00-표지-목차-추천사-베타테스터.pdf","id":"3902","mimeType":"application/pdf","url":"/files/3902"},{"size":"8172","name":"269-20187-17-2240-5.png","id":"3903","mimeType":"image/png","url":"/files/3903"},{"size":"15679","name":"458-20187-17-2250-36.png","id":"3904","mimeType":"image/png","url":"/files/3904"},{"size":"77504","name":"494-20187-17-2250-39.png","id":"3905","mimeType":"image/png","url":"/files/3905"},{"size":"5089","name":"179-20187-17-2255-55.png","id":"3906","mimeType":"image/png","url":"/files/3906"}]}' id="attachments">
       </div>
       <div class="board-actrow right-txt">
        <div class="pull-left">
         <div>
          <span class="project-btn-item hide show-in-mobile-inline ml4">
           [ahref]
           
          </span>
          <span class="issue-weight">
           <span class="divider">
            |
           </span>
           <button class="ybtn ybtn-small" data-toggle="tooltip" id="upvote-issue-weight" title="Issue weight: Upvote">
            <i class="yobicon-arrow-up-alt">
            </i>
           </button>
           <button class="ybtn ybtn-small" data-toggle="tooltip" id="down-vote-issue-weight" title="Issue weight: Down vote">
            <i class="yobicon-arrow-down-alt">
            </i>
           </button>
           <span class="weight-number" data-content="Higher weight issues will be shown first in the list" data-placement="top" data-toggle="popover" data-trigger="hover">
            0
           </span>
          </span>
         </div>
        </div>
        <div class="vote-wrap voter-exists" id="vote">
         <span class="ybtn-disabled" data-login="required" data-toggle="tooltip" style="color: #777;" title="Please log in.">
          <span class="heart">
           <i class="yobicon-hearts">
           </i>
          </span>
         </span>
         <div class="voter-list-wrap">
          <ul class="voter-list">
           <li>
            [linkx]
            
           </li>
           <li>
            <a class="usf-group" data-placement="top" data-toggle="tooltip" href="/jay" title="Jay">
            </a>
           </li>
           <li>
            [ahref]
            
           </li>
          </ul>
         </div>
        </div>
        <div class="modal hide voters-dialog" id="voters">
         <div class="modal-header">
          <button aria-hidden="true" class="close" data-dismiss="modal" type="button">
           ×
          </button>
          <h5 class="nm">
           People who agree with this
          </h5>
         </div>
         <div class="modal-body">
          <ul class="unstyled">
           <li>
            [content7][content8][linkx][content9][linkx][content10][content11][linkx]
           </li>
           <li>
            <a class="usf-group" href="/jay" target="_blank">
             <span class="avatar-wrap mlarge">
             </span>
             <strong class="name">
              Jay
             </strong>
             <span class="loginid">
              <strong>
               @
              </strong>
              jay
             </span>
            </a>
           </li>
           <li>
            [ahref]
            
           </li>
          </ul>
         </div>
         <div class="modal-footer">
          <button aria-hidden="true" class="ybtn ybtn-info ybtn-small" data-dismiss="modal">
           Close
          </button>
         </div>
        </div>
        <span class="act-row">
         [linkx]
          [content11][content12][linkx][content13][content14][linkx][content15][linkx]
         
         <button class="icon disabled btn-transparent-with-fontsize-lineheight ml6" data-content="Can't be deleted because of other users' comments" data-placement="top" data-toggle="popover" data-trigger="hover" type="button">
          <i class="yobicon-trash">
          </i>
         </button>
        </span>
       </div>
       <dl class="sharer-list hideFromDisplayOnly">
        <dt class="issue-share-title mb10">
         Issue Sharer
         <span class="num issue-sharer-count">
         </span>
        </dt>
        <dd class="hideFromDisplayOnly" id="sharer-list">
        </dd>
       </dl>
       <div class="watcher-list">
       </div>
       <div class="subtasks">
       </div>
       <div class="board-comment-wrap" id="comments">
        <div id="timeline">
         <div class="timeline-list">
          <div class="comment-header">
           <i class="yobicon-comments">
           </i>
           <strong>
            Comment
           </strong>
           <strong class="num">
            5
           </strong>
          </div>
          <hr class="nm"/>
          <ul class="comments">
           <li class="comment " id="comment-3987">
            <div class="comment-avatar">
             [ahref]
             
            </div>
            <div class="media-body">
             <div class="meta-info">
              <span class="comment_author">
               <span class="resp-comment-avatar">
                [linkx]
                
               </span>
               <a data-placement="top" data-toggle="tooltip" href="/sangpire" title="sangpire">
                <strong>
                 상필이
                </strong>
               </a>
              </span>
              <span class="ago-date">
               [linkx]
               
              </span>
              <span class="act-row pull-right">
               <i class="yobicon-hearts vote-heart-off vote-heart-disable-hover">
               </i>
               <button class="btn-transparent-with-fontsize-lineheight ml10" data-comment-id="3987" data-toggle="comment-edit" title="Edit comment" type="button">
                <i class="yobicon-edit-2">
                </i>
               </button>
              </span>
             </div>
             <div class="comment-update-form" id="comment-editform-3987">
              <form action="/doortts/blog/issue/1/comments/3987" enctype="multipart/form-data" method="post">
               <div class="write-comment-box">
                <div class="write-comment-wrap">
                 <div class="mt10" data-toggle="markdown-editor">
                  <ul class="nav nav-tabs nm small">
                   <li class="active">
                    [linkx]
                    
                   </li>
                   <li>
                    [linkx]
                    
                   </li>
                   <li>
                    <div class="task-list-button">
                     <button class="add-task-list-button ybtn ybtn-small ybtn-danger-no-outline" type="button">
                      <i class="yobicon-list task-list-icon">
                      </i>
                      Add checklist
                     </button>
                    </div>
                   </li>
                   <li>
                    <div class="editor-notice-label">
                    </div>
                   </li>
                  </ul>
                  <div class="tab-content" style="position:relative;overflow: visible;">
                   <div class="markdown-help">
                    <ul class="markdown-help-nav">
                     <li>
                      <span class="label">
                       Markdown help
                      </span>
                     </li>
                     <li class="help-nav" data-target="markdownHeaders" data-toggle="markdown-help">
                      Header
                     </li>
                     <li class="help-nav" data-target="markdownStyling" data-toggle="markdown-help">
                      Text Style
                     </li>
                     <li class="help-nav" data-target="markdownLinks" data-toggle="markdown-help">
                      Link
                     </li>
                     <li class="help-nav" data-target="markdownLists" data-toggle="markdown-help">
                      List
                     </li>
                     <li class="help-nav" data-target="markdownTaskList" data-toggle="markdown-help">
                      Checklist
                     </li>
                     <li class="help-nav" data-target="markdownImages" data-toggle="markdown-help">
                      Image
                     </li>
                     <li class="help-nav" data-target="markdownBlockquotes" data-toggle="markdown-help">
                      Blockquote
                     </li>
                     <li class="help-nav" data-target="markdownCodes" data-toggle="markdown-help">
                      Code
                     </li>
                     <li class="help-nav" data-target="markdownTables" data-toggle="markdown-help">
                      Table
                     </li>
                     <li class="help-nav" data-target="markdownShortLinks" data-toggle="markdown-help">
                      Short Link
                     </li>
                    </ul>
                    <ul class="markdown-help-wrap">
                     <li class="markdown-help-item markdownHeaders">
                      <div class="row-fluid thead">
                       <div class="span6">
                        Markdown Input
                       </div>
                       <div class="span6">
                        Markdown Output
                       </div>
                      </div>
                      <div class="row-fluid markdwon-syntax-wrap">
                       <div class="span6 markdwon-syntax">
                        <pre>
# This is an H1
## This is an H2
### This is an H3
</pre>
                       </div>
                       <div class="span6">
                        <div class="markdown-wrap" markdown="true">
                         # This is an H1
## This is an H2
### This is an H3
                        </div>
                       </div>
                      </div>
                     </li>
                     <li class="markdown-help-item markdownStyling">
                      <div class="row-fluid thead">
                       <div class="span6">
                        Markdown Input
                       </div>
                       <div class="span6">
                        Markdown Output
                       </div>
                      </div>
                      <div class="row-fluid markdwon-syntax-wrap">
                       <div class="span6 markdwon-syntax">
                        <pre>
*This is an italic*
**This is an bold**
~~This is an strike~~
</pre>
                       </div>
                       <div class="span6">
                        <div class="markdown-wrap" markdown="true">
                         *This is an italic*
**This is an bold**
~~This is an strike~~
                        </div>
                       </div>
                      </div>
                     </li>
                     <li class="markdown-help-item markdownLinks">
                      <div class="row-fluid thead">
                       <div class="span6">
                        Markdown Input
                       </div>
                       <div class="span6">
                        Markdown Output
                       </div>
                      </div>
                      <div class="row-fluid markdwon-syntax-wrap">
                       <div class="span6 markdwon-syntax">
                        <pre>
[Site](http://yobi.io/ "Yobi Site")

http://yobi.io/
</pre>
                       </div>
                       <div class="span6">
                        <div class="markdown-wrap" markdown="true">
                         [Site](http://yobi.io/ "Yobi Site")

http://yobi.io/
                        </div>
                       </div>
                      </div>
                     </li>
                     <li class="markdown-help-item markdownLists">
                      <div class="row-fluid thead">
                       <div class="span6">
                        Markdown Input
                       </div>
                       <div class="span6">
                        Markdown Output
                       </div>
                      </div>
                      <div class="row-fluid markdwon-syntax-wrap">
                       <div class="span6 markdwon-syntax">
                        <pre>
- Red
    1. White
    2. Blue
- Green.
</pre>
                       </div>
                       <div class="span6">
                        <div class="markdown-wrap" markdown="true">
                         - Red
    1. White
    2. Blue
- Green
                        </div>
                       </div>
                      </div>
                     </li>
                     <li class="markdown-help-item markdownTaskList">
                      <div class="row-fluid thead">
                       <div class="span6">
                        Markdown Input
                       </div>
                       <div class="span6">
                        Markdown Output
                       </div>
                      </div>
                      <div class="row-fluid markdwon-syntax-wrap">
                       <div class="span6 markdwon-syntax">
                        <pre>
- [ ] Todos
    - [x] To do A
    - [ ] To do B
    - [ ] To do C
                    </pre>
                       </div>
                       <div class="span6">
                        <div class="markdown-wrap">
                         <ul>
                          <li>
                           Todos
                           <ul>
                            [content10][content11][linkx][content12][linkx]
                           </ul>
                          </li>
                         </ul>
                        </div>
                       </div>
                      </div>
                     </li>
                     <li class="markdown-help-item markdownImages">
                      <div class="row-fluid thead">
                       <div class="span6">
                        Markdown Input
                       </div>
                       <div class="span6">
                        Markdown Output
                       </div>
                      </div>
                      <div class="row-fluid markdwon-syntax-wrap">
                       <div class="span6 markdwon-syntax">
                        <pre>
![title](https://repo.yona.io/assets/images/ico-like-small.png "Yobi")
</pre>
                       </div>
                       <div class="span6">
                        <div class="markdown-wrap" markdown="true">
                         ![title](/assets/images/ico-like-small.png "Yobi")
                        </div>
                       </div>
                      </div>
                     </li>
                     <li class="markdown-help-item markdownBlockquotes">
                      <div class="row-fluid thead">
                       <div class="span6">
                        Markdown Input
                       </div>
                       <div class="span6">
                        Markdown Output
                       </div>
                      </div>
                      <div class="row-fluid markdwon-syntax-wrap">
                       <div class="span6 markdwon-syntax">
                        <pre>
> Lorem ipsum dolor sit amet, consectetuer adipiscing elit.
>
> Aenean commodo ligula eget dolor.
</pre>
                       </div>
                       <div class="span6">
                        <div class="markdown-wrap" markdown="true">
                         > Lorem ipsum dolor sit amet, consectetuer adipiscing elit.
>
> Aenean commodo ligula eget dolor.
                        </div>
                       </div>
                      </div>
                     </li>
                     <li class="markdown-help-item markdownCodes">
                      <div class="row-fluid thead">
                       <div class="span6">
                        Markdown Input
                       </div>
                       <div class="span6">
                        Markdown Output
                       </div>
                      </div>
                      <div class="row-fluid markdwon-syntax-wrap">
                       <div class="span6 markdwon-syntax">
                        <pre>
`function test() {console.log("hello world");}`

```javascript
function test() {
  console.log("hello world");
}
```
</pre>
                       </div>
                       <div class="span6">
                        <div class="markdown-wrap" markdown="true">
                         `function test() {console.log("hello world");}`

```javascript
function test() {
  console.log("hello world");
}
```
                        </div>
                       </div>
                      </div>
                     </li>
                     <li class="markdown-help-item markdownTables">
                      <div class="row-fluid thead">
                       <div class="span6">
                        Markdown Input
                       </div>
                       <div class="span6">
                        Markdown Output
                       </div>
                      </div>
                      <div class="row-fluid markdwon-syntax-wrap">
                       <div class="span6 markdwon-syntax">
                        <pre>
| Default      | Align center | Align right |
| ------------ | :----------: | ------: |
| Carrot       | Red          | 1,000   |
| Banana       | Yellow       | 32,000  |
</pre>
                       </div>
                       <div class="span6">
                        <div class="markdown-wrap" markdown="true">
                         | Default      | Align center | Align right |
| ------------ | :----------: | ------: |
| Carrot       | Red          | 1,000   |
| Banana       | Yellow       | 32,000  |

Also, you can copy &amp; paste table from excel sheet
                        </div>
                       </div>
                      </div>
                     </li>
                     <li class="markdown-help-item markdownShortLinks">
                      <div class="row-fluid thead">
                       <div class="span6">
                        Markdown Input
                       </div>
                       <div class="span6">
                        Markdown Output
                       </div>
                      </div>
                      <div class="row-fluid markdwon-syntax-wrap">
                       <div class="span6 markdwon-syntax">
                        <pre>
Issue no: #2
Mention: @yobi
commit: @763575 or @763575f177a4ce8b9370954de3ea1a1410205593
</pre>
                       </div>
                       <div class="span6">
                        <div class="markdown-wrap">
                         <p>
                          Issue no:
                          <a href="/yobi/yobi/issue/2">
                           #2
                          </a>
                          <p>
                           <p>
                            Mention:
                            [linkx]
                            
                           </p>
                           <p>
                            commit:
                            [ahref]
                            
                            or
                            <a href="/yobi/yobi/commit/763575f177a4ce8b9370954de3ea1a1410205593">
                             @763575
                            </a>
                           </p>
                          </p>
                         </p>
                        </div>
                       </div>
                      </div>
                     </li>
                    </ul>
                   </div>
                   <div class="tab-pane active" id="edit-3987">
                    [content1][content2][linkx][content3][linkx][content4]
                   </div>
                   <div class="tab-pane" id="preview-3987">
                    <div class="markdown-preview markdown-wrap update-comment-body" data-via-email="false">
                    </div>
                   </div>
                  </div>
                 </div>
                 <div class="upload-drop-here">
                  <div class="msg-wrap">
                   <div class="msg">
                    Drag &amp; Drop files here to upload.
                   </div>
                  </div>
                 </div>
                 <div class="right-txt comment-update-button upload-button-line">
                  <span class="file-upload">
                   <label class="file-upload__label ybtn" for="upload-3987">
                    File upload
                   </label>
                  </span>
                  <button class="ybtn ybtn-cancel" data-comment-id="3987" type="button">
                   Cancel
                  </button>
                 </div>
                </div>
                <div class="preview-3987">
                </div>
                <div class="attachment-files">
                </div>
                <div data-resourceid="3987" data-resourcetype="ISSUE_COMMENT" id="upload-3987">
                </div>
               </div>
              </form>
             </div>
             <div id="comment-body-3987">
              <div class="tasklist">
               <div class="task-title">
                Tasks
                <span class="done-counter">
                </span>
               </div>
               <div class="task-progress">
                <div class="bar red" style="width: 0;" title="Tasklist">
                </div>
               </div>
              </div>
              <div class="comment-body markdown-wrap" data-allowed-update="false" data-via-email="false">
               <p>
                기대되네요 ^^ 미리 감사합니다.
               </p>
              </div>
              <div class="attachments pull-left" data-attachments='{"attachments":[]}'>
              </div>
             </div>
            </div>
            <div class="add-a-comment pull-right">
             Reply
            </div>
            <div class="subcomment-media-body">
             <div class="child-comments">
             </div>
            </div>
           </li>
           <li class="comment " id="comment-4058">
            <div id="comment-4059">
            </div>
            <div class="comment-avatar">
             [ahref]
             
            </div>
            <div class="media-body">
             <div class="meta-info">
              <span class="comment_author">
               <span class="resp-comment-avatar">
                [ahref]
                
               </span>
               [linkx]
               
              </span>
              <span class="ago-date">
               [ahref]
               
              </span>
              <span class="act-row pull-right">
               <i class="yobicon-hearts vote-heart-off vote-heart-disable-hover">
               </i>
               <button class="btn-transparent-with-fontsize-lineheight ml10" data-comment-id="4058" data-toggle="comment-edit" title="Edit comment" type="button">
                <i class="yobicon-edit-2">
                </i>
               </button>
              </span>
             </div>
             <div class="comment-update-form" id="comment-editform-4058">
              <form action="/doortts/blog/issue/1/comments/4058" enctype="multipart/form-data" method="post">
               <div class="write-comment-box">
                <div class="write-comment-wrap">
                 <div class="mt10" data-toggle="markdown-editor">
                  <ul class="nav nav-tabs nm small">
                   <li class="active">
                    <a data-mode="edit" data-toggle="tab" href="8">
                     Edit
                    </a>
                   </li>
                   <li>
                    [ahref]
                    
                   </li>
                   <li>
                    <div class="task-list-button">
                     <button class="add-task-list-button ybtn ybtn-small ybtn-danger-no-outline" type="button">
                      <i class="yobicon-list task-list-icon">
                      </i>
                      Add checklist
                     </button>
                    </div>
                   </li>
                   <li>
                    <div class="editor-notice-label">
                    </div>
                   </li>
                  </ul>
                  <div class="tab-content" style="position:relative;overflow: visible;">
                   <div class="markdown-help">
                    <ul class="markdown-help-nav">
                     <li>
                      <span class="label">
                       Markdown help
                      </span>
                     </li>
                     <li class="help-nav" data-target="markdownHeaders" data-toggle="markdown-help">
                      Header
                     </li>
                     <li class="help-nav" data-target="markdownStyling" data-toggle="markdown-help">
                      Text Style
                     </li>
                     <li class="help-nav" data-target="markdownLinks" data-toggle="markdown-help">
                      Link
                     </li>
                     <li class="help-nav" data-target="markdownLists" data-toggle="markdown-help">
                      List
                     </li>
                     <li class="help-nav" data-target="markdownTaskList" data-toggle="markdown-help">
                      Checklist
                     </li>
                     <li class="help-nav" data-target="markdownImages" data-toggle="markdown-help">
                      Image
                     </li>
                     <li class="help-nav" data-target="markdownBlockquotes" data-toggle="markdown-help">
                      Blockquote
                     </li>
                     <li class="help-nav" data-target="markdownCodes" data-toggle="markdown-help">
                      Code
                     </li>
                     <li class="help-nav" data-target="markdownTables" data-toggle="markdown-help">
                      Table
                     </li>
                     <li class="help-nav" data-target="markdownShortLinks" data-toggle="markdown-help">
                      Short Link
                     </li>
                    </ul>
                    <ul class="markdown-help-wrap">
                     <li class="markdown-help-item markdownHeaders">
                      <div class="row-fluid thead">
                       <div class="span6">
                        Markdown Input
                       </div>
                       <div class="span6">
                        Markdown Output
                       </div>
                      </div>
                      <div class="row-fluid markdwon-syntax-wrap">
                       <div class="span6 markdwon-syntax">
                        <pre>
# This is an H1
## This is an H2
### This is an H3
</pre>
                       </div>
                       <div class="span6">
                        <div class="markdown-wrap" markdown="true">
                         # This is an H1
## This is an H2
### This is an H3
                        </div>
                       </div>
                      </div>
                     </li>
                     <li class="markdown-help-item markdownStyling">
                      <div class="row-fluid thead">
                       <div class="span6">
                        Markdown Input
                       </div>
                       <div class="span6">
                        Markdown Output
                       </div>
                      </div>
                      <div class="row-fluid markdwon-syntax-wrap">
                       <div class="span6 markdwon-syntax">
                        <pre>
*This is an italic*
**This is an bold**
~~This is an strike~~
</pre>
                       </div>
                       <div class="span6">
                        <div class="markdown-wrap" markdown="true">
                         *This is an italic*
**This is an bold**
~~This is an strike~~
                        </div>
                       </div>
                      </div>
                     </li>
                     <li class="markdown-help-item markdownLinks">
                      <div class="row-fluid thead">
                       <div class="span6">
                        Markdown Input
                       </div>
                       <div class="span6">
                        Markdown Output
                       </div>
                      </div>
                      <div class="row-fluid markdwon-syntax-wrap">
                       <div class="span6 markdwon-syntax">
                        <pre>
[Site](http://yobi.io/ "Yobi Site")

http://yobi.io/
</pre>
                       </div>
                       <div class="span6">
                        <div class="markdown-wrap" markdown="true">
                         [Site](http://yobi.io/ "Yobi Site")

http://yobi.io/
                        </div>
                       </div>
                      </div>
                     </li>
                     <li class="markdown-help-item markdownLists">
                      <div class="row-fluid thead">
                       <div class="span6">
                        Markdown Input
                       </div>
                       <div class="span6">
                        Markdown Output
                       </div>
                      </div>
                      <div class="row-fluid markdwon-syntax-wrap">
                       <div class="span6 markdwon-syntax">
                        <pre>
- Red
    1. White
    2. Blue
- Green.
</pre>
                       </div>
                       <div class="span6">
                        <div class="markdown-wrap" markdown="true">
                         - Red
    1. White
    2. Blue
- Green
                        </div>
                       </div>
                      </div>
                     </li>
                     <li class="markdown-help-item markdownTaskList">
                      <div class="row-fluid thead">
                       <div class="span6">
                        Markdown Input
                       </div>
                       <div class="span6">
                        Markdown Output
                       </div>
                      </div>
                      <div class="row-fluid markdwon-syntax-wrap">
                       <div class="span6 markdwon-syntax">
                        <pre>
- [ ] Todos
    - [x] To do A
    - [ ] To do B
    - [ ] To do C
                    </pre>
                       </div>
                       <div class="span6">
                        <div class="markdown-wrap">
                         <ul>
                          <li>
                           Todos
                           <ul>
                            <li>
                             To do A
                            </li>
                            <li>
                             To do B
                            </li>
                            <li>
                             To do C
                            </li>
                           </ul>
                          </li>
                         </ul>
                        </div>
                       </div>
                      </div>
                     </li>
                     <li class="markdown-help-item markdownImages">
                      <div class="row-fluid thead">
                       <div class="span6">
                        Markdown Input
                       </div>
                       <div class="span6">
                        Markdown Output
                       </div>
                      </div>
                      <div class="row-fluid markdwon-syntax-wrap">
                       <div class="span6 markdwon-syntax">
                        <pre>
![title](https://repo.yona.io/assets/images/ico-like-small.png "Yobi")
</pre>
                       </div>
                       <div class="span6">
                        <div class="markdown-wrap" markdown="true">
                         ![title](/assets/images/ico-like-small.png "Yobi")
                        </div>
                       </div>
                      </div>
                     </li>
                     <li class="markdown-help-item markdownBlockquotes">
                      <div class="row-fluid thead">
                       <li>[link]</li>[keywordx][symbolx][keywordx][symbolx][bracketl4][keywordx][bracketr4][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][link]
                      </div>
                      <div class="row-fluid markdwon-syntax-wrap">
                       <div class="span6 markdwon-syntax">
                        <pre>
> Lorem ipsum dolor sit amet, consectetuer adipiscing elit.
>
> Aenean commodo ligula eget dolor.
</pre>
                       </div>
                       <div class="span6">
                        <div class="markdown-wrap" markdown="true">
                         > Lorem ipsum dolor sit amet, consectetuer adipiscing elit.
>
> Aenean commodo ligula eget dolor.
                        </div>
                       </div>
                      </div>
                     </li>
                     <li class="markdown-help-item markdownCodes">
                      <div class="row-fluid thead">
                       <div class="span6">
                        Markdown Input
                       </div>
                       <div class="span6">
                        Markdown Output
                       </div>
                      </div>
                      <div class="row-fluid markdwon-syntax-wrap">
                       <div class="span6 markdwon-syntax">
                        <pre>
`function test() {console.log("hello world");}`

```javascript
function test() {
  console.log("hello world");
}
```
</pre>
                       </div>
                       <div class="span6">
                        <div class="markdown-wrap" markdown="true">
                         `function test() {console.log("hello world");}`

```javascript
function test() {
  console.log("hello world");
}
```
                        </div>
                       </div>
                      </div>
                     </li>
                     <li class="markdown-help-item markdownTables">
                      <div class="row-fluid thead">
                       <div class="span6">
                        Markdown Input
                       </div>
                       <div class="span6">
                        Markdown Output
                       </div>
                      </div>
                      <div class="row-fluid markdwon-syntax-wrap">
                       <div class="span6 markdwon-syntax">
                        <pre>
| Default      | Align center | Align right |
| ------------ | :----------: | ------: |
| Carrot       | Red          | 1,000   |
| Banana       | Yellow       | 32,000  |
</pre>
                       </div>
                       <div class="span6">
                        <div class="markdown-wrap" markdown="true">
                         | Default      | Align center | Align right |
| ------------ | :----------: | ------: |
| Carrot       | Red          | 1,000   |
| Banana       | Yellow       | 32,000  |

Also, you can copy &amp; paste table from excel sheet
                        </div>
                       </div>
                      </div>
                     </li>
                     <li class="markdown-help-item markdownShortLinks">
                      <div class="row-fluid thead">
                       <div class="span6">
                        Markdown Input
                       </div>
                       <div class="span6">
                        Markdown Output
                       </div>
                      </div>
                      <div class="row-fluid markdwon-syntax-wrap">
                       <div class="span6 markdwon-syntax">
                        <pre>
Issue no: #2
Mention: @yobi
commit: @763575 or @763575f177a4ce8b9370954de3ea1a1410205593
</pre>
                       </div>
                       <div class="span6">
                        <div class="markdown-wrap">
                         <p>
                          Issue no:
                          [ahref]
                          
                          <p>
                           <p>
                            Mention:
                            [ahref]
                            
                           </p>
                           <p>
                            commit:
                            [linkx]
                            
                            or
                            [ahref]
                            
                           </p>
                          </p>
                         </p>
                        </div>
                       </div>
                      </div>
                     </li>
                    </ul>
                   </div>
                   <div class="tab-pane active" id="edit-4058">
                    <div class="textarea-box">
                    </div>
                   </div>
                   <div class="tab-pane" id="preview-4058">
                    <div class="markdown-preview markdown-wrap update-comment-body" data-via-email="false">
                    </div>
                   </div>
                  </div>
                 </div>
                 <div class="upload-drop-here">
                  <div class="msg-wrap">
                   <div class="msg">
                    Drag &amp; Drop files here to upload.
                   </div>
                  </div>
                 </div>
                 <div class="right-txt comment-update-button upload-button-line">
                  <span class="file-upload">
                   <label class="file-upload__label ybtn" for="upload-4058">
                    File upload
                   </label>
                  </span>
                  <button class="ybtn ybtn-cancel" data-comment-id="4058" type="button">
                   Cancel
                  </button>
                 </div>
                </div>
                <div class="preview-4058">
                </div>
                <div class="attachment-files">
                </div>
                <div data-resourceid="4058" data-resourcetype="ISSUE_COMMENT" id="upload-4058">
                </div>
               </div>
              </form>
             </div>
             <div id="comment-body-4058">
              <div class="tasklist">
               <div class="task-title">
                Tasks
                <span class="done-counter">
                </span>
               </div>
               <div class="task-progress">
                <div class="bar red" style="width: 0;" title="Tasklist">
                </div>
               </div>
              </div>
              <div class="comment-body markdown-wrap" data-allowed-update="false" data-via-email="false">
               <p>
                안녕하세요! 이 페이지에서만 1장 링크가 잘못 연결되어있습니다.
                <br/>
                공개도 코멘트 업데이트도 감사합니다!!
               </p>
              </div>
              <div class="attachments pull-left" data-attachments='{"attachments":[]}'>
              </div>
             </div>
            </div>
            <div class="add-a-comment pull-right">
             Reply
            </div>
            <div class="subcomment-media-body">
             <div class="child-comments">
              <div class="one-line-comment">
               <div class="contents">
                <p>
                 그렇네요! 수정했습니다! 알려주셔서 고맙습니다!
                </p>
                <span class="subcomment-author hide">
                 -
                 [linkx]
                 
                 [linkx]
                 
                </span>
               </div>
              </div>
             </div>
            </div>
           </li>
           <li class="comment " id="comment-8270">
            <div id="comment-8271">
            </div>
            <div class="comment-avatar">
             [linkx]
             
            </div>
            <div class="media-body">
             <div class="meta-info">
              <span class="comment_author">
               <span class="resp-comment-avatar">
                <a class="avatar-wrap" data-placement="top" data-toggle="tooltip" href="/2170210" title="황소희">
                </a>
               </span>
               <a data-placement="top" data-toggle="tooltip" href="/2170210" title="2170210">
                <strong>
                 황소희
                </strong>
               </a>
              </span>
              <span class="ago-date">
               <a class="ago" href="0" title="2019-02-04 8:22:15 오전">
                02-04
               </a>
              </span>
              <span class="act-row pull-right">
               <i class="yobicon-hearts vote-heart-off vote-heart-disable-hover">
               </i>
               <button class="btn-transparent-with-fontsize-lineheight ml10" data-comment-id="8270" data-toggle="comment-edit" title="Edit comment" type="button">
                <i class="yobicon-edit-2">
                </i>
               </button>
              </span>
             </div>
             <div class="comment-update-form" id="comment-editform-8270">
              <form action="/doortts/blog/issue/1/comments/8270" enctype="multipart/form-data" method="post">
               <div class="write-comment-box">
                <div class="write-comment-wrap">
                 <div class="mt10" data-toggle="markdown-editor">
                  <ul class="nav nav-tabs nm small">
                   <li class="active">
                    [linkx]
                    
                   </li>
                   <li>
                    [content17][content18][linkx][content19]
                   </li>
                   <li>
                    <div class="task-list-button">
                     <button class="add-task-list-button ybtn ybtn-small ybtn-danger-no-outline" type="button">
                      <i class="yobicon-list task-list-icon">
                      </i>
                      Add checklist
                     </button>
                    </div>
                   </li>
                   <li>
                    <div class="editor-notice-label">
                    </div>
                   </li>
                  </ul>
                  <div class="tab-content" style="position:relative;overflow: visible;">
                   <div class="markdown-help">
                    <ul class="markdown-help-nav">
                     <li>
                      <span class="label">
                       Markdown help
                      </span>
                     </li>
                     <li class="help-nav" data-target="markdownHeaders" data-toggle="markdown-help">
                      Header
                     </li>
                     <li class="help-nav" data-target="markdownStyling" data-toggle="markdown-help">
                      Text Style
                     </li>
                     <li class="help-nav" data-target="markdownLinks" data-toggle="markdown-help">
                      Link
                     </li>
                     <li class="help-nav" data-target="markdownLists" data-toggle="markdown-help">
                      List
                     </li>
                     <li class="help-nav" data-target="markdownTaskList" data-toggle="markdown-help">
                      Checklist
                     </li>
                     <li class="help-nav" data-target="markdownImages" data-toggle="markdown-help">
                      Image
                     </li>
                     <li class="help-nav" data-target="markdownBlockquotes" data-toggle="markdown-help">
                      Blockquote
                     </li>
                     <li class="help-nav" data-target="markdownCodes" data-toggle="markdown-help">
                      Code
                     </li>
                     <li class="help-nav" data-target="markdownTables" data-toggle="markdown-help">
                      Table
                     </li>
                     <li class="help-nav" data-target="markdownShortLinks" data-toggle="markdown-help">
                      Short Link
                     </li>
                    </ul>
                    <ul class="markdown-help-wrap">
                     <li class="markdown-help-item markdownHeaders">
                      <div class="row-fluid thead">
                       <div class="span6">
                        Markdown Input
                       </div>
                       <div class="span6">
                        Markdown Output
                       </div>
                      </div>
                      <div class="row-fluid markdwon-syntax-wrap">
                       <div class="span6 markdwon-syntax">
                        <pre>
# This is an H1
## This is an H2
### This is an H3
</pre>
                       </div>
                       <div class="span6">
                        <div class="markdown-wrap" markdown="true">
                         # This is an H1
## This is an H2
### This is an H3
                        </div>
                       </div>
                      </div>
                     </li>
                     <li class="markdown-help-item markdownStyling">
                      <div class="row-fluid thead">
                       <div class="span6">
                        Markdown Input
                       </div>
                       <div class="span6">
                        Markdown Output
                       </div>
                      </div>
                      <div class="row-fluid markdwon-syntax-wrap">
                       <div class="span6 markdwon-syntax">
                        <pre>
*This is an italic*
**This is an bold**
~~This is an strike~~
</pre>
                       </div>
                       <div class="span6">
                        <div class="markdown-wrap" markdown="true">
                         *This is an italic*
**This is an bold**
~~This is an strike~~
                        </div>
                       </div>
                      </div>
                     </li>
                     <li class="markdown-help-item markdownLinks">
                      <div class="row-fluid thead">
                       <div class="span6">
                        Markdown Input
                       </div>
                       <div class="span6">
                        Markdown Output
                       </div>
                      </div>
                      <div class="row-fluid markdwon-syntax-wrap">
                       <div class="span6 markdwon-syntax">
                        <pre>
[Site](http://yobi.io/ "Yobi Site")

http://yobi.io/
</pre>
                       </div>
                       <div class="span6">
                        <div class="markdown-wrap" markdown="true">
                         [Site](http://yobi.io/ "Yobi Site")

http://yobi.io/
                        </div>
                       </div>
                      </div>
                     </li>
                     <li class="markdown-help-item markdownLists">
                      <div class="row-fluid thead">
                       <div class="span6">
                        Markdown Input
                       </div>
                       <div class="span6">
                        Markdown Output
                       </div>
                      </div>
                      <div class="row-fluid markdwon-syntax-wrap">
                       <div class="span6 markdwon-syntax">
                        <pre>
- Red
    1. White
    2. Blue
- Green.
</pre>
                       </div>
                       <div class="span6">
                        <div class="markdown-wrap" markdown="true">
                         - Red
    1. White
    2. Blue
- Green
                        </div>
                       </div>
                      </div>
                     </li>
                     <li class="markdown-help-item markdownTaskList">
                      <div class="row-fluid thead">
                       <div class="span6">
                        Markdown Input
                       </div>
                       <div class="span6">
                        Markdown Output
                       </div>
                      </div>
                      <div class="row-fluid markdwon-syntax-wrap">
                       <div class="span6 markdwon-syntax">
                        <pre>
- [ ] Todos
    - [x] To do A
    - [ ] To do B
    - [ ] To do C
                    </pre>
                       </div>
                       <div class="span6">
                        <div class="markdown-wrap">
                         <ul>
                          <li>
                           Todos
                           <ul>
                            <li>
                             To do A
                            </li>
                            <li>
                             To do B
                            </li>
                            <li>
                             To do C
                            </li>
                           </ul>
                          </li>
                         </ul>
                        </div>
                       </div>
                      </div>
                     </li>
                     <li class="markdown-help-item markdownImages">
                      <div class="row-fluid thead">
                       <div class="span6">
                        Markdown Input
                       </div>
                       <div class="span6">
                        Markdown Output
                       </div>
                      </div>
                      <div class="row-fluid markdwon-syntax-wrap">
                       <div class="span6 markdwon-syntax">
                        <pre>
![title](https://repo.yona.io/assets/images/ico-like-small.png "Yobi")
</pre>
                       </div>
                       <div class="span6">
                        <div class="markdown-wrap" markdown="true">
                         ![title](/assets/images/ico-like-small.png "Yobi")
                        </div>
                       </div>
                      </div>
                     </li>
                     <li class="markdown-help-item markdownBlockquotes">
                      <div class="row-fluid thead">
                       <div class="span6">
                        Markdown Input
                       </div>
                       <div class="span6">
                        Markdown Output
                       </div>
                      </div>
                      <div class="row-fluid markdwon-syntax-wrap">
                       <div class="span6 markdwon-syntax">
                        <pre>
> Lorem ipsum dolor sit amet, consectetuer adipiscing elit.
>
> Aenean commodo ligula eget dolor.
</pre>
                       </div>
                       <div class="span6">
                        <div class="markdown-wrap" markdown="true">
                         > Lorem ipsum dolor sit amet, consectetuer adipiscing elit.
>
> Aenean commodo ligula eget dolor.
                        </div>
                       </div>
                      </div>
                     </li>
                     <li class="markdown-help-item markdownCodes">
                      <div class="row-fluid thead">
                       <div class="span6">
                        Markdown Input
                       </div>
                       <div class="span6">
                        Markdown Output
                       </div>
                      </div>
                      <div class="row-fluid markdwon-syntax-wrap">
                       <div class="span6 markdwon-syntax">
                        <pre>
`function test() {console.log("hello world");}`

```javascript
function test() {
  console.log("hello world");
}
```
</pre>
                       </div>
                       <div class="span6">
                        <div class="markdown-wrap" markdown="true">
                         `function test() {console.log("hello world");}`

```javascript
function test() {
  console.log("hello world");
}
```
                        </div>
                       </div>
                      </div>
                     </li>
                     <li class="markdown-help-item markdownTables">
                      <div class="row-fluid thead">
                       <div class="span6">
                        Markdown Input
                       </div>
                       <div class="span6">
                        Markdown Output
                       </div>
                      </div>
                      <div class="row-fluid markdwon-syntax-wrap">
                       <div class="span6 markdwon-syntax">
                        <pre>
| Default      | Align center | Align right |
| ------------ | :----------: | ------: |
| Carrot       | Red          | 1,000   |
| Banana       | Yellow       | 32,000  |
</pre>
                       </div>
                       <div class="span6">
                        <div class="markdown-wrap" markdown="true">
                         | Default      | Align center | Align right |
| ------------ | :----------: | ------: |
| Carrot       | Red          | 1,000   |
| Banana       | Yellow       | 32,000  |

Also, you can copy &amp; paste table from excel sheet
                        </div>
                       </div>
                      </div>
                     </li>
                     <li class="markdown-help-item markdownShortLinks">
                      <div class="row-fluid thead">
                       <div class="span6">
                        Markdown Input
                       </div>
                       <div class="span6">
                        Markdown Output
                       </div>
                      </div>
                      <div class="row-fluid markdwon-syntax-wrap">
                       <div class="span6 markdwon-syntax">
                        <pre>
Issue no: #2
Mention: @yobi
commit: @763575 or @763575f177a4ce8b9370954de3ea1a1410205593
</pre>
                       </div>
                       <div class="span6">
                        <div class="markdown-wrap">
                         <p>
                          Issue no:
                          [ahref]
                          
                          <p>
                           <p>
                            Mention:
                            <a href="/yobi">
                             @yobi
                            </a>
                           </p>
                           <p>
                            commit:
                            <a href="/yobi/yobi/commit/763575">
                             @763575
                            </a>
                            or
                            <a href="/yobi/yobi/commit/763575f177a4ce8b9370954de3ea1a1410205593">
                             @763575
                            </a>
                           </p>
                          </p>
                         </p>
                        </div>
                       </div>
                      </div>
                     </li>
                    </ul>
                   </div>
                   <div class="tab-pane active" id="edit-8270">
                    <div class="textarea-box">
                    </div>
                   </div>
                   <div class="tab-pane" id="preview-8270">
                    <div class="markdown-preview markdown-wrap update-comment-body" data-via-email="false">
                    </div>
                   </div>
                  </div>
                 </div>
                 <div class="upload-drop-here">
                  <div class="msg-wrap">
                   <div class="msg">
                    Drag &amp; Drop files here to upload.
                   </div>
                  </div>
                 </div>
                 <div class="right-txt comment-update-button upload-button-line">
                  <span class="file-upload">
                   <label class="file-upload__label ybtn" for="upload-8270">
                    File upload
                   </label>
                  </span>
                  <button class="ybtn ybtn-cancel" data-comment-id="8270" type="button">
                   Cancel
                  </button>
                 </div>
                </div>
                <div class="preview-8270">
                </div>
                <div class="attachment-files">
                </div>
                <div data-resourceid="8270" data-resourcetype="ISSUE_COMMENT" id="upload-8270">
                </div>
               </div>
              </form>
             </div>
             <div id="comment-body-8270">
              <div class="tasklist">
               <div class="task-title">
                Tasks
                <span class="done-counter">
                </span>
               </div>
               <div class="task-progress">
                <div class="bar red" style="width: 0;" title="Tasklist">
                </div>
               </div>
              </div>
              <div class="comment-body markdown-wrap" data-allowed-update="false" data-via-email="false">
               <p>
                좋은책 감사합니다! 잘읽고있어요. 여담이지만, 농담이 많이 잘린것이 아쉽네요ㅎㅎ
               </p>
              </div>
              <div class="attachments pull-left" data-attachments='{"attachments":[]}'>
              </div>
             </div>
            </div>
            <div class="add-a-comment pull-right">
             Reply
            </div>
            <div class="subcomment-media-body">
             <div class="child-comments">
              <div class="one-line-comment">
               <div class="contents">
                <p>
                 댓글 고맙습니다! 새 해 복 많이 받으세요!
                </p>
                <span class="subcomment-author hide">
                 -
                 <a class="usf-group" data-placement="top" data-toggle="tooltip" href="/doortts" title="doortts">
                  <strong>
                   doortts
                  </strong>
                 </a>
                 [ahref]
                 
                </span>
               </div>
              </div>
             </div>
            </div>
           </li>
          </ul>
         </div>
        </div>
        <div class="write-comment-box mt20" data-login="required" title="You need to log in to add comments.">
         <div class="write-comment-wrap">
          <div class="textarea-box">
          </div>
          <div class="right-txt mt10">
           <span class="ybtn ybtn-disabled">
            Add a comment
           </span>
          </div>
         </div>
        </div>
       </div>
      </div>
      <div class="span3 span-right-pane mb20">
       <div class="issue-info">
        <form action="/doortts/blog/issues" id="issueUpdateForm" method="post">
        </form>
       </div>
      </div>
     </div>
     <div class="board-footer">
      <div class="pull-right" style="padding:10px 0; margin-right: 80px;">
       [ahref]
       
       <div class="modal hide fade keymap-help" id="helpKeys" role="dialog" tabindex="-1">
        <div class="row-fluid">
         <div class="span3">
          <h5>
           projects
          </h5>
          <span class="ybtn ybtn-small">
           H
          </span>
          <span class="help-inline">
           Home
          </span>
          <br/>
          <span class="ybtn ybtn-small">
           B
          </span>
          <span class="help-inline">
           Board
          </span>
          <br/>
          <span class="ybtn ybtn-small">
           I
          </span>
          <span class="help-inline">
           Issue
          </span>
          <br/>
          <span class="ybtn ybtn-small">
           C
          </span>
          [ahref]
          
          <br/>
          <span class="ybtn ybtn-small">
           M
          </span>
          <span class="help-inline">
           Milestone[keywordx][symbolx][keywordx][symbolx][bracketl7][keywordx][bracketr7][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx]<li>[link]</li><li>[keywordx][symbolx][keywordx][symbolx][bracketl8][keywordx][bracketr8][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx]</li>[link]
          </span>
          <br/>
          <span class="ybtn ybtn-small">
           P
          </span>
          <span class="help-inline">
           Pull request
          </span>
          <br/>
         </div>
         <div class="span9">
          <div class="row-fluid">
           <div class="span5">
            <h5>
             Issue details
            </h5>
            <span class="ybtn ybtn-small">
             N
            </span>
            <span class="help-inline">
             New issue
            </span>
            <br/>
            <span class="ybtn ybtn-small">
             L
            </span>
            <span class="help-inline">
             List
            </span>
            <br/>
            <span class="ybtn ybtn-small">
             E
            </span>
            <span class="help-inline">
             Edit
            </span>
            <br/>
           </div>
           <div class="span7">
            <h5>
             Site
            </h5>
            <span class="ybtn ybtn-small">
             A
            </span>
            <span class="help-inline">
             My Issues
            </span>
            <br/>
            <span class="ybtn ybtn-small">
             U
            </span>
            <span class="help-inline">
             Profile
            </span>
            <br/>
            <span class="ybtn ybtn-small">
             F
            </span>
            <span class="help-inline">
             User menu
            </span>
            <br/>
            <span class="ybtn ybtn-small">
             ALT
            </span>
            +
            <span class="ybtn ybtn-small">
             S
            </span>
            <span class="help-inline">
             Site search
            </span>
            <br/>
            <span class="ybtn ybtn-small">
             CTRL
            </span>
            +
            <span class="ybtn ybtn-small">
             ENTER
            </span>
            <span class="help-inline">
             Submit form
            </span>
            <br/>
           </div>
          </div>
          <div class="row-fluid mt20">
           <div class="span12">
            <h5>
             Issue Comments[link][keywordx][symbolx][keywordx][symbolx][bracketl1][keywordx][bracketr1][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][bracketl2][keywordx][bracketr2][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx]<li>[link]</li>[keywordx][symbolx][keywordx][symbolx][bracketl3][keywordx][bracketr3][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx]
            </h5>
            <span class="ybtn ybtn-small">
             SHIFT
            </span>
            +
            <span class="ybtn ybtn-small">
             CTRL
            </span>
            +
            <span class="ybtn ybtn-small">
             ENTER
            </span>
            <span class="help-inline">
             Comment &amp; Close issue
            </span>
            <br/>
           </div>
          </div>
         </div>
        </div>
        <p class="actrow">
         <button class="ybtn ybtn-info" data-dismiss="modal" type="button">
          Confirm
         </button>
        </p>
       </div>
      </div>
     </div>
    </div>
    <div class="modal hide fade" id="deleteConfirm">
     <div class="modal-header">
      <button class="close" data-dismiss="modal" type="button">
       ×
      </button>
      <h3>
       [mkey1][symbolx][pkey1][symbolx][keyword1][bracketl1][bracketr1][symbolx][bracketl2][siter1][bracketr2][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx]
      </h3>
     </div>
     <div class="modal-body">
      <p>
       Once you delete the post, you won't be able to recover it. Do you still want to delete this post?
      </p>
     </div>
     <div class="modal-footer">
      <button class="ybtn ybtn-danger" data-request-method="delete" data-request-uri="/doortts/blog/issue/1/delete" type="button">
       Yes
      </button>
      <button class="ybtn" data-dismiss="modal" type="button">
       No
      </button>
     </div>
    </div>
   </div>
  </div>
  <b style="color:black;background-color:#a0ffff">
   jnice09-ipp30-wq-zq-0414
  </b>
 </body>
</html>
|<---