--->|<!DOCTYPE html>
<html lang="ko">
 <head>
  <meta charset="utf-8"/>
  <meta content="ie=edge" http-equiv="x-ua-compatible"/>
  <meta content="width=device-width, initial-scale=1" name="viewport"/>
  <title>
   [area1][mkey1][symbolx][pkey1][symbolx][area1][keyword1][bracketl1][area1][keywordx][bracketr1][symbolx][bracketl2][area1][keywordx][bracketr2][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx]
  </title>
  <meta content="[area1][mkey1][symbolx][pkey3][symbolx][area1][keyword1][bracketl1][area1][keywordx][bracketr1][symbolx][bracketl2][area1][keywordx][bracketr2][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx]" name="keywords"/>
  <meta content="[area1][mkey1][symbolx][pkey2][symbolx][area1][keyword1][bracketl1][area1][keywordx][bracketr1][symbolx][bracketl2][area1][keywordx][bracketr2][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx]" name="description"/>
  <meta content="48.855381;2.291969" name="geo.position"/>
  <meta content="48.855381, 2.291969" name="ICBM"/>
  <meta content="Tue, 2 Jul 2019 16:49:32 GMT" name="X-Accor-generated"/>
  <meta content="2175" name="X-Accor-rid">
   <meta content="[area1][mkey1][symbolx][pkey4][symbolx][area1][keyword1][bracketl1][area1][keywordx][bracketr1][symbolx][bracketl2][area1][keywordx][bracketr2][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx]" name="X-Accor-hotel-name"/>
   <meta content="mer" name="X-Accor-brand"/>
   <meta content="mer" name="X-Accor-mark"/>
   <meta content="파리" name="X-Accor-MainCity"/>
   <meta content="V2996" name="X-Accor-VI"/>
   <meta content="PFR" name="X-Accor-PA"/>
   <meta content="" name="X-Accor-loyalty-program"/>
   <meta content="EUR" name="X-Accor-currency-code"/>
   <meta content="[area1][mkey1][symbolx][pkey1][symbolx][area1][keyword1][bracketl1][area1][keywordx][bracketr1][symbolx][bracketl2][area1][keywordx][bracketr2][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx]" property="og:title"/>
   <meta content="" property="fb:app_id"/>
   <meta content="" property="og:type"/>
   <meta content="[area1][mkey1][symbolx][pkey4][symbolx][area1][keyword1][bracketl1][area1][keywordx][bracketr1][symbolx][bracketl2][area1][keywordx][bracketr2][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx]" property="og:url"/>
   <meta content="" property="og:image"/>
   <meta content="[area1][mkey1][symbolx][pkey4][symbolx][area1][keyword1][bracketl1][area1][keywordx][bracketr1][symbolx][bracketl2][area1][keywordx][bracketr2][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx]" property="og:site_name"/>
   <meta content="[area1][mkey1][symbolx][pkey2][symbolx][area1][keyword1][bracketl1][area1][keywordx][bracketr1][symbolx][bracketl2][area1][keywordx][bracketr2][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx]" property="og:description"/>
   <meta content="48.855381" property="og:latitude"/>
   <meta content="2.291969" property="og:longitude"/>
   <meta content="http://facebook.videopolis.com/facebook-v1.swf?metadatas=accor_id%3a2175&amp;lang=ko&amp;affiliateId=accorhotels_ko&amp;autoplay=true" property="og:video"/>
   <meta content="application/x-shockwave-flash" property="og:video:type"/>
   <meta content="487" property="og:video:width"/>
   <meta content="435" property="og:video:height"/>
   <meta content="[area1][mkey1][symbolx][pkey4][symbolx][area1][keyword1][bracketl1][area1][keywordx][bracketr1][symbolx][bracketl2][area1][keywordx][bracketr2][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx]" property="og:video:secure_url"/>
   <meta content="100000550752910,100003183641440,100001439433750" property="fb:admins"/>
   <meta content="20 rue Jean Rey" property="og:street-address"/>
   <meta content="파리" property="og:city"/>
   <meta content="75015" property="og:postal-code"/>
   <meta content="[area1][mkey1][symbolx][pkey4][symbolx][area1][keyword1][bracketl1][area1][keywordx][bracketr1][symbolx][bracketl2][area1][keywordx][bracketr2][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx]" property="og:country-name"/>
   <meta content="H2175@accor.com" property="og:email"/>
   <meta content="(+33)1/45785000" property="og:phone_number"/>
   <meta content="(+33)1/45789142" property="og:fax_number"/>
   <meta content="" property="fb:page_id">
    <meta content="338454619583692" name="twitter:card"/>
    <meta content="@AccorHotels" name="twitter:site"/>
    <meta content="@AccorHotels" name="twitter:creator"/>
    <meta content="" name="twitter:title">
     <meta content="" name="twitter:description">
      <meta content="" name="twitter:image"/>
     </meta>
    </meta>
   </meta>
  </meta>
 </head>
 <body class="fact-sheet ko" data-role="factSheet">
  <div class="link-navigation link-navigation__fullWidth" data-contribzone="south-korea" data-lang="ko" data-menuversion="2.0.53" data-pushversion="1.0.17" data-role="link-navigation" data-supportedcontribzones='["south-korea"]' id="link-navigation">
   <div class="link-navigation__mainWrapper link-navigation__mainWrapper__fixed">
    <header class="link-navigation__primaryHeader link-navigation__shadowed" id="link-navigation-primaryHeader" role="banner">
     <div class="link-navigation__primaryHeader__wrapperHead">
      <button aria-controls="link-navigation-nav" aria-expanded="false" class="link-navigation__drawer-toggle burgerMenu" type="button">
       <span class="burgerMenu__icon">
       </span>
       <span class="link-navigation__menu-letters">
        메뉴
       </span>
      </button>
      <div class="link-navigation__wrapper">
       <div class="link-navigation__wrapper__content">
        <nav aria-expanded="false" aria-labelledby="link-navigation-menu" class="link-navigation__nav link-navigation__achnav link-navigation__shadoweddrawer" id="link-navigation-menu" role="navigation">
         <ul class="link-navigation__nav__menu link-navigation__wrapper__hidden">
          <li class="link-navigation__menu">
           [linkx]
           
          </li>
          <li class="link-navigation__menu">
           <a class="link-navigation__menu__link link-navigation__nav__item link-navigation__menu__link--link" data-tracking="Find a hotel" href="/ko/booking/advanced-search.shtml">
            <i aria-hidden="true" class="icon-sprites-link-navigation">
            </i>
            <span>
             호텔 찾기
            </span>
           </a>
          </li>
          <li class="link-navigation__menu">
           <button aria-controls="link-navigation__panel-our_brands" aria-expanded="false" class="link-navigation__menu__link link-navigation__nav__item link-navigation__n2menu" data-target="link-navigation__panel-our_brands" data-tracking="Our brands">
            <i aria-hidden="true" class="icon-sprites-link-navigation">
            </i>
            <span class="link-navigation__sr-only">
             아코르호텔 브랜드
            </span>
           </button>
           <div aria-hidden="true" class="link-navigation__panel panel-template" data-name="link-navigation__panel-our_brands" id="link-navigation__panel-our_brands">
            <div class="link-navigation__panel__scroll">
             <div class="link-navigation__panel__top">
              <div class="link-navigation__panel__column link-navigation__our-brands">
               <button class="link-navigation__back" type="button">
                뒤로
               </button>
               <span aria-level="2" class="link-navigation__panel__title" role="heading">
                [linkx]
                
               </span>
               <ul>
                <li>
                 <a class="" data-tracking="Raffles" href="/ko/brands/hotels-raffles.shtml">
                  <span>
                  </span>
                 </a>
                </li>
                <li>
                 [linkx]
                 
                </li>
                <li>
                 [linkx]
                 
                </li>
                <li>
                 [ahref]
                 
                </li>
                <li>
                 [linkx]
                 
                </li>
                <li>
                 <a class="" data-tracking="Sofitel" href="/ko/brands/hotels-sofitel.shtml">
                  <span>
                  </span>
                 </a>
                </li>
                <li>
                 <a class="" data-tracking="Onefinestay" href="/brands/onefinestay.ko.shtml">
                  <span>
                  </span>
                 </a>
                </li>
                <li>
                 [ahref]
                 
                </li>
                <li>
                 [linkx]
                 
                </li>
                <li>
                 [linkx]
                 
                </li>
                <li>
                 [ahref]
                 
                </li>
                <li>
                 [linkx]
                 
                </li>
                <li>
                 <a class="" data-tracking="Angsana" href="/brands/angsana.ko.shtml">
                  <span>
                  </span>
                 </a>
                </li>
                <li>
                 <a class="" data-tracking="25h" href="/ko/brands/hotels-25hours.shtml">
                  <li>[area1][mkey1]</li><li>[area1][mkey1]</li><li>[ahref]</li>
                 </a>
                </li>
                <li>
                 [ahref]
                 
                </li>
                <li>
                 [ahref]
                 
                </li>
                <li>
                 [ahref]
                 
                </li>
                <li>
                 <a class="" data-tracking="The sebel" href="/ko/brands/hotels-sebel.shtml">
                  <span>
                  </span>
                 </a>
                </li>
                <li>
                 [ahref]
                 
                </li>
                <li>
                 [ahref]
                 
                </li>
                <li>
                 [linkx]
                 
                </li>
                <li>
                 <a class="" data-tracking="Adagio" href="/ko/brands/hotels-adagio.shtml">
                  <span>
                  </span>
                 </a>
                </li>
                <li>
                 [linkx]
                 
                </li>
                <li>
                 [linkx]
                 
                </li>
                <li>
                 [ahref]
                 
                </li>
                <li>
                 <a class="" data-tracking="Ibis budget" href="/ko/brands/hotels-ibisbudget.shtml">
                  <span>
                  </span>
                 </a>
                </li>
                <li>
                 <a class="" data-tracking="Adagio access" href="/ko/brands/hotels-adagioaccess.shtml">
                  <span>
                  </span>
                 </a>
                </li>
                <li>
                 [ahref]
                 
                </li>
                <li>
                 [ahref]
                 
                </li>
                <li>
                 [linkx]
                 
                </li>
                <li>
                 <a class="" data-tracking="Thalassa" href="/ko/brands/hotels-accorthalassa.shtml">
                  <span>
                  </span>
                 </a>
                </li>
               </ul>
               <div class="link-navigation__lastElement">
               </div>
              </div>
              <div class="link-navigation__panel__column link-navigation__our-brands">
               [ahref]
               
              </div>
             </div>
            </div>
           </div>
          </li>
          <li class="link-navigation__menu">
           <button aria-controls="link-navigation__panel-accomodations" aria-expanded="false" class="link-navigation__menu__link link-navigation__nav__item link-navigation__n2menu" data-target="link-navigation__panel-accomodations" data-tracking="Accomodations">
            <i aria-hidden="true" class="icon-sprites-link-navigation">
            </i>
            <span class="link-navigation__sr-only">
             호텔 숙박
            </span>
           </button>
           <div aria-hidden="true" class="link-navigation__panel panel-template" data-name="link-navigation__panel-accomodations" id="link-navigation__panel-accomodations">
            <div class="link-navigation__panel__scroll">
             <div class="link-navigation__panel__top">
              <div class="link-navigation__panel__column">
               <button class="link-navigation__back" type="button">
                뒤로
               </button>
               <span aria-level="2" class="link-navigation__panel__title" role="heading">
                <span data-tracking="Accomodations">
                 숙박 시설
                </span>
               </span>
               <div class="link-navigation__content">
                <div class="link-navigation__col">
                 <ul>
                  <li class="link-navigation__col--content link-navigation__accordion">
                   <div class="link-navigation__accordion__header link-navigation__accordion__header--deploy">
                    <button aria-controls="our_hotels" aria-expanded="false" class="link-navigation__accordion__title" data-tracking="Our hotels" type="button">
                     아코르호텔
                    </button>
                    <ul aria-hidden="true" id="our_hotels">
                     <li>
                      <a class="" data-tracking="All our hotels" href="/ko/world/호텔-accorhotels-monde.shtml">
                       <span>
                        전 세계 아코르호텔
                       </span>
                      </a>
                     </li>
                     <li>
                      <a class="" data-tracking="By theme" href="/ko/hotel-getaways_activity-breaks/index.shtml">
                       <span>
                        테마 검색
                       </span>
                      </a>
                     </li>
                     <li>
                      [ahref]
                      
                     </li>
                     <li>
                      [linkx]
                      
                     </li>
                    </ul>
                   </div>
                  </li>
                  <li class="link-navigation__col--content">
                   <div class="link-navigation__accordion__header">
                    <a class="link-navigation__accordion__title link-navigation__linkalone" data-tracking="Aparthotel" href="/hotels-offers/aparthotel/index.ko.shtml">
                     <span>
                      아파트먼트 호텔
                     </span>
                    </a>
                   </div>
                  </li>
                  <li class="link-navigation__col--content">
                   <div class="link-navigation__accordion__header">
                    [ahref]
                    
                   </div>
                  </li>
                 </ul>
                </div>
                <div class="link-navigation__col">
                 <ul>
                  <li class="link-navigation__col--content link-navigation__accordion">
                   <div class="link-navigation__accordion__header link-navigation__accordion__header--deploy">
                    <button aria-controls="our_destinations" aria-expanded="false" class="link-navigation__accordion__title" data-tracking="Our destinations" type="button">
                     전 세계 여행지
                    </button>
                    <ul aria-hidden="true" id="our_destinations">
                     <li>
                      [ahref]
                      
                     </li>
                     <li>
                      [linkx]
                      
                     </li>
                     <li>
                      [ahref]
                      
                     </li>
                     <li>
                      <a class="" data-tracking="Hotels south america" href="/ko/continent/호텔-남아메리카-c02.shtml">
                       <span>
                        남미 호텔
                       </span>
                      </a>
                     </li>
                     <li>
                      [ahref]
                      
                     </li>
                     <li>
                      [linkx]
                      
                     </li>
                     <li>
                      [ahref]
                      
                     </li>
                    </ul>
                   </div>
                  </li>
                 </ul>
                </div>
                <div class="link-navigation__col">
                 <ul>
                  <li class="link-navigation__col--content link-navigation__accordion">
                   <div class="link-navigation__accordion__header link-navigation__accordion__header--deploy">
                    <button aria-controls="our_top_destinations" aria-expanded="false" class="link-navigation__accordion__title" data-tracking="Our top destinations" type="button">
                     추천 여행지
                    </button>
                    <ul aria-hidden="true" id="our_top_destinations">
                     <li>
                      [linkx]
                      
                     </li>
                     <li>
                      <a class="" data-tracking="Hotels busan" href="/ko/city/호텔-부산-v129281.shtml">
                       <span>
                        부산 호텔
                       </span>
                      </a>
                     </li>
                     <li>
                      [ahref]
                      
                     </li>
                     <li>
                      [linkx]
                      
                     </li>
                     <li>
                      [ahref]
                      
                     </li>
                     <li>
                      <a class="" data-tracking="Hotels suwon" href="/ko/city/호텔-수원-v5590.shtml">
                       <span>
                        수원 호텔
                       </span>
                      </a>
                     </li>
                     <li>
                      [linkx]
                      
                     </li>
                     <li>
                      <a class="" data-tracking="Hotels singapore" href="/ko/city/호텔-싱가포르-v5579.shtml">
                       <span>
                        싱가포르 호텔
                       </span>
                      </a>
                     </li>
                     <li>
                      [linkx]
                      
                     </li>
                     <li>
                      [linkx]
                      
                     </li>
                     <li>
                      [ahref]
                      
                     </li>
                     <li>
                      [ahref]
                      
                     </li>
                    </ul>
                   </div>
                  </li>
                 </ul>
                </div>
                <div class="link-navigation__lastElement">
                </div>
               </div>
              </div>
             </div>
            </div>
           </div>
          </li>
          <li class="link-navigation__menu">
           <button aria-controls="link-navigation__panel-promotions" aria-expanded="false" class="link-navigation__menu__link link-navigation__nav__item link-navigation__n2menu" data-target="link-navigation__panel-promotions" data-tracking="Promotions">
            <i aria-hidden="true" class="icon-sprites-link-navigation">
            </i>
            <span class="link-navigation__sr-only">
             프로모션
            </span>
           </button>
           <div aria-hidden="true" class="link-navigation__panel panel-template" data-name="link-navigation__panel-promotions" id="link-navigation__panel-promotions">
            <div class="link-navigation__panel__scroll">
             <div class="link-navigation__panel__top">
              <div class="link-navigation__panel__column">
               <button class="link-navigation__back" type="button">
                뒤로
               </button>
               <span aria-level="2" class="link-navigation__panel__title" role="heading">
                [ahref]
                
               </span>
               <div class="link-navigation__content">
                <div class="link-navigation__col">
                 <ul>
                  <li class="link-navigation__col--content link-navigation__accordion">
                   <div class="link-navigation__accordion__header link-navigation__accordion__header--deploy">
                    <button aria-controls="all_year" aria-expanded="false" class="link-navigation__accordion__title" data-tracking="All year" type="button">
                     연중 프로모션
                    </button>
                    <ul aria-hidden="true" id="all_year">
                     <li>
                      [ahref]
                      
                     </li>
                     <li>
                      <a class="" data-tracking="Special weekend offers" href="/ko/south-korea/promotions-offers/week-end-offers.shtml">
                       <span>
                        주말 특가 상품
                       </span>
                      </a>
                     </li>
                     <li>
                      [linkx]
                      
                     </li>
                     <li>
                      [linkx]
                      
                     </li>
                    </ul>
                   </div>
                  </li>
                  <li class="link-navigation__col--content link-navigation__accordion">
                   <div class="link-navigation__accordion__header link-navigation__accordion__header--deploy">
                    <button aria-controls="currently" aria-expanded="false" class="link-navigation__accordion__title" data-tracking="Currently" type="button">
                     진행중인 특가
                    </button>
                    <ul aria-hidden="true" id="currently">
                     <li>
                      [linkx]
                      
                     </li>
                    </ul>
                   </div>
                  </li>
                 </ul>
                </div>
                <div class="link-navigation__lastElement">
                </div>
               </div>
              </div>
              <div class="link-navigation__push-server">
               <div class="link-navigation__push">
                [linkx]
                
               </div>
              </div>
             </div>
            </div>
           </div>
          </li>
          <li class="link-navigation__menu">
           <button aria-controls="link-navigation__panel-activities_usual_informations" aria-expanded="false" class="link-navigation__menu__link link-navigation__nav__item link-navigation__n2menu" data-target="link-navigation__panel-activities_usual_informations" data-tracking="Activities usual informations">
            <i aria-hidden="true" class="icon-sprites-link-navigation">
            </i>
            <span class="link-navigation__sr-only">
             액티비티 &amp; 여행정보
            </span>
           </button>
           <div aria-hidden="true" class="link-navigation__panel panel-template" data-name="link-navigation__panel-activities_usual_informations" id="link-navigation__panel-activities_usual_informations">
            <div class="link-navigation__panel__scroll">
             <div class="link-navigation__panel__top">
              <div class="link-navigation__panel__column">
               <button class="link-navigation__back" type="button">
                뒤로
               </button>
               <span aria-level="2" class="link-navigation__panel__title" role="heading">
                [linkx]
                
               </span>
               <div class="link-navigation__content">
                <div class="link-navigation__col">
                 <ul>
                  <li class="link-navigation__col--content link-navigation__accordion">
                   <div class="link-navigation__accordion__header link-navigation__accordion__header--deploy">
                    <button aria-controls="our_destination_guides" aria-expanded="false" class="link-navigation__accordion__title" data-tracking="Our destination guides" type="button">
                     여행지 가이드
                    </button>
                    <ul aria-hidden="true" id="our_destination_guides">
                     <li>
                      [linkx]
                      
                     </li>
                     <li>
                      [linkx]
                      
                     </li>
                    </ul>
                   </div>
                  </li>
                 </ul>
                </div>
                <div class="link-navigation__col">
                 <ul>
                  <li class="link-navigation__col--content link-navigation__accordion">
                   <div class="link-navigation__accordion__header link-navigation__accordion__header--deploy">
                    <button aria-controls="transport" aria-expanded="false" class="link-navigation__accordion__title" data-tracking="Transport" type="button">
                     교통편
                    </button>
                    <ul aria-hidden="true" id="transport">
                     <li>
                      [ahref]
                      
                     </li>
                    </ul>
                   </div>
                  </li>
                 </ul>
                </div>
                <div class="link-navigation__lastElement">
                </div>
               </div>
              </div>
             </div>
            </div>
           </div>
          </li>
          <li class="link-navigation__menu">
           [linkx]
           
          </li>
          <li class="link-navigation__menu link-navigation__pro-solutions">
           <button aria-controls="link-navigation__panel-professional_solutions" aria-expanded="false" class="link-navigation__menu__link link-navigation__nav__item link-navigation__n2menu" data-target="link-navigation__panel-professional_solutions" data-tracking="Professional solutions">
            <i aria-hidden="true" class="icon-sprites-link-navigation">
            </i>
            <span class="link-navigation__sr-only">
             비즈니스 솔루션
            </span>
           </button>
           <div aria-hidden="true" class="link-navigation__panel panel-template" data-name="link-navigation__panel-professional_solutions" id="link-navigation__panel-professional_solutions">
            <div class="link-navigation__panel__scroll">
             <div class="link-navigation__panel__top">
              <div class="link-navigation__panel__column link-navigation__pro-solutions">
               <button class="link-navigation__back" type="button">
                뒤로
               </button>
               <span aria-level="2" class="link-navigation__panel__title" role="heading">
                [ahref]
                
               </span>
               <div class="link-navigation__content">
                <div class="link-navigation__col">
                 <ul>
                  <li class="link-navigation__col--content link-navigation__accordion">
                   <div class="link-navigation__accordion__header link-navigation__accordion__header--deploy">
                    <a class="link-navigation__accordion__title" data-tracking="Companies" href="m">
                     <span>
                      기업 고객
                     </span>
                    </a>
                    <ul aria-hidden="true" id="companies">
                     <li>
                      [ahref]
                      
                     </li>
                     <li>
                      [ahref]
                      
                     </li>
                     <li>
                      [ahref]
                      
                     </li>
                     <li>
                      [linkx]
                      
                     </li>
                    </ul>
                   </div>
                  </li>
                 </ul>
                </div>
                <div class="link-navigation__col">
                 <ul>
                  <li class="link-navigation__col--content link-navigation__accordion">
                   <div class="link-navigation__accordion__header link-navigation__accordion__header--deploy">
                    [ahref]
                    
                    <ul aria-hidden="true" id="meetings_events">
                     <li>
                      [ahref]
                      
                     </li>
                     <li>
                      [linkx]
                      
                     </li>
                     <li>
                      [linkx]
                      
                     </li>
                     <li>
                      <a class="" data-tracking="Congresses" href="/gb/our-offers/convention-congress.shtml">
                       <span>
                        회의 및 학회 서비스 상품
                       </span>
                      </a>
                     </li>
                     <li>
                      [ahref]
                      
                     </li>
                    </ul>
                   </div>
                  </li>
                 </ul>
                </div>
                <div class="link-navigation__col">
                 <ul>
                  <li class="link-navigation__col--content link-navigation__accordion">
                   <div class="link-navigation__accordion__header link-navigation__accordion__header--deploy">
                    <a class="link-navigation__accordion__title" data-tracking="Travel professionals" href="m">
                     <span>
                      여행 관계자
                     </span>
                    </a>
                    <ul aria-hidden="true" id="travel_professionals">
                     <li>
                      [ahref]
                      
                     </li>
                     <li>
                      [linkx]
                      
                     </li>
                     <li>
                      <a class="" data-tracking="Personal stay booking" href="/gb/booking/personnal-stay/advanced-search.shtml">
                       <span>
                        개인 숙박 예약
                       </span>
                      </a>
                     </li>
                     <li>
                      <a class="" data-tracking="Special offers individuals" href="/gb/asia/promotions-offers/individuals/index.shtml">
                       <span>
                        개인을 위한 특별 상품
                       </span>
                      </a>
                     </li>
                     <li>
                      [linkx]
                      
                     </li>
                    </ul>
                   </div>
                  </li>
                 </ul>
                </div>
                <div class="link-navigation__lastElement">
                </div>
               </div>
              </div>
              <div class="link-navigation__push-server">
               <div class="link-navigation__push">
                [linkx]
                
               </div>
              </div>
             </div>
            </div>
           </div>
          </li>
          <li class="link-navigation__menu link-navigation__loyalty-program">
           <button aria-controls="link-navigation__panel-loyalty_program" aria-expanded="false" class="link-navigation__menu__link link-navigation__nav__item link-navigation__n2menu" data-target="link-navigation__panel-loyalty_program" data-tracking="Loyalty program">
            <i aria-hidden="true" class="icon-sprites-link-navigation">
            </i>
            <span class="link-navigation__sr-only">
             로열티 프로그램
            </span>
           </button>
           <div aria-hidden="true" class="link-navigation__panel panel-template" data-name="link-navigation__panel-loyalty_program" id="link-navigation__panel-loyalty_program">
            <div class="link-navigation__panel__scroll">
             <div class="link-navigation__panel__top">
              [area1][keywordx][pkeyx][ahref][area1][keywordx][area1][keywordx][area1][keywordx][area1][keywordx][area1][keywordx][symbolx][area1][keywordx][symbolx][bracketl1][area1][keywordx][bracketr1][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][area1][keywordx][symbolx][area1][keywordx][symbolx][bracketl2][area1][keywordx][bracketr2][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][pkeyx][pkeyx][area1][mkey1][area1][mkey1]
             </div>
            </div>
           </div>
          </li>
          <li class="link-navigation__menu link-navigation__permanent link-navigation__preservations link-navigation__profile-not-connected-item">
           [linkx]
           
          </li>
          <li class="link-navigation__menu link-navigation__permanent link-navigation__preservations link-navigation__profile-connected-item">
           [ahref]
           
          </li>
          <li class="link-navigation__menu link-navigation__permanent link-navigation__passistance">
           [linkx]
           
          </li>
          <li class="link-navigation__menu link-navigation__permanent link-navigation__plangues">
           <button aria-controls="geoloc-selector" aria-expanded="false" class="link-navigation__menu__link link-navigation__nav__item link-navigation__n2menu" data-target="geoloc-selector">
            <span class="sr-only" id="icon-geoloc-selector__sr-only">
            </span>
            <i aria-hidden="true" class="icon-sprites-link-navigation">
            </i>
            <span class="link-navigation__sr-only">
             Français
            </span>
           </button>
           <div aria-hidden="true" class="link-navigation__panel form-template" data-name="geoloc-selector" data-role="geoloc-selector" id="geoloc-selector">
            <div class="link-navigation__panel__scroll">
             <div class="link-navigation__panel__form drops">
              <button class="link-navigation__back" type="button">
               뒤로
              </button>
              <div class="link-navigation__form__content">
              </div>
             </div>
            </div>
           </div>
          </li>
          <li class="link-navigation__menu link-navigation__permanent link-navigation__pdevises">
           <button aria-controls="currency-selector" aria-expanded="false" class="link-navigation__menu__link link-navigation__nav__item link-navigation__n2menu" data-target="currency-selector">
            <span class="sr-only">
             통화
            </span>
            <i aria-hidden="true" class="icon-sprites-link-navigation">
            </i>
            <span class="link-navigation__sr-only">
             Euro
            </span>
           </button>
           <div aria-hidden="true" class="link-navigation__panel form-template" data-name="currency-selector" data-role="currency-selector" id="currency-selector">
            <div class="link-navigation__panel__scroll">
             <div class="link-navigation__panel__form drops">
              <button class="link-navigation__back" type="button">
               뒤로
              </button>
              <div class="link-navigation__form__content">
              </div>
             </div>
            </div>
           </div>
          </li>
         </ul>
        </nav>
       </div>
      </div>
      <div class="mainLogo">
       [linkx]
       
      </div>
      <button class="connectZone" data-role="link-navigation__connect">
      </button>
      <div class="link-navigation__wrap-box">
       <div data-role="login-menu">
       </div>
       <div data-role="incentive-popin">
       </div>
      </div>
     </div>
     <div class="link-navigation__wrap-box">
      <div data-role="login-menu">
      </div>
      <div data-role="incentive-popin">
      </div>
     </div>
    </header>
   </div>
  </div>
  <main class="main" id="main" role="main">
   <div class="presentation">
    <div class="links">
     <svg aria-hidden="true" class="lazysvg" data-url="/fact-sheet/assets/icons/first/icons.htm" focusable="false">
      <use xlink:href="#icon-arrow-down">
      </use>
     </svg>
     [ahref]
     
     <ul class="breadcrumb">
      <li>
       [ahref]
       
       >
      </li>
      <li>
       [ahref]
       
       >
      </li>
      <li>
       [ahref]
       
       >
      </li>
      <li>
       머큐어 파리 센터 투르 에펠
      </li>
     </ul>
    </div>
    <div class="presentation__infos row">
     <picture class="logo">
      <source media="(max-width: 767px)" srcset="/fact-sheet/assets/icons/brands/icons/color/mer.svg"/>
     </picture>
     <div class="hotel">
      <h1 id="hotel-name">
       <b>[area1][mkey1][symbolx][pkeyx][symbolx][area1][keyword1][bracketl1][area1][keywordx][bracketr1][symbolx][bracketl2][area1][keywordx][bracketr2][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx]</b>
      </h1>
      <div class="hotel__reviews">
       <span class="sr-only">
        트립어드바이저 평점
       </span>
       4.0/5
      </div>
     </div>
    </div>
    <div class="presentation__picture">
    </div>
    <div class="presentation__bandeau">
     <div>
      <ul class="services row services--full services--max-items-6">
       <li>
        <button aria-describedby="tooltip-wifi_internet_accesses" class="tooltip" type="button">
         <svg aria-hidden="true" class="lazysvg" data-url="/fact-sheet/assets/icons/first/icons.htm" focusable="false">
          <use xlink:href="#icon-wifi_internet_accesses-first">
          </use>
         </svg>
         <span>
          WIFI / 인터넷 접속
         </span>
        </button>
        <div aria-hidden="true" class="tooltip__content" id="tooltip-wifi_internet_accesses" role="tooltip">
         호텔에 WIFI 무선 인터넷이 있음
        </div>
       </li>
       <li>
        <button aria-describedby="tooltip-breakfast" class="tooltip" type="button">
         <svg aria-hidden="true" class="lazysvg" data-url="/fact-sheet/assets/icons/first/icons.htm" focusable="false">
          <use xlink:href="#icon-breakfast-first">
          </use>
         </svg>
         <span>
          조식
         </span>
        </button>
        <div aria-hidden="true" class="tooltip__content" id="tooltip-breakfast" role="tooltip">
         호텔에서 조식이 제공됨
        </div>
       </li>
       <li>
        <button aria-describedby="tooltip-number_bars" class="tooltip" type="button">
         <svg aria-hidden="true" class="lazysvg" data-url="/fact-sheet/assets/icons/first/icons.htm" focusable="false">
          <use xlink:href="#icon-number_bars-first">
           <li>[ahref]</li>[pkeyx]<li>[area1][mkey1]</li><li>[area1][keywordx]</li>
          </use>
         </svg>
         <span>
          바
         </span>
        </button>
        <div aria-hidden="true" class="tooltip__content" id="tooltip-number_bars" role="tooltip">
         호텔에 바가 있음
        </div>
       </li>
       <li>
        <button aria-describedby="tooltip-parking" class="tooltip" type="button">
         <svg aria-hidden="true" class="lazysvg" data-url="/fact-sheet/assets/icons/first/icons.htm" focusable="false">
          <use xlink:href="#icon-parking-first">
          </use>
         </svg>
         <span>
          주차
         </span>
        </button>
        <div aria-hidden="true" class="tooltip__content" id="tooltip-parking" role="tooltip">
         호텔에 주차장이 있음
        </div>
       </li>
       <li>
        <button aria-describedby="tooltip-number_restaurants" class="tooltip" type="button">
         <svg aria-hidden="true" class="lazysvg" data-url="/fact-sheet/assets/icons/first/icons.htm" focusable="false">
          <use xlink:href="#icon-number_restaurants-first">
          </use>
         </svg>
         <span>
          레스토랑
         </span>
        </button>
        <div aria-hidden="true" class="tooltip__content" id="tooltip-number_restaurants" role="tooltip">
         호텔에 레스토랑이 있음
        </div>
       </li>
       <li>
        <button aria-describedby="tooltip-air_conditionning" class="tooltip" type="button">
         <svg aria-hidden="true" class="lazysvg" data-url="/fact-sheet/assets/icons/first/icons.htm" focusable="false">
          <use xlink:href="#icon-air_conditionning-first">
          </use>
         </svg>
         <span>
          에어컨
         </span>
        </button>
        <div aria-hidden="true" class="tooltip__content" id="tooltip-air_conditionning" role="tooltip">
         호텔 객실에 에어컨이 있음
        </div>
       </li>
      </ul>
      [linkx]
      
      <button class="services__more" id="btn-services" type="button">
       + 20 서비스
      </button>
     </div>
     <div class="booking__trigger">
      <button class="button button-level1" id="booking-trigger" type="button">
       가격 확인하기
      </button>
     </div>
    </div>
    <nav aria-label="Secondary" class="sub-nav" id="sub-nav" role="navigation">
     <ul class="row">
      <li>
       <a aria-current="true" class="active" href="n">
        호텔설명
       </a>
      </li>
      <li aria-hidden="true" class="hidden">
       [linkx]
       
      </li>
      <li>
       <a href="n">
        위치
       </a>
      </li>
      <li>
       [ahref]
       
      </li>
      <li>
       <a href="s">
        레스토랑/바
       </a>
      </li>
      <li>
       [ahref]
       
      </li>
      <li>
       <a href="s">
        고객 리뷰
       </a>
      </li>
     </ul>
    </nav>
   </div>
   <div class="content col">
    <div class="col-right">
     <div class="booking-content">
      <div aria-level="2" class="booking__header" role="heading">
       이 호텔 예약하기
      </div>
      <section class="section section--booking" data-acmax="7" data-admax="4" data-chage="11" data-chmax="3" data-pemax="4">
       <div class="booking-engine-full" data-role="bookingEngineFull" id="bookingEngineFull">
        <div class="error-messages" id="error-messages" role="alert" tabindex="-1">
         <div aria-level="2" role="heading">
         </div>
         <ul>
         </ul>
        </div>
        <form action="/identification/identify.action" autocomplete="off" class="bookingEngine" id="bookingEngine" method="post" name="bookingEngine">
         <div class="home-ac">
          <div>
          </div>
         </div>
         <div class="dates-block">
          <div class="date" id="date_date_arrivee">
           <svg aria-hidden="true" focusable="false">
            <use xlink:href="#icon-calendar">
            </use>
           </svg>
           <label for="search-dateIn-boo">
            <span>
             체크인
            </span>
            <span class="helper">
             AAAA/MM/JJ
            </span>
           </label>
          </div>
          <div class="date" id="date_date_depart">
           <svg aria-hidden="true" focusable="false">
            <use xlink:href="#icon-calendar">
            </use>
           </svg>
           <label for="search-dateout-boo">
            <span>
             체크아웃
            </span>
            <span class="helper">
             AAAA/MM/JJ
            </span>
           </label>
          </div>
         </div>
         <div class="hide-form">
          <div class="rooms-form rooms-form--single-room" data-adult="성인" data-child="아이" data-childs="어린이" data-room="객실">
           <label for="search-roomNumber-boo">
            객실
           </label>
           <select id="search-roomNumber-boo" name="search.roomNumber">
            <li>[area1][keywordx]</li>[ahref]<li>[ahref]</li>[area1][keywordx][symbolx][area1][keywordx][symbolx][bracketl18][area1][keywordx][bracketr18][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx]<li>[ahref]</li>
           </select>
          </div>
          <div class="btn-rooms-composition">
           <button class="text-link" type="button">
            객실 레이아웃
           </button>
          </div>
          <div class="room-composition" id="room-composition">
           <div aria-labelledby="room-label1" class="fake-fieldset" data-room="0" id="room0" role="group">
            <p class="fake-legend" id="room-label1">
             객실 1
            </p>
            <fieldset class="guests-number">
             <legend class="sr-only">
              인원 수
             </legend>
             <div class="adults">
              <label for="search-roomCriteria[0]-adultNumber">
               성인
              </label>
              <select id="search-roomCriteria[0]-adultNumber" name="search.roomCriteria[0].adultNumber">
              </select>
             </div>
             <div class="children">
              <label for="search-roomCriteria[0]-childrenNumber">
               어린이
              </label>
              <select class="tChildren" id="search-roomCriteria[0]-childrenNumber" name="search.roomCriteria[0].childrenNumber">
              </select>
             </div>
            </fieldset>
            <fieldset class="child-list">
             <legend class="children-age" id="children-age">
              어린이 연령
             </legend>
            </fieldset>
           </div>
          </div>
         </div>
         <fieldset class="special-rates">
          <legend>
           <button aria-controls="special-rates-content" aria-expanded="false" type="button">
            특전 코드, 서비스 등 기타 검색 기준
           </button>
          </legend>
          <div aria-hidden="true" class="content" id="special-rates-content">
           <div class="loyalty-card">
            <label for="loyalty-card">
             <span>
              로열티 멤버십 카드 번호
             </span>
             <span class="helper">
              카드의 16자리 번호
             </span>
            </label>
           </div>
           <div class="pref-code">
            <label for="pref-code">
             <span>
              특전 코드
             </span>
             <span class="helper">
             </span>
            </label>
           </div>
           <div class="client-code">
            <label for="client-code">
             <span>
              계약사 비즈니스 여행객
             </span>
             <span class="helper">
              회사 코드(SC, AS..으로 시작)
             </span>
            </label>
           </div>
           <div class="access-code">
            <label for="access-code">
             <span>
              액세스 코드
             </span>
             <span class="helper">
              10文字
             </span>
            </label>
           </div>
          </div>
         </fieldset>
         <div class="btn-wrapper" id="engine-submit">
          <button class="tSubmit button-honey" type="submit">
           가격 확인하기
          </button>
         </div>
        </form>
       </div>
      </section>
      <section class="section section--alt section--best-price">
       <svg aria-hidden="true" class="lazysvg" data-url="/fact-sheet/assets/icons/first/icons.htm" focusable="false">
        <use xlink:href="#icon-best-price">
        </use>
       </svg>
       아코르호텔 그룹 전 세계 호텔 최저가 보장
       [ahref]
       
      </section>
      <section class="section section--alt section--lcah">
       <div class="lcah__loader">
        <div class="loading-spinner">
        </div>
       </div>
       <div class="lcah" data-no-participant="false" id="booking-lcah">
        <div class="lcah__header">
         <svg aria-hidden="true" class="lazysvg header__logo" data-url="/fact-sheet/assets/icons/first/icons.htm" focusable="false">
          <use xlink:href="#icon-club-accor">
          </use>
         </svg>
         <div class="header__content">
          <h3 class="lcah__title">
           <b>[area1][mkey1][symbolx][pkeyx][symbolx][area1][keyword1][bracketl1][area1][keywordx][bracketr1][symbolx][bracketl2][area1][keywordx][bracketr2][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx]</b>
          </h3>
          <p class="lcah__sub-title">
           <span>
            무료 회원 가입
           </span>
          </p>
         </div>
        </div>
        <div class="lcah__content">
         <p>
          해당 호텔 예약 시:
         </p>
         <ul class="list">
          <li class="earn-status">
           <svg aria-hidden="true" class="lazysvg " data-url="/fact-sheet/assets/icons/first/icons.htm" focusable="false">
            <use xlink:href="#icon-check">
            </use>
           </svg>
           <p>
            등급 및 리워드 포인트를 적립합니다.
           </p>
          </li>
          <li class="use-points">
           <svg aria-hidden="true" class="lazysvg " data-url="/fact-sheet/assets/icons/first/icons.htm" focusable="false">
            <use xlink:href="#icon-check">
            </use>
           </svg>
           <p>
            리워드 포인트를 사용할 수 있습니다.
           </p>
          </li>
          <li class="benefit-advantage">
           <svg aria-hidden="true" class="lazysvg " data-url="/fact-sheet/assets/icons/first/icons.htm" focusable="false">
            <use xlink:href="#icon-check">
            </use>
           </svg>
           <p>
            혜택이 제공됩니다
           </p>
          </li>
          <li class="member-price">
           <svg aria-hidden="true" class="lazysvg " data-url="/fact-sheet/assets/icons/first/icons.htm" focusable="false">
            <use xlink:href="#icon-check">
            </use>
           </svg>
           <p>
            회원 전용 요금 혜택을 볼 수 있습니다.
           </p>
          </li>
         </ul>
        </div>
       </div>
      </section>
      <section class="section section--b2b-access" id="section-b2b-access">
       <div class="hideshow hideshow--level-up hideshow--button-down" data-label="비즈니스 솔루션 사이트를 방문하여 주십시오" data-role="hideshow" data-strategy="openUp">
        <div class="hideshow__content" id="b2baccess">
         <ul>
          <li>
           [ahref]
           
           <div>
            [linkx]
            
            [ahref]
            
           </div>
          </li>
          <li>
           <a aria-hidden="true" href="m" tabindex="-1" target="_blank">
            <svg aria-hidden="true" class="lazysvg" data-url="/fact-sheet/assets/icons/graphics/icons.htm" focusable="false">
             <use xlink:href="#icon-datebook">
             </use>
            </svg>
           </a>
           <div>
            [ahref]
            
            [linkx]
            
           </div>
          </li>
          <li>
           [ahref]
           
           <div>
            <a href="m" target="_blank" title="여행 전문가 - 새로운 창">
             여행 전문가
            </a>
            [linkx]
            
           </div>
          </li>
         </ul>
        </div>
       </div>
      </section>
      <section class="section--favorites">
       <div class="favorites__message">
        <p>
         최대 6개까지 즐겨찾는 호텔을 저장할 수 있습니다. 신규 추가를 위핸 기존 정보를 삭제해주십시오.
        </p>
       </div>
       <div class="favorites__loader">
        <div class="loading-spinner">
        </div>
       </div>
       <div class="favorites__buttons">
        <button class="favorites-manager button button-level3 not-added main-favorites-button" data-action="addHotel" data-chain="mer" data-connected="false" data-rid="2175" type="button">
         <span class="loading-spinner">
         </span>
         <span class="button__description">
          <span>
           <svg aria-hidden="true" class="lazysvg icon-favorite" data-url="/fact-sheet/assets/icons/first/icons.htm" focusable="false">
            <use xlink:href="#icon-favorite">
            </use>
           </svg>
           <svg aria-hidden="true" class="lazysvg icon-favorite-added" data-url="/fact-sheet/assets/icons/first/icons.htm" focusable="false">
            <use xlink:href="#icon-favorite-added">
            </use>
           </svg>
          </span>
          <span class="label-favorite">
           즐겨찾기에 추가하기
          </span>
          <span class="label-favorite-added">
           즐겨찾기 취소
          </span>
         </span>
        </button>
        <div id="opener-popin-favorites">
         <button class="text-link">
          즐겨찾는 호텔
         </button>
        </div>
       </div>
      </section>
     </div>
    </div>
    <section class="section section--alt section--description" id="section-description">
     <div class="hideshow hotel__description" data-label--expand="더보기" data-label--expanded="닫기" data-role="hideshow" data-strategy="description">
      <div aria-hidden="true" class="hideshow__content" id="hotel-description">
       <p class="hotel__title">
        머큐어 파리 센터 투르 에펠
       </p>
       <p class="hotel__sub-title">
        출장, 가족 여행을 위한 미드스케일 호텔
       </p>
       <p>
        에펠탑과 트로카데로 인근에 위치한 4성급 머큐어 파리 센터 에펠 타워(Mercure Paris Centre Eiffel Tower) 호텔을 파리 중심에서 만나 보세요. 관광을 시작하기 이상적인 곳으로, 대중 교통을 이용하기 편리하며 '빛의 도시'를 관광하실 수 있도록 유용한 정보도 제공해 드립니다. 비즈니스 여행에서 업무와 휴식을 모두 즐길 수 있는 환경을 원하시나요? 회의실을 이용하실 수 있으며, 에펠탑이 보이는 피트니스 센터나 레스토랑 테라스에서 휴식을 취하실 수도 있습니다.
       </p>
       <p>
        파리 중심지에 위치해 있으며 호텔 인근에서 대중교통을 편리하게 이용할 수 있어 파리의 다양한 명소와 쇼핑을 더욱 쉽게 즐길 수 있습니다.
       </p>
      </div>
     </div>
     <div class="extras">
      <div class="extras__content">
       <h2>
        <b>[area1][mkey1][symbolx][pkeyx][symbolx][area1][keyword1][bracketl1][area1][keywordx][bracketr1][symbolx][bracketl2][area1][keywordx][bracketr2][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx]</b>
       </h2>
       <svg aria-hidden="true" class="lazysvg" data-url="/fact-sheet/assets/icons/graphics/icons.htm" focusable="false">
        <use xlink:href="#icon-planet21">
        </use>
       </svg>
       <p>
        Planet 21 참여 호텔로 서비스 산업의 지속 성장 가능을 위해 적극적으로 노력하고 있습니다.
       </p>
      </div>
     </div>
    </section>
    <section class="section section--services" id="section-services">
     <div aria-level="2" class="header--main" role="heading">
      호텔 및 주변 지역 서비스
     </div>
     <div class="infos">
      <div class="infos__checkin">
       <div>
        <svg aria-hidden="true" class="lazysvg" data-url="/fact-sheet/assets/icons/graphics/icons.htm" focusable="false">
         <use xlink:href="#icon-times">
         </use>
        </svg>
        <p>
         체크인 시간 : 14h00부터
        </p>
       </div>
       <div>
        <p>
         체크아웃 시간 : 12h00까지
        </p>
       </div>
      </div>
      <p class="infos__payable" id="payable">
       <li>[ahref]</li>[area1][mkey1][pkeyx]
      </p>
     </div>
     <div class="hideshow hideshow--button-down" data-label--expand="모든 서비스 보기" data-label--expanded="닫기" data-role="hideshow" data-strategy="openDown">
      <div aria-level="3" class="header--second" role="heading">
       서비스 및 이용 안내
      </div>
      <ul class="list">
       <li>
        <svg aria-hidden="true" class="lazysvg" data-url="/fact-sheet/assets/icons/amenities/icons.htm" focusable="false">
         <use xlink:href="#icon-online_checkin">
         </use>
        </svg>
        <div>
         <span>
          온라인 체크인
         </span>
         <button aria-describedby="tooltip-otf-plus-ONLINE_CHECKIN" class="tooltip button button-level3" data-strategy="click" type="button">
          <svg aria-hidden="true" class="lazysvg" data-url="/fact-sheet/assets/icons/graphics/icons.htm" focusable="false">
           <use xlink:href="#icon-tooltip-plus">
           </use>
          </svg>
          <span class="sr-only">
           온라인 체크인 상세 내용
          </span>
         </button>
         <div aria-hidden="true" class="tooltip__content" id="tooltip-otf-plus-ONLINE_CHECKIN" role="tooltip">
          <ul>
           <li>
            온라인 체크인: 호텔 도착 전 온라인 체크인으로 객실이 미리 준비되는 서비스
           </li>
           <li>
            빠른 체크아웃: 체크아웃 시 간단하게 객실 키를 반납하는 서비스
           </li>
          </ul>
          <span class="arrow">
          </span>
         </div>
        </div>
       </li>
       <li>
        <svg aria-hidden="true" class="lazysvg" data-url="/fact-sheet/assets/icons/amenities/icons.htm" focusable="false">
         <use xlink:href="#icon-wifi_internet_accesses">
         </use>
        </svg>
        <div>
         <span>
          WIFI / 인터넷 접속
         </span>
         <button aria-describedby="tooltip-otf-plus-WIFI_INTERNET_ACCESSES" class="tooltip button button-level3" data-strategy="click" type="button">
          <svg aria-hidden="true" class="lazysvg" data-url="/fact-sheet/assets/icons/graphics/icons.htm" focusable="false">
           <use xlink:href="#icon-tooltip-plus">
           </use>
          </svg>
          <span class="sr-only">
           WIFI / 인터넷 접속 상세 내용
          </span>
         </button>
         <div aria-hidden="true" class="tooltip__content" id="tooltip-otf-plus-WIFI_INTERNET_ACCESSES" role="tooltip">
          <ul>
           <li>
            호텔 내 WiFi 무선 인터넷
           </li>
           <li>
            고속 인터넷
           </li>
           <li>
            객실 내 WiFi 무선 인터넷
           </li>
           <li>
            WiFi 무선 인터넷
           </li>
           <li>
            Optic fiber technology provides the highest possible speed of Internet connection.
           </li>
          </ul>
          <span class="arrow">
          </span>
         </div>
        </div>
       </li>
       <li>
        <svg aria-hidden="true" class="lazysvg" data-url="/fact-sheet/assets/icons/amenities/icons.htm" focusable="false">
         <use xlink:href="#icon-parking">
         </use>
        </svg>
        <div>
         <span>
          주차
         </span>
         <button aria-describedby="tooltip-otf-plus-PARKING" class="tooltip button button-level3" data-strategy="click" type="button">
          <svg aria-hidden="true" class="lazysvg" data-url="/fact-sheet/assets/icons/graphics/icons.htm" focusable="false">
           <use xlink:href="#icon-tooltip-plus">
           </use>
          </svg>
          <span class="sr-only">
           주차 상세 내용
          </span>
         </button>
         <div aria-hidden="true" class="tooltip__content" id="tooltip-otf-plus-PARKING" role="tooltip">
          <ul>
           <li>
            프라이빗 실내 주차장 (유료 서비스)
           </li>
           <li>
            프라이빗 실외 주차장 (유료 서비스)
           </li>
           <li>
            담장이 있는 프라이빗 실외 주차장 (유료 서비스)
           </li>
           <li>
            조명완비 주차장
           </li>
          </ul>
          <span class="arrow">
          </span>
         </div>
        </div>
       </li>
       <li>
        <svg aria-hidden="true" class="lazysvg" data-url="/fact-sheet/assets/icons/amenities/icons.htm" focusable="false">
         <use xlink:href="#icon-accessibility">
         </use>
        </svg>
        <div>
         <span>
          장애인 시설
         </span>
         <button aria-describedby="tooltip-otf-plus-ACCESSIBILITY" class="tooltip button button-level3" data-strategy="click" type="button">
          <svg aria-hidden="true" class="lazysvg" data-url="/fact-sheet/assets/icons/graphics/icons.htm" focusable="false">
           <use xlink:href="#icon-tooltip-plus">
           </use>
          </svg>
          <span class="sr-only">
           장애인 시설 상세 내용
          </span>
         </button>
         <div aria-hidden="true" class="tooltip__content" id="tooltip-otf-plus-ACCESSIBILITY" role="tooltip">
          <ul>
           <li>
            거동이 불편한 고객용 객실
           </li>
           <li>
            휠체어 통행로
           </li>
           <li>
            거동이 불편한 고객용 시설
           </li>
          </ul>
          <span class="arrow">
          </span>
         </div>
        </div>
       </li>
       <li>
        <svg aria-hidden="true" class="lazysvg" data-url="/fact-sheet/assets/icons/amenities/icons.htm" focusable="false">
         <use xlink:href="#icon-animal_accepted">
         </use>
        </svg>
        <div>
         <span aria-describedby="payable" class="payable">
          애완동물 허용 25.00 EUR
         </span>
        </div>
       </li>
       <li>
        <svg aria-hidden="true" class="lazysvg" data-url="/fact-sheet/assets/icons/amenities/icons.htm" focusable="false">
         <use xlink:href="#icon-air_conditionning">
         </use>
        </svg>
        <div>
         <span>
          에어컨
         </span>
         <button aria-describedby="tooltip-otf-plus-AIR_CONDITIONNING" class="tooltip button button-level3" data-strategy="click" type="button">
          <svg aria-hidden="true" class="lazysvg" data-url="/fact-sheet/assets/icons/graphics/icons.htm" focusable="false">
           <use xlink:href="#icon-tooltip-plus">
           </use>
          </svg>
          <span class="sr-only">
           에어컨 상세 내용
          </span>
         </button>
         <div aria-hidden="true" class="tooltip__content" id="tooltip-otf-plus-AIR_CONDITIONNING" role="tooltip">
          <ul>
           <li>
            에어컨
           </li>
           <li>
            수동 온도 제어
           </li>
          </ul>
          <span class="arrow">
          </span>
         </div>
        </div>
       </li>
       <li>
        <svg aria-hidden="true" class="lazysvg" data-url="/fact-sheet/assets/icons/amenities/icons.htm" focusable="false">
         <use xlink:href="#icon-spoken_languages">
         </use>
        </svg>
        <div>
         <span>
          호텔에서 이용 가능한 언어
         </span>
         <button aria-describedby="tooltip-otf-plus-SPOKEN_LANGUAGES" class="tooltip button button-level3" data-strategy="click" type="button">
          <svg aria-hidden="true" class="lazysvg" data-url="/fact-sheet/assets/icons/graphics/icons.htm" focusable="false">
           <use xlink:href="#icon-tooltip-plus">
           </use>
          </svg>
          <span class="sr-only">
           호텔에서 이용 가능한 언어 상세 내용
          </span>
         </button>
         <div aria-hidden="true" class="tooltip__content" id="tooltip-otf-plus-SPOKEN_LANGUAGES" role="tooltip">
          <ul>
           <li>
            독일어
           </li>
           <li>
            영어
           </li>
           <li>
            스페인어
           </li>
           <li>
            프랑스어
           </li>
           <li>
            이태리어
           </li>
           <li>
            일본어
           </li>
           <li>
            포르투갈어
           </li>
          </ul>
          <span class="arrow">
          </span>
         </div>
        </div>
       </li>
       <li>
        <svg aria-hidden="true" class="lazysvg" data-url="/fact-sheet/assets/icons/amenities/icons.htm" focusable="false">
         <use xlink:href="#icon-desk_opened_24_hours">
         </use>
        </svg>
        <div>
         <span>
          24시간 리셉션 운영
         </span>
        </div>
       </li>
       <li>
        <svg aria-hidden="true" class="lazysvg" data-url="/fact-sheet/assets/icons/amenities/icons.htm" focusable="false">
         <use xlink:href="#icon-early_check_in_late_check_out">
         </use>
        </svg>
        <div>
         <span aria-describedby="payable" class="payable">
          얼리 체크인/체크아웃 시간 연장
         </span>
         <button aria-describedby="tooltip-otf-plus-EARLY_CHECK_IN_LATE_CHECK_OUT" class="tooltip button button-level3" data-strategy="click" type="button">
          <svg aria-hidden="true" class="lazysvg" data-url="/fact-sheet/assets/icons/graphics/icons.htm" focusable="false">
           <use xlink:href="#icon-tooltip-plus">
           </use>
          </svg>
          <span class="sr-only">
           얼리 체크인/체크아웃 시간 연장 상세 내용
          </span>
         </button>
         <div aria-hidden="true" class="tooltip__content" id="tooltip-otf-plus-EARLY_CHECK_IN_LATE_CHECK_OUT" role="tooltip">
          <ul>
           <li>
            얼리 체크인(오전 9시부터) (유료 서비스)도착 당일 아침 9시부터 객실을 이용하고 싶으세요? 독점 제공되는 이 혜택을 지금 예약하시고 머큐어 호텔에서 출장이나 레저 여행을 마음껏 즐겨보세요.
           </li>
           <li>
            늦은 체크아웃(최대 오후 5시까지) (유료 서비스)떠나는 날 오후 5시까지 머물고 싶으세요? 독점 제공되는 이 혜택을 지금 예약하시고 머큐어 호텔에서 출장이나 레저 여행을 마음껏 즐겨보세요.
           </li>
          </ul>
          <span class="arrow">
          </span>
         </div>
        </div>
       </li>
       <li>
        <svg aria-hidden="true" class="lazysvg" data-url="/fact-sheet/assets/icons/amenities/icons.htm" focusable="false">
         <use xlink:href="#icon-cleaning_services">
         </use>
        </svg>
        <div>
         <span>
          세탁
         </span>
         <button aria-describedby="tooltip-otf-plus-CLEANING_SERVICES" class="tooltip button button-level3" data-strategy="click" type="button">
          <svg aria-hidden="true" class="lazysvg" data-url="/fact-sheet/assets/icons/graphics/icons.htm" focusable="false">
           <use xlink:href="#icon-tooltip-plus">
           </use>
          </svg>
          <span class="sr-only">
           세탁 상세 내용
          </span>
         </button>
         <div aria-hidden="true" class="tooltip__content" id="tooltip-otf-plus-CLEANING_SERVICES" role="tooltip">
          <ul>
           <li>
            드라이 클리닝 / 다림질 (유료 서비스)
           </li>
           <li>
            구두 광택기
           </li>
          </ul>
          <span class="arrow">
          </span>
         </div>
        </div>
       </li>
       <li>
        <svg aria-hidden="true" class="lazysvg" data-url="/fact-sheet/assets/icons/amenities/icons.htm" focusable="false">
         <use xlink:href="#icon-porter">
         </use>
        </svg>
        <div>
         <span aria-describedby="payable" class="payable">
          포터
         </span>
        </div>
       </li>
      </ul>
      <div class="hideshow__content" id="servicesCategory">
       <div aria-level="3" class="header--second" role="heading">
        케이터링
       </div>
       <ul class="list">
        <li>
         <svg aria-hidden="true" class="lazysvg" data-url="/fact-sheet/assets/icons/amenities/icons.htm" focusable="false">
          <use xlink:href="#icon-breakfast">
          </use>
         </svg>
         <div>
          <span aria-describedby="payable" class="payable">
           조식
          </span>
          <button aria-describedby="tooltip-plus-BREAKFAST" class="tooltip button button-level3" data-strategy="click" type="button">
           <svg aria-hidden="true" class="lazysvg" data-url="/fact-sheet/assets/icons/graphics/icons.htm" focusable="false">
            <use xlink:href="#icon-tooltip-plus">
            </use>
           </svg>
           <span class="sr-only">
            조식 상세 내용
           </span>
          </button>
          <div aria-hidden="true" class="tooltip__content" id="tooltip-plus-BREAKFAST" role="tooltip">
           <ul>
            <li>
             조식 (유료 서비스)
            </li>
            <li>
             Hotel proposant le petit déjeuner (유료 서비스)
            </li>
           </ul>
           <span class="arrow">
           </span>
          </div>
         </div>
        </li>
        <li>
         <svg aria-hidden="true" class="lazysvg" data-url="/fact-sheet/assets/icons/amenities/icons.htm" focusable="false">
          <use xlink:href="#icon-number_restaurants">
          </use>
         </svg>
         <div>
          <span>
           레스토랑 1개
          </span>
         </div>
        </li>
        <li>
         <svg aria-hidden="true" class="lazysvg" data-url="/fact-sheet/assets/icons/amenities/icons.htm" focusable="false">
          <use xlink:href="#icon-number_bars">
          </use>
         </svg>
         <div>
          <span>
           바 1개
          </span>
         </div>
        </li>
        <li>
         <svg aria-hidden="true" class="lazysvg" data-url="/fact-sheet/assets/icons/amenities/icons.htm" focusable="false">
          <use xlink:href="#icon-room_service">
          </use>
         </svg>
         <div>
          <span>
           룸서비스
          </span>
          <button aria-describedby="tooltip-plus-ROOM_SERVICE" class="tooltip button button-level3" data-strategy="click" type="button">
           <svg aria-hidden="true" class="lazysvg" data-url="/fact-sheet/assets/icons/graphics/icons.htm" focusable="false">
            <use xlink:href="#icon-tooltip-plus">
            </use>
           </svg>
           <span class="sr-only">
            룸서비스 상세 내용
           </span>
          </button>
          <div aria-hidden="true" class="tooltip__content" id="tooltip-plus-ROOM_SERVICE" role="tooltip">
           <ul>
            <li>
             식사
            </li>
            <li>
             간식
            </li>
           </ul>
           <span class="arrow">
           </span>
          </div>
         </div>
        </li>
        <li>
         <svg aria-hidden="true" class="lazysvg" data-url="/fact-sheet/assets/icons/amenities/icons.htm" focusable="false">
          <use xlink:href="#icon-self_catering_facilities">
          </use>
         </svg>
         <div>
          <span aria-describedby="payable" class="payable">
           스낵 및 음료수 자판기
          </span>
         </div>
        </li>
       </ul>
       <div aria-level="3" class="header--second" role="heading">
        레저 및 액티비티
       </div>
       <ul class="list">
        <li>
         <svg aria-hidden="true" class="lazysvg" data-url="/fact-sheet/assets/icons/amenities/icons.htm" focusable="false">
          <use xlink:href="#icon-fitness_center">
          </use>
         </svg>
         <div>
          <span>
           피트니스 센터
          </span>
         </div>
        </li>
        <li>
         <svg aria-hidden="true" class="lazysvg" data-url="/fact-sheet/assets/icons/amenities/icons.htm" focusable="false">
          <use xlink:href="#icon-others_sport_activities">
          </use>
         </svg>
         <div>
          <span aria-describedby="payable" class="payable">
           기타 스포츠 액티비티
          </span>
          <button aria-describedby="tooltip-plus-OTHERS_SPORT_ACTIVITIES" class="tooltip button button-level3" data-strategy="click" type="button">
           <svg aria-hidden="true" class="lazysvg" data-url="/fact-sheet/assets/icons/graphics/icons.htm" focusable="false">
            <use xlink:href="#icon-tooltip-plus">
            </use>
           </svg>
           <span class="sr-only">
            기타 스포츠 액티비티 상세 내용
           </span>
          </button>
          <div aria-hidden="true" class="tooltip__content" id="tooltip-plus-OTHERS_SPORT_ACTIVITIES" role="tooltip">
           <ul>
            <li>
             자전거 대여 (유료 서비스)
            </li>
            <li>
             운동 경기장 (유료 서비스)
            </li>
           </ul>
           <span class="arrow">
           </span>
          </div>
         </div>
        </li>
       </ul>
       <div aria-level="3" class="header--second" role="heading">
        비즈니스 서비스
       </div>
       <ul class="list">
        <li>
         <svg aria-hidden="true" class="lazysvg" data-url="/fact-sheet/assets/icons/amenities/icons.htm" focusable="false">
          <use xlink:href="#icon-number_meetings_room">
          </use>
         </svg>
         <div>
          <span>
           회의실 11개
          </span>
         </div>
        </li>
        <li>
         <svg aria-hidden="true" class="lazysvg" data-url="/fact-sheet/assets/icons/amenities/icons.htm" focusable="false">
          <use xlink:href="#icon-copier_printer">
          </use>
         </svg>
         <div>
          <span>
           복사/인쇄 서비스 이용 가능
          </span>
         </div>
        </li>
       </ul>
      </div>
     </div>
    </section>
    <div class="popin" id="popinServices" role="dialog">
     <div class="popin__content-wrapper">
      <div class="popin__header">
       <button class="button popin__close" type="button">
        <span class="sr-only">
         닫기
        </span>
        <svg class="lazysvg" data-url="/fact-sheet/assets/icons/graphics/icons.htm">
         <use xlink:href="#icon-close">
         </use>
        </svg>
       </button>
      </div>
      <div class="popin__content">
      </div>
     </div>
    </div>
    <section class="section section--alt section--location" id="section-location">
     <h2>
      [area1][mkey1][symbolx][pkeyx][symbolx][area1][keyword1][bracketl1][area1][keywordx][bracketr1][symbolx][bracketl2][area1][keywordx][bracketr2][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx]
     </h2>
     <div class="localisation__content">
      <div class="map">
       <button id="btn_map" type="button">
       </button>
      </div>
      <div class="contact col">
       <div class="infos">
        <h3 class="infos__title">
         <b>[area1][mkey1][symbolx][pkeyx][symbolx][area1][keyword1][bracketl1][area1][keywordx][bracketr1][symbolx][bracketl2][area1][keywordx][bracketr2][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx]</b>
        </h3>
        <div class="infos__content">
         <div>
          <p>
           20 rue Jean Rey
           <br/>
           75015
           <br/>
           <span>
            파리
           </span>
           <br/>
           <span>
            프랑스
           </span>
          </p>
         </div>
         <div>
          전화:
          [ahref]
          
          <p>
           팩스: (+33)1/45789142
          </p>
          <a class="infos__mail" href="m">
           E-mail
           <svg aria-hidden="true" class="lazysvg" data-url="/fact-sheet/assets/icons/graphics/icons.htm" focusable="false">
            <use xlink:href="#icon-email">
            </use>
           </svg>
          </a>
         </div>
        </div>
        <div class="infos__checkin">
         <div>
          <svg aria-hidden="true" class="lazysvg" data-url="/fact-sheet/assets/icons/graphics/icons.htm" focusable="false">
           <use xlink:href="#icon-times">
           </use>
          </svg>
          <p>
           체크인 시간 : 14h00부터
          </p>
         </div>
         <div>
          <p>
           체크아웃 시간 : 12h00까지
          </p>
         </div>
        </div>
       </div>
       <div class="hideshow" data-label="호텔 접근 및 교통" data-role="hideshow" data-strategy="openUp">
        <div class="hideshow__content" id="transports">
         <ul class="list">
          <li>
           <p>
            <span>
             42 GARE DU NORD-HOP.EUROPEEN :
            </span>
            42 DUPLEIX-FINLAY
           </p>
          </li>
          <li>
           <p>
            <span>
             69  GAMBETTA-CHAMP DE MARS :
            </span>
            69 CHAMP DE MARS
           </p>
          </li>
          <li>
           <p>
            <span>
             82  LUXEMBOURG-AMERICAN HOSPITAL :
            </span>
            82 CHAMP DE MARS
           </p>
          </li>
          <li>
           <p>
            <span>
             87 PTE DE REUILLY-CHAMP DE MARS :
            </span>
            87 CHAMP DE MARS
           </p>
          </li>
          <li>
           <p>
            <span>
             LIGNE 6 ARRET BIR-HAKEIM :
            </span>
            6 BIR-HAKEIM
           </p>
          </li>
          <li>
           <p>
            [ahref][pkeyx][pkeyx][ahref][pkeyx][area1][keywordx][symbolx][area1][keywordx][symbolx][bracketl3][area1][keywordx][bracketr3][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][mkey1][area1][keywordx][linkx][linkx][pkeyx][ahref][area1][mkey1][area1][keywordx][symbolx][area1][keywordx][symbolx][bracketl4][area1][keywordx][bracketr4][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][ahref][pkeyx][area1][keywordx][pkeyx][linkx][area1][keywordx][symbolx][area1][keywordx][symbolx][bracketl5][area1][keywordx][bracketr5][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][bracketl6][area1][keywordx][bracketr6][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx]
           </p>
          </li>
         </ul>
         <ul class="list">
          <li>
           <span class="sr-only">
            비행기로
           </span>
           <svg aria-hidden="true" class="lazysvg plane" data-url="/fact-sheet/assets/icons/graphics/icons.htm" focusable="false">
            <use xlink:href="#icon-airport">
            </use>
           </svg>
           <p>
            PARIS ORLY 16.09km / 10마일
           </p>
          </li>
          <li>
           <span class="sr-only">
            비행기로
           </span>
           <svg aria-hidden="true" class="lazysvg plane" data-url="/fact-sheet/assets/icons/graphics/icons.htm" focusable="false">
            <use xlink:href="#icon-airport">
            </use>
           </svg>
           <p>
            PARIS ROISSY CDG 35.4km / 22마일
           </p>
          </li>
          <li>
           <span class="sr-only">
            헬리콥터로
           </span>
           <svg aria-hidden="true" class="lazysvg " data-url="/fact-sheet/assets/icons/graphics/icons.htm" focusable="false">
            <use xlink:href="#icon-heliport">
            </use>
           </svg>
           <p>
            ISSY LES MOULINEAUX PARIS SEVRES 4km / 2.5마일
           </p>
          </li>
          <li>
           <span class="sr-only">
            차로
           </span>
           <svg aria-hidden="true" class="lazysvg " data-url="/fact-sheet/assets/icons/graphics/icons.htm" focusable="false">
            <use xlink:href="#icon-highway_exit">
            </use>
           </svg>
           <p>
            PERIPHERIQUE PORTE DE SEVRES 6.44km / 4마일
           </p>
          </li>
          <li>
           <span class="sr-only">
            차로
           </span>
           <svg aria-hidden="true" class="lazysvg " data-url="/fact-sheet/assets/icons/graphics/icons.htm" focusable="false">
            <use xlink:href="#icon-highway_exit">
            </use>
           </svg>
           <p>
            PERIPHERIQUE PORTE DE VERSAILLES 4.83km / 3마일 [ahref][area1][mkey1][ahref][area1][mkey1][area1][keywordx][pkeyx][ahref][ahref][pkeyx][area1][keywordx][area1][keywordx][symbolx][area1][keywordx][symbolx][bracketl7][area1][keywordx][bracketr7][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][ahref][area1][keywordx][area1][mkey1][ahref][area1][keywordx][symbolx][area1][keywordx][symbolx][bracketl8][area1][keywordx][bracketr8][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][pkeyx][area1][keywordx][area1][mkey1][pkeyx][area1][keywordx][ahref][area1][keywordx][pkeyx][area1][mkey1]
           </p>
          </li>
          <li>
           <span class="sr-only">
            차로
           </span>
           <svg aria-hidden="true" class="lazysvg " data-url="/fact-sheet/assets/icons/graphics/icons.htm" focusable="false">
            <use xlink:href="#icon-highway_exit">
            </use>
           </svg>
           <p>
            VOIE EXPRESS RIVE DROITE 4km / 2.5마일
           </p>
          </li>
          <li>
           <span class="sr-only">
            기차로
           </span>
           <svg aria-hidden="true" class="lazysvg " data-url="/fact-sheet/assets/icons/graphics/icons.htm" focusable="false">
            <use xlink:href="#icon-train_station">
            </use>
           </svg>
           <p>
            PARIS GARE DE LYON 8.05km / 5마일
           </p>
          </li>
          <li>
           <span class="sr-only">
            기차로
           </span>
           <svg aria-hidden="true" class="lazysvg " data-url="/fact-sheet/assets/icons/graphics/icons.htm" focusable="false">
            <use xlink:href="#icon-train_station">
            </use>
           </svg>
           <p>
            PARIS MONTPARNASSE 1 ET 2 2km / 1.25마일
           </p>
          </li>
          <li>
           <span class="sr-only">
            기차로
           </span>
           <svg aria-hidden="true" class="lazysvg " data-url="/fact-sheet/assets/icons/graphics/icons.htm" focusable="false">
            <use xlink:href="#icon-train_station">
            </use>
           </svg>
           <p>
            PARIS NORD EUROSTAR THALYS 9.66km / 6마일
           </p>
          </li>
         </ul>
         <p>
          <span>
           <abbr lang="en" title="Global Positioning System">
            GPS
           </abbr>
           :
          </span>
          <span class="gps">
           48.855381, 2.291969
          </span>
         </p>
        </div>
       </div>
      </div>
     </div>
     <div class="travel-guide">
      [ahref]
      
     </div>
    </section>
    <section class="section section--rooms" id="section-rooms">
     <h2>
      <b>[area1][mkey1][symbolx][pkeyx][symbolx][area1][keyword1][bracketl1][area1][keywordx][bracketr1][symbolx][bracketl2][area1][keywordx][bracketr2][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx]</b>
     </h2>
     <p>
      완전히 리노베이션한 이 호텔에서는 무료 WIFI 무선 인터넷 접속이 가능한 편리하고 모던한 객실을 제공합니다. 이 호텔에서는 파리 중심지에서 파트너와의 출장 또는 가족과의 휴가 여행을 보낼 수 있는 스탠다드룸, 프리빌리지룸 및 주니어 스위트(일부 객실에서는 에펠탑이 한눈에 들어옴)를 보유하고 있습니다.
     </p>
     <button class="button button-level4" id="room-opener-popin-gallery" type="button">
      <svg aria-hidden="true" class="lazysvg" data-url="/fact-sheet/assets/icons/graphics/icons.htm" focusable="false">
       <use xlink:href="#icon-area">
       </use>
      </svg>
      <span>
       사진 6
      </span>
     </button>
     <ul class="tabs">
      <li>
       [ahref]
       
      </li>
      <li>
       [linkx]
       
      </li>
     </ul>
     <div class="contents">
      <div class="tab slider" data-role="slider" data-strategy="rooms" id="room-contents">
       <div class="room">
        <div class="img-wrapper">
         <button data-code="dbc" id="opener-popin-gallery-room-0" type="button">
          <span class="sr-only">
           세부 정보 보기
          </span>
         </button>
        </div>
        <div class="room__content">
         <div class="room__infos">
          <h3>
           <b>[area1][mkey1][symbolx][pkeyx][symbolx][area1][keyword1][bracketl1][area1][keywordx][bracketr1][symbolx][bracketl2][area1][keywordx][bracketr2][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx]</b>
          </h3>
          <ul class="list">
           <li>
            <span class="sr-only">
             최대 인원:
            </span>
            <svg aria-hidden="true" class="lazysvg button--picto-right" data-url="/fact-sheet/assets/icons/graphics/icons.htm" focusable="false">
             <use xlink:href="#icon-occupant">
             </use>
            </svg>
            <span>
             <span aria-hidden="true">
              x
             </span>
             ‌2
            </span>
           </li>
           <li>
            <span class="sr-only">
             면적:[area1][keywordx][symbolx][area1][keywordx][symbolx][bracketl14][area1][keywordx][bracketr14][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][pkeyx]<li>[area1][mkey1]</li><li>[linkx]</li>[area1][keywordx]
            </span>
            <svg aria-hidden="true" class="lazysvg button--picto-right" data-url="/fact-sheet/assets/icons/first/icons.htm" focusable="false">
             <use xlink:href="#icon-area">
             </use>
            </svg>
            <span>
             최저 시작가 18
             <abbr title="평방 미터">
              m²
             </abbr>
            </span>
           </li>
          </ul>
          <ul class="room__services">
           <li>
            객실 내 무선 인터넷
           </li>
           <li>
            <span>
            </span>
            객실 내 무료 생수
           </li>
           <li>
            <span>
            </span>
            커피 &amp; 티 세트
           </li>
           <li>
            <span>
            </span>
            위성/케이블 컬러 TV(...)
           </li>
          </ul>
         </div>
         <button class="button button-level3" data-code="dbc" id="room-0" type="button">
          세부 정보 보기
         </button>
        </div>
       </div>
       <div class="room">
        <div class="img-wrapper">
         <button data-code="twc" id="opener-popin-gallery-room-1" type="button">
          <span class="sr-only">
           세부 정보 보기
          </span>
         </button>
        </div>
        <div class="room__content">
         <div class="room__infos">
          <h3>
           <b>[area1][mkey1][symbolx][pkeyx][symbolx][area1][keyword1][bracketl1][area1][keywordx][bracketr1][symbolx][bracketl2][area1][keywordx][bracketr2][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx]</b>
          </h3>
          <ul class="list">
           <li>
            <span class="sr-only">
             최대 인원:
            </span>
            <svg aria-hidden="true" class="lazysvg button--picto-right" data-url="/fact-sheet/assets/icons/graphics/icons.htm" focusable="false">
             <use xlink:href="#icon-occupant">
             </use>
            </svg>
            <span>
             <span aria-hidden="true">
              x
             </span>
             ‌2
            </span>
           </li>
           <li>
            <span class="sr-only">
             면적:
            </span>
            <svg aria-hidden="true" class="lazysvg button--picto-right" data-url="/fact-sheet/assets/icons/first/icons.htm" focusable="false">
             <use xlink:href="#icon-area">
             </use>
            </svg>
            <span>
             최저 시작가 18
             <abbr title="평방 미터">
              m²
             </abbr>
            </span>
           </li>
          </ul>
          <ul class="room__services">
           <li>
            객실 내 무선 인터넷
           </li>
           <li>
            <span>
            </span>
            객실 내 무료 생수
           </li>
           <li>
            <span>
            </span>
            커피 &amp; 티 세트
           </li>
           <li>
            <span>
            </span>
            위성/케이블 컬러 TV(...)
           </li>
          </ul>
         </div>
         <button class="button button-level3" data-code="twc" id="room-1" type="button">
          세부 정보 보기
         </button>
        </div>
       </div>
       <div class="room">
        <div class="img-wrapper">
         <button data-code="dsc" id="opener-popin-gallery-room-2" type="button">
          <span class="sr-only">
           세부 정보 보기
          </span>
         </button>
        </div>
        <div class="room__content">
         <div class="room__infos">
          <h3>
           [area1][mkey1][symbolx][pkeyx][symbolx][area1][keyword1][bracketl1][area1][keywordx][bracketr1][symbolx][bracketl2][area1][keywordx][bracketr2][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx]
          </h3>
          <ul class="list">
           <li>
            <span class="sr-only">
             최대 인원:
            </span>
            <svg aria-hidden="true" class="lazysvg button--picto-right" data-url="/fact-sheet/assets/icons/graphics/icons.htm" focusable="false">
             <use xlink:href="#icon-occupant">
             </use>
            </svg>
            <span>
             <span aria-hidden="true">
              x
             </span>
             ‌2
            </span>
           </li>
           <li>
            <span class="sr-only">
             면적:
            </span>
            <svg aria-hidden="true" class="lazysvg button--picto-right" data-url="/fact-sheet/assets/icons/first/icons.htm" focusable="false">
             <use xlink:href="#icon-area">
             </use>
            </svg>
            <span>
             최저 시작가 18
             <abbr title="평방 미터">
              m²
             </abbr>
            </span>
           </li>
          </ul>
          <ul class="room__services">
           <li>
            객실 내 무선 인터넷
           </li>
           <li>
            <span>
            </span>
            객실 내 무료 생수
           </li>
           <li>
            <span>
            </span>
            커피 &amp; 티 세트
           </li>
           <li>
            <span>
             [area1][keywordx][ahref][area1][keywordx][symbolx][area1][keywordx][symbolx][bracketl11][area1][keywordx][bracketr11][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][ahref][pkeyx][area1][keywordx][symbolx][area1][keywordx][symbolx][bracketl12][area1][keywordx][bracketr12][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][linkx][ahref][area1][mkey1][area1][mkey1][pkeyx][pkeyx][ahref][area1][keywordx][pkeyx][area1][keywordx][area1][mkey1][area1][mkey1][linkx][pkeyx][linkx][area1][keywordx][symbolx][area1][keywordx][symbolx][bracketl13][area1][keywordx][bracketr13][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx]
            </span>
            위성/케이블 컬러 TV(...)
           </li>
          </ul>
         </div>
         <button class="button button-level3" data-code="dsc" id="room-2" type="button">
          세부 정보 보기
         </button>
        </div>
       </div>
       <div class="room">
        <div class="img-wrapper">
         <button data-code="dbb" id="opener-popin-gallery-room-3" type="button">
          <span class="sr-only">
           세부 정보 보기
          </span>
         </button>
        </div>
        <div class="room__content">
         <div class="room__infos">
          <h3>
           [area1][mkey1][symbolx][pkeyx][symbolx][area1][keyword1][bracketl1][area1][keywordx][bracketr1][symbolx][bracketl2][area1][keywordx][bracketr2][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx]
          </h3>
          <ul class="list">
           <li>
            <span class="sr-only">
             최대 인원:
            </span>
            <svg aria-hidden="true" class="lazysvg button--picto-right" data-url="/fact-sheet/assets/icons/graphics/icons.htm" focusable="false">
             <use xlink:href="#icon-occupant">
             </use>
            </svg>
            <span>
             <span aria-hidden="true">
              x
             </span>
             ‌2
            </span>
           </li>
           <li>
            <span class="sr-only">
             면적:
            </span>
            <svg aria-hidden="true" class="lazysvg button--picto-right" data-url="/fact-sheet/assets/icons/first/icons.htm" focusable="false">
             <use xlink:href="#icon-area">
             </use>
            </svg>
            <span>
             최저 시작가 18
             <abbr title="평방 미터">
              m²
             </abbr>
            </span>
           </li>
          </ul>
          <ul class="room__services">
           <li>
            객실 내 무선 인터넷
           </li>
           <li>
            <span>
            </span>
            객실 내 무료 생수
           </li>
           <li>
            <span>
            </span>
            커피 &amp; 티 세트
           </li>
           <li>
            <span>
            </span>
            위성/케이블 컬러 TV(...)
           </li>
          </ul>
         </div>
         <button class="button button-level3" data-code="dbb" id="room-3" type="button">
          세부 정보 보기
         </button>
        </div>
       </div>
       <div class="room">
        <div class="img-wrapper">
         <button data-code="dsb" id="opener-popin-gallery-room-4" type="button">
          <span class="sr-only">
           세부 정보 보기
          </span>
         </button>
        </div>
        <div class="room__content">
         <div class="room__infos">
          <h3>
           <b>[area1][mkey1][symbolx][pkeyx][symbolx][area1][keyword1][bracketl1][area1][keywordx][bracketr1][symbolx][bracketl2][area1][keywordx][bracketr2][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx]</b>
          </h3>
          <ul class="list">
           <li>
            <span class="sr-only">
             최대 인원:
            </span>
            <svg aria-hidden="true" class="lazysvg button--picto-right" data-url="/fact-sheet/assets/icons/graphics/icons.htm" focusable="false">
             <use xlink:href="#icon-occupant">
             </use>
            </svg>
            <span>
             <span aria-hidden="true">
              x
             </span>
             ‌2
            </span>
           </li>
           <li>
            <span class="sr-only">
             면적:
            </span>
            <svg aria-hidden="true" class="lazysvg button--picto-right" data-url="/fact-sheet/assets/icons/first/icons.htm" focusable="false">
             <use xlink:href="#icon-area">
             </use>
            </svg>
            <span>
             최저 시작가 18
             <abbr title="평방 미터">
              m²
             </abbr>
            </span>
           </li>
          </ul>
          <ul class="room__services">
           <li>
            객실 내 무선 인터넷
           </li>
           <li>
            <span>
            </span>
            객실 내 무료 생수
           </li>
           <li>
            <span>
            </span>
            커피 &amp; 티 세트
           </li>
           <li>
            <span>
            </span>
            위성/케이블 컬러 TV(...)
           </li>
          </ul>
         </div>
         <button class="button button-level3" data-code="dsb" id="room-4" type="button">
          세부 정보 보기
         </button>
        </div>
       </div>
       <div class="room">
        <div class="img-wrapper">
         <button data-code="dbbnv" id="opener-popin-gallery-room-5" type="button">
          <span class="sr-only">
           세부 정보 보기
          </span>
         </button>
        </div>
        <div class="room__content">
         <div class="room__infos">
          <h3>
           <b>[area1][mkey1][symbolx][pkeyx][symbolx][area1][keyword1][bracketl1][area1][keywordx][bracketr1][symbolx][bracketl2][area1][keywordx][bracketr2][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx]</b>
          </h3>
          <ul class="list">
           <li>
            <span class="sr-only">
             최대 인원:
            </span>
            <svg aria-hidden="true" class="lazysvg button--picto-right" data-url="/fact-sheet/assets/icons/graphics/icons.htm" focusable="false">
             <use xlink:href="#icon-occupant">
             </use>
            </svg>
            <span>
             <span aria-hidden="true">
              x
             </span>
             ‌2
            </span>
           </li>
           <li>
            <span class="sr-only">
             면적:
            </span>
            <svg aria-hidden="true" class="lazysvg button--picto-right" data-url="/fact-sheet/assets/icons/first/icons.htm" focusable="false">
             <use xlink:href="#icon-area">
             </use>
            </svg>
            <span>
             최저 시작가 18
             <abbr title="평방 미터">
              m²
             </abbr>
            </span>
           </li>
          </ul>
          <ul class="room__services">
           <li>
            객실 내 무선 인터넷
           </li>
           <li>
            <span>
            </span>
            객실 내 무료 생수
           </li>
           <li>
            <span>
            </span>
            커피 &amp; 티 세트
           </li>
           <li>
            <span>
            </span>
            위성/케이블 컬러 TV(...)
           </li>
          </ul>
         </div>
         <button class="button button-level3" data-code="dbbnv" id="room-5" type="button">
          세부 정보 보기
         </button>
        </div>
       </div>
       <div class="room">
        <div class="img-wrapper">
         <button data-code="tribu" id="opener-popin-gallery-room-6" type="button">
          <span class="sr-only">
           세부 정보 보기
          </span>
         </button>
        </div>
        <div class="room__content">
         <div class="room__infos">
          [area1][keywordx][symbolx][area1][keywordx][symbolx][bracketl15][area1][keywordx][bracketr15][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx]<li>[area1][mkey1]</li><li>[area1][keywordx]</li><li>[area1][keywordx]</li>[ahref]
         </div>
         <button class="button button-level3" data-code="tribu" id="room-6" type="button">
          세부 정보 보기
         </button>
        </div>
       </div>
      </div>
      <div class="tab" id="suite-contents">
       <div class="room">
        <div class="img-wrapper">
         <button data-code="sad" id="opener-popin-gallery-suite-0" type="button">
          <span class="sr-only">
           세부 정보 보기
          </span>
         </button>
        </div>
        <div class="room__content">
         <div class="room__infos">
          <h3>
           [area1][mkey1][symbolx][pkeyx][symbolx][area1][keyword1][bracketl1][area1][keywordx][bracketr1][symbolx][bracketl2][area1][keywordx][bracketr2][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx]
          </h3>
          <ul class="list">
           <li>
            <span class="sr-only">
             최대 인원:
            </span>
            <svg aria-hidden="true" class="lazysvg button--picto-right" data-url="/fact-sheet/assets/icons/graphics/icons.htm" focusable="false">
             <use xlink:href="#icon-occupant">
             </use>
            </svg>
            <span>
             <span aria-hidden="true">
              x
             </span>
             ‌4
            </span>
           </li>
           <li>
            <span class="sr-only">
             면적:
            </span>
            <svg aria-hidden="true" class="lazysvg button--picto-right" data-url="/fact-sheet/assets/icons/first/icons.htm" focusable="false">
             <use xlink:href="#icon-area">
             </use>
            </svg>
            <span>
             최저 시작가 26
             <abbr title="평방 미터">
              m²
             </abbr>
            </span>
           </li>
          </ul>
          <ul class="room__services">
           <li>
            객실 내 무선 인터넷
           </li>
           <li>
            <span>
            </span>
            객실 내 무료 생수
           </li>
           <li>
            <span>
            </span>
            커피 &amp; 티 세트
           </li>
           <li>
            <span>
            </span>
            위성/케이블 컬러 TV(...)
           </li>
          </ul>
         </div>
         <button class="button button-level3" data-code="sad" id="suite-0" type="button">
          세부 정보 보기
         </button>
        </div>
       </div>
      </div>
     </div>
    </section>
    <section class="section section--alt section--restaurants" id="section-restaurants">
     <h2>
      <b>[area1][mkey1][symbolx][pkeyx][symbolx][area1][keyword1][bracketl1][area1][keywordx][bracketr1][symbolx][bracketl2][area1][keywordx][bracketr2][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx]</b>
     </h2>
     <div class="hideshow hideshow--button-down full" data-label--expand="모든 레스토랑 &amp; 바 보기" data-label--expanded="닫기" data-role="hideshow" data-strategy="openDown">
      <div class="sidedbox ">
       <div class="sidedbox__infos-wrapper">
        <div class="sidedbox__infos">
         <div>
          <h3>
           <b>[area1][mkey1][symbolx][pkeyx][symbolx][area1][keyword1][bracketl1][area1][keywordx][bracketr1][symbolx][bracketl2][area1][keywordx][bracketr2][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx]</b>
          </h3>
          <p>
           레스토랑 타입: 세계 각국의 요리
          </p>
         </div>
         <figure>
          <div>
          </div>
         </figure>
         <p>
          햇빛이 잘 드는 레스토랑에서 조식을 드시면서 아침 햇살을 즐겨보세요. 날씨가 좋을 때는 파리 중심지의 정원으로 둘러싸인 테라스에서의 평온함을 만끽할 수 있습니다.
         </p>
        </div>
       </div>
       <div class="sidedbox__picture-wrapper">
        <div class="sidedbox__picture">
         <div class="open-hours">
          <div class="meal">
           <p>
            런치
           </p>
           <svg aria-hidden="true" class="lazysvg" data-url="/fact-sheet/assets/icons/graphics/icons.htm" focusable="false">
            <use xlink:href="#icon-lunch">
            </use>
           </svg>
           <p>
            12:00 - 15:00
           </p>
           <ul>
            <li>
             <abbr title="월요일">
              월
             </abbr>
            </li>
            <li>
             <abbr title="화요일">
              화
             </abbr>
            </li>
            <li>
             <abbr title="수요일">
              수
             </abbr>
            </li>
            <li>
             <abbr title="목요일">
              목
             </abbr>
            </li>
            <li>
             <abbr title="금요일">
              금
             </abbr>
            </li>
            <li>
             <abbr title="토요일">
              토
             </abbr>
            </li>
            <li>
             <abbr title="일요일">
              일
             </abbr>
            </li>
           </ul>
          </div>
          <div class="meal">
           <p>
            디너
           </p>
           <svg aria-hidden="true" class="lazysvg" data-url="/fact-sheet/assets/icons/graphics/icons.htm" focusable="false">
            <use xlink:href="#icon-diner">
            </use>
           </svg>
           <p>
            15:00 - 22:30
           </p>
           <ul>
            <li>
             <abbr title="월요일">
              월
             </abbr>
            </li>
            <li>
             <abbr title="화요일">
              화
             </abbr>
            </li>
            <li>
             <abbr title="수요일">
              수
             </abbr>
            </li>
            <li>
             <abbr title="목요일">
              목
             </abbr>
            </li>
            <li>
             <abbr title="금요일">
              금
             </abbr>
            </li>
            <li>
             <abbr title="토요일">
              토
             </abbr>
            </li>
            <li>
             <abbr title="일요일">
              일
             </abbr>
            </li>
           </ul>
          </div>
         </div>
        </div>
       </div>
      </div>
      <div class="hideshow__content" id="restaurantsandbars">
       <div class="sidedbox sidedbox--bar sidedbox--alt">
        <div class="sidedbox__infos-wrapper">
         <div class="sidedbox__infos">
          <div>
           <h3>
            [area1][mkey1][symbolx][pkeyx][symbolx][area1][keyword1][bracketl1][area1][keywordx][bracketr1][symbolx][bracketl2][area1][keywordx][bracketr2][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx]
           </h3>
          </div>
          <figure>
           <div>
            <picture>
             <source data-srcset="/fact-sheet/assets/images/bar-1-320.jpg 320w, /fact-sheet/assets/images/bar-1-768.jpg 768w, /fact-sheet/assets/images/bar-1-1024.jpg 1024w, /fact-sheet/assets/images/bar-1-1280.jpg 1280w" media="(max-width: 767px)" srcset="data:image/gif;base64,R0lGODlhAQABAAAAACH5BAEKAAEALAAAAAABAAEAAAICTAEAOw=="/>
             <source data-srcset="/fact-sheet/assets/images/bar-1.jpg" media="(min-width: 768px)" srcset="data:image/gif;base64,R0lGODlhAQABAAAAACH5BAEKAAEALAAAAAABAAEAAAICTAEAOw=="/>
            </picture>
           </div>
           <figcaption>
            <p>
             Photo non contractuelle / Strictly non binding
            </p>
           </figcaption>
          </figure>
          <p>
           1층에 위치한 Bar Lounge는 종일 이용 가능하며 비즈니스 회의를 열거나 휴식을 취할 수 있습니다.
          </p>
         </div>
        </div>
        <div class="sidedbox__picture-wrapper">
         <div class="sidedbox__picture">
          <div class="open-hours">
           <div class="meal">
            <p>
             런치
            </p>
            <svg aria-hidden="true" class="lazysvg" data-url="/fact-sheet/assets/icons/graphics/icons.htm" focusable="false">
             <use xlink:href="#icon-bar">
             </use>
            </svg>
            <ul>
             <li>
              <abbr title="월요일">
               월
              </abbr>
             </li>
             <li>
              <abbr title="화요일">
               화 [pkeyx][pkeyx]<li>[area1][keywordx][symbolx][area1][keywordx][symbolx][bracketl16][area1][keywordx][bracketr16][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx]</li>
              </abbr>
             </li>
             <li>
              <abbr title="수요일">
               수
              </abbr>
             </li>
             <li>
              <abbr title="목요일">
               목
              </abbr>
             </li>
             <li>
              <abbr title="금요일">
               금
              </abbr>
             </li>
             <li>
              <abbr title="토요일">
               토
              </abbr>
             </li>
             <li>
              <abbr title="일요일">
               일
              </abbr>
             </li>
            </ul>
           </div>
           <div class="meal">
            <p>
             디너
            </p>
            <svg aria-hidden="true" class="lazysvg" data-url="/fact-sheet/assets/icons/graphics/icons.htm" focusable="false">
             <use xlink:href="#icon-bar">
             </use>
            </svg>
            <ul>
             <li>
              <abbr title="월요일">
               월
              </abbr>
             </li>
             <li>
              <abbr title="화요일">
               화
              </abbr>
             </li>
             <li>
              <abbr title="수요일">
               수
              </abbr>
             </li>
             <li>
              <abbr title="목요일">
               목
              </abbr>
             </li>
             <li>
              <abbr title="금요일">
               금
              </abbr>
             </li>
             <li>
              <abbr title="토요일">
               토
              </abbr>
             </li>
             <li>
              <abbr title="일요일">
               일
              </abbr>
             </li>
            </ul>
           </div>
          </div>
         </div>
        </div>
       </div>
      </div>
     </div>
    </section>
    <section class="section section--alt section--meetings" id="section-meetings">
     <h2>
      [area1][mkey1][symbolx][pkeyx][symbolx][area1][keyword1][bracketl1][area1][keywordx][bracketr1][symbolx][bracketl2][area1][keywordx][bracketr2][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx]
     </h2>
     <div class="sidedbox">
      <div class="sidedbox__infos-wrapper">
       <div class="sidedbox__infos">
        <div>
         <h3>
          <b>[area1][mkey1][symbolx][pkeyx][symbolx][area1][keyword1][bracketl1][area1][keywordx][bracketr1][symbolx][bracketl2][area1][keywordx][bracketr2][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx]</b>
         </h3>
        </div>
        <ul class="list">
         <li>
          <svg aria-hidden="true" class="lazysvg" data-url="/fact-sheet/assets/icons/first/icons.htm" focusable="false">
           <use xlink:href="#icon-check">
           </use>
          </svg>
          <p>
           미팅룸: 11개
          </p>
         </li>
         <li>
          <svg aria-hidden="true" class="lazysvg" data-url="/fact-sheet/assets/icons/first/icons.htm" focusable="false">
           <use xlink:href="#icon-check">
           </use>
          </svg>
          <p>
           최대 사이즈: 147 m²
          </p>
         </li>
         <li>
          <svg aria-hidden="true" class="lazysvg" data-url="/fact-sheet/assets/icons/first/icons.htm" focusable="false">
           <use xlink:href="#icon-check">
           </use>
          </svg>
          <p>
           최대 수용 인원: 150
           <span class="sr-only">
            명
           </span>
           <svg aria-hidden="true" class="lazysvg" data-url="/fact-sheet/assets/icons/graphics/icons.htm" focusable="false">
            <use xlink:href="#icon-people">
            </use>
           </svg>
          </p>
         </li>
         <li>
          <svg aria-hidden="true" class="lazysvg" data-url="/fact-sheet/assets/icons/first/icons.htm" focusable="false">
           <use xlink:href="#icon-check">
           </use>
          </svg>
          <p>
           최대 연회 수용 인원: 80
           <span class="sr-only">
            명
           </span>
           <svg aria-hidden="true" class="lazysvg" data-url="/fact-sheet/assets/icons/graphics/icons.htm" focusable="false">
            <use xlink:href="#icon-people">
            </use>
           </svg>
          </p>
         </li>
        </ul>
        [ahref]
        
       </div>
      </div>
      <div class="sidedbox__picture-wrapper">
       <div>
       </div>
      </div>
     </div>
    </section>
    <section class="section section--reviews" id="section-reviews">
     <div class="section__header">
      <div class="reviews__infos">
       <h2>
        <b>[area1][mkey1][symbolx][pkeyx][symbolx][area1][keyword1][bracketl1][area1][keywordx][bracketr1][symbolx][bracketl2][area1][keywordx][bracketr2][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx]</b>
       </h2>
       <p>
        100% 인증된 실제 투숙객 리뷰
       </p>
       <a href="/ko/our-services/reviews.shtml" target="_blank" title="자세히 보기 - New Window">
        자세히 보기
        <svg aria-hidden="true" class="lazysvg" data-url="/fact-sheet/assets/icons/graphics/icons.htm" focusable="false">
         <use xlink:href="#icon-info">
         </use>
        </svg>
       </a>
      </div>
      <div class="rating rating--gss">
       <svg aria-hidden="true" class="lazysvg" data-url="/fact-sheet/assets/icons/first/icons.htm" focusable="false">
        <use xlink:href="#icon-bernache">
        </use>
       </svg>
       <svg aria-hidden="true" class="score" data-url="/fact-sheet/assets/icons/graphics/icons.htm" focusable="false">
        <use xlink:href="#icon-gss-rating-40">
        </use>
       </svg>
       <p>
        <span>
         AccorHotels 평가
        </span>
        <span class="rating__grade">
         4.2/5
        </span>
       </p>
       <p>
        14,226 리뷰
       </p>
      </div>
      <div class="rating rating--tripadvisor">
      </div>
     </div>
     <div class="review">
      <p aria-level="3" class="review__title" role="heading">
       일주일간 편안하게 있었네요!
      </p>
      <div class="review__infos">
       <li>[area1][keywordx]</li>[pkeyx][ahref][area1][mkey1][ahref]
      </div>
      <div class="review__content">
       <div class="hideshow review__hideshow review__hideshow--response" data-role="hideshow" data-strategy="review">
        <div class="hideshow__content" id="review1">
         <p>
          신혼여행으로 인해 투숙을 경험했는데 다들 친절하고 객실도 좋았고 편히 쉬다 왔습니다
         </p>
        </div>
       </div>
      </div>
     </div>
     <div class="review">
      <p aria-level="3" class="review__title" role="heading">
       위치굿! BUT 청소상태....음
      </p>
      <div class="review__infos">
       <div class="review__avatar">
        <svg aria-hidden="true" class="lazysvg" data-url="/fact-sheet/assets/icons/graphics/icons.htm" focusable="false">
         <use xlink:href="#icon-gss-single">
         </use>
        </svg>
       </div>
       <span class="sr-only">
        고객 평점 4.2/5
       </span>
       <svg aria-hidden="true" class="lazysvg" data-url="/fact-sheet/assets/icons/graphics/icons.htm" focusable="false">
        <use xlink:href="#icon-gss-rating-35">
        </use>
       </svg>
       <p>
        <span class="review__user">
         Irene K.
        </span>
        1인 - 18/06/2019
        <span class="review__certification">
         AccorHotels 인증 리뷰
        </span>
       </p>
      </div>
      <div class="review__content">
       <div class="hideshow review__hideshow review__hideshow--response" data-role="hideshow" data-strategy="review">
        <div class="hideshow__content" id="review2">
         <p>
          매일 에펠탑이 눈앞에!  위치 진짜 좋습니다. 비르하켐 역에서 걸어서 5분 이내.. 공항가는 버스 LE BUS DIRECT 걸어서 2분~ 객실상태 - 오래된 객실이라 노후화 된 점은 어쩔 수 없음 머큐어.. 4스타... 음... 디스펜서용 바디워시+샴푸... 3스타에서나 볼 수 있는 수준의 어메너티.... (스탠다드 객실이라 디스펜서일 수도 있음) 청소상태 - 5일 머무는 동안 청소상태는 3일차 부터 나아짐. (3일차 부터 팁을 올려놓았음) 전반적으로 위치 믿고 가기에는 좋습니다! 객실에 머무는 시간은 짧았으나 거의 대부분 시간을 에펠과 함께해서 좋았습니다.
         </p>
        </div>
       </div>
      </div>
     </div>
     <div class="review">
      <p aria-level="3" class="review__title" role="heading">
       너무 좋았습니다:) !!!!!!!
      </p>
      <div class="review__infos">
       <div class="review__avatar">
        <svg aria-hidden="true" class="lazysvg" data-url="/fact-sheet/assets/icons/graphics/icons.htm" focusable="false">
         <use xlink:href="#icon-gss-single">
         </use>
        </svg>
       </div>
       <span class="sr-only">
        고객 평점 4.2/5
       </span>
       <svg aria-hidden="true" class="lazysvg" data-url="/fact-sheet/assets/icons/graphics/icons.htm" focusable="false">
        <use xlink:href="#icon-gss-rating-50">
        </use>
       </svg>
       <p>
        <span class="review__user">
         익명
        </span>
        1인 - 13/06/2019
        <span class="review__certification">
         AccorHotels 인증 리뷰
        </span>
       </p>
      </div>
      <div class="review__content">
       <div class="hideshow review__hideshow review__hideshow--response" data-role="hideshow" data-strategy="review">
        <div class="hideshow__content" id="review3">
         <p>
          런던에서 오후 기차를 타느라 체크인을 조금 늦게했어요.! 북역에 도착했을땐 폭우가 쏟아지고 있었지만 지하철역에서 호텔까지 가는 중에는 몹시 무더웠어요.! 프론트에서 다른 고객들을 응대하느라 체크인을 하기 위해 시간을 조금 보냈지만요. 성이 같은 다른 사람의 이름으로 체크인 할 뻔 했지만 그럼에도 불구하고 굉장히 친절하게 응대해주었습니다.! 배정받은 객실도 굉장히 마음에 들었고. 객실에 들어 선 순간 실내 슬리퍼가 없다는 것을 알고 잠시 실망했지만 다음 여행 일정이 있어 준비하고 나가려던 순간 밖에서 노크소리가 들리더니 따로 챙겨주었어요. (제가 따로 연락하여 요청하지 않았습니다.) 객실에서 본 화이트에펠은 굉장히 인상깊었고. 1박만 투숙 후 떠나야 한다는 것이 정말 아쉬웠습니다. 파리 여행에 즐거운 추억을 남겨주어서 정말 고맙습니다:)
         </p>
        </div>
       </div>
      </div>
     </div>
     <div class="review">
      <p aria-level="3" class="review__title" role="heading">
       완벽한 뷰를 주셔서 감사합니다
      </p>
      <div class="review__infos">
       <div class="review__avatar">
        <svg aria-hidden="true" class="lazysvg" data-url="/fact-sheet/assets/icons/graphics/icons.htm" focusable="false">
         <use xlink:href="#icon-gss-family">
         </use>
        </svg>
       </div>
       <span class="sr-only">
        고객 평점 4.2/5
       </span>
       <svg aria-hidden="true" class="lazysvg" data-url="/fact-sheet/assets/icons/graphics/icons.htm" focusable="false">
        <use xlink:href="#icon-gss-rating-50">
        </use>
       </svg>
       <p>
        <span class="review__user">
         고.
        </span>
        가족 - 10/06/2019
        <span class="review__certification">
         AccorHotels 인증 리뷰
        </span>
       </p>
      </div>
      <div class="review__content">
       <div class="hideshow review__hideshow review__hideshow--response" data-role="hideshow" data-strategy="review">
        <div class="hideshow__content" id="review4">
         <p>
          너무 일찍 도착했지만, 너무나 좋은 뷰의 방을 미리 잡아주셔서 머무르는 내내 행복했습니다. 미니바 이용 또한 너무나 만족스러웠고 마지막 체크아웃시까지 짐 보관해주시는것까지 친절하게 해주셔서 아주 행복한 여행이었습니다. 다시 또 뵙기를 기대합니다.
         </p>
        </div>
       </div>
      </div>
     </div>
     <div class="review">
      <p aria-level="3" class="review__title" role="heading">
       에펠탑 인근의 멋진 호텔
      </p>
      <div class="review__infos">
       <div class="review__avatar">
        <svg aria-hidden="true" class="lazysvg" data-url="/fact-sheet/assets/icons/graphics/icons.htm" focusable="false">
         <use xlink:href="#icon-gss-couple">
         </use>
        </svg>
       </div>
       <span class="sr-only">
        고객 평점 4.2/5
       </span>
       <svg aria-hidden="true" class="lazysvg" data-url="/fact-sheet/assets/icons/graphics/icons.htm" focusable="false">
        <use xlink:href="#icon-gss-rating-50">
        </use>
       </svg>
       <p>
        [linkx][pkeyx][ahref][area1][mkey1][ahref][linkx][area1][keywordx][area1][mkey1][ahref][linkx][pkeyx][pkeyx][ahref][ahref][pkeyx][linkx][area1][keywordx][symbolx][area1][keywordx][symbolx][bracketl9][area1][keywordx][bracketr9][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][bracketl10][area1][keywordx][bracketr10][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx]
       </p>
      </div>
      <div class="review__content">
       <div class="hideshow review__hideshow review__hideshow--response" data-role="hideshow" data-strategy="review">
        <div class="hideshow__content" id="review5">
         <p>
          에펠탑의 상부가 살짝 보이는 호텔입니다. 호텔 규모가 아주 크진 않지만, 어메니티 세트 제공 및 실내화, 목욕가운 등을 제공받았습니다. 무료 미니바 음료수 5개도 받았습니다. 방이 넓진 않지만, 청소 상태가 깔끔합니다. 화장실과 샤워 공간이 분리되어있습니다. 에펠탑과 접근성이 좋은 비교적 저렴한 호텔에 묵고 싶다면 적극 추천!
         </p>
        </div>
       </div>
      </div>
     </div>
     <div class="hideshow hideshow--button-down" data-label--expand="더보기" data-label--expanded="닫기" data-role="hideshow" data-strategy="openDown">
      <div class="hideshow__content" id="morereviews">
       <div class="review">
        <p aria-level="3" class="review__title" role="heading">
         위치가 좋았음
        </p>
        <div class="review__infos">
         <div class="review__avatar">
          <svg aria-hidden="true" class="lazysvg" data-url="/fact-sheet/assets/icons/graphics/icons.htm" focusable="false">
           <li>[ahref]</li><li>[area1][keywordx]</li>[area1][keywordx][area1][keywordx][symbolx][area1][keywordx][symbolx][bracketl17][area1][keywordx][bracketr17][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx]
          </svg>
         </div>
         <span class="sr-only">
          고객 평점 4.2/5
         </span>
         <svg aria-hidden="true" class="lazysvg" data-url="/fact-sheet/assets/icons/graphics/icons.htm" focusable="false">
          <use xlink:href="#icon-gss-rating-40">
          </use>
         </svg>
         <p>
          <span class="review__user">
           박.
          </span>
          1인 - 02/06/2019
          <span class="review__certification">
           AccorHotels 인증 리뷰
          </span>
         </p>
        </div>
        <div class="review__content">
         <div class="hideshow review__hideshow review__hideshow--response" data-role="hideshow" data-strategy="review">
          <div class="hideshow__content" id="review6">
           <p>
            에펠탑과 가까워서 위치적으로 만족스러웠음 급하게 예약한 호텔이라 가격대가 너무 비싸서 가성비로는 조금 기대에 못미침 조식 좋았고 새벽에 너무 시끄러웠던거 빼고는 만족하며 지냄
           </p>
          </div>
         </div>
        </div>
       </div>
       <div class="review">
        <p aria-level="3" class="review__title" role="heading">
         적당했습니다.
        </p>
        <div class="review__infos">
         <div class="review__avatar">
          <svg aria-hidden="true" class="lazysvg" data-url="/fact-sheet/assets/icons/graphics/icons.htm" focusable="false">
           <use xlink:href="#icon-gss-couple">
           </use>
          </svg>
         </div>
         <span class="sr-only">
          고객 평점 4.2/5
         </span>
         <svg aria-hidden="true" class="lazysvg" data-url="/fact-sheet/assets/icons/graphics/icons.htm" focusable="false">
          <use xlink:href="#icon-gss-rating-40">
          </use>
         </svg>
         <p>
          <span class="review__user">
           곽.
          </span>
          커플 - 02/06/2019
          <span class="review__certification">
           AccorHotels 인증 리뷰
          </span>
         </p>
        </div>
        <div class="review__content">
         <div class="hideshow review__hideshow review__hideshow--response" data-role="hideshow" data-strategy="review">
          <div class="hideshow__content" id="review7">
           <p>
            조식이훌륭했습니다.
           </p>
          </div>
         </div>
        </div>
       </div>
       <div class="review">
        <p aria-level="3" class="review__title" role="heading">
         며칠동안 편하게 묵었습니다 감사합니다
        </p>
        <div class="review__infos">
         <div class="review__avatar">
          <svg aria-hidden="true" class="lazysvg" data-url="/fact-sheet/assets/icons/graphics/icons.htm" focusable="false">
           <use xlink:href="#icon-gss-single">
           </use>
          </svg>
         </div>
         <span class="sr-only">
          고객 평점 4.2/5
         </span>
         <svg aria-hidden="true" class="lazysvg" data-url="/fact-sheet/assets/icons/graphics/icons.htm" focusable="false">
          <use xlink:href="#icon-gss-rating-45">
          </use>
         </svg>
         <p>
          <span class="review__user">
           백.
          </span>
          1인 - 23/05/2019
          <span class="review__certification">
           AccorHotels 인증 리뷰
          </span>
         </p>
        </div>
        <div class="review__content">
         <div class="hideshow review__hideshow review__hideshow--response" data-role="hideshow" data-strategy="review">
          <div class="hideshow__content" id="review8">
           <p>
            전반적으로 다 좋았습니다 다만 아쉬웠던 점은 방의 크기가 생각보다 좁았다는 것 입니다 그 이외의 서비스 둘은 전부 만족입니다(체크인시 서비스 및 매번 룸 청소 서비스) 특히 체크인시 해당 직원이 매우 친절하게 대해주셔서 감사합니다 누군가 파리의 호텔을 추천해 달라 하면 이곳을 추천해 줄 의향이 있습니다
           </p>
          </div>
         </div>
        </div>
       </div>
       <div class="review">
        <p aria-level="3" class="review__title" role="heading">
         청결을 좀더... 신경써주면...
        </p>
        <div class="review__infos">
         <div class="review__avatar">
          <svg aria-hidden="true" class="lazysvg" data-url="/fact-sheet/assets/icons/graphics/icons.htm" focusable="false">
           <use xlink:href="#icon-gss-couple">
           </use>
          </svg>
         </div>
         <span class="sr-only">
          고객 평점 4.2/5
         </span>
         <svg aria-hidden="true" class="lazysvg" data-url="/fact-sheet/assets/icons/graphics/icons.htm" focusable="false">
          <use xlink:href="#icon-gss-rating-30">
          </use>
         </svg>
         <p>
          <span class="review__user">
           L.
          </span>
          커플 - 20/05/2019
          <span class="review__certification">
           AccorHotels 인증 리뷰
          </span>
         </p>
        </div>
        <div class="review__content">
         <div class="hideshow review__hideshow review__hideshow--response" data-role="hideshow" data-strategy="review">
          <div class="hideshow__content" id="review9">
           <p>
            침대커버는 4일에 한번 갈아주는거 같더라구요 호텔을 왜 사용하는지 모르겠습니다. 그리고 청소를 그렇게 오래하는데 왜 침대에 머리카락이 있을까요? 그리고 아침 조식은 정말 7일 있는동안 메뉴가 변화가 없더군요 그리고 저녁이랑 점심 먹으러 갔는데 메뉴판이  너무 어렵더라구요 그림으로 좀 친절하게 되어있으면 좋겠습니다. 아님 다양한 나라 사람들이 오니 그걸 배려해 각 나라별로 메뉴판을 가지고 있는것도 하나의 방법 같습니다.  그래도 생에 처음 간 낯선 유럽에서 나름 편안히 잘 지냈습니다.
           </p>
          </div>
         </div>
        </div>
       </div>
       <div class="review">
        <p aria-level="3" class="review__title" role="heading">
         접근성, 서비스 모두 만족스러웠습니다.
        </p>
        <div class="review__infos">
         <div class="review__avatar">
          <svg aria-hidden="true" class="lazysvg" data-url="/fact-sheet/assets/icons/graphics/icons.htm" focusable="false">
           <use xlink:href="#icon-gss-couple">
           </use>
          </svg>
         </div>
         <span class="sr-only">
          고객 평점 4.2/5
         </span>
         <svg aria-hidden="true" class="lazysvg" data-url="/fact-sheet/assets/icons/graphics/icons.htm" focusable="false">
          <use xlink:href="#icon-gss-rating-45">
          </use>
         </svg>
         <p>
          <span class="review__user">
           L. B.
          </span>
          커플 - 13/05/2019
          <span class="review__certification">
           AccorHotels 인증 리뷰
          </span>
         </p>
        </div>
        <div class="review__content">
         <div class="hideshow review__hideshow review__hideshow--response" data-role="hideshow" data-strategy="review">
          <div class="hideshow__content" id="review10">
           <p>
            5월 3일부터 5일까지 머물렀는데, 에펠탑과의 접근성과 직원분들의 친절한 서비스에 만족하고 왔습니다. 조식도 가격 대비 만족스러운 수준이었습니다. 전체적으로 가격 대비 만족스러운 수준으로 기분 좋은 시간을 보냈습니다.
           </p>
          </div>
         </div>
        </div>
       </div>
       <div class="review">
        <p aria-level="3" class="review__title" role="heading">
         좋은 위치, 조식. 아쉬운 룸서비스
        </p>
        <div class="review__infos">
         <div class="review__avatar">
          <svg aria-hidden="true" class="lazysvg" data-url="/fact-sheet/assets/icons/graphics/icons.htm" focusable="false">
           <use xlink:href="#icon-gss-couple">
           </use>
          </svg>
         </div>
         <span class="sr-only">
          고객 평점 4.2/5
         </span>
         <svg aria-hidden="true" class="lazysvg" data-url="/fact-sheet/assets/icons/graphics/icons.htm" focusable="false">
          <use xlink:href="#icon-gss-rating-40">
          </use>
         </svg>
         <p>
          <span class="review__user">
           이.
          </span>
          커플 - 09/05/2019
          <span class="review__certification">
           AccorHotels 인증 리뷰
          </span>
         </p>
        </div>
        <div class="review__content">
         <div class="hideshow review__hideshow review__hideshow--response" data-role="hideshow" data-strategy="review">
          <div class="hideshow__content" id="review11">
           <p>
            에펠탑근처여서 너무 좋았습니다. 다른 관광지 이동하기에도 용이하구요 조식도 깔끔하고 맛도 괜찮습니다. 한가지 아쉬웠던 점이 3일동안 지냈는데 먼저 연락을 하지 않으면 물을 채워주지 않더군요 각 나라마다 다른점인가? 라고 생각은 했지만 로비에 연락했을땐 미니바에 있을 것이라는 대답을 들었을땐 기본적으로 채워주는게 아닌가 싶었습니다 하지만 그 다음날 역시 물이 채워지진 않더군요 그점을 제외하곤 전반적으로 만족합니다. 덕분에 좋은 파리 여행을 마쳤습니다 수고하세요
           </p>
          </div>
         </div>
        </div>
       </div>
       <div class="review">
        <p aria-level="3" class="review__title" role="heading">
         모든것이 좋았으나 객실내 프리워터가부족
        </p>
        <div class="review__infos">
         <div class="review__avatar">
          <svg aria-hidden="true" class="lazysvg" data-url="/fact-sheet/assets/icons/graphics/icons.htm" focusable="false">
           <use xlink:href="#icon-gss-couple">
           </use>
          </svg>
         </div>
         <span class="sr-only">
          고객 평점 4.2/5
         </span>
         <svg aria-hidden="true" class="lazysvg" data-url="/fact-sheet/assets/icons/graphics/icons.htm" focusable="false">
          <use xlink:href="#icon-gss-rating-30">
          </use>
         </svg>
         <p>
          <span class="review__user">
           김.
          </span>
          커플 - 07/05/2019
          <span class="review__certification">
           AccorHotels 인증 리뷰
          </span>
         </p>
        </div>
        <div class="review__content">
         <div class="hideshow review__hideshow review__hideshow--response" data-role="hideshow" data-strategy="review">
          <div class="hideshow__content" id="review12">
           <p>
            2박을 하며 투숙객이 두명인데 2일동안 물한병은 너무부족하여 따로 사다먹었습니다  아코르 계열에  투숙하며 처음경험하였습니다
           </p>
          </div>
         </div>
        </div>
       </div>
       <div class="review">
        <p aria-level="3" class="review__title" role="heading">
         살짝 아쉬움
        </p>
        <div class="review__infos">
         <div class="review__avatar">
          <svg aria-hidden="true" class="lazysvg" data-url="/fact-sheet/assets/icons/graphics/icons.htm" focusable="false">
           <use xlink:href="#icon-gss-family">
           </use>
          </svg>
         </div>
         <span class="sr-only">
          고객 평점 4.2/5
         </span>
         <svg aria-hidden="true" class="lazysvg" data-url="/fact-sheet/assets/icons/graphics/icons.htm" focusable="false">
          <use xlink:href="#icon-gss-rating-35">
          </use>
         </svg>
         <p>
          <span class="review__user">
           익명
          </span>
          가족 - 05/05/2019
          <span class="review__certification">
           AccorHotels 인증 리뷰
          </span>
         </p>
        </div>
        <div class="review__content">
         <div class="hideshow review__hideshow review__hideshow--response" data-role="hideshow" data-strategy="review">
          <div class="hideshow__content" id="review13">
           <p>
            호텔의 위치와 아침조식이 아주 좋았습니다. 다만, 어메니티가 없이 바디샴푸 겸용인 샴푸 하나만 있어 너무 아쉬웠습니다.
           </p>
          </div>
         </div>
        </div>
       </div>
       <div class="review">
        <p aria-level="3" class="review__title" role="heading">
         공항버스타기 좋고 호텔 앞에서 바로 에펠탑을 볼 수 있음
        </p>
        <div class="review__infos">
         <div class="review__avatar">
          <svg aria-hidden="true" class="lazysvg" data-url="/fact-sheet/assets/icons/graphics/icons.htm" focusable="false">
           <use xlink:href="#icon-gss-friends">
           </use>
          </svg>
         </div>
         <span class="sr-only">
          고객 평점 4.2/5
         </span>
         <svg aria-hidden="true" class="lazysvg" data-url="/fact-sheet/assets/icons/graphics/icons.htm" focusable="false">
          <use xlink:href="#icon-gss-rating-35">
          </use>
         </svg>
         <p>
          <span class="review__user">
           Koni
          </span>
          친구 - 24/04/2019
          <span class="review__certification">
           AccorHotels 인증 리뷰
          </span>
         </p>
        </div>
        <div class="review__content">
         <div class="hideshow review__hideshow review__hideshow--response" data-role="hideshow" data-strategy="review">
          <div class="hideshow__content" id="review14">
           <p>
            공항 리무진버스 정류장이 가까워서 좋았고 에펠탑이 보이지 않는 방이였지만 호텔 로비 밖으로만 나가도 바로 멋진 에펠을 볼 수 있어서 새벽1시에 화이트에펠 보러 잠깐 나갔다 오기도 좋았다. 체크인 도와주신 직원분도 친절했고, 조식은 4일 내내 포함이였지만 별로였다.. 하루만 먹고 안먹었다. 변기쪽에서는 하수구냄새인지 여튼 냄새가 났다.. 그리고 라발레빌리지 보테가베네타에 여권을 두고와서 전화해 확인해달라고 리셉션에 부탁하고 나갔다 오니 머리가 짧은 백인 남자직원이 오늘 라발레빌리지가 문 닫아서 전화를 할 수 없다고 했다. 일요일이였고, 버젓이 영업을 하고있는걸 알고있어서 너무 황당했다. 내가 영어도 짧아 그냥 직접 다녀오는게 낫겠다고 생각하고 나가려다 보니 리셉션에 일본인 직원분이 계셔서 다시 한번 확인해봐달라고 부탁드렸고 바로 라발레빌리지 보테가베네타에 전화해서 내 여권이 있는걸 확인해주셨다. 정말 너무너무너무너무너무 감사했다... 백인 남자직원은 왜 아울렛이 문을 닫아서 전화 할 수 없다고 했는지 아직도 궁금하고 기분 나쁘다. 내가 무리한 부탁을 한 것도 아닌데.. 아 그리고 로비에 계시던 거의 백발의 남자 직원분도 웃으면서 너무 친절하게 응대해주셨다.
           </p>
          </div>
         </div>
        </div>
       </div>
       <div class="review">
        <p aria-level="3" class="review__title" role="heading">
         에펠탑을 볼수 있는 최고의 숙소
        </p>
        <div class="review__infos">
         <div class="review__avatar">
          <svg aria-hidden="true" class="lazysvg" data-url="/fact-sheet/assets/icons/graphics/icons.htm" focusable="false">
           <use xlink:href="#icon-gss-couple">
           </use>
          </svg>
         </div>
         <span class="sr-only">
          고객 평점 4.2/5
         </span>
         <svg aria-hidden="true" class="lazysvg" data-url="/fact-sheet/assets/icons/graphics/icons.htm" focusable="false">
          <use xlink:href="#icon-gss-rating-50">
          </use>
         </svg>
         <p>
          <span class="review__user">
           J. J.
          </span>
          커플 - 19/04/2019
          <span class="review__certification">
           AccorHotels 인증 리뷰
          </span>
         </p>
        </div>
        <div class="review__content">
         <div class="hideshow review__hideshow review__hideshow--response" data-role="hideshow" data-strategy="review">
          <div class="hideshow__content" id="review15">
           <p>
            에펠탑이 매우가깝고 직원들도 친절합니다. 추천합니다
           </p>
          </div>
         </div>
        </div>
       </div>
       <div class="review">
        <p aria-level="3" class="review__title" role="heading">
         에펠탑이 만족스럽게 보이는 뷰와 적당한크기의 객실
        </p>
        <div class="review__infos">
         <div class="review__avatar">
          <svg aria-hidden="true" class="lazysvg" data-url="/fact-sheet/assets/icons/graphics/icons.htm" focusable="false">
           <use xlink:href="#icon-gss-couple">
           </use>
          </svg>
         </div>
         <span class="sr-only">
          고객 평점 4.2/5
         </span>
         <svg aria-hidden="true" class="lazysvg" data-url="/fact-sheet/assets/icons/graphics/icons.htm" focusable="false">
          <use xlink:href="#icon-gss-rating-40">
          </use>
         </svg>
         <p>
          <span class="review__user">
           강.
          </span>
          커플 - 16/04/2019
          <span class="review__certification">
           AccorHotels 인증 리뷰
          </span>
         </p>
        </div>
        <div class="review__content">
         <div class="hideshow review__hideshow review__hideshow--response" data-role="hideshow" data-strategy="review">
          <div class="hideshow__content" id="review16">
           <p>
            화장실내의 환풍시설을 보충했으면 하며, 객실 온도를 조절하는방법을 쉽게 알수있게 조작방법을 그림으로 표기 해주었으면 좋았을것 같습니다. 에펠뷰가 보이는 구조의 방에서는 침대의 배치를 다시한번 고려해보았으면 좋겠습니다.
           </p>
          </div>
         </div>
        </div>
       </div>
       <div class="review">
        <p aria-level="3" class="review__title" role="heading">
         뷰도 좋고 깨끗하고 깔끔했어요
        </p>
        <div class="review__infos">
         <div class="review__avatar">
          <svg aria-hidden="true" class="lazysvg" data-url="/fact-sheet/assets/icons/graphics/icons.htm" focusable="false">
           <use xlink:href="#icon-gss-family">
           </use>
          </svg>
         </div>
         <span class="sr-only">
          고객 평점 4.2/5
         </span>
         <svg aria-hidden="true" class="lazysvg" data-url="/fact-sheet/assets/icons/graphics/icons.htm" focusable="false">
          <use xlink:href="#icon-gss-rating-50">
          </use>
         </svg>
         <p>
          <span class="review__user">
           Parkeunji
          </span>
          가족 - 07/04/2019
          <span class="review__certification">
           AccorHotels 인증 리뷰
          </span>
         </p>
        </div>
        <div class="review__content">
         <div class="hideshow review__hideshow review__hideshow--response" data-role="hideshow" data-strategy="review">
          <div class="hideshow__content" id="review17">
           <p>
            최고의 경치에 감동했어요. 또 가고 싶습니다
           </p>
          </div>
         </div>
        </div>
       </div>
       <div class="review">
        <p aria-level="3" class="review__title" role="heading">
         환상적인 뷰와 친절한 서비스
        </p>
        <div class="review__infos">
         <div class="review__avatar">
          <svg aria-hidden="true" class="lazysvg" data-url="/fact-sheet/assets/icons/graphics/icons.htm" focusable="false">
           <use xlink:href="#icon-gss-single">
           </use>
          </svg>
         </div>
         <span class="sr-only">
          고객 평점 4.2/5
         </span>
         <svg aria-hidden="true" class="lazysvg" data-url="/fact-sheet/assets/icons/graphics/icons.htm" focusable="false">
          <use xlink:href="#icon-gss-rating-50">
          </use>
         </svg>
         <p>
          <span class="review__user">
           진.
          </span>
          1인 - 05/04/2019
          <span class="review__certification">
           AccorHotels 인증 리뷰
          </span>
         </p>
        </div>
        <div class="review__content">
         <div class="hideshow review__hideshow review__hideshow--response" data-role="hideshow" data-strategy="review">
          <div class="hideshow__content" id="review18">
           <p>
            직원분들이 너무 친절했습니다. 12층의 에펠전망도 맘에 들었습니다.
           </p>
          </div>
         </div>
        </div>
       </div>
       <div class="review">
        <p aria-level="3" class="review__title" role="heading">
         Hotel Mercure Paris center tour eiffel에서 숙박을 매우 만족합니다.
        </p>
        <div class="review__infos">
        </div>
        <div class="review__content">
         <div class="hideshow review__hideshow review__hideshow--response" data-role="hideshow" data-strategy="review">
          <div class="hideshow__content" id="review19">
           <p>
            깔끔한 로비와 깨끗한 객실, 그리고 매우 좋은 에펠뷰에 만족합니다. 짐도 방까지 가져다 주셨고 커피와 티 음료도 만족스러웠습니다. 화장실도 넓은편입니다. 스태프들도 모두 친절했고 르버스타는 법도 성심성의껏 알려주어서 오후4:30버스를 타고 공항까지 잘 도착했습니다. 31/03/2019 1층 luggage앞에서 그 두분께 감사하고싶습니다!!
           </p>
          </div>
          <div class="hideshow review__response" data-label="호텔 리뷰 응답" data-role="hideshow" data-strategy="reviewResponse">
           <div class="hideshow__content" id="review19response">
            Dear Guest, Please allow me to answer you in English. We very much appreciate your comments regarding your stay at the Hôtel Mercure Paris Centre Tour Eiffel. It is always a pleasure to receive positive feedback. I will share your comments with our team. I am sure that this feedback will serve as an encouragement to all of our staff as we strive to continuously improve the quality of our services. Thank you again for sharing your experience, and we hope your next visit will be as pleasant as the previous one. Sincerely, Eric Rajaud – General Manager
           </div>
          </div>
         </div>
        </div>
       </div>
       <div class="review">
        <p aria-level="3" class="review__title" role="heading">
         매우 행복한시간을 보냈습니다.
        </p>
        <div class="review__infos">
         <div class="review__avatar">
          <svg aria-hidden="true" class="lazysvg" data-url="/fact-sheet/assets/icons/graphics/icons.htm" focusable="false">
           <use xlink:href="#icon-gss-family">
           </use>
          </svg>
         </div>
         <span class="sr-only">
          고객 평점 4.2/5
         </span>
         <svg aria-hidden="true" class="lazysvg" data-url="/fact-sheet/assets/icons/graphics/icons.htm" focusable="false">
          <use xlink:href="#icon-gss-rating-45">
          </use>
         </svg>
         <p>
          <span class="review__user">
           J
          </span>
          가족 - 26/03/2019
          <span class="review__certification">
           AccorHotels 인증 리뷰
          </span>
         </p>
        </div>
        <div class="review__content">
         <div class="hideshow review__hideshow review__hideshow--response" data-role="hideshow" data-strategy="review">
          <div class="hideshow__content" id="review20">
           <p>
            빠른 응대와 친절한 맞이에 행복한 추억을 남겼습니다 다만 영어 응대가 어색한 직원분과 프린트서비스에대해 어느직원분이 잘못안내하여 어려움이있었습니다. 그렇지만 다음날 다른 리셉션직원분이 매우친절하게해주셔서 잘 처리했어요. 생일메모에 대해 방을 예쁘게 꾸며 주셔서 저도 동생도 행복한파리로 기억이남을 것입니다. 좋은 추억 만들어주셔서 감사합니다.
           </p>
          </div>
         </div>
        </div>
       </div>
      </div>
     </div>
     최신 리뷰 20건
     <p class="reviews__partner">
      제휴
      <span class="sr-only">
       TripAdvisor
      </span>
      <svg aria-hidden="true" class="lazysvg" data-url="/fact-sheet/assets/icons/graphics/icons.htm" focusable="false">
       <use xlink:href="#icon-tripadvisor-logo">
       </use>
      </svg>
     </p>
    </section>
   </div>
   <section class="section section--nearby">
    <h2>
     <b>[area1][mkey1][symbolx][pkeyx][symbolx][area1][keyword1][bracketl1][area1][keywordx][bracketr1][symbolx][bracketl2][area1][keywordx][bracketr2][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx]</b>
    </h2>
    <ul>
     <li class="hotel">
     </li>
     <li class="hotel">
      [area1][keywordx]<li>[pkeyx]</li><li>[ahref]</li>[area1][mkey1][area1][mkey1]
     </li>
     <li class="hotel">
     </li>
     <li class="hotel">
     </li>
    </ul>
    <div>
     <a class="button button-level3" href="/ko/city/%ED%98%B8%ED%85%94-%ED%8C%8C%EB%A6%AC-v2996.shtml" target="_blank" title="파리 지역 모든 호텔 - New Window">
      파리 지역 모든 호텔
      <svg aria-hidden="true" class="lazysvg button--picto-right" data-url="/fact-sheet/assets/icons/graphics/icons.htm" focusable="false">
       <use xlink:href="#icon-arrow-goto">
       </use>
      </svg>
     </a>
    </div>
   </section>
   <div aria-label="" class="popin popin-map" id="mapHotel" role="dialog" tabindex="-1">
    <div class="popin__content-wrapper">
     <div class="popin__header">
      <button class="button popin__close" type="button">
       <span class="sr-only">
       </span>
       <svg aria-hidden="true" class="lazysvg" data-url="/fact-sheet/assets/icons/graphics/icons.htm" focusable="false">
        <use xlink:href="#icon-close">
        </use>
       </svg>
      </button>
      <div class="links">
       [linkx]
       
       <svg aria-hidden="true" class="lazysvg" data-url="/fact-sheet/assets/icons/graphics/icons.htm" focusable="false">
        <use xlink:href="#icon-arrow-down">
        </use>
       </svg>
      </div>
     </div>
     <div aria-hidden="true" class="popin__content" id="ahMapLight">
      <div class="round-circle-anim">
       <div>
       </div>
      </div>
     </div>
    </div>
   </div>
   <div class="popin popin--room-details" id="popin-room-details" role="dialog">
    <div class="popin__content-wrapper">
     <div class="popin__header">
      <button class="button popin__close" type="button">
       <span class="sr-only">
       </span>
       <svg aria-hidden="true" class="lazysvg" data-url="/fact-sheet/assets/icons/graphics/icons.htm" focusable="false">
        <use xlink:href="#icon-close">
        </use>
       </svg>
      </button>
     </div>
     <div class="popin__content">
     </div>
    </div>
   </div>
   <div aria-label="Réserver votre hôtel" class="popin popin-booking" id="popin-booking" role="dialog" tabindex="-1">
    <div class="popin__content-wrapper">
     <div class="popin__header">
      <button class="button popin__close" type="button">
       <span class="sr-only">
        Fermer fenêtre de réservation
       </span>
       <svg aria-hidden="true" class="lazysvg" data-url="/fact-sheet/assets/icons/graphics/icons.htm" focusable="false">
        <use xlink:href="#icon-close">
        </use>
       </svg>
      </button>
     </div>
     <div class="popin__content">
     </div>
    </div>
   </div>
   <div class="popin popin--favorites" id="popin-favorites" role="dialog">
    <div class="popin__content-wrapper">
     <div class="popin__header">
      <button class="button popin__close" type="button">
       <span class="sr-only">
        닫기
       </span>
       <svg class="lazysvg" data-url="/fact-sheet/assets/icons/graphics/icons.htm">
        <use xlink:href="#icon-close">
        </use>
       </svg>
      </button>
     </div>
     <div class="popin__content">
      <div class="popin__border">
      </div>
      <div class="popin__title">
       <svg aria-hidden="true" class="lazysvg" data-url="/fact-sheet/assets/icons/first/icons.htm" focusable="false">
        <use xlink:href="#icon-bernache">
        </use>
       </svg>
       <p aria-level="1" role="heading">
        즐겨찾는 호텔 - 0/6
       </p>
      </div>
      <p>
       최대 6개의 즐겨찾는 호텔을 선택할 수 있습니다.
       <br>
       </br>
      </p>
      <ul>
       <li class="li-template">
        <div class="hotel__picture">
        </div>
        <div class="hotel__description">
         [ahref]
         
         <p>
          Town (COUNTRY)
         </p>
         <a aria-hidde="true" class="hotel__booking button button-level1" href="/rid" tabindex="-1" target="_blank" title=" - 새로운 창">
          예약하기
         </a>
         <button class="favorites-manager button button-level3 already-added" data-action="removeHotel" data-chain="" data-connected="true" data-rid="" type="button">
          <span class="loading-spinner">
          </span>
          <span class="button__description">
           <span>
            <svg aria-hidden="true" class="lazysvg icon-favorite" data-url="/fact-sheet/assets/icons/graphics/icons.htm" focusable="false">
             <use xlink:href="#icon-favorite">
             </use>
            </svg>
            <svg aria-hidden="true" class="lazysvg icon-favorite-added" data-url="/fact-sheet/assets/icons/graphics/icons.htm" focusable="false">
             <use xlink:href="#icon-favorite-added">
             </use>
            </svg>
           </span>
           <span class="label-favorite">
            즐겨찾기에 추가하기
           </span>
           <span class="label-favorite-added">
            삭제
           </span>
          </span>
         </button>
        </div>
       </li>
      </ul>
     </div>
    </div>
   </div>
   <div class="popin popin--favorites" id="popin-login" role="dialog">
    <div class="popin__content-wrapper">
     <div class="popin__header">
      <button class="button popin__close" type="button">
       <span class="sr-only">
        닫기
       </span>
       <svg class="lazysvg" data-url="/fact-sheet/assets/icons/graphics/icons.htm">
        <use xlink:href="#icon-close">
        </use>
       </svg>
      </button>
     </div>
     <div class="popin__content">
      <div class="popin__border">
      </div>
      <div class="popin__title">
       <svg aria-hidden="true" class="lazysvg" data-url="/fact-sheet/assets/icons/first/icons.htm" focusable="false">
        <use xlink:href="#icon-bernache">
        </use>
       </svg>
       <p aria-level="1" role="heading">
        가입
       </p>
      </div>
      <div class="popin__description">
       <div>
        <p>
         이 서비스를 이용하시기 위해 먼저 등록해 주십시오.
        </p>
        [ahref]
        
       </div>
       <hr/>
       <div>
        <p>
         accorhotels.com에 개인 계정이 없으시면 지금 등록하시고 이 서비스를 이용해 주십시오.
        </p>
        [linkx]
        
       </div>
      </div>
     </div>
    </div>
   </div>
  </main>
  <footer role="contentinfo">
   <div class="links">
    <div class="links-sharing">
     <a href="/Accorhotels">
      <span class="sr-only">
       Facebook AccorHotels
      </span>
      <svg aria-hidden="true" class="lazysvg" data-url="/assets/icons/sharing/logos/sharing.htm" focusable="false">
       <use xlink:href="#sharing-facebook">
       </use>
      </svg>
     </a>
     [linkx]
     
     <a href="/Accorhotels">
      <span class="sr-only">
       Twitter AccorHotels
      </span>
      <svg aria-hidden="true" class="lazysvg" data-url="/assets/icons/sharing/logos/sharing.htm" focusable="false">
       <use xlink:href="#sharing-twitter">
       </use>
      </svg>
     </a>
     [ahref]
     
     [ahref]
     
     [linkx]
     
     <a class="zh-only" href="/accorchina">
      <span class="sr-only">
       Weibo AccorHotels
      </span>
      <svg aria-hidden="true" class="lazysvg" data-url="/assets/icons/sharing/logos/sharing.htm" focusable="false">
       <use xlink:href="#sharing-weibo">
       </use>
      </svg>
     </a>
    </div>
    <ul class="links-main">
     <li>
      [linkx]
      
     </li>
     <li>
      <a href="/index.jsp?redirect=promotion">
       특가 상품
      </a>
     </li>
     <li>
      [ahref]
      
     </li>
     <li>
      [linkx]
      
     </li>
     <li>
      [linkx]
      
     </li>
    </ul>
    <ul class="links-secondary">
     <li>
      [linkx]
      
     </li>
     <li>
      [ahref]
      
     </li>
     <li>
      [linkx]
      
     </li>
     <li>
      [ahref]
      
     </li>
     <li>
      [ahref]
      
     </li>
     <li>
      [ahref]
      
     </li>
     <li>
      [ahref]
      
     </li>
     <li>
      [linkx]
      
     </li>
     <li>
      [linkx]
      
     </li>
    </ul>
   </div>
   <div class="legals">
    <div>
     <span>
      보안 사이트 실
     </span>
    </div>
   </div>
  </footer>
  <div hidden="" id="svg-sprites">
  </div>
  <b style="color:black;background-color:#a0ffff">
   jnice09-ipp30-wq-zq-0180
  </b>
 </body>
</html>
|<---