--->|<!DOCTYPE html>
<html class="client-nojs" dir="ltr" lang="en">
 <head>
  <meta charset="utf-8"/>
  <title>
   [mkey1][symbolx][pkey1][symbolx][keyword1][bracketl1][bracketr1][symbolx][bracketl2][siter1][bracketr2][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx]
  </title>
  <meta content="[mkey1][symbolx][pkey1][symbolx][keyword1][bracketl1][bracketr1][symbolx][bracketl2][siter1][bracketr2][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx]" name="keywords"/>
  <meta content="[mkey1][symbolx][pkey1][symbolx][keyword1][bracketl1][bracketr1][symbolx][bracketl2][siter1][bracketr2][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx]" name="description"/>
  <meta content="" name="ResourceLoaderDynamicStyles"/>
  <meta content="MediaWiki 1.27.5" name="generator"/>
  <meta content="http://wiki.teamfortress.com/w/images/3/3f/Reddit_thumbnail.png" name="og:image"/>
 </head>
 <body class="mediawiki ltr sitedir-ltr ns-0 ns-subject page-Strange_Count_Transfer_Tool_ko rootpage-Strange_Count_Transfer_Tool skin-vector action-view">
  <div class="noprint" id="mw-page-base">
  </div>
  <div class="noprint" id="mw-head-base">
  </div>
  <div class="mw-body" id="content" role="main">
   <a id="top">
   </a>
   <div class="mw-indicators">
   </div>
   <h1 class="firstHeading" id="firstHeading" lang="en">
    [mkey1][symbolx][pkey1][symbolx][keyword1][bracketl1][bracketr1][symbolx][bracketl2][siter1][bracketr2][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx]
   </h1>
   <div class="mw-body-content" id="bodyContent">
    <div id="siteSub">
     From Team Fortress Wiki
    </div>
    <div id="contentSub">
     <span class="subpages">
      <
      [linkx]
      
     </span>
    </div>
    <div class="mw-jump" id="jump-to-nav">
     Jump to:
     <a href="d">
      navigation
     </a>
     ,
     <a href="h">
      search
     </a>
    </div>
    <div class="mw-content-ltr" dir="ltr" id="mw-content-text" lang="en">
     <div id="right-sidebar">
      <table class="infobox item-infobox Tool-infobox" style="width:300px; max-width:300px; {{{1}}}">
       <tr>
        <th class="infobox-header" colspan="2" id="top-header" style="background:#F3A957;">
         이상한 수치 이전 도구
        </th>
       </tr>
       <tr>
        <td colspan="2" style="padding:0em;">
         <div class="center">
          <div class="floatnone">
           [ahref]
           
          </div>
         </div>
        </td>
       </tr>
       <tr>
        <th class="infobox-header" colspan="2">
         기본 정보
        </th>
       </tr>
       <tr>
        <td class="infobox-label">
         공개일
        </td>
        <td class="infobox-data">
         <a href="/wiki/December_17,_2015_Patch/ko" title="December 17, 2015 Patch/ko">
          2015년 12월 17일 패치
         </a>
         <br/>
         (
         [ahref]
         
         )
        </td>
       </tr>
       <tr>
        <td class="infobox-label">
         획득 방법:
        </td>
        <td class="infobox-data">
         <a href="/wiki/Crafting/ko" title="Crafting/ko">
          제작
         </a>
        </td>
       </tr>
       <tr>
        <td class="infobox-label">
         [linkx]
         
        </td>
        <td class="infobox-data">
         가능
        </td>
       </tr>
       <tr>
        <td class="infobox-label">
         <a href="/wiki/Gift_Wrap/ko" title="Gift Wrap/ko">
          <span id="tooltip" style="cursor:help; border-bottom:1px dotted;" title="선물 포장이 가능한 경우">
           선물 여부
          </span>
         </a>
        </td>
        <td class="infobox-data">
         가능
        </td>
       </tr>
       <tr>
        <td class="infobox-label">
         [ahref]
         
        </td>
        <td class="infobox-data">
         가능
        </td>
       </tr>
       <tr>
        <th class="infobox-header" colspan="2">
         존재하는 품질
        </th>
       </tr>
       <tr>
        <td colspan="2" style="text-align:center;">
         <div class="quality-tag tooltip-unique">
          <a href="/wiki/Unique/ko" title="Unique/ko">
           일반
          </a>
         </div>
        </td>
       </tr>
       <tr>
        <th class="infobox-header" colspan="2">
         장비 설정 상태
        </th>
       </tr>
       <tr>
        <td class="loadout-tooltip-container" colspan="2" style="text-align:center;">
         <div style="text-align: center; background: #24201B; width: 100%; -moz-border-radius: 10px; border-radius: 10px; padding:7px 0px;">
          <center>
           <div style="align:center; width: 120px; height: 90px; -moz-border-radius: 10px; border-radius: 10px; background: #3C362F; margin-bottom: 5px; border: 0px #847668 solid; position:relative;">
            [linkx]
            
           </div>
          </center>
          <div style="-moz-border-radius: 10px; border-radius: 10px; background: transparent; padding: 5px; margin: 0px 7px;">
           <span class="qua_unique" style="font-size:18px; line-height:16px; text-shadow: 2px 1px 1px #24201B; font-family:Pathang, sans-serif, Totum, Kodig, serif; font-weight: bold;">
            이상한 수치 이전 도구
           </span>
           <div style="font-family:Pathang, sans-serif, Totum, Kodig, serif; font-weight: bold; font-size: 15px">
            <span class="att_level">
             레벨 1-100 도구
            </span>
            <br/>
            <span style="line-height:0.3em;">
            </span>
            <br/>
            <span class="att_neutral" style="line-height:1.2em; font-size:95%; width:80%;">
             이상한 점수를 한 아이템에서 가져다 다른 아이템에 더합니다. 옮긴 점수를 원래 가지고 있던 아이템의 점수는 0점으로 초기화 됩니다. 이상한 부품의 점수는 동일한 이상한 부품이 있을 때 옮겨서 초기화할 수 있습니다. 유형이 같은 이상한 아이템끼리만 쓸 수 있습니다.
            </span>
            <br/>
            <br/>
            <span class="att_uses">
             사용 횟수가 제한된 아이템으로 1번 사용할 수 있습니다.
            </span>
           </div>
          </div>
         </div>
        </td>
       </tr>
      </table>
     </div>
     <p>
      <b>
       이상한 수치 이전 도구
      </b>
      는 사용자가 동일한 유형의
      [linkx]
      
      아이템의 수치를 다른 이상한 아이템으로 이전할 때 사용하는 도구입니다. 만약 아이템에 붙어 있는
      [linkx]
      
      의 유형이 같다면, 부품 간에도 이상한 수치를 이전할 수 있습니다.
     </p>
     <h2>
      [mkey1][symbolx][pkey1][symbolx][keyword1][bracketl1][bracketr1][symbolx][bracketl2][siter1][bracketr2][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx]
     </h2>
     <h3>
      [mkey1][symbolx][pkey1][symbolx][keyword1][bracketl1][bracketr1][symbolx][bracketl2][siter1][bracketr2][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx]
     </h3>
     <table class="wikitable" style="font-size:90%; text-align:center; margin-bottom:1em;" width="auto">
      <tr>
       <td style="background-color: #FFDD99;">
        [linkx]
        
       </td>
       <td>
       </td>
       <td style="background-color: #FFDD99;">
        <strong class="selflink">
         이상한 수치 이전 도구
        </strong>
       </td>
      </tr>
      <tr>
       <td>
        <a href="/wiki/Strange_Part/ko" title="Strange Part/ko">
        </a>
        <span style="font-size:22px; line-height:16px;color:#292625;font-family: Pathang, sans-serif, Totum, Kodig, serif; font-weight: bold;">
         x2
        </span>
       </td>
       <td>
        <span style="font-size:65px; line-height:16px;color:#292625;font-family: Pathang, sans-serif, Totum, Kodig, serif; font-weight: bold;">
         =
        </span>
       </td>
       <td>
        [ahref]
        
       </td>
      </tr>
     </table>
     <h2>
      [mkey1][symbolx][pkey1][symbolx][keyword1][bracketl1][bracketr1][symbolx][bracketl2][siter1][bracketr2][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx]
     </h2>
     <p>
      <b>
       [ahref]
       
      </b>
      (
      <a href="/wiki/Tough_Break_Update/ko" title="Tough Break Update/ko">
       불행한 휴가 업데이트
      </a>
      )
     </p>
     <ul>
      <li>
       이상한 수치 이전 도구가 추가되었습니다.
      </li>
     </ul>
     <table cellspacing="0" class="navbox" style="border: 1px solid #AAA;;;">
      <tr>
       <td style="padding:2px;">
        <table cellspacing="0" class="nowraplinks collapsible uncollapsed" style="width:100%;background:transparent;color:inherit;;">
         <tr>
          <th class="navbox-title" colspan="2" style=";background: #DBA901; color:black">
           <div style="float:left; width:6em;text-align:left;">
            <div class="noprint plainlinks navbar" style="background:none; padding:0; font-weight:normal;;background: #DBA901; color:black;border:none;; font-size:xx-small;">
             <a class="external text" href="/wiki/Template:Tough_Break_Update_Nav" rel="nofollow">
              <span style=";background: #DBA901; color:black;border:none;" title="View this template">
               v
              </span>
             </a>
             <span style="font-size:80%;">
              •
             </span>
             [linkx]
             
             <span style="font-size:80%;">
              •<li>[link]</li>[link]<li>[keywordx][symbolx][keywordx][symbolx][bracketl7][keywordx][bracketr7][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx]</li>[link]
             </span>
             [linkx]
             
            </div>
           </div>
           <span class="" style="font-size:110%;">
            [ahref]
            
            <a href="/wiki/Tough_Break_Update/ko" title="Tough Break Update/ko">
             불행한 휴가 업데이트
            </a>
           </span>
          </th>
         </tr>
         <tr style="height:2px;">
          <td>
          </td>
         </tr>
         <tr>
          <td class="navbox-group" style=";background: #F2D9AD;;">
           [linkx]
           
          </td>
          <td class="navbox-list navbox-odd" style="text-align:left;border-left-width:2px;border-left-style:solid;width:100%;padding:0px;;background: #FFFFFF;;">
           <div style="padding:0em 0.25em">
            <a href="/wiki/Highpass/ko" title="Highpass/ko">
             Highpass
            </a>
            <span style="font-weight:bold;">
             ·
            </span>
            [ahref]
            
            <span style="font-weight:bold;">
             ·
            </span>
            [linkx]
            
            <span style="font-weight:bold;">
             ·
            </span>
            <a href="/wiki/Vanguard/ko" title="Vanguard/ko">
             Vanguard
            </a>
           </div>
          </td>
         </tr>
         <tr style="height:2px">
          <td>
          </td>
         </tr>
         <tr>
          <td class="navbox-group" style=";background: #F2D9AD;;">
           [ahref]
           
          </td>
          <td class="navbox-list navbox-even" style="text-align:left;border-left-width:2px;border-left-style:solid;width:100%;padding:0px;;background: #FFFFFF;;">
           <div style="padding:0em 0.25em">
            [ahref]
            
            [linkx]
            
            <span style="font-weight:bold;">
             ·
            </span>
            [ahref]
            
            <span style="font-weight:bold;">
             ·
            </span>
            [ahref]
            
            <a href="/wiki/Diplomat/ko" title="Diplomat/ko">
             외교관
            </a>
            <span style="font-weight:bold;">
             ·
            </span>
            <a href="/wiki/Demoman/ko" title="Demoman/ko">
            </a>
            [linkx]
            
            <span style="font-weight:bold;">
             ·
            </span>
            [ahref]
            
            [ahref]
            
            <span style="font-weight:bold;">
             ·
            </span>
            [linkx]
            
            [ahref]
            
            <span style="font-weight:bold;">
             ·
            </span>
            [linkx]
            
            [ahref]
            
            <span style="font-weight:bold;">
             ·
            </span>
            <a href="/wiki/Bunnyhopper%27s_Ballistics_Vest/ko" title="Bunnyhopper's Ballistics Vest/ko">
             버니합쟁이의 방탄복
            </a>
            <span style="font-weight:bold;">
             ·
            </span>
            [ahref]
            
            <span style="font-weight:bold;">
             ·
            </span>
            [ahref]
            
            [ahref]
            
            <span style="font-weight:bold;">
             ·
            </span>
            [ahref]
            
            <span style="font-weight:bold;">
             ·
            </span>
            [linkx]
            
            [ahref]
            
            [ahref]
            
            <span style="font-weight:bold;">
             ·
            </span>
            <a href="/wiki/Classes/ko" title="Classes/ko">
            </a>
            <a href="/wiki/A_Well_Wrapped_Hat/ko" title="A Well Wrapped Hat/ko">
             잘 포장된 모자[link][keywordx][symbolx][keywordx][symbolx][bracketl1][keywordx][bracketr1][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][link][link]
            </a>
            <span style="font-weight:bold;">
             ·
            </span>
            <a href="/wiki/Chill_Chullo/ko" title="Chill Chullo/ko">
             차가운 추요 모자
            </a>
            <span style="font-weight:bold;">
             ·
            </span>
            <a href="/wiki/Patriot_Peak/ko" title="Patriot Peak/ko">
             애국자의 최고봉
            </a>
           </div>
          </td>
         </tr>
         <tr style="height:2px">
          <td>
          </td>
         </tr>
         <tr>
          <td class="navbox-group" style=";background: #F2D9AD;;">
           [ahref]
           
          </td>
          <td class="navbox-list navbox-odd" style="text-align:left;border-left-width:2px;border-left-style:solid;width:100%;padding:0px;;background: #FFFFFF;;">
           <div style="padding:0em 0.25em">
            [ahref]
            
            [ahref]
            
            <span style="font-weight:bold;">
             ·
            </span>
            [linkx]
            
            [linkx]
            
            <span style="font-weight:bold;">
             ·
            </span>
            [linkx]
            
            <a href="/wiki/Mannrobics/ko" title="Mannrobics/ko">
             에어로빅'만' 댄스
            </a>
           </div>
          </td>
         </tr>
         <tr style="height:2px">
          <td>
          </td>
         </tr>
         <tr>
          <td class="navbox-group" style=";background: #F2D9AD;;">
           [linkx]
           
          </td>
          <td class="navbox-list navbox-even" style="text-align:left;border-left-width:2px;border-left-style:solid;width:100%;padding:0px;;background: #FFFFFF;;">
           [content1[linkx]content2]
          </td>
         </tr>
         <tr style="height:2px">
          <td>
          </td>
         </tr>
         <tr>
          <td class="navbox-group" style=";background: #F2D9AD;;">
           기타
          </td>
          <td class="navbox-list navbox-odd" style="text-align:left;border-left-width:2px;border-left-style:solid;width:100%;padding:0px;;background: #FFFFFF;;">
           <div style="padding:0em 0.25em">
            [linkx]
            
            <span style="font-weight:bold;">
             ·
            </span>
            <a href="/wiki/Loaner_Program/ko" title="Loaner Program/ko">
             대여 프로그램
            </a>
           </div>
          </td>
         </tr>
        </table>
       </td>
      </tr>
     </table>
     <table cellspacing="0" class="navbox" style=";;">
      <tr>
       <td style="padding:2px;">
        <table cellspacing="0" class="nowraplinks collapsible uncollapsed" style="width:100%;background:transparent;color:inherit;;">
         <tr>
          <th class="navbox-title" colspan="2" style=";">
           <div style="float:left; width:6em;text-align:left;">
            <div class="noprint plainlinks navbar" style="background:none; padding:0; font-weight:normal;;;border:none;; font-size:xx-small;">
             [ahref]
             
             <span style="font-size:80%;">
              •
             </span>
             <a class="external text" href="/wiki/Template_talk:Tool_Nav" rel="nofollow">
              <span style=";;border:none;" title="Discuss this template">
               d
              </span>
             </a>
             <span style="font-size:80%;">
              •
             </span>
             [ahref]
             
            </div>
           </div>
           <span class="" style="font-size:110%;">
            <a href="/wiki/Tools/ko" title="Tools/ko">
             도구
            </a>
            및
            <a href="/wiki/Action_items/ko" title="Action items/ko">
             액션 아이템
            </a>
           </span>
          </th>
         </tr>
         <tr style="height:2px;">
          <td>
          </td>
         </tr>
         <tr>
          <td class="navbox-group" style=";;">
           <a href="/wiki/Tools/ko" title="Tools/ko">
            도구
           </a>
          </td>
          <td class="navbox-list navbox-odd" style="text-align:left;border-left-width:2px;border-left-style:solid;width:100%;padding:0px;;;">
           <div style="padding:0em 0.25em">
           </div>
           <table cellspacing="0" class="nowraplinks navbox-subgroup" style="width:100%;;;;">
            <tr>
             <td class="navbox-group" style=";padding-left:0em;padding-right:0em;background: #FFF2B3;;">
              <div style="padding:0em 0.75em;">
               보급 상자
              </div>
             </td>
             <td class="navbox-list navbox-off" style="text-align:left;border-left-width:2px;border-left-style:solid;width:100%;padding:0px;;;">
              <div style="padding:0em 0.25em">
               [ahref]
               
               <span style="font-weight:bold;">
                ·
               </span>
               [linkx]
               
               <span style="font-weight:bold;">
                ·
               </span>
               [linkx]
               
               <span style="font-weight:bold;">
                ·
               </span>
               <a class="mw-redirect" href="/wiki/Salvaged_Mann_Co._Supply_Crate/ko" title="Salvaged Mann Co. Supply Crate/ko">
                인양된 Mann Co. 보급 상자
               </a>
               <span style="font-weight:bold;">
                ·
               </span>
               [linkx]
               
               <span style="font-weight:bold;">
                ·
               </span>
               <a class="mw-redirect" href="/wiki/Nice_Winter_Crate/ko" title="Nice Winter Crate/ko">
                착한 겨울 보급 상자
               </a>
               <span style="font-weight:bold;">
                ·
               </span>
               <a class="mw-redirect" href="/wiki/Scorched_Crate/ko" title="Scorched Crate/ko">
                그슬린 상자
               </a>
               <span style="font-weight:bold;">
                ·
               </span>
               [ahref]
               
               <span style="font-weight:bold;">
                ·
               </span>
               <a class="mw-redirect" href="/wiki/Eerie_Crate/ko" title="Eerie Crate/ko">
                으스스한 상자
               </a>
               <span style="font-weight:bold;">
                ·
               </span>
               <a class="mw-redirect" href="/wiki/Naughty_Winter_Crate_2012/ko" title="Naughty Winter Crate 2012/ko">
                2012년형 나쁜 겨울 보급 상자
               </a>
               <span style="font-weight:bold;">
                ·
               </span>
               [ahref]
               
               <span style="font-weight:bold;">
                ·
               </span>
               [ahref]
               
               <span style="font-weight:bold;">
                ·
               </span>
               <a class="mw-redirect" href="/wiki/Select_Reserve_Mann_Co._Supply_Crate/ko" title="Select Reserve Mann Co. Supply Crate/ko">
                특상급 Mann Co. 보급 상자 비축품
               </a>
               <span style="font-weight:bold;">
                ·
               </span>
               <a class="mw-redirect" href="/wiki/Summer_Appetizer_Crate/ko" title="Summer Appetizer Crate/ko">
                여름 전채 요리 상자
               </a>
               <span style="font-weight:bold;">
                ·
               </span>
               [ahref]
               
               <span style="font-weight:bold;">
                ·
               </span>
               <a class="mw-redirect" href="/wiki/Orange_Summer_2013_Cooler/ko" title="Orange Summer 2013 Cooler/ko">
                주황색 2013년 여름 냉각기
               </a>
               <span style="font-weight:bold;">
                ·
               </span>
               [linkx]
               
               <span style="font-weight:bold;">
                ·
               </span>
               <a class="mw-redirect" href="/wiki/Green_Summer_2013_Cooler/ko" title="Green Summer 2013 Cooler/ko">
                녹색 2013년 여름 냉각기
               </a>
               <span style="font-weight:bold;">
                ·
               </span>
               <a class="mw-redirect" href="/wiki/Aqua_Summer_2013_Cooler/ko" title="Aqua Summer 2013 Cooler/ko">
                청록색 2013년 여름 냉각기
               </a>
               <span style="font-weight:bold;">
                ·
               </span>
               <a class="mw-redirect" href="/wiki/Blue_Summer_2013_Cooler/ko" title="Blue Summer 2013 Cooler/ko">
                청색 2013년 여름 냉각기
               </a>
               <span style="font-weight:bold;">
                ·
               </span>
               [ahref]
               
               <span style="font-weight:bold;">
                ·
               </span>
               [ahref]
               
               <span style="font-weight:bold;">
                ·
               </span>
               [ahref]
               
               <span style="font-weight:bold;">
                ·
               </span>
               <a class="mw-redirect" href="/wiki/Fall_2013_Gourd_Crate/ko" title="Fall 2013 Gourd Crate/ko">
                2013년 가을 박 상자
               </a>
               <span style="font-weight:bold;">
                ·
               </span>
               [linkx]
               
               <span style="font-weight:bold;">
                ·
               </span>
               [ahref]
               
               <span style="font-weight:bold;">
                ·
               </span>
               <a class="mw-redirect" href="/wiki/Nice_Winter_Crate_2013/ko" title="Nice Winter Crate 2013/ko">
                2013년형 착한 겨울 보급 상자
               </a>
               <span style="font-weight:bold;">
                ·
               </span>
               [linkx]
               
               <span style="font-weight:bold;">
                ·
               </span>
               <a class="mw-redirect" href="/wiki/Mann_Co._Supply_Munition/ko" title="Mann Co. Supply Munition/ko">
                Mann Co. 보급 군수품
               </a>
               <span style="font-weight:bold;">
                ·
               </span>
               <a class="mw-redirect" href="/wiki/Mann_Co._Audition_Reel/ko" title="Mann Co. Audition Reel/ko">
                Mann Co. 오디션 필름
               </a>
               <span style="font-weight:bold;">
                ·
               </span>
               [linkx]
               
               <span style="font-weight:bold;">
                ·
               </span>
               <a class="mw-redirect" href="/wiki/Mann_Co._Director%27s_Cut_Reel/ko" title="Mann Co. Director's Cut Reel/ko">
                Mann Co. 감독판 필름
               </a>
               <span style="font-weight:bold;">
                ·
               </span>
               [linkx]
               
               <span style="font-weight:bold;">
                ·
               </span>
               <a class="mw-redirect" href="/wiki/Unlocked_Creepy_Scout_Crate/ko" title="Unlocked Creepy Scout Crate/ko">
                열린 오싹한 스카웃 상자
               </a>
               [linkx]
               
               <a class="mw-redirect" href="/wiki/Unlocked_Creepy_Soldier_Crate/ko" title="Unlocked Creepy Soldier Crate/ko">
                열린 오싹한 솔저 상자
               </a>
               <span style="font-weight:bold;">
                ·
               </span>
               <a class="mw-redirect" href="/wiki/Unlocked_Creepy_Pyro_Crate/ko" title="Unlocked Creepy Pyro Crate/ko">
                열린 오싹한 파이로 상자
               </a>
               <span style="font-weight:bold;">
                ·
               </span>
               [linkx]
               
               <span style="font-weight:bold;">
                ·
               </span>
               [linkx]
               
               <span style="font-weight:bold;">
                ·
               </span>
               <a class="mw-redirect" href="/wiki/Unlocked_Creepy_Engineer_Crate/ko" title="Unlocked Creepy Engineer Crate/ko">
                열린 오싹한 엔지니어 상자
               </a>
               <span style="font-weight:bold;">
                ·
               </span>
               [ahref]
               
               <span style="font-weight:bold;">
                ·
               </span>
               [ahref]
               
               <span style="font-weight:bold;">
                ·
               </span>
               <a class="mw-redirect" href="/wiki/Unlocked_Creepy_Spy_Crate/ko" title="Unlocked Creepy Spy Crate/ko">
                열린 오싹한 스파이 상자
               </a>
               <span style="font-weight:bold;">
                ·
               </span>
               [ahref]
               
               <span style="font-weight:bold;">
                ·
               </span>
               [ahref]
               
               <span style="font-weight:bold;">
                ·
               </span>
               <a class="mw-redirect" href="/wiki/Naughty_Winter_Crate_2014/ko" title="Naughty Winter Crate 2014/ko">
                2014년형 나쁜 겨울 상자
               </a>
               <span style="font-weight:bold;">
                ·
               </span>
               <a class="mw-redirect" href="/wiki/Powerhouse_Weapons_Case/ko" title="Powerhouse Weapons Case/ko">
                Powerhouse 무기 상자
               </a>
               <span style="font-weight:bold;">
                ·
               </span>
               <a class="mw-redirect" href="/wiki/Concealed_Killer_Weapons_Case/ko" title="Concealed Killer Weapons Case/ko">
                은폐한 암살자 무기 상자
               </a>
               <span style="font-weight:bold;">
                ·
               </span>
               [ahref]
               
               <span style="font-weight:bold;">
                ·
               </span>
               [linkx]
               
               <span style="font-weight:bold;">
                ·
               </span>
               [linkx]
               
               <span style="font-weight:bold;">
                ·
               </span>
               <a class="mw-redirect" href="/wiki/Gargoyle_Case/ko" title="Gargoyle Case/ko">
                가고일 상자
               </a>
               <span style="font-weight:bold;">
                ·
               </span>
               [linkx]
               
               <span style="font-weight:bold;">
                ·
               </span>
               <a class="mw-redirect" href="/wiki/Warbird_Weapons_Case/ko" title="Warbird Weapons Case/ko">
                군용기 조종사 무기 상자
               </a>
               <span style="font-weight:bold;">
                ·
               </span>
               [linkx]
               
               <span style="font-weight:bold;">
                ·
               </span>
               <a class="mw-redirect" href="/wiki/Mayflower_Cosmetic_Case/ko" title="Mayflower Cosmetic Case/ko">
                메이플라워 장식 상자
               </a>
               <span style="font-weight:bold;">
                ·
               </span>
               <a class="mw-redirect" href="/wiki/Unlocked_Cosmetic_Crate_Scout/ko" title="Unlocked Cosmetic Crate Scout/ko">
                잠금 해제된 스카웃 장식 아이템 상자
               </a>
               <span style="font-weight:bold;">
                ·
               </span>
               [linkx]
               
               <span style="font-weight:bold;">
                ·
               </span>
               [ahref]
               
               <span style="font-weight:bold;">
                ·
               </span>
               [linkx]
               
               <span style="font-weight:bold;">
                ·
               </span>
               [ahref]
               
               <span style="font-weight:bold;">
                ·
               </span>
               [linkx]
               
               <span style="font-weight:bold;">
                ·
               </span>
               <a class="mw-redirect" href="/wiki/Unlocked_Cosmetic_Crate_Medic/ko" title="Unlocked Cosmetic Crate Medic/ko">
                잠금 해제된 메딕 장식 아이템 상자
               </a>
               <span style="font-weight:bold;">
                ·
               </span>
               <a class="mw-redirect" href="/wiki/Unlocked_Cosmetic_Crate_Sniper/ko" title="Unlocked Cosmetic Crate Sniper/ko">
                잠금 해제된 스나이퍼 장식 아이템 상자
               </a>
               <span style="font-weight:bold;">
                ·
               </span>
               [linkx]
               
               <span style="font-weight:bold;">
                ·
               </span>
               <a class="mw-redirect" href="/wiki/Unlocked_Cosmetic_Crate_Multi-Class/ko" title="Unlocked Cosmetic Crate Multi-Class/ko">
                잠금 해제된 여러 병과 장식 아이템 상자
               </a>
               <span style="font-weight:bold;">
                ·
               </span>
               <a class="mw-redirect" href="/wiki/Creepy_Crawly_Case/ko" title="Creepy Crawly Case/ko">
                기이하게 기어다니는 벌레 상자
               </a>
               <span style="font-weight:bold;">
                ·
               </span>
               [ahref]
               
               <span style="font-weight:bold;">
                ·
               </span>
               <a class="mw-redirect" href="/wiki/Rainy_Day_Cosmetic_Case/ko" title="Rainy Day Cosmetic Case/ko">
                비 오는 날 장식 상자
               </a>
               <span style="font-weight:bold;">
                ·
               </span>
               <a class="mw-redirect" href="/wiki/Infernal_Reward_War_Paint_Case/ko" title="Infernal Reward War Paint Case/ko">
                Infernal Reward War Paint Case
               </a>
               <span style="font-weight:bold;">
                ·
               </span>
               <a class="mw-redirect" href="/wiki/Jungle_Jackpot_War_Paint_Case/ko" title="Jungle Jackpot War Paint Case/ko">
                Jungle Jackpot War Paint Case
               </a>
               <span style="font-weight:bold;">
                ·
               </span>
               <a class="mw-redirect" href="/wiki/Abominable_Cosmetic_Case/ko" title="Abominable Cosmetic Case/ko">
                Abominable Cosmetic Case
               </a>
               <span style="font-weight:bold;">
                ·
               </span>
               <a class="mw-redirect" href="/wiki/Unleash_the_Beast_Cosmetic_Case/ko" title="Unleash the Beast Cosmetic Case/ko">
                Unleash the Beast Cosmetic Case
               </a>
               <span style="font-weight:bold;">
                ·
               </span>
               [ahref]
               
               <span style="font-weight:bold;">
                ·
               </span>
               [ahref]
               
               <span style="font-weight:bold;">
                ·
               </span>
               <a class="new" href="/w/index.php?title=Scream_Fortress_X_War_Paint_Case/ko&amp;action=edit&amp;redlink=1" title="Scream Fortress X War Paint Case/ko (page does not exist)">
                Scream Fortress X War Paint Case
               </a>
               <span style="font-weight:bold;">
                ·
               </span>
               <a class="new" href="/w/index.php?title=Violet_Vermin_Case/ko&amp;action=edit&amp;redlink=1" title="Violet Vermin Case/ko (page does not exist)">
                Violet Vermin Case[content20[linkx]content1[linkx]content2[linkx]content3]
               </a>
               <span style="font-weight:bold;">
                ·
               </span>
               [linkx]
               
              </div>
             </td>
            </tr>
            <tr style="height:2px">
             <td>
             </td>
            </tr>
            <tr>
             <td class="navbox-group" style=";padding-left:0em;padding-right:0em;background: #FFF2B3;;">
              <div style="padding:0em 0.75em;">
               열쇠
              </div>
             </td>
             <td class="navbox-list navbox-off" style="text-align:left;border-left-width:2px;border-left-style:solid;width:100%;padding:0px;;;">
              <div style="padding:0em 0.25em">
               [linkx]
               
               <span style="font-weight:bold;">
                ·
               </span>
               <a class="mw-redirect" href="/wiki/Festive_Winter_Crate_Key/ko" title="Festive Winter Crate Key/ko">
                겨울 축제용 상자 열쇠
               </a>
               <span style="font-weight:bold;">
                ·
               </span>
               <a class="mw-redirect" href="/wiki/Stocking_Stuffer_Key/ko" title="Stocking Stuffer Key/ko">
                양말 속 선물 열쇠[content12][content13][linkx][content14][content15]
               </a>
               <span style="font-weight:bold;">
                ·
               </span>
               <a class="mw-redirect" href="/wiki/Refreshing_Summer_Cooler_Key/ko" title="Refreshing Summer Cooler Key/ko">
                상쾌한 여름 냉각기 열쇠
               </a>
               <span style="font-weight:bold;">
                ·
               </span>
               <a class="mw-redirect" href="/wiki/Naughty_Winter_Crate_Key/ko" title="Naughty Winter Crate Key/ko">
                나쁜 겨울 보급 상자 열쇠
               </a>
               <span style="font-weight:bold;">
                ·
               </span>
               <a class="mw-redirect" href="/wiki/Nice_Winter_Crate_Key/ko" title="Nice Winter Crate Key/ko">
                착한 겨울 보급 상자 열쇠
               </a>
               <span style="font-weight:bold;">
                ·
               </span>
               [linkx]
               
               <span style="font-weight:bold;">
                ·
               </span>
               [linkx]
               
               <span style="font-weight:bold;">
                ·
               </span>
               [linkx]
               
               <span style="font-weight:bold;">
                ·
               </span>
               [ahref]
               
               <span style="font-weight:bold;">
                ·
               </span>
               [linkx]
               
               <span style="font-weight:bold;">
                ·
               </span>
               [ahref]
               
               <span style="font-weight:bold;">
                ·
               </span>
               <a class="mw-redirect" href="/wiki/Summer_Appetizer_Key/ko" title="Summer Appetizer Key/ko">
                여름 전채 요리 열쇠
               </a>
               <span style="font-weight:bold;">
                ·
               </span>
               <a class="mw-redirect" href="/wiki/Red_Summer_2013_Cooler_Key/ko" title="Red Summer 2013 Cooler Key/ko">
                적색 2013년 여름 냉각기 열쇠
               </a>
               <span style="font-weight:bold;">
                ·
               </span>
               [ahref]
               
               <span style="font-weight:bold;">
                ·
               </span>
               <a class="mw-redirect" href="/wiki/Yellow_Summer_2013_Cooler_Key/ko" title="Yellow Summer 2013 Cooler Key/ko">
                황색 2013년 여름 냉각기 열쇠
               </a>
               <span style="font-weight:bold;">
                ·
               </span>
               <a class="mw-redirect" href="/wiki/Green_Summer_2013_Cooler_Key/ko" title="Green Summer 2013 Cooler Key/ko">
                녹색 2013년 여름 냉각기 열쇠<li>[link]</li><li>[link]</li><li>[keywordx][symbolx][keywordx][symbolx][bracketl4][keywordx][bracketr4][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx]</li>[keywordx][symbolx][keywordx][symbolx][bracketl5][keywordx][bracketr5][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][bracketl6][keywordx][bracketr6][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx]
               </a>
               <span style="font-weight:bold;">
                ·
               </span>
               [ahref]
               
               <span style="font-weight:bold;">
                ·
               </span>
               <a class="mw-redirect" href="/wiki/Blue_Summer_2013_Cooler_Key/ko" title="Blue Summer 2013 Cooler Key/ko">
                청색 2013년 여름 냉각기 열쇠
               </a>
               <span style="font-weight:bold;">
                ·
               </span>
               [linkx]
               
               <span style="font-weight:bold;">
                ·
               </span>
               <a class="mw-redirect" href="/wiki/Black_Summer_2013_Cooler_Key/ko" title="Black Summer 2013 Cooler Key/ko">
                흑색 2013년 여름 냉각기 열쇠
               </a>
               <span style="font-weight:bold;">
                ·
               </span>
               [ahref]
               
               <span style="font-weight:bold;">
                ·
               </span>
               [ahref]
               
               <span style="font-weight:bold;">
                ·
               </span>
               [ahref]
               
               <span style="font-weight:bold;">
                ·
               </span>
               <a class="mw-redirect" href="/wiki/Naughty_Winter_Crate_Key_2013/ko" title="Naughty Winter Crate Key 2013/ko">
                2013년형 나쁜 겨울 보급 상자 열쇠
               </a>
               <span style="font-weight:bold;">
                ·
               </span>
               <a class="mw-redirect" href="/wiki/Nice_Winter_Crate_Key_2013/ko" title="Nice Winter Crate Key 2013/ko">
                2013년형 착한 겨울 보급 상자 열쇠
               </a>
               <span style="font-weight:bold;">
                ·
               </span>
               <a class="mw-redirect" href="/wiki/Mann_Co._Strongbox_Key/ko" title="Mann Co. Strongbox Key/ko">
                Mann Co. 금고 열쇠
               </a>
               <span style="font-weight:bold;">
                ·
               </span>
               [linkx]
               
               <span style="font-weight:bold;">
                ·
               </span>
               [linkx]
               
               <span style="font-weight:bold;">
                ·
               </span>
               <a class="mw-redirect" href="/wiki/End_of_the_Line_Key/ko" title="End of the Line Key/ko">
                선로의 끝 열쇠
               </a>
               <span style="font-weight:bold;">
                ·
               </span>
               <a class="mw-redirect" href="/wiki/Nice_Winter_Crate_Key_2014/ko" title="Nice Winter Crate Key 2014/ko">
                2014년형 착한 겨울 상자 열쇠
               </a>
               <span style="font-weight:bold;">
                ·
               </span>
               <a class="mw-redirect" href="/wiki/Naughty_Winter_Crate_Key_2014/ko" title="Naughty Winter Crate Key 2014/ko">
                2014년형 나쁜 겨울 상자 열쇠
               </a>
               <span style="font-weight:bold;">
                ·
               </span>
               [ahref]
               
               <span style="font-weight:bold;">
                ·
               </span>
               <a class="mw-redirect" href="/wiki/Gun_Mettle_Cosmetic_Key/ko" title="Gun Mettle Cosmetic Key/ko">
                총기 패기 장식 열쇠
               </a>
               <span style="font-weight:bold;">
                ·
               </span>
               <a class="mw-redirect" href="/wiki/Invasion_Community_Update_Key/ko" title="Invasion Community Update Key/ko">
                침공 커뮤니티 업데이트 열쇠
               </a>
               <span style="font-weight:bold;">
                ·
               </span>
               [linkx]
               
               <span style="font-weight:bold;">
                ·
               </span>
               <a class="mw-redirect" href="/wiki/Tough_Break_Key/ko" title="Tough Break Key/ko">
                불행한 휴가 열쇠
               </a>
               <span style="font-weight:bold;">
                ·
               </span>
               [linkx]
               
               <span style="font-weight:bold;">
                ·
               </span>
               <a class="mw-redirect" href="/wiki/Mayflower_Cosmetic_Key/ko" title="Mayflower Cosmetic Key/ko">
                메이플라워 장식 열쇠
               </a>
               <span style="font-weight:bold;">
                ·
               </span>
               [ahref]
               
               <span style="font-weight:bold;">
                ·
               </span>
               <a class="mw-redirect" href="/wiki/Rainy_Day_Cosmetic_Key/ko" title="Rainy Day Cosmetic Key/ko">
                비 오는 날 장식 열쇠
               </a>
               <span style="font-weight:bold;">
                ·
               </span>
               [linkx]
               
               <span style="font-weight:bold;">
                ·
               </span>
               [ahref]
               
               <span style="font-weight:bold;">
                ·
               </span>
               <a class="mw-redirect" href="/wiki/Abominable_Cosmetic_Key/ko" title="Abominable Cosmetic Key/ko">
                Abominable Cosmetic Key
               </a>
               <span style="font-weight:bold;">
                ·
               </span>
               [linkx]
               
               <span style="font-weight:bold;">
                ·
               </span>
               [ahref]
               
               <span style="font-weight:bold;">
                ·
               </span>
               <a class="mw-redirect" href="/wiki/Winter_2017_Cosmetic_Key/ko" title="Winter 2017 Cosmetic Key/ko">
                Winter 2017 Cosmetic Key
               </a>
               <span style="font-weight:bold;">
                ·
               </span>
               <a class="new" href="/w/index.php?title=Scream_Fortress_X_War_Paint_Key/ko&amp;action=edit&amp;redlink=1" title="Scream Fortress X War Paint Key/ko (page does not exist)">
                Scream Fortress X War Paint Key
               </a>
               <span style="font-weight:bold;">
                ·
               </span>
               <a class="new" href="/w/index.php?title=Violet_Vermin_Key/ko&amp;action=edit&amp;redlink=1" title="Violet Vermin Key/ko (page does not exist)">
                Violet Vermin Key
               </a>
               <span style="font-weight:bold;">
                ·
               </span>
               [ahref]
               
              </div>
             </td>
            </tr>
            <tr style="height:2px">
             <td>
             </td>
            </tr>
            <tr>
             <td class="navbox-group" style=";padding-left:0em;padding-right:0em;background: #FFF2B3;;">
              <div style="padding:0em 0.75em;">
               장식용 아이템
              </div>
             </td>
             <td class="navbox-list navbox-off" style="text-align:left;border-left-width:2px;border-left-style:solid;width:100%;padding:0px;;;">
              <div style="padding:0em 0.25em">
               [ahref]
               
               <span style="font-weight:bold;">
                ·
               </span>
               <a href="/wiki/Description_Tag/ko" title="Description Tag/ko">
                설명표
               </a>
               <span style="font-weight:bold;">
                ·
               </span>
               [ahref]
               
               <span style="font-weight:bold;">
                ·
               </span>
               <a href="/wiki/Decal_Tool/ko" title="Decal Tool/ko">
                데칼 도구
               </a>
               <span style="font-weight:bold;">
                ·
               </span>
               [ahref]
               
               <span style="font-weight:bold;">
                ·
               </span>
               [ahref]
               
               <span style="font-weight:bold;">
                ·
               </span>
               [ahref]
               
               <span style="font-weight:bold;">
                ·
               </span>
               [linkx]
               
               <span style="font-weight:bold;">
                ·
               </span>
               <a href="/wiki/Strangifier/ko" title="Strangifier/ko">
                이상한 첨가물
               </a>
               <span style="font-weight:bold;">
                ·
               </span>
               <a href="/wiki/Killstreak_Kit/ko" title="Killstreak Kit/ko">
                연속 처치 장비
               </a>
               <span style="font-weight:bold;">
                ·
               </span>
               <strong class="selflink">
                이상한 수치 이전 도구
               </strong>
               <span style="font-weight:bold;">
                ·
               </span>
               <a href="/wiki/Festivizer/ko" title="Festivizer/ko">
                Festivizer
               </a>
               <span style="font-weight:bold;">
                ·
               </span>
               [linkx]
               
               <span style="font-weight:bold;">
                ·
               </span>
               [linkx]
               
               <span style="font-weight:bold;">
                ·
               </span>
               <a href="/wiki/War_Paint/ko" title="War Paint/ko">
                전투 도색
               </a>
              </div>
             </td>
            </tr>
            <tr style="height:2px">
             <td>
             </td>
            </tr>
            <tr>
             <td class="navbox-group" style=";padding-left:0em;padding-right:0em;background: #FFF2B3;;">
              <div style="padding:0em 0.75em;">
               기타
              </div>
             </td>
             <td class="navbox-list navbox-off" style="text-align:left;border-left-width:2px;border-left-style:solid;width:100%;padding:0px;;;">
              <div style="padding:0em 0.25em">
               <a href="/wiki/Gift_Wrap/ko" title="Gift Wrap/ko">
                선물 포장지
               </a>
               <span style="font-weight:bold;">
                ·
               </span>
               [linkx]
               
               <span style="font-weight:bold;">
                ·
               </span>
               <a href="/wiki/RIFT_Well_Spun_Hat_Claim_Code/ko" title="RIFT Well Spun Hat Claim Code/ko">
                RIFT 잘 짜인 모자 획득 코드
               </a>
               <span style="font-weight:bold;">
                ·
               </span>
               <a href="/wiki/Something_Special_For_Someone_Special/ko" title="Something Special For Someone Special/ko">
                특별한 누군가를 위한 특별한 무언가
               </a>
               <span style="font-weight:bold;">
                ·
               </span>
               [ahref]
               
               <span style="font-weight:bold;">
                ·
               </span>
               <a href="/wiki/Tour_of_Duty_Ticket/ko" title="Tour of Duty Ticket/ko">
                복무권
               </a>
               <span style="font-weight:bold;">
                ·
               </span>
               [ahref]
               
               <span style="font-weight:bold;">
                ·
               </span>
               <a href="/wiki/Mysterious_Promo/ko" title="Mysterious Promo/ko">
                알 수 없는 판촉물
               </a>
               <span style="font-weight:bold;">
                ·
               </span>
               [ahref]
               
               <span style="font-weight:bold;">
                ·
               </span>
               [ahref]
               
               <span style="font-weight:bold;">
                ·
               </span>
               [linkx]
               
               <span style="font-weight:bold;">
                ·
               </span>
               [linkx]
               
               <span style="font-weight:bold;">
                ·
               </span>
               [ahref]
               
               <span style="font-weight:bold;">
                ·
               </span>
               <a href="/wiki/Enchantment_Eternaween/ko" title="Enchantment Eternaween/ko">
                주술: 우리들의 핼러윈은 이제부터 시작이다!
               </a>
               <span style="font-weight:bold;">
                ·
               </span>
               [linkx]
               
               <span style="font-weight:bold;">
                ·
               </span>
               <a href="/wiki/Unfilled_Fancy_Spellbook/ko" title="Unfilled Fancy Spellbook/ko">
                미완성된 멋진 주문서
               </a>
               <span style="font-weight:bold;">
                ·
               </span>
               [linkx]
               
               <span style="font-weight:bold;">
                ·
               </span>
               [linkx]
               
               <span style="font-weight:bold;">
                ·
               </span>
               <a href="/wiki/Competitive_Matchmaking_Beta_Pass/ko" title="Competitive Matchmaking Beta Pass/ko">
                경쟁전 경기 주선 베타 참가권
               </a>
               <span style="font-weight:bold;">
                ·
               </span>
               [ahref]
               
               <span style="font-weight:bold;">
                ·
               </span>
               <a href="/wiki/Gun_Mettle_Campaign_Pass/ko" title="Gun Mettle Campaign Pass/ko">
                총기 패기 작전 참가권
               </a>
               <span style="font-weight:bold;">
                ·
               </span>
               [ahref]
               
               <span style="font-weight:bold;">
                ·
               </span>
               [ahref]
               
               <span style="font-weight:bold;">
                ·
               </span>
               <a href="/wiki/Invasion_Community_Update_Coin/ko" title="Invasion Community Update Coin/ko">
                침공 커뮤니티 업데이트 기념 주화
               </a>
               <span style="font-weight:bold;">
                ·
               </span>
               <a href="/wiki/Soul_Gargoyle/ko" title="Soul Gargoyle/ko">
                영혼 가고일
               </a>
               <span style="font-weight:bold;">
                ·
               </span>
               <a href="/wiki/Tough_Break_Campaign_Pass/ko" title="Tough Break Campaign Pass/ko">
                불행한 휴가 작전 참가권
               </a>
               <span style="font-weight:bold;">
                ·
               </span>
               [ahref]
               
               <span style="font-weight:bold;">
                ·
               </span>
               [linkx]
               
               <span style="font-weight:bold;">
                ·
               </span>
               <a href="/wiki/Jungle_Inferno_Campaign_Pass/ko" title="Jungle Inferno Campaign Pass/ko">
                Jungle Inferno Campaign Pass
               </a>
               <span style="font-weight:bold;">
                ·
               </span>
               [linkx]
               
              </div>
             </td>
            </tr>
           </table>
           <div>
           </div>
          </td>
         </tr>
         <tr style="height:2px">
          <td>
          </td>
         </tr>
         <tr>
          <td class="navbox-group" style=";;">
           <a href="/wiki/Action_items/ko" title="Action items/ko">
            액션 아이템
           </a>
          </td>
          <td class="navbox-list navbox-even" style="text-align:left;border-left-width:2px;border-left-style:solid;width:100%;padding:0px;;;">
           <div style="padding:0em 0.25em">
           </div>
           <table cellspacing="0" class="nowraplinks navbox-subgroup" style="width:100%;;;;">
            <tr>
             <td class="navbox-group" style=";padding-left:0em;padding-right:0em;background: #FFF2B3;;">
              <div style="padding:0em 0.75em;">
               소비성
              </div>
             </td>
             <td class="navbox-list navbox-off" style="text-align:left;border-left-width:2px;border-left-style:solid;width:100%;padding:0px;;;">
              <div style="padding:0em 0.25em">
               [linkx]
               
               <span style="font-weight:bold;">
                ·
               </span>
               [linkx]
               
               <span style="font-weight:bold;">
                ·
               </span>
               <a href="/wiki/Manniversary_Package/ko" title="Manniversary Package/ko">
                만념일 패키지
               </a>
               <span style="font-weight:bold;">
                ·
               </span>
               [linkx]
               
               <span style="font-weight:bold;">
                ·
               </span>
               <a href="/wiki/Mann_Co._Store_Package/ko" title="Mann Co. Store Package/ko">
                Mann Co. 사은품
               </a>
               <span style="font-weight:bold;">
                ·
               </span>
               <a href="/wiki/What%27s_in_the_Sandvich_Box%3F/ko" title="What's in the Sandvich Box?/ko">
                샌드비치 상자에 뭐가 있지?
               </a>
               <span style="font-weight:bold;">
                ·
               </span>
               <a href="/wiki/What%27s_in_the_Companion_Square_Box%3F/ko" title="What's in the Companion Square Box?/ko">
                동행 큐브 상자에 뭐가 있지?
               </a>
               <span style="font-weight:bold;">
                ·
               </span>
               [ahref]
               
               <span style="font-weight:bold;">
                ·
               </span>
               [ahref]
               
               <span style="font-weight:bold;">
                ·[content17[linkx]content18[linkx]content19]
               </span>
               [ahref]
               
               <span style="font-weight:bold;">
                ·
               </span>
               [ahref]
               
               <span style="font-weight:bold;">
                ·
               </span>
               <a href="/wiki/Halloween_Package/ko" title="Halloween Package/ko">
                Halloween Package
               </a>
              </div>
             </td>
            </tr>
            <tr style="height:2px">
             <td>
             </td>
            </tr>
            <tr>
             <td class="navbox-group" style=";padding-left:0em;padding-right:0em;background: #FFF2B3;;">
              <div style="padding:0em 0.75em;">
               선물
              </div>
             </td>
             <td class="navbox-list navbox-off" style="text-align:left;border-left-width:2px;border-left-style:solid;width:100%;padding:0px;;;">
              <div style="padding:0em 0.25em">
               [linkx]
               
               <span style="font-weight:bold;">
                ·
               </span>
               [ahref]
               
               <span style="font-weight:bold;">
                ·
               </span>
               [linkx]
               
               <span style="font-weight:bold;">
                ·
               </span>
               [ahref]
               
               <span style="font-weight:bold;">
                ·
               </span>
               <a href="/wiki/Pile_of_Robo_Community_Crate_Key_Gifts/ko" title="Pile of Robo Community Crate Key Gifts/ko">
                로봇 커뮤니티 상자 열쇠 더미
               </a>
               <span style="font-weight:bold;">
                ·
               </span>
               [ahref]
               
               <span style="font-weight:bold;">
                ·
               </span>
               <a href="/wiki/Pile_of_Summer_Cooler_Key_Gifts/ko" title="Pile of Summer Cooler Key Gifts/ko">
                여름 냉각기 열쇠 더미
               </a>
               <span style="font-weight:bold;">
                ·
               </span>
               <a href="/wiki/Gift-Stuffed_Stocking/ko" title="Gift-Stuffed Stocking/ko">
                선물이 가득한 양말
               </a>
               <span style="font-weight:bold;">
                ·
               </span>
               <a href="/wiki/Giftapult/ko" title="Giftapult/ko">
                투선물기
               </a>
               <span style="font-weight:bold;">
                ·
               </span>
               [linkx]
               
               <span style="font-weight:bold;">
                ·
               </span>
               [linkx]
               
               <span style="font-weight:bold;">
                ·
               </span>
               <a href="/wiki/A_Random_Duck_Token_Gift/ko" title="A Random Duck Token Gift/ko">
                무작위 오리 토큰 선물
               </a>
               <span style="font-weight:bold;">
                ·
               </span>
               [linkx]
               
               <span style="font-weight:bold;">
                ·
               </span>
               [ahref]
               
               <span style="font-weight:bold;">
                ·
               </span>
               [linkx]
               
               <span style="font-weight:bold;">
                ·
               </span>
               <a href="/wiki/Smissmas_2015_Festive_Gift/ko" title="Smissmas 2015 Festive Gift/ko">
                2015년도 스미스마스 축제 선물
               </a>
               <span style="font-weight:bold;">
                ·
               </span>
               [linkx]
               
              </div>
             </td>
            </tr>
            <tr style="height:2px">
             <td>
             </td>
            </tr>
            <tr>
             <td class="navbox-group" style=";padding-left:0em;padding-right:0em;background: #FFF2B3;;">
              <div style="padding:0em 0.75em;">
               도발
              </div>
             </td>
             <td class="navbox-list navbox-off" style="text-align:left;border-left-width:2px;border-left-style:solid;width:100%;padding:0px;;;">
              <div style="padding:0em 0.25em">
               <a href="/wiki/Scout/ko" title="Scout/ko">
               </a>
               [linkx]
               
               <span style="font-weight:bold;">
                ·
               </span>
               <a href="/wiki/Deep_Fried_Desire/ko" title="Deep Fried Desire/ko">
                바삭하게 튀긴 욕망
               </a>
               <span style="font-weight:bold;">
                ·
               </span>
               <a href="/wiki/Boston_Breakdance/ko" title="Boston Breakdance/ko">
                보스턴식 브레이크댄스
               </a>
               <span style="font-weight:bold;">
                ·
               </span>
               <a href="/wiki/Carlton/ko" title="Carlton/ko">
                칼턴
               </a>
               <span style="font-weight:bold;">
                ·
               </span>
               [ahref]
               
               <span style="font-weight:bold;">
                ·
               </span>
               [linkx]
               
               <span style="font-weight:bold;">
                ·
               </span>
               [linkx]
               
               <span style="font-weight:bold;">
                ·
               </span>
               [linkx]
               
               <span style="font-weight:bold;">
                ·
               </span>
               [ahref]
               
               <a href="/wiki/Fresh_Brewed_Victory/ko" title="Fresh Brewed Victory/ko">
                갓 내린 승리
               </a>
               <span style="font-weight:bold;">
                ·
               </span>
               [linkx]
               
               <span style="font-weight:bold;">
                ·
               </span>
               <a href="/wiki/Fubar_Fanfare/ko" title="Fubar Fanfare/ko">
                폭탄급 팡파르
               </a>
               <span style="font-weight:bold;">
                ·
               </span>
               <a href="/wiki/Panzer_Pants/ko" title="Panzer Pants/ko">
                Panzer Pants
               </a>
               <span style="font-weight:bold;">
                ·
               </span>
               <a href="/wiki/Pyro/ko" title="Pyro/ko">
                [content2][content3][content4][linkx][content5][linkx][content6]
               </a>
               [linkx]
               
               <span style="font-weight:bold;">
                ·
               </span>
               [linkx]
               
               <span style="font-weight:bold;">
                ·
               </span>
               [linkx]
               
               <span style="font-weight:bold;">
                ·
               </span>
               [linkx]
               
               <span style="font-weight:bold;">
                ·
               </span>
               <a href="/wiki/Skating_Scorcher/ko" title="Skating Scorcher/ko">
                Skating Scorcher
               </a>
               <span style="font-weight:bold;">
                ·
               </span>
               [linkx]
               
               [linkx]
               
               <span style="font-weight:bold;">
                ·
               </span>
               <a href="/wiki/Oblooterated/ko" title="Oblooterated/ko">
                만취는 즐거워
               </a>
               <span style="font-weight:bold;">
                ·
               </span>
               [linkx]
               
               <span style="font-weight:bold;">
                ·
               </span>
               [ahref]
               
               <span style="font-weight:bold;">
                ·
               </span>
               <a href="/wiki/Heavy/ko" title="Heavy/ko">
               </a>
               [linkx]
               
               <span style="font-weight:bold;">
                ·
               </span>
               [linkx]
               
               <span style="font-weight:bold;">
                ·
               </span>
               <a href="/wiki/Boiling_Point/ko" title="Boiling Point/ko">
                Boiling Point
               </a>
               <span style="font-weight:bold;">
                ·
               </span>
               <a href="/wiki/Russian_Arms_Race/ko" title="Russian Arms Race/ko">
                러시아식 완력 경쟁
               </a>
               <span style="font-weight:bold;">
                ·
               </span>
               <a href="/wiki/Soviet_Strongarm/ko" title="Soviet Strongarm/ko">
                내레 인민의 팔힘을 보여주갔어
               </a>
               <span style="font-weight:bold;">
                ·
               </span>
               <a href="/wiki/Engineer/ko" title="Engineer/ko">
               </a>
               [linkx]
               
               <span style="font-weight:bold;">
                ·
               </span>
               [ahref]
               
               <span style="font-weight:bold;">
                ·
               </span>
               [linkx]
               
               <span style="font-weight:bold;">
                ·
               </span>
               [ahref]
               
               <span style="font-weight:bold;">
                ·
               </span>
               [linkx]
               
               [ahref]
               
               <span style="font-weight:bold;">
                ·
               </span>
               <a href="/wiki/Results_Are_In/ko" title="Results Are In/ko">
                진단 결과
               </a>
               <span style="font-weight:bold;">
                ·
               </span>
               <a href="/wiki/Surgeon%27s_Squeezebox/ko" title="Surgeon's Squeezebox/ko">
                Surgeon's Squeezebox
               </a>
               <span style="font-weight:bold;">
                ·
               </span>
               [ahref]
               
               <a href="/wiki/I_See_You/ko" title="I See You/ko">
                지켜보고 있다
               </a>
               <span style="font-weight:bold;">
                ·
               </span>
               <a href="/wiki/Killer_Solo/ko" title="Killer Solo/ko">
                살인자의 독주
               </a>
               <span style="font-weight:bold;">
                ·
               </span>
               <a href="/wiki/Most_Wanted/ko" title="Most Wanted/ko">
                지명 수배
               </a>
               <span style="font-weight:bold;">
                ·
               </span>
               <a href="/wiki/Didgeridrongo/ko" title="Didgeridrongo/ko">
                디저리두 머저리
               </a>
               <span style="font-weight:bold;">
                ·
               </span>
               [ahref]
               
               [ahref]
               
               <span style="font-weight:bold;">
                ·
               </span>
               <a href="/wiki/Box_Trot/ko" title="Box Trot/ko">
                스파이 스네이크
               </a>
               <span style="font-weight:bold;">
                ·
               </span>
               <a href="/wiki/Disco_Fever/ko" title="Disco Fever/ko">
                디스코의 열기
               </a>
               <span style="font-weight:bold;">
                ·
               </span>
               <a href="/wiki/Luxury_Lounge/ko" title="Luxury Lounge/ko">
                Luxury Lounge
               </a>
               <span style="font-weight:bold;">
                ·
               </span>
               [linkx]
               
               [ahref]
               
               <span style="font-weight:bold;">
                ·
               </span>
               <a href="/wiki/Schadenfreude/ko" title="Schadenfreude/ko">
                남의 불행은 곧 나의 행복
               </a>
               <span style="font-weight:bold;">
                ·
               </span>
               [ahref]
               
               <span style="font-weight:bold;">
                ·
               </span>
               <a href="/wiki/Shred_Alert/ko" title="Shred Alert/ko">
                파쇄 경보
               </a>
               <span style="font-weight:bold;">
                ·
               </span>
               [linkx]
               
               <span style="font-weight:bold;">
                ·
               </span>
               [ahref]
               
               <span style="font-weight:bold;">
                ·
               </span>
               [ahref]
               
               <span style="font-weight:bold;">
                ·
               </span>
               [ahref]
               
               <span style="font-weight:bold;">
                ·
               </span>
               [ahref]
               
               <span style="font-weight:bold;">
                ·
               </span>
               [linkx]
               
               <span style="font-weight:bold;">
                ·
               </span>
               <a href="/wiki/Burstchester/ko" title="Burstchester/ko">
                버스트체스터
               </a>
               <span style="font-weight:bold;">
                ·
               </span>
               [ahref]
               
               <span style="font-weight:bold;">
                ·
               </span>
               [ahref]
               
               <span style="font-weight:bold;">
                ·
               </span>
               [linkx]
               
               <span style="font-weight:bold;">
                ·
               </span>
               <a href="/wiki/Victory_Lap/ko" title="Victory Lap/ko">
                승리의 한 바퀴
               </a>
               <span style="font-weight:bold;">
                ·
               </span>
               [ahref]
               
               <span style="font-weight:bold;">
                ·
               </span>
               <a href="/wiki/Yeti_Smash/ko" title="Yeti Smash/ko">
                예티 강타
               </a>
              </div>
             </td>
            </tr>
            <tr style="height:2px">
             <td>
             </td>
            </tr>
            <tr>
             <td class="navbox-group" style=";padding-left:0em;padding-right:0em;background: #FFF2B3;;">
              <div style="padding:0em 0.75em;">
               기타
              </div>
             </td>
             <td class="navbox-list navbox-off" style="text-align:left;border-left-width:2px;border-left-style:solid;width:100%;padding:0px;;;">
              <div style="padding:0em 0.25em">
               [ahref]
               
               <span style="font-weight:bold;">
                ·
               </span>
               [linkx]
               
               <span style="font-weight:bold;">
                ·
               </span>
               <a href="/wiki/Pile_Of_Curses/ko" title="Pile Of Curses/ko">
                저주덩어리
               </a>
               <span style="font-weight:bold;">
                ·
               </span>
               [linkx]
               
               (
               <a href="/wiki/Battery_Canteens/ko" title="Battery Canteens/ko">
                축전지 수통
               </a>
               ,
               [linkx]
               
               )
               <span style="font-weight:bold;">
                ·
               </span>
               <a href="/wiki/Spellbook_Magazine/ko" title="Spellbook Magazine/ko">
                주문서 잡지
               </a>
               <span style="font-weight:bold;">
                ·
               </span>
               [linkx]
               
               <span style="font-weight:bold;">
                ·
               </span>
               <a href="/wiki/Duck_Journal/ko" title="Duck Journal/ko">
                오리 일지
               </a>
               <span style="font-weight:bold;">
                ·
               </span>
               <a href="/wiki/Grappling_Hook/ko" title="Grappling Hook/ko">
                기동 갈고리
               </a>
               <span style="font-weight:bold;">
                ·
               </span>
               [ahref]
               
              </div>
             </td>
            </tr>
           </table>
           <div>
           </div>
          </td>
         </tr>
        </table>
       </td>
      </tr>
     </table>
    </div>
    <div class="printfooter">
     Retrieved from "
     [ahref]
     
     "
    </div>
    <div class="catlinks" data-mw="interface" id="catlinks">
     <div class="mw-normal-catlinks" id="mw-normal-catlinks">
      [ahref]
      
      :
      <ul>
       <li>
        <a href="/wiki/Category:Tools/ko" title="Category:Tools/ko">
         Tools/ko
        </a>
       </li>
       <li>
        [linkx]
        
       </li>
      </ul>
     </div>
     <div class="mw-hidden-catlinks mw-hidden-cats-hidden" id="mw-hidden-catlinks">
      Hidden categories:
      <ul>
       <li>
        [linkx]
        
       </li>
       <li>
        <a href="/wiki/Category:Outdated_Backpack_item_parameters" title="Category:Outdated Backpack item parameters">
         Outdated Backpack item parameters
        </a>
       </li>
       <li>
        <a href="/wiki/Category:Item_infobox_usage" title="Category:Item infobox usage">
         Item infobox usage
        </a>
       </li>
      </ul>
     </div>
    </div>
    <div class="visualClear">
    </div>
   </div>
  </div>
  <div id="mw-navigation">
   <h2>
    [mkey1][symbolx][pkey1][symbolx][keyword1][bracketl1][bracketr1][symbolx][bracketl2][siter1][bracketr2][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx]
   </h2>
   <div id="mw-head">
    <div aria-labelledby="p-personal-label" class="" id="p-personal" role="navigation">
     <h3 id="p-personal-label">
      [mkey1][symbolx][pkey1][symbolx][keyword1][bracketl1][bracketr1][symbolx][bracketl2][siter1][bracketr2][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx]
     </h3>
     <ul>
      <li id="pt-createaccount">
       [ahref]
       
      </li>
      <li id="pt-login">
       <a accesskey="o" href="/w/index.php?title=Special:UserLogin&amp;returnto=Strange+Count+Transfer+Tool%2Fko" title="You are encouraged to log in; however, it is not mandatory [o]">
        Log in
       </a>
      </li>
     </ul>
    </div>
    <div id="left-navigation">
     <div aria-labelledby="p-namespaces-label" class="vectorTabs" id="p-namespaces" role="navigation">
      <h3 id="p-namespaces-label">
       [mkey1][symbolx][pkey1][symbolx][keyword1][bracketl1][bracketr1][symbolx][bracketl2][siter1][bracketr2][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx]
      </h3>
      <ul>
       <li class="selected" id="ca-nstab-main">
        <span>
         [linkx]
         
        </span>
       </li>
       <li class="new" id="ca-talk">
        <span>
         <a accesskey="t" href="/w/index.php?title=Talk:Strange_Count_Transfer_Tool/ko&amp;action=edit&amp;redlink=1" rel="discussion" title="Discussion about the content page [t]">
          Discussion
         </a>
        </span>
       </li>
      </ul>
     </div>
     <div aria-labelledby="p-variants-label" class="vectorMenu emptyPortlet" id="p-variants" role="navigation">
      <h3 id="p-variants-label">
       [mkey1][symbolx][pkey1][symbolx][keyword1][bracketl1][bracketr1][symbolx][bracketl2][siter1][bracketr2][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx]
      </h3>
      <div class="menu">
       <ul>
       </ul>
      </div>
     </div>
    </div>
    <div id="right-navigation">
     <div aria-labelledby="p-views-label" class="vectorTabs" id="p-views" role="navigation">
      <h3 id="p-views-label">
       [mkey1][symbolx][pkey1][symbolx][keyword1][bracketl1][bracketr1][symbolx][bracketl2][siter1][bracketr2][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx]
      </h3>
      <ul>
       <li class="selected" id="ca-view">
        <span>
         <a href="/wiki/Strange_Count_Transfer_Tool/ko">
          Read
         </a>
        </span>
       </li>
       <li id="ca-viewsource">
        <span>
         [linkx]
         
        </span>
       </li>
       <li class="collapsible" id="ca-history">
        <span>
         <a accesskey="h" href="/w/index.php?title=Strange_Count_Transfer_Tool/ko&amp;action=history" title="Past revisions of this page [h]">
          View history
         </a>
        </span>
       </li>
      </ul>
     </div>
     <div aria-labelledby="p-cactions-label" class="vectorMenu emptyPortlet" id="p-cactions" role="navigation">
      <h3 id="p-cactions-label">
       [mkey1][symbolx][pkey1][symbolx][keyword1][bracketl1][bracketr1][symbolx][bracketl2][siter1][bracketr2][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx]
      </h3>
      <div class="menu">
       <ul>
       </ul>
      </div>
     </div>
     <div id="p-search" role="search">
      <h3>
       [mkey1][symbolx][pkey1][symbolx][keyword1][bracketl1][bracketr1][symbolx][bracketl2][siter1][bracketr2][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx]
      </h3>
      <form action="/w/index.php" id="searchform">
       <div id="simpleSearch">
       </div>
      </form>
     </div>
    </div>
   </div>
   <div id="mw-panel">
    <div id="p-logo" role="banner">
     <a class="mw-wiki-logo" href="/wiki/Main_Page" title="Official TF2 Wiki">
     </a>
    </div>
    <div aria-labelledby="p-Navigation-label" class="portal" id="p-Navigation" role="navigation">
     <h3 id="p-Navigation-label">
      [mkey1][symbolx][pkey1][symbolx][keyword1][bracketl1][bracketr1][symbolx][bracketl2][siter1][bracketr2][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx]
     </h3>
     <div class="body">
      <ul>
       <li id="n-mainpage-description">
        [ahref]
        
       </li>
       <li id="n-about">
        [linkx]
        
       </li>
       <li id="n-recentchanges">
        [ahref]
        
       </li>
       <li id="n-randompage">
        [ahref]
        
       </li>
       <li id="n-Help">
        [linkx]
        
       </li>
       <li id="n-FAQ">
        [linkx]
        
       </li>
       <li id="n-ircchannel">
        <a href="/wiki/Team_Fortress_Wiki:IRC">
         IRC channel
        </a>
       </li>
      </ul>
     </div>
    </div>
    <div aria-labelledby="p-tb-label" class="portal" id="p-tb" role="navigation">
     <h3 id="p-tb-label">
      [mkey1][symbolx][pkey1][symbolx][keyword1][bracketl1][bracketr1][symbolx][bracketl2][siter1][bracketr2][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx]
     </h3>
     <div class="body">
      <ul>
       <li id="t-whatlinkshere">
        [ahref]
        
       </li>
       <li id="t-recentchangeslinked">
        [linkx]
        
       </li>
       <li id="t-specialpages">
        <a accesskey="q" href="/wiki/Special:SpecialPages" title="A list of all special pages [q]">
         Special pages
        </a>
       </li>
       <li id="t-print">
        [linkx]
        
       </li>
       <li id="t-permalink">
        [linkx]
        
       </li>
       <li id="t-info">
        [ahref]
        
       </li>
       <li id="t-cite">
        [linkx]
        
       </li>
      </ul>
     </div>
    </div>
    <div aria-labelledby="p-Languages-label" class="portal" id="p-Languages" role="navigation">
     <h3 id="p-Languages-label">
      [mkey1][symbolx][pkey1][symbolx][keyword1][bracketl1][bracketr1][symbolx][bracketl2][siter1][bracketr2][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx]
     </h3>
     <div class="body">
      <ul>
       <li id="n-English">
        <a href="/wiki/Strange_Count_Transfer_Tool">
         English
        </a>
       </li>
       <li id="n-.C4.8Cesky">
        <a href="/wiki/Strange_Count_Transfer_Tool/cs">
         Česky
        </a>
       </li>
       <li id="n-Dansk">
        [linkx]
        
       </li>
       <li id="n-Deutsch">
        [ahref]
        
       </li>
       <li id="n-Espa.C3.B1ol">
        [linkx]
        
       </li>
       <li id="n-Suomi">
        <a href="/wiki/Strange_Count_Transfer_Tool/fi">
         Suomi
        </a>
       </li>
       <li id="n-Fran.C3.A7ais">
        <a href="/wiki/Strange_Count_Transfer_Tool/fr">
         Français
        </a>
       </li>
       <li id="n-.E6.97.A5.E6.9C.AC.E8.AA.9E">
        [linkx]
        
       </li>
       <li id="n-.ED.95.9C.EA.B5.AD.EC.96.B4">
        <a href="/wiki/Strange_Count_Transfer_Tool/ko">
         한국어
        </a>
       </li>
       <li id="n-Polski">
        <a href="/wiki/Strange_Count_Transfer_Tool/pl">
         Polski
        </a>
       </li>
       <li id="n-Portugu.C3.AAs-do-Brasil">
        [ahref]
        
       </li>
       <li id="n-.D0.A0.D1.83.D1.81.D1.81.D0.BA.D0.B8.D0.B9">
        [ahref]
        
       </li>
       <li id="n-T.C3.BCrk.C3.A7e">
        <a href="/wiki/Strange_Count_Transfer_Tool/tr">
         Türkçe
        </a>
       </li>
      </ul>
     </div>
    </div>
    <div aria-labelledby="p-Team_Fortress_2-label" class="portal" id="p-Team_Fortress_2" role="navigation">
     <h3 id="p-Team_Fortress_2-label">
      [mkey1][symbolx][pkey1][symbolx][keyword1][bracketl1][bracketr1][symbolx][bracketl2][siter1][bracketr2][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx]
     </h3>
     <div class="body">
      <ul>
       <li id="n-Download">
        <li>[link]</li>[keywordx][symbolx][keywordx][symbolx][bracketl3][keywordx][bracketr3][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][link]
       </li>
       <li id="n-Blog">
        <a href="m" rel="nofollow">
         Blog
        </a>
       </li>
       <li id="n-Updates">
        <a href="/news/?appids=440&amp;appgroupname=Team+Fortress+2&amp;feed=steam_updates" rel="nofollow">
         Updates
        </a>
       </li>
       <li id="n-communityhub">
        [ahref]
        
       </li>
       <li id="n-steamworkshop">
        [ahref]
        
       </li>
       <li id="n-Forums">
        [ahref]
        
       </li>
      </ul>
     </div>
    </div>
    <div aria-labelledby="p-Team_Fortress_Classic-label" class="portal" id="p-Team_Fortress_Classic" role="navigation">
     <h3 id="p-Team_Fortress_Classic-label">
      [mkey1][symbolx][pkey1][symbolx][keyword1][bracketl1][bracketr1][symbolx][bracketl2][siter1][bracketr2][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx]
     </h3>
     <div class="body">
      <ul>
       <li id="n-tfcmainpage">
        [ahref]
        
       </li>
       <li id="n-Purchase">
        <a href="/app/20" rel="nofollow">
         Purchase
        </a>
       </li>
       <li id="n-Updates">
        <a href="/news/?appids=20&amp;appgroupname=Team+Fortress+Classic&amp;feed=steam_updates" rel="nofollow">
         Updates
        </a>
       </li>
       <li id="n-communityhub">
        Community Hub[link][link]<li>[keywordx][symbolx][keywordx][symbolx][bracketl2][keywordx][bracketr2][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx]</li>
       </li>
       <li id="n-Forums">
        [ahref]
        
       </li>
      </ul>
     </div>
    </div>
    <div aria-labelledby="p-Valve_Wiki_Network-label" class="portal" id="p-Valve_Wiki_Network" role="navigation">
     <h3 id="p-Valve_Wiki_Network-label">
      [mkey1][symbolx][pkey1][symbolx][keyword1][bracketl1][bracketr1][symbolx][bracketl2][siter1][bracketr2][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx]
     </h3>
     <div class="body">
      <ul>
       <li id="n-Combine-OverWiki">
        [linkx]
        
       </li>
       <li id="n-Left-4-Dead-Wiki">
        <a href="/" rel="nofollow">
         Left 4 Dead Wiki
        </a>
       </li>
       <li id="n-Portal-Wiki">
        [ahref]
        
       </li>
      </ul>
     </div>
    </div>
   </div>
  </div>
  <div id="footer" role="contentinfo">
   <ul id="footer-info">
    <li id="footer-info-lastmod">
     This page was last modified on 23 June 2016, at 03:28.
    </li>
   </ul>
   <ul id="footer-places">
    <li id="footer-places-about">
     [linkx]
     
    </li>
    <li id="footer-places-disclaimer">
     [ahref]
     
    </li>
   </ul>
   <ul class="noprint" id="footer-icons">
    <li id="footer-poweredbyico">
     <a href="/">
     </a>
    </li>
   </ul>
   <div style="clear:both">
   </div>
  </div>
  <b style="color:black;background-color:#a0ffff">
   jnice09-ipp30-wq-zq-0442
  </b>
 </body>
</html>
|<---