--->|<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
 <head>
  <title>
   [mkey1][symbolx][pkey1][symbolx][keyword1][bracketl1][bracketr1][symbolx][bracketl2][siter1][bracketr2][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx]
  </title>
  <meta content="[mkey1][symbolx][pkey1][symbolx][keyword1][bracketl1][bracketr1][symbolx][bracketl2][siter1][bracketr2][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx]" name="description"/>
  <meta content="[mkey1][symbolx][pkey1][symbolx][keyword1][bracketl1][bracketr1][symbolx][bracketl2][siter1][bracketr2][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx]" name="keywords"/>
  <meta content="[mkey1][symbolx][pkey1][symbolx][keyword1][bracketl1][bracketr1][symbolx][bracketl2][siter1][bracketr2][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx]" property="og:url"/>
  <meta content="[mkey1][symbolx][pkey1][symbolx][keyword1][bracketl1][bracketr1][symbolx][bracketl2][siter1][bracketr2][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx]" property="og:title"/>
  <meta content="" property="og:image"/>
  <meta content="[mkey1][symbolx][pkey1][symbolx][keyword1][bracketl1][bracketr1][symbolx][bracketl2][siter1][bracketr2][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx]" property="og:description"/>
  <meta content="text/html; charset=utf-8" http-equiv="content-type"/>
 </head>
 <body>
  <noscript>
   <iframe height="0" src="https://www.googletagmanager.com/ns.html?id=GTM-PV6PGRN" style="display:none;visibility:hidden" width="0">
   </iframe>
  </noscript>
  <div class="person_InfoBg" id="personInfoBgBox" style="display:none">
  </div>
  <div id="global">
   <div class="global_wrap">
    <div class="globalbtn">
     <a class="login" href="/login.mvc">
      로그인
     </a>
     [linkx]
     
     [ahref]
     
     [ahref]
     
    </div>
   </div>
  </div>
  <div id="all_menu">
   <form action="/product/maniaworld/surporterhome/surporterHome.mvc" id="surporterForm" name="surporterForm">
   </form>
   <form action="/product/maniaworld/teachermain/teacherMain.mvc" id="teacherForm" name="teacherForm">
   </form>
   <div class="am_wrap_1">
   </div>
  </div>
  <hr/>
  <div id="wrap">
   <div class="in_wrap">
    <div id="header">
     <div class="headtop jn_mainHead">
      <h1 class="logo">
       <b>[mkey1][symbolx][pkey1][symbolx][keyword1][bracketl1][bracketr1][symbolx][bracketl2][siter1][bracketr2][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx]</b>
      </h1>
      <form action="/product/maniaworld/surporterhome/surporterHome.mvc" id="surporterForm" name="surporterForm">
      </form>
      <form action="/product/maniaworld/teachermain/teacherMain.mvc" id="teacherForm" name="teacherForm">
      </form>
      <form action="/product/autonomy/autonomyHomeSubmit.mvc" id="autonomySearchForm" method="post">
       <div class="topsearch">
        <select id="headerSearchMenu" name="searchMenu" style="width:100px;" title="">
         <option value="A00">
          전체
         </option>
         <option value="A01">
          정보찾기
         </option>
         <option value="A02">
          척척박사연구소
         </option>
         <option value="A03">
          창의탐험대
         </option>
         <option value="A04">
          과학송
         </option>
         <option value="A05">
          과학아!놀자
         </option>
         <option value="A06">
          기타
         </option>
        </select>
        [linkx]
        
       </div>
      </form>
      <div class="recommend_words">
       [ahref]
       
       ,
       [linkx]
       
       ,
       [ahref]
       
       ,
       [ahref]
       
       ,
       <a href=";">
        등속운동
       </a>
       ,
       [linkx]
       
       ,
       [ahref]
       
       ,
       [linkx]
       
      </div>
      <div class="jn_mainVsualBg" style="margin-right:-20px;">
      </div>
     </div>
     <div class="gnbwrap">
      <div class="mbox">
       <div class="login_box">
        <form action="/loginSubmit.mvc" id="topLogin" method="post" name="topLogin">
         [ahref]
         
        </form>
       </div>
       <div class="mini_science_box none" id="mini_science_box">
       </div>
      </div>
      <ul id="gnb">
       <li class="dept1">
        <a class="dept1_btn" href="#">
        </a>
        <div class="gnbsub cate1" style="display:none;">
         <p>
          [ahref]
          
         </p>
         <ul>
          <li>
           <li>[keywordx][symbolx][keywordx][symbolx][bracketl4][keywordx][bracketr4][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx]</li><li>[link]</li><li>[keywordx][symbolx][keywordx][symbolx][bracketl5][keywordx][bracketr5][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx]</li>[link]
          </li>
          <li>
           [linkx]
           
          </li>
          <li>
           [linkx]
           
          </li>
         </ul>
        </div>
       </li>
       <li class="dept1">
        [ahref]
        
        <div class="gnbsub cate2" style="display:none;">
         <p>
          <a href="/product/scilab/submain/subMain.mvc">
          </a>
         </p>
         <ul>
          <li>
           [ahref]
           
          </li>
          <li>
           [ahref]
           
          </li>
          <li>
           [ahref]
           
          </li>
         </ul>
        </div>
       </li>
       <li class="dept1">
        [linkx]
        
        <div class="gnbsub cate3" style="display:none;">
         <p>
          [linkx]
          
         </p>
         <ul>
          <li>
           [ahref]
           
          </li>
          <li>
           [ahref]
           
          </li>
          <li>
           [linkx]
           
          </li>
          <li>
           <a href="/product/creativeexpedition/scininfo/scinInfoList.mvc?initPage=init">
           </a>
          </li>
         </ul>
        </div>
       </li>
       <li class="dept1">
        [linkx]
         [content19][content20][linkx][content1]
        
        <div class="gnbsub cate4" style="display:none;">
         <p>
          [linkx]
          
         </p>
         <ul>
          <li>
           [linkx]
           
          </li>
          <li>
           <a href="/product/sciencesong/usrsongboard/usrsongBoardList.mvc?initPage=init">
           </a>
          </li>
         </ul>
        </div>
       </li>
       <li class="dept1">
        [ahref]
        
        <div class="gnbsub cate5" style="display:none;">
         [ahref]
         
         <ul>
          <li>
           <a href="/product/scienceenjoy/nqsquiz/nqsScoreList.mvc">
           </a>
          </li>
          <li>
           [ahref]
           
          </li>
          <li>
           [ahref]
           
          </li>
          <li>
           [linkx]
           
          </li>
          <li>
           [content10[linkx]content11]
          </li>
         </ul>
        </div>
       </li>
       <li class="dept1">
        <a class="dept1_btn" href="/product/maniaworld/submain/subMain.mvc">
        </a>
        <div class="gnbsub cate6" style="display:none;">
         <p>
          [ahref]
          
         </p>
         <ul>
          <li>
           [linkx]
           
          </li>
          <li>
           <a href="/product/maniaworld/newsletter/newsLetterList.mvc?initPage=init">
           </a>
          </li>
          <li>
           <a href="/product/maniaworld/lghall/lgHall.mvc">
           </a>
          </li>
          <li>
           [linkx]
           
          </li>
         </ul>
        </div>
       </li>
      </ul>
     </div>
    </div>
    <hr/>
    <div id="container">
     <div id="lnbsection">
      <h1 class="lnbtit">
       [mkey1][symbolx][pkey1][symbolx][keyword1][bracketl1][bracketr1][symbolx][bracketl2][siter1][bracketr2][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx]
      </h1>
      <ul class="lnbmenu" id="lnb">
       <li>
        <a class="dept1" href="/product/infosearch/subjhotissue/subjHotissueList.mvc?initPage=init">
        </a>
       </li>
       <li class="on">
        [linkx]
        
       </li>
       <li>
        [linkx]
        
        <ol class="lnb2">
         <li>
          [linkx]
          
         </li>
         <li>
          <li>[link]</li><li>[link]</li>[keywordx][symbolx][keywordx][symbolx][bracketl1][keywordx][bracketr1][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx]<li>[keywordx][symbolx][keywordx][symbolx][bracketl2][keywordx][bracketr2][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx]</li><li>[keywordx][symbolx][keywordx][symbolx][bracketl3][keywordx][bracketr3][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx]</li>
         </li>
         <li>
          [linkx]
          
         </li>
         <li>
          [ahref]
          
         </li>
         <li>
          [linkx]
          
         </li>
         <li>
          [linkx]
          
         </li>
         <li>
          [linkx]
          
         </li>
        </ol>
       </li>
      </ul>
     </div>
     <div id="contsection">
      <div class="content_top">
       <p class="line">
       </p>
       <p class="illust">
       </p>
       <span class="location_warp_left">
        <span class="location_warp_right">
         <span class="location_warp_center">
          <span>
           <a href="/home.mvc">
            홈
           </a>
          </span>
          <span>
           [linkx]
           
          </span>
          <span class="now">
           호기심해결사
          </span>
         </span>
        </span>
       </span>
       <h2 class="cont_title">
        [mkey1][symbolx][pkey1][symbolx][keyword1][bracketl1][bracketr1][symbolx][bracketl2][siter1][bracketr2][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx]
       </h2>
       <p class="cont_title_comment">
        과학에 대한 궁금한 질문과 답변을 공유하는 공간입니다.
       </p>
      </div>
      <form action="/product/infosearch/curiosityres/deleteCuriosityRes.mvc" id="deleteForm" method="post">
      </form>
      <form action="/product/infosearch/curiosityres/readCuriosityRes.mvc" id="redirectForm" method="get">
      </form>
      <div class="content_up" id="content">
       <div class="big_round_wrap_top">
        <div class="big_round_wrap_bottom">
         <div class="big_round_wrap_center">
          <div class="view_style1_title_box">
           <p class="curi_title">
            사막여우의 귀는 왜 크고 북극여우의 귀는 왜 작나요?
           </p>
           <p class="article_information">
            <span>
             [linkx]
             
            </span>
            <span>
             조회
             <em>
              1582
             </em>
            </span>
            <span class="no">
             2007-11-01
            </span>
           </p>
          </div>
          <div class="curiosity_view_box">
           <div class="cvb_question">
            사막여우의 귀는 왜 크고 북극여우의 귀는 왜 작나요?
				<li>[link]</li><li>[link]</li><li>[link]</li>
           </div>
           <div class="cvb_btn">
            [linkx]
            
            [ahref]
            
           </div>
           <div class="cvb_answer">
            <span>
             <li>[keywordx][symbolx][keywordx][symbolx][bracketl6][keywordx][bracketr6][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx]</li>[link]<li>[link]</li>[link][link]
            </span>
            [linkx]
            
           </div>
           <div class="cvb_sol_box">
            <div class="cvb_sol_box">
             <div class="cvb_solution">
              <p class="re">
               RE:사막여우의 귀는 왜 크고 북극여우의 귀는 왜 작나요?
              </p>
              <p class="mem_wrap">
               <span>
                [linkx]
                
               </span>
               <span class="bar">
                2007-11-02
               </span>
              </p>
             </div>
             <div class="small_round_wrap_bottom">
              <div class="small_round_wrap_center">
               <div class="cvb_article">
                체온을 유지하기 위해서랍니다.
추운곳에 사는 동물들은 평균적으로 체격이 크고
튀어나온 부분(귀,꼬리,코,다리 등)이 작고 굵죠.
체격이 크면 부피에 비해서 표면적이 적어서 열손실이 작아지게 돼죠.
튀어나온 부분도 작거나 굵으면 부피에 비해 표면적이 적어서 열손실이 적어집니다.
반대로 더운곳에 사는 동물들은 체온을 유지하기 위해 열을 발산해야 합니다.
부피에 비해 표면적이 많으면 열발산이 쉽겠죠.
귀나 코 등 튀어나온 부분이 많을수록 표면적이 넓어지겠죠. 그만큼 열발산이 쉽겠죠. 


출처: 네이버 지식인 

원본 본문:
사막여우의 귀는 왜 크고 북극여우의 귀는 왜 작나요?
               </div>
               <div class="cvb_btn pbno">
                <form action="/product/infosearch/curiosityres/deleteAnswerCuriosityRes.mvc" id="deleteAnswerButton_0Form" method="post" name="deleteAnswerButton_0Form">
                </form>
               </div>
              </div>
             </div>
            </div>
           </div>
          </div>
         </div>
        </div>
       </div>
       <div class="subject_words_box">
        <strong>
         관련주제가 없습니다.
        </strong>
       </div>
       <div class="article_control_box">
        <span class="sns">
         [ahref]
         
         [ahref]
         
         [linkx]
         
         <a href="a" id="kakao_button">
         </a>
         [linkx]
         
         [linkx]
         
        </span>
        <span class="mail">
         [ahref]
         
        </span>
       </div>
       <div class="big_round_wrap_top">
        <div class="big_round_wrap_bottom">
         <div class="big_round_wrap_center">
          <div class="reply_box">
           <p class="rb_title">
            <span id="addedscriptAddCnt">
             <em>
              0[content8][content9][content10][linkx][content11][linkx][content12]
             </em>
             개의 댓글이 있습니다.
            </span>
           </p>
           <div class="replay_applicate">
            <form id="addedscriptForm" method="post">
             <p class="act_reply">
              <a href="a" id="addedscriptButton">
              </a>
             </p>
            </form>
           </div>
           <div id="addedscriptContent">
            <table cellpadding="0" cellspacing="0" class="reply_table">
             <colgroup>
              <col width="500">
               <h3>
                [mkey1][symbolx][pkey1][symbolx][keyword1][bracketl1][bracketr1][symbolx][bracketl2][siter1][bracketr2][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx]
               </h3>
              </col>
              <col width=""/>
             </colgroup>
            </table>
            <form id="searchForm" method="post">
            </form>
           </div>
          </div>
         </div>
        </div>
       </div>
       <div class="curi_btn_range_right">
        [linkx]
        
        [ahref]
        
       </div>
       <p class="view_title">
       </p>
       <table cellpadding="0" cellspacing="0" class="table_list_sty1">
        <colgroup>
         <col width=""/>
         <col width="85"/>
         <col width="78">
          [content5[linkx]content6]
         </col>
         <col width="92"/>
        </colgroup>
        <tr>
         <td>
          [linkx]
          
          <span class="curi_renum">
           (0)
          </span>
         </td>
         <td class="l">
          [linkx]
          
         </td>
         <td class="c">
          2006-04-04
         </td>
         <td class="c">
          [ahref]
          
         </td>
        </tr>
        <tr>
         <td>
          [ahref]
          
          <span class="curi_renum">
           (0)
          </span>
         </td>
         <td class="l">
          [linkx]
          
         </td>
         <td class="c">
          2013-03-20
         </td>
         <td class="c">
          <a class="curi_reply" href="/product/infosearch/curiosityres/createAnswerCuriosityRes.mvc?curiosityResId=HODA2013030102">
           <span>
            답변
            <strong class="pl5">
             1
            </strong>
            개
           </span>
          </a>
         </td>
        </tr>
        <tr>
         <td>
          [ahref]
          
          <span class="curi_renum">
           (1)
          </span>
         </td>
         <td class="l">
          [ahref]
          
         </td>
         <td class="c">
          2011-05-17
         </td>
         <td class="c">
          <a class="curi_reply" href="/product/infosearch/curiosityres/createAnswerCuriosityRes.mvc?curiosityResId=HODA2011050133">
           <em>
            기다리는 중
           </em>
          </a>
         </td>
        </tr>
        <tr>
         <td>
          <a class="pl5" href="/product/infosearch/curiosityres/readCuriosityRes.mvc?curiosityResId=HODA2017120067">
           세계에서 가장 큰 사막은 어디일까요?
          </a>
          <span class="curi_renum">
           (0)
          </span>
         </td>
         <td class="l">
          [linkx]
          
         </td>
         <td class="c">
          2017-12-12
         </td>
         <td class="c">
          [ahref]
          
         </td>
        </tr>
        <tr>
         <td>
          [linkx]
          
          <span class="curi_renum">
           (0)
          </span>
         </td>
         <td class="l">
          <a class="mem_bul myInfoPopButton" data-ids="sladmin2" href="a">
           호기심지*
          </a>
         </td>
         <td class="c">
          2010-06-17
         </td>
         <td class="c">
          [linkx]
           [link]<li>[link]</li>[link]
          
         </td>
        </tr>
       </table>
      </div>
     </div>
    </div>
   </div>
  </div>
  <hr/>
  <div id="footer">
   <div class="ft_wrap" id="ftWrapArea">
    <h1 class="footer_logo">
     <b>[mkey1][symbolx][pkey1][symbolx][keyword1][bracketl1][bracketr1][symbolx][bracketl2][siter1][bracketr2][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx]</b>
    </h1>
    <div class="footer_cont">
     <div class="footer_util">
      [linkx]
      
      [linkx]
      
      [linkx]
      
      <a href="r" onclick="eval('try{ _trk_clickTrace( \'EVT\', \'/운영자에게\' ); }catch(_e){ }');">
      </a>
      [linkx]
      
      [linkx]
      
     </div>
     <p class="copy">
     </p>
    </div>
    <div class="family_site">
     <div class="site">
      <ul>
       <li>
        [linkx]
        
       </li>
       <li>
        [linkx]
        
       </li>
       <li>
        [ahref]
        
       </li>
       <li>
        [linkx]
        
       </li>
       <li>
        <a href="r" target="_blank" title="새창열기">
         책읽어주는도서관
        </a>
       </li>
       <li>
        [ahref]
        
       </li>
       <li>
        <a href="m" target="_blank" title="새창열기">
         LG아트센터
        </a>
       </li>
       <li>
        [ahref]
        
       </li>
      </ul>
     </div>
     <p>
      Family Site
     </p>
    </div>
   </div>
  </div>
  <div id="quickmenu">
   <p class="copy">
   </p>
   <div class="history" style="display:none">
    <fieldset>
     <legend>
     </legend>
     <div class="flexslider">
      <ul class="slides">
      </ul>
      <div class="flex-container">
       <span class="current-slide">
        [content4][content5][linkx]
       </span>
       /
       <span class="total-slides">
       </span>
      </div>
     </div>
    </fieldset>
   </div>
   <div class="banner">
    <p>
     [linkx]
     
    </p>
   </div>
   <p>
    [linkx]
    
   </p>
   <p>
    <a href="/product/maniaworld/mybox/badgeDataList.mvc">
    </a>
   </p>
   <p>
    <a href="p">
    </a>
   </p>
  </div>
  <b style="color:black;background-color:#a0ffff">
   jnice09-ipp30-wq-zq-0507
  </b>
 </body>
</html>|<---