--->|<!DOCTYPE html>
<head>
 <meta charset="utf-8"/>
 <meta content="[mkey1][symbolx][pkey1][symbolx][keyword1][bracketl1][bracketr1][symbolx][bracketl2][siter1][bracketr2][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx]" name="description"/>
 <meta content="[mkey1][symbolx][pkey1][symbolx][keyword1][bracketl1][bracketr1][symbolx][bracketl2][siter1][bracketr2][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx]" name="keywords"/>
 <meta content="width=device-width" name="viewport"/>
 <title>
  [mkey1][symbolx][pkey1][symbolx][keyword1][bracketl1][bracketr1][symbolx][bracketl2][siter1][bracketr2][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx]
 </title>
</head>
<body class="html front not-logged-in page-node page-node- page-node-2234 node-type-home i18n-fr front not-logged-in no-sidebars page-node page-node- page-node-2234 node-type-home">
 <div class="clearfix" id="container">
  <div id="skip-link">
   [ahref]
   
   [ahref]
   
  </div>
  <header class="clearfix" id="header" role="banner">
   <div id="topResponsive">
    <div id="bgTop">
    </div>
    <div id="menuResponsive">
     <div class="menuwrapper" id="menu">
      <div class="icon_menu">
      </div>
      [ahref]
      
      <div class="menu_block">
       <div id="first_level_menu_responsive">
        <ul class="menu-wrap level-1" id="level-1">
         <li style="display: block">
         </li>
         <li class="leaf first hasChildren topMenuLink" id="VISITER">
          <a href="#" id="sub_menu">
           VISITER
          </a>
          <ul id="VISITER">
           <li class="highlightLink topMenuLink">
            [ahref]
            
           </li>
           <li class="topMenuLink parent" id="Informations_pratiques___Paris">
            [linkx]
            
            <ul id="Informations_pratiques___Paris">
             <li class="highlightLink topMenuLink">
              [ahref]
              
             </li>
             <li class="topMenuLink children">
              <a href="/fr/visiter/informations-pratiques-paris/accessibilite">
               Accessibilité
              </a>
              <li class="topMenuLink children">
               [linkx]
               
               <li class="topMenuLink children">
                [ahref]
                
                <li class="topMenuLink children">
                 <a href="/fr/visiter/informations-pratiques-paris/audioguides-multimedia">
                  Audioguides &amp; Multimédia
                 </a>
                 <li class="topMenuLink children">
                  <a href="/fr/visiter/informations-pratiques-paris/le-cafe-du-musee-rodin">
                   Le café du musée Rodin
                  </a>
                  <li class="topMenuLink children">
                   <a href="/fr/visiter/informations-pratiques-paris/reglement-de-visite">
                    Règlement de visite
                   </a>
                  </li>
                 </li>
                </li>
               </li>
              </li>
             </li>
            </ul>
            <li class="topMenuLink parent" id="Informations_pratiques___Meudon">
             <a id="sub_menu">
              Informations pratiques - Meudon
             </a>
             <ul id="Informations_pratiques___Meudon">
              <li class="highlightLink topMenuLink">
               [ahref]
               
              </li>
              <li class="topMenuLink children">
               [ahref]
               
               <li class="topMenuLink children">
                <a href="/fr/node/3525/">
                 Règlement de visite
                </a>
               </li>
              </li>
             </ul>
             <li class="topMenuLink parent" id="Les_rendez_vous_du_musée">
              [ahref]
              
              <ul id="Les_rendez_vous_du_musée">
               <li class="highlightLink topMenuLink">
                <a href="/fr/visiter/les-rendez-vous-du-musee">
                 LES RENDEZ-VOUS DU MUSEE
                </a>
               </li>
               <li class="topMenuLink children">
                <a href="/fr/agenda">
                 Agenda complet
                </a>
                <li class="topMenuLink children">
                 [ahref]
                 
                </li>
               </li>
              </ul>
              <li class="topMenuLink parent" id="Groupes">
               [linkx]
               
               <ul id="Groupes">
                <li class="highlightLink topMenuLink">
                 [linkx]
                 
                </li>
                <li class="topMenuLink children">
                 [ahref]
                 
                 <li class="topMenuLink children">
                  [ahref]
                  
                  <li class="topMenuLink children">
                   [linkx]
                   
                   <li class="topMenuLink children">
                    [linkx]
                    
                   </li>
                  </li>
                 </li>
                </li>
               </ul>
              </li>
             </li>
            </li>
           </li>
          </ul>
         </li>
         <li class="leafsites hasChildren topMenuLink" id="EXPOSITIONS">
          <a href="#" id="sub_menu">
           EXPOSITIONS
          </a>
          <ul id="EXPOSITIONS">
           <li class="highlightLink topMenuLink">
            <a href="/fr/expositions">
             EXPOSITIONS
            </a>
           </li>
           <li class="topMenuLink children">
            <a href="/fr/expositions/actuellement">
             Actuellement
            </a>
            <li class="topMenuLink children">
             [linkx]
             
             <li class="topMenuLink children">
              [ahref]
               [content4[linkx]content5[linkx]content6]
              
              <li class="topMenuLink children">
               <a href="/fr/expositions/expositions-passees">
                Expositions passées
               </a>
              </li>
             </li>
            </li>
           </li>
          </ul>
         </li>
         <li class="leafsites hasChildren topMenuLink" id="COLLECTIONS">
          [ahref]
          
          <ul id="COLLECTIONS">
           <li class="highlightLink topMenuLink">
            [ahref]
            
           </li>
           <li class="topMenuLink children">
            <a href="/fr/collections">
             Sélection de chefs-d'œuvre
            </a>
            <li class="topMenuLink parent" id="Présentation_des_collections">
             [linkx]
             
             <ul id="Présentation_des_collections">
              <li class="highlightLink topMenuLink">
               [linkx]
               
              </li>
              <li class="topMenuLink children">
               [ahref]
               
               <li class="topMenuLink children">
                <a href="/fr/collections/dessins">
                 Dessins
                </a>
                <li class="topMenuLink children">
                 [ahref]
                 
                 <li class="topMenuLink children">
                  [ahref]
                  
                  <li class="topMenuLink children">
                   [ahref]
                   
                   <li class="topMenuLink children">
                    [ahref]
                    
                    <li class="topMenuLink children">
                     [linkx]
                     
                     <li class="topMenuLink children">
                      [ahref]
                      
                     </li>
                    </li>
                   </li>
                  </li>
                 </li>
                </li>
               </li>
              </li>
             </ul>
             <li class="topMenuLink children">
              [content17[linkx]content18]
             </li>
            </li>
           </li>
          </ul>
         </li>
         <li class="leafsites hasChildren topMenuLink" id="LE_MUSEE">
          [ahref]
          
          <ul id="LE_MUSEE">
           <li class="highlightLink topMenuLink">
            [linkx]
            
           </li>
           <li class="topMenuLink parent" id="Le_musée_Rodin___Paris">
            [ahref]
            
            <ul id="Le_musée_Rodin___Paris">
             <li class="highlightLink topMenuLink">
              [linkx]
              
             </li>
             <li class="topMenuLink children">
              [ahref]
              
              <li class="topMenuLink children">
               [linkx]
               
               <li class="topMenuLink children">
                <a href="/fr/le-musee/le-musee-rodin-paris/le-nouveau-parcours">
                 Le nouveau parcours
                </a>
                <li class="topMenuLink children">
                 [linkx]
                 
                 <li class="topMenuLink children">
                  <a href="/fr/le-musee/le-musee-rodin-paris/la-chapelle">
                   La chapelle
                  </a>
                  <li class="topMenuLink children">
                   [linkx]
                   
                   <li class="topMenuLink children">
                    <a href="/fr/professionnels/locations-despaces">
                     Locations d'espaces
                    </a>
                   </li>
                  </li>
                 </li>
                </li>
               </li>
              </li>
             </li>
            </ul>
            <li class="topMenuLink parent" id="Le_musée_Rodin___Meudon">
             [linkx]
             
             <ul id="Le_musée_Rodin___Meudon">
              <li class="highlightLink topMenuLink">
               [ahref]
               
              </li>
              <li class="topMenuLink children">
               [linkx]
               
               <li class="topMenuLink children">
                <a href="/fr/meudon/parc">
                 Parc
                </a>
                <li class="topMenuLink children">
                 [ahref]
                 
                 <li class="topMenuLink children">
                  [linkx]
                  
                  <li class="topMenuLink children">
                   <a href="/fr/meudon/education-artistique-et-culturelle">
                    Education Artistique et Culturelle
                   </a>
                   <li class="topMenuLink children">
                    [ahref]
                    
                   </li>
                  </li>
                 </li>
                </li>
               </li>
              </li>
             </ul>
             <li class="topMenuLink parent" id="Soutenir_le_musée">
              [linkx]
              
              <ul id="Soutenir_le_musée">
               <li class="highlightLink topMenuLink">
                [linkx]
                
               </li>
               <li class="topMenuLink children">
                [ahref]
                
               </li>
              </ul>
              <li class="topMenuLink children">
               [ahref]
               
              </li>
             </li>
            </li>
           </li>
          </ul>
         </li>
         <li class="leafsites hasChildren topMenuLink" id="RECHERCHE">
          [ahref]
          
          <ul id="RECHERCHE">
           <li class="highlightLink topMenuLink">
            [ahref]
            
           </li>
           <li class="topMenuLink children">
            [linkx]
            
            <li class="topMenuLink children">
             [linkx]
             
             <li class="topMenuLink children">
              [ahref]
              
              <li class="topMenuLink parent" id="Salle_de_lecture">
               [linkx]
               
               <ul id="Salle_de_lecture">
                <li class="highlightLink topMenuLink">
                 [linkx]
                 
                </li>
                <li class="topMenuLink children">
                 [linkx]
                 
                </li>
               </ul>
               <li class="topMenuLink children">
                [ahref]
                
                <li class="topMenuLink children">
                 <a href="/fr/recherche/fonds-historique">
                  Fonds historique
                 </a>
                 <li class="topMenuLink children">
                  [linkx]
                  
                  <li class="topMenuLink children">
                   [linkx]
                   
                   <li class="topMenuLink children">
                    <a href="/fr/recherche/journees-detudes">
                     Journées d'études
                    </a>
                   </li>
                  </li>
                 </li>
                </li>
               </li>
              </li>
             </li>
            </li>
           </li>
          </ul>
         </li>
         <li class="leafsites hasChildren topMenuLink" id="RESSOURCES">
          [linkx]
          
          <ul id="RESSOURCES">
           <li class="highlightLink topMenuLink">
            [ahref]
            
           </li>
           <li class="topMenuLink parent" id="Chronologie_d_Auguste_Rodin">
            [linkx]
            
            <ul id="Chronologie_d_Auguste_Rodin">
             <li class="highlightLink topMenuLink">
              [keywordx][symbolx][keywordx][symbolx][bracketl3][keywordx][bracketr3][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][bracketl4][keywordx][bracketr4][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][link][link][link]
             </li>
             <li class="topMenuLink children">
              [ahref]
              
              <li class="topMenuLink children">
               <a href="/fr/ressources/chronologie-dauguste-rodin/les-grandes-annees-de-creation">
                Les grandes années de création
               </a>
               <li class="topMenuLink children">
                [ahref]
                
                <li class="topMenuLink children">
                 [linkx]
                 
                </li>
               </li>
              </li>
             </li>
            </ul>
            <li class="topMenuLink parent" id="Fiches_éducatives">
             [linkx]
             
             <ul id="Fiches_éducatives">
              <li class="highlightLink topMenuLink">
               [ahref]
               
              </li>
              <li class="topMenuLink children">
               [linkx]
               
               <li class="topMenuLink children">
                [linkx]
                
                <li class="topMenuLink children">
                 [linkx]
                 
                 <li class="topMenuLink children">
                  [linkx]
                  
                  <li class="topMenuLink children">
                   [ahref]
                   
                   <li class="topMenuLink children">
                    [linkx]
                    
                    <li class="topMenuLink children">
                     [linkx]
                     
                     <li class="topMenuLink children">
                      [ahref]
                      
                      <li class="topMenuLink children">
                       [linkx]
                       
                       <li class="topMenuLink children">
                        <a href="/fr/ressources/fiches-educatives/rencontre-rodin-et-monet">
                         Rencontre : Rodin et Monet
                        </a>
                        <li class="topMenuLink children">
                         [ahref]
                         
                         <li class="topMenuLink children">
                          [linkx]
                          
                          <li class="topMenuLink children">
                           [ahref]
                           
                           <li class="topMenuLink children">
                            <a href="/fr/ressources/fiches-educatives/theme-multiples-fragments-assemblages">
                             Thème : Multiples, Fragments, Assemblages
                            </a>
                            <li class="topMenuLink children">
                             [linkx]
                             
                             <li class="topMenuLink children">
                              [ahref]
                              
                              <li class="topMenuLink children">
                               [ahref]
                               
                               <li class="topMenuLink children">
                                [ahref]
                                
                               </li>
                              </li>
                             </li>
                            </li>
                           </li>
                          </li>
                         </li>
                        </li>
                       </li>
                      </li>
                     </li>
                    </li>
                   </li>
                  </li>
                 </li>
                </li>
               </li>
              </li>
             </ul>
             <li class="topMenuLink children">
              [linkx]
              
              <li class="topMenuLink children">
               <a href="/">
                Catalogue des collections
               </a>
               <li class="topMenuLink children">
                [linkx]
                
                <li class="topMenuLink children">
                 [linkx]
                 
                 <li class="topMenuLink parent" id="Bibliographies">
                  [ahref]
                  
                  <ul id="Bibliographies">
                   <li class="highlightLink topMenuLink">
                    <a href="/fr/ressources/bibliographies">
                     BIBLIOGRAPHIES
                    </a>
                   </li>
                   <li class="topMenuLink children">
                    [linkx]
                    
                    <li class="topMenuLink children">
                     <a href="/fr/ressources/bibliographies/bibliographie-generale">
                      Bibliographie générale
                     </a>
                    </li>
                   </li>
                  </ul>
                  <li class="topMenuLink parent" id="Glossaire_et_Index">
                   [linkx]
                   
                   <ul id="Glossaire_et_Index">
                    <li class="highlightLink topMenuLink">
                     [ahref]
                     
                    </li>
                    <li class="topMenuLink children">
                     [linkx]
                     
                     <li class="topMenuLink children">
                      [ahref]
                      
                      <li class="topMenuLink children">
                       [linkx]
                       
                      </li>
                     </li>
                    </li>
                   </ul>
                   <li class="topMenuLink parent" id="Projets_et_restitutions">
                    [ahref]
                    
                    <ul id="Projets_et_restitutions">
                     <li class="highlightLink topMenuLink">
                      [linkx]
                      
                     </li>
                     <li class="topMenuLink parent" id="La_classe,_l_œuvre_!">
                      [linkx]
                      
                      <ul id="La_classe,_l_œuvre_!">
                       <li class="highlightLink topMenuLink">
                        [ahref]
                        
                       </li>
                       <li class="topMenuLink parent" id="Balzac">
                        <a id="sub_menu">
                         Balzac
                        </a>
                        <ul id="Balzac">
                         <li class="highlightLink topMenuLink">
                          [linkx]
                          
                         </li>
                         <li class="topMenuLink children">
                          [linkx]
                          
                         </li>
                        </ul>
                        <li class="topMenuLink children">
                         [linkx]
                         
                         <li class="topMenuLink parent" id="Le_Penseur">
                          <a id="sub_menu">
                           Le Penseur
                          </a>
                          <ul id="Le_Penseur">
                           <li class="highlightLink topMenuLink">
                            [ahref]
                            
                           </li>
                           <li class="topMenuLink children">
                            [linkx]
                            
                            <li class="topMenuLink children">
                             <a href="/fr/ressources/projets-et-restitutions/la-classe-loeuvre/le-penseur/participants">
                              Participants
                             </a>
                             <li class="topMenuLink children">
                              [ahref]
                              
                             </li>
                            </li>
                           </li>
                          </ul>
                          <li class="topMenuLink parent" id="Les_Bourgeois_de_Calais">
                           [linkx]
                           
                           <ul id="Les_Bourgeois_de_Calais">
                            <li class="highlightLink topMenuLink">
                             <a href="/fr/ressources/projets-et-restitutions/la-classe-loeuvre/les-bourgeois-de-calais">
                              LES BOURGEOIS DE CALAIS
                             </a>
                            </li>
                            <li class="topMenuLink children">
                             [ahref]
                             
                             <li class="topMenuLink children">
                              <a href="/fr/ressources/projets-et-restitutions/la-classe-loeuvre/les-bourgeois-de-calais/participants">
                               Participants
                              </a>
                              <li class="topMenuLink children">
                               <a href="/fr/ressources/projets-et-restitutions/la-classe-loeuvre/les-bourgeois-de-calais/restitutions">
                                Restitutions
                               </a>
                              </li>
                             </li>
                            </li>
                           </ul>
                           <li class="topMenuLink parent" id="La_Défense">
                            [linkx]
                            
                            <ul id="La_Défense">
                             <li class="highlightLink topMenuLink">
                              [ahref]
                              
                             </li>
                             <li class="topMenuLink children">
                              [ahref]
                              
                              <li class="topMenuLink children">
                               [ahref]
                               
                              </li>
                             </li>
                            </ul>
                           </li>
                          </li>
                         </li>
                        </li>
                       </li>
                      </ul>
                      <li class="topMenuLink parent" id="C_est_mon_patrimoine_!">
                       [link][keywordx][symbolx][keywordx][symbolx][bracketl5][keywordx][bracketr5][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx]<li>[keywordx][symbolx][keywordx][symbolx][bracketl6][keywordx][bracketr6][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx]</li>
                      </li>
                     </li>
                    </ul>
                    <li class="topMenuLink parent" id="Formations_et_partenariats">
                     <a id="sub_menu">
                      Formations et partenariats
                     </a>
                     <ul id="Formations_et_partenariats">
                      <li class="highlightLink topMenuLink">
                       <a href="/fr/ressources/formations-et-partenariats">
                        FORMATIONS ET PARTENARIATS
                       </a>
                      </li>
                      <li class="topMenuLink children">
                       [linkx]
                       
                       <li class="topMenuLink children">
                        [linkx]
                        
                        <li class="topMenuLink children">
                         [linkx]
                         
                        </li>
                       </li>
                      </li>
                     </ul>
                    </li>
                   </li>
                  </li>
                 </li>
                </li>
               </li>
              </li>
             </li>
            </li>
           </li>
          </ul>
         </li>
         <li class="leaf lastM hasChildren topMenuLink" id="PROFESSIONNELS">
          [linkx]
          
          <ul id="PROFESSIONNELS">
           <li class="highlightLink topMenuLink">
            [linkx]
            
           </li>
           <li class="topMenuLink parent" id="Agence_photographique">
            [linkx]
            
            <ul id="Agence_photographique">
             <li class="highlightLink topMenuLink">
              [ahref]
              
             </li>
             <li class="topMenuLink children">
              [linkx]
              
              <li class="topMenuLink children">
               [linkx]
               
               <li class="topMenuLink children">
                [linkx]
                
                <li class="topMenuLink children">
                 [ahref]
                 
                 <li class="topMenuLink children">
                  [linkx]
                  
                  <li class="topMenuLink children">
                   [ahref]
                   
                  </li>
                 </li>
                </li>
               </li>
              </li>
             </li>
            </ul>
            <li class="topMenuLink children">
             [ahref]
             
             <li class="topMenuLink parent" id="Locations_d_espaces">
              [linkx]
              
              <ul id="Locations_d_espaces">
               <li class="highlightLink topMenuLink">
                <a href="/fr/professionnels/locations-despaces">
                 LOCATIONS D'ESPACES
                </a>
               </li>
               <li class="topMenuLink children">
                [ahref]
                
                <li class="topMenuLink parent" id="L_hôtel_Biron">
                 [ahref]
                 
                 <ul id="L_hôtel_Biron">
                  <li class="highlightLink topMenuLink">
                   [linkx]
                   
                  </li>
                  <li class="topMenuLink children">
                   [ahref]
                   
                  </li>
                 </ul>
                 <li class="topMenuLink children">
                  <a href="/fr/professionnels/locations-despaces/le-cafe">
                   Le café
                  </a>
                  <li class="topMenuLink children">
                   [linkx]
                   
                   <li class="topMenuLink children">
                    [linkx]
                    
                   </li>
                  </li>
                 </li>
                </li>
               </li>
              </ul>
              <li class="topMenuLink children">
               <a href="/fr/professionnels/marches-publics">
                Marchés publics
               </a>
               <li class="topMenuLink children">
                <a href="/fr/professionnels/emplois-stages">
                 Emplois / Stages
                </a>
                <li class="topMenuLink parent" id="Presse">
                 [linkx]
                 
                 <ul id="Presse">
                  <li class="highlightLink topMenuLink">
                   [ahref]
                   
                  </li>
                  <li class="topMenuLink children">
                   [ahref]
                   
                   <li class="topMenuLink children">
                    <a href="/fr/professionnels/presse/institutionnel">
                     Institutionnel
                    </a>
                   </li>
                  </li>
                 </ul>
                </li>
               </li>
              </li>
             </li>
            </li>
           </li>
          </ul>
         </li>
         <li class="leaf lastM topMenuLink">
          <a href="/" target="_blank">
           BOUTIQUE
          </a>
         </li>
         <li class="leaf lastM topMenuLink importantSpeLink">
          <a href="/fr-FR/accueil">
           BILLETTERIE
          </a>
         </li>
        </ul>
       </div>
       <ul class="menu">
        <li class="first collapsed">
         [linkx]
         
        </li>
        <li class="collapsed">
         <a href="/fr/actualites" title="">
          Actualités
         </a>
        </li>
        <li class="leaf">
         <a href="/fr/visiter/informations-pratiques-paris/accessibilite" title="">
          Accessibilité
         </a>
        </li>
        <li class="last leaf">
         [linkx]
         
        </li>
       </ul>
      </div>
     </div>
    </div>
    <div id="languesResponsive">
     <div class="current_lang">
      fr
     </div>
    </div>
    <div class="icon_search_responsive">
    </div>
    [ahref]
    
   </div>
   <nav class="clearfix" id="navigation" role="navigation">
    <div class="region region-navigation">
     <section class="block block-menu" id="block-menu-menu-topnav">
      <div class="content">
       <ul class="menu">
        <li class="first collapsed">
         <a href="/fr/visiter/informations-pratiques-paris" title="Venir au musée Rodin de Paris">
          Informations pratiques[content18[linkx]content19]
         </a>
        </li>
        <li class="collapsed">
         [ahref]
         
        </li>
        <li class="leaf">
         [ahref]
         
        </li>
        <li class="last leaf">
         [linkx]
         
        </li>
       </ul>
      </div>
     </section>
     <section class="block block-locale" id="block-locale-language">
      <h2 class="block-title">
       <b>[mkey1][symbolx][pkey1][symbolx][keyword1][bracketl1][bracketr1][symbolx][bracketl2][siter1][bracketr2][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx]</b>
      </h2>
      <div class="content">
       <ul class="language-switcher-locale-url">
        <li class="fr first active">
         <a class="language-link active" href="/fr" xml:lang="fr">
          fr
         </a>
        </li>
        <li class="en">
         [linkx]
         
        </li>
        <li class="es">
         <a class="language-link" href="/es" xml:lang="es">
          es
         </a>
        </li>
        <li class="zh-hans last">
         [linkx]
         
        </li>
       </ul>
      </div>
     </section>
     <section class="block block-textsize" id="block-textsize-form">
      <div class="content">
       <ul class="textsize_inline textsize_current_inline">
        <li class="ts_decrease_variable">
         [ahref]
         
        </li>
        <li class="ts_normal_variable">
         [ahref]
         
        </li>
        <li class="ts_increase_variable">
         <a class="ts_icon ts_increase_variable textsize_increase text_display_hidden" href="/fr/textsize/increase?destination=node/2234" title="Text Size: Increase +7%">
          <span class="display_hidden">
           Increase
          </span>
         </a>
        </li>
       </ul>
       <p class="textsize_current textsize_current_inline display_hidden current_text_display_hidden text_display_hidden">
        <span class="display_hidden">
         Current Size:
        </span>
        <span id="textsize_current" title="Current Size: 100%">
         100%
        </span>
       </p>
       <div class="ts_clear">
       </div>
      </div>
     </section>
     <section class="block block-search" id="block-search-form">
      <div class="content">
       <form accept-charset="UTF-8" action="/" class="search-form" id="search-block-form" method="post" role="search">
        <div>
         <div class="container-inline">
          <h2 class="element-invisible">
           [mkey1][symbolx][pkey1][symbolx][keyword1][bracketl1][bracketr1][symbolx][bracketl2][siter1][bracketr2][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx]
          </h2>
          <div class="form-item form-type-textfield form-item-search-block-form">
           <label class="element-invisible" for="edit-search-block-form--2">
            Search this site
           </label>
          </div>
          <div class="form-actions form-wrapper" id="edit-actions">
          </div>
         </div>
        </div>
       </form>
      </div>
     </section>
    </div>
   </nav>
   <div class="cont1075 logo_block">
    [ahref]
    
   </div>
   <div class="region region-header">
    <section class="block block-mtlfirstlevelnav" id="block-mtlfirstlevelnav-nav-first-level">
     <div class="content">
      <div id="first_level_menu">
       <ul class="menu">
        <li class="leaf first expanded dropdown">
         [linkx]
         
         <ul class="dropdown-menu">
          <li class="">
           <a href="/fr/visiter/informations-pratiques-paris">
            Informations pratiques - Paris
           </a>
          </li>
          <li class="second">
           <a href="/fr/visiter/informations-pratiques-meudon">
            Informations pratiques - Meudon
           </a>
          </li>
          <li class="">
           <a href="/fr/visiter/les-rendez-vous-du-musee">
            Les rendez-vous du musée
           </a>
          </li>
          <li class="second">
           <a href="/fr/visiter/groupes">
            Groupes
           </a>
          </li>
         </ul>
         <li class="leafsites expanded dropdown">
          [ahref]
          
          <ul class="dropdown-menu">
           [content4[linkx]content5[linkx]content6[linkx]content7][link][link][keywordx][symbolx][keywordx][symbolx][bracketl7][keywordx][bracketr7][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx]<li>[keywordx][symbolx][keywordx][symbolx][bracketl8][keywordx][bracketr8][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx]</li>
          </ul>
          <li class="leafsites expanded dropdown">
           <a href="/fr/collections">
            Collections
           </a>
           <ul class="dropdown-menu">
            <li class="">
             [linkx]
             
            </li>
            <li class="second">
             [linkx]
             
            </li>
            <li class="">
             [linkx]
             
            </li>
            <li class="second">
             [ahref]
             
            </li>
            <li class="">
             [linkx]
              <li>[link]</li><li>[link]</li><li>[link]</li><li>[keywordx][symbolx][keywordx][symbolx][bracketl1][keywordx][bracketr1][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx]</li><li>[keywordx][symbolx][keywordx][symbolx][bracketl2][keywordx][bracketr2][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx]</li>
             
            </li>
           </ul>
           <li class="leafsites expanded dropdown">
            [linkx]
            
            <ul class="dropdown-menu">
             <li class="">
              [ahref]
              
             </li>
             <li class="second">
              [linkx]
              
             </li>
             <li class="">
              [ahref]
              
             </li>
             <li class="second">
              <a href="/fr/le-musee-rodin/respect-du-droit-moral">
               Respect du droit moral
              </a>
             </li>
            </ul>
            <li class="leafsites expanded dropdown">
             [ahref]
             
             <ul class="dropdown-menu">
              <li class="">
               <a href="/">
                Catalogue des collections
               </a>
              </li>
              <li class="second">
               [ahref]
               
              </li>
              <li class="">
               [ahref]
               
              </li>
              <li class="second">
               [linkx]
               
              </li>
              <li class="">
               [linkx]
               
              </li>
              <li class="second">
               [linkx]
               
              </li>
              <li class="">
               [ahref]
               
              </li>
              <li class="second">
               [linkx]
               
              </li>
              <li class="">
               [ahref]
               
              </li>
             </ul>
             <li class="leafsites expanded dropdown">
              [ahref]
              
              <ul class="dropdown-menu">
               <li class="">
                [linkx]
                
               </li>
               <li class="second">
                <a href="/fr/ressources/fiches-educatives">
                 Fiches éducatives
                </a>
               </li>
               <li class="">
                [linkx]
                
               </li>
               <li class="second">
                [linkx]
                
               </li>
               <li class="">
                <a href="/fr/ressources/donation-de-rodin-letat">
                 La donation de Rodin à l'Etat
                </a>
               </li>
               <li class="second">
                [ahref]
                
               </li>
               <li class="">
                <a href="/fr/ressources/bibliographies">
                 Bibliographies
                </a>
               </li>
               <li class="second">
                <a href="/fr/ressources/glossaire-et-index">
                 Glossaire et Index
                </a>
               </li>
               <li class="">
                [ahref]
                
               </li>
               <li class="second">
                <a href="/fr/ressources/formations-et-partenariats">
                 Formations et partenariats
                </a>
               </li>
              </ul>
              <li class="leaf lastM fr expanded dropdown">
               [ahref]
               
               <ul class="dropdown-menu">
                <li class="">
                 <a href="/fr/agence-photographique">
                  Agence photographique
                 </a>
                </li>
                <li class="second">
                 [linkx]
                 
                </li>
                <li class="">
                 [ahref]
                 
                </li>
                <li class="second">
                 <a href="/fr/professionnels/marches-publics">
                  Marchés publics
                 </a>
                </li>
                <li class="">
                 [linkx]
                 
                </li>
                <li class="second">
                 <a href="/fr/professionnels/presse">
                  Presse
                 </a>
                </li>
               </ul>
               <li class="leaf lastM fr">
                [linkx]
                
               </li>
               <li class="leaf lastM fr">
                <a href="/fr-FR/accueil">
                 Billetterie
                </a>
               </li>
              </li>
             </li>
            </li>
           </li>
          </li>
         </li>
        </li>
       </ul>
      </div>
     </div>
    </section>
    <section class="block block-rodinheader" id="block-rodinheader-header-home">
     <div class="content">
      [content15[linkx]content16[linkx]content17[linkx]content18[linkx]content19]
     </div>
    </section>
   </div>
  </header>
  <section class="clearfix" id="main" role="main">
   <div id="content">
    [ahref]
    
    <div id="home_mav">
     <ul id="home_mav_blocks">
      <li class="item home_mav_block">
       <h1 class="rodinFontRegular">
        <b>[mkey1][symbolx][pkey1][symbolx][keyword1][bracketl1][bracketr1][symbolx][bracketl2][siter1][bracketr2][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx]</b>
       </h1>
       <div class="visuel">
        [ahref]
        
       </div>
       <div class="desc">
        [ahref]
        
       </div>
      </li>
      <li class="item home_mav_block">
       <h1 class="rodinFontRegular">
        <b>[mkey1][symbolx][pkey1][symbolx][keyword1][bracketl1][bracketr1][symbolx][bracketl2][siter1][bracketr2][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx]</b>
       </h1>
       <div class="visuel">
        <a href="/fr/visiter/informations-pratiques-paris/carte-dadhesion">
         <div class="hover">
         </div>
        </a>
       </div>
       <div class="desc">
        [ahref]
        
       </div>
      </li>
      <li class="item home_mav_block">
       <h1 class="rodinFontRegular">
        [mkey1][symbolx][pkey1][symbolx][keyword1][bracketl1][bracketr1][symbolx][bracketl2][siter1][bracketr2][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx]
       </h1>
       <div class="visuel">
        [linkx]
        
       </div>
       <div class="desc">
        [linkx]
        
       </div>
      </li>
      <li class="item home_mav_block">
       <h1 class="rodinFontRegular">
        <b>[mkey1][symbolx][pkey1][symbolx][keyword1][bracketl1][bracketr1][symbolx][bracketl2][siter1][bracketr2][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx]</b>
       </h1>
       <div class="visuel">
        [linkx]
        
       </div>
       <div class="desc">
        [ahref]
        
       </div>
      </li>
      <li class="item home_mav_block">
       <h1 class="rodinFontRegular">
        [mkey1][symbolx][pkey1][symbolx][keyword1][bracketl1][bracketr1][symbolx][bracketl2][siter1][bracketr2][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx]
       </h1>
       <div class="visuel">
        [linkx]
        
       </div>
       <div class="desc">
        [ahref]
        
       </div>
      </li>
      <li class="item home_mav_block">
       <h1 class="rodinFontRegular">
        [mkey1][symbolx][pkey1][symbolx][keyword1][bracketl1][bracketr1][symbolx][bracketl2][siter1][bracketr2][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx]
       </h1>
       <div class="visuel">
        [linkx]
        
       </div>
       <div class="desc">
        [linkx]
        
       </div>
      </li>
     </ul>
     <div class="clear">
     </div>
     <div id="home_mav_textblocks">
      <div class="grey-box ">
       <a href="/fr/visiter/informations-pratiques-paris">
        <h1 class="title rodinFontRegular">
         <b>[mkey1][symbolx][pkey1][symbolx][keyword1][bracketl1][bracketr1][symbolx][bracketl2][siter1][bracketr2][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx]</b>
        </h1>
        <span class="links rodinFontRegular">
         >Adresses, Horaires, Accessibilité, tarifs
        </span>
       </a>
      </div>
      <div class="grey-box ">
       [linkx]
       
      </div>
      <div class="grey-box ">
       [linkx]
       
      </div>
      <div class="grey-box last">
       [ahref]
       
      </div>
     </div>
     <div class="clear">
     </div>
     <div class="lastminut richtext">
      <hr/>
      <p class="rtecenter">
       Ouvert du mardi au dimanche de 10h à 18h30.
      </p>
      <p class="rtecenter">
      </p>
     </div>
    </div>
   </div>
   <aside class="postcontent clearfix" id="post-content" role="complementary">
    <div class="region region-post-content">
     <section class="block block-custom-search-blocks" id="block-custom-search-blocks-1">
      <h2 class="block-title">
       [mkey1][symbolx][pkey1][symbolx][keyword1][bracketl1][bracketr1][symbolx][bracketl2][siter1][bracketr2][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx]
      </h2>
      <div class="content">
       <form accept-charset="UTF-8" action="/" class="search-form" id="custom-search-blocks-form-1" method="post" role="search">
        <div>
         <div class="form-item form-type-textfield form-item-custom-search-blocks-form-1">
          <label class="element-invisible" for="edit-custom-search-blocks-form-1--2">
           Search this site
          </label>
         </div>
         <div class="form-actions form-wrapper" id="edit-actions--2">
         </div>
        </div>
       </form>
      </div>
     </section>
    </div>
   </aside>
  </section>
 </div>
 <div class="go_top">
 </div>
 <footer id="footer" role="contentinfo">
  <div class="region region-footer">
   <section class="block block-block" id="block-block-1">
    <div class="content">
     <ul class="footer_reseaux">
      <li>
       [linkx]
       
      </li>
      <li>
       [linkx]
       
      </li>
      <li>
       [ahref]
       
      </li>
      <li>
       [ahref]
       
      </li>
      <li>
       [ahref]
       
      </li>
      <li>
       [linkx]
       
      </li>
      <li>
       <a class="rss" href="/fr/rss.xml" title="">
       </a>
      </li>
     </ul>
    </div>
   </section>
   <section class="block block-mtlfooterfirstnav" id="block-mtlfooterfirstnav-footer-first-level">
    <div class="content">
     <nav id="footer_first">
      <ul>
       <li class="leaf first">
        <a class="" href="/fr/sitemap">
         Plan du site
        </a>
       </li>
       <span class="pipe">
        |
       </span>
       <li class="leaf">
        [linkx]
        
       </li>
       <span class="pipe">
        |
       </span>
       <li class="leaf">
        [linkx]
        
       </li>
       <span class="pipe">
        |
       </span>
       <li class="leaf">
        [linkx]
        
       </li>
       <span class="pipe">
        |
       </span>
       <li class="leaf">
        [ahref]
        
       </li>
       <span class="pipe">
        |
       </span>
       <li class="leaf lastM">
        <a class="" href="/fr/etablissement-public">
         Établissement public
        </a>
       </li>
      </ul>
     </nav>
    </div>
   </section>
  </div>
 </footer>
 <data class="mj-w-data" data-apikey="IcU" data-base="https://app.mailjet.com" data-height="420" data-lang="fr_FR" data-statics="statics" data-token="fa21d06e4d84022e491b886d28b25d40" data-w-id="76M" data-width="640">
 </data>
 <data class="mj-w-data" data-apikey="IcU" data-base="https://app.mailjet.com" data-height="420" data-lang="en_US" data-statics="statics" data-token="c42c2638a864a9b289a8c6314b733290" data-w-id="76P" data-width="640">
 </data>
 <noscript>
 </noscript>
 <b style="color:black;background-color:#a0ffff">
  jnice09-ipp30-wq-zq-0212
 </b>
</body>
|<---