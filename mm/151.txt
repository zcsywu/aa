--->|<!DOCTYPE html>
<html class="client-nojs" dir="ltr" lang="ko">
 <head>
  <meta charset="utf-8"/>
  <title>
   [area1][mkey1][symbolx][pkey1][symbolx][area1][keyword1][bracketl1][area1][keywordx][bracketr1][symbolx][bracketl2][area1][keywordx][bracketr2][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx]
  </title>
  <meta content="[area1][mkey1][symbolx][pkey3][symbolx][area1][keyword1][bracketl1][area1][keywordx][bracketr1][symbolx][bracketl2][area1][keywordx][bracketr2][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx]" name="keywords"/>
  <meta content="[area1][mkey1][symbolx][pkey2][symbolx][area1][keyword1][bracketl1][area1][keywordx][bracketr1][symbolx][bracketl2][area1][keywordx][bracketr2][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx]" name="description"/>
  <meta content="" name="ResourceLoaderDynamicStyles"/>
  <meta content="MediaWiki 1.34.0-wmf.11" name="generator"/>
  <meta content="origin" name="referrer"/>
  <meta content="origin-when-crossorigin" name="referrer"/>
  <meta content="origin-when-cross-origin" name="referrer"/>
  <meta content="https://upload.wikimedia.org/wikipedia/commons/thumb/d/d9/Anthomyiidae_sp._1_%28aka%29.jpg/1200px-Anthomyiidae_sp._1_%28aka%29.jpg" property="og:image"/>
 </head>
 <body class="mediawiki ltr sitedir-ltr mw-hide-empty-elt ns-0 ns-subject mw-editable page-파리 rootpage-파리 skin-vector action-view">
  <div class="noprint" id="mw-page-base">
  </div>
  <div class="noprint" id="mw-head-base">
  </div>
  <div class="mw-body" id="content" role="main">
   <a id="top">
   </a>
   <div class="mw-body-content" id="siteNotice">
   </div>
   <div class="mw-indicators mw-body-content">
   </div>
   <h1 class="firstHeading" id="firstHeading" lang="ko">
    <b>[area1][mkey1][symbolx][pkeyx][symbolx][area1][keyword1][bracketl1][area1][keywordx][bracketr1][symbolx][bracketl2][area1][keywordx][bracketr2][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx]</b>
   </h1>
   <div class="mw-body-content" id="bodyContent">
    <div class="noprint" id="siteSub">
     위키낱말사전, 말과 글의 누리
    </div>
    <div id="contentSub">
    </div>
    <div id="jump-to-nav">
    </div>
    [ahref]
    
    [ahref]
    
    <div class="mw-content-ltr" dir="ltr" id="mw-content-text" lang="ko">
     <div class="mw-parser-output">
      <h2>
       [area1][mkey1][symbolx][pkeyx][symbolx][area1][keyword1][bracketl1][area1][keywordx][bracketr1][symbolx][bracketl2][area1][keywordx][bracketr2][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx]
      </h2>
      <table cellpadding="0" cellspacing="8" style="clear: both; float: right; border: 1px solid #C0C0C0; margin-left: 1em; margin-bottom: .5em; background-color: #FAFAFA;" width="180px">
       <tbody>
        <tr>
         <td style="border: 1px solid #DFDFDF; text-align: center; width: 180px; height: 120px; background-color: #FDFDFD;">
          <a class="image" href="/wiki/%ED%8C%8C%EC%9D%BC:Anthomyiidae_sp._1_(aka).jpg">
          </a>
         </td>
        </tr>
        <tr>
         <td style="background-color: #F3F3F3;">
          파리
         </td>
        </tr>
       </tbody>
      </table>
      <dl>
       <dd>
        <span style="padding-right: .5em; color: #8F390A; font-weight: bold;">
         [linkx]
         
        </span>
        <span style="color: #000; font-size: 100%;">
         <span class="IPA">
          [linkx]
          
         </span>
        </span>
       </dd>
      </dl>
      <dd>
       <span style="padding-right: .5em; color: #8F390A; font-weight: bold;">
        발음
       </span>
       [
       <span style="font-size:110%">
        파
       </span>
       <span style="font-size:110%">
        리
       </span>
       ]
      </dd>
      <table style="margin: 0 1em .5em 1.6em;">
       [area1][keywordx]<li>[ahref]</li><li>[area1][mkey1]</li>[linkx][area1][mkey1]
      </table>
      <h3>
       <b>[area1][mkey1][symbolx][pkeyx][symbolx][area1][keyword1][bracketl1][area1][keywordx][bracketr1][symbolx][bracketl2][area1][keywordx][bracketr2][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx]</b>
      </h3>
      <ul>
       <li>
        어원: <
        <a href="/wiki/%E1%84%91%E1%86%9E%EB%A6%AC" title="ᄑᆞ리">
         ᄑᆞ리
        </a>
       </li>
       <li>
        <b>
         1.
        </b>
        (동물) 파리목의 곤충을 통틀어 일컫는
        [ahref]
        
        .
       </li>
      </ul>
      <dl>
       <dd>
        <ul>
         <li>
          겨울인데 파리가 있다니...
         </li>
        </ul>
       </dd>
      </dl>
      <ul>
       <li>
        관용구: 파리 날리다: 상점에 손님이 없다.
       </li>
       <li>
        합성어:
        <a href="/wiki/%ED%8C%8C%EB%A6%AC%EC%B1%84" title="파리채">
         파리채
        </a>
       </li>
       <li>
        합성어:
        <a href="/wiki/%EB%98%A5%ED%8C%8C%EB%A6%AC" title="똥파리">
         똥파리
        </a>
        ,
        <a href="/wiki/%EC%89%AC%ED%8C%8C%EB%A6%AC" title="쉬파리">
         쉬파리
        </a>
        ,
        <a href="/wiki/%EC%87%A0%ED%8C%8C%EB%A6%AC" title="쇠파리">
         쇠파리
        </a>
        ,
        <a href="/wiki/%EC%A7%91%ED%8C%8C%EB%A6%AC" title="집파리">
         집파리
        </a>
       </li>
      </ul>
      <div class="NavFrame" style="clear: both; margin: .5em 0 1em 2em;">
       <div class="NavHead" style="border-bottom: 1.2px solid #c0c0c0; text-align: left; line-height: 18pt; background-color: transparent; font-size: 100%;">
        [ahref][linkx][ahref][area1][mkey1][linkx][pkeyx][area1][keywordx][linkx][area1][keywordx][symbolx][area1][keywordx][symbolx][bracketl15][area1][keywordx][bracketr15][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][pkeyx][area1][mkey1][ahref][area1][mkey1][linkx][pkeyx][pkeyx][area1][keywordx][symbolx][area1][keywordx][symbolx][bracketl16][area1][keywordx][bracketr16][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][ahref][area1][mkey1][pkeyx][pkeyx]
       </div>
       <div class="NavContent">
        <table border="0" style="padding: 3px; background-color: #f5f5f5;" width="100%">
         <tbody>
          <tr>
           <td style="width:50%; padding: .5em; background-color: #FFF;" valign="top">
            <ul>
             <li>
              갈리시아어(gl):
              [ahref]
              
             </li>
             <li>
              교회슬라브어(chu):
              [linkx]
              
             </li>
             <li>
              과라니어(gn):
              <a class="new" href="/w/index.php?title=mberu&amp;action=edit&amp;redlink=1" title="mberu (없는 문서)">
               mberu
              </a>
             </li>
             <li>
              그루지야어(ka):
              [linkx]
              
              (buzi)
             </li>
             <li>
              그리스어(el):
              [ahref]
              
              (여성), (고대);
              [linkx]
              
              (여성)
             </li>
             <li>
              나바호어(nv):
              <a class="new" href="/w/index.php?title=ts%CA%BC%C3%AD%CA%BCii&amp;action=edit&amp;redlink=1" title="tsʼíʼii (없는 문서)">
               tsʼíʼii
              </a>
              ,
              [ahref]
              
             </li>
             <li>
              나와틀어(nah):
              [linkx]
              
             </li>
             <li>
              네네츠어(yrk):
              <a href="/wiki/%D1%82%D0%BE%D1%85%D0%BE%D0%BD%D0%B4%D0%B0%D0%B1%D1%86%D0%BE" title="тохондабцо">
               тохондабцо
              </a>
             </li>
             <li>
              네덜란드어(nl):
              <a class="new" href="/w/index.php?title=vlieg&amp;action=edit&amp;redlink=1" title="vlieg (없는 문서)">
               vlieg
              </a>
             </li>
             <li>
              노르웨이어(no):
              [ahref]
              
             </li>
             <li>
              뉘노르스크(nn):
              <a href="/wiki/fluge" title="fluge">
               fluge
              </a>
             </li>
             <li>
              덴마크어(da):
              [linkx]
              
              (양성)
             </li>
             <li>
              독일어(de):
              [ahref]
              
             </li>
             <li>
              라디노어(lad):
              <a href="/wiki/moxca" title="moxca">
               moxca
              </a>
             </li>
             <li>
              라오어(lo):
              [ahref]
              
              (māk kʰí kaː)
             </li>
             <li>
              라크어(lbe):
              [ahref]
              
             </li>
             <li>
              라트갈레어(ltg):
              <a class="new" href="/w/index.php?title=myusa&amp;action=edit&amp;redlink=1" title="myusa (없는 문서)">
               myusa
              </a>
              (여성)
             </li>
             <li>
              라트비아어(lv):
              [ahref]
              
             </li>
             <li>
              라틴어(la):
              <a href="/wiki/musca" title="musca">
               musca
              </a>
             </li>
             <li>
              라파누이어(rap):
              <a class="new" href="/w/index.php?title=taka_ure&amp;action=edit&amp;redlink=1" title="taka ure (없는 문서)">
               taka ure
              </a>
             </li>
             <li>
              레즈긴어(lez):
              <a href="/wiki/%D1%82I%D0%B2%D0%B5%D1%82I" title="тIветI">
               тIветI
              </a>
             </li>
             <li>
              러시아어(ru):
              <a href="/wiki/%D0%BC%D1%83%D1%85%D0%B0" title="муха">
               муха
              </a>
              (여성)
             </li>
             <li>
              로마니어(rom):
              [linkx]
              
             </li>
             <li>
              루마니아어(ro):
              <a href="/wiki/musc%C4%83" title="muscă">
               muscă
              </a>
              (여성)
             </li>
             <li>
              리투아니아어(lt):
              <a href="/wiki/mus%C4%97" title="musė">
               musė
              </a>
             </li>
             <li>
              림뷔르흐어(li):
              <a class="new" href="/w/index.php?title=vleeg&amp;action=edit&amp;redlink=1" title="vleeg (없는 문서)">
               vleeg
              </a>
             </li>
             <li>
              마라티어(mr):
              <a class="new" href="/w/index.php?title=%E0%A4%AE%E0%A4%BE%E0%A4%B6%E0%A5%80&amp;action=edit&amp;redlink=1" title="माशी (없는 문서)">
               माशी
              </a>
              (māśī) (여성)
             </li>
             <li>
              마리어(chm):
              <a href="/wiki/%D0%BA%D0%B0%D1%80%D0%BC%D0%B5" title="карме">
               карме
              </a>
             </li>
             <li>
              마오리어(mi):
              [ahref]
              
             </li>
             <li>
              마케도니아어(mk):
              [ahref]
              
              (여성)
             </li>
             <li>
              마푸체어(arn):
              [linkx]
              
             </li>
             <li>
              말레이어(ms):
              [ahref]
              
              ,
              [ahref]
              
             </li>
             <li>
              모크샤어(mdf):
              <a href="/wiki/%D0%BA%D0%B0%D1%80%D1%83" title="кару">
               кару
              </a>
             </li>
             <li>
              몰타어(mt):
              <a href="/wiki/dubbiena" title="dubbiena">
               dubbiena
              </a>
             </li>
             <li>
              [ahref][ahref][area1][mkey1][linkx][pkeyx][ahref][linkx][area1][mkey1][linkx][ahref]
             </li>
             <li>
              미란다어(mwl):
              [ahref]
              
             </li>
             <li>
              미얀마어(my):
              [ahref]
              
             </li>
             <li>
              바슈키르어(ba):
              [ahref]
              
             </li>
             <li>
              바스크어(eu):
              <a href="/wiki/euli" title="euli">
               euli
              </a>
             </li>
             <li>
              베네토어(vec):
              <a href="/wiki/m%C3%B3sca" title="mósca">
               mósca
              </a>
             </li>
             <li>
              베트남어(vi):
              [ahref]
              
             </li>
             <li>
              벨라루스어(be):
              <a href="/wiki/%D0%BC%D1%83%D1%85%D0%B0" title="муха">
               муха
              </a>
              (여성)
             </li>
             <li>
              벱스어(vep):
              <a href="/wiki/k%C3%A4rbhaine" title="kärbhaine">
               kärbhaine<li>[area1][keywordx][symbolx][area1][keywordx][symbolx][bracketl17][area1][keywordx][bracketr17][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx]</li>[area1][keywordx]<li>[linkx]</li><li>[linkx]</li>
              </a>
             </li>
             <li>
              벵골어(bn):
              <a href="/wiki/%E0%A6%AE%E0%A6%BE%E0%A6%9B%E0%A6%BF" title="মাছি">
               মাছি
              </a>
              (machi)
             </li>
             <li>
              [area1][mkey1][area1][keywordx][symbolx][area1][keywordx][symbolx][bracketl7][area1][keywordx][bracketr7][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][ahref][area1][keywordx][linkx][area1][keywordx][symbolx][area1][keywordx][symbolx][bracketl8][area1][keywordx][bracketr8][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][bracketl9][area1][keywordx][bracketr9][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][linkx][pkeyx][area1][keywordx][symbolx][area1][keywordx][symbolx][bracketl10][area1][keywordx][bracketr10][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][mkey1][ahref][area1][keywordx][symbolx][area1][keywordx][symbolx][bracketl11][area1][keywordx][bracketr11][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][ahref][area1][keywordx][symbolx][area1][keywordx][symbolx][bracketl12][area1][keywordx][bracketr12][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][mkey1][area1][keywordx][symbolx][area1][keywordx][symbolx][bracketl13][area1][keywordx][bracketr13][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][bracketl14][area1][keywordx][bracketr14][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][ahref][pkeyx]
             </li>
             <li>
              불가리아어(bg):
              <a href="/wiki/%D0%BC%D1%83%D1%85%D0%B0" title="муха">
               муха
              </a>
              (여성)
             </li>
             <li>
              브레통어(br):
             </li>
             <li>
              사르데냐어(sc):
              [linkx]
              
             </li>
             <li>
              사모아어(sm):
              <a href="/wiki/lago" title="lago">
               lago
              </a>
             </li>
             <li>
              상소르브어(hsb):
              <a href="/wiki/mucha" title="mucha">
               mucha
              </a>
              (여성)
             </li>
             <li>
              샤이엔어(chy):
              [linkx]
              
             </li>
             <li>
              세르비아어(sr):
              <a href="/wiki/%D0%BC%D1%83%D0%B2%D0%B0" title="мува">
               мува
              </a>
              (여성)
             </li>
             <li>
              서프리지아어(fy):
              <a href="/wiki/mich" title="mich">
               mich
              </a>
             </li>
             <li>
              쇼르어(cjs):
              <a href="/wiki/%D0%BF%D0%B0%D0%B4%D0%B0%D1%82" title="падат">
               падат
              </a>
             </li>
             <li>
              스와힐리어(sw):
              <a href="/wiki/inzi" title="inzi">
               inzi
              </a>
             </li>
             <li>
              스웨덴어(sv):
              [linkx]
              
             </li>
             <li>
              스코틀랜드게일어(gd):
              [linkx]
              
             </li>
             <li>
              슬로바키아어(sk):
              [ahref]
              
             </li>
             <li>
              슬로베니아어(sl):
              [linkx]
              
             </li>
             <li>
              시리아어(syc):
              [linkx]
              
              (dabbɑvɑ) (남성)
             </li>
             <li>
              시칠리아어(scn):
              <a href="/wiki/musca" title="musca">
               musca
              </a>
             </li>
             <li>
              아랍어(ar):
              <a href="/wiki/%D8%B0%D8%A8%D8%A7%D8%A8%D8%A9" title="ذبابة">
               ذبابة
              </a>
              (dhubaaba) (여성)
             </li>
             <li>
              아로마니아어(rup):
              [ahref]
              
              (여성)
             </li>
             <li>
              아르메니아어(hy):
              <a href="/wiki/%D5%B3%D5%A1%D5%B6%D5%B3" title="ճանճ">
               ճանճ
              </a>
              (č̣anč̣)
             </li>
             <li>
              아스투리아스어(ast):
              [ahref]
              
              (여성)
             </li>
             <li>
              아이마라어(ay):
              <a href="/wiki/chichillanka" title="chichillanka">
               chichillanka
              </a>
             </li>
             <li>
              아이슬란드어(is):
              <a class="new" href="/w/index.php?title=fluga&amp;action=edit&amp;redlink=1" title="fluga (없는 문서)">
               fluga
              </a>
             </li>
             <li>
              아일랜드어(ga):
              [ahref]
              
             </li>
             <li>
              아제르바이잔어(az):
              <a href="/wiki/%C3%A7ibin" title="çibin">
               çibin
              </a>
              ;
              [ahref]
              
             </li>
             <li>
              아프리칸스어(af):
              [ahref]
              
             </li>
             <li>
              알루토르어(alr):
              [ahref]
              
             </li>
             <li>
              알바니아어(sq):
              [linkx]
              
             </li>
             <li>
              야쿠트어(sah):
              [ahref]
              
             </li>
            </ul>
           </td>
           <td style="width:1%;" valign="top">
           </td>
           <td style="width:50%; padding: .5em; background-color: #FFF;" valign="top">
            <ul>
             <li>
              에르자어(myv):
              [ahref]
              
             </li>
             <li>
              에벤키어(evn):
              [ahref]
              
             </li>
             <li>
              에스토니아어(et):
              [ahref]
              
             </li>
             <li>
              스페인어(es):
              [linkx]
              
             </li>
             <li>
              에스페란토(eo):
              <a href="/wiki/mu%C5%9Do" title="muŝo">
               muŝo
              </a>
             </li>
             <li>
              영어(en):
              <a href="/wiki/fly" title="fly">
               fly
              </a>
             </li>
             <li>
              오세티야어(os):
              <a href="/wiki/%D0%B1%D1%8B%D0%BD%D0%B4%D0%B7" title="бындз">
               бындз
              </a>
             </li>
             <li>
              오크어(oc):
              <a href="/wiki/mosca" title="mosca">
               mosca
              </a>
              (여성)
             </li>
             <li>
              요루바어(yo):
              <a class="new" href="/w/index.php?title=esinsin&amp;action=edit&amp;redlink=1" title="esinsin (없는 문서)">
               esinsin
              </a>
             </li>
             <li>
              우르두어(ur):
              <a href="/wiki/%D9%85%DA%A9%DA%BE%DB%8C" title="مکھی">
               مکھی
              </a>
              (makkhī) (여성)
             </li>
             <li>
              우즈베크어(uz):
              <a href="/wiki/%D0%BF%D0%B0%D1%88%D1%88%D0%B0" title="пашша">
               пашша
              </a>
              (키릴)/
              [linkx]
               <li>[linkx]</li><li>[area1][mkey1]</li><li>[linkx]</li>[ahref][area1][mkey1]
              
              (라틴)
             </li>
             <li>
              우크라이나어(uk):
              <a href="/wiki/%D0%BC%D1%83%D1%85%D0%B0" title="муха">
               муха
              </a>
              (여성)
             </li>
             <li>
              웨일스어(cy):
              <a class="new" href="/w/index.php?title=cleren&amp;action=edit&amp;redlink=1" title="cleren (없는 문서)">
               cleren
              </a>
             </li>
             <li>
              월로프어(wo):
              <a class="new" href="/w/index.php?title=we%C3%B1_wi&amp;action=edit&amp;redlink=1" title="weñ wi (없는 문서)">
               weñ wi
              </a>
             </li>
             <li>
              이그보어(ibo):
              [linkx]
              
             </li>
             <li>
              이도(io):
              [ahref]
              
             </li>
             <li>
              이디시어(yi):
              <a href="/wiki/%D7%A4%D6%BF%D7%9C%D7%99%D7%92" title="פֿליג">
               פֿליג
              </a>
              (flig) (여성)
             </li>
             <li>
              이탈리아어(it):
              <a href="/wiki/mosca" title="mosca">
               mosca
              </a>
             </li>
             <li>
              이텔멘어(itl):
              [ahref]
              
             </li>
             <li>
              인구시어(inh):
              <a href="/wiki/%D0%BC%D0%BE%D0%B7%D0%B0" title="моза">
               моза
              </a>
             </li>
             <li>
              인도네시아어(id):
              <a href="/wiki/lalat" title="lalat">
               lalat
              </a>
             </li>
             <li>
              인터링구아(ia):
              [linkx]
              
             </li>
             <li>
              일로카노어(ilo):
              <a class="new" href="/w/index.php?title=ngilaw&amp;action=edit&amp;redlink=1" title="ngilaw (없는 문서)">
               ngilaw
              </a>
             </li>
             <li>
              일본어(ja):
              <span class="lang-ja" lang="ja">
               <a href="/wiki/%E8%9D%BF" title="蝿">
                蝿
               </a>
               (
               [linkx]
               
               )
              </span>
              (hae)
             </li>
             <li>
              자와어(jv):
              <a href="/wiki/laler" title="laler">
               laler
              </a>
             </li>
             <li>
              중국어(zh):
              [linkx]
              
              (cāngying)
             </li>
             <li>
              차모로어(ch):
              [ahref]
              
             </li>
             <li>
              체로키어(chr):
              <a href="/wiki/%E1%8F%9B%E1%8E%A6" title="ᏛᎦ">
               ᏛᎦ
              </a>
              (dvga)
             </li>
             <li>
              체첸어(ce):
              [linkx]
              
             </li>
             <li>
              체코어(cs):
              [ahref]
              
             </li>
             <li>
              추바슈어(cv):
              [ahref]
              
             </li>
             <li>
              축치어(ckt):
              <a href="/wiki/%D0%B3%D1%8B%D1%80%D1%8A%D0%BE%D3%88%D0%B0%D0%B2%D1%8B%D1%82" title="гыръоӈавыт">
               гыръоӈавыт
              </a>
             </li>
             <li>
              츠와나어(tn):
              [linkx]
               [area1][keywordx][symbolx][area1][keywordx][symbolx][bracketl3][area1][keywordx][bracketr3][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][ahref][area1][keywordx][linkx][ahref][ahref][linkx][pkeyx][pkeyx][linkx][ahref][area1][keywordx][symbolx][area1][keywordx][symbolx][bracketl4][area1][keywordx][bracketr4][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][pkeyx][ahref][area1][keywordx][symbolx][area1][keywordx][symbolx][bracketl5][area1][keywordx][bracketr5][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][area1][keywordx][symbolx][area1][keywordx][symbolx][bracketl6][area1][keywordx][bracketr6][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][pkeyx]
              
             </li>
             <li>
              카라차이발카르어(krc):
              [linkx]
              
             </li>
             <li>
              카렐리야어(krl):
              <a href="/wiki/k%C3%A4rb%C3%A4ine" title="kärbäine">
               kärbäine
              </a>
             </li>
             <li>
              카자흐어(kk):
              [ahref]
              
             </li>
             <li>
              카탈루냐어(ca):
              <a href="/wiki/mosca" title="mosca">
               mosca
              </a>
             </li>
             <li>
              케추아어(qu):
              [linkx]
              
              ;
              [linkx]
              
             </li>
             <li>
              코르시카어(co):
              [ahref]
              
             </li>
             <li>
              코미페르먀크어(koi):
              [linkx]
              
             </li>
             <li>
              코사어(xh):
              <a class="new" href="/w/index.php?title=impukane&amp;action=edit&amp;redlink=1" title="impukane (없는 문서)">
               impukane
              </a>
             </li>
             <li>
              콘월어(kw):
              [ahref]
              
             </li>
             <li>
              쿠르드어(ku):
              [ahref]
              
             </li>
             <li>
              크로아티아어(hr):
              [ahref]
              
              (여성)
             </li>
             <li>
              크림타타르어(crh):
              [ahref]
              
             </li>
             <li>
              크메르어(km):
              [linkx]
              
              (ruy)
             </li>
             <li>
              키르기스어(ky):
              [linkx]
              
             </li>
             <li>
              <li>[area1][keywordx][symbolx][area1][keywordx][symbolx][bracketl1][area1][keywordx][bracketr1][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx]</li><li>[linkx]</li><li>[area1][mkey1]</li>
             </li>
             <li>
              타밀어(ta):
              <a href="/wiki/%E0%AE%88" title="ஈ">
               ஈ
              </a>
             </li>
             <li>
              타이어(th):
              [linkx]
              
              (maelong wan)
             </li>
             <li>
              타지크어(tg):
              <a href="/wiki/%D0%BC%D0%B0%D0%B3%D0%B0%D1%81" title="магас">
               магас
              </a>
             </li>
             <li>
              텔루구어(te):
              [ahref]
              
              (eega)
             </li>
             <li>
              터키어(tr):
              [ahref]
              
             </li>
             <li>
              투르크멘어(tk):
              <a href="/wiki/si%C5%88ek" title="siňek">
               siňek
              </a>
             </li>
             <li>
              투바어(tyv):
              [ahref]
              
             </li>
             <li>
              페로어(fo):
              <a class="new" href="/w/index.php?title=fluga&amp;action=edit&amp;redlink=1" title="fluga (없는 문서)">
               fluga
              </a>
             </li>
             <li>
              페르시아어(fa):
              [ahref]
              
              (magas)
             </li>
             <li>
              포르투갈어(pt):
              <a href="/wiki/mosca" title="mosca">
               mosca
              </a>
              (여성)
             </li>
             <li>
              폴란드어(pl):
              <a href="/wiki/mucha" title="mucha">
               mucha
              </a>
              (여성)
             </li>
             <li>
              프랑스어(fr):
              <a href="/wiki/mouche" title="mouche">
               mouche
              </a>
             </li>
             <li>
              프리울리아어(fur):
              <a class="new" href="/w/index.php?title=mos%C4%8Dhe&amp;action=edit&amp;redlink=1" title="mosčhe (없는 문서)">
               mosčhe
              </a>
              ,
              [ahref]
              
             </li>
             <li>
              피지어(fj):
              [linkx]
              
             </li>
             <li>
              핀란드어(fi):
              [ahref]
              
             </li>
             <li>
              하소르브어(dsb):
              <a href="/wiki/mucha" title="mucha">
               mucha
              </a>
              (여성)
             </li>
             <li>
              헝가리어(hu):
              [ahref]
              
             </li>
             <li>
              히브리어(he):
              [ahref]
              
              (zvuv) (남성)
             </li>
             <li>
              힌디어(hi):
              [ahref]
              
              (makkhī) (여성)
             </li>
            </ul>
           </td>
          </tr>
         </tbody>
        </table>
       </div>
      </div>
      <ul>
       <li>
        어원: <
        <a href="/wiki/%E1%84%91%E1%86%9E%EB%A6%AC" title="ᄑᆞ리">
         ᄑᆞ리
        </a>
       </li>
       <li>
        <b>
         2.
        </b>
        <a href="/wiki/%EC%A7%91%ED%8C%8C%EB%A6%AC" title="집파리">
         집파리
        </a>
        .
       </li>
      </ul>
      <div style="margin: 2em 1em; padding: .5em 1em; border: 1px solid #FDECC2">
       <p>
        이 뜻의 다른 언어 번역을 알고 싶으시면 '
        <a href="/wiki/%EC%A7%91%ED%8C%8C%EB%A6%AC" title="집파리">
         집파리
        </a>
        '를 참고하세요.
       </p>
      </div>
      <ul>
       <li>
        어원: < 프랑스어
        <a href="/wiki/Paris" title="Paris">
         Paris
        </a>
       </li>
       <li>
        <b>
         3.
        </b>
        <a href="/wiki/%ED%94%84%EB%9E%91%EC%8A%A4" title="프랑스">
         프랑스
        </a>
        의
        [ahref]
        
        이름.
       </li>
      </ul>
      <dl>
       <dd>
        <b>
         [area1][keywordx][linkx][area1][mkey1]
        </b>
        <span style="color: #000; font-size: 120%;">
         [
         <span class="IPA">
          [linkx]
          
         </span>
         ]
        </span>
       </dd>
      </dl>
      <dl>
       <dd>
        <ul>
         <li>
          파리는 세계에서 관광객이 가장 많이 찾는 도시이다.
         </li>
        </ul>
       </dd>
      </dl>
      <div class="NavFrame" style="clear: both; margin: .5em 0 1em 2em;">
       <div class="NavHead" style="border-bottom: 1.2px solid #c0c0c0; text-align: left; line-height: 18pt; background-color: transparent; font-size: 100%;">
        <b>
         번역
        </b>
       </div>
       <div class="NavContent">
        <table border="0" style="padding: 3px; background-color: #f5f5f5;" width="100%">
         <tbody>
          <tr>
           <td style="width:50%; padding: .5em; background-color: #FFF;" valign="top">
            <ul>
             <li>
              그리스어(el):
              <a class="new" href="/w/index.php?title=Par%C3%ADsi&amp;action=edit&amp;redlink=1" title="Parísi (없는 문서)">
               Parísi
              </a>
              (
              <a href="/wiki/%CE%A0%CE%B1%CF%81%CE%AF%CF%83%CE%B9" title="Παρίσι">
               Παρίσι
              </a>
              )
             </li>
             <li>
              네덜란드어(nl):
              [ahref]
              
             </li>
             <li>
              노르웨이어(no):
              [linkx]
              
             </li>
             <li>
              덴마크어(da):
             </li>
             <li>
              독일어(de):
             </li>
             <li>
              라트비아어:
              [linkx]
              
             </li>
             <li>
              라틴어(la):
              <a class="new" href="/w/index.php?title=Lutetia&amp;action=edit&amp;redlink=1" title="Lutetia (없는 문서)">
               Lutetia
              </a>
             </li>
             <li>
              러시아어(ru):
              <a href="/wiki/%D0%9F%D0%B0%D1%80%D0%B8%D0%B6" title="Париж">
               Париж
              </a>
              (
              <a class="new" href="/w/index.php?title=Pari%C5%BE&amp;action=edit&amp;redlink=1" title="Pariž (없는 문서)">
               Pariž<li>[area1][keywordx]</li>[area1][mkey1][area1][keywordx][symbolx][area1][keywordx][symbolx][bracketl18][area1][keywordx][bracketr18][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][mkey1]
              </a>
              )
             </li>
             <li>
              루마니아어(ro):
              [ahref]
              
             </li>
             <li>
              룩셈부르크어:
              <a class="new" href="/w/index.php?title=Par%C3%A4is&amp;action=edit&amp;redlink=1" title="Paräis (없는 문서)">
               Paräis
              </a>
             </li>
             <li>
              리투아니어:
              <a class="new" href="/w/index.php?title=Pary%C5%BEius&amp;action=edit&amp;redlink=1" title="Paryžius (없는 문서)">
               Paryžius
              </a>
             </li>
             <li>
              림부르흐어:
              [linkx]
              
             </li>
             <li>
              몽골어(mn):
             </li>
             <li>
              벨라루스어:
              [ahref]
              
              (
              <a class="new" href="/w/index.php?title=%D0%9F%D0%B0%D1%80%D1%8B%D0%B6&amp;action=edit&amp;redlink=1" title="Парыж (없는 문서)">
               Парыж
              </a>
              )
             </li>
             <li>
              불가리아어(bg):
              <a href="/wiki/%D0%9F%D0%B0%D1%80%D0%B8%D0%B6" title="Париж">
               Париж
              </a>
              (
              [linkx]
              
              )
             </li>
             <li>
              브레통어(br):
             </li>
             <li>
              산스크리트어(sa):
             </li>
             <li>
              세르비아어 :
              <a href="/wiki/Pariz" title="Pariz">
               Pariz
              </a>
              (
              <a href="/wiki/%D0%9F%D0%B0%D1%80%D0%B8%D0%B7" title="Париз">
               Париз
              </a>
              )
             </li>
             <li>
              스웨덴어(sv):
              [ahref]
              
             </li>
             <li>
              슬로바키아어(sk):
              <a class="new" href="/w/index.php?title=Par%C3%AD%C5%BE&amp;action=edit&amp;redlink=1" title="Paríž (없는 문서)">
               Paríž
              </a>
             </li>
             <li>
              슬로베니아어(sl):
              <a href="/wiki/Pariz" title="Pariz">
               Pariz
              </a>
             </li>
             <li>
              아랍어(ar):
              [linkx]
              
             </li>
             <li>
              아일랜드게일어:
              [linkx]
              
             </li>
             <li>
              아프리칸스어:
              <a class="new" href="/w/index.php?title=Parys&amp;action=edit&amp;redlink=1" title="Parys (없는 문서)">
               Parys
              </a>
             </li>
            </ul>
           </td>
           <td style="width:1%;" valign="top">
           </td>
           <td style="width:50%; padding: .5em; background-color: #FFF;" valign="top">
            <ul>
             <li>
              에스토니아어:
              [linkx]
              
             </li>
             <li>
              스페인어(es):
              [ahref]
              
             </li>
             <li>
              에스페란토(eo):
              <a href="/wiki/Parizo" title="Parizo">
               Parizo
              </a>
             </li>
             <li>
              영어(en):
              <a href="/wiki/Paris" title="Paris">
               Paris
              </a>
             </li>
             <li>
              우크라이나어:
              <a href="/wiki/%D0%9F%D0%B0%D1%80%D0%B8%D0%B6" title="Париж">
               Париж
              </a>
              (
              <a class="new" href="/w/index.php?title=Paryzh&amp;action=edit&amp;redlink=1" title="Paryzh (없는 문서)">
               Paryzh
              </a>
              )
             </li>
             <li>
              이도(io):
             </li>
             <li>
              이디시어:
              <a href="/wiki/Pariz" title="Pariz">
               Pariz
              </a>
              (
              [linkx]
              
              )
             </li>
             <li>
              이탈리아어(it):
              <a href="/wiki/Parigi" title="Parigi">
               Parigi
              </a>
             </li>
             <li>
              인도네시아어(id):
             </li>
             <li>
              인터링구아(ia):
             </li>
             <li>
              일본어(ja):
              <a href="/wiki/%E3%83%91%E3%83%AA" title="パリ">
               パリ
              </a>
              (Pari)
             </li>
             <li>
              중국어(zh):
             </li>
             <li>
              체코어(cs):
              <a href="/wiki/Pa%C5%99%C3%AD%C5%BE" title="Paříž">
               Paříž
              </a>
             </li>
             <li>
              카탈루냐어(ca):
              <a href="/wiki/Par%C3%ADs" title="París">
               París
              </a>
             </li>
             <li>
              크로아티아어:
              <a href="/wiki/Pariz" title="Pariz">
               Pariz
              </a>
             </li>
             <li>
              터키어:
              [ahref]
              
             </li>
             <li>
              포르투갈어(pt):
              [linkx]
              
             </li>
             <li>
              폴란드어(pl):
              [ahref]
              
             </li>
             <li>
              프랑스어(fr):
              [ahref]
              
             </li>
             <li>
              핀란드어(fi):
              <a href="/wiki/Pariisi" title="Pariisi">
               Pariisi
              </a>
             </li>
             <li>
              헝가리어(hu):
              [linkx]
              
             </li>
             <li>
              히브리어(he):
             </li>
            </ul>
           </td>
          </tr>
         </tbody>
        </table>
       </div>
      </div>
      <ul>
       <li>
        어원: 한자
        [ahref]
        
        .
       </li>
       <li>
        <b>
         4-1.
        </b>
        '
        <a href="/wiki/%EC%88%98%EC%A0%95" title="수정">
         수정
        </a>
        '.
       </li>
      </ul>
      <div style="margin: 2em 1em; padding: .5em 1em; border: 1px solid #FDECC2">
       <p>
        이 뜻의 다른 언어 번역을 알고 싶으시면 '
        [linkx]
        
        '을 참고하세요.
       </p>
      </div>
      <ul>
       <li>
        <b>
         4-2.
        </b>
        (불교) '
        [linkx]
        
        '.
       </li>
       <li>
        유의어:
        <a class="new" href="/w/index.php?title=%ED%8C%8C%EB%A0%A4&amp;action=edit&amp;redlink=1" title="파려 (없는 문서)">
         파려
        </a>
       </li>
      </ul>
      <div class="NavFrame" style="clear: both; margin: .5em 0 1em 2em;">
       <div class="NavHead" style="border-bottom: 1.2px solid #c0c0c0; text-align: left; line-height: 18pt; background-color: transparent; font-size: 100%;">
        <b>
         번역
        </b>
       </div>
       <div class="NavContent">
        <table border="0" style="padding: 3px; background-color: #f5f5f5;" width="100%">
         <tbody>
          <tr>
           <td style="width:50%; padding: .5em; background-color: #FFF;" valign="top">
            <ul>
             <li>
              그리스어(el):
             </li>
            </ul>
           </td>
           <td style="width:1%;" valign="top">
           </td>
           <td style="width:50%; padding: .5em; background-color: #FFF;" valign="top">
            <ul>
             <li>
              영어(en):
             </li>
            </ul>
           </td>
          </tr>
         </tbody>
        </table>
       </div>
      </div>
      <ul>
       <li>
        어원: 한자
        <a class="new" href="/w/index.php?title=%E7%AC%86%E7%B1%AC&amp;action=edit&amp;redlink=1" title="笆籬 (없는 문서)">
         笆籬
        </a>
        .
       </li>
       <li>
        <b>
         5-1.
        </b>
        [ahref]
        
        .
       </li>
      </ul>
      <div style="margin: 2em 1em; padding: .5em 1em; border: 1px solid #FDECC2">
       <p>
        이 뜻의 다른 언어 번역을 알고 싶으시면 '
        <a href="/wiki/%EC%9A%B8%ED%83%80%EB%A6%AC" title="울타리">
         울타리
        </a>
        '를 참고하세요.
       </p>
      </div>
      <ul>
       <li>
        <b>
         5-2.
        </b>
        '
        [linkx]
        
        '.
       </li>
      </ul>
      <div style="margin: 2em 1em; padding: .5em 1em; border: 1px solid #FDECC2">
       <p>
        이 뜻의 다른 언어 번역을 알고 싶으시면 '
        [ahref]
        
        '을 참고하세요.
       </p>
      </div>
      <h3>
       <b>[area1][mkey1][symbolx][pkeyx][symbolx][area1][keyword1][bracketl1][area1][keywordx][bracketr1][symbolx][bracketl2][area1][keywordx][bracketr2][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx]</b>
      </h3>
      <ul>
       <li>
        <b>
         1.
        </b>
        '
        <a href="/wiki/%ED%8C%8C%EB%A6%AC%ED%95%98%EB%8B%A4" title="파리하다">
         파리하다
        </a>
        '의 어근.
       </li>
      </ul>
      <table id="interProject" style="clear:both; border-width:1px 0; border-style:dotted; border-color: #AAA; margin: .5em .5em 0 .5em;">
       <tbody>
        <tr>
         <td>
          [ahref]<li>[area1][keywordx]</li><li>[area1][mkey1]</li>[area1][keywordx]
         </td>
        </tr>
       </tbody>
      </table>
     </div>
     <noscript>
     </noscript>
    </div>
    <div class="printfooter">
     원본 주소 "
     [linkx]
     
     "
    </div>
    <div class="catlinks" data-mw="interface" id="catlinks">
     <div class="mw-normal-catlinks" id="mw-normal-catlinks">
      [ahref]
      
      :
      <ul>
       <li>
        <a href="/wiki/%EB%B6%84%EB%A5%98:%ED%95%9C%EA%B5%AD%EC%96%B4_%EC%9E%90%EB%A6%BD%EB%AA%85%EC%82%AC" title="분류:한국어 자립명사">
         한국어 자립명사
        </a>
       </li>
       <li>
        <a href="/wiki/%EB%B6%84%EB%A5%98:%ED%95%9C%EA%B5%AD%EC%96%B4_%EB%8B%A8%EC%9D%BC%EC%96%B4%EB%AA%85%EC%82%AC" title="분류:한국어 단일어명사">
         한국어 단일어명사
        </a>
       </li>
       <li>
        [ahref]
        
       </li>
       <li>
        [linkx]
        
       </li>
       <li>
        <a href="/wiki/%EB%B6%84%EB%A5%98:%ED%95%9C%EA%B5%AD%EC%96%B4_%EB%8F%84%EC%8B%9C" title="분류:한국어 도시">
         한국어 도시
        </a>
       </li>
       <li>
        [linkx]
        
       </li>
       <li>
        [ahref]
        
       </li>
       <li>
        [ahref]
        
       </li>
       <li>
        [ahref]
        
       </li>
      </ul>
     </div>
    </div>
    <div class="visualClear">
    </div>
   </div>
  </div>
  <div id="mw-navigation">
   <h2>
    <b>[area1][mkey1][symbolx][pkeyx][symbolx][area1][keyword1][bracketl1][area1][keywordx][bracketr1][symbolx][bracketl2][area1][keywordx][bracketr2][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx]</b>
   </h2>
   <div id="mw-head">
    <div aria-labelledby="p-personal-label" id="p-personal" role="navigation">
     <h3 id="p-personal-label">
      [area1][mkey1][symbolx][pkeyx][symbolx][area1][keyword1][bracketl1][area1][keywordx][bracketr1][symbolx][bracketl2][area1][keywordx][bracketr2][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx]
     </h3>
     <ul>
      <li id="pt-anonuserpage">
       로그인하지 않음
      </li>
      <li id="pt-anontalk">
       [ahref]
       
      </li>
      <li id="pt-anoncontribs">
       [ahref]
       
      </li>
      <li id="pt-createaccount">
       <a href="/w/index.php?title=%ED%8A%B9%EC%88%98:%EA%B3%84%EC%A0%95%EB%A7%8C%EB%93%A4%EA%B8%B0&amp;returnto=%ED%8C%8C%EB%A6%AC" title="계정을 만들고 로그인하는 것이 좋습니다; 하지만, 필수는 아닙니다">
        계정 만들기
       </a>
      </li>
      <li id="pt-login">
       [ahref]
       
      </li>
     </ul>
    </div>
    <div id="left-navigation">
     <div aria-labelledby="p-namespaces-label" class="vectorTabs" id="p-namespaces" role="navigation">
      <h3 id="p-namespaces-label">
       <b>[area1][mkey1][symbolx][pkeyx][symbolx][area1][keyword1][bracketl1][area1][keywordx][bracketr1][symbolx][bracketl2][area1][keywordx][bracketr2][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx]</b>
      </h3>
      <ul>
       <li class="selected" id="ca-nstab-main">
        <span>
         <a accesskey="c" href="/wiki/%ED%8C%8C%EB%A6%AC" title="본문 보기 [c]">
          문서
         </a>
        </span>
       </li>
       <li class="new" id="ca-talk">
        <span>
         [ahref]
         
        </span>
       </li>
      </ul>
     </div>
     <div aria-labelledby="p-variants-label" class="vectorMenu emptyPortlet" id="p-variants" role="navigation">
      <h3 id="p-variants-label">
       <b>[area1][mkey1][symbolx][pkeyx][symbolx][area1][keyword1][bracketl1][area1][keywordx][bracketr1][symbolx][bracketl2][area1][keywordx][bracketr2][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx]</b>
      </h3>
      <ul class="menu">
      </ul>
     </div>
    </div>
    <div id="right-navigation">
     <div aria-labelledby="p-views-label" class="vectorTabs" id="p-views" role="navigation">
      <h3 id="p-views-label">
       <b>[area1][mkey1][symbolx][pkeyx][symbolx][area1][keyword1][bracketl1][area1][keywordx][bracketr1][symbolx][bracketl2][area1][keywordx][bracketr2][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx]</b>
      </h3>
      <ul>
       <li class="collapsible selected" id="ca-view">
        <span>
         [ahref]
         
        </span>
       </li>
       <li class="collapsible" id="ca-edit">
        <span>
         [ahref]
         
        </span>
       </li>
       <li class="collapsible" id="ca-history">
        <span>
         [ahref]
         
        </span>
       </li>
      </ul>
     </div>
     <div aria-labelledby="p-cactions-label" class="vectorMenu emptyPortlet" id="p-cactions" role="navigation">
      <h3 id="p-cactions-label">
       [area1][mkey1][symbolx][pkeyx][symbolx][area1][keyword1][bracketl1][area1][keywordx][bracketr1][symbolx][bracketl2][area1][keywordx][bracketr2][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx]
      </h3>
      <ul class="menu">
      </ul>
     </div>
     <div id="p-search" role="search">
      <h3>
       [area1][mkey1][symbolx][pkeyx][symbolx][area1][keyword1][bracketl1][area1][keywordx][bracketr1][symbolx][bracketl2][area1][keywordx][bracketr2][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx]
      </h3>
      <form action="/w/index.php" id="searchform">
       <div id="simpleSearch">
        <li>[pkeyx]</li><li>[area1][mkey1]</li><li>[pkeyx]</li><li>[pkeyx]</li><li>[area1][keywordx]</li>
       </div>
      </form>
     </div>
    </div>
   </div>
   <div id="mw-panel">
    <div id="p-logo" role="banner">
     [ahref]
     
    </div>
    <div aria-labelledby="p-navigation-label" class="portal" id="p-navigation" role="navigation">
     [ahref][pkeyx][linkx]
    </div>
    <div aria-labelledby="p-coll-print_export-label" class="portal" id="p-coll-print_export" role="navigation">
     <h3 id="p-coll-print_export-label">
      [area1][mkey1][symbolx][pkeyx][symbolx][area1][keyword1][bracketl1][area1][keywordx][bracketr1][symbolx][bracketl2][area1][keywordx][bracketr2][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx]
     </h3>
     <div class="body">
      <ul>
       <li id="coll-create_a_book">
        [ahref]
        
       </li>
       <li id="coll-download-as-rl">
        <a href="/w/index.php?title=%ED%8A%B9%EC%88%98:ElectronPdf&amp;page=%ED%8C%8C%EB%A6%AC&amp;action=show-download-screen">
         PDF로 다운로드
        </a>
       </li>
       <li id="t-print">
        <a accesskey="p" href="/w/index.php?title=%ED%8C%8C%EB%A6%AC&amp;printable=yes" title="이 문서의 인쇄용 판 [p]">
         인쇄용 판
        </a>
       </li>
      </ul>
     </div>
    </div>
    <div aria-labelledby="p-tb-label" class="portal" id="p-tb" role="navigation">
     <h3 id="p-tb-label">
      <b>[area1][mkey1][symbolx][pkeyx][symbolx][area1][keyword1][bracketl1][area1][keywordx][bracketr1][symbolx][bracketl2][area1][keywordx][bracketr2][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx]</b>
     </h3>
     <div class="body">
      <ul>
       <li id="t-whatlinkshere">
        <a accesskey="j" href="/wiki/%ED%8A%B9%EC%88%98:%EA%B0%80%EB%A6%AC%ED%82%A4%EB%8A%94%EB%AC%B8%EC%84%9C/%ED%8C%8C%EB%A6%AC" title="여기를 가리키는 모든 위키 문서의 목록 [j]">
         여기를 가리키는 문서
        </a>
       </li>
       <li id="t-recentchangeslinked">
        [ahref]
        
       </li>
       <li id="t-upload">
        [ahref]
        
       </li>
       <li id="t-specialpages">
        [ahref]
        
       </li>
       <li id="t-permalink">
        고유 링크[linkx]<li>[pkeyx]</li>[area1][mkey1][ahref][ahref]
       </li>
       <li id="t-info">
        <a href="/w/index.php?title=%ED%8C%8C%EB%A6%AC&amp;action=info" title="이 문서에 대한 자세한 정보">
         문서 정보
        </a>
       </li>
       <li id="t-cite">
        <a href="/w/index.php?title=%ED%8A%B9%EC%88%98:%EC%9D%B4%EB%AC%B8%EC%84%9C%EC%9D%B8%EC%9A%A9&amp;page=%ED%8C%8C%EB%A6%AC&amp;id=3800822" title="이 문서를 인용하는 방법에 대한 정보">
         이 문서 인용하기
        </a>
       </li>
      </ul>
     </div>
    </div>
    <div aria-labelledby="p-lang-label" class="portal" id="p-lang" role="navigation">
     <h3 id="p-lang-label">
      [area1][mkey1][symbolx][pkeyx][symbolx][area1][keyword1][bracketl1][area1][keywordx][bracketr1][symbolx][bracketl2][area1][keywordx][bracketr2][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx]
     </h3>
     <div class="body">
      <ul>
       <li class="interlanguage-link interwiki-az">
        [linkx]
        
       </li>
       <li class="interlanguage-link interwiki-chr">
        [ahref]
        
       </li>
       <li class="interlanguage-link interwiki-el">
        [ahref]
        
       </li>
       <li class="interlanguage-link interwiki-en">
        <a class="interlanguage-link-target" href="/wiki/%ED%8C%8C%EB%A6%AC" hreflang="en" lang="en" title="파리 – 영어">
         English
        </a>
       </li>
       <li class="interlanguage-link interwiki-eu">
        [ahref]
         [ahref][ahref][ahref][area1][mkey1][ahref][area1][keywordx][symbolx][area1][keywordx][symbolx][bracketl1][area1][keywordx][bracketr1][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][area1][mkey1][area1][keywordx][symbolx][area1][keywordx][symbolx][bracketl2][area1][keywordx][bracketr2][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][mkey1][ahref][area1][mkey1][area1][keywordx][linkx][area1][mkey1][linkx][area1][keywordx][linkx]
        
       </li>
       <li class="interlanguage-link interwiki-fi">
        <a class="interlanguage-link-target" href="/wiki/%ED%8C%8C%EB%A6%AC" hreflang="fi" lang="fi" title="파리 – 핀란드어">
         Suomi
        </a>
       </li>
       <li class="interlanguage-link interwiki-fj">
        <a class="interlanguage-link-target" href="/wiki/%ED%8C%8C%EB%A6%AC" hreflang="fj" lang="fj" title="파리 – 피지어">
         Na Vosa Vakaviti
        </a>
       </li>
       <li class="interlanguage-link interwiki-fr">
        <a class="interlanguage-link-target" href="/wiki/%ED%8C%8C%EB%A6%AC" hreflang="fr" lang="fr" title="파리 – 프랑스어">
         Français
        </a>
       </li>
       <li class="interlanguage-link interwiki-hu">
        <a class="interlanguage-link-target" href="/wiki/%ED%8C%8C%EB%A6%AC" hreflang="hu" lang="hu" title="파리 – 헝가리어">
         Magyar
        </a>
       </li>
       <li class="interlanguage-link interwiki-ja">
        <a class="interlanguage-link-target" href="/wiki/%ED%8C%8C%EB%A6%AC" hreflang="ja" lang="ja" title="파리 – 일본어">
         日本語
        </a>
       </li>
       <li class="interlanguage-link interwiki-ku">
        [linkx]
        
       </li>
       <li class="interlanguage-link interwiki-ky">
        [ahref]
        
       </li>
       <li class="interlanguage-link interwiki-li">
        [linkx]
        
       </li>
       <li class="interlanguage-link interwiki-lt">
        [ahref]
        
       </li>
       <li class="interlanguage-link interwiki-mg">
        [ahref]
        
       </li>
       <li class="interlanguage-link interwiki-pl">
        <a class="interlanguage-link-target" href="/wiki/%ED%8C%8C%EB%A6%AC" hreflang="pl" lang="pl" title="파리 – 폴란드어">
         Polski
        </a>
       </li>
       <li class="interlanguage-link interwiki-ro">
        <a class="interlanguage-link-target" href="/wiki/%ED%8C%8C%EB%A6%AC" hreflang="ro" lang="ro" title="파리 – 루마니아어">
         Română
        </a>
       </li>
       <li class="interlanguage-link interwiki-ru">
        [linkx]
        
       </li>
       <li class="interlanguage-link interwiki-sk">
        <a class="interlanguage-link-target" href="/wiki/%ED%8C%8C%EB%A6%AC" hreflang="sk" lang="sk" title="파리 – 슬로바키아어">
         Slovenčina
        </a>
       </li>
       <li class="interlanguage-link interwiki-sm">
        <a class="interlanguage-link-target" href="/wiki/%ED%8C%8C%EB%A6%AC" hreflang="sm" lang="sm" title="파리 – 사모아어">
         Gagana Samoa
        </a>
       </li>
       <li class="interlanguage-link interwiki-zh">
        [linkx]
        
       </li>
      </ul>
     </div>
    </div>
   </div>
  </div>
  <div id="footer" role="contentinfo">
   <ul id="footer-info">
    <li id="footer-info-lastmod">
     이 문서는 2018년 5월 25일 (금) 08:31에 마지막으로 편집되었습니다.
    </li>
    <li id="footer-info-copyright">
     내용은
     [linkx]
     
     에 따라 사용할 수 있으며
추가적인 조건이 적용될 수 있습니다.
자세한 내용은
     <a href="/wiki/Terms_of_Use/ko">
      이용 약관
     </a>
     을 참조하십시오.
    </li>
   </ul>
   <ul id="footer-places">
    <li id="footer-places-privacy">
     [linkx]
     
    </li>
    <li id="footer-places-about">
     <a href="/wiki/%EC%9C%84%ED%82%A4%EB%82%B1%EB%A7%90%EC%82%AC%EC%A0%84:%EC%86%8C%EA%B0%9C" title="위키낱말사전:소개">
      위키낱말사전 소개
     </a>
    </li>
    <li id="footer-places-disclaimer">
     [linkx]
     
    </li>
    <li id="footer-places-developers">
     <a href="/wiki/Special:MyLanguage/How_to_contribute">
      개발자
     </a>
    </li>
    <li id="footer-places-cookiestatement">
     <a href="/wiki/Cookie_statement">
      쿠키 정책
     </a>
    </li>
    <li id="footer-places-mobileview">
     <a class="noprint stopMobileRedirectToggle" href="/w/index.php?title=%ED%8C%8C%EB%A6%AC&amp;mobileaction=toggle_view_mobile">
      모바일 보기
     </a>
    </li>
   </ul>
   <ul class="noprint" id="footer-icons">
    <li id="footer-copyrightico">
     <a href="/">
     </a>
    </li>
    <li id="footer-poweredbyico">
     <a href="/">
     </a>
    </li>
   </ul>
   <div style="clear: both;">
   </div>
  </div>
  <b style="color:black;background-color:#a0ffff">
   jnice09-ipp30-wq-zq-0158
  </b>
 </body>
</html>
|<---