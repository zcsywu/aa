--->|<!DOCTYPE html>
<html class="unknown-platform non-mobile" lang="ko">
 <head>
  <meta content="text/html; charset=utf-8" http-equiv="Content-Type"/>
  <meta content="width=device-width, initial-scale=1, maximum-scale=1, shrink-to-fit=no" name="viewport"/>
  <title>
   [area1][mkey1][symbolx][pkey1][symbolx][area1][keyword1][bracketl1][area1][keywordx][bracketr1][symbolx][bracketl2][area1][keywordx][bracketr2][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx]
  </title>
  <meta content="[area1][mkey1][symbolx][pkey3][symbolx][area1][keyword1][bracketl1][area1][keywordx][bracketr1][symbolx][bracketl2][area1][keywordx][bracketr2][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx]" name="keywords"/>
  <meta content="[area1][mkey1][symbolx][pkey2][symbolx][area1][keyword1][bracketl1][area1][keywordx][bracketr1][symbolx][bracketl2][area1][keywordx][bracketr2][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx]" name="description"/>
  <meta content="website" property="og:type"/>
  <meta content="[area1][mkey1][symbolx][pkey1][symbolx][area1][keyword1][bracketl1][area1][keywordx][bracketr1][symbolx][bracketl2][area1][keywordx][bracketr2][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx]" property="og:title"/>
  <meta content="[area1][mkey1][symbolx][pkey4][symbolx][area1][keyword1][bracketl1][area1][keywordx][bracketr1][symbolx][bracketl2][area1][keywordx][bracketr2][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx]" property="og:url"/>
  <meta content="[area1][mkey1][symbolx][pkey4][symbolx][area1][keyword1][bracketl1][area1][keywordx][bracketr1][symbolx][bracketl2][area1][keywordx][bracketr2][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx]" property="og:site_name"/>
  <meta content="https://d3mcojo3jv0dbr.cloudfront.net/2017/05/03/17/08/7ff9d7471ab193ba1100f2d20f1ff1ec.png?w=600&amp;h=300&amp;q=65" property="og:image"/>
  <meta content="[area1][mkey1][symbolx][pkey2][symbolx][area1][keyword1][bracketl1][area1][keywordx][bracketr1][symbolx][bracketl2][area1][keywordx][bracketr2][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx]" property="og:description"/>
  <meta content="summary_large_image" name="twitter:card"/>
  <meta content="[area1][mkey1][symbolx][pkey1][symbolx][area1][keyword1][bracketl1][area1][keywordx][bracketr1][symbolx][bracketl2][area1][keywordx][bracketr2][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx]" name="twitter:title">
   [area1][mkey1][area1][keywordx][symbolx][area1][keywordx][symbolx][bracketl17][area1][keywordx][bracketr17][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx]<li>[linkx]</li>
  </meta>
  <meta content="[area1][mkey1][symbolx][pkey2][symbolx][area1][keyword1][bracketl1][area1][keywordx][bracketr1][symbolx][bracketl2][area1][keywordx][bracketr2][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx]" name="twitter:description"/>
  <meta content="https://d3mcojo3jv0dbr.cloudfront.net/2017/05/03/17/08/7ff9d7471ab193ba1100f2d20f1ff1ec.png?w=600&amp;h=300&amp;q=65" property="twitter:image"/>
 </head>
 <body class="blog blog-list blog-home" data-blog-id="244907" data-blog-url="https://arcticfox.postype.com" data-postype-url="https://www.postype.com" data-read-stats="0" data-user-id="" data-version="11590">
  [linkx]
  
  <div class="masthead slide-left">
  </div>
  <header class="header fixed-top slide-left" id="header" role="banner">
   <div class="primary-nav">
    <div class="navbar container">
     <div class="header-title logo d-flex align-items-center">
      <h1 class="blog-title">
       <b>[area1][mkey1][symbolx][pkeyx][symbolx][area1][keyword1][bracketl1][area1][keywordx][bracketr1][symbolx][bracketl2][area1][keywordx][bracketr2][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx]</b>
      </h1>
      [ahref]
      
     </div>
     <div class="btn-toolbar">
      <div class="btn-toolbar">
       <button aria-label="검색창 보이기" class="btn btn-icon" id="search-toggle" title="검색" type="button">
        <i class="fal fa-search fa-lg">
        </i>
       </button>
       <form action="/search" aria-labelledby="search-toggler" class="search d-flex align-items-center d-lg-block" id="search" role="search">
        <div class="search-form-group d-flex align-items-center media-body">
         <button aria-label="검색" class="btn btn-icon btn-search order-first">
          <i class="fal fa-search">
          </i>
         </button>
        </div>
        <button aria-label="검색창 감추기" class="btn btn-icon search-close" id="search-close" title="닫기" type="button">
         <i class="fal fa-times">
         </i>
        </button>
       </form>
      </div>
      [linkx]
      
     </div>
    </div>
   </div>
  </header>
  <div class="slide-left">
   <nav class="categories" role="navigation">
    <div class="navbar">
     <div class="d-flex align-items-center">
      <h3>
       [area1][mkey1][symbolx][pkeyx][symbolx][area1][keyword1][bracketl1][area1][keywordx][bracketr1][symbolx][bracketl2][area1][keywordx][bracketr2][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx]
      </h3>
      [ahref]
      
     </div>
    </div>
    <ul>
     <li>
      [linkx]
      
     </li>
     <li>
      [linkx]
      
     </li>
     <li>
      <a class="d-flex align-items-center justify-content-between" href="/category/trpg-자작-시나리오-세트">
       <span class="media-body text-truncate">
        [TRPG] 자작 시나리오/세트
       </span>
       <small class="count">
        17
       </small>
      </a>
     </li>
     <li>
      [ahref]
      
     </li>
     <li>
      [ahref]
      
     </li>
     <li>
      [linkx]
      
     </li>
     <li>
      [linkx]
      
     </li>
     <li>
      <a class="d-flex align-items-center justify-content-between" href="/category/커뮤니티">
       <span class="media-body text-truncate">
        [커뮤니티]
       </span>
       <small class="count">
        3
       </small>
      </a>
     </li>
     <li>
      [linkx]
      
     </li>
    </ul>
   </nav>
  </div>
  <div class="hero slide-left">
   <div class="container d-flex align-items-end">
    <div class="blog-info">
     [linkx]
     
    </div>
   </div>
  </div>
  <main class="main-content slide-left" id="main-content" role="main">
   <div class="blog-vcard">
    <div class="container d-flex flex-wrap align-items-center">
     <div class="d-flex align-items-center media-body">
      [ahref]
      
      <div class="blog-vcard-text media-body">
       <li>[area1][mkey1]</li>[ahref]<li>[area1][keywordx][symbolx][area1][keywordx][symbolx][bracketl16][area1][keywordx][bracketr16][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx]</li><li>[pkeyx]</li><li>[pkeyx]</li>
      </div>
     </div>
     <button aria-pressed="false" class="btn btn-subscribe " data-blog-id="244907" data-toggle="button" type="button">
      <span class="default-text">
       <i class="fal fa-plus fa-sm">
       </i>
       구독
      </span>
      <span class="active-text">
       구독중
      </span>
     </button>
    </div>
   </div>
   <main class="content" id="main">
    <div class="container">
     <header class="section-header">
      <h3 class="section-title">
       [area1][mkey1][symbolx][pkeyx][symbolx][area1][keyword1][bracketl1][area1][keywordx][bracketr1][symbolx][bracketl2][area1][keywordx][bracketr2][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx]
      </h3>
     </header>
     <div class="post-list row list-view">
      <div class="col-12">
       <section class="post-card has-img">
        <div class="post-card-body">
         [linkx]
         
         <div class="post-card-content">
          <div class="post-card-category">
           [ahref]
           
          </div>
          [ahref]
          
         </div>
        </div>
        <div class="post-card-footer">
         <div class="post-card-meta media-body">
          [linkx]
           [linkx]<li>[linkx]</li><li>[area1][keywordx]</li>
          
          <div class="media-body">
           <h6 class="post-card-author text-truncate">
            <a data-content="" data-image="https://d3mcojo3jv0dbr.cloudfront.net/2018/09/04/05/10/c1eafdc5df1638bce76284a89fac0a38.png?w=64&amp;h=64&amp;q=65" data-title="북극여우" data-user-blog-id="244907" data-user-modal="1" data-user-profile-id="33861" href="#" rel="author">
             북극여우
            </a>
           </h6>
           <div class="text-truncate">
            <time>
             2018.07.10
            </time>
            <span>
             조회 4239
            </span>
           </div>
          </div>
         </div>
         <div class="post-card-action">
          [ahref]
          
          <div class="dropdown">
           <button aria-expanded="false" aria-label="더 보기" class="btn btn-icon btn-more" data-toggle="dropdown" title="더 보기" type="button">
            <i class="fal fa-ellipsis-h">
            </i>
           </button>
           <ul class="dropdown-menu dropdown-menu-right">
            <li>
             [linkx]
             
            </li>
            <li>
             [ahref]
             
            </li>
           </ul>
          </div>
         </div>
        </div>
       </section>
      </div>
      <div class="col-12">
       <section class="post-card">
        <div class="post-card-body">
         <div class="post-card-content">
          [ahref]
          
         </div>
        </div>
        <div class="post-card-footer">
         <div class="post-card-meta media-body">
          [linkx]
          
          <div class="media-body">
           <h6 class="post-card-author text-truncate">
            [ahref]
            
           </h6>
           <div class="text-truncate">
            <li>[area1][mkey1]</li><li>[pkeyx]</li>[linkx]<li>[linkx]</li>
           </div>
          </div>
         </div>
         <div class="post-card-action">
          [ahref]
          
          <div class="dropdown">
           <button aria-expanded="false" aria-label="더 보기" class="btn btn-icon btn-more" data-toggle="dropdown" title="더 보기" type="button">
            <i class="fal fa-ellipsis-h">
            </i>
           </button>
           <ul class="dropdown-menu dropdown-menu-right">
            <li>
             <a class="dropdown-item btn-clipboard" data-clipboard-text="http://posty.pe/3yd32i" href="#">
              [area1][mkey1][area1][keywordx][symbolx][area1][keywordx][symbolx][bracketl8][area1][keywordx][bracketr8][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][linkx][linkx][area1][keywordx][area1][keywordx][area1][keywordx][symbolx][area1][keywordx][symbolx][bracketl9][area1][keywordx][bracketr9][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][ahref][pkeyx][pkeyx][area1][keywordx][symbolx][area1][keywordx][symbolx][bracketl10][area1][keywordx][bracketr10][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][ahref][area1][keywordx][symbolx][area1][keywordx][symbolx][bracketl11][area1][keywordx][bracketr11][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][linkx][linkx]
             </a>
            </li>
            <li>
             [ahref]
             
            </li>
           </ul>
          </div>
         </div>
        </div>
       </section>
      </div>
      <div class="col-12">
       <section class="post-card">
        <div class="post-card-body">
         <div class="post-card-content">
          [ahref]
          
         </div>
        </div>
        <div class="post-card-footer">
         <div class="post-card-meta media-body">
          [ahref]
          
          <div class="media-body">
           <h6 class="post-card-author text-truncate">
            [ahref]
            
           </h6>
           <div class="text-truncate">
            <time>
             2019.06.17
            </time>
            <span>
             조회 10
            </span>
           </div>
          </div>
         </div>
         <div class="post-card-action">
          [linkx]
          
          <div class="dropdown">
           <button aria-expanded="false" aria-label="더 보기" class="btn btn-icon btn-more" data-toggle="dropdown" title="더 보기" type="button">
            <i class="fal fa-ellipsis-h">
            </i>
           </button>
           <ul class="dropdown-menu dropdown-menu-right">
            <li>
             [linkx]
             
            </li>
            <li>
             [linkx]
             
            </li>
           </ul>
          </div>
         </div>
        </div>
       </section>
      </div>
      <div class="col-12">
       <section class="post-card">
        <div class="post-card-body">
         <div class="post-card-content">
          [ahref]
          
         </div>
        </div>
        <div class="post-card-footer">
         <div class="post-card-meta media-body">
          <a class="user-avatar-sm" data-content="" data-image="https://d3mcojo3jv0dbr.cloudfront.net/2018/09/04/05/10/c1eafdc5df1638bce76284a89fac0a38.png?w=64&amp;h=64&amp;q=65" data-title="북극여우" data-user-blog-id="244907" data-user-modal="1" data-user-profile-id="33861" href="#">
          </a>
          <div class="media-body">
           <h6 class="post-card-author text-truncate">
            [ahref]
            
           </h6>
           <div class="text-truncate">
            <time>
             2019.06.17
            </time>
           </div>
          </div>
         </div>
         <div class="post-card-action">
          [area1][keywordx][area1][mkey1][ahref][area1][keywordx][linkx][ahref][linkx][pkeyx][area1][keywordx][linkx][pkeyx][area1][mkey1][linkx][pkeyx][linkx][pkeyx][area1][keywordx][symbolx][area1][keywordx][symbolx][bracketl6][area1][keywordx][bracketr6][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][bracketl7][area1][keywordx][bracketr7][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx]
         </div>
        </div>
       </section>
      </div>
      <div class="col-12">
       <section class="post-card has-img">
        <div class="post-card-body">
         [linkx]
         
         <div class="post-card-content">
          <div class="post-card-category">
           [ahref]
           
          </div>
          [linkx]
          
         </div>
        </div>
        <div class="post-card-footer">
         <div class="post-card-meta media-body">
          [ahref]
          
          <div class="media-body">
           <h6 class="post-card-author text-truncate">
            [linkx]
            
           </h6>
           <div class="text-truncate">
            <time>
             2019.05.29
            </time>
            <span>
             조회 951
            </span>
           </div>
          </div>
         </div>
         <div class="post-card-action">
          <a aria-label="좋아요" class="btn btn-icon-text btn-like " data-post-id="3897669" href="#" title="좋아요">
           <i class="fal fa-heart fa-sm default-text">
           </i>
           <i class="fas fa-sm fa-heart active-text">
           </i>
           <span class="count">
            6
           </span>
          </a>
          <div class="dropdown">
           <button aria-expanded="false" aria-label="더 보기" class="btn btn-icon btn-more" data-toggle="dropdown" title="더 보기" type="button">
            <i class="fal fa-ellipsis-h">
            </i>
           </button>
           <ul class="dropdown-menu dropdown-menu-right">
            <li>
             [ahref]
             
            </li>
            <li>
             [linkx]
             
            </li>
           </ul>
          </div>
         </div>
        </div>
       </section>
      </div>
      <div class="col-12">
       <section class="post-card has-img">
        <div class="post-card-body">
         <a class="post-card-img" href="/post/3477091">
          <div class="inner" style="background-image: url(https://d3mcojo3jv0dbr.cloudfront.net/2019/04/23/23/11/0ebb1e1f935dbfaa1f2e6ab2ff8adbef.png?w=400&amp;h=300&amp;q=65);">
          </div>
         </a>
         <div class="post-card-content">
          <div class="post-card-category">
           [ahref]
           
          </div>
          [ahref]
          
         </div>
        </div>
        <div class="post-card-footer">
         <div class="post-card-meta media-body">
          <a class="user-avatar-sm" data-content="" data-image="https://d3mcojo3jv0dbr.cloudfront.net/2018/09/04/05/10/c1eafdc5df1638bce76284a89fac0a38.png?w=64&amp;h=64&amp;q=65" data-title="북극여우" data-user-blog-id="244907" data-user-modal="1" data-user-profile-id="33861" href="#">
          </a>
          <div class="media-body">
           <h6 class="post-card-author text-truncate">
            [ahref]
            
           </h6>
           <div class="text-truncate">
            <time>
             2019.05.27
            </time>
            <span>
             조회 12
            </span>
           </div>
          </div>
         </div>
         <div class="post-card-action">
          [ahref]
          
          <div class="dropdown">
           <button aria-expanded="false" aria-label="더 보기" class="btn btn-icon btn-more" data-toggle="dropdown" title="더 보기" type="button">
            <i class="fal fa-ellipsis-h">
            </i>
           </button>
           <ul class="dropdown-menu dropdown-menu-right">
            <li>
             [ahref]
             
            </li>
            <li>
             [linkx]
             
            </li>
           </ul>
          </div>
         </div>
        </div>
       </section>
      </div>
      <div class="col-12">
       <section class="post-card has-img">
        <div class="post-card-body">
         [ahref]
         
         <div class="post-card-content">
          [ahref]
          
          [linkx]
          
         </div>
        </div>
        <div class="post-card-footer">
         <div class="post-card-meta media-body">
          [ahref]
          
          <div class="media-body">
           <h6 class="post-card-author text-truncate">
            [linkx]
            
           </h6>
           <div class="text-truncate">
            <time>
             2019.05.15
            </time>
            <span>
             조회 471
            </span>
           </div>
          </div>
         </div>
         <div class="post-card-action">
          [linkx]
          
          <div class="dropdown">
           <button aria-expanded="false" aria-label="더 보기" class="btn btn-icon btn-more" data-toggle="dropdown" title="더 보기" type="button">
            <i class="fal fa-ellipsis-h">
            </i>
           </button>
           <ul class="dropdown-menu dropdown-menu-right">
            <li>
             <a class="dropdown-item btn-clipboard" data-clipboard-text="http://posty.pe/9w5a8d" href="#">
              <span class="order-2">
               URL 복사
              </span>
              <i class="fal fa-link">
              </i>
             </a>
            </li>
            <li>
             <a class="dropdown-item btn-scrap " data-post-id="3820181" href="#">
              <span class="order-2 default-text">
               읽기 목록에 추가
              </span>
              <span class="order-2 active-text">
               읽기 목록에서 삭제
              </span>
              <i class="fal fa-bookmark default-text">
              </i>
              <i class="fas fa-bookmark active-text">
              </i>
             </a>
            </li>
           </ul>
          </div>
         </div>
        </div>
       </section>
      </div>
      <div class="col-12">
       <section class="post-card has-img">
        [area1][mkey1]<li>[ahref]</li><li>[area1][mkey1]</li>[area1][mkey1]
       </section>
      </div>
      <div class="col-12">
       <section class="post-card">
        <div class="post-card-body">
         <div class="post-card-content">
          <div class="post-card-category">
           [ahref]
           
          </div>
          [ahref]
          
         </div>
        </div>
        <div class="post-card-footer">
         <div class="post-card-meta media-body">
          [ahref]
          
          <div class="media-body">
           <h6 class="post-card-author text-truncate">
            [ahref]
            
           </h6>
           <div class="text-truncate">
            <time>
             2019.04.18
            </time>
            <span>
             조회 5
            </span>
           </div>
          </div>
         </div>
         <div class="post-card-action">
          [linkx]
          
          <div class="dropdown">
           <button aria-expanded="false" aria-label="더 보기" class="btn btn-icon btn-more" data-toggle="dropdown" title="더 보기" type="button">
            <i class="fal fa-ellipsis-h">
            </i>
           </button>
           <ul class="dropdown-menu dropdown-menu-right">
            <li>
             [ahref]
             
            </li>
            <li>
             [linkx]
             
            </li>
           </ul>
          </div>
         </div>
        </div>
       </section>
      </div>
      <div class="col-12">
       <section class="post-card has-img">
        <div class="post-card-body">
         [linkx]
         
         <div class="post-card-content">
          <div class="post-card-category">
           [linkx]
           
          </div>
          [linkx]
          
         </div>
        </div>
        <div class="post-card-footer">
         <div class="post-card-meta media-body">
          [linkx]
          
          <div class="media-body">
           <h6 class="post-card-author text-truncate">
            <a data-content="" data-image="https://d3mcojo3jv0dbr.cloudfront.net/2018/09/04/05/10/c1eafdc5df1638bce76284a89fac0a38.png?w=64&amp;h=64&amp;q=65" data-title="북극여우" data-user-blog-id="244907" data-user-modal="1" data-user-profile-id="33861" href="#" rel="author">
             북극여우
            </a>
           </h6>
           <div class="text-truncate">
            <time>
             2019.03.10
            </time>
            <span>
             조회 1753
            </span>
           </div>
          </div>
         </div>
         <div class="post-card-action">
          <a aria-label="좋아요" class="btn btn-icon-text btn-like " data-post-id="3467276" href="#" title="좋아요">
           <i class="fal fa-heart fa-sm default-text">
           </i>
           <i class="fas fa-sm fa-heart active-text">
           </i>
           <span class="count">
            17
           </span>
          </a>
          <div class="dropdown">
           <button aria-expanded="false" aria-label="더 보기" class="btn btn-icon btn-more" data-toggle="dropdown" title="더 보기" type="button">
            <i class="fal fa-ellipsis-h">
            </i>
           </button>
           <ul class="dropdown-menu dropdown-menu-right">
            <li>
             [linkx]
             
            </li>
            <li>
             [ahref]
             
            </li>
           </ul>
          </div>
         </div>
        </div>
       </section>
      </div>
      <div class="col-12">
       <section class="post-card has-img">
        <div class="post-card-body">
         [linkx]
         
         <div class="post-card-content">
          <div class="post-card-category">
           [linkx]
           
          </div>
          [linkx]
          
         </div>
        </div>
        <div class="post-card-footer">
         <div class="post-card-meta media-body">
          [ahref]
          
          <div class="media-body">
           <h6 class="post-card-author text-truncate">
            <a data-content="" data-image="https://d3mcojo3jv0dbr.cloudfront.net/2018/09/04/05/10/c1eafdc5df1638bce76284a89fac0a38.png?w=64&amp;h=64&amp;q=65" data-title="북극여우" data-user-blog-id="244907" data-user-modal="1" data-user-profile-id="33861" href="#" rel="author">
             북극여우
            </a>
           </h6>
           <div class="text-truncate">
            <time>
             2019.03.09
            </time>
            <span>
             조회 1921
            </span>
           </div>
          </div>
         </div>
         <div class="post-card-action">
          [linkx]
          
          <div class="dropdown">
           <button aria-expanded="false" aria-label="더 보기" class="btn btn-icon btn-more" data-toggle="dropdown" title="더 보기" type="button">
            <i class="fal fa-ellipsis-h">
            </i>
           </button>
           <ul class="dropdown-menu dropdown-menu-right">
            <li>
             [linkx]
             
            </li>
            <li>
             [ahref]
             
            </li>
           </ul>
          </div>
         </div>
        </div>
       </section>
      </div>
      <div class="col-12">
       <section class="post-card has-img">
        <div class="post-card-body">
         [linkx]
         
         <div class="post-card-content">
          <div class="post-card-category">
           [linkx]
           
          </div>
          [ahref]
          
         </div>
        </div>
        <div class="post-card-footer">
         <div class="post-card-meta media-body">
          [ahref]
          
          <div class="media-body">
           <h6 class="post-card-author text-truncate">
            [linkx]
            
           </h6>
           <div class="text-truncate">
            <time>
             2019.03.06
            </time>
            <span>
             조회 11452
            </span>
           </div>
          </div>
         </div>
         <div class="post-card-action">
          [ahref]
          
          <a aria-label="댓글" class="btn btn-icon-text btn-comment" href="/post/657100#comments" title="댓글">
           <i class="fal fa-comment fa-sm">
           </i>
           <span class="count">
            7
           </span>
          </a>
          <div class="dropdown">
           <button aria-expanded="false" aria-label="더 보기" class="btn btn-icon btn-more" data-toggle="dropdown" title="더 보기" type="button">
            [ahref]<li>[area1][keywordx]</li><li>[ahref]</li>[ahref]<li>[linkx]</li>
           </button>
           <ul class="dropdown-menu dropdown-menu-right">
            <li>
             [linkx]
             
            </li>
            <li>
             [linkx]
             
            </li>
           </ul>
          </div>
         </div>
        </div>
       </section>
      </div>
     </div>
     <nav class="nav-pagination">
      <ul class="pagination pagination">
       <li class="page-item disabled">
        [linkx]
        
       </li>
       <li class="page-item active">
        [linkx]
        
       </li>
       <li class="page-item">
        [ahref]
        
       </li>
       <li class="page-item">
        [linkx]
        
       </li>
       <li class="page-item">
        <a class="page-link" href="&amp;">
         <span>
          4
         </span>
        </a>
       </li>
       <li class="page-item">
        [ahref]
        
       </li>
       <li class="page-item">
        [linkx]
        
       </li>
      </ul>
     </nav>
    </div>
   </main>
   <aside class="tag-cloud on">
    <div class="container">
     <h3 class="section-title">
      [area1][mkey1][symbolx][pkeyx][symbolx][area1][keyword1][bracketl1][area1][keywordx][bracketr1][symbolx][bracketl2][area1][keywordx][bracketr2][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx]
     </h3>
     <ul class="tag-list d-flex flex-wrap">
      <li>
       [linkx]
       
      </li>
      <li>
       [ahref]
       
      </li>
      <li>
       [linkx]
       
      </li>
      <li>
       [linkx]
       
      </li>
     </ul>
    </div>
   </aside>
  </main>
  <footer class="footer slide-left" id="footer" role="contentinfo">
   <div class="container">
    <h6 class="sr-only">
     소셜
    </h6>
    <ul class="social-links d-flex justify-content-center flex-wrap">
    </ul>
    <div class="copyright">
     © 2019 여우집.
    </div>
   </div>
  </footer>
  <nav aria-labelledby="user-menu-toggle" id="user-menu" role="navigation" tabindex="-1">
   <div class="logo-wrapper">
    [linkx]
    
    <div class="dropdown-text text-muted">
     창작자와 팬을 위한 커뮤니티,
     <br/>
     포스타입에 오신 것을 환영해요!
    </div>
   </div>
   <div class="dropdown-divider">
   </div>
   <div>
    [linkx]
    
   </div>
   <div>
    [ahref]
    
   </div>
   <div>
    [ahref]
    
   </div>
   <div>
    [ahref]
    
   </div>
   <div class="dropdown-divider">
   </div>
   <div>
    <a class="dropdown-item" href="/signup#email">
     <span class="icon-wrapper icon-wrapper-sm">
      <i class="fal fa-envelope">
      </i>
     </span>
     이메일로 회원가입
    </a>
   </div>
   <div>
    [linkx]
    
   </div>
   <div class="dropdown-divider">
   </div>
   <div>
    [linkx]
    
   </div>
   <div>
    [ahref]
    
   </div>
  </nav>
  <div aria-hidden="true" class="modal fade" id="easy-login" role="dialog" tabindex="-1">
   <div class="modal-dialog modal-dialog-centered auth-dialog" role="document">
    <div class="modal-content dialog-content">
     <button aria-label="닫기" class="btn btn-icon btn-close" data-dismiss="modal" type="button">
      <i class="fal fa-times fa-lg">
      </i>
     </button>
     <h1>
      [area1][mkey1][symbolx][pkeyx][symbolx][area1][keyword1][bracketl1][area1][keywordx][bracketr1][symbolx][bracketl2][area1][keywordx][bracketr2][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx]
     </h1>
     <div id="auth-tabs">
      <div class="auth-options d-flex flex-column align-items-center" id="auth-tab-login">
       [ahref]
       
       [ahref]
       
       [ahref]
       
       [ahref]
       
       [ahref]
       
       <div class="btn-wrapper">
        <span class="mr-1">
         계정이 없으세요?
        </span>
        [linkx]
        
       </div>
      </div>
      <div class="auth-options d-flex flex-column align-items-center" id="auth-tab-signup">
       [ahref]
       
       [ahref]
       
       [linkx]
       
       [linkx]
       
       [ahref]
       
       <div class="btn-wrapper">
        <span class="mr-1">
         이미 계정이 있으세요?
        </span>
        [ahref]
        
       </div>
      </div>
     </div>
     <small class="form-text form-text-sm">
      SNS로 회원가입 시 포스타입의
      [ahref]
       [area1][mkey1][area1][mkey1][ahref][area1][mkey1][ahref][area1][keywordx][area1][mkey1][linkx][area1][keywordx][symbolx][area1][keywordx][symbolx][bracketl14][area1][keywordx][bracketr14][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][bracketl15][area1][keywordx][bracketr15][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][ahref]
      
      과
      [ahref]
      
      에 동의한 것으로 간주합니다.
     </small>
    </div>
   </div>
  </div>
  <div aria-hidden="true" class="pswp" role="dialog" tabindex="-1">
   <div class="pswp__bg">
   </div>
   <div class="pswp__scroll-wrap">
    <div class="pswp__container">
     <div class="pswp__item">
     </div>
     <div class="pswp__item">
     </div>
     <div class="pswp__item">
     </div>
    </div>
    <div class="pswp__ui pswp__ui--hidden">
     <li>[pkeyx]</li>[linkx]<li>[area1][keywordx]</li><li>[linkx]</li>
    </div>
   </div>
  </div>
  <div class="modal auth-modal" id="login-modal" role="dialog" tabindex="-1">
   <div class="modal-dialog" role="document">
    <div class="modal-content">
     <div class="modal-body">
     </div>
    </div>
   </div>
  </div>
  <div class="modal auth-modal" id="signup-modal" role="dialog" tabindex="-1">
   <div class="modal-dialog" role="document">
    <div class="modal-content">
     <div class="modal-body">
     </div>
    </div>
   </div>
  </div>
  <div aria-labelledby="support-modal-label" class="modal" id="modal-user" role="dialog" tabindex="-1">
   <div class="modal-dialog modal-sm" role="document">
    <div class="modal-content">
     <div class="modal-body text-center">
      <h5 class="modal-title" id="modal-user-nickname">
      </h5>
      <div class="small" id="modal-user-bio">
      </div>
      <div class="actions mt-3">
       <button class="btn btn-secondary btn-send-message" data-user-id="" type="button">
        <i class="fal fa-envelope">
        </i>
        <span class="text">
         메시지 쓰기
        </span>
       </button>
      </div>
      <button aria-label="닫기" class="btn btn-icon btn-close" data-dismiss="modal" type="button">
       <i class="fal fa-times">
       </i>
      </button>
     </div>
     <div class="modal-body" id="modal-user-blog-container">
      <h6 class="small">
       참여중인 블로그
      </h6>
      <div id="modal-user-blog-list">
       [ahref]
       
      </div>
      <div id="modal-user-blog-none">
       <small class="text-muted">
        참여중인 블로그가 없습니다.
       </small>
      </div>
     </div>
    </div>
   </div>
  </div>
  <div class="modal" id="conversation" tabindex="-1">
   <div class="modal-dialog" role="document">
    <div class="modal-content pt-popover d-flex flex-column justify-content-between">
     <div class="conversation-header d-flex align-items-center justify-content-center">
      <div class="user-link d-flex align-items-center">
       <h2 class="user-name text-truncate" id="conversation-title">
        <b>[area1][mkey1][symbolx][pkeyx][symbolx][area1][keyword1][bracketl1][area1][keywordx][bracketr1][symbolx][bracketl2][area1][keywordx][bracketr2][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx]</b>
       </h2>
      </div>
      <button aria-label="닫기" class="btn btn-icon btn-close" data-dismiss="modal" type="button">
       <i class="far fa-chevron-left fa-lg d-md-none">
       </i>
       <i class="fal fa-times d-none d-md-inline">
       </i>
      </button>
      <div class="dropdown">
       [area1][keywordx][symbolx][area1][keywordx][symbolx][bracketl1][area1][keywordx][bracketr1][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx]<li>[area1][mkey1]</li><li>[area1][keywordx]</li><li>[ahref]</li><li>[linkx]</li>
      </div>
     </div>
     <div class="conversation-main" id="conversation-main">
     </div>
     <div class="conversation-footer d-flex justify-content-center" id="conversation-disabled">
      메시지를 허용하지 않는 사용자입니다.
     </div>
     <form action="/message/send" class="conversation-footer d-flex" data-disable-ajax="true" id="conversation-enabled" method="post">
     </form>
    </div>
   </div>
  </div>
  <div class="modal fade share-modal" id="share">
   <div class="modal-dialog">
    <div class="modal-content">
     <div class="modal-header pb-0">
      <h5 class="modal-title">
       공유하기<li>[linkx]</li>[pkeyx]<li>[area1][mkey1]</li>
      </h5>
      <button aria-label="닫기" class="btn btn-icon btn-close" data-dismiss="modal" type="button">
       <i class="fal fa-times">
       </i>
      </button>
     </div>
     <div class="modal-body">
      <div class="share-group">
       [linkx]
       
       <a class="btn share-btn btn-share-facebook" href="">
        <i class="fab fa-facebook text-facebook">
        </i>
        <span>
         페이스북
        </span>
       </a>
      </div>
      <div class="form-group">
       <label class="sr-only" for="link-url">
        내용
       </label>
       <div class="input-group">
        <span class="input-group-append">
         <button class="btn btn-secondary btn-clipboard" data-clipboard-target="#link-url" type="button">
          URL 복사
         </button>
        </span>
       </div>
      </div>
     </div>
    </div>
   </div>
  </div>
  <div aria-labelledby="confirm-modal-label" class="modal fade" id="modal-confirm" role="dialog" tabindex="-1">
   <div class="modal-dialog modal-sm" role="document">
    <div class="modal-content">
     <div class="modal-header pb-0">
      <h5 class="modal-title" id="confirm-modal-label">
       확인
      </h5>
      <button aria-label="닫기" class="btn btn-icon btn-close" data-dismiss="modal" type="button">
       <i class="fal fa-times">
       </i>
      </button>
     </div>
     <div class="modal-body">
      <div id="modal-confirm-message">
      </div>
     </div>
     <div class="modal-footer">
      <button class="btn btn-secondary" data-dismiss="modal" id="modal-confirm-no" type="button">
       아니오
      </button>
      <button class="btn btn-primary" data-dismiss="modal" id="modal-confirm-yes" type="button">
       예
      </button>
     </div>
    </div>
   </div>
  </div>
  <div aria-labelledby="warning-modal-label" class="modal fade" id="modal-alert" role="dialog" tabindex="-1">
   <div class="modal-dialog modal-sm" role="document">
    <div class="modal-content">
     <div class="modal-header pb-0">
      <h5 class="modal-title" id="warning-modal-label">
       알림
      </h5>
      <button aria-label="닫기" class="btn btn-icon btn-close" data-dismiss="modal" type="button">
       <i class="fal fa-times">
       </i>
      </button>
     </div>
     <div class="modal-body">
      <div id="modal-alert-message">
      </div>
     </div>
     <div class="modal-footer">
      <button class="btn btn-secondary focus" data-dismiss="modal" id="modal-alert-confirm" type="button">
       확인
      </button>
     </div>
    </div>
   </div>
  </div>
  <div class="loading">
   <div class="spinner">
    <div class="bounce1">
    </div>
    <div class="bounce2">
    </div>
    <div class="bounce3">
    </div>
   </div>
  </div>
  <b style="color:black;background-color:#a0ffff">
   jnice09-ipp30-wq-zq-0492
  </b>
 </body>
</html>|<---