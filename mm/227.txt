--->|<!DOCTYPE html>
<html lang="ko_KR" xml:lang="ko_KR" xmlns="http://www.w3.org/1999/xhtml">
 <head>
  <meta content="IE=edge" http-equiv="X-UA-Compatible"/>
  <meta charset="utf-8"/>
  <meta content="text/css" http-equiv="Content-Style-Type"/>
  <meta content="" name="showLightboxOnLoad"/>
  <meta content="" name="onLoadLightboxURI"/>
  <meta content="width=device-width, initial-scale=1, maximum-scale=1" name="viewport"/>
  <title data-component-endpoint="/aries-search/v1/destinationMetaTile.comp" data-component-id="DestinationMetaTile_01_55d7" data-component-name="destinationMetaTile">
   [mkey1][symbolx][pkey1][symbolx][keyword1][bracketl1][keywordx][bracketr1][symbolx][bracketl2][keywordx][bracketr2][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx]
  </title>
  <meta content="[mkey1][symbolx][pkey3][symbolx][keyword1][bracketl1][keywordx][bracketr1][symbolx][bracketl2][keywordx][bracketr2][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx]" data-component-endpoint="/aries-search/v1/destinationMetaTile.comp" data-component-id="DestinationMetaTile_01_55d7" data-component-name="destinationMetaTile" name="keywords"/>
  <meta content="[mkey1][symbolx][pkey2][symbolx][keyword1][bracketl1][keywordx][bracketr1][symbolx][bracketl2][keywordx][bracketr2][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx]" data-component-endpoint="/aries-search/v1/destinationMetaTile.comp" data-component-id="DestinationMetaTile_01_55d7" data-component-name="destinationMetaTile" name="description"/>
 </head>
 <body class="t-bg-digitalgrey" data-hide-print="">
  [linkx]
  
  <div class="m-page-container t-bg-extralightgrey" id="page-container">
   <header class="m-header">
    <div class="l-header-outer-wrapper l-header-destination-wrapper">
     <div class="univnav-breadcrumbs-wrapper t-bg-standard-20 l-display-block">
      <div class="l-m-container-fullbleed">
       <div id="destinationTitleb4b2">
        <div class="tile-destination-breadcrumbs l-container" data-component-endpoint="/aries-search/v1/destinationTitle.comp" data-component-id="destinationTitle_02_b4b2" data-component-name="destinationTitle">
         <ul class="t-list-unbulletted breadcrumb-list">
          <li class="l-display-inline-block t-font-s l-padding-none">
           [linkx]
           
          </li>
          <li class="l-display-inline-block t-font-s l-padding-none">
           [linkx]
           
           <span class="t-color-standard-10 l-margin-right-quarter">
            /
           </span>
          </li>
          <li class="l-display-inline-block t-font-s l-padding-none">
           <span class="destination-breadcrumb t-color-standard-10" itemprop="breadcrumb">
            파리호텔
           </span>
          </li>
         </ul>
        </div>
       </div>
      </div>
     </div>
     <div class="m-dimmer-section-nav t-dim-cover is-hidden">
     </div>
     <div class="m-header-container t-bg-standard-20 t-border-header mi-header">
      <div class="l-header-inner-wrapper l-m-container-fullbleed">
       <div class="l-menu js-toggle-menu l-float-left l-l-display-none" data-component-endpoint="/aries-common/v1/univNavHamburgerMenu.comp" data-component-id="UnivNavHamburgerMenu_01_cd26" data-component-name="univNavHamburgerMenu">
        [ahref]
        
       </div>
       <div class="l-logo l-display-inline-block l-float-left l-pos-relative l-l-margin-right l-overflow-hidden">
        <div id="ProgramLogoe5a7">
         <div class="tile-program-logo" data-component-endpoint="/aries-common/v1/programLogo.comp" data-component-id="ProgramLogo_01_e5a7" data-component-name="programLogo">
          [ahref]
          
         </div>
        </div>
       </div>
       <div class="l-upper-header l-right-align l-clear">
        <ul class="l-right-container l-display-inline-block l-clear">
         <li class="l-right-subsection l-padding-top-none l-padding-right-none l-padding-left-none l-l-padding-bottom-none l-l-float-left l-clear l-display-none l-l-display-block">
          <ul class="l-clear">
           <li class="l-padding-none t-global-nav-items l-float-left" id="QuickLinkItembabd">
            [ahref]
            
           </li>
           <li class="l-padding-none t-global-nav-items l-float-left" id="QuickLinkItem9402">
            [ahref]
            
           </li>
          </ul>
         </li>
         <li class="l-padding-none t-global-nav-items l-float-left" id="QuickLinkItem0f23">
          [linkx]
          
         </li>
         <li class="l-padding-none t-global-nav-items l-float-left" id="QuickLinkItem2ff5">
          [linkx]
          
         </li>
        </ul>
       </div>
       <div class="l-lower-header">
        <div class="l-overlay-parent l-l-display-block l-display-none">
         <div class="l-back-button t-bg-standard-20 l-pos-relative l-display-none">
          [linkx]
          
         </div>
         <div class="l-overlay-container l-container">
          <ul class="l-header-navigation l-margin-top-one-and-half l-l-margin-top-three-quarters">
           <li class="l-nav-item l-l-display-inline-block l-l-margin-left-five-quarters l-padding-none js-flydown-trigger" id="MainNavLink89ca">
            [linkx]
            
            <div class="l-panel l-width-max t-bg-standard-20 l-pos-absolute l-pos-left is-hidden">
             <div class="l-container">
              <div class="mainnav-panel l-margin-top-double l-clear">
               <div class="tile-hsearch search-saved-hotels-tabs " data-autocomplete-supported-types="geocode" data-brands="false" data-component-endpoint="/aries-search/v2/searchForm.comp" data-component-id="SearchForm_03_bac1" data-component-name="searchFormHorizontalFindHotels" data-custom-auto-suggest="true" data-done-button-label="완료" data-enable-google-places-api="true" data-enable-user-location="false" data-id-prefix="LZSHS3RU" data-message-groupmessage="객실을 4실 이상 요청하신 경우 요청하신 특별 요금을 이용할 수 없습니다. 단체 객실 요금을 요청하려면 ‘확인’을 클릭하세요. 검색을 변경하려면 ‘취소’를 클릭하세요." data-message-roomlimitmessage="객실을 4실 이상 요청하는 경우 주변 날짜 검색을 완료할 수 없습니다. 검색을 수정하세요." data-message-specialratemessage="날짜를 지정하지 않고 특별 요금을 요청하셨습니다. 고객님의 편의를 위해 이 정보를 저장할 수 있지만, 날짜를 지정하지 않으면 요금과 이용 가능 여부를 확인할 수 없습니다. ‘확인’을 클릭하여 날짜를 지정하지 않고 계속하거나, ‘취소’를 클릭하여 다시 돌아가서 검색 옵션을 변경하세요." data-message-userewardsptsmessage="객실을 4실 이상 요청하신 경우 메리어트 본보이 포인트를 사용할 수 없습니다. 특별 단체 객실 요금을 요청하려면 ‘확인’을 클릭하세요. 검색을 변경하려면 ‘취소’를 클릭하세요." data-radius-oriented-countries="JP" data-roomkeyflag="false" data-selected-text="선택함" data-suppress-google-api="true" data-target="hotel" id="saved-search-tabs">
                <div class="m-search-tabs t-subtab advanced-search-form">
                 <div class="m-homepage-hsearch l-hsearch-2 is-opened ">
                  <div id="propertyedit-search-panel">
                   <div class="is-hidden l-takeover-head l-datepicker-open">
                    <button aria-label="닫기" class="mfp-close js-form-close l-hsearch-close" type="button">
                    </button>
                   </div>
                   <form action="/search/submitSearch.mi" class="l-em-reset mi-special-rates-drawer has-flexdate validate-search-form js-location-nearme " data-default-endpoint="/search/submitSearch.mi" data-group-search-endpoint="/meetings/search-hotels.mi?isTransient=true" data-is-group-search-applicable="true" data-suggestion-endpoint-mapping='{"property":"/reservation/availabilitySearch.mi"}' id="edit-search-form" method="get" novalidate="novalidate">
                    <div class="m-field-wrap l-hsearch-labels l-clearfix">
                     <div class="m-field-control l-margin-bottom-three-quarters l-datepicker-open l-xl-col-4 l-pos-relative js-clearinput l-hsearch-loc l-clear clearfix js-location js-auto-complete " data-options='{"autoCompleteURL":"/aries-search/v1/autoComplete.comp", "permittedLocales": "en-GB,en-AU,en-US", "suggestionSortOrder": "city,property,airport,poi,state,country", "placesUrl": "/aries-search/v2/autoComplete.comp"}'>
                      <div aria-live="assertive" class="is-hidden-label">
                      </div>
                      <label class="field-title " for="LZSHS3RU_search-location">
                       여행 목적지
                      </label>
                      <div class="l-display-flex">
                       <span class="l-icon-inline t-icon t-icon-navigation-close js-clear-trigger" title="지우기">
                       </span>
                      </div>
                     </div>
                     <div class="l-find-container js-find-container l-xl-col-4 l-pos-rel ">
                      <div class="l-h-field">
                      </div>
                      <span class="icon t-icon l-float-right t-icon-search t-icon-brand">
                      </span>
                     </div>
                     <div class="date-picker-overlay">
                     </div>
                     <div class="m-field-control m-date-picker l-date-picker l-margin-bottom-three-quarters l-pos-relative l-xs-col-4 l-xl-col-4 " data-associate-flow="" data-is-non-dated-search="false" data-trigger="false">
                      <span class="field-title ">
                       날짜
                      </span>
                      <span class="nights-count">
                      </span>
                      <div class="js-datepick-container l-datepick-container l-pos-rel is-flex-hidden t-singlefield " data-check-in-label="체크인" data-check-out-label="체크아웃" data-country-code="KR" data-takeover-label="날짜">
                       <div class="js-toggle-picker l-toggle-picker js-moreoptions-expander-click l-display-block l-h-field l-padding-left-half t-no-decor t-blk">
                        <label class="is-hidden" for="LZSHS3RU_hotel-fromToDate">
                         기간
                        </label>
                        <fieldset>
                         <legend>
                          <label class="is-hidden" for="LZSHS3RU_flexible-date-search">
                           주변 날짜 검색
                          </label>
                         </legend>
                        </fieldset>
                        <div aria-live="polite" class="ccheckin-container date-picker-container">
                         <span class="prev-checkin t-icon-arrow-new-left focus-elem">
                         </span>
                         <span class="next-checkin t-icon-arrow-right focus-elem">
                         </span>
                        </div>
                        <label class="l-date is-hidden-label" for="LZSHS3RU_hotel-fromDate">
                         체크인
                        </label>
                        <span class="l-date l-date-format is-hidden-label">
                         yy.MM.dd
                        </span>
                        <span class="l-date-part">
                        </span>
                        <div class="l-flex l-flex-display js-flex-display focus-elem" data-label="조정 가능">
                        </div>
                        <div aria-live="polite" class="ccheckout-container date-picker-container">
                         <span class="prev-checkout t-icon-arrow-new-left focus-elem">
                         </span>
                         <span class="next-checkout t-icon-arrow-right focus-elem">
                         </span>
                        </div>
                        <label class="l-date is-hidden-label" for="LZSHS3RU_hotel-toDate">
                         체크아웃
                        </label>
                        <span class="l-date is-hidden-label">
                         yy.MM.dd
                        </span>
                        <span class="l-toggle-active">
                        </span>
                       </div>
                       <div class="js-date-pick-container" data-options='{"flexdates":"일정 조정이 가능하신가요", "specificdates":"특정 날짜를 원하시나요", "flexibleInMonthTitleInitial":"월/", "flexibleSelected":"false", "flexibleNight":"1", "monthFullList":"1월,2월,3월,4월,5월,6월,7월,8월,9월,10월,11월,12월", "monthShortList":"1월,2월,3월,4월,5월,6월,7월,8월,9월,10월,11월,12월", "weekdayFullList":"일요일,월요일,화요일,수요일,목요일,금요일,토요일", "weekdayShortList":"일,월,화,수,목,금,토", "nightLabel":"박", "nightsLabel":"박", "doneLabel":"완료", "stayLabel":"투숙", "clearText":"날짜 지우기", "resetText":"입력란 재설정", "isDestPage":"", "showRedEye":"", "redEyeValue":"", "showKGroupDate": "false", "kGroupDate": "06/19/2021", "nextMonthLabel": "다음 달", "prevMonthLabel": "이전 달", "ofLabel": "/", "nightsLowerLabel": "", "nightLowerLabel": "", "yearLabel": "연도" }'>
                        <div class="new-container tabbing">
                         <div class="tab">
                          <span aria-label="선택함 특정 날짜를 원하시나요" class="tab1 tabs selected focus-elem" data-container="tab-container1" data-tab-value="특정 날짜를 원하시나요" role="button">
                           특정 날짜를 원하시나요
                          </span>
                          <span class="tab2 tabs focus-elem " data-container="tab-container2" data-tab-value="일정 조정이 가능하신가요" role="button">
                           일정 조정이 가능하신가요
                          </span>
                         </div>
                         <div class="tab-container tab-container1">
                          <li>[keywordx][symbolx][keywordx][symbolx][bracketl13][keywordx][bracketr13][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx]</li>[mkey1]<li>[mkey1]</li><li>[ahref]</li>
                         </div>
                         <div class="tab-container tab-container2">
                          <div class="m-flex-frame-wrapper">
                           <div class="m-flex-frame">
                            <div aria-live="polite" class="l-s2-stepper">
                             <span class="t-font-bold l-em-reset l-padding-top how-many-nights-label">
                              투숙일 수
                             </span>
                             <a aria-label="삭제 박" class="js-flex-stepper l-minus js-minus t-icon-minus focus-elem" href="#">
                              <span class="date-labelledby is-screenreader-only">
                               삭제 박
                              </span>
                             </a>
                             <div class="js-stepper-input l-s2-stepper-input l-no-ie-clear" id="LZSHS3RU_length-of-stay-input" maxlength="1">
                              1
                             </div>
                             <span class="js-stepper-val l-s2-stepper-val">
                              1
                             </span>
                             [linkx]
                             
                             <div class="is-hidden">
                              투숙일 수
                             </div>
                             <label class="is-hidden-label" for="LZSHS3RU_length-of-stay">
                              lengthOfStay
                             </label>
                             <select class="js-flex-input is-hidden" id="LZSHS3RU_length-of-stay" name="lengthOfStay">
                              <option value="1">
                               1
                              </option>
                              <option value="2">
                               2
                              </option>
                              <option value="3">
                               3
                              </option>
                              <option value="4">
                               4
                              </option>
                              <option value="5">
                               5
                              </option>
                              <option value="6">
                               6
                              </option>
                              <option value="7">
                               7
                              </option>
                              <option value="8">
                               8
                              </option>
                              <option value="9">
                               9
                              </option>
                             </select>
                            </div>
                            <div class="l-flex-months">
                             <div class="l-flex-months-holder js-flex-months-holder">
                             </div>
                            </div>
                           </div>
                          </div>
                          <div class="flexible-button-container">
                           <div class="flex-reset-button focus-elem">
                            입력란 재설정
                           </div>
                           <div class="flex-done-button m-button m-button-primary focus-elem">
                            완료
                           </div>
                          </div>
                         </div>
                        </div>
                        <div class="l-done-container">
                         <button class="js-done-date l-done-date m-button m-button-primary">
                          완료
                          <span class="mobile-night-container">
                           (
                           <span class="nights-count nights-count-mobile">
                           </span>
                           )
                          </span>
                         </button>
                        </div>
                       </div>
                      </div>
                     </div>
                     <div class="m-field-control l-rooms-guests js-rooms-guests js-hform-fields l-em-reset l-s-col-4 l-xl-col-4 l-margin-bottom-three-quarters l-xl-last-col ">
                      <span class="field-title">
                       객실 &amp; 투숙객
                      </span>
                      [ahref]
                      
                      <div aria-expanded="false" class="l-rooms-guests-panel js-rooms-guests-panel l-pos-rel is-hidden" data-takeover-label="객실 &amp; 투숙객">
                       <div class="rooms-guest-wrapper">
                        <div class=" clearfix">
                         <div class="l-rooms js-rooms">
                          <div class="labelContainer field-title">
                           객실
                          </div>
                          <div class="clearfix l-s2-stepper">
                           <label class="is-hidden-label" for="LZSHS3RU_roomCountBox">
                            객실 수
                           </label>
                           [ahref]
                           
                           [ahref]
                           
                           <label class="is-hidden-label" for="LZSHS3RU_roomCount">
                            객실 수
                           </label>
                           <select class="is-hidden roomCount js-room-count" id="LZSHS3RU_roomCount" name="roomCount">
                            <option selected="selected" value="1">
                             1 객실
                            </option>
                            <option value="2">
                             2 객실
                            </option>
                            <option value="3">
                             3 객실
                            </option>
                           </select>
                          </div>
                         </div>
                         <div class="js-all-guests">
                          <div class="l-adults js-adults js-guests">
                           <div class="labelContainer field-title">
                            성인
                            <span class="l-guests-error-msg">
                             (최대 인원: 객실당 6명)
                            </span>
                           </div>
                           <div class="clearfix l-s2-stepper">
                            <label class="is-hidden-label" for="LZSHS3RU_guestCountBox">
                             투숙객 수
                            </label>
                            [ahref]
                            
                            [ahref]
                            
                            <label class="is-hidden-label" for="LZSHS3RU_guestCount">
                             투숙객 수
                            </label>
                            <select class="is-hidden guestCount" id="LZSHS3RU_guestCount" name="numAdultsPerRoom">
                             <option selected="selected" value="1">
                              1
                             </option>
                             <option value="2">
                              2
                             </option>
                             <option value="3">
                              3
                             </option>
                             <option value="4">
                              4
                             </option>
                             <option value="5">
                              5
                             </option>
                             <option value="6">
                              6
                             </option>
                            </select>
                           </div>
                          </div>
                          <div class="l-children js-children js-guests">
                           <div class="labelContainer field-title">
                            어린이
                            <span class="l-guests-error-msg">
                             (최대 인원: 객실당 6명)
                            </span>
                           </div>
                           <div class="clearfix l-s2-stepper">
                            <label class="is-hidden-label" for="LZSHS3RU_childrenCountBox">
                             어린이 수
                            </label>
                            [ahref]
                            
                            [linkx]
                            
                            <label class="is-hidden-label" for="LZSHS3RU_childrenCount">
                             어린이 수
                            </label>
                            <select class="childrenCount is-hidden" id="LZSHS3RU_childrenCount" name="childrenCount">
                             <option selected="selected" value="0">
                              0
                             </option>
                             <option value="1">
                              1
                             </option>
                             <option value="2">
                              2
                             </option>
                             <option value="3">
                              3
                             </option>
                             <option value="4">
                              4
                             </option>
                             <option value="5">
                              5
                             </option>
                            </select>
                           </div>
                          </div>
                          <p class="l-age-based js-age-based is-hidden">
                           (연령별 요금 이용 가능)
                          </p>
                          <div class="js-ages-append l-padding-bottom" id="LZSHS3RU_l-ages-append">
                          </div>
                          <div class="js-age-template is-hidden " id="LZSHS3RU_l-age-template">
                           <div class="l-child-info field-title">
                            <span class="l-childnum-title">
                             어린이 1 : 연령
                            </span>
                            <span class="l-first-room-text">
                             (필수 항목)
                            </span>
                           </div>
                           <div class="clearfix l-s2-stepper">
                            <label class="is-hidden-label" for="LZSHS3RU_childAgesBox">
                             어린이 수
                            </label>
                            [linkx]
                            
                            [linkx]
                            
                            <label class="is-hidden-label" for="LZSHS3RU_childrenAgesNum">
                             어린이 수
                            </label>
                            <select class="childrenAgesNum js-children-age is-hidden" id="LZSHS3RU_childrenAgesNum">
                             <option value="-1">
                              연령
                             </option>
                             <option value="0">
                              1 미만
                             </option>
                             <option value="1">
                              1
                             </option>
                             <option value="2">
                              2
                             </option>
                             <option value="3">
                              3
                             </option>
                             <option value="4">
                              4
                             </option>
                             <option value="5">
                              5
                             </option>
                             <option value="6">
                              6
                             </option>
                             <option value="7">
                              7
                             </option>
                             <option value="8">
                              8
                             </option>
                             <option value="9">
                              9
                             </option>
                             <option value="10">
                              10
                             </option>
                             <option value="11">
                              11
                             </option>
                             <option value="12">
                              12
                             </option>
                             <option value="13">
                              13
                             </option>
                             <option value="14">
                              14
                             </option>
                             <option value="15">
                              15
                             </option>
                             <option value="16">
                              16
                             </option>
                             <option value="17">
                              17
                             </option>
                            </select>
                           </div>
                          </div>
                         </div>
                        </div>
                       </div>
                       <div class="l-margin-top-none l-rooms-guests-footer clearfix l-clear t-bg-standard-20 t-border-standard-120">
                        <div class="rooms-guests-done js-done l-float-left is-hidden">
                         [linkx]
                         
                        </div>
                        <div class="rooms-guests-clear js-reset l-margin-top">
                         [linkx]
                         
                        </div>
                       </div>
                      </div>
                     </div>
                     <div class="m-field-control l-special-rates l-em-reset l-s-col-4 l-xl-col-4 js-hform-fields">
                      <span class="field-title">
                       특별 요금
                      </span>
                      [ahref]
                      
                      <div class="l-h-toggle-cont special-rates-section js-toggle-container is-hidden" data-takeover-label="특별 요금">
                       <div class="">
                        <ul>
                         <li class="l-h-toggle-opt">
                          [ahref]
                          
                         </li>
                         <li class="l-h-toggle-opt">
                          [ahref]
                          
                         </li>
                         <li class="l-h-toggle-opt">
                          [linkx]
                          
                         </li>
                        </ul>
                        <div class="code-container">
                         <div class="special-rate-code corp-code is-hidden">
                          <p>
                           코드 입력
                          </p>
                          <label class="is-hidden-label" for="LZSHS3RU_corporateCode">
                           corporateCode
                          </label>
                         </div>
                        </div>
                       </div>
                      </div>
                     </div>
                     <div class="m-field-control l-s-col-4 l-xl-col-4 l-use-rewards-points usePoints has-inline-labels js-hform-fields use-rewards-custom">
                      <div class="l-userewards-checkbox " id="rewards-use-search">
                       <fieldset class="t-border-none l-margin-none l-padding-none">
                        <legend aria-hidden="true" class="is-hidden">
                         useRewardsPoints
                        </legend>
                        <label class="l-userewards-checkmark" for="LZSHS3RU_useRewardsPoints">
                         포인트 사용
                        </label>
                       </fieldset>
                      </div>
                     </div>
                     <div class="l-s-col-4 l-xl-col-4 l-xl-last-col l-hsearch-find">
                      <button class="analytics-click js-is-roomkey-enabled m-button m-button-primary" data-analytics="{'location':'searchForm'}" title="" type="submit">
                       호텔 찾기
                      </button>
                     </div>
                    </div>
                   </form>
                  </div>
                 </div>
                </div>
               </div>
               <div id="CardLinks304f">
                <ul class="m-ctaLinks l-l-col-12 l-s-col-4 l-s-col-last l-m-col-last l-m-col-8 " data-component-endpoint="/aries-common/v1/cardLinks.comp" data-component-id="CardLinks_02_304f" data-component-name="cardLinks">
                 <li class="l-s-col-4 l-m-col-8 l-l-col-12 l-padding-none l-s-col-last l-m-col-last">
                  [ahref]
                  
                 </li>
                 <li class="l-s-col-4 l-m-col-8 l-l-col-12 l-padding-none l-s-col-last l-m-col-last">
                  [linkx]
                  
                 </li>
                 <li class="l-s-col-4 l-m-col-8 l-l-col-12 l-padding-none l-s-col-last l-m-col-last">
                  [linkx]
                  
                 </li>
                 <li class="l-s-col-4 l-m-col-8 l-l-col-12 l-padding-none l-s-col-last l-m-col-last">
                  [linkx]
                  
                 </li>
                 <li class="l-s-col-4 l-m-col-8 l-l-col-12 l-padding-none l-s-col-last l-m-col-last">
                  [ahref]
                  
                 </li>
                </ul>
               </div>
              </div>
              [ahref]
              
             </div>
            </div>
           </li>
           <li class="l-nav-item l-l-display-inline-block l-l-margin-left-five-quarters l-padding-none js-flydown-trigger" id="MainNavLink2bbc">
            [linkx]
            
            <div class="l-panel l-width-max t-bg-standard-20 l-pos-absolute l-pos-left is-hidden">
             <div class="l-container">
              <div class="mainnav-panel l-margin-top-double l-clear">
               <div class="mainnav-panel-col l-s-col-4 l-m-col-8 l-l-col-6 l-s-col-last l-m-col-last">
                <div id="CardLinksa2ef">
                 <ul class="m-ctaLinks l-l-col-6 l-s-col-4 l-s-col-last l-m-col-last l-m-col-8 " data-component-endpoint="/aries-common/v1/cardLinks.comp" data-component-id="CardLinks_01_a2ef" data-component-name="cardLinks">
                  <li class="l-s-col-4 l-m-col-8 l-l-col-12 l-padding-none l-s-col-last l-m-col-last">
                   [ahref]
                   
                  </li>
                  <li class="l-s-col-4 l-m-col-8 l-l-col-12 l-padding-none l-s-col-last l-m-col-last">
                   [ahref]
                   
                  </li>
                 </ul>
                </div>
                <div id="CardLinks91e9">
                </div>
               </div>
               <div class="mainnav-panel-col l-s-col-4 l-m-col-8 l-l-col-6 l-s-col-last l-m-col-last l-l-col-last">
                <div class="t-uniform-height" id="CardArticleb253">
                 <section class="tile-card-article l-template-3 l-layout-3A l-left-align l-s-col-4 l-m-col-8 l-l-col-12 l-xl-col-12 l-display-inline-block" data-component-endpoint="/aries-common/v1/cardArticle.comp" data-component-id="CardArticle_04_b253" data-component-name="cardArticle">
                  <div class="img-wrapper l-s-col-4 l-l-col-6">
                   <picture data-param-desktop="downsize=1024px:*" data-param-large="downsize=1180px:*" data-param-mobile="downsize=600px:*" data-param-tablet="downsize=768px:*">
                    <source data-srcset-large="https://cache.marriott.com/marriottassets/universal-nav/deals/MR_UnivNav_Deals_clsc.jpg?interpolation=progressive-bilinear&amp;_queryParam_ , https://cache.marriott.com/marriottassets/universal-nav/deals/MR_UnivNav_Deals_clsc.jpg 2x" media="(min-width: 1025px)"/>
                    <source data-srcset-desktop="https://cache.marriott.com/marriottassets/universal-nav/deals/MR_UnivNav_Deals_clsc.jpg?interpolation=progressive-bilinear&amp;_queryParam_ , https://cache.marriott.com/marriottassets/universal-nav/deals/MR_UnivNav_Deals_clsc.jpg 2x" media="(min-width: 769px)"/>
                    <source data-srcset-tablet="https://cache.marriott.com/marriottassets/universal-nav/deals/MR_UnivNav_Deals_clsc.jpg?interpolation=progressive-bilinear&amp;_queryParam_" media="(min-width: 601px)"/>
                    <source data-srcset-mobile="https://cache.marriott.com/marriottassets/universal-nav/deals/MR_UnivNav_Deals_clsc.jpg?interpolation=progressive-bilinear&amp;_queryParam_" media="(max-width: 600px)"/>
                   </picture>
                  </div>
                  <div class="title-desc-cta l-s-col-4 l-l-col-6 l-padding-left-five-quarters l-padding-right-five-quarters l-display-inline-block">
                   <div class="title-desc ">
                    <h4 class="">
                     회원만이 누리는 특별 휴가 &amp; 전용 혜택
                    </h4>
                   </div>
                   <div class="cta l-margin-bottom l-pos-relative ">
                    [ahref]
                    
                   </div>
                  </div>
                 </section>
                </div>
               </div>
              </div>
              [ahref]
              
             </div>
            </div>
           </li>
           <li class="l-nav-item l-l-display-inline-block l-l-margin-left-five-quarters l-padding-none js-flydown-trigger" id="MainNavLink1a97">
            [ahref]
            
            <div class="l-panel l-width-max t-bg-standard-20 l-pos-absolute l-pos-left is-hidden">
             <div class="l-container">
              <div class="mainnav-panel l-margin-top-double l-clear">
               <div class="mainnav-panel-col l-s-col-4 l-m-col-8 l-l-col-6 l-s-col-last l-m-col-last">
                <div id="CardLinks4a13">
                 <ul class="m-ctaLinks l-l-col-6 l-s-col-4 l-s-col-last l-m-col-last l-m-col-8 " data-component-endpoint="/aries-common/v1/cardLinks.comp" data-component-id="CardLinks_01_4a13" data-component-name="cardLinks">
                  <li class="l-s-col-4 l-m-col-8 l-l-col-12 l-padding-none l-s-col-last l-m-col-last">
                   [ahref]
                   
                  </li>
                  <li class="l-s-col-4 l-m-col-8 l-l-col-12 l-padding-none l-s-col-last l-m-col-last">
                   [ahref]
                   
                  </li>
                  <li class="l-s-col-4 l-m-col-8 l-l-col-12 l-padding-none l-s-col-last l-m-col-last">
                   [linkx]
                   
                  </li>
                 </ul>
                </div>
                <div id="CardLinks9461">
                 <ul class="m-ctaLinks l-l-col-6 l-s-col-4 l-s-col-last l-m-col-last l-m-col-8 " data-component-endpoint="/aries-common/v1/cardLinks.comp" data-component-id="CardLinks_01_9461" data-component-name="cardLinks">
                  <li class="l-s-col-4 l-m-col-8 l-l-col-12 l-padding-none l-s-col-last l-m-col-last">
                   [linkx]
                   
                  </li>
                 </ul>
                </div>
               </div>
               <div class="mainnav-panel-col l-s-col-4 l-m-col-8 l-l-col-6 l-s-col-last l-m-col-last l-l-col-last">
                <div class="t-uniform-height" id="CardArticleeef9">
                 <section class="tile-card-article l-template-3 l-layout-3A l-left-align l-s-col-4 l-m-col-8 l-l-col-12 l-xl-col-12 l-display-inline-block" data-component-endpoint="/aries-common/v1/cardArticle.comp" data-component-id="CardArticle_04_eef9" data-component-name="cardArticle">
                  <div class="img-wrapper l-s-col-4 l-l-col-6">
                   <picture data-param-desktop="downsize=1024px:*" data-param-large="downsize=1180px:*" data-param-mobile="downsize=600px:*" data-param-tablet="downsize=768px:*">
                    <source data-srcset-large="https://cache.marriott.com/marriottassets/universal-nav/meetings-and-events/Meetings_3_2_Image.jpg?interpolation=progressive-bilinear&amp;_queryParam_ , https://cache.marriott.com/marriottassets/universal-nav/meetings-and-events/Meetings_3_2_Image.jpg 2x" media="(min-width: 1025px)"/>
                    <source data-srcset-desktop="https://cache.marriott.com/marriottassets/universal-nav/meetings-and-events/Meetings_3_2_Image.jpg?interpolation=progressive-bilinear&amp;_queryParam_ , https://cache.marriott.com/marriottassets/universal-nav/meetings-and-events/Meetings_3_2_Image.jpg 2x" media="(min-width: 769px)"/>
                    <source data-srcset-tablet="https://cache.marriott.com/marriottassets/universal-nav/meetings-and-events/Meetings_3_2_Image.jpg?interpolation=progressive-bilinear&amp;_queryParam_" media="(min-width: 601px)"/>
                    <source data-srcset-mobile="https://cache.marriott.com/marriottassets/universal-nav/meetings-and-events/Meetings_3_2_Image.jpg?interpolation=progressive-bilinear&amp;_queryParam_" media="(max-width: 600px)"/>
                   </picture>
                  </div>
                  <div class="title-desc-cta l-s-col-4 l-l-col-6 l-padding-left-five-quarters l-padding-right-five-quarters l-display-inline-block">
                   <div class="title-desc ">
                    <h4 class="">
                     미팅 &amp; 이벤트 예약하기
                    </h4>
                    <div class="description-list l-s-margin-bottom-none l-l-margin-bottom">
                     <p>
                      신개념 공간. 영감을 주는 경험. 맞춤형 서비스
                     </p>
                    </div>
                   </div>
                   <div class="cta l-margin-bottom l-pos-relative ">
                    [linkx]
                    
                   </div>
                  </div>
                 </section>
                </div>
               </div>
              </div>
              [linkx]
              
             </div>
            </div>
           </li>
           <li class="l-nav-item l-l-display-inline-block l-l-margin-left-five-quarters l-padding-none js-flydown-trigger" id="MainNavLinkdfa9">
            [linkx]
            
            <div class="l-panel l-width-max t-bg-standard-20 l-pos-absolute l-pos-left is-hidden">
             <div class="l-container">
              <div class="mainnav-panel l-margin-top-double l-clear">
               <div id="CardLinks3642">
                <div class="m-marriott-brands-portfolio" data-component-endpoint="/aries-common/v1/cardLinks.comp" data-component-id="CardLinks_03_3642" data-component-name="cardLinks">
                 <ul>
                  <li class="l-s-col-1 l-m-col-2 l-l-col-2 t-wrapper-RZ">
                   [linkx]
                   
                  </li>
                  <li class="l-s-col-1 l-m-col-2 l-l-col-2 t-wrapper-XR">
                   [ahref]
                   
                  </li>
                  <li class="l-s-col-1 l-m-col-2 l-l-col-2 t-wrapper-EB">
                   [linkx]
                   
                  </li>
                  <li class="l-s-col-1 l-m-col-2 l-l-col-2 t-wrapper-LC">
                   [linkx]
                   
                  </li>
                  <li class="l-s-col-1 l-m-col-2 l-l-col-2 t-wrapper-WH">
                   [ahref]
                   
                  </li>
                  <li class="l-s-col-1 l-m-col-2 l-l-col-2 t-wrapper-JW">
                   [linkx]
                   
                  </li>
                  <li class="l-s-col-1 l-m-col-2 l-l-col-2 t-wrapper-MC">
                   [linkx]
                   
                  </li>
                  <li class="l-s-col-1 l-m-col-2 l-l-col-2 t-wrapper-SI">
                   [linkx]
                   
                  </li>
                  <li class="l-s-col-1 l-m-col-2 l-l-col-2 t-wrapper-MV">
                   [ahref]
                   
                  </li>
                  <li class="l-s-col-1 l-m-col-2 l-l-col-2 t-wrapper-DE">
                   [linkx]
                   
                  </li>
                  <li class="l-s-col-1 l-m-col-2 l-l-col-2 t-wrapper-MD">
                   [linkx]
                   
                  </li>
                  <li class="l-s-col-1 l-m-col-2 l-l-col-2 t-wrapper-WI">
                   <a class="t-brand-logo-icon-WI t-alt-link t-no-hover-link" href="/">
                    <span>
                     Westin Hotels
                    </span>
                   </a>
                  </li>
                  <li class="l-s-col-1 l-m-col-2 l-l-col-2 t-wrapper-AK">
                   [ahref]
                   
                  </li>
                  <li class="l-s-col-1 l-m-col-2 l-l-col-2 t-wrapper-DS">
                   [linkx]
                   
                  </li>
                  <li class="l-s-col-1 l-m-col-2 l-l-col-2 t-wrapper-BR">
                   [ahref]
                   
                  </li>
                  <li class="l-s-col-1 l-m-col-2 l-l-col-2 t-wrapper-TX">
                   [ahref]
                   
                  </li>
                  <li class="l-s-col-1 l-m-col-2 l-l-col-2 t-wrapper-GE">
                   <a class="t-brand-logo-icon-GE t-alt-link t-no-hover-link" href="/gaylord-hotels/travel.mi">
                    <span>
                     Gaylord Heights
                    </span>
                   </a>
                  </li>
                  <li class="l-s-col-1 l-m-col-2 l-l-col-2 t-wrapper-CY">
                   [ahref]
                   
                  </li>
                  <li class="l-s-col-1 l-m-col-2 l-l-col-2 t-wrapper-FP">
                   [linkx]
                   
                  </li>
                  <li class="l-s-col-1 l-m-col-2 l-l-col-2 t-wrapper-SH">
                   [linkx]
                   
                  </li>
                  <li class="l-s-col-1 l-m-col-2 l-l-col-2 t-wrapper-PR">
                   [ahref]
                   
                  </li>
                  <li class="l-s-col-1 l-m-col-2 l-l-col-2 t-wrapper-FI">
                   [ahref]
                   
                  </li>
                  <li class="l-s-col-1 l-m-col-2 l-l-col-2 t-wrapper-AR">
                   [linkx]
                   
                  </li>
                  <li class="l-s-col-1 l-m-col-2 l-l-col-2 t-wrapper-AL">
                   [ahref]
                   
                  </li>
                  <li class="l-s-col-1 l-m-col-2 l-l-col-2 t-wrapper-OX">
                   <a class="t-brand-logo-icon-OX t-alt-link t-no-hover-link" href="/en">
                    <span>
                     Moxy
                    </span>
                   </a>
                  </li>
                  <li class="l-s-col-1 l-m-col-2 l-l-col-2 t-wrapper-ER">
                   [ahref]
                   
                  </li>
                  <li class="l-s-col-1 l-m-col-2 l-l-col-2 t-wrapper-RI">
                   [keywordx][symbolx][keywordx][symbolx][bracketl1][keywordx][bracketr1][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][bracketl2][keywordx][bracketr2][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][pkeyx][mkey1][mkey1][mkey1][ahref][keywordx][symbolx][keywordx][symbolx][bracketl3][keywordx][bracketr3][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][pkeyx][linkx][pkeyx][linkx][mkey1][linkx][linkx][pkeyx][ahref][pkeyx][linkx][mkey1][keywordx][linkx][keywordx][symbolx][keywordx][symbolx][bracketl4][keywordx][bracketr4][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx]
                  </li>
                  <li class="l-s-col-1 l-m-col-2 l-l-col-2 t-wrapper-TS">
                   [linkx]
                   
                  </li>
                  <li class="l-s-col-1 l-m-col-2 l-l-col-2 t-wrapper-EL">
                   [ahref]
                   
                  </li>
                  <li class="l-s-col-1 l-m-col-2 l-l-col-2 t-wrapper-HV">
                   [linkx]
                   
                  </li>
                  <li class="l-s-col-4 l-m-col-8 l-l-col-12">
                   [ahref]
                   
                  </li>
                 </ul>
                </div>
               </div>
              </div>
              [ahref]
              
             </div>
            </div>
           </li>
           <li class="l-nav-item l-l-display-inline-block l-l-margin-left-five-quarters l-padding-none js-flydown-trigger" id="MainNavLink696d">
            [ahref]
            
            <div class="l-panel l-width-max t-bg-standard-20 l-pos-absolute l-pos-left is-hidden">
             <div class="l-container">
              <div class="mainnav-panel l-margin-top-double l-clear">
               <div class="mainnav-panel-col l-s-col-4 l-m-col-8 l-l-col-6 l-s-col-last l-m-col-last">
                <div id="CardLinksa5f5">
                 <ul class="m-ctaLinks l-l-col-6 l-s-col-4 l-s-col-last l-m-col-last l-m-col-8 " data-component-endpoint="/aries-common/v1/cardLinks.comp" data-component-id="CardLinks_01_a5f5" data-component-name="cardLinks">
                  <li class="l-s-col-4 l-m-col-8 l-l-col-12 l-padding-none l-s-col-last l-m-col-last">
                   [linkx]
                   
                  </li>
                  <li class="l-s-col-4 l-m-col-8 l-l-col-12 l-padding-none l-s-col-last l-m-col-last">
                   [ahref]
                   
                  </li>
                  <li class="l-s-col-4 l-m-col-8 l-l-col-12 l-padding-none l-s-col-last l-m-col-last">
                   [ahref]
                   
                  </li>
                  <li class="l-s-col-4 l-m-col-8 l-l-col-12 l-padding-none l-s-col-last l-m-col-last">
                   [ahref]
                   
                  </li>
                 </ul>
                </div>
                <div id="CardLinks2123">
                 <ul class="m-ctaLinks l-l-col-6 l-s-col-4 l-s-col-last l-m-col-last l-m-col-8 " data-component-endpoint="/aries-common/v1/cardLinks.comp" data-component-id="CardLinks_01_2123" data-component-name="cardLinks">
                  <li class="l-s-col-4 l-m-col-8 l-l-col-12 l-padding-none l-s-col-last l-m-col-last">
                   [linkx]
                   
                  </li>
                 </ul>
                </div>
               </div>
               <div class="mainnav-panel-col l-s-col-4 l-m-col-8 l-l-col-6 l-s-col-last l-m-col-last l-l-col-last">
                <div class="t-uniform-height" id="CardArticleff21">
                 <section class="tile-card-article l-template-3 l-layout-3A l-left-align l-s-col-4 l-m-col-8 l-l-col-12 l-xl-col-12 l-display-inline-block" data-component-endpoint="/aries-common/v1/cardArticle.comp" data-component-id="CardArticle_04_ff21" data-component-name="cardArticle">
                  <div class="img-wrapper l-s-col-4 l-l-col-6">
                   <picture data-param-desktop="downsize=1024px:*" data-param-large="downsize=1180px:*" data-param-mobile="downsize=600px:*" data-param-tablet="downsize=768px:*">
                    <source data-srcset-large="https://cache.marriott.com/marriottassets/universal-nav/rewards/Sign_In_or_Join_Join_Rewards_5x2.jpg?interpolation=progressive-bilinear&amp;_queryParam_ , https://cache.marriott.com/marriottassets/universal-nav/rewards/Sign_In_or_Join_Join_Rewards_5x2.jpg 2x" media="(min-width: 1025px)"/>
                    <source data-srcset-desktop="https://cache.marriott.com/marriottassets/universal-nav/rewards/Sign_In_or_Join_Join_Rewards_5x2.jpg?interpolation=progressive-bilinear&amp;_queryParam_ , https://cache.marriott.com/marriottassets/universal-nav/rewards/Sign_In_or_Join_Join_Rewards_5x2.jpg 2x" media="(min-width: 769px)"/>
                    <source data-srcset-tablet="https://cache.marriott.com/marriottassets/universal-nav/rewards/Sign_In_or_Join_Join_Rewards_5x2.jpg?interpolation=progressive-bilinear&amp;_queryParam_" media="(min-width: 601px)"/>
                    <source data-srcset-mobile="https://cache.marriott.com/marriottassets/universal-nav/rewards/Sign_In_or_Join_Join_Rewards_5x2.jpg?interpolation=progressive-bilinear&amp;_queryParam_" media="(max-width: 600px)"/>
                   </picture>
                  </div>
                  <div class="title-desc-cta l-s-col-4 l-l-col-6 l-padding-left-five-quarters l-padding-right-five-quarters l-display-inline-block">
                   <div class="title-desc ">
                    <h4 class="">
                     Marriott Bonvoy 가입
                    </h4>
                    <div class="description-list l-s-margin-bottom-none l-l-margin-bottom">
                     <ul>
                      <li>
                       상시 최저 요금 혜택
                      </li>
                      <li>
                       객실 내 무료 와이파이
                      </li>
                      <li>
                       모바일 체크인 혜택을 누리세요!
                      </li>
                     </ul>
                    </div>
                   </div>
                   <div class="cta l-margin-bottom l-pos-relative ">
                    [ahref]
                    
                   </div>
                  </div>
                 </section>
                </div>
               </div>
              </div>
              [ahref]
              
             </div>
            </div>
           </li>
          </ul>
         </div>
        </div>
        [linkx]
        
       </div>
      </div>
     </div>
    </div>
   </header>
   <div class="id-content-wrapper" id="main-body-wrapper">
    <div class="l-row">
     <div class="mi-sub-section bleed-sub-section l-margin-subsection-bottom-small l-padding-subsection-vertical-none">
      <div id="destinationHeroImageb217">
       <section class="tile-destination-hero-image-ito " data-component-endpoint="/aries-search/v1/destinationHeroImage.comp" data-component-id="destinationHeroImage_01_b217" data-component-name="destinationHeroImage">
        <picture>
         <source media="(min-width: 1440px)" srcset="https://cache.marriott.com/marriottassets/destinations/hero/paris-destination.jpg?interpolation=progressive-bilinear&amp;resize=2880:960"/>
         <source media="(min-width: 1024px)" srcset="https://cache.marriott.com/marriottassets/destinations/hero/paris-destination.jpg?interpolation=progressive-bilinear&amp;resize=1440:480"/>
         <source media="(min-width: 320px)" srcset="https://cache.marriott.com/marriottassets/destinations/hero/paris-destination.jpg?interpolation=progressive-bilinear&amp;resize=1200:480"/>
        </picture>
        <div class="l-hero-text l-hero-ito t-bg-standard-20" style="background-color: #000000">
         <div class="t-font-family-proximanova t-font-s t-color-standard-10" style="color: #FFFFFF">
          <div class="t-ito-text">
           <p class="l-margin-none t-font-s">
            파리는 센 강이 남동쪽에서 시가지로 들어와 북쪽으로 크게 만곡을 이룬 다음 남서쪽을 거쳐 시외로 흘러나간다. 따라서 동쪽으로는 뱅센 숲, 서쪽으로는 불로뉴 삼림공원으로 이어진다. 센 강의 남쪽을 ‘좌안(리브고슈)’, 북쪽의 보다 넓은 지역을 ‘우안(리브드루아트)’이라고 부르며, 시 주변에는 로마의 ‘일곱 언덕’을 연상시키는 언덕이 줄지어 솟아 있다.
            <br/>
            프랑스의 수도이자 유럽의 대표도시 파리. 에펠탑, 개선문, 노트르담 대성당, 베르사유 궁전 같은 대표 건축물부터 오르셰 미술관과 루브르 박물관 까지, 파리는 짧은 일정으로 둘러보기 힘들 정도의 많은 랜드 마크들과 예술 작품들이 있다.
           </p>
          </div>
         </div>
        </div>
        <h1 class="t-extend-h2-em t-uppercase l-hero-text t-hero-title t-color-standard-20 is-non-latin no-resize" style="color: #FFFFFF;">
         <b>[mkey1][symbolx][pkeyx][symbolx][keyword1][bracketl1][keywordx][bracketr1][symbolx][bracketl2][keywordx][bracketr2][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx]</b>
        </h1>
       </section>
      </div>
     </div>
     <section class="mi-sub-section sub-section t-bg-standard-20 l-margin-subsection-bottom-none l-padding-subsection-vertical-none">
      <div class="l-print-fullbleed l-container">
       <div class=" l-s-col-4 l-m-col-8 l-s-col-last l-m-col-last l-l-col-12 l-xl-col-12 l-l-col-last l-xl-col-last">
        <div id="SearchForm461a">
         <div class="tile-hsearch-homepage m-homepage-hsearch l-hsearch-2 l-hsearch-takeover l-hsearch-cntnr l-hsearch-bottom search-form-dest-page " data-autocomplete-supported-types="geocode" data-component-endpoint="/aries-search/v2/searchForm.comp" data-component-id="SearchForm_010_461a" data-component-name="searchFormHorizontalHomePage" data-custom-auto-suggest="true" data-done-button-label="완료" data-enable-google-places-api="true" data-enable-hint-text="false" data-enable-user-location="false" data-id-prefix="GZYM9BOU" data-message-groupmessage="객실을 4실 이상 요청하신 경우 요청하신 특별 요금을 이용할 수 없습니다. 단체 객실 요금을 요청하려면 ‘확인’을 클릭하세요. 검색을 변경하려면 ‘취소’를 클릭하세요." data-message-noselectedhotel="저장된 호텔 드롭다운 메뉴에서 호텔을 선택하세요." data-message-roomlimitmessage="객실을 4실 이상 요청하는 경우 주변 날짜 검색을 완료할 수 없습니다. 검색을 수정하세요." data-message-specialratemessage="날짜를 지정하지 않고 특별 요금을 요청하셨습니다. 고객님의 편의를 위해 이 정보를 저장할 수 있지만, 날짜를 지정하지 않으면 요금과 이용 가능 여부를 확인할 수 없습니다. ‘확인’을 클릭하여 날짜를 지정하지 않고 계속하거나, ‘취소’를 클릭하여 다시 돌아가서 검색 옵션을 변경하세요." data-message-userewardsptsmessage="객실을 4실 이상 요청하신 경우 메리어트 본보이 포인트를 사용할 수 없습니다. 특별 단체 객실 요금을 요청하려면 ‘확인’을 클릭하세요. 검색을 변경하려면 ‘취소’를 클릭하세요." data-placeholder-list="" data-radius-oriented-countries="JP" data-roomkeyflag="false" data-selected-text="선택함" data-suppress-google-api="true">
          <div class="clearfix homepage-search-form l-form-container l-clear">
           [ahref]
           
           <form action="/search/submitSearch.mi" class="l-em-reset mi-special-rates-drawer has-flexdate validate-search-form js-location-nearme " data-default-endpoint="/search/submitSearch.mi" data-group-search-endpoint="" data-is-group-search-applicable="false" data-suggestion-endpoint-mapping='{"property":"/reservation/availabilitySearch.mi"}' id="find-a-hotel-homePage-form" method="get" novalidate="novalidate">
            <div class="is-hidden l-takeover-head l-datepicker-open">
             <h2>
              [mkey1][symbolx][pkeyx][symbolx][keyword1][bracketl1][keywordx][bracketr1][symbolx][bracketl2][keywordx][bracketr2][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx]
             </h2>
             <button aria-label="닫기" class="mfp-close js-form-close l-hsearch-close" type="button">
             </button>
            </div>
            <div class="l-form-group m-field-wrap l-hsearch-labels clearfix">
             <div class="m-field-control l-margin-bottom-three-quarters l-datepicker-open l-xl-col-4 l-pos-relative js-clearinput l-hsearch-loc l-clear clearfix js-location js-auto-complete " data-options='{"autoCompleteURL":"/aries-search/v1/autoComplete.comp", "permittedLocales": "en-GB,en-AU,en-US", "suggestionSortOrder": "city,property,airport,poi,state,country", "placesUrl": "/aries-search/v2/autoComplete.comp"}'>
              <div aria-live="assertive" class="is-hidden-label">
              </div>
              <label class="field-title " for="GZYM9BOU_search-location">
               여행 목적지
              </label>
              <div class="l-display-flex">
               <span class="l-icon-inline t-icon t-icon-navigation-close js-clear-trigger" title="지우기">
               </span>
              </div>
             </div>
             <div class="l-find-container js-find-container l-xl-col-4 l-pos-rel ">
              <div class="l-h-field">
               Paris, FR
              </div>
              <span class="icon t-icon l-float-right t-icon-search t-icon-brand">
              </span>
             </div>
             <div class="date-picker-overlay">
             </div>
             <div class="m-field-control m-date-picker l-date-picker l-margin-bottom-three-quarters l-pos-relative l-xs-col-4 l-xl-col-4 " data-associate-flow="" data-is-non-dated-search="true" data-trigger="false">
              <span class="field-title ">
               날짜
              </span>
              <span class="nights-count">
              </span>
              <div class="js-datepick-container l-datepick-container l-pos-rel is-flex-hidden t-singlefield " data-check-in-label="체크인" data-check-out-label="체크아웃" data-country-code="KR" data-takeover-label="날짜">
               <div class="js-toggle-picker l-toggle-picker js-moreoptions-expander-click l-display-block l-h-field l-padding-left-half t-no-decor t-blk">
                <label class="is-hidden" for="GZYM9BOU_hotel-fromToDate">
                 기간
                </label>
                <fieldset>
                 <legend>
                  <label class="is-hidden" for="GZYM9BOU_flexible-date-search">
                   주변 날짜 검색
                  </label>
                 </legend>
                </fieldset>
                <div aria-live="polite" class="ccheckin-container date-picker-container">
                 <span class="prev-checkin t-icon-arrow-new-left focus-elem">
                 </span>
                 <span class="next-checkin t-icon-arrow-right focus-elem">
                 </span>
                </div>
                <label class="l-date is-hidden-label" for="GZYM9BOU_hotel-fromDate">
                 체크인
                </label>
                <span class="l-date l-date-format is-hidden-label">
                 yy.MM.dd
                </span>
                <span class="l-date-part">
                </span>
                <div class="l-flex l-flex-display js-flex-display focus-elem" data-label="조정 가능">
                </div>
                <div aria-live="polite" class="ccheckout-container date-picker-container">
                 <span class="prev-checkout t-icon-arrow-new-left focus-elem">
                 </span>
                 <span class="next-checkout t-icon-arrow-right focus-elem">
                 </span>
                </div>
                <label class="l-date is-hidden-label" for="GZYM9BOU_hotel-toDate">
                 체크아웃
                </label>
                <span class="l-date is-hidden-label">
                 yy.MM.dd
                </span>
                <span class="l-toggle-active">
                </span>
               </div>
               <div class="js-date-pick-container" data-options='{"flexdates":"일정 조정이 가능하신가요", "specificdates":"특정 날짜를 원하시나요", "flexibleInMonthTitleInitial":"월/", "flexibleSelected":"", "flexibleNight":"1", "monthFullList":"1월,2월,3월,4월,5월,6월,7월,8월,9월,10월,11월,12월", "monthShortList":"1월,2월,3월,4월,5월,6월,7월,8월,9월,10월,11월,12월", "weekdayFullList":"일요일,월요일,화요일,수요일,목요일,금요일,토요일", "weekdayShortList":"일,월,화,수,목,금,토", "nightLabel":"박", "nightsLabel":"박", "doneLabel":"완료", "stayLabel":"투숙", "clearText":"날짜 지우기", "resetText":"입력란 재설정", "isDestPage":"true", "showRedEye":"", "redEyeValue":"", "showKGroupDate": "false", "kGroupDate": "06/19/2021", "nextMonthLabel": "다음 달", "prevMonthLabel": "이전 달", "ofLabel": "/", "nightsLowerLabel": "", "nightLowerLabel": "", "yearLabel": "연도" }'>
                <div class="new-container tabbing">
                 <div class="tab">
                  <span aria-label="선택함 특정 날짜를 원하시나요" class="tab1 tabs selected focus-elem" data-container="tab-container1" data-tab-value="특정 날짜를 원하시나요" role="button">
                   특정 날짜를 원하시나요
                  </span>
                  <span class="tab2 tabs focus-elem " data-container="tab-container2" data-tab-value="일정 조정이 가능하신가요" role="button">
                   일정 조정이 가능하신가요
                  </span>
                 </div>
                 <div class="tab-container tab-container1">
                  <div class="t-datepicker">
                   <div class="t-check-in">
                   </div>
                   <div class="t-check-out">
                   </div>
                  </div>
                 </div>
                 <div class="tab-container tab-container2">
                  <div class="m-flex-frame-wrapper">
                   <div class="m-flex-frame">
                    <div aria-live="polite" class="l-s2-stepper">
                     [keywordx][symbolx][keywordx][symbolx][bracketl9][keywordx][bracketr9][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][mkey1]<li>[ahref]</li>[linkx][keywordx]
                    </div>
                    <div class="l-flex-months">
                     <div class="l-flex-months-holder js-flex-months-holder">
                     </div>
                    </div>
                   </div>
                  </div>
                  <div class="flexible-button-container">
                   <div class="flex-reset-button focus-elem">
                    입력란 재설정
                   </div>
                   <div class="flex-done-button m-button m-button-primary focus-elem">
                    완료
                   </div>
                  </div>
                 </div>
                </div>
                <div class="l-done-container">
                 <button class="js-done-date l-done-date m-button m-button-primary">
                  완료
                  <span class="mobile-night-container">
                   (
                   <span class="nights-count nights-count-mobile">
                   </span>
                   )
                  </span>
                 </button>
                </div>
               </div>
              </div>
             </div>
             <div class="l-xs-col-4 l-xl-col-4 l-xl-last-col l-hsearch-find l-find-top js-hform-fields">
              <button class="analytics-click js-is-roomkey-enabled m-button m-button-primary" data-analytics="{'location':'searchForm'}" title="" type="submit">
               호텔 찾기
              </button>
             </div>
             <div class="t-more-search-options l-xs-col-4 l-xl-col-12 is-hidden l-datepicker-open">
              <div class="m-field-control l-rooms-guests js-rooms-guests js-hform-fields l-em-reset l-s-col-4 l-xl-col-4 l-margin-bottom-three-quarters ">
               <span class="field-title">
                객실 &amp; 투숙객
               </span>
               [linkx]
               
               <div aria-expanded="false" class="l-rooms-guests-panel js-rooms-guests-panel l-pos-rel is-hidden" data-takeover-label="객실 &amp; 투숙객">
                <div class="rooms-guest-wrapper">
                 <div class=" clearfix">
                  <div class="l-rooms js-rooms">
                   <div class="labelContainer field-title">
                    객실
                   </div>
                   <div class="clearfix l-s2-stepper">
                    <label class="is-hidden-label" for="GZYM9BOU_roomCountBox">
                     객실 수
                    </label>
                    [ahref]
                    
                    [ahref]
                    
                    <label class="is-hidden-label" for="GZYM9BOU_roomCount">
                     객실 수
                    </label>
                    <select class="is-hidden roomCount js-room-count" id="GZYM9BOU_roomCount" name="roomCount">
                     <option selected="selected" value="1">
                      1 객실
                     </option>
                     <option value="2">
                      2 객실
                     </option>
                     <option value="3">
                      3 객실
                     </option>
                    </select>
                   </div>
                  </div>
                  <div class="js-all-guests">
                   <div class="l-adults js-adults js-guests">
                    <div class="labelContainer field-title">
                     성인
                     <span class="l-guests-error-msg">
                      (최대 인원: 객실당 6명)
                     </span>
                    </div>
                    <div class="clearfix l-s2-stepper">
                     <label class="is-hidden-label" for="GZYM9BOU_guestCountBox">
                      투숙객 수
                     </label>
                     [linkx]
                     
                     [ahref]
                     
                     <label class="is-hidden-label" for="GZYM9BOU_guestCount">
                      투숙객 수
                     </label>
                     <select class="is-hidden guestCount" id="GZYM9BOU_guestCount" name="numAdultsPerRoom">
                      <option selected="selected" value="1">
                       1
                      </option>
                      <option value="2">
                       2
                      </option>
                      <option value="3">
                       3
                      </option>
                      <option value="4">
                       4
                      </option>
                      <option value="5">
                       5
                      </option>
                      <option value="6">
                       6
                      </option>
                     </select>
                    </div>
                   </div>
                   <div class="l-children js-children js-guests">
                    <div class="labelContainer field-title">
                     어린이
                     <span class="l-guests-error-msg">
                      (최대 인원: 객실당 6명)
                     </span>
                    </div>
                    <div class="clearfix l-s2-stepper">
                     <label class="is-hidden-label" for="GZYM9BOU_childrenCountBox">
                      어린이 수
                     </label>
                     [linkx]
                     
                     [ahref]
                     
                     <label class="is-hidden-label" for="GZYM9BOU_childrenCount">
                      어린이 수
                     </label>
                     <select class="childrenCount is-hidden" id="GZYM9BOU_childrenCount" name="childrenCount">
                      <option selected="selected" value="0">
                       0
                      </option>
                      <option value="1">
                       1
                      </option>
                      <option value="2">
                       2
                      </option>
                      <option value="3">
                       3
                      </option>
                      <option value="4">
                       4
                      </option>
                      <option value="5">
                       5
                      </option>
                     </select>
                    </div>
                   </div>
                   <p class="l-age-based js-age-based is-hidden">
                    (연령별 요금 이용 가능)
                   </p>
                   <div class="js-ages-append l-padding-bottom" id="GZYM9BOU_l-ages-append">
                   </div>
                   <div class="js-age-template is-hidden " id="GZYM9BOU_l-age-template">
                    <div class="l-child-info field-title">
                     <span class="l-childnum-title">
                      어린이 1 : 연령
                     </span>
                     <span class="l-first-room-text">
                      (필수 항목)
                     </span>
                    </div>
                    <div class="clearfix l-s2-stepper">
                     <label class="is-hidden-label" for="GZYM9BOU_childAgesBox">
                      어린이 수
                     </label>
                     [ahref]
                     
                     [linkx]
                     
                     <label class="is-hidden-label" for="GZYM9BOU_childrenAgesNum">
                      어린이 수
                     </label>
                     <select class="childrenAgesNum js-children-age is-hidden" id="GZYM9BOU_childrenAgesNum">
                      <option value="-1">
                       연령
                      </option>
                      <option value="0">
                       1 미만
                      </option>
                      <option value="1">
                       1
                      </option>
                      <option value="2">
                       2
                      </option>
                      <option value="3">
                       3
                      </option>
                      <option value="4">
                       4
                      </option>
                      <option value="5">
                       5
                      </option>
                      <option value="6">
                       6
                      </option>
                      <option value="7">
                       7
                      </option>
                      <option value="8">
                       8
                      </option>
                      <option value="9">
                       9
                      </option>
                      <option value="10">
                       10
                      </option>
                      <option value="11">
                       11
                      </option>
                      <option value="12">
                       12
                      </option>
                      <option value="13">
                       13
                      </option>
                      <option value="14">
                       14
                      </option>
                      <option value="15">
                       15
                      </option>
                      <option value="16">
                       16
                      </option>
                      <option value="17">
                       17
                      </option>
                     </select>
                    </div>
                   </div>
                  </div>
                 </div>
                </div>
                <div class="l-margin-top-none l-rooms-guests-footer clearfix l-clear t-bg-standard-20 t-border-standard-120">
                 <div class="rooms-guests-done js-done l-float-left is-hidden">
                  [linkx]
                  
                 </div>
                 <div class="rooms-guests-clear js-reset l-margin-top">
                  [ahref]
                  
                 </div>
                </div>
               </div>
              </div>
              <div class="m-field-control l-special-rates l-em-reset l-s-col-4 l-mml-col-9-split l-mml-last-col-split l-xl-col-4 l-margin-bottom-three-quarters js-hform-fields">
               <span class="field-title">
                특별 요금
               </span>
               [ahref]
               
               <div class="l-h-toggle-cont special-rates-section js-toggle-container is-hidden" data-takeover-label="특별 요금">
                <div class="">
                 <ul>
                  <li class="l-h-toggle-opt">
                   [linkx]
                   
                  </li>
                  <li class="l-h-toggle-opt">
                   [ahref]
                   
                  </li>
                  <li class="l-h-toggle-opt">
                   [ahref]
                   
                  </li>
                 </ul>
                 <div class="code-container">
                  <div class="special-rate-code corp-code is-hidden">
                   <p>
                    코드 입력
                   </p>
                   <label class="is-hidden-label" for="GZYM9BOU_corporateCode">
                    corporateCode
                   </label>
                  </div>
                 </div>
                </div>
               </div>
              </div>
              <div class="m-field-control l-s-col-4 l-s-last-col l-mml-col-9-split l-xl-col-4 l-xl-last-col l-use-rewards-points usePoints has-inline-labels js-hform-fields use-rewards-custom">
               <div class="l-userewards-checkbox " id="rewards-use-search">
                <fieldset class="t-border-none l-margin-none l-padding-none">
                 <legend aria-hidden="true" class="is-hidden">
                  useRewardsPoints
                 </legend>
                 <label class="l-userewards-checkmark" for="GZYM9BOU_useRewardsPoints">
                  포인트 사용
                 </label>
                </fieldset>
               </div>
              </div>
              <div class="m-field-control l-xs-col-4 l-mml-col-9-split l-mml-last-col-split l-xl-col-4 l-xl-last-col l-hsearch-find l-find-bottom js-hform-fields">
               <button class="analytics-click js-is-roomkey-enabled m-button m-button-primary" data-analytics="{'location':'searchForm'}" title="" type="submit">
                호텔 찾기
               </button>
              </div>
             </div>
            </div>
           </form>
          </div>
         </div>
        </div>
       </div>
      </div>
     </section>
     <div class="mi-sub-section bleed-sub-section t-bg-standard-30 l-margin-subsection-bottom-none l-padding-subsection-vertical-none">
      <div id="highlightedHotelsa2e1">
      </div>
      <div id="propertyRecords06cd">
       <div class="tile-property-records l-row show-destination-view" data-city-center='{"latitude":"48.856614","longitude":"2.3522219"}' data-component-endpoint="/aries-search/v1/propertyRecords.comp" data-component-id="propertyRecords_03_06cd" data-component-name="propertyRecords" data-duplicate-property="[]" data-img='{"pinImg":"/Images/Icons/Search/pin-gmap.png","pinBlue": "/Images/Icons/Search/pin-gmap-blue.png","clustImg":"/Images/Icons/Search/pin-cluster-sm.png","clustBlue":"/Images/Icons/Search/pin-cluster-sm-hover.png","pinAdd":"/Images/Icons/Search/pinloc.png"}' data-language-code="ko" data-map-no-cluster-view="false" data-options='{"isDestinationPage": true, "persistInfoWindowOnClick": true, "isInfoWindowRateListMenuLink": true, "isMapNoClear": true, "isMapDraggable": true}' data-property-bed-marker-label='{"openingSoonUpperCaseLabel": "준비 중", "callToBookUpperCaseLabel": "전화 예약"}' data-property-marker='{"unavailableUpperCaseLabel": "이용 불가"}' data-property-types='{"newUpperCaseLabel": "새로운 혜택","lowUpperCaseLabel": "낮음"}' data-ratelist-menu-link='{"fromDateKey":"fromDate","toDateKey":"toDate","propertyCardURL":"/reservation/availabilitySearch.mi?isSearch=false&amp;numberOfNights=1&amp;numberOfRooms=1&amp;numberOfGuests=1&amp;propertyCode=","toDateVal":"2019/07/04","fromDateVal":"2019/07/03"}' data-show-city-center="true">
        <div class="l-center-align">
         <h2 class="l-margin-bottom-quarter l-margin-top-none l-heading-padding-top">
          [mkey1][symbolx][pkeyx][symbolx][keyword1][bracketl1][keywordx][bracketr1][symbolx][bracketl2][keywordx][bracketr2][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx]<li>[pkeyx]</li>[pkeyx]<li>[mkey1]</li><li>[keywordx][symbolx][keywordx][symbolx][bracketl10][keywordx][bracketr10][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx]</li>[ahref]
         </h2>
         <div class="l-margin-bottom-five-quarters t-line-height-l">
          표시 중 1-34 / 34 호텔
         </div>
        </div>
        <div class="js-wrapper l-pos-relative height-100">
         <div class="js-list-container l-container l-l-col-3 l-margin-none l-padding-none l-l-col-propertys-list destination-page" data-view="map">
          <div class="js-property-results l-l-col-12 l-xl-col-12 l-l-col-last l-xl-col-last height-100">
           <div class="map-view-scroll-wrapper" data-hotelmarshacodes="PAROB;PARPR;PARLR;PARND;PARGL;PARVD;PARVW;PAROA;PARWH;PARAB;PARST;PARDS;PARDT;PARBE;PARLC;PARWG;PARTX;PARSP;PARXT;PARAC;PARMD;PARCV;PARAR;PARSD;PARBB;PARLD;PARCF;PARSC;PARAL;PARMC;PAROX;PARSI;PARXA;PARDP;" id="merch-property-results">
            <div class="js-property-list-container map-view-scroll-space">
             <div class=" l-row t-bg-standard-20 property-record-item l-display-inline-m in-focus js-property-record-item" data-brand="OX" data-city="Paris" data-close-text="" data-country="FR" data-map="true" data-marsha="PAROB" data-pnum="0" data-promo-code="" data-property='{"lat": "48.857528","longitude":"2.369853","brand": "OX","marshaCode": "PAROB","hwsInLanguageMissing": "false","blank":"-","type":"","hotelName":"Moxy Paris Bastille","propertyType":"새로운 혜택","propMarkerLabel":"", "propMarkerBedLabel":"","index": ""}' data-statecode="" data-stateprovince="" id="property-record-map-PAROB">
              <div class="l-s-col-4 l-m-col-8 l-l-col-12 l-m-col-last l-s-col-last">
               <div class="l-row">
                <div class="js-image-container image-container l-pos-relative l-s-col-4 l-m-col-3 l-l-col-3" data-hotelname="Moxy Paris Bastille" data-imageurl="//cache.marriott.com/marriottassets/marriott/PAROB/parob-exterior-2688-hor-feat.jpg">
                 <span class="l-new-hotel m-merch-shape-1 m-merch-style-1">
                 </span>
                 [ahref]
                 
                </div>
                <div class="js-hotel-location l-overflow-hidden l-m-col-5 l-l-col-7 l-s-col-las small-padding-right-one-quarter small-padding-left-one-quarter">
                 <div class="l-row l-margin-top-five-quarters">
                  <div class="l-s-col-4 l-m-col-8 l-l-col-12 l-m-col-last l-s-col-last">
                   <a class="t-alt-link t-no-hover-link analytics-click js-map-quickview-pins" data-marsha="PAROB" data-quickview="?propertyId=PAROB" href="/hotels/travel/parob-moxy-paris-bastille/" target="_blank" title="Moxy Paris Bastille">
                    <h2 class="js-hotel-name l-margin-top-none l-margin-bottom-quarter t-font-family-proximanova l-hotel-name t-font-weight-semibold t-dotdotdot ">
                     [mkey1][symbolx][pkeyx][symbolx][keyword1][bracketl1][keywordx][bracketr1][symbolx][bracketl2][keywordx][bracketr2][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx]
                    </h2>
                   </a>
                  </div>
                 </div>
                 <div class="l-row l-margin-bottom-three-quarters l-hidden-m-map-view">
                  <div class="l-s-col-4 l-m-col-8 l-l-col-12 l-m-col-last l-s-col-last t-font-s t-line-height-m m-hotel-address t-color-standard-90" data-address-line1="34/36 Rue Saint Sabin" data-city="Paris" data-contact="+33 1 43 38 58 08" data-country="KR" data-country-description="프랑스" data-postal-code="75011" data-state="">
                   34/36 Rue Saint Sabin Paris, 프랑스 75011
                  </div>
                 </div>
                 <div class="l-row t-font-xs t-line-height-xs l-margin-bottom-three-quarters t-info-row">
                  <div class="js-hotel-distance l-hotel-distance l-s-col-2 l-m-col-4 l-l-col-3 l-hotel-distance-border t-color-standard-90">
                   <span aria-label="1.3 km 0.8 마일리지" class="l-padding-left-quarter l-padding-right-quarter t-bg-standard-100 t-color-standard-20 border-radius-small" title="0.8 마일리지">
                    <span aria-hidden="true">
                     1.3 km
                    </span>
                   </span>
                   목적지 기준
                  </div>
                  <div class="js-hotel-rating l-l-col-4 t-border-right t-border-color-standard-110 l-s-col-2 l-m-col-4 l-l-col-3l-hotel-rating l-rattings t-line-height-xs l-l-col-4-flex">
                   [linkx]
                   
                  </div>
                  <div class="js-hotel-category l-hotel-category l-hidden-m-map-view l-s-col-2 l-m-col-4 l-l-col-4 t-line-height-xs ">
                   <span class="t-font-weight-bold">
                    [ahref]
                    
                   </span>
                   <span class="hotel-reward l-display-inline-block t-color-standard-90">
                   </span>
                  </div>
                 </div>
                 <div class="l-row is-hidden-s is-hidden-m is-hidden-l is-visible-bubble l-view-rate">
                 </div>
                 <div class="macro-card-property-type l-display-none">
                 </div>
                </div>
                <div class="js-hotel-logo l-m-col-1-6 l-s-col-12 is-visible-m l-l-col-2 l-center-align is-visible-l l-margin-right-none">
                 <span class="t-brand-logo-icon-OX t-color-standard-100">
                 </span>
                </div>
               </div>
               <div class="js-rate-btn-container l-row l-padding-left-five-quarters l-padding-right-five-quarters l-pos-relative t-border-top t-border-color-standard-110">
                <div class="rate-container l-clear l-s-col-4 l-m-col-8 l-l-col-12 l-m-col-last l-s-col-last l-float-right l-padding-top-five-quarters l-padding-bottom-half l-l-padding-bottom-five-quarters l-m-padding-bottom-three-quarters l-display-inline-block">
                 <div class="js-button-text-wrapper l-float-right ">
                  [linkx]
                  
                 </div>
                </div>
               </div>
              </div>
             </div>
             <div class=" l-row t-bg-standard-20 property-record-item l-display-inline-m js-property-record-item" data-brand="BR" data-city="파리" data-close-text="" data-country="FR" data-map="true" data-marsha="PARPR" data-pnum="1" data-promo-code="" data-property='{"lat": "48.868761","longitude":"2.361042","brand": "BR","marshaCode": "PARPR","hwsInLanguageMissing": "false","blank":"-","type":"","hotelName":"르네상스 파리 레퓌블리크 호텔","propertyType":"","propMarkerLabel":"", "propMarkerBedLabel":"","index": ""}' data-statecode="" data-stateprovince="" id="property-record-map-PARPR">
              <div class="l-s-col-4 l-m-col-8 l-l-col-12 l-m-col-last l-s-col-last">
               <div class="l-row">
                <div class="js-image-container image-container l-pos-relative l-s-col-4 l-m-col-3 l-l-col-3" data-hotelname="르네상스 파리 레퓌블리크 호텔" data-imageurl="//cache.marriott.com/marriottassets/marriott/PARPR/parpr-artist-0027-hor-feat.jpg">
                 [linkx]
                 
                </div>
                <div class="js-hotel-location l-overflow-hidden l-m-col-5 l-l-col-7 l-s-col-las small-padding-right-one-quarter small-padding-left-one-quarter">
                 <div class="l-row l-margin-top-five-quarters">
                  <div class="l-s-col-4 l-m-col-8 l-l-col-12 l-m-col-last l-s-col-last">
                   [ahref]
                   
                  </div>
                 </div>
                 <div class="l-row l-margin-bottom-three-quarters l-hidden-m-map-view">
                  <div class="l-s-col-4 l-m-col-8 l-l-col-12 l-m-col-last l-s-col-last t-font-s t-line-height-m m-hotel-address t-color-standard-90" data-address-line1="40 Rue Rene Boulanger" data-city="파리" data-contact="+33 1 71 18 20 95" data-country="KR" data-country-description="프랑스" data-postal-code="75010" data-state="">
                   40 Rue Rene Boulanger 파리, 프랑스 75010
                  </div>
                 </div>
                 <div class="l-row t-font-xs t-line-height-xs l-margin-bottom-three-quarters t-info-row">
                  <div class="js-hotel-distance l-hotel-distance l-s-col-2 l-m-col-4 l-l-col-3 l-hotel-distance-border t-color-standard-90">
                   <span aria-label="1.5 km 0.9 마일리지" class="l-padding-left-quarter l-padding-right-quarter t-bg-standard-100 t-color-standard-20 border-radius-small" title="0.9 마일리지">
                    <span aria-hidden="true">
                     1.5 km
                    </span>
                   </span>
                   목적지 기준
                  </div>
                  <div class="js-hotel-rating l-l-col-4 t-border-right t-border-color-standard-110 l-s-col-2 l-m-col-4 l-l-col-3l-hotel-rating l-rattings t-line-height-xs l-l-col-4-flex">
                   [ahref]
                   
                  </div>
                  <div class="js-hotel-category l-hotel-category l-hidden-m-map-view l-s-col-2 l-m-col-4 l-l-col-4 t-line-height-xs ">
                   <span class="t-font-weight-bold">
                    [linkx]
                    
                   </span>
                   <span class="hotel-reward l-display-inline-block t-color-standard-90">
                   </span>
                  </div>
                 </div>
                 <div class="l-row is-hidden-s is-hidden-m is-hidden-l is-visible-bubble l-view-rate">
                 </div>
                 <div class="macro-card-property-type l-display-none">
                 </div>
                </div>
                <div class="js-hotel-logo l-m-col-1-6 l-s-col-12 is-visible-m l-l-col-2 l-center-align is-visible-l l-margin-right-none">
                 <span class="t-brand-logo-icon-BR t-color-standard-100">
                 </span>
                </div>
               </div>
               <div class="js-rate-btn-container l-row l-padding-left-five-quarters l-padding-right-five-quarters l-pos-relative t-border-top t-border-color-standard-110">
                <div class="rate-container l-clear l-s-col-4 l-m-col-8 l-l-col-12 l-m-col-last l-s-col-last l-float-right l-padding-top-five-quarters l-padding-bottom-half l-l-padding-bottom-five-quarters l-m-padding-bottom-three-quarters l-display-inline-block">
                 <div class="js-button-text-wrapper l-float-right ">
                  [ahref]
                  
                 </div>
                </div>
               </div>
              </div>
             </div>
             <div class=" l-row t-bg-standard-20 property-record-item l-display-inline-m js-property-record-item" data-brand="DS" data-city="Paris" data-close-text="" data-country="FR" data-map="true" data-marsha="PARLR" data-pnum="2" data-promo-code="" data-property='{"lat": "48.866155","longitude":"2.333032","brand": "DS","marshaCode": "PARLR","hwsInLanguageMissing": "false","blank":"-","type":"","hotelName":"Le Roch Hotel and Spa, Paris, a Member of Design Hotels™","propertyType":"","propMarkerLabel":"", "propMarkerBedLabel":"","index": ""}' data-statecode="" data-stateprovince="" id="property-record-map-PARLR">
              <div class="l-s-col-4 l-m-col-8 l-l-col-12 l-m-col-last l-s-col-last">
               <div class="l-row">
                <div class="js-image-container image-container l-pos-relative l-s-col-4 l-m-col-3 l-l-col-3" data-hotelname="Le Roch Hotel and Spa, Paris, a Member of Design Hotels™" data-imageurl="//cache.marriott.com/marriottassets/marriott/PARLR/parlr-exterior-0629-hor-feat.jpg">
                 [linkx]
                 
                </div>
                <div class="js-hotel-location l-overflow-hidden l-m-col-5 l-l-col-7 l-s-col-las small-padding-right-one-quarter small-padding-left-one-quarter">
                 <div class="l-row l-margin-top-five-quarters">
                  <div class="l-s-col-4 l-m-col-8 l-l-col-12 l-m-col-last l-s-col-last">
                   [linkx]
                   
                  </div>
                 </div>
                 <div class="l-row l-margin-bottom-three-quarters l-hidden-m-map-view">
                  <div class="l-s-col-4 l-m-col-8 l-l-col-12 l-m-col-last l-s-col-last t-font-s t-line-height-m m-hotel-address t-color-standard-90" data-address-line1="28 Rue Saint-Roch" data-city="Paris" data-contact="+33 1 70 83 00 00" data-country="KR" data-country-description="프랑스" data-postal-code="75001" data-state="">
                   28 Rue Saint-Roch Paris, 프랑스 75001
                  </div>
                 </div>
                 <div class="l-row t-font-xs t-line-height-xs l-margin-bottom-three-quarters t-info-row">
                  <div class="js-hotel-distance l-hotel-distance l-s-col-2 l-m-col-4 l-l-col-3 l-hotel-distance-border t-color-standard-90">
                   <span aria-label="1.8 km 1.1 마일리지" class="l-padding-left-quarter l-padding-right-quarter t-bg-standard-100 t-color-standard-20 border-radius-small" title="1.1 마일리지">
                    <span aria-hidden="true">
                     1.8 km
                    </span>
                   </span>
                   목적지 기준
                  </div>
                  <div class="js-hotel-category l-hotel-category l-hidden-m-map-view l-s-col-2 l-m-col-4 l-l-col-4 t-line-height-xs ">
                   <span class="t-font-weight-bold">
                    [ahref]
                    
                   </span>
                   <span class="hotel-reward l-display-inline-block t-color-standard-90">
                   </span>
                  </div>
                 </div>
                 <div class="l-row is-hidden-s is-hidden-m is-hidden-l is-visible-bubble l-view-rate">
                 </div>
                 <div class="macro-card-property-type l-display-none">
                 </div>
                </div>
                <div class="js-hotel-logo l-m-col-1-6 l-s-col-12 is-visible-m l-l-col-2 l-center-align is-visible-l l-margin-right-none">
                 <span class="t-brand-logo-icon-DS t-color-standard-100">
                 </span>
                </div>
               </div>
               <div class="js-rate-btn-container l-row l-padding-left-five-quarters l-padding-right-five-quarters l-pos-relative t-border-top t-border-color-standard-110">
                <div class="rate-container l-clear l-s-col-4 l-m-col-8 l-l-col-12 l-m-col-last l-s-col-last l-float-right l-padding-top-five-quarters l-padding-bottom-half l-l-padding-bottom-five-quarters l-m-padding-bottom-three-quarters l-display-inline-block">
                 <div class="js-button-text-wrapper l-float-right ">
                  [linkx]
                  
                 </div>
                </div>
               </div>
              </div>
             </div>
             <div class=" l-row t-bg-standard-20 property-record-item l-display-inline-m js-property-record-item" data-brand="DS" data-city="Paris" data-close-text="" data-country="FR" data-map="true" data-marsha="PARND" data-pnum="3" data-promo-code="" data-property='{"lat": "48.8732","longitude":"2.3468","brand": "DS","marshaCode": "PARND","hwsInLanguageMissing": "false","blank":"-","type":"","hotelName":"Hotel de NELL, Paris, a Member of Design Hotels™","propertyType":"","propMarkerLabel":"", "propMarkerBedLabel":"","index": ""}' data-statecode="" data-stateprovince="" id="property-record-map-PARND">
              <div class="l-s-col-4 l-m-col-8 l-l-col-12 l-m-col-last l-s-col-last">
               <div class="l-row">
                <div class="js-image-container image-container l-pos-relative l-s-col-4 l-m-col-3 l-l-col-3" data-hotelname="Hotel de NELL, Paris, a Member of Design Hotels™" data-imageurl="//cache.marriott.com/marriottassets/marriott/PARND/parnd-junior-suite-8982-hor-feat.jpg">
                 [linkx]
                 
                </div>
                <div class="js-hotel-location l-overflow-hidden l-m-col-5 l-l-col-7 l-s-col-las small-padding-right-one-quarter small-padding-left-one-quarter">
                 <div class="l-row l-margin-top-five-quarters">
                  <div class="l-s-col-4 l-m-col-8 l-l-col-12 l-m-col-last l-s-col-last">
                   [ahref]
                   
                  </div>
                 </div>
                 <div class="l-row l-margin-bottom-three-quarters l-hidden-m-map-view">
                  <div class="l-s-col-4 l-m-col-8 l-l-col-12 l-m-col-last l-s-col-last t-font-s t-line-height-m m-hotel-address t-color-standard-90" data-address-line1="7-9, rue du Conservatoire" data-city="Paris" data-contact="+33 1 44 83 83 60" data-country="KR" data-country-description="프랑스" data-postal-code="75009" data-state="">
                   7-9, rue du Conservatoire Paris, 프랑스 75009
                  </div>
                 </div>
                 <div class="l-row t-font-xs t-line-height-xs l-margin-bottom-three-quarters t-info-row">
                  <div class="js-hotel-distance l-hotel-distance l-s-col-2 l-m-col-4 l-l-col-3 l-hotel-distance-border t-color-standard-90">
                   <span aria-label="1.9 km 1.2 마일리지" class="l-padding-left-quarter l-padding-right-quarter t-bg-standard-100 t-color-standard-20 border-radius-small" title="1.2 마일리지">
                    <span aria-hidden="true">
                     1.9 km
                    </span>
                   </span>
                   목적지 기준
                  </div>
                  <div class="js-hotel-category l-hotel-category l-hidden-m-map-view l-s-col-2 l-m-col-4 l-l-col-4 t-line-height-xs ">
                   <span class="t-font-weight-bold">
                    [linkx]
                    
                   </span>
                   <span class="hotel-reward l-display-inline-block t-color-standard-90">
                   </span>
                  </div>
                 </div>
                 <div class="l-row is-hidden-s is-hidden-m is-hidden-l is-visible-bubble l-view-rate">
                 </div>
                 <div class="macro-card-property-type l-display-none">
                 </div>
                </div>
                <div class="js-hotel-logo l-m-col-1-6 l-s-col-12 is-visible-m l-l-col-2 l-center-align is-visible-l l-margin-right-none">
                 <span class="t-brand-logo-icon-DS t-color-standard-100">
                 </span>
                </div>
               </div>
               <div class="js-rate-btn-container l-row l-padding-left-five-quarters l-padding-right-five-quarters l-pos-relative t-border-top t-border-color-standard-110">
                <div class="rate-container l-clear l-s-col-4 l-m-col-8 l-l-col-12 l-m-col-last l-s-col-last l-float-right l-padding-top-five-quarters l-padding-bottom-half l-l-padding-bottom-five-quarters l-m-padding-bottom-three-quarters l-display-inline-block">
                 <div class="js-button-text-wrapper l-float-right ">
                  <a class="js-view-rate-btn-link analytics-click l-float-right " href="/reservation/availabilitySearch.mi?isRateCalendar=true&amp;propertyCode=PARND&amp;isSearch=true&amp;currency= ">
                   <div class="m-button m-button-primary l-margin-top-quarter ">
                   </div>
                  </a>
                 </div>
                </div>
               </div>
              </div>
             </div>
             <div class=" l-row t-bg-standard-20 property-record-item l-display-inline-m js-property-record-item" data-brand="CY" data-city="Paris" data-close-text="" data-country="FR" data-map="true" data-marsha="PARGL" data-pnum="4" data-promo-code="" data-property='{"lat": "48.845083","longitude":"2.371372","brand": "CY","marshaCode": "PARGL","hwsInLanguageMissing": "false","blank":"-","type":"","hotelName":"Courtyard Paris Gare de Lyon","propertyType":"","propMarkerLabel":"", "propMarkerBedLabel":"","index": ""}' data-statecode="" data-stateprovince="" id="property-record-map-PARGL">
              <div class="l-s-col-4 l-m-col-8 l-l-col-12 l-m-col-last l-s-col-last">
               <div class="l-row">
                <div class="js-image-container image-container l-pos-relative l-s-col-4 l-m-col-3 l-l-col-3" data-hotelname="Courtyard Paris Gare de Lyon" data-imageurl="//cache.marriott.com/marriottassets/marriott/PARGL/pargl-guestroom-0002-hor-feat.jpg">
                 [linkx]
                 
                </div>
                <div class="js-hotel-location l-overflow-hidden l-m-col-5 l-l-col-7 l-s-col-las small-padding-right-one-quarter small-padding-left-one-quarter">
                 <div class="l-row l-margin-top-five-quarters">
                  <div class="l-s-col-4 l-m-col-8 l-l-col-12 l-m-col-last l-s-col-last">
                   [linkx]
                   
                  </div>
                 </div>
                 <div class="l-row l-margin-bottom-three-quarters l-hidden-m-map-view">
                  <div class="l-s-col-4 l-m-col-8 l-l-col-12 l-m-col-last l-s-col-last t-font-s t-line-height-m m-hotel-address t-color-standard-90" data-address-line1="209-211 Rue de Bercy" data-city="Paris" data-contact="+33 1 80 20 63 00" data-country="KR" data-country-description="프랑스" data-postal-code="75012" data-state="">
                   209-211 Rue de Bercy Paris, 프랑스 75012
                  </div>
                 </div>
                 <div class="l-row t-font-xs t-line-height-xs l-margin-bottom-three-quarters t-info-row">
                  <div class="js-hotel-distance l-hotel-distance l-s-col-2 l-m-col-4 l-l-col-3 l-hotel-distance-border t-color-standard-90">
                   <span aria-label="1.9 km 1.2 마일리지" class="l-padding-left-quarter l-padding-right-quarter t-bg-standard-100 t-color-standard-20 border-radius-small" title="1.2 마일리지">
                    <span aria-hidden="true">
                     1.9 km
                    </span>
                   </span>
                   목적지 기준
                  </div>
                  <div class="js-hotel-rating l-l-col-4 t-border-right t-border-color-standard-110 l-s-col-2 l-m-col-4 l-l-col-3l-hotel-rating l-rattings t-line-height-xs l-l-col-4-flex">
                   [linkx]
                   
                  </div>
                  <div class="js-hotel-category l-hotel-category l-hidden-m-map-view l-s-col-2 l-m-col-4 l-l-col-4 t-line-height-xs ">
                   <span class="t-font-weight-bold">
                    <a class="js-view-hotel-category t-alt-link" data-mfp-src="/loyalty/pointsGridPopUp.mi?awardType=Standard&amp;category=4&amp;marshaCode=PARGL" href="#">
                     4
                    </a>
                   </span>
                   <span class="hotel-reward l-display-inline-block t-color-standard-90">
                   </span>
                  </div>
                 </div>
                 <div class="l-row is-hidden-s is-hidden-m is-hidden-l is-visible-bubble l-view-rate">
                 </div>
                 <div class="macro-card-property-type l-display-none">
                 </div>
                </div>
                <div class="js-hotel-logo l-m-col-1-6 l-s-col-12 is-visible-m l-l-col-2 l-center-align is-visible-l l-margin-right-none">
                 <span class="t-brand-logo-icon-CY t-color-standard-100">
                 </span>
                </div>
               </div>
               <div class="js-rate-btn-container l-row l-padding-left-five-quarters l-padding-right-five-quarters l-pos-relative t-border-top t-border-color-standard-110">
                <div class="rate-container l-clear l-s-col-4 l-m-col-8 l-l-col-12 l-m-col-last l-s-col-last l-float-right l-padding-top-five-quarters l-padding-bottom-half l-l-padding-bottom-five-quarters l-m-padding-bottom-three-quarters l-display-inline-block">
                 <div class="js-button-text-wrapper l-float-right ">
                  [linkx]
                  
                 </div>
                </div>
               </div>
              </div>
             </div>
             <div class=" l-row t-bg-standard-20 property-record-item l-display-inline-m js-property-record-item" data-brand="BR" data-city="파리" data-close-text="" data-country="FR" data-map="true" data-marsha="PARVD" data-pnum="5" data-promo-code="" data-property='{"lat": "48.865489","longitude":"2.329529","brand": "BR","marshaCode": "PARVD","hwsInLanguageMissing": "false","blank":"-","type":"","hotelName":"르네상스 파리 방돔 호텔","propertyType":"","propMarkerLabel":"", "propMarkerBedLabel":"","index": ""}' data-statecode="" data-stateprovince="" id="property-record-map-PARVD">
              <div class="l-s-col-4 l-m-col-8 l-l-col-12 l-m-col-last l-s-col-last">
               <div class="l-row">
                <div class="js-image-container image-container l-pos-relative l-s-col-4 l-m-col-3 l-l-col-3" data-hotelname="르네상스 파리 방돔 호텔" data-imageurl="//cache.marriott.com/marriottassets/marriott/PARVD/parvd-spa-0171-hor-feat.jpg">
                 [ahref]
                 
                </div>
                <div class="js-hotel-location l-overflow-hidden l-m-col-5 l-l-col-7 l-s-col-las small-padding-right-one-quarter small-padding-left-one-quarter">
                 <div class="l-row l-margin-top-five-quarters">
                  <div class="l-s-col-4 l-m-col-8 l-l-col-12 l-m-col-last l-s-col-last">
                   [linkx]
                   
                  </div>
                 </div>
                 <div class="l-row l-margin-bottom-three-quarters l-hidden-m-map-view">
                  <div class="l-s-col-4 l-m-col-8 l-l-col-12 l-m-col-last l-s-col-last t-font-s t-line-height-m m-hotel-address t-color-standard-90" data-address-line1="4, Rue du Mont Thabor" data-city="파리" data-contact="+33 1 40 20 20 00" data-country="KR" data-country-description="프랑스" data-postal-code="75001" data-state="">
                   4, Rue du Mont Thabor 파리, 프랑스 75001
                  </div>
                 </div>
                 <div class="l-row t-font-xs t-line-height-xs l-margin-bottom-three-quarters t-info-row">
                  <div class="js-hotel-distance l-hotel-distance l-s-col-2 l-m-col-4 l-l-col-3 l-hotel-distance-border t-color-standard-90">
                   <span aria-label="1.9 km 1.2 마일리지" class="l-padding-left-quarter l-padding-right-quarter t-bg-standard-100 t-color-standard-20 border-radius-small" title="1.2 마일리지">
                    <span aria-hidden="true">
                     1.9 km
                    </span>
                   </span>
                   목적지 기준
                  </div>
                  <div class="js-hotel-rating l-l-col-4 t-border-right t-border-color-standard-110 l-s-col-2 l-m-col-4 l-l-col-3l-hotel-rating l-rattings t-line-height-xs l-l-col-4-flex">
                   [linkx]
                   
                  </div>
                  <div class="js-hotel-category l-hotel-category l-hidden-m-map-view l-s-col-2 l-m-col-4 l-l-col-4 t-line-height-xs ">
                   <span class="t-font-weight-bold">
                    [ahref]
                    
                   </span>
                   <span class="hotel-reward l-display-inline-block t-color-standard-90">
                   </span>
                  </div>
                 </div>
                 <div class="l-row is-hidden-s is-hidden-m is-hidden-l is-visible-bubble l-view-rate">
                 </div>
                 <div class="macro-card-property-type l-display-none">
                 </div>
                </div>
                <div class="js-hotel-logo l-m-col-1-6 l-s-col-12 is-visible-m l-l-col-2 l-center-align is-visible-l l-margin-right-none">
                 <span class="t-brand-logo-icon-BR t-color-standard-100">
                 </span>
                </div>
               </div>
               <div class="js-rate-btn-container l-row l-padding-left-five-quarters l-padding-right-five-quarters l-pos-relative t-border-top t-border-color-standard-110">
                <div class="rate-container l-clear l-s-col-4 l-m-col-8 l-l-col-12 l-m-col-last l-s-col-last l-float-right l-padding-top-five-quarters l-padding-bottom-half l-l-padding-bottom-five-quarters l-m-padding-bottom-three-quarters l-display-inline-block">
                 <div class="js-button-text-wrapper l-float-right ">
                  [ahref]
                  
                 </div>
                </div>
               </div>
              </div>
             </div>
             <div class=" l-row t-bg-standard-20 property-record-item l-display-inline-m js-property-record-item" data-brand="WI" data-city="파리" data-close-text="" data-country="FR" data-map="true" data-marsha="PARVW" data-pnum="6" data-promo-code="" data-property='{"lat": "48.865613","longitude":"2.32785","brand": "WI","marshaCode": "PARVW","hwsInLanguageMissing": "false","blank":"-","type":"","hotelName":"웨스틴 파리 - 방돔","propertyType":"","propMarkerLabel":"", "propMarkerBedLabel":"","index": ""}' data-statecode="" data-stateprovince="" id="property-record-map-PARVW">
              <div class="l-s-col-4 l-m-col-8 l-l-col-12 l-m-col-last l-s-col-last">
               <div class="l-row">
                <div class="js-image-container image-container l-pos-relative l-s-col-4 l-m-col-3 l-l-col-3" data-hotelname="웨스틴 파리 - 방돔" data-imageurl="//cache.marriott.com/marriottassets/marriott/PARVW/parvw-attraction-exterior-9708-hor-feat.jpg">
                 [ahref]
                 
                </div>
                <div class="js-hotel-location l-overflow-hidden l-m-col-5 l-l-col-7 l-s-col-las small-padding-right-one-quarter small-padding-left-one-quarter">
                 <div class="l-row l-margin-top-five-quarters">
                  <div class="l-s-col-4 l-m-col-8 l-l-col-12 l-m-col-last l-s-col-last">
                   [linkx]
                   
                  </div>
                 </div>
                 <div class="l-row l-margin-bottom-three-quarters l-hidden-m-map-view">
                  <div class="l-s-col-4 l-m-col-8 l-l-col-12 l-m-col-last l-s-col-last t-font-s t-line-height-m m-hotel-address t-color-standard-90" data-address-line1="3 Rue De Castiglione" data-city="파리" data-contact="+33 1 44 77 11 11" data-country="KR" data-country-description="프랑스" data-postal-code="75001" data-state="">
                   3 Rue De Castiglione 파리, 프랑스 75001
                  </div>
                 </div>
                 <div class="l-row t-font-xs t-line-height-xs l-margin-bottom-three-quarters t-info-row">
                  <div class="js-hotel-distance l-hotel-distance l-s-col-2 l-m-col-4 l-l-col-3 l-hotel-distance-border t-color-standard-90">
                   <span aria-label="2.0 km 1.3 마일리지" class="l-padding-left-quarter l-padding-right-quarter t-bg-standard-100 t-color-standard-20 border-radius-small" title="1.3 마일리지">
                    <span aria-hidden="true">
                     2.0 km
                    </span>
                   </span>
                   목적지 기준
                  </div>
                  <div class="js-hotel-rating l-l-col-4 t-border-right t-border-color-standard-110 l-s-col-2 l-m-col-4 l-l-col-3l-hotel-rating l-rattings t-line-height-xs l-l-col-4-flex">
                   [linkx]
                   
                  </div>
                  <div class="js-hotel-category l-hotel-category l-hidden-m-map-view l-s-col-2 l-m-col-4 l-l-col-4 t-line-height-xs ">
                   <span class="t-font-weight-bold">
                    [linkx]
                    
                   </span>
                   <span class="hotel-reward l-display-inline-block t-color-standard-90">
                   </span>
                  </div>
                 </div>
                 <div class="l-row is-hidden-s is-hidden-m is-hidden-l is-visible-bubble l-view-rate">
                 </div>
                 <div class="macro-card-property-type l-display-none">
                 </div>
                </div>
                <[keywordx]>
                </[keywordx]>
               </div>
               <div class="js-rate-btn-container l-row l-padding-left-five-quarters l-padding-right-five-quarters l-pos-relative t-border-top t-border-color-standard-110">
                <div class="rate-container l-clear l-s-col-4 l-m-col-8 l-l-col-12 l-m-col-last l-s-col-last l-float-right l-padding-top-five-quarters l-padding-bottom-half l-l-padding-bottom-five-quarters l-m-padding-bottom-three-quarters l-display-inline-block">
                 <div class="js-button-text-wrapper l-float-right ">
                  [ahref]
                  
                 </div>
                </div>
               </div>
              </div>
             </div>
             <div class=" l-row t-bg-standard-20 property-record-item l-display-inline-m js-property-record-item" data-brand="MC" data-city="파리" data-close-text="" data-country="FR" data-map="true" data-marsha="PAROA" data-pnum="7" data-promo-code="" data-property='{"lat": "48.872608","longitude":"2.336603","brand": "MC","marshaCode": "PAROA","hwsInLanguageMissing": "false","blank":"-","type":"","hotelName":"파리 메리어트 오페라 앰배서더 호텔","propertyType":"","propMarkerLabel":"", "propMarkerBedLabel":"","index": ""}' data-statecode="" data-stateprovince="" id="property-record-map-PAROA">
              <div class="l-s-col-4 l-m-col-8 l-l-col-12 l-m-col-last l-s-col-last">
               <div class="l-row">
                <div class="js-image-container image-container l-pos-relative l-s-col-4 l-m-col-3 l-l-col-3" data-hotelname="파리 메리어트 오페라 앰배서더 호텔" data-imageurl="//cache.marriott.com/marriottassets/marriott/PAROA/paroa-exterior-0934-hor-feat.jpg">
                 [linkx]
                 
                </div>
                <div class="js-hotel-location l-overflow-hidden l-m-col-5 l-l-col-7 l-s-col-las small-padding-right-one-quarter small-padding-left-one-quarter">
                 <div class="l-row l-margin-top-five-quarters">
                  <div class="l-s-col-4 l-m-col-8 l-l-col-12 l-m-col-last l-s-col-last">
                   [ahref]
                   
                  </div>
                 </div>
                 <div class="l-row l-margin-bottom-three-quarters l-hidden-m-map-view">
                  <div class="l-s-col-4 l-m-col-8 l-l-col-12 l-m-col-last l-s-col-last t-font-s t-line-height-m m-hotel-address t-color-standard-90" data-address-line1="16 Boulevard Haussmann" data-city="파리" data-contact="+33 1 44 83 40 40" data-country="KR" data-country-description="프랑스" data-postal-code="75009" data-state="">
                   16 Boulevard Haussmann 파리, 프랑스 75009
                  </div>
                 </div>
                 <div class="l-row t-font-xs t-line-height-xs l-margin-bottom-three-quarters t-info-row">
                  <div class="js-hotel-distance l-hotel-distance l-s-col-2 l-m-col-4 l-l-col-3 l-hotel-distance-border t-color-standard-90">
                   <span aria-label="2.1 km 1.3 마일리지" class="l-padding-left-quarter l-padding-right-quarter t-bg-standard-100 t-color-standard-20 border-radius-small" title="1.3 마일리지">
                    <span aria-hidden="true">
                     2.1 km
                    </span>
                   </span>
                   목적지 기준
                  </div>
                  <div class="js-hotel-rating l-l-col-4 t-border-right t-border-color-standard-110 l-s-col-2 l-m-col-4 l-l-col-3l-hotel-rating l-rattings t-line-height-xs l-l-col-4-flex">
                   [ahref]
                   
                  </div>
                  <div class="js-hotel-category l-hotel-category l-hidden-m-map-view l-s-col-2 l-m-col-4 l-l-col-4 t-line-height-xs ">
                   <span class="t-font-weight-bold">
                    [linkx]
                    
                   </span>
                   <span class="hotel-reward l-display-inline-block t-color-standard-90">
                   </span>
                  </div>
                 </div>
                 <div class="l-row is-hidden-s is-hidden-m is-hidden-l is-visible-bubble l-view-rate">
                 </div>
                 <div class="macro-card-property-type l-display-none">
                 </div>
                </div>
                <div class="js-hotel-logo l-m-col-1-6 l-s-col-12 is-visible-m l-l-col-2 l-center-align is-visible-l l-margin-right-none">
                 <span class="t-brand-logo-icon-MC t-color-standard-100">
                 </span>
                </div>
               </div>
               <div class="js-rate-btn-container l-row l-padding-left-five-quarters l-padding-right-five-quarters l-pos-relative t-border-top t-border-color-standard-110">
                <div class="rate-container l-clear l-s-col-4 l-m-col-8 l-l-col-12 l-m-col-last l-s-col-last l-float-right l-padding-top-five-quarters l-padding-bottom-half l-l-padding-bottom-five-quarters l-m-padding-bottom-three-quarters l-display-inline-block">
                 <div class="js-button-text-wrapper l-float-right ">
                  [linkx]
                  
                 </div>
                </div>
               </div>
              </div>
             </div>
             <div class=" l-row t-bg-standard-20 property-record-item l-display-inline-m js-property-record-item" data-brand="WH" data-city="파리" data-close-text="" data-country="FR" data-map="true" data-marsha="PARWH" data-pnum="8" data-promo-code="" data-property='{"lat": "48.872365","longitude":"2.333393","brand": "WH","marshaCode": "PARWH","hwsInLanguageMissing": "false","blank":"-","type":"","hotelName":"W 파리 - 오페라","propertyType":"","propMarkerLabel":"", "propMarkerBedLabel":"","index": ""}' data-statecode="" data-stateprovince="" id="property-record-map-PARWH">
              <div class="l-s-col-4 l-m-col-8 l-l-col-12 l-m-col-last l-s-col-last">
               <div class="l-row">
                <div class="js-image-container image-container l-pos-relative l-s-col-4 l-m-col-3 l-l-col-3" data-hotelname="W 파리 - 오페라" data-imageurl="//cache.marriott.com/marriottassets/marriott/PARWH/parwh-exterior-1063-hor-feat.jpg">
                 [ahref]
                 
                </div>
                <div class="js-hotel-location l-overflow-hidden l-m-col-5 l-l-col-7 l-s-col-las small-padding-right-one-quarter small-padding-left-one-quarter">
                 <div class="l-row l-margin-top-five-quarters">
                  <div class="l-s-col-4 l-m-col-8 l-l-col-12 l-m-col-last l-s-col-last">
                   [linkx]
                   
                  </div>
                 </div>
                 <div class="l-row l-margin-bottom-three-quarters l-hidden-m-map-view">
                  <div class="l-s-col-4 l-m-col-8 l-l-col-12 l-m-col-last l-s-col-last t-font-s t-line-height-m m-hotel-address t-color-standard-90" data-address-line1="4 rue Meyerbeer" data-city="파리" data-contact="+33 1 77 48 94 94" data-country="KR" data-country-description="프랑스" data-postal-code="75009" data-state="">
                   4 rue Meyerbeer 파리, 프랑스 75009
                  </div>
                 </div>
                 <div class="l-row t-font-xs t-line-height-xs l-margin-bottom-three-quarters t-info-row">
                  <div class="js-hotel-distance l-hotel-distance l-s-col-2 l-m-col-4 l-l-col-3 l-hotel-distance-border t-color-standard-90">
                   <span aria-label="2.2 km 1.4 마일리지" class="l-padding-left-quarter l-padding-right-quarter t-bg-standard-100 t-color-standard-20 border-radius-small" title="1.4 마일리지">
                    <span aria-hidden="true">
                     2.2 km
                    </span>
                   </span>
                   목적지 기준
                  </div>
                  <div class="js-hotel-rating l-l-col-4 t-border-right t-border-color-standard-110 l-s-col-2 l-m-col-4 l-l-col-3l-hotel-rating l-rattings t-line-height-xs l-l-col-4-flex">
                   [ahref]
                   
                  </div>
                  <div class="js-hotel-category l-hotel-category l-hidden-m-map-view l-s-col-2 l-m-col-4 l-l-col-4 t-line-height-xs ">
                   <span class="t-font-weight-bold">
                    [linkx]
                    
                   </span>
                   <span class="hotel-reward l-display-inline-block t-color-standard-90">
                   </span>
                  </div>
                 </div>
                 <div class="l-row is-hidden-s is-hidden-m is-hidden-l is-visible-bubble l-view-rate">
                 </div>
                 <div class="macro-card-property-type l-display-none">
                 </div>
                </div>
                <div class="js-hotel-logo l-m-col-1-6 l-s-col-12 is-visible-m l-l-col-2 l-center-align is-visible-l l-margin-right-none">
                 <span class="t-brand-logo-icon-WH t-color-standard-100">
                 </span>
                </div>
               </div>
               <div class="js-rate-btn-container l-row l-padding-left-five-quarters l-padding-right-five-quarters l-pos-relative t-border-top t-border-color-standard-110">
                <div class="rate-container l-clear l-s-col-4 l-m-col-8 l-l-col-12 l-m-col-last l-s-col-last l-float-right l-padding-top-five-quarters l-padding-bottom-half l-l-padding-bottom-five-quarters l-m-padding-bottom-three-quarters l-display-inline-block">
                 <div class="js-button-text-wrapper l-float-right ">
                  [linkx]
                  
                 </div>
                </div>
               </div>
              </div>
             </div>
             <div class=" l-row t-bg-standard-20 property-record-item l-display-inline-m js-property-record-item" data-brand="AK" data-city="Paris" data-close-text="" data-country="FR" data-map="true" data-marsha="PARAB" data-pnum="9" data-promo-code="" data-property='{"lat": "48.873825","longitude":"2.336525","brand": "AK","marshaCode": "PARAB","hwsInLanguageMissing": "false","blank":"-","type":"","hotelName":"Hotel Banke Opera, Autograph Collection","propertyType":"새로운 혜택","propMarkerLabel":"", "propMarkerBedLabel":"","index": ""}' data-statecode="" data-stateprovince="" id="property-record-map-PARAB">
              <div class="l-s-col-4 l-m-col-8 l-l-col-12 l-m-col-last l-s-col-last">
               <div class="l-row">
                <div class="js-image-container image-container l-pos-relative l-s-col-4 l-m-col-3 l-l-col-3" data-hotelname="Hotel Banke Opera, Autograph Collection" data-imageurl="//cache.marriott.com/marriottassets/marriott/PARAB/parab-exterior-0001-hor-feat.jpg">
                 <span class="l-new-hotel m-merch-shape-1 m-merch-style-1">
                 </span>
                 [ahref]
                 
                </div>
                <div class="js-hotel-location l-overflow-hidden l-m-col-5 l-l-col-7 l-s-col-las small-padding-right-one-quarter small-padding-left-one-quarter">
                 <div class="l-row l-margin-top-five-quarters">
                  <div class="l-s-col-4 l-m-col-8 l-l-col-12 l-m-col-last l-s-col-last">
                   [linkx]
                   
                  </div>
                 </div>
                 <div class="l-row l-margin-bottom-three-quarters l-hidden-m-map-view">
                  <div class="l-s-col-4 l-m-col-8 l-l-col-12 l-m-col-last l-s-col-last t-font-s t-line-height-m m-hotel-address t-color-standard-90" data-address-line1="20 Rue La Fayette" data-city="Paris" data-contact="+33 1 55 33 22 22" data-country="KR" data-country-description="프랑스" data-postal-code="75009" data-state="">
                   20 Rue La Fayette Paris, 프랑스 75009
                  </div>
                 </div>
                 <div class="l-row t-font-xs t-line-height-xs l-margin-bottom-three-quarters t-info-row">
                  <div class="js-hotel-distance l-hotel-distance l-s-col-2 l-m-col-4 l-l-col-3 l-hotel-distance-border t-color-standard-90">
                   <span aria-label="2.2 km 1.4 마일리지" class="l-padding-left-quarter l-padding-right-quarter t-bg-standard-100 t-color-standard-20 border-radius-small" title="1.4 마일리지">
                    <span aria-hidden="true">
                     2.2 km
                    </span>
                   </span>
                   목적지 기준
                  </div>
                  <div class="js-hotel-rating l-l-col-4 t-border-right t-border-color-standard-110 l-s-col-2 l-m-col-4 l-l-col-3l-hotel-rating l-rattings t-line-height-xs l-l-col-4-flex">
                   [linkx]
                   
                  </div>
                  <div class="js-hotel-category l-hotel-category l-hidden-m-map-view l-s-col-2 l-m-col-4 l-l-col-4 t-line-height-xs ">
                   <span class="t-font-weight-bold">
                    [linkx]
                    
                   </span>
                   <span class="hotel-reward l-display-inline-block t-color-standard-90">
                   </span>
                  </div>
                 </div>
                 <div class="l-row is-hidden-s is-hidden-m is-hidden-l is-visible-bubble l-view-rate">
                 </div>
                 <div class="macro-card-property-type l-display-none">
                 </div>
                </div>
                <div class="js-hotel-logo l-m-col-1-6 l-s-col-12 is-visible-m l-l-col-2 l-center-align is-visible-l l-margin-right-none">
                 <span class="t-brand-logo-icon-AK t-color-standard-100">
                 </span>
                </div>
               </div>
               <div class="js-rate-btn-container l-row l-padding-left-five-quarters l-padding-right-five-quarters l-pos-relative t-border-top t-border-color-standard-110">
                <div class="rate-container l-clear l-s-col-4 l-m-col-8 l-l-col-12 l-m-col-last l-s-col-last l-float-right l-padding-top-five-quarters l-padding-bottom-half l-l-padding-bottom-five-quarters l-m-padding-bottom-three-quarters l-display-inline-block">
                 <div class="js-button-text-wrapper l-float-right ">
                  [linkx]
                  
                 </div>
                </div>
               </div>
              </div>
             </div>
             <div class=" l-row t-bg-standard-20 property-record-item l-display-inline-m js-property-record-item" data-brand="MC" data-city="파리" data-close-text="" data-country="FR" data-map="true" data-marsha="PARST" data-pnum="10" data-promo-code="" data-property='{"lat": "48.831781","longitude":"2.339959","brand": "MC","marshaCode": "PARST","hwsInLanguageMissing": "false","blank":"-","type":"","hotelName":"파리 메리어트 리브고쉬 호텔 &amp; 컨퍼런스 센터","propertyType":"","propMarkerLabel":"", "propMarkerBedLabel":"","index": ""}' data-statecode="" data-stateprovince="" id="property-record-map-PARST">
              <div class="l-s-col-4 l-m-col-8 l-l-col-12 l-m-col-last l-s-col-last">
               <div class="l-row">
                <div class="js-image-container image-container l-pos-relative l-s-col-4 l-m-col-3 l-l-col-3" data-hotelname="파리 메리어트 리브고쉬 호텔 &amp; 컨퍼런스 센터" data-imageurl="//cache.marriott.com/marriottassets/marriott/PARST/parst-lobby-6893-hor-feat.jpg">
                 [linkx]
                 
                </div>
                <div class="js-hotel-location l-overflow-hidden l-m-col-5 l-l-col-7 l-s-col-las small-padding-right-one-quarter small-padding-left-one-quarter">
                 <div class="l-row l-margin-top-five-quarters">
                  <div class="l-s-col-4 l-m-col-8 l-l-col-12 l-m-col-last l-s-col-last">
                   [ahref]
                   
                  </div>
                 </div>
                 <div class="l-row l-margin-bottom-three-quarters l-hidden-m-map-view">
                  <div class="l-s-col-4 l-m-col-8 l-l-col-12 l-m-col-last l-s-col-last t-font-s t-line-height-m m-hotel-address t-color-standard-90" data-address-line1="17 Boulevard Saint Jacques" data-city="파리" data-contact="+33 1 40 78 79 80" data-country="KR" data-country-description="프랑스" data-postal-code="75014" data-state="">
                   17 Boulevard Saint Jacques 파리, 프랑스 75014
                  </div>
                 </div>
                 <div class="l-row t-font-xs t-line-height-xs l-margin-bottom-three-quarters t-info-row">
                  <div class="js-hotel-distance l-hotel-distance l-s-col-2 l-m-col-4 l-l-col-3 l-hotel-distance-border t-color-standard-90">
                   <span aria-label="2.9 km 1.8 마일리지" class="l-padding-left-quarter l-padding-right-quarter t-bg-standard-100 t-color-standard-20 border-radius-small" title="1.8 마일리지">
                    <span aria-hidden="true">
                     2.9 km
                    </span>
                   </span>
                   목적지 기준
                  </div>
                  <div class="js-hotel-rating l-l-col-4 t-border-right t-border-color-standard-110 l-s-col-2 l-m-col-4 l-l-col-3l-hotel-rating l-rattings t-line-height-xs l-l-col-4-flex">
                   [linkx]
                   
                  </div>
                  <div class="js-hotel-category l-hotel-category l-hidden-m-map-view l-s-col-2 l-m-col-4 l-l-col-4 t-line-height-xs ">
                   <span class="t-font-weight-bold">
                    [ahref]
                    
                   </span>
                   <span class="hotel-reward l-display-inline-block t-color-standard-90">
                   </span>
                  </div>
                 </div>
                 <div class="l-row is-hidden-s is-hidden-m is-hidden-l is-visible-bubble l-view-rate">
                 </div>
                 <div class="macro-card-property-type l-display-none">
                 </div>
                </div>
                <div class="js-hotel-logo l-m-col-1-6 l-s-col-12 is-visible-m l-l-col-2 l-center-align is-visible-l l-margin-right-none">
                 <span class="t-brand-logo-icon-MC t-color-standard-100">
                 </span>
                </div>
               </div>
               <div class="js-rate-btn-container l-row l-padding-left-five-quarters l-padding-right-five-quarters l-pos-relative t-border-top t-border-color-standard-110">
                <div class="rate-container l-clear l-s-col-4 l-m-col-8 l-l-col-12 l-m-col-last l-s-col-last l-float-right l-padding-top-five-quarters l-padding-bottom-half l-l-padding-bottom-five-quarters l-m-padding-bottom-three-quarters l-display-inline-block">
                 <div class="js-button-text-wrapper l-float-right ">
                  [linkx]
                  
                 </div>
                </div>
               </div>
              </div>
             </div>
             <div class=" l-row t-bg-standard-20 property-record-item l-display-inline-m js-property-record-item" data-brand="DS" data-city="Paris" data-close-text="" data-country="FR" data-map="true" data-marsha="PARDS" data-pnum="11" data-promo-code="" data-property='{"lat": "48.8664","longitude":"2.3089","brand": "DS","marshaCode": "PARDS","hwsInLanguageMissing": "false","blank":"-","type":"","hotelName":"La Maison Champs Elysées, Paris, a Member of Design Hotels™","propertyType":"","propMarkerLabel":"", "propMarkerBedLabel":"","index": ""}' data-statecode="" data-stateprovince="" id="property-record-map-PARDS">
              <div class="l-s-col-4 l-m-col-8 l-l-col-12 l-m-col-last l-s-col-last">
               <div class="l-row">
                <div class="js-image-container image-container l-pos-relative l-s-col-4 l-m-col-3 l-l-col-3" data-hotelname="La Maison Champs Elysées, Paris, a Member of Design Hotels™" data-imageurl="//cache.marriott.com/marriottassets/marriott/PARDS/pards-reception-9172-hor-feat.jpg">
                 [ahref]
                 
                </div>
                <div class="js-hotel-location l-overflow-hidden l-m-col-5 l-l-col-7 l-s-col-las small-padding-right-one-quarter small-padding-left-one-quarter">
                 <div class="l-row l-margin-top-five-quarters">
                  <div class="l-s-col-4 l-m-col-8 l-l-col-12 l-m-col-last l-s-col-last">
                   [ahref]
                   
                  </div>
                 </div>
                 <div class="l-row l-margin-bottom-three-quarters l-hidden-m-map-view">
                  <div class="l-s-col-4 l-m-col-8 l-l-col-12 l-m-col-last l-s-col-last t-font-s t-line-height-m m-hotel-address t-color-standard-90" data-address-line1="8 rue Jean Goujon" data-city="Paris" data-contact="+33 1 40 74 79 00" data-country="KR" data-country-description="프랑스" data-postal-code="75008" data-state="">
                   8 rue Jean Goujon Paris, 프랑스 75008
                  </div>
                 </div>
                 <div class="l-row t-font-xs t-line-height-xs l-margin-bottom-three-quarters t-info-row">
                  <div class="js-hotel-distance l-hotel-distance l-s-col-2 l-m-col-4 l-l-col-3 l-hotel-distance-border t-color-standard-90">
                   <span aria-label="3.3 km 2.1 마일리지" class="l-padding-left-quarter l-padding-right-quarter t-bg-standard-100 t-color-standard-20 border-radius-small" title="2.1 마일리지">
                    <span aria-hidden="true">
                     3.3 km
                    </span>
                   </span>
                   목적지 기준
                  </div>
                  <div class="js-hotel-category l-hotel-category l-hidden-m-map-view l-s-col-2 l-m-col-4 l-l-col-4 t-line-height-xs ">
                   <span class="t-font-weight-bold">
                    [ahref]
                    
                   </span>
                   <span class="hotel-reward l-display-inline-block t-color-standard-90">
                   </span>
                  </div>
                 </div>
                 <div class="l-row is-hidden-s is-hidden-m is-hidden-l is-visible-bubble l-view-rate">
                 </div>
                 <div class="macro-card-property-type l-display-none">
                 </div>
                </div>
                <div class="js-hotel-logo l-m-col-1-6 l-s-col-12 is-visible-m l-l-col-2 l-center-align is-visible-l l-margin-right-none">
                 <span class="t-brand-logo-icon-DS t-color-standard-100">
                 </span>
                </div>
               </div>
               <div class="js-rate-btn-container l-row l-padding-left-five-quarters l-padding-right-five-quarters l-pos-relative t-border-top t-border-color-standard-110">
                <div class="rate-container l-clear l-s-col-4 l-m-col-8 l-l-col-12 l-m-col-last l-s-col-last l-float-right l-padding-top-five-quarters l-padding-bottom-half l-l-padding-bottom-five-quarters l-m-padding-bottom-three-quarters l-display-inline-block">
                 <div class="js-button-text-wrapper l-float-right ">
                  [ahref]
                  
                 </div>
                </div>
               </div>
              </div>
             </div>
             <div class=" l-row t-bg-standard-20 property-record-item l-display-inline-m js-property-record-item" data-brand="MC" data-city="파리" data-close-text="" data-country="FR" data-map="true" data-marsha="PARDT" data-pnum="12" data-promo-code="" data-property='{"lat": "48.870985","longitude":"2.305062","brand": "MC","marshaCode": "PARDT","hwsInLanguageMissing": "false","blank":"-","type":"","hotelName":"파리 메리어트 샹젤리제 호텔","propertyType":"","propMarkerLabel":"", "propMarkerBedLabel":"","index": ""}' data-statecode="" data-stateprovince="" id="property-record-map-PARDT">
              <div class="l-s-col-4 l-m-col-8 l-l-col-12 l-m-col-last l-s-col-last">
               <div class="l-row">
                <div class="js-image-container image-container l-pos-relative l-s-col-4 l-m-col-3 l-l-col-3" data-hotelname="파리 메리어트 샹젤리제 호텔" data-imageurl="//cache.marriott.com/marriottassets/marriott/PARDT/pardt-exterior-0146-hor-feat.jpg">
                 [linkx]
                 
                </div>
                <div class="js-hotel-location l-overflow-hidden l-m-col-5 l-l-col-7 l-s-col-las small-padding-right-one-quarter small-padding-left-one-quarter">
                 <div class="l-row l-margin-top-five-quarters">
                  <div class="l-s-col-4 l-m-col-8 l-l-col-12 l-m-col-last l-s-col-last">
                   [linkx]
                   
                  </div>
                 </div>
                 <div class="l-row l-margin-bottom-three-quarters l-hidden-m-map-view">
                  <div class="l-s-col-4 l-m-col-8 l-l-col-12 l-m-col-last l-s-col-last t-font-s t-line-height-m m-hotel-address t-color-standard-90" data-address-line1="70 Avenue des Champs-Elysees" data-city="파리" data-contact="+33 1 53 93 55 00" data-country="KR" data-country-description="프랑스" data-postal-code="75008" data-state="">
                   70 Avenue des Champs-Elysees 파리, 프랑스 75008
                  </div>
                 </div>
                 <div class="l-row t-font-xs t-line-height-xs l-margin-bottom-three-quarters t-info-row">
                  <div class="js-hotel-distance l-hotel-distance l-s-col-2 l-m-col-4 l-l-col-3 l-hotel-distance-border t-color-standard-90">
                   <span aria-label="3.8 km 2.4 마일리지" class="l-padding-left-quarter l-padding-right-quarter t-bg-standard-100 t-color-standard-20 border-radius-small" title="2.4 마일리지">
                    <span aria-hidden="true">
                     3.8 km
                    </span>
                   </span>
                   목적지 기준
                  </div>
                  <div class="js-hotel-rating l-l-col-4 t-border-right t-border-color-standard-110 l-s-col-2 l-m-col-4 l-l-col-3l-hotel-rating l-rattings t-line-height-xs l-l-col-4-flex">
                   [ahref]
                   
                  </div>
                  <div class="js-hotel-category l-hotel-category l-hidden-m-map-view l-s-col-2 l-m-col-4 l-l-col-4 t-line-height-xs ">
                   <span class="t-font-weight-bold">
                    [ahref]
                    
                   </span>
                   <span class="hotel-reward l-display-inline-block t-color-standard-90">
                   </span>
                  </div>
                 </div>
                 <div class="l-row is-hidden-s is-hidden-m is-hidden-l is-visible-bubble l-view-rate">
                 </div>
                 <div class="macro-card-property-type l-display-none">
                 </div>
                </div>
                <div class="js-hotel-logo l-m-col-1-6 l-s-col-12 is-visible-m l-l-col-2 l-center-align is-visible-l l-margin-right-none">
                 <span class="t-brand-logo-icon-MC t-color-standard-100">
                 </span>
                </div>
               </div>
               <div class="js-rate-btn-container l-row l-padding-left-five-quarters l-padding-right-five-quarters l-pos-relative t-border-top t-border-color-standard-110">
                <div class="rate-container l-clear l-s-col-4 l-m-col-8 l-l-col-12 l-m-col-last l-s-col-last l-float-right l-padding-top-five-quarters l-padding-bottom-half l-l-padding-bottom-five-quarters l-m-padding-bottom-three-quarters l-display-inline-block">
                 <div class="js-button-text-wrapper l-float-right ">
                  [linkx]
                  
                 </div>
                </div>
               </div>
              </div>
             </div>
             <div class=" l-row t-bg-standard-20 property-record-item l-display-inline-m js-property-record-item" data-brand="LC" data-city="Paris" data-close-text="" data-country="FR" data-map="true" data-marsha="PARBE" data-pnum="13" data-promo-code="" data-property='{"lat": "48.872764","longitude":"2.305547","brand": "LC","marshaCode": "PARBE","hwsInLanguageMissing": "false","blank":"-","type":"","hotelName":"Hôtel de Berri, a Luxury Collection Hotel, Paris","propertyType":"","propMarkerLabel":"", "propMarkerBedLabel":"","index": ""}' data-statecode="" data-stateprovince="" id="property-record-map-PARBE">
              <div class="l-s-col-4 l-m-col-8 l-l-col-12 l-m-col-last l-s-col-last">
               <div class="l-row">
                <div class="js-image-container image-container l-pos-relative l-s-col-4 l-m-col-3 l-l-col-3" data-hotelname="Hôtel de Berri, a Luxury Collection Hotel, Paris" data-imageurl="//cache.marriott.com/marriottassets/marriott/PARBE/parbe-lobby-9988-hor-feat.jpg">
                 [linkx]
                 
                </div>
                <div class="js-hotel-location l-overflow-hidden l-m-col-5 l-l-col-7 l-s-col-las small-padding-right-one-quarter small-padding-left-one-quarter">
                 <div class="l-row l-margin-top-five-quarters">
                  <div class="l-s-col-4 l-m-col-8 l-l-col-12 l-m-col-last l-s-col-last">
                   [ahref]
                   
                  </div>
                 </div>
                 <div class="l-row l-margin-bottom-three-quarters l-hidden-m-map-view">
                  <div class="l-s-col-4 l-m-col-8 l-l-col-12 l-m-col-last l-s-col-last t-font-s t-line-height-m m-hotel-address t-color-standard-90" data-address-line1="18-22 Rue de Berri" data-city="Paris" data-contact="+33 1 76 53 77 70" data-country="KR" data-country-description="프랑스" data-postal-code="75008" data-state="">
                   18-22 Rue de Berri Paris, 프랑스 75008
                  </div>
                 </div>
                 <div class="l-row t-font-xs t-line-height-xs l-margin-bottom-three-quarters t-info-row">
                  <div class="js-hotel-distance l-hotel-distance l-s-col-2 l-m-col-4 l-l-col-3 l-hotel-distance-border t-color-standard-90">
                   <span aria-label="3.9 km 2.4 마일리지" class="l-padding-left-quarter l-padding-right-quarter t-bg-standard-100 t-color-standard-20 border-radius-small" title="2.4 마일리지">
                    <span aria-hidden="true">
                     3.9 km
                    </span>
                   </span>
                   목적지 기준
                  </div>
                  <div class="js-hotel-rating l-l-col-4 t-border-right t-border-color-standard-110 l-s-col-2 l-m-col-4 l-l-col-3l-hotel-rating l-rattings t-line-height-xs l-l-col-4-flex">
                   [linkx]
                   
                  </div>
                  <div class="js-hotel-category l-hotel-category l-hidden-m-map-view l-s-col-2 l-m-col-4 l-l-col-4 t-line-height-xs ">
                   <span class="t-font-weight-bold">
                    [linkx]
                    
                   </span>
                   <span class="hotel-reward l-display-inline-block t-color-standard-90">
                   </span>
                  </div>
                 </div>
                 <div class="l-row is-hidden-s is-hidden-m is-hidden-l is-visible-bubble l-view-rate">
                 </div>
                 <div class="macro-card-property-type l-display-none">
                 </div>
                </div>
                <div class="js-hotel-logo l-m-col-1-6 l-s-col-12 is-visible-m l-l-col-2 l-center-align is-visible-l l-margin-right-none">
                 <span class="t-brand-logo-icon-LC t-color-standard-100">
                 </span>
                </div>
               </div>
               <div class="js-rate-btn-container l-row l-padding-left-five-quarters l-padding-right-five-quarters l-pos-relative t-border-top t-border-color-standard-110">
                <div class="rate-container l-clear l-s-col-4 l-m-col-8 l-l-col-12 l-m-col-last l-s-col-last l-float-right l-padding-top-five-quarters l-padding-bottom-half l-l-padding-bottom-five-quarters l-m-padding-bottom-three-quarters l-display-inline-block">
                 <div class="js-button-text-wrapper l-float-right ">
                  [linkx]
                  
                 </div>
                </div>
               </div>
              </div>
             </div>
             <div class=" l-row t-bg-standard-20 property-record-item l-display-inline-m js-property-record-item" data-brand="LC" data-city="파리" data-close-text="" data-country="FR" data-map="true" data-marsha="PARLC" data-pnum="14" data-promo-code="" data-property='{"lat": "48.86903","longitude":"2.30083","brand": "LC","marshaCode": "PARLC","hwsInLanguageMissing": "false","blank":"-","type":"","hotelName":"프린스 드 갈, 럭셔리 컬렉션 호텔, 파리","propertyType":"","propMarkerLabel":"", "propMarkerBedLabel":"","index": ""}' data-statecode="" data-stateprovince="" id="property-record-map-PARLC">
              <div class="l-s-col-4 l-m-col-8 l-l-col-12 l-m-col-last l-s-col-last">
               <div class="l-row">
                [ahref][keywordx][ahref][linkx][keywordx][linkx][linkx][keywordx][symbolx][keywordx][symbolx][bracketl7][keywordx][bracketr7][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][pkeyx][keywordx][symbolx][keywordx][symbolx][bracketl8][keywordx][bracketr8][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][pkeyx][mkey1][keywordx][symbolx][keywordx][symbolx][bracketl9][keywordx][bracketr9][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][pkeyx][keywordx][symbolx][keywordx][symbolx][bracketl10][keywordx][bracketr10][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][linkx][pkeyx][mkey1][keywordx][symbolx][keywordx][symbolx][bracketl11][keywordx][bracketr11][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx]
               </div>
               <div class="js-rate-btn-container l-row l-padding-left-five-quarters l-padding-right-five-quarters l-pos-relative t-border-top t-border-color-standard-110">
                <div class="rate-container l-clear l-s-col-4 l-m-col-8 l-l-col-12 l-m-col-last l-s-col-last l-float-right l-padding-top-five-quarters l-padding-bottom-half l-l-padding-bottom-five-quarters l-m-padding-bottom-three-quarters l-display-inline-block">
                 <div class="js-button-text-wrapper l-float-right ">
                  [linkx]
                  
                 </div>
                </div>
               </div>
              </div>
             </div>
             <div class=" l-row t-bg-standard-20 property-record-item l-display-inline-m js-property-record-item" data-brand="BR" data-city="파리" data-close-text="" data-country="FR" data-map="true" data-marsha="PARWG" data-pnum="15" data-promo-code="" data-property='{"lat": "48.87714","longitude":"2.297179","brand": "BR","marshaCode": "PARWG","hwsInLanguageMissing": "false","blank":"-","type":"","hotelName":"르네상스 파리 개선문 호텔","propertyType":"","propMarkerLabel":"", "propMarkerBedLabel":"","index": ""}' data-statecode="" data-stateprovince="" id="property-record-map-PARWG">
              <div class="l-s-col-4 l-m-col-8 l-l-col-12 l-m-col-last l-s-col-last">
               <div class="l-row">
                <div class="js-image-container image-container l-pos-relative l-s-col-4 l-m-col-3 l-l-col-3" data-hotelname="르네상스 파리 개선문 호텔" data-imageurl="//cache.marriott.com/marriottassets/marriott/PARWG/parwg-room-0113-hor-feat.jpg">
                 [ahref]
                 
                </div>
                <div class="js-hotel-location l-overflow-hidden l-m-col-5 l-l-col-7 l-s-col-las small-padding-right-one-quarter small-padding-left-one-quarter">
                 <div class="l-row l-margin-top-five-quarters">
                  <div class="l-s-col-4 l-m-col-8 l-l-col-12 l-m-col-last l-s-col-last">
                   [ahref]
                   
                  </div>
                 </div>
                 <div class="l-row l-margin-bottom-three-quarters l-hidden-m-map-view">
                  <div class="l-s-col-4 l-m-col-8 l-l-col-12 l-m-col-last l-s-col-last t-font-s t-line-height-m m-hotel-address t-color-standard-90" data-address-line1="39 Avenue de Wagram" data-city="파리" data-contact="+33 1 55 37 55 37" data-country="KR" data-country-description="프랑스" data-postal-code="75 017" data-state="">
                   39 Avenue de Wagram 파리, 프랑스 75 017
                  </div>
                 </div>
                 <div class="l-row t-font-xs t-line-height-xs l-margin-bottom-three-quarters t-info-row">
                  <div class="js-hotel-distance l-hotel-distance l-s-col-2 l-m-col-4 l-l-col-3 l-hotel-distance-border t-color-standard-90">
                   <span aria-label="4.6 km 2.9 마일리지" class="l-padding-left-quarter l-padding-right-quarter t-bg-standard-100 t-color-standard-20 border-radius-small" title="2.9 마일리지">
                    <span aria-hidden="true">
                     4.6 km
                    </span>
                   </span>
                   목적지 기준
                  </div>
                  <div class="js-hotel-rating l-l-col-4 t-border-right t-border-color-standard-110 l-s-col-2 l-m-col-4 l-l-col-3l-hotel-rating l-rattings t-line-height-xs l-l-col-4-flex">
                   [linkx]
                   
                  </div>
                  <div class="js-hotel-category l-hotel-category l-hidden-m-map-view l-s-col-2 l-m-col-4 l-l-col-4 t-line-height-xs ">
                   <span class="t-font-weight-bold">
                    [linkx]
                    
                   </span>
                   <span class="hotel-reward l-display-inline-block t-color-standard-90">
                   </span>
                  </div>
                 </div>
                 <div class="l-row is-hidden-s is-hidden-m is-hidden-l is-visible-bubble l-view-rate">
                 </div>
                 <div class="macro-card-property-type l-display-none">
                 </div>
                </div>
                <div class="js-hotel-logo l-m-col-1-6 l-s-col-12 is-visible-m l-l-col-2 l-center-align is-visible-l l-margin-right-none">
                 <span class="t-brand-logo-icon-BR t-color-standard-100">
                 </span>
                </div>
               </div>
               <div class="js-rate-btn-container l-row l-padding-left-five-quarters l-padding-right-five-quarters l-pos-relative t-border-top t-border-color-standard-110">
                [pkeyx]<li>[keywordx][symbolx][keywordx][symbolx][bracketl6][keywordx][bracketr6][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx]</li>[pkeyx]<li>[linkx]</li><li>[ahref]</li>
               </div>
              </div>
             </div>
             <div class=" l-row t-bg-standard-20 property-record-item l-display-inline-m js-property-record-item" data-brand="TX" data-city="Paris" data-close-text="" data-country="FR" data-map="true" data-marsha="PARTX" data-pnum="16" data-promo-code="" data-property="{&quot;lat&quot;: &quot;48.866374&quot;,&quot;longitude&quot;:&quot;2.286809&quot;,&quot;brand&quot;: &quot;TX&quot;,&quot;marshaCode&quot;: &quot;PARTX&quot;,&quot;hwsInLanguageMissing&quot;: &quot;false&quot;,&quot;blank&quot;:&quot;-&quot;,&quot;type&quot;:&quot;&quot;,&quot;hotelName&quot;:&quot;Le Dokhan's, a Tribute Portfolio Hotel, Paris&quot;,&quot;propertyType&quot;:&quot;&quot;,&quot;propMarkerLabel&quot;:&quot;&quot;, &quot;propMarkerBedLabel&quot;:&quot;&quot;,&quot;index&quot;: &quot;&quot;}" data-statecode="" data-stateprovince="" id="property-record-map-PARTX">
              <div class="l-s-col-4 l-m-col-8 l-l-col-12 l-m-col-last l-s-col-last">
               <div class="l-row">
                <div class="js-image-container image-container l-pos-relative l-s-col-4 l-m-col-3 l-l-col-3" data-hotelname="Le Dokhan's, a Tribute Portfolio Hotel, Paris" data-imageurl="//cache.marriott.com/marriottassets/marriott/PARTX/partx-exterior-9158-hor-feat.jpg">
                 [ahref]
                 
                </div>
                <div class="js-hotel-location l-overflow-hidden l-m-col-5 l-l-col-7 l-s-col-las small-padding-right-one-quarter small-padding-left-one-quarter">
                 <div class="l-row l-margin-top-five-quarters">
                  <div class="l-s-col-4 l-m-col-8 l-l-col-12 l-m-col-last l-s-col-last">
                   [linkx]
                   
                  </div>
                 </div>
                 <div class="l-row l-margin-bottom-three-quarters l-hidden-m-map-view">
                  <div class="l-s-col-4 l-m-col-8 l-l-col-12 l-m-col-last l-s-col-last t-font-s t-line-height-m m-hotel-address t-color-standard-90" data-address-line1="117 Rue Lauriston" data-city="Paris" data-contact="+33 1 53 65 66 99" data-country="KR" data-country-description="프랑스" data-postal-code="75116" data-state="">
                   117 Rue Lauriston Paris, 프랑스 75116
                  </div>
                 </div>
                 <div class="l-row t-font-xs t-line-height-xs l-margin-bottom-three-quarters t-info-row">
                  <div class="js-hotel-distance l-hotel-distance l-s-col-2 l-m-col-4 l-l-col-3 l-hotel-distance-border t-color-standard-90">
                   <span aria-label="4.9 km 3.0 마일리지" class="l-padding-left-quarter l-padding-right-quarter t-bg-standard-100 t-color-standard-20 border-radius-small" title="3.0 마일리지">
                    <span aria-hidden="true">
                     4.9 km
                    </span>
                   </span>
                   목적지 기준
                  </div>
                  <div class="js-hotel-rating l-l-col-4 t-border-right t-border-color-standard-110 l-s-col-2 l-m-col-4 l-l-col-3l-hotel-rating l-rattings t-line-height-xs l-l-col-4-flex">
                   [linkx]
                   
                  </div>
                  <div class="js-hotel-category l-hotel-category l-hidden-m-map-view l-s-col-2 l-m-col-4 l-l-col-4 t-line-height-xs ">
                   <span class="t-font-weight-bold">
                    [linkx]
                    
                   </span>
                   <span class="hotel-reward l-display-inline-block t-color-standard-90">
                   </span>
                  </div>
                 </div>
                 <div class="l-row is-hidden-s is-hidden-m is-hidden-l is-visible-bubble l-view-rate">
                 </div>
                 <div class="macro-card-property-type l-display-none">
                 </div>
                </div>
                <div class="js-hotel-logo l-m-col-1-6 l-s-col-12 is-visible-m l-l-col-2 l-center-align is-visible-l l-margin-right-none">
                 <span class="t-brand-logo-icon-TX t-color-standard-100">
                 </span>
                </div>
               </div>
               <div class="js-rate-btn-container l-row l-padding-left-five-quarters l-padding-right-five-quarters l-pos-relative t-border-top t-border-color-standard-110">
                <div class="rate-container l-clear l-s-col-4 l-m-col-8 l-l-col-12 l-m-col-last l-s-col-last l-float-right l-padding-top-five-quarters l-padding-bottom-half l-l-padding-bottom-five-quarters l-m-padding-bottom-three-quarters l-display-inline-block">
                 <div class="js-button-text-wrapper l-float-right ">
                  [ahref]
                  
                 </div>
                </div>
               </div>
              </div>
             </div>
             <div class=" l-row t-bg-standard-20 property-record-item l-display-inline-m js-property-record-item" data-brand="BR" data-city="파리" data-close-text="" data-country="FR" data-map="true" data-marsha="PARSP" data-pnum="17" data-promo-code="" data-property='{"lat": "48.867254","longitude":"2.285719","brand": "BR","marshaCode": "PARSP","hwsInLanguageMissing": "false","blank":"-","type":"","hotelName":"르네상스 파리 르 파크 트로카데로 호텔","propertyType":"","propMarkerLabel":"", "propMarkerBedLabel":"","index": ""}' data-statecode="" data-stateprovince="" id="property-record-map-PARSP">
              <div class="l-s-col-4 l-m-col-8 l-l-col-12 l-m-col-last l-s-col-last">
               <div class="l-row">
                <div class="js-image-container image-container l-pos-relative l-s-col-4 l-m-col-3 l-l-col-3" data-hotelname="르네상스 파리 르 파크 트로카데로 호텔" data-imageurl="//cache.marriott.com/marriottassets/marriott/PARSP/parsp-guestroom-5395-hor-feat.jpg">
                 [ahref]
                 
                </div>
                <div class="js-hotel-location l-overflow-hidden l-m-col-5 l-l-col-7 l-s-col-las small-padding-right-one-quarter small-padding-left-one-quarter">
                 <div class="l-row l-margin-top-five-quarters">
                  <div class="l-s-col-4 l-m-col-8 l-l-col-12 l-m-col-last l-s-col-last">
                   [linkx]
                   
                  </div>
                 </div>
                 <div class="l-row l-margin-bottom-three-quarters l-hidden-m-map-view">
                  <div class="l-s-col-4 l-m-col-8 l-l-col-12 l-m-col-last l-s-col-last t-font-s t-line-height-m m-hotel-address t-color-standard-90" data-address-line1="55-57 Avenue Raymond Poincare" data-city="파리" data-contact="+33 1 44 05 66 66" data-country="KR" data-country-description="프랑스" data-postal-code="75116" data-state="">
                   55-57 Avenue Raymond Poincare 파리, 프랑스 75116
                  </div>
                 </div>
                 <div class="l-row t-font-xs t-line-height-xs l-margin-bottom-three-quarters t-info-row">
                  <div class="js-hotel-distance l-hotel-distance l-s-col-2 l-m-col-4 l-l-col-3 l-hotel-distance-border t-color-standard-90">
                   <span aria-label="5.0 km 3.1 마일리지" class="l-padding-left-quarter l-padding-right-quarter t-bg-standard-100 t-color-standard-20 border-radius-small" title="3.1 마일리지">
                    <span aria-hidden="true">
                     5.0 km
                    </span>
                   </span>
                   목적지 기준
                  </div>
                  <div class="js-hotel-rating l-l-col-4 t-border-right t-border-color-standard-110 l-s-col-2 l-m-col-4 l-l-col-3l-hotel-rating l-rattings t-line-height-xs l-l-col-4-flex">
                   [ahref]
                   
                  </div>
                  <div class="js-hotel-category l-hotel-category l-hidden-m-map-view l-s-col-2 l-m-col-4 l-l-col-4 t-line-height-xs ">
                   <span class="t-font-weight-bold">
                    [ahref]
                    
                   </span>
                   <span class="hotel-reward l-display-inline-block t-color-standard-90">
                   </span>
                  </div>
                 </div>
                 <div class="l-row is-hidden-s is-hidden-m is-hidden-l is-visible-bubble l-view-rate">
                 </div>
                 <div class="macro-card-property-type l-display-none">
                 </div>
                </div>
                <div class="js-hotel-logo l-m-col-1-6 l-s-col-12 is-visible-m l-l-col-2 l-center-align is-visible-l l-margin-right-none">
                 <span class="t-brand-logo-icon-BR t-color-standard-100">
                 </span>
                </div>
               </div>
               <div class="js-rate-btn-container l-row l-padding-left-five-quarters l-padding-right-five-quarters l-pos-relative t-border-top t-border-color-standard-110">
                <div class="rate-container l-clear l-s-col-4 l-m-col-8 l-l-col-12 l-m-col-last l-s-col-last l-float-right l-padding-top-five-quarters l-padding-bottom-half l-l-padding-bottom-five-quarters l-m-padding-bottom-three-quarters l-display-inline-block">
                 <div class="js-button-text-wrapper l-float-right ">
                  [linkx]
                  
                 </div>
                </div>
               </div>
              </div>
             </div>
             <div class=" l-row t-bg-standard-20 property-record-item l-display-inline-m js-property-record-item" data-brand="TX" data-city="Paris" data-close-text="" data-country="FR" data-map="true" data-marsha="PARXT" data-pnum="18" data-promo-code="" data-property='{"lat": "48.865636","longitude":"2.283017","brand": "TX","marshaCode": "PARXT","hwsInLanguageMissing": "false","blank":"-","type":"","hotelName":"Le Metropolitan, a Tribute Portfolio Hotel, Paris","propertyType":"","propMarkerLabel":"", "propMarkerBedLabel":"","index": ""}' data-statecode="" data-stateprovince="" id="property-record-map-PARXT">
              <div class="l-s-col-4 l-m-col-8 l-l-col-12 l-m-col-last l-s-col-last">
               <div class="l-row">
                <div class="js-image-container image-container l-pos-relative l-s-col-4 l-m-col-3 l-l-col-3" data-hotelname="Le Metropolitan, a Tribute Portfolio Hotel, Paris" data-imageurl="//cache.marriott.com/marriottassets/marriott/PARXT/parxt-pool-9075-hor-feat.jpg">
                 [linkx]
                 
                </div>
                <div class="js-hotel-location l-overflow-hidden l-m-col-5 l-l-col-7 l-s-col-las small-padding-right-one-quarter small-padding-left-one-quarter">
                 <div class="l-row l-margin-top-five-quarters">
                  <div class="l-s-col-4 l-m-col-8 l-l-col-12 l-m-col-last l-s-col-last">
                   [ahref]
                   
                  </div>
                 </div>
                 <div class="l-row l-margin-bottom-three-quarters l-hidden-m-map-view">
                  <div class="l-s-col-4 l-m-col-8 l-l-col-12 l-m-col-last l-s-col-last t-font-s t-line-height-m m-hotel-address t-color-standard-90" data-address-line1="10 Place de Mexico" data-city="Paris" data-contact="+33 1 56 90 40 04" data-country="KR" data-country-description="프랑스" data-postal-code="75116" data-state="">
                   10 Place de Mexico Paris, 프랑스 75116
                  </div>
                 </div>
                 <div class="l-row t-font-xs t-line-height-xs l-margin-bottom-three-quarters t-info-row">
                  <div class="js-hotel-distance l-hotel-distance l-s-col-2 l-m-col-4 l-l-col-3 l-hotel-distance-border t-color-standard-90">
                   <span aria-label="5.2 km 3.2 마일리지" class="l-padding-left-quarter l-padding-right-quarter t-bg-standard-100 t-color-standard-20 border-radius-small" title="3.2 마일리지">
                    <span aria-hidden="true">
                     5.2 km
                    </span>
                   </span>
                   목적지 기준
                  </div>
                  <div class="js-hotel-rating l-l-col-4 t-border-right t-border-color-standard-110 l-s-col-2 l-m-col-4 l-l-col-3l-hotel-rating l-rattings t-line-height-xs l-l-col-4-flex">
                   [keywordx][symbolx][keywordx][symbolx][bracketl5][keywordx][bracketr5][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][linkx][keywordx][pkeyx]<li>[linkx]</li>
                  </div>
                  <div class="js-hotel-category l-hotel-category l-hidden-m-map-view l-s-col-2 l-m-col-4 l-l-col-4 t-line-height-xs ">
                   <span class="t-font-weight-bold">
                    [linkx]
                    
                   </span>
                   <span class="hotel-reward l-display-inline-block t-color-standard-90">
                   </span>
                  </div>
                 </div>
                 <div class="l-row is-hidden-s is-hidden-m is-hidden-l is-visible-bubble l-view-rate">
                 </div>
                 <div class="macro-card-property-type l-display-none">
                 </div>
                </div>
                <div class="js-hotel-logo l-m-col-1-6 l-s-col-12 is-visible-m l-l-col-2 l-center-align is-visible-l l-margin-right-none">
                 <span class="t-brand-logo-icon-TX t-color-standard-100">
                 </span>
                </div>
               </div>
               <div class="js-rate-btn-container l-row l-padding-left-five-quarters l-padding-right-five-quarters l-pos-relative t-border-top t-border-color-standard-110">
                <div class="rate-container l-clear l-s-col-4 l-m-col-8 l-l-col-12 l-m-col-last l-s-col-last l-float-right l-padding-top-five-quarters l-padding-bottom-half l-l-padding-bottom-five-quarters l-m-padding-bottom-three-quarters l-display-inline-block">
                 <div class="js-button-text-wrapper l-float-right ">
                  [ahref]
                  
                 </div>
                </div>
               </div>
              </div>
             </div>
             <div class=" l-row t-bg-standard-20 property-record-item l-display-inline-m js-property-record-item" data-brand="CY" data-city="Arcueil" data-close-text="" data-country="FR" data-map="true" data-marsha="PARAC" data-pnum="19" data-promo-code="" data-property='{"lat": "48.809979","longitude":"2.327682","brand": "CY","marshaCode": "PARAC","hwsInLanguageMissing": "false","blank":"-","type":"","hotelName":"Courtyard Paris Arcueil","propertyType":"","propMarkerLabel":"", "propMarkerBedLabel":"","index": ""}' data-statecode="" data-stateprovince="" id="property-record-map-PARAC">
              <div class="l-s-col-4 l-m-col-8 l-l-col-12 l-m-col-last l-s-col-last">
               <div class="l-row">
                <div class="js-image-container image-container l-pos-relative l-s-col-4 l-m-col-3 l-l-col-3" data-hotelname="Courtyard Paris Arcueil" data-imageurl="//cache.marriott.com/marriottassets/marriott/PARAC/parac-lobby-0033-hor-feat.jpg">
                 [linkx]
                 
                </div>
                <div class="js-hotel-location l-overflow-hidden l-m-col-5 l-l-col-7 l-s-col-las small-padding-right-one-quarter small-padding-left-one-quarter">
                 <div class="l-row l-margin-top-five-quarters">
                  <div class="l-s-col-4 l-m-col-8 l-l-col-12 l-m-col-last l-s-col-last">
                   [ahref]
                   
                  </div>
                 </div>
                 <div class="l-row l-margin-bottom-three-quarters l-hidden-m-map-view">
                  [linkx][keywordx][mkey1]
                 </div>
                 <div class="l-row t-font-xs t-line-height-xs l-margin-bottom-three-quarters t-info-row">
                  <div class="js-hotel-distance l-hotel-distance l-s-col-2 l-m-col-4 l-l-col-3 l-hotel-distance-border t-color-standard-90">
                   <span aria-label="5.4 km 3.4 마일리지" class="l-padding-left-quarter l-padding-right-quarter t-bg-standard-100 t-color-standard-20 border-radius-small" title="3.4 마일리지">
                    <span aria-hidden="true">
                     5.4 km
                    </span>
                   </span>
                   목적지 기준
                  </div>
                  <div class="js-hotel-rating l-l-col-4 t-border-right t-border-color-standard-110 l-s-col-2 l-m-col-4 l-l-col-3l-hotel-rating l-rattings t-line-height-xs l-l-col-4-flex">
                   [linkx]
                   
                  </div>
                  <div class="js-hotel-category l-hotel-category l-hidden-m-map-view l-s-col-2 l-m-col-4 l-l-col-4 t-line-height-xs ">
                   <span class="t-font-weight-bold">
                    [ahref]
                    
                   </span>
                   <span class="hotel-reward l-display-inline-block t-color-standard-90">
                   </span>
                  </div>
                 </div>
                 <div class="l-row is-hidden-s is-hidden-m is-hidden-l is-visible-bubble l-view-rate">
                 </div>
                 <div class="macro-card-property-type l-display-none">
                 </div>
                </div>
                <div class="js-hotel-logo l-m-col-1-6 l-s-col-12 is-visible-m l-l-col-2 l-center-align is-visible-l l-margin-right-none">
                 <span class="t-brand-logo-icon-CY t-color-standard-100">
                 </span>
                </div>
               </div>
               <div class="js-rate-btn-container l-row l-padding-left-five-quarters l-padding-right-five-quarters l-pos-relative t-border-top t-border-color-standard-110">
                <div class="rate-container l-clear l-s-col-4 l-m-col-8 l-l-col-12 l-m-col-last l-s-col-last l-float-right l-padding-top-five-quarters l-padding-bottom-half l-l-padding-bottom-five-quarters l-m-padding-bottom-three-quarters l-display-inline-block">
                 <div class="js-button-text-wrapper l-float-right ">
                  [linkx]
                  
                 </div>
                </div>
               </div>
              </div>
             </div>
             <div class=" l-row t-bg-standard-20 property-record-item l-display-inline-m js-property-record-item" data-brand="MD" data-city="파리" data-close-text="" data-country="FR" data-map="true" data-marsha="PARMD" data-pnum="20" data-promo-code="" data-property='{"lat": "48.879195","longitude":"2.284536","brand": "MD","marshaCode": "PARMD","hwsInLanguageMissing": "false","blank":"-","type":"","hotelName":"르 메르디앙 에투알","propertyType":"","propMarkerLabel":"", "propMarkerBedLabel":"","index": ""}' data-statecode="" data-stateprovince="" id="property-record-map-PARMD">
              <div class="l-s-col-4 l-m-col-8 l-l-col-12 l-m-col-last l-s-col-last">
               <div class="l-row">
                <div class="js-image-container image-container l-pos-relative l-s-col-4 l-m-col-3 l-l-col-3" data-hotelname="르 메르디앙 에투알" data-imageurl="//cache.marriott.com/marriottassets/marriott/PARMD/parmd-lobby-0064-hor-feat.jpg">
                 [ahref]
                 
                </div>
                <div class="js-hotel-location l-overflow-hidden l-m-col-5 l-l-col-7 l-s-col-las small-padding-right-one-quarter small-padding-left-one-quarter">
                 <div class="l-row l-margin-top-five-quarters">
                  <div class="l-s-col-4 l-m-col-8 l-l-col-12 l-m-col-last l-s-col-last">
                   [ahref]
                   
                  </div>
                 </div>
                 <div class="l-row l-margin-bottom-three-quarters l-hidden-m-map-view">
                  <div class="l-s-col-4 l-m-col-8 l-l-col-12 l-m-col-last l-s-col-last t-font-s t-line-height-m m-hotel-address t-color-standard-90" data-address-line1="81 Boulevard Gouvion Saint-Cyr, 75848 Cedex 17" data-city="파리" data-contact="+33 1 40 68 34 34" data-country="KR" data-country-description="프랑스" data-postal-code="75017" data-state="">
                   81 Boulevard Gouvion Saint-Cyr, 75848 Cedex 17 파리, 프랑스 75017
                  </div>
                 </div>
                 <div class="l-row t-font-xs t-line-height-xs l-margin-bottom-three-quarters t-info-row">
                  <div class="js-hotel-distance l-hotel-distance l-s-col-2 l-m-col-4 l-l-col-3 l-hotel-distance-border t-color-standard-90">
                   <span aria-label="5.5 km 3.4 마일리지" class="l-padding-left-quarter l-padding-right-quarter t-bg-standard-100 t-color-standard-20 border-radius-small" title="3.4 마일리지">
                    <span aria-hidden="true">
                     5.5 km
                    </span>
                   </span>
                   목적지 기준
                  </div>
                  <div class="js-hotel-rating l-l-col-4 t-border-right t-border-color-standard-110 l-s-col-2 l-m-col-4 l-l-col-3l-hotel-rating l-rattings t-line-height-xs l-l-col-4-flex">
                   [linkx]
                   
                  </div>
                  <div class="js-hotel-category l-hotel-category l-hidden-m-map-view l-s-col-2 l-m-col-4 l-l-col-4 t-line-height-xs ">
                   <span class="t-font-weight-bold">
                    [ahref]
                    
                   </span>
                   <span class="hotel-reward l-display-inline-block t-color-standard-90">
                   </span>
                  </div>
                 </div>
                 <div class="l-row is-hidden-s is-hidden-m is-hidden-l is-visible-bubble l-view-rate">
                 </div>
                 <div class="macro-card-property-type l-display-none">
                 </div>
                </div>
                <div class="js-hotel-logo l-m-col-1-6 l-s-col-12 is-visible-m l-l-col-2 l-center-align is-visible-l l-margin-right-none">
                 <span class="t-brand-logo-icon-MD t-color-standard-100">
                 </span>
                </div>
               </div>
               <div class="js-rate-btn-container l-row l-padding-left-five-quarters l-padding-right-five-quarters l-pos-relative t-border-top t-border-color-standard-110">
                <div class="rate-container l-clear l-s-col-4 l-m-col-8 l-l-col-12 l-m-col-last l-s-col-last l-float-right l-padding-top-five-quarters l-padding-bottom-half l-l-padding-bottom-five-quarters l-m-padding-bottom-three-quarters l-display-inline-block">
                 <div class="js-button-text-wrapper l-float-right ">
                  [ahref]
                  
                 </div>
                </div>
               </div>
              </div>
             </div>
             <div class=" l-row t-bg-standard-20 property-record-item l-display-inline-m js-property-record-item" data-brand="CY" data-city="Issy-les-Moulineaux" data-close-text="" data-country="FR" data-map="true" data-marsha="PARCV" data-pnum="21" data-promo-code="" data-property='{"lat": "48.829722","longitude":"2.284114","brand": "CY","marshaCode": "PARCV","hwsInLanguageMissing": "false","blank":"-","type":"","hotelName":"Courtyard Paris Porte de Versailles","propertyType":"새로운 혜택","propMarkerLabel":"", "propMarkerBedLabel":"준비 중","index": ""}' data-statecode="" data-stateprovince="" id="property-record-map-PARCV">
              <div class="l-s-col-4 l-m-col-8 l-l-col-12 l-m-col-last l-s-col-last">
               <div class="l-row">
                <div class="js-image-container image-container l-pos-relative l-s-col-4 l-m-col-3 l-l-col-3" data-hotelname="Courtyard Paris Porte de Versailles" data-imageurl="//cache.marriott.com/marriottassets/marriott/CY/cy-main01-0001-hor-feat.jpg">
                 <span class="l-new-hotel m-merch-shape-1 m-merch-style-1">
                 </span>
                 [linkx]
                 
                </div>
                <div class="js-hotel-location l-overflow-hidden l-m-col-5 l-l-col-7 l-s-col-las small-padding-right-one-quarter small-padding-left-one-quarter">
                 <div class="l-row l-margin-top-five-quarters">
                  <div class="l-s-col-4 l-m-col-8 l-l-col-12 l-m-col-last l-s-col-last">
                   [linkx]
                   
                  </div>
                 </div>
                 <div class="l-row l-margin-bottom-three-quarters l-hidden-m-map-view">
                  <div class="l-s-col-4 l-m-col-8 l-l-col-12 l-m-col-last l-s-col-last t-font-s t-line-height-m m-hotel-address t-color-standard-90" data-address-line1="5 Rue Ernest Renan" data-city="Issy-les-Moulineaux" data-contact="+33 1 85 74 64 54" data-country="KR" data-country-description="프랑스" data-postal-code="92130" data-state="">
                   5 Rue Ernest Renan Issy-les-Moulineaux, 프랑스 92130
                  </div>
                 </div>
                 <div class="l-row t-font-xs t-line-height-xs l-margin-bottom-three-quarters t-info-row">
                  <div class="js-hotel-distance l-hotel-distance l-s-col-2 l-m-col-4 l-l-col-3 l-hotel-distance-border t-color-standard-90">
                   <span aria-label="5.8 km 3.6 마일리지" class="l-padding-left-quarter l-padding-right-quarter t-bg-standard-100 t-color-standard-20 border-radius-small" title="3.6 마일리지">
                    <span aria-hidden="true">
                     5.8 km
                    </span>
                   </span>
                   목적지 기준
                  </div>
                  <div class="js-hotel-category l-hotel-category l-hidden-m-map-view l-s-col-2 l-m-col-4 l-l-col-4 t-line-height-xs ">
                   <span class="t-font-weight-bold">
                    [ahref]
                    
                   </span>
                   <span class="hotel-reward l-display-inline-block t-color-standard-90">
                   </span>
                  </div>
                 </div>
                 <div class="l-row is-hidden-s is-hidden-m is-hidden-l is-visible-bubble l-view-rate">
                 </div>
                 <div class="macro-card-property-type l-display-none">
                  <p class="t-opening-date t-font-weight-semibold l-margin-top-none l-padding-top">
                   곧 오픈 예정 Jan 2020
                  </p>
                 </div>
                </div>
                <div class="js-hotel-logo l-m-col-1-6 l-s-col-12 is-visible-m l-l-col-2 l-center-align is-visible-l l-margin-right-none">
                 <span class="t-brand-logo-icon-CY t-color-standard-100">
                 </span>
                </div>
               </div>
               <div class="js-rate-btn-container l-row l-padding-left-five-quarters l-padding-right-five-quarters l-pos-relative t-border-top t-border-color-standard-110">
                <div class="rate-container l-clear l-s-col-4 l-m-col-8 l-l-col-12 l-m-col-last l-s-col-last l-float-right l-padding-top-five-quarters l-padding-bottom-half l-l-padding-bottom-five-quarters l-m-padding-bottom-three-quarters l-display-inline-block">
                 <div class="js-button-text-wrapper l-float-right ">
                  <p class="t-font-weight-semibold l-margin-three-quarters l-float-right">
                   곧 오픈 예정 Jan 2020
                  </p>
                 </div>
                </div>
               </div>
              </div>
             </div>
             <div class=" l-row t-bg-standard-20 property-record-item l-display-inline-m js-property-record-item" data-brand="AR" data-city="파리" data-close-text="" data-country="FR" data-map="true" data-marsha="PARAR" data-pnum="22" data-promo-code="" data-property='{"lat": "48.882266","longitude":"2.281533","brand": "AR","marshaCode": "PARAR","hwsInLanguageMissing": "false","blank":"-","type":"","hotelName":"AC 호텔 파리 포르트마이요","propertyType":"","propMarkerLabel":"", "propMarkerBedLabel":"","index": ""}' data-statecode="" data-stateprovince="" id="property-record-map-PARAR">
              <div class="l-s-col-4 l-m-col-8 l-l-col-12 l-m-col-last l-s-col-last">
               <div class="l-row">
                <div class="js-image-container image-container l-pos-relative l-s-col-4 l-m-col-3 l-l-col-3" data-hotelname="AC 호텔 파리 포르트마이요" data-imageurl="//cache.marriott.com/marriottassets/marriott/PARAR/parar-exterior-0001-hor-feat.jpg">
                 [ahref]
                 
                </div>
                <div class="js-hotel-location l-overflow-hidden l-m-col-5 l-l-col-7 l-s-col-las small-padding-right-one-quarter small-padding-left-one-quarter">
                 <div class="l-row l-margin-top-five-quarters">
                  <li>[linkx]</li><li>[keywordx]</li>[keywordx][symbolx][keywordx][symbolx][bracketl7][keywordx][bracketr7][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx]<li>[keywordx]</li><li>[linkx]</li>
                 </div>
                 <div class="l-row l-margin-bottom-three-quarters l-hidden-m-map-view">
                  <div class="l-s-col-4 l-m-col-8 l-l-col-12 l-m-col-last l-s-col-last t-font-s t-line-height-m m-hotel-address t-color-standard-90" data-address-line1="6 rue Gustave Charpentier" data-city="파리" data-contact="+33 1 84 82 49 09" data-country="KR" data-country-description="프랑스" data-postal-code="75017" data-state="">
                   6 rue Gustave Charpentier 파리, 프랑스 75017
                  </div>
                 </div>
                 <div class="l-row t-font-xs t-line-height-xs l-margin-bottom-three-quarters t-info-row">
                  <div class="js-hotel-distance l-hotel-distance l-s-col-2 l-m-col-4 l-l-col-3 l-hotel-distance-border t-color-standard-90">
                   <span aria-label="5.8 km 3.6 마일리지" class="l-padding-left-quarter l-padding-right-quarter t-bg-standard-100 t-color-standard-20 border-radius-small" title="3.6 마일리지">
                    <span aria-hidden="true">
                     5.8 km
                    </span>
                   </span>
                   목적지 기준
                  </div>
                  <div class="js-hotel-rating l-l-col-4 t-border-right t-border-color-standard-110 l-s-col-2 l-m-col-4 l-l-col-3l-hotel-rating l-rattings t-line-height-xs l-l-col-4-flex">
                   [linkx]
                   
                  </div>
                  <div class="js-hotel-category l-hotel-category l-hidden-m-map-view l-s-col-2 l-m-col-4 l-l-col-4 t-line-height-xs ">
                   <span class="t-font-weight-bold">
                    <a class="js-view-hotel-category t-alt-link" data-mfp-src="/loyalty/pointsGridPopUp.mi?awardType=Standard&amp;category=4&amp;marshaCode=PARAR" href="#">
                     4
                    </a>
                   </span>
                   <span class="hotel-reward l-display-inline-block t-color-standard-90">
                   </span>
                  </div>
                 </div>
                 <div class="l-row is-hidden-s is-hidden-m is-hidden-l is-visible-bubble l-view-rate">
                 </div>
                 <div class="macro-card-property-type l-display-none">
                 </div>
                </div>
                <div class="js-hotel-logo l-m-col-1-6 l-s-col-12 is-visible-m l-l-col-2 l-center-align is-visible-l l-margin-right-none">
                 <span class="t-brand-logo-icon-AR t-color-standard-100">
                 </span>
                </div>
               </div>
               <div class="js-rate-btn-container l-row l-padding-left-five-quarters l-padding-right-five-quarters l-pos-relative t-border-top t-border-color-standard-110">
                <div class="rate-container l-clear l-s-col-4 l-m-col-8 l-l-col-12 l-m-col-last l-s-col-last l-float-right l-padding-top-five-quarters l-padding-bottom-half l-l-padding-bottom-five-quarters l-m-padding-bottom-three-quarters l-display-inline-block">
                 <div class="js-button-text-wrapper l-float-right ">
                  [ahref]
                  
                 </div>
                </div>
               </div>
              </div>
             </div>
             <div class=" l-row t-bg-standard-20 property-record-item l-display-inline-m js-property-record-item" data-brand="CY" data-city="생 드니" data-close-text="" data-country="FR" data-map="true" data-marsha="PARSD" data-pnum="23" data-promo-code="" data-property='{"lat": "48.922217","longitude":"2.343001","brand": "CY","marshaCode": "PARSD","hwsInLanguageMissing": "false","blank":"-","type":"","hotelName":"코트야드 파리 생 드니","propertyType":"","propMarkerLabel":"", "propMarkerBedLabel":"","index": ""}' data-statecode="" data-stateprovince="" id="property-record-map-PARSD">
              <div class="l-s-col-4 l-m-col-8 l-l-col-12 l-m-col-last l-s-col-last">
               <div class="l-row">
                <div class="js-image-container image-container l-pos-relative l-s-col-4 l-m-col-3 l-l-col-3" data-hotelname="코트야드 파리 생 드니" data-imageurl="//cache.marriott.com/marriottassets/marriott/PARSD/parsd-lounge-0028-hor-feat.jpg">
                 [ahref]
                 
                </div>
                <div class="js-hotel-location l-overflow-hidden l-m-col-5 l-l-col-7 l-s-col-las small-padding-right-one-quarter small-padding-left-one-quarter">
                 <div class="l-row l-margin-top-five-quarters">
                  <div class="l-s-col-4 l-m-col-8 l-l-col-12 l-m-col-last l-s-col-last">
                   [linkx]
                   
                  </div>
                 </div>
                 <div class="l-row l-margin-bottom-three-quarters l-hidden-m-map-view">
                  <div class="l-s-col-4 l-m-col-8 l-l-col-12 l-m-col-last l-s-col-last t-font-s t-line-height-m m-hotel-address t-color-standard-90" data-address-line1="34 bd de la Liberation, ZAC Pleyel(GPS 주소: 107 bd de la Liberation)" data-city="생 드니" data-contact="+33 1 58 34 91 10" data-country="KR" data-country-description="프랑스" data-postal-code="93200" data-state="">
                   34 bd de la Liberation, ZAC Pleyel(GPS 주소: 107 bd de la Liberation) 생 드니, 프랑스 93200
                  </div>
                 </div>
                 <div class="l-row t-font-xs t-line-height-xs l-margin-bottom-three-quarters t-info-row">
                  <div class="js-hotel-distance l-hotel-distance l-s-col-2 l-m-col-4 l-l-col-3 l-hotel-distance-border t-color-standard-90">
                   <span aria-label="8.0 km 5.0 마일리지" class="l-padding-left-quarter l-padding-right-quarter t-bg-standard-100 t-color-standard-20 border-radius-small" title="5.0 마일리지">
                    <span aria-hidden="true">
                     8.0 km
                    </span>
                   </span>
                   목적지 기준
                  </div>
                  <div class="js-hotel-rating l-l-col-4 t-border-right t-border-color-standard-110 l-s-col-2 l-m-col-4 l-l-col-3l-hotel-rating l-rattings t-line-height-xs l-l-col-4-flex">
                   <a class="t-alt-link analytics-click" href="/hotels/hotel-reviews/parsd-courtyard-paris-saint-denis/">
                    <div class="m-ratings t-font-xxs" data-rating="4.1">
                     <div class="m-ratings-filled">
                      <span>
                      </span>
                      <span>
                      </span>
                      <span>
                      </span>
                      <span>
                      </span>
                      <span>
                      </span>
                     </div>
                    </div>
                    <span class="">
                     4.1
                    </span>
                    <span class="js-reviews">
                     270 리뷰
                    </span>
                   </a>
                  </div>
                  <div class="js-hotel-category l-hotel-category l-hidden-m-map-view l-s-col-2 l-m-col-4 l-l-col-4 t-line-height-xs ">
                   <span class="t-font-weight-bold">
                    [linkx]
                    
                   </span>
                   <span class="hotel-reward l-display-inline-block t-color-standard-90">
                   </span>
                  </div>
                 </div>
                 <div class="l-row is-hidden-s is-hidden-m is-hidden-l is-visible-bubble l-view-rate">
                 </div>
                 <div class="macro-card-property-type l-display-none">
                 </div>
                </div>
                <div class="js-hotel-logo l-m-col-1-6 l-s-col-12 is-visible-m l-l-col-2 l-center-align is-visible-l l-margin-right-none">
                 <span class="t-brand-logo-icon-CY t-color-standard-100">
                 </span>
                </div>
               </div>
               <div class="js-rate-btn-container l-row l-padding-left-five-quarters l-padding-right-five-quarters l-pos-relative t-border-top t-border-color-standard-110">
                <div class="rate-container l-clear l-s-col-4 l-m-col-8 l-l-col-12 l-m-col-last l-s-col-last l-float-right l-padding-top-five-quarters l-padding-bottom-half l-l-padding-bottom-five-quarters l-m-padding-bottom-three-quarters l-display-inline-block">
                 <div class="js-button-text-wrapper l-float-right ">
                  <a class="js-view-rate-btn-link analytics-click l-float-right " href="/reservation/availabilitySearch.mi?isRateCalendar=true&amp;propertyCode=PARSD&amp;isSearch=true&amp;currency= ">
                   <div class="m-button m-button-primary l-margin-top-quarter ">
                   </div>
                  </a>
                 </div>
                </div>
               </div>
              </div>
             </div>
             <div class=" l-row t-bg-standard-20 property-record-item l-display-inline-m js-property-record-item" data-brand="CY" data-city="Boulogne-Billancourt" data-close-text="" data-country="FR" data-map="true" data-marsha="PARBB" data-pnum="24" data-promo-code="" data-property='{"lat": "48.840222","longitude":"2.23565","brand": "CY","marshaCode": "PARBB","hwsInLanguageMissing": "false","blank":"-","type":"","hotelName":"Courtyard Paris Boulogne","propertyType":"","propMarkerLabel":"", "propMarkerBedLabel":"","index": ""}' data-statecode="" data-stateprovince="" id="property-record-map-PARBB">
              <div class="l-s-col-4 l-m-col-8 l-l-col-12 l-m-col-last l-s-col-last">
               <div class="l-row">
                <div class="js-image-container image-container l-pos-relative l-s-col-4 l-m-col-3 l-l-col-3" data-hotelname="Courtyard Paris Boulogne" data-imageurl="//cache.marriott.com/marriottassets/marriott/PARBB/parbb-restaurant-0045-hor-feat.jpg">
                 [linkx]
                 
                </div>
                <div class="js-hotel-location l-overflow-hidden l-m-col-5 l-l-col-7 l-s-col-las small-padding-right-one-quarter small-padding-left-one-quarter">
                 [pkeyx][pkeyx][linkx][keywordx][symbolx][keywordx][symbolx][bracketl12][keywordx][bracketr12][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][mkey1][keywordx][symbolx][keywordx][symbolx][bracketl13][keywordx][bracketr13][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][ahref][keywordx][keywordx][mkey1][keywordx][mkey1][keywordx][symbolx][keywordx][symbolx][bracketl14][keywordx][bracketr14][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][mkey1][keywordx][symbolx][keywordx][symbolx][bracketl15][keywordx][bracketr15][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][mkey1]
                </div>
                <div class="js-hotel-logo l-m-col-1-6 l-s-col-12 is-visible-m l-l-col-2 l-center-align is-visible-l l-margin-right-none">
                 <span class="t-brand-logo-icon-CY t-color-standard-100">
                 </span>
                </div>
               </div>
               <div class="js-rate-btn-container l-row l-padding-left-five-quarters l-padding-right-five-quarters l-pos-relative t-border-top t-border-color-standard-110">
                [mkey1][pkeyx][linkx][keywordx][keywordx][linkx][pkeyx][mkey1][linkx][mkey1][mkey1][keywordx][symbolx][keywordx][symbolx][bracketl5][keywordx][bracketr5][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][pkeyx][ahref][linkx][keywordx][symbolx][keywordx][symbolx][bracketl6][keywordx][bracketr6][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx]
               </div>
              </div>
             </div>
             <div class=" l-row t-bg-standard-20 property-record-item l-display-inline-m js-property-record-item" data-brand="BR" data-city="Puteaux" data-close-text="" data-country="FR" data-map="true" data-marsha="PARLD" data-pnum="25" data-promo-code="" data-property='{"lat": "48.892656","longitude":"2.233136","brand": "BR","marshaCode": "PARLD","hwsInLanguageMissing": "false","blank":"-","type":"","hotelName":"Renaissance Paris La Defense Hotel","propertyType":"","propMarkerLabel":"", "propMarkerBedLabel":"","index": ""}' data-statecode="" data-stateprovince="" id="property-record-map-PARLD">
              <div class="l-s-col-4 l-m-col-8 l-l-col-12 l-m-col-last l-s-col-last">
               <div class="l-row">
                <div class="js-image-container image-container l-pos-relative l-s-col-4 l-m-col-3 l-l-col-3" data-hotelname="Renaissance Paris La Defense Hotel" data-imageurl="//cache.marriott.com/marriottassets/marriott/PARLD/parld-lobby-0153-hor-feat.jpg">
                 [ahref]
                 
                </div>
                <div class="js-hotel-location l-overflow-hidden l-m-col-5 l-l-col-7 l-s-col-las small-padding-right-one-quarter small-padding-left-one-quarter">
                 <div class="l-row l-margin-top-five-quarters">
                  <div class="l-s-col-4 l-m-col-8 l-l-col-12 l-m-col-last l-s-col-last">
                   [ahref]
                   
                  </div>
                 </div>
                 <div class="l-row l-margin-bottom-three-quarters l-hidden-m-map-view">
                  <div class="l-s-col-4 l-m-col-8 l-l-col-12 l-m-col-last l-s-col-last t-font-s t-line-height-m m-hotel-address t-color-standard-90" data-address-line1="60 Cours Valmy" data-city="Puteaux" data-contact="+33 1 41 97 50 50" data-country="KR" data-country-description="프랑스" data-postal-code="92800" data-state="">
                   60 Cours Valmy Puteaux, 프랑스 92800
                  </div>
                 </div>
                 <div class="l-row t-font-xs t-line-height-xs l-margin-bottom-three-quarters t-info-row">
                  <div class="js-hotel-distance l-hotel-distance l-s-col-2 l-m-col-4 l-l-col-3 l-hotel-distance-border t-color-standard-90">
                   <span aria-label="9.5 km 5.9 마일리지" class="l-padding-left-quarter l-padding-right-quarter t-bg-standard-100 t-color-standard-20 border-radius-small" title="5.9 마일리지">
                    <span aria-hidden="true">
                     9.5 km
                    </span>
                   </span>
                   목적지 기준
                  </div>
                  <div class="js-hotel-rating l-l-col-4 t-border-right t-border-color-standard-110 l-s-col-2 l-m-col-4 l-l-col-3l-hotel-rating l-rattings t-line-height-xs l-l-col-4-flex">
                   [ahref]
                   
                  </div>
                  <div class="js-hotel-category l-hotel-category l-hidden-m-map-view l-s-col-2 l-m-col-4 l-l-col-4 t-line-height-xs ">
                   <span class="t-font-weight-bold">
                    [linkx]
                    
                   </span>
                   <span class="hotel-reward l-display-inline-block t-color-standard-90">
                   </span>
                  </div>
                 </div>
                 <div class="l-row is-hidden-s is-hidden-m is-hidden-l is-visible-bubble l-view-rate">
                 </div>
                 <div class="macro-card-property-type l-display-none">
                 </div>
                </div>
                <div class="js-hotel-logo l-m-col-1-6 l-s-col-12 is-visible-m l-l-col-2 l-center-align is-visible-l l-margin-right-none">
                 <span class="t-brand-logo-icon-BR t-color-standard-100">
                 </span>
                </div>
               </div>
               <div class="js-rate-btn-container l-row l-padding-left-five-quarters l-padding-right-five-quarters l-pos-relative t-border-top t-border-color-standard-110">
                <div class="rate-container l-clear l-s-col-4 l-m-col-8 l-l-col-12 l-m-col-last l-s-col-last l-float-right l-padding-top-five-quarters l-padding-bottom-half l-l-padding-bottom-five-quarters l-m-padding-bottom-three-quarters l-display-inline-block">
                 <div class="js-button-text-wrapper l-float-right ">
                  [linkx]
                  
                 </div>
                </div>
               </div>
              </div>
             </div>
             <div class=" l-row t-bg-standard-20 property-record-item l-display-inline-m js-property-record-item" data-brand="CY" data-city="콜롱브" data-close-text="" data-country="FR" data-map="true" data-marsha="PARCF" data-pnum="26" data-promo-code="" data-property='{"lat": "48.912327","longitude":"2.231324","brand": "CY","marshaCode": "PARCF","hwsInLanguageMissing": "false","blank":"-","type":"","hotelName":"코트야드 파리 라 데팡스 웨스트 - 콜롱브","propertyType":"","propMarkerLabel":"", "propMarkerBedLabel":"","index": ""}' data-statecode="" data-stateprovince="" id="property-record-map-PARCF">
              <div class="l-s-col-4 l-m-col-8 l-l-col-12 l-m-col-last l-s-col-last">
               <div class="l-row">
                <div class="js-image-container image-container l-pos-relative l-s-col-4 l-m-col-3 l-l-col-3" data-hotelname="코트야드 파리 라 데팡스 웨스트 - 콜롱브" data-imageurl="//cache.marriott.com/marriottassets/marriott/PARCF/parcf-exterior-0090-hor-feat.jpg">
                 [linkx]
                 
                </div>
                <div class="js-hotel-location l-overflow-hidden l-m-col-5 l-l-col-7 l-s-col-las small-padding-right-one-quarter small-padding-left-one-quarter">
                 <div class="l-row l-margin-top-five-quarters">
                  <div class="l-s-col-4 l-m-col-8 l-l-col-12 l-m-col-last l-s-col-last">
                   [linkx]
                   
                  </div>
                 </div>
                 <div class="l-row l-margin-bottom-three-quarters l-hidden-m-map-view">
                  <div class="l-s-col-4 l-m-col-8 l-l-col-12 l-m-col-last l-s-col-last t-font-s t-line-height-m m-hotel-address t-color-standard-90" data-address-line1="91, Blvd Charles De Gaulle" data-city="콜롱브" data-contact="+33 1 47 69 59 49" data-country="KR" data-country-description="프랑스" data-postal-code="92700" data-state="">
                   91, Blvd Charles De Gaulle 콜롱브, 프랑스 92700
                  </div>
                 </div>
                 <div class="l-row t-font-xs t-line-height-xs l-margin-bottom-three-quarters t-info-row">
                  <div class="js-hotel-distance l-hotel-distance l-s-col-2 l-m-col-4 l-l-col-3 l-hotel-distance-border t-color-standard-90">
                   <span aria-label="10.8 km 6.7 마일리지" class="l-padding-left-quarter l-padding-right-quarter t-bg-standard-100 t-color-standard-20 border-radius-small" title="6.7 마일리지">
                    <span aria-hidden="true">
                     10.8 km
                    </span>
                   </span>
                   목적지 기준
                  </div>
                  <div class="js-hotel-rating l-l-col-4 t-border-right t-border-color-standard-110 l-s-col-2 l-m-col-4 l-l-col-3l-hotel-rating l-rattings t-line-height-xs l-l-col-4-flex">
                   [linkx]
                   
                  </div>
                  <div class="js-hotel-category l-hotel-category l-hidden-m-map-view l-s-col-2 l-m-col-4 l-l-col-4 t-line-height-xs ">
                   <span class="t-font-weight-bold">
                    [linkx]
                    
                   </span>
                   <span class="hotel-reward l-display-inline-block t-color-standard-90">
                   </span>
                  </div>
                 </div>
                 <div class="l-row is-hidden-s is-hidden-m is-hidden-l is-visible-bubble l-view-rate">
                 </div>
                 <div class="macro-card-property-type l-display-none">
                 </div>
                </div>
                <div class="js-hotel-logo l-m-col-1-6 l-s-col-12 is-visible-m l-l-col-2 l-center-align is-visible-l l-margin-right-none">
                 <span class="t-brand-logo-icon-CY t-color-standard-100">
                 </span>
                </div>
               </div>
               <div class="js-rate-btn-container l-row l-padding-left-five-quarters l-padding-right-five-quarters l-pos-relative t-border-top t-border-color-standard-110">
                <div class="rate-container l-clear l-s-col-4 l-m-col-8 l-l-col-12 l-m-col-last l-s-col-last l-float-right l-padding-top-five-quarters l-padding-bottom-half l-l-padding-bottom-five-quarters l-m-padding-bottom-three-quarters l-display-inline-block">
                 <div class="js-button-text-wrapper l-float-right ">
                  [ahref]
                  
                 </div>
                </div>
               </div>
              </div>
             </div>
             <div class=" l-row t-bg-standard-20 property-record-item l-display-inline-m js-property-record-item" data-brand="BR" data-city="뤼에유말메종" data-close-text="" data-country="FR" data-map="true" data-marsha="PARSC" data-pnum="27" data-promo-code="" data-property='{"lat": "48.859209","longitude":"2.194828","brand": "BR","marshaCode": "PARSC","hwsInLanguageMissing": "false","blank":"-","type":"","hotelName":"르네상스 파리 히퍼드롬 데 세인트 클라우드 호텔","propertyType":"","propMarkerLabel":"", "propMarkerBedLabel":"","index": ""}' data-statecode="" data-stateprovince="" id="property-record-map-PARSC">
              <div class="l-s-col-4 l-m-col-8 l-l-col-12 l-m-col-last l-s-col-last">
               <div class="l-row">
                <div class="js-image-container image-container l-pos-relative l-s-col-4 l-m-col-3 l-l-col-3" data-hotelname="르네상스 파리 히퍼드롬 데 세인트 클라우드 호텔" data-imageurl="//cache.marriott.com/marriottassets/marriott/PARSC/parsc-exterior-0011-hor-feat.jpg">
                 [ahref]
                 
                </div>
                <div class="js-hotel-location l-overflow-hidden l-m-col-5 l-l-col-7 l-s-col-las small-padding-right-one-quarter small-padding-left-one-quarter">
                 <div class="l-row l-margin-top-five-quarters">
                  <div class="l-s-col-4 l-m-col-8 l-l-col-12 l-m-col-last l-s-col-last">
                   [ahref]
                   
                  </div>
                 </div>
                 <div class="l-row l-margin-bottom-three-quarters l-hidden-m-map-view">
                  <div class="l-s-col-4 l-m-col-8 l-l-col-12 l-m-col-last l-s-col-last t-font-s t-line-height-m m-hotel-address t-color-standard-90" data-address-line1="Rue du Lt Colonel de Montbrison 123" data-city="뤼에유말메종" data-contact="+33 1 47 77 64 64" data-country="KR" data-country-description="프랑스" data-postal-code="92500" data-state="">
                   Rue du Lt Colonel de Montbrison 123 뤼에유말메종, 프랑스 92500
                  </div>
                 </div>
                 <div class="l-row t-font-xs t-line-height-xs l-margin-bottom-three-quarters t-info-row">
                  <div class="js-hotel-distance l-hotel-distance l-s-col-2 l-m-col-4 l-l-col-3 l-hotel-distance-border t-color-standard-90">
                   <span aria-label="10.9 km 6.8 마일리지" class="l-padding-left-quarter l-padding-right-quarter t-bg-standard-100 t-color-standard-20 border-radius-small" title="6.8 마일리지">
                    <span aria-hidden="true">
                     10.9 km
                    </span>
                   </span>
                   목적지 기준
                  </div>
                  <div class="js-hotel-rating l-l-col-4 t-border-right t-border-color-standard-110 l-s-col-2 l-m-col-4 l-l-col-3l-hotel-rating l-rattings t-line-height-xs l-l-col-4-flex">
                   [linkx]
                   
                  </div>
                  <div class="js-hotel-category l-hotel-category l-hidden-m-map-view l-s-col-2 l-m-col-4 l-l-col-4 t-line-height-xs ">
                   <span class="t-font-weight-bold">
                    [ahref]
                    
                   </span>
                   <span class="hotel-reward l-display-inline-block t-color-standard-90">
                   </span>
                  </div>
                 </div>
                 <div class="l-row is-hidden-s is-hidden-m is-hidden-l is-visible-bubble l-view-rate">
                 </div>
                 <div class="macro-card-property-type l-display-none">
                 </div>
                </div>
                <div class="js-hotel-logo l-m-col-1-6 l-s-col-12 is-visible-m l-l-col-2 l-center-align is-visible-l l-margin-right-none">
                 <span class="t-brand-logo-icon-BR t-color-standard-100">
                 </span>
                </div>
               </div>
               <div class="js-rate-btn-container l-row l-padding-left-five-quarters l-padding-right-five-quarters l-pos-relative t-border-top t-border-color-standard-110">
                <div class="rate-container l-clear l-s-col-4 l-m-col-8 l-l-col-12 l-m-col-last l-s-col-last l-float-right l-padding-top-five-quarters l-padding-bottom-half l-l-padding-bottom-five-quarters l-m-padding-bottom-three-quarters l-display-inline-block">
                 <div class="js-button-text-wrapper l-float-right ">
                  [ahref]
                  
                 </div>
                </div>
               </div>
              </div>
             </div>
             <div class=" l-row t-bg-standard-20 property-record-item l-display-inline-m js-property-record-item" data-brand="AR" data-city="Dugny Le Bourget" data-close-text="" data-country="FR" data-map="true" data-marsha="PARAL" data-pnum="28" data-promo-code="" data-property='{"lat": "48.956361","longitude":"2.443809","brand": "AR","marshaCode": "PARAL","hwsInLanguageMissing": "false","blank":"-","type":"","hotelName":"AC Hotel Paris Le Bourget Airport","propertyType":"","propMarkerLabel":"", "propMarkerBedLabel":"","index": ""}' data-statecode="" data-stateprovince="" id="property-record-map-PARAL">
              <div class="l-s-col-4 l-m-col-8 l-l-col-12 l-m-col-last l-s-col-last">
               <div class="l-row">
                <div class="js-image-container image-container l-pos-relative l-s-col-4 l-m-col-3 l-l-col-3" data-hotelname="AC Hotel Paris Le Bourget Airport" data-imageurl="//cache.marriott.com/marriottassets/marriott/PARAL/paral-exterior-0067-hor-feat.jpg">
                 [linkx]
                 
                </div>
                <div class="js-hotel-location l-overflow-hidden l-m-col-5 l-l-col-7 l-s-col-las small-padding-right-one-quarter small-padding-left-one-quarter">
                 <div class="l-row l-margin-top-five-quarters">
                  <div class="l-s-col-4 l-m-col-8 l-l-col-12 l-m-col-last l-s-col-last">
                   [linkx]
                   
                  </div>
                 </div>
                 <div class="l-row l-margin-bottom-three-quarters l-hidden-m-map-view">
                  <div class="l-s-col-4 l-m-col-8 l-l-col-12 l-m-col-last l-s-col-last t-font-s t-line-height-m m-hotel-address t-color-standard-90" data-address-line1="2 Rue de la Haye" data-city="Dugny Le Bourget" data-contact="+33 1 82 88 60 00" data-country="KR" data-country-description="프랑스" data-postal-code="93440" data-state="">
                   2 Rue de la Haye Dugny Le Bourget, 프랑스 93440
                  </div>
                 </div>
                 <div class="l-row t-font-xs t-line-height-xs l-margin-bottom-three-quarters t-info-row">
                  <div class="js-hotel-distance l-hotel-distance l-s-col-2 l-m-col-4 l-l-col-3 l-hotel-distance-border t-color-standard-90">
                   <span aria-label="13.7 km 8.5 마일리지" class="l-padding-left-quarter l-padding-right-quarter t-bg-standard-100 t-color-standard-20 border-radius-small" title="8.5 마일리지">
                    <span aria-hidden="true">
                     13.7 km
                    </span>
                   </span>
                   목적지 기준
                  </div>
                  <div class="js-hotel-rating l-l-col-4 t-border-right t-border-color-standard-110 l-s-col-2 l-m-col-4 l-l-col-3l-hotel-rating l-rattings t-line-height-xs l-l-col-4-flex">
                   [ahref]
                   
                  </div>
                  <div class="js-hotel-category l-hotel-category l-hidden-m-map-view l-s-col-2 l-m-col-4 l-l-col-4 t-line-height-xs ">
                   <span class="t-font-weight-bold">
                    <a class="js-view-hotel-category t-alt-link" data-mfp-src="/loyalty/pointsGridPopUp.mi?awardType=Standard&amp;category=3&amp;marshaCode=PARAL" href="#">
                     3
                    </a>
                   </span>
                   <span class="hotel-reward l-display-inline-block t-color-standard-90">
                   </span>
                  </div>
                 </div>
                 <div class="l-row is-hidden-s is-hidden-m is-hidden-l is-visible-bubble l-view-rate">
                 </div>
                 <div class="macro-card-property-type l-display-none">
                 </div>
                </div>
                <div class="js-hotel-logo l-m-col-1-6 l-s-col-12 is-visible-m l-l-col-2 l-center-align is-visible-l l-margin-right-none">
                 <span class="t-brand-logo-icon-AR t-color-standard-100">
                 </span>
                </div>
               </div>
               <div class="js-rate-btn-container l-row l-padding-left-five-quarters l-padding-right-five-quarters l-pos-relative t-border-top t-border-color-standard-110">
                <div class="rate-container l-clear l-s-col-4 l-m-col-8 l-l-col-12 l-m-col-last l-s-col-last l-float-right l-padding-top-five-quarters l-padding-bottom-half l-l-padding-bottom-five-quarters l-m-padding-bottom-three-quarters l-display-inline-block">
                 <div class="js-button-text-wrapper l-float-right ">
                  [linkx]
                  
                 </div>
                </div>
               </div>
              </div>
             </div>
             <div class=" l-row t-bg-standard-20 property-record-item l-display-inline-m js-property-record-item" data-brand="MC" data-city="Roissy en France" data-close-text="" data-country="FR" data-map="true" data-marsha="PARMC" data-pnum="29" data-promo-code="" data-property='{"lat": "49.003152","longitude":"2.52046","brand": "MC","marshaCode": "PARMC","hwsInLanguageMissing": "false","blank":"-","type":"","hotelName":"Paris Marriott Charles de Gaulle Airport Hotel","propertyType":"","propMarkerLabel":"", "propMarkerBedLabel":"","index": ""}' data-statecode="" data-stateprovince="" id="property-record-map-PARMC">
              <div class="l-s-col-4 l-m-col-8 l-l-col-12 l-m-col-last l-s-col-last">
               <div class="l-row">
                <div class="js-image-container image-container l-pos-relative l-s-col-4 l-m-col-3 l-l-col-3" data-hotelname="Paris Marriott Charles de Gaulle Airport Hotel" data-imageurl="//cache.marriott.com/marriottassets/marriott/PARMC/parmc-lobby-0053-hor-feat.jpg">
                 [linkx]
                 
                </div>
                <div class="js-hotel-location l-overflow-hidden l-m-col-5 l-l-col-7 l-s-col-las small-padding-right-one-quarter small-padding-left-one-quarter">
                 <div class="l-row l-margin-top-five-quarters">
                  <div class="l-s-col-4 l-m-col-8 l-l-col-12 l-m-col-last l-s-col-last">
                   [ahref]
                   
                  </div>
                 </div>
                 <div class="l-row l-margin-bottom-three-quarters l-hidden-m-map-view">
                  <div class="l-s-col-4 l-m-col-8 l-l-col-12 l-m-col-last l-s-col-last t-font-s t-line-height-m m-hotel-address t-color-standard-90" data-address-line1="5 Allee du Verger, Zone Hoteliere" data-city="Roissy en France" data-contact="+33 1 34 38 53 53" data-country="KR" data-country-description="프랑스" data-postal-code="95700" data-state="">
                   5 Allee du Verger, Zone Hoteliere Roissy en France, 프랑스 95700
                  </div>
                 </div>
                 <div class="l-row t-font-xs t-line-height-xs l-margin-bottom-three-quarters t-info-row">
                  <div class="js-hotel-distance l-hotel-distance l-s-col-2 l-m-col-4 l-l-col-3 l-hotel-distance-border t-color-standard-90">
                   <span aria-label="20.4 km 12.7 마일리지" class="l-padding-left-quarter l-padding-right-quarter t-bg-standard-100 t-color-standard-20 border-radius-small" title="12.7 마일리지">
                    <span aria-hidden="true">
                     20.4 km
                    </span>
                   </span>
                   목적지 기준
                  </div>
                  <div class="js-hotel-rating l-l-col-4 t-border-right t-border-color-standard-110 l-s-col-2 l-m-col-4 l-l-col-3l-hotel-rating l-rattings t-line-height-xs l-l-col-4-flex">
                   [ahref]
                   
                  </div>
                  <div class="js-hotel-category l-hotel-category l-hidden-m-map-view l-s-col-2 l-m-col-4 l-l-col-4 t-line-height-xs ">
                   <span class="t-font-weight-bold">
                    [linkx]
                    
                   </span>
                   <span class="hotel-reward l-display-inline-block t-color-standard-90">
                   </span>
                  </div>
                 </div>
                 <div class="l-row is-hidden-s is-hidden-m is-hidden-l is-visible-bubble l-view-rate">
                 </div>
                 <div class="macro-card-property-type l-display-none">
                 </div>
                </div>
                <div class="js-hotel-logo l-m-col-1-6 l-s-col-12 is-visible-m l-l-col-2 l-center-align is-visible-l l-margin-right-none">
                 <span class="t-brand-logo-icon-MC t-color-standard-100">
                 </span>
                </div>
               </div>
               <div class="js-rate-btn-container l-row l-padding-left-five-quarters l-padding-right-five-quarters l-pos-relative t-border-top t-border-color-standard-110">
                <div class="rate-container l-clear l-s-col-4 l-m-col-8 l-l-col-12 l-m-col-last l-s-col-last l-float-right l-padding-top-five-quarters l-padding-bottom-half l-l-padding-bottom-five-quarters l-m-padding-bottom-three-quarters l-display-inline-block">
                 <div class="js-button-text-wrapper l-float-right ">
                  [linkx]
                  
                 </div>
                </div>
               </div>
              </div>
             </div>
             <div class=" l-row t-bg-standard-20 property-record-item l-display-inline-m js-property-record-item" data-brand="OX" data-city="Roissy-en-France" data-close-text="" data-country="FR" data-map="true" data-marsha="PAROX" data-pnum="30" data-promo-code="" data-property='{"lat": "49.007389","longitude":"2.547397","brand": "OX","marshaCode": "PAROX","hwsInLanguageMissing": "false","blank":"-","type":"","hotelName":"Moxy Paris Charles de Gaulle Airport","propertyType":"새로운 혜택","propMarkerLabel":"", "propMarkerBedLabel":"준비 중","index": ""}' data-statecode="" data-stateprovince="" id="property-record-map-PAROX">
              <div class="l-s-col-4 l-m-col-8 l-l-col-12 l-m-col-last l-s-col-last">
               <div class="l-row">
                <div class="js-image-container image-container l-pos-relative l-s-col-4 l-m-col-3 l-l-col-3" data-hotelname="Moxy Paris Charles de Gaulle Airport" data-imageurl="//cache.marriott.com/marriottassets/marriott/OX/ox-main01-0001-hor-feat.jpg">
                 <span class="l-new-hotel m-merch-shape-1 m-merch-style-1">
                 </span>
                 [ahref]
                 
                </div>
                <div class="js-hotel-location l-overflow-hidden l-m-col-5 l-l-col-7 l-s-col-las small-padding-right-one-quarter small-padding-left-one-quarter">
                 <div class="l-row l-margin-top-five-quarters">
                  <div class="l-s-col-4 l-m-col-8 l-l-col-12 l-m-col-last l-s-col-last">
                   [linkx]
                   
                  </div>
                 </div>
                 <div class="l-row l-margin-bottom-three-quarters l-hidden-m-map-view">
                  <div class="l-s-col-4 l-m-col-8 l-l-col-12 l-m-col-last l-s-col-last t-font-s t-line-height-m m-hotel-address t-color-standard-90" data-address-line1="5 Rue du Signe" data-city="Roissy-en-France" data-contact="+31 6 83415986" data-country="KR" data-country-description="프랑스" data-postal-code="95700" data-state="">
                   5 Rue du Signe Roissy-en-France, 프랑스 95700
                  </div>
                 </div>
                 <div class="l-row t-font-xs t-line-height-xs l-margin-bottom-three-quarters t-info-row">
                  <div class="js-hotel-distance l-hotel-distance l-s-col-2 l-m-col-4 l-l-col-3 l-hotel-distance-border t-color-standard-90">
                   <span aria-label="22.0 km 13.7 마일리지" class="l-padding-left-quarter l-padding-right-quarter t-bg-standard-100 t-color-standard-20 border-radius-small" title="13.7 마일리지">
                    <span aria-hidden="true">
                     22.0 km
                    </span>
                   </span>
                   목적지 기준
                  </div>
                  <div class="js-hotel-category l-hotel-category l-hidden-m-map-view l-s-col-2 l-m-col-4 l-l-col-4 t-line-height-xs ">
                   <span class="t-font-weight-bold">
                    [ahref]
                    
                   </span>
                   <span class="hotel-reward l-display-inline-block t-color-standard-90">
                   </span>
                  </div>
                 </div>
                 <div class="l-row is-hidden-s is-hidden-m is-hidden-l is-visible-bubble l-view-rate">
                 </div>
                 <div class="macro-card-property-type l-display-none">
                  <p class="t-opening-date t-font-weight-semibold l-margin-top-none l-padding-top">
                   곧 오픈 예정 Oct 2019
                  </p>
                 </div>
                </div>
                <div class="js-hotel-logo l-m-col-1-6 l-s-col-12 is-visible-m l-l-col-2 l-center-align is-visible-l l-margin-right-none">
                 <span class="t-brand-logo-icon-OX t-color-standard-100">
                 </span>
                </div>
               </div>
               <div class="js-rate-btn-container l-row l-padding-left-five-quarters l-padding-right-five-quarters l-pos-relative t-border-top t-border-color-standard-110">
                <div class="rate-container l-clear l-s-col-4 l-m-col-8 l-l-col-12 l-m-col-last l-s-col-last l-float-right l-padding-top-five-quarters l-padding-bottom-half l-l-padding-bottom-five-quarters l-m-padding-bottom-three-quarters l-display-inline-block">
                 <div class="js-button-text-wrapper l-float-right ">
                  <p class="t-font-weight-semibold l-margin-three-quarters l-float-right">
                   곧 오픈 예정 Oct 2019
                  </p>
                  [linkx]
                  
                 </div>
                </div>
               </div>
              </div>
             </div>
             <div class=" l-row t-bg-standard-20 property-record-item l-display-inline-m js-property-record-item" data-brand="SI" data-city="Tremblay en France" data-close-text="" data-country="FR" data-map="true" data-marsha="PARSI" data-pnum="31" data-promo-code="" data-property='{"lat": "49.004016","longitude":"2.570938","brand": "SI","marshaCode": "PARSI","hwsInLanguageMissing": "false","blank":"-","type":"","hotelName":"쉐라톤 파리 에어포트 호텔 &amp; 컨퍼런스 센터","propertyType":"","propMarkerLabel":"", "propMarkerBedLabel":"","index": ""}' data-statecode="" data-stateprovince="" id="property-record-map-PARSI">
              <div class="l-s-col-4 l-m-col-8 l-l-col-12 l-m-col-last l-s-col-last">
               <div class="l-row">
                <div class="js-image-container image-container l-pos-relative l-s-col-4 l-m-col-3 l-l-col-3" data-hotelname="쉐라톤 파리 에어포트 호텔 &amp; 컨퍼런스 센터" data-imageurl="//cache.marriott.com/marriottassets/marriott/PARSI/parsi-king-executive-guestroom-1118-hor-feat.jpg">
                 [linkx]
                 
                </div>
                <div class="js-hotel-location l-overflow-hidden l-m-col-5 l-l-col-7 l-s-col-las small-padding-right-one-quarter small-padding-left-one-quarter">
                 <div class="l-row l-margin-top-five-quarters">
                  <div class="l-s-col-4 l-m-col-8 l-l-col-12 l-m-col-last l-s-col-last">
                   [ahref]
                   
                  </div>
                 </div>
                 <div class="l-row l-margin-bottom-three-quarters l-hidden-m-map-view">
                  <div class="l-s-col-4 l-m-col-8 l-l-col-12 l-m-col-last l-s-col-last t-font-s t-line-height-m m-hotel-address t-color-standard-90" data-address-line1="Terminal 2E, BP 35051" data-city="Tremblay en France" data-contact="+33 1 49 19 70 70" data-country="KR" data-country-description="프랑스" data-postal-code="95716" data-state="">
                   Terminal 2E, BP 35051 Tremblay en France, 프랑스 95716
                  </div>
                 </div>
                 <div class="l-row t-font-xs t-line-height-xs l-margin-bottom-three-quarters t-info-row">
                  <div class="js-hotel-distance l-hotel-distance l-s-col-2 l-m-col-4 l-l-col-3 l-hotel-distance-border t-color-standard-90">
                   <span aria-label="22.9 km 14.2 마일리지" class="l-padding-left-quarter l-padding-right-quarter t-bg-standard-100 t-color-standard-20 border-radius-small" title="14.2 마일리지">
                    <span aria-hidden="true">
                     22.9 km
                    </span>
                   </span>
                   목적지 기준
                  </div>
                  <div class="js-hotel-rating l-l-col-4 t-border-right t-border-color-standard-110 l-s-col-2 l-m-col-4 l-l-col-3l-hotel-rating l-rattings t-line-height-xs l-l-col-4-flex">
                   [ahref]
                   
                  </div>
                  <div class="js-hotel-category l-hotel-category l-hidden-m-map-view l-s-col-2 l-m-col-4 l-l-col-4 t-line-height-xs ">
                   <span class="t-font-weight-bold">
                    [linkx]
                    
                   </span>
                   <span class="hotel-reward l-display-inline-block t-color-standard-90">
                   </span>
                  </div>
                 </div>
                 <div class="l-row is-hidden-s is-hidden-m is-hidden-l is-visible-bubble l-view-rate">
                 </div>
                 <div class="macro-card-property-type l-display-none">
                 </div>
                </div>
                <div class="js-hotel-logo l-m-col-1-6 l-s-col-12 is-visible-m l-l-col-2 l-center-align is-visible-l l-margin-right-none">
                 <span class="t-brand-logo-icon-SI t-color-standard-100">
                 </span>
                </div>
               </div>
               <div class="js-rate-btn-container l-row l-padding-left-five-quarters l-padding-right-five-quarters l-pos-relative t-border-top t-border-color-standard-110">
                <div class="rate-container l-clear l-s-col-4 l-m-col-8 l-l-col-12 l-m-col-last l-s-col-last l-float-right l-padding-top-five-quarters l-padding-bottom-half l-l-padding-bottom-five-quarters l-m-padding-bottom-three-quarters l-display-inline-block">
                 <div class="js-button-text-wrapper l-float-right ">
                  [linkx]
                  
                 </div>
                </div>
               </div>
              </div>
             </div>
             <div class=" l-row t-bg-standard-20 property-record-item l-display-inline-m js-property-record-item" data-brand="CY" data-city="르메닐아멜로" data-close-text="" data-country="FR" data-map="true" data-marsha="PARXA" data-pnum="32" data-promo-code="" data-property='{"lat": "49.022053","longitude":"2.599717","brand": "CY","marshaCode": "PARXA","hwsInLanguageMissing": "false","blank":"-","type":"","hotelName":"코트야드 파리 루와시 샤를 드골 에어포트 호텔","propertyType":"","propMarkerLabel":"", "propMarkerBedLabel":"","index": ""}' data-statecode="" data-stateprovince="" id="property-record-map-PARXA">
              <div class="l-s-col-4 l-m-col-8 l-l-col-12 l-m-col-last l-s-col-last">
               <div class="l-row">
                <div class="js-image-container image-container l-pos-relative l-s-col-4 l-m-col-3 l-l-col-3" data-hotelname="코트야드 파리 루와시 샤를 드골 에어포트 호텔" data-imageurl="//cache.marriott.com/marriottassets/marriott/PARXA/parxa-lobby-0035-hor-feat.jpg">
                 [linkx]
                  <li>[linkx]</li>[keywordx][symbolx][keywordx][symbolx][bracketl11][keywordx][bracketr11][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx]<li>[linkx]</li>[keywordx][symbolx][keywordx][symbolx][bracketl12][keywordx][bracketr12][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx]
                 
                </div>
                <div class="js-hotel-location l-overflow-hidden l-m-col-5 l-l-col-7 l-s-col-las small-padding-right-one-quarter small-padding-left-one-quarter">
                 <div class="l-row l-margin-top-five-quarters">
                  <div class="l-s-col-4 l-m-col-8 l-l-col-12 l-m-col-last l-s-col-last">
                   [linkx]
                   
                  </div>
                 </div>
                 <div class="l-row l-margin-bottom-three-quarters l-hidden-m-map-view">
                  <div class="l-s-col-4 l-m-col-8 l-l-col-12 l-m-col-last l-s-col-last t-font-s t-line-height-m m-hotel-address t-color-standard-90" data-address-line1="Rue de la Chapelle, Charles de Gaulle Airport" data-city="르메닐아멜로" data-contact="+33 1 60 03 63 00" data-country="KR" data-country-description="프랑스" data-postal-code="77990" data-state="">
                   Rue de la Chapelle, Charles de Gaulle Airport 르메닐아멜로, 프랑스 77990
                  </div>
                 </div>
                 <div class="l-row t-font-xs t-line-height-xs l-margin-bottom-three-quarters t-info-row">
                  <div class="js-hotel-distance l-hotel-distance l-s-col-2 l-m-col-4 l-l-col-3 l-hotel-distance-border t-color-standard-90">
                   <span aria-label="25.8 km 16.0 마일리지" class="l-padding-left-quarter l-padding-right-quarter t-bg-standard-100 t-color-standard-20 border-radius-small" title="16.0 마일리지">
                    <span aria-hidden="true">
                     25.8 km
                    </span>
                   </span>
                   목적지 기준
                  </div>
                  <div class="js-hotel-rating l-l-col-4 t-border-right t-border-color-standard-110 l-s-col-2 l-m-col-4 l-l-col-3l-hotel-rating l-rattings t-line-height-xs l-l-col-4-flex">
                   [ahref]
                   
                  </div>
                  <div class="js-hotel-category l-hotel-category l-hidden-m-map-view l-s-col-2 l-m-col-4 l-l-col-4 t-line-height-xs ">
                   <span class="t-font-weight-bold">
                    [linkx]
                    
                   </span>
                   <span class="hotel-reward l-display-inline-block t-color-standard-90">
                   </span>
                  </div>
                 </div>
                 <div class="l-row is-hidden-s is-hidden-m is-hidden-l is-visible-bubble l-view-rate">
                 </div>
                 <div class="macro-card-property-type l-display-none">
                 </div>
                </div>
                <div class="js-hotel-logo l-m-col-1-6 l-s-col-12 is-visible-m l-l-col-2 l-center-align is-visible-l l-margin-right-none">
                 <span class="t-brand-logo-icon-CY t-color-standard-100">
                 </span>
                </div>
               </div>
               <div class="js-rate-btn-container l-row l-padding-left-five-quarters l-padding-right-five-quarters l-pos-relative t-border-top t-border-color-standard-110">
                <div class="rate-container l-clear l-s-col-4 l-m-col-8 l-l-col-12 l-m-col-last l-s-col-last l-float-right l-padding-top-five-quarters l-padding-bottom-half l-l-padding-bottom-five-quarters l-m-padding-bottom-three-quarters l-display-inline-block">
                 <div class="js-button-text-wrapper l-float-right ">
                  [ahref]
                  
                 </div>
                </div>
               </div>
              </div>
             </div>
             <div class=" l-row t-bg-standard-20 property-record-item l-display-inline-m js-property-record-item" data-brand="MV" data-city="바이이-호망빌리에" data-close-text="" data-country="FR" data-map="true" data-marsha="PARDP" data-pnum="33" data-promo-code="" data-property='{"lat": "48.852741","longitude":"2.81204","brand": "MV","marshaCode": "PARDP","hwsInLanguageMissing": "false","blank":"-","type":"","hotelName":"메리어트 빌리지 딜 드 프랑스","propertyType":"","propMarkerLabel":"", "propMarkerBedLabel":"","index": ""}' data-statecode="" data-stateprovince="" id="property-record-map-PARDP">
              <div class="l-s-col-4 l-m-col-8 l-l-col-12 l-m-col-last l-s-col-last">
               <div class="l-row">
                <div class="js-image-container image-container l-pos-relative l-s-col-4 l-m-col-3 l-l-col-3" data-hotelname="메리어트 빌리지 딜 드 프랑스" data-imageurl="//cache.marriott.com/marriottassets/marriott/PARDP/pardp-pool-0084-hor-feat.jpg">
                 [ahref]
                 
                </div>
                <div class="js-hotel-location l-overflow-hidden l-m-col-5 l-l-col-7 l-s-col-las small-padding-right-one-quarter small-padding-left-one-quarter">
                 <div class="l-row l-margin-top-five-quarters">
                  <div class="l-s-col-4 l-m-col-8 l-l-col-12 l-m-col-last l-s-col-last">
                   [linkx]
                   
                  </div>
                 </div>
                 <div class="l-row l-margin-bottom-three-quarters l-hidden-m-map-view">
                  <div class="l-s-col-4 l-m-col-8 l-l-col-12 l-m-col-last l-s-col-last t-font-s t-line-height-m m-hotel-address t-color-standard-90" data-address-line1="Allee de l'Orme Rond" data-city="바이이-호망빌리에" data-contact="+33 1 60 42 90 00" data-country="KR" data-country-description="프랑스" data-postal-code="77700" data-state="">
                   Allee de l&amp;aposOrme Rond 바이이-호망빌리에, 프랑스 77700
                  </div>
                 </div>
                 <div class="l-row t-font-xs t-line-height-xs l-margin-bottom-three-quarters t-info-row">
                  <div class="js-hotel-distance l-hotel-distance l-s-col-2 l-m-col-4 l-l-col-3 l-hotel-distance-border t-color-standard-90">
                   <span aria-label="34.4 km 21.4 마일리지" class="l-padding-left-quarter l-padding-right-quarter t-bg-standard-100 t-color-standard-20 border-radius-small" title="21.4 마일리지">
                    <span aria-hidden="true">
                     34.4 km
                    </span>
                   </span>
                   목적지 기준
                  </div>
                  <div class="js-hotel-category l-hotel-category l-hidden-m-map-view l-s-col-2 l-m-col-4 l-l-col-4 t-line-height-xs ">
                   <span class="t-font-weight-bold">
                    [linkx]
                    
                   </span>
                   <span class="hotel-reward l-display-inline-block t-color-standard-90">
                   </span>
                  </div>
                 </div>
                 <div class="l-row is-hidden-s is-hidden-m is-hidden-l is-visible-bubble l-view-rate">
                 </div>
                 <div class="macro-card-property-type l-display-none">
                 </div>
                </div>
                <div class="js-hotel-logo l-m-col-1-6 l-s-col-12 is-visible-m l-l-col-2 l-center-align is-visible-l l-margin-right-none">
                 <span class="t-brand-logo-icon-MV t-color-standard-100">
                 </span>
                </div>
               </div>
               <div class="js-rate-btn-container l-row l-padding-left-five-quarters l-padding-right-five-quarters l-pos-relative t-border-top t-border-color-standard-110">
                <div class="rate-container l-clear l-s-col-4 l-m-col-8 l-l-col-12 l-m-col-last l-s-col-last l-float-right l-padding-top-five-quarters l-padding-bottom-half l-l-padding-bottom-five-quarters l-m-padding-bottom-three-quarters l-display-inline-block">
                 <div class="js-button-text-wrapper l-float-right ">
                  [linkx]
                  
                 </div>
                </div>
               </div>
              </div>
             </div>
            </div>
           </div>
          </div>
         </div>
         <div class="l-l-col-9 l-l-col-last js-map-container l-l-col-map is-hidden">
          <div aria-hidden="true" class="search-google-map width-100 height-100" data-options='{"api":"//maps.googleapis.com/maps/api/js?v=3.exp&amp;client=gme-marriottinternational&amp;libraries=places,geometry&amp;signed_in=false&amp;region="}' id="map-container">
           <div class="map-error is-hidden" id="error-messages">
            <span>
             Unable to Load Map
            </span>
           </div>
           <div class="width-100 height-100" id="map">
           </div>
           [ahref]
           
          </div>
         </div>
        </div>
       </div>
      </div>
      <div id="TravelerArticlesTrending7118">
      </div>
     </div>
     <div class="mi-sub-section bleed-sub-section l-margin-subsection-bottom-extraLarge l-padding-subsection-vertical-none">
      <div id="discoverDestinationc1bc">
       <div class="tile-discover-destination-container t-bg-standard-30" data-component-endpoint="/aries-search/v1/discoverDestination.comp" data-component-id="discoverDestination_01_c1bc" data-component-name="discoverDestination">
        <div class="l-container">
         <h2 class="l-article-title l-center-align t-color-standard-10 l-margin-none">
          <b>[mkey1][symbolx][pkeyx][symbolx][keyword1][bracketl1][keywordx][bracketr1][symbolx][bracketl2][keywordx][bracketr2][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx]</b>
         </h2>
         <div class="l-article-content js-article-content t-color-standard-10" data-collapse="false" data-description="파리의 상징 ‘에펠탑’은 건립될 당시 탑의 높이가 약 300m로 1930년 크라이슬러 빌딩의 완공 전까지 세계에서 가장 높은 고층건물이었다. 에펠탑은 파리야경을 더욱 빛내는 존재로 1991년에 세계문화유산으로 등재되었다.<br>
루브르 박물관은 세계에서 가장 많은 관람객들이 방문하는 박물관이다. 과거 프랑스 왕가가 머물던 루브르궁을 개조한 박물관으로, 박물관 전체가 세계문화유산으로 지정되어 있을 만큼 문화적 가치가 높다. ‘모나리자’, ‘만종’ 등 굵직한 명작 미술품이 많아 미술애호가들의 위시리스트에서 빠지지 않는 이곳은 5세기 동안 유럽 외에 다양한 지역에서 수집한 회화, 조각 등 수많은 예술품이 30만점 가량이나 돼 다 돌아보려면 며칠은 걸리므로 관심 있는 작품이 있으면 그 위치를 파악해 미리 동선을 짜두는 것이 좋다. 박물관 건물 앞에 있는 유리 피라미드는 야경 포인트로 추천!!<br>
국립 현대 미술관과 비교하면 19세기 이후의 근대 미술 작품을 전시하는 오르세 미술관도 루브르 박물관, 퐁피두센터와 함께 파리의 3대 미술관으로 꼽히는 곳. 19세기 이후의 근대미술 작품들을 전시하는 이곳의 대표적인 작품으로는 마네의 &amp;lt;피리 부는 소년&amp;gt;, 밀레의 &amp;lt;이삭줍기&amp;gt; 등이 있다. 매월 첫째 주 월요일에는 무료로 입장 가능하다는 것도 알아두자.<br>
룩셈부르크 정원에서 도보로 갈 수 있는 ‘팡테옹’도 파리 여행자들에게 명소로 인기가 많은 곳. 원래 교회였던 팡테옹은 빅토르 위고, 퀴리 부인 등의 묘지가 안장돼 있다. 팡테옹의 감상 포인트로 파리의 360도 전경도 꼭 챙겨보시길.<br>
뮤지컬로 더 유명한 고딕 양식의 ‘노트르담 드 파리 대성당’은 프랑스에서 첫째가는 기독교 숭배의 장이자, 국가 수장의 장례식 같은 행사가 열리는 곳이다.<br>
파리 예술가들의 낭만이 가득한 몽마르트 언덕도 꼭 가보아야 할 장소. 파리 시내가 한 눈에 내려다보이는 몽마르트 언덕은 고흐를 비롯한 유명 화가들이 살던 곳으로 19세기 프랑스의 모습을 그대로 느낄 수 있다. 여전히 많은 거리의 화가들이 그림을 그리고 있으며 다양한 길거리 공연도 펼쳐진다.<br>
낮보다 밤이 좋은 명소로 ‘물랑루즈’는 어떨까. 파리 세계박람회 당시 댄스홀로도 사용되었던 물랑루즈는 ‘붉은 풍차’라는 뜻으로 많은 예술가들의 영감을 준 장소다. 프렌치 캉캉을 비롯한 다양한 댄스로 구성된 화려한 쇼는 볼만한 가치가 충분하다. 또 하나, 오페라 마니아라면 파리 국립오페라를 빼놓을 수 없다. 오페라가 위치한 곳에 프렝탕 백화점, 갤러리 라파예트 등 유명 백화점이 있어 오페라 감상 후 쇼핑하기도 굿!!<br>
파리의 맛하면 미식의 나라로 불리는 프랑스답게 에스까르고, 푸아그라, 바게트, 크레페 등 미식가들을 유혹하는 유명 레스토랑이 많다. 문을 연지 100년이 넘는 ‘샤르티에(Chartier)’는 정통 프랑스 요리를 착한 가격에 즐길 수 있는 맛 집이다.<br>
파리의 12월은 평균 최저기온이 영상 3.6℃, 평균 최고기온이 영상 7.8℃로 한국의 초겨울 날씨와 비슷하다." itemprop="description">
          파리의 상징 ‘에펠탑’은 건립될 당시 탑의 높이가 약 300m로 1930년 크라이슬러 빌딩의 완공 전까지 세계에서 가장 높은 고층건물이었다. 에펠탑은 파리야경을 더욱 빛내는 존재로 1991년에 세계문화유산으로 등재되었다.
          <br/>
          루브르 박물관은 세계에서 가장 많은 관람객들이 방문하는 박물관이다. 과거 프랑스 왕가가 머물던 루브르궁을 개조한 박물관으로, 박물관 전체가 세계문화유산으로 지정되어 있을 만큼 문화적 가치가 높다. ‘모나리자’, ‘만종’ 등 굵직한 명작 미술품이 많아 미술애호가들의 위시리스트에서 빠지지 않는 이곳은 5세기 동안 유럽 외에 다양한 지역에서 수집한 회화, 조각 등 수많은 예술품이 30만점 가량이나 돼 다 돌아보려면 며칠은 걸리므로 관심 있는 작품이 있으면 그 위치를 파악해 미리 동선을 짜두는 것이 좋다. 박물관 건물 앞에 있는 유리 피라미드는 야경 포인트로 추천!!
          <br/>
          국립 현대 미술관과 비교하면 19세기 이후의 근대 미술 작품을 전시하는 오르세 미술관도 루브르 박물관, 퐁피두센터와 함께 파리의 3대 미술관으로 꼽히는 곳. 19세기 이후의 근대미술 작품들을 전시하는 이곳의 대표적인 작품으로는 마네의 <피리 부는 소년>, 밀레의 <이삭줍기> 등이 있다. 매월 첫째 주 월요일에는 무료로 입장 가능하다는 것도 알아두자.
          <br/>
          룩셈부르크 정원에서 도보로 갈 수 있는 ‘팡테옹’도 파리 여행자들에게 명소로 인기가 많은 곳. 원래 교회였던 팡테옹은 빅토르 위고, 퀴리 부인 등의 묘지가 안장돼 있다. 팡테옹의 감상 포인트로 파리의 360도 전경도 꼭 챙겨보시길.
          <br/>
          뮤지컬로 더 유명한 고딕 양식의 ‘노트르담 드 파리 대성당’은 프랑스에서 첫째가는 기독교 숭배의 장이자, 국가 수장의 장례식 같은 행사가 열리는 곳이다.
          <br/>
          파리 예술가들의 낭만이 가득한 몽마르트 언덕도 꼭 가보아야 할 장소. 파리 시내가 한 눈에 내려다보이는 몽마르트 언덕은 고흐를 비롯한 유명 화가들이 살던 곳으로 19세기 프랑스의 모습을 그대로 느낄 수 있다. 여전히 많은 거리의 화가들이 그림을 그리고 있으며 다양한 길거리 공연도 펼쳐진다.
          <br/>
          낮보다 밤이 좋은 명소로 ‘물랑루즈’는 어떨까. 파리 세계박람회 당시 댄스홀로도 사용되었던 물랑루즈는 ‘붉은 풍차’라는 뜻으로 많은 예술가들의 영감을 준 장소다. 프렌치 캉캉을 비롯한 다양한 댄스로 구성된 화려한 쇼는 볼만한 가치가 충분하다. 또 하나, 오페라 마니아라면 파리 국립오페라를 빼놓을 수 없다. 오페라가 위치한 곳에 프렝탕 백화점, 갤러리 라파예트 등 유명 백화점이 있어 오페라 감상 후 쇼핑하기도 굿!!
          <br/>
          파리의 맛하면 미식의 나라로 불리는 프랑스답게 에스까르고, 푸아그라, 바게트, 크레페 등 미식가들을 유혹하는 유명 레스토랑이 많다. 문을 연지 100년이 넘는 ‘샤르티에(Chartier)’는 정통 프랑스 요리를 착한 가격에 즐길 수 있는 맛 집이다.
          <br/>
          파리의 12월은 평균 최저기온이 영상 3.6℃, 평균 최고기온이 영상 7.8℃로 한국의 초겨울 날씨와 비슷하다.
         </div>
        </div>
       </div>
      </div>
     </div>
     <section class="mi-sub-section sub-section l-print-fullbleed l-container l-margin-subsection-bottom-extraLarge l-padding-subsection-vertical-none">
      <div class=" l-s-col-4 l-m-col-8 l-s-col-last l-m-col-last l-l-col-12 l-xl-col-12 l-l-col-last l-xl-col-last">
       <div id="ArticleContentTexta8e4">
        <div class="tile-top-offers-title l-center-align" data-component-endpoint="/aries-common/v1/articleContentText.comp" data-component-id="ArticleContentText_02_a8e4" data-component-name="articleContentText">
        </div>
       </div>
      </div>
     </section>
     <div class="mi-sub-section bleed-sub-section l-margin-subsection-bottom-extraLarge l-padding-subsection-vertical-none">
      <div id="MarketingTiles4Packa8fe">
       <div class="tile-marketing-4pack l-s-container-fullbleed l-clear" data-component-endpoint="/aries-common/v1/marketingTiles4Pack.comp" data-component-id="MarketingTiles4Pack_01_a8fe" data-component-name="marketingTiles">
        <div class="l-inner-wrapper l-s-col-4">
         <div class="t-page-section-component t-box-shadow l-s-col-4 l-l-col-3 l-xl-col-3 t-bg-standard-20 l-pos-relative l-margin-bottom-half">
          <div class="l-media-wrapper l-overflow-hidden">
           [ahref]
           
           <div class="is-over-text l-padding-top-five-quarters l-padding-left-five-quarters l-padding-right-five-quarters l-padding-subsection-bottom-large">
            <p>
             메리어트 소개
            </p>
            [linkx]
            
           </div>
          </div>
         </div>
         <div class="t-page-section-component t-box-shadow l-s-col-4 l-l-col-3 l-xl-col-3 t-bg-standard-20 l-pos-relative l-margin-bottom-half">
          <div class="l-media-wrapper l-overflow-hidden">
           [linkx]
           
           <div class="is-over-text l-padding-top-five-quarters l-padding-left-five-quarters l-padding-right-five-quarters l-padding-subsection-bottom-large">
            <p>
             스페셜 프로모션
            </p>
            [ahref]
            
           </div>
          </div>
         </div>
         <div class="t-page-section-component t-box-shadow l-s-col-4 l-l-col-3 l-xl-col-3 t-bg-standard-20 l-pos-relative l-margin-bottom-half">
          <div class="l-media-wrapper l-overflow-hidden">
           [ahref]
            [pkeyx][keywordx][symbolx][keywordx][symbolx][bracketl16][keywordx][bracketr16][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][linkx][pkeyx][keywordx][symbolx][keywordx][symbolx][bracketl17][keywordx][bracketr17][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][linkx][keywordx][symbolx][keywordx][symbolx][bracketl18][keywordx][bracketr18][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][ahref][pkeyx][linkx][keywordx][symbolx][keywordx][symbolx][bracketl1][keywordx][bracketr1][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][ahref][ahref][mkey1][keywordx][symbolx][keywordx][symbolx][bracketl2][keywordx][bracketr2][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][pkeyx][mkey1][linkx]
           
           <div class="is-over-text l-padding-top-five-quarters l-padding-left-five-quarters l-padding-right-five-quarters l-padding-subsection-bottom-large">
            <p>
             국내 메리어트 호텔
            </p>
            [linkx]
            
           </div>
          </div>
         </div>
         <div class="t-page-section-component t-box-shadow l-s-col-4 l-l-col-3 l-xl-col-3 t-bg-standard-20 l-pos-relative l-margin-bottom-half">
          <div class="l-media-wrapper l-overflow-hidden">
           [ahref]
           
           <div class="is-over-text l-padding-top-five-quarters l-padding-left-five-quarters l-padding-right-five-quarters l-padding-subsection-bottom-large">
            <p>
             목시 오사카
            </p>
            <a class="t-extend-link chase-cc-saml" href="/hotels/travel/osaox-moxy-osaka-honmachi/" title="지금 예약하기  ">
             지금 예약하기
             <span class="t-icon-arrow-right">
             </span>
            </a>
           </div>
          </div>
         </div>
        </div>
       </div>
      </div>
     </div>
     <section class="mi-sub-section sub-section t-box-shadow t-bg-standard-20 l-margin-subsection-bottom-small l-padding-subsection-vertical-none">
      <div class="l-print-fullbleed l-container">
       <div class=" l-s-col-4 l-m-col-8 l-s-col-last l-m-col-last l-l-col-12 l-xl-col-12 l-l-col-last l-xl-col-last">
        <div id="BrandRibbondbc4">
         <div class="m-brand-portfolio tile-logos-portfolio clearfix l-xl-col-12 l-l-col-12 l-display-flex l-justify-flex-center" data-component-endpoint="/aries-search/v1/brandRibbon.comp" data-component-id="BrandRibbon_01_dbc4" data-component-name="logosPortfolio">
          <div class="t-logo-main">
           [linkx]
           
          </div>
          <div class="m-porfolio-container t-linear-gradient-border l-l-col-12 l-xl-col-12" id="portfolio-container">
           <div class="l-portfolio-mi l-center-align l-luxury">
            <span class="l-category-title l-float-left l-margin-top t-font-xs">
             럭셔리
            </span>
            <div class="l-luxury-logos">
             [linkx]
             
             [ahref]
             
             [linkx]
             
             [ahref]
             
             [linkx]
             
             [linkx]
             
            </div>
           </div>
           <div class="l-portfolio-mi l-center-align l-premium l-display-flex">
            <span class="l-category-title l-float-left l-margin-top t-font-xs">
             프리미엄
            </span>
            <div class="l-premium-logos">
             [linkx]
             
             [ahref]
             
             [ahref]
              [pkeyx][mkey1][ahref][linkx][keywordx][symbolx][keywordx][symbolx][bracketl8][keywordx][bracketr8][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx]
             
             [linkx]
             
             [linkx]
             
             [ahref]
             
             [linkx]
             
             [linkx]
             
             [ahref]
             
             [ahref]
             
             [ahref]
             
            </div>
           </div>
           <div class="l-portfolio-mi l-center-align l-select l-display-flex">
            <span class="l-category-title l-float-left l-margin-top t-font-xs">
             셀렉트
            </span>
            <div class="l-select-logos">
             [linkx]
             
             [ahref]
             
             [ahref]
             
             [ahref]
             
             [linkx]
             
             <a aria-label="AC Hotels 새 브라우저 창에서 열기." class="portfolio-icon-ac-hotels analytics-click" data-analytics="{'sendNow':'true'}" href="/" target="_blank">
              <span>
               AC Hotels
              </span>
             </a>
             [ahref]
             
             [ahref]
             
            </div>
           </div>
           <div class="l-portfolio-mi l-center-align l-longer-stays l-display-flex">
            <span class="l-category-title l-float-left l-margin-top t-font-xs">
             장기 체류
            </span>
            <div class="l-longer-stays-logos">
             [ahref]
             
             [linkx]
             
             [linkx]
             
             [ahref]
             
             [linkx]
             
            </div>
           </div>
          </div>
         </div>
        </div>
       </div>
      </div>
     </section>
    </div>
    <footer class="m-footer">
     <div class="l-univ-nav-footer">
      <div class="l-container">
       <div class="l-clear l-padding-top-five-quarters l-padding-bottom-five-quarters">
        <div class="l-s-col-4 l-m-col-8 l-l-text-align-left l-s-col-last l-l-col-8">
         <div id="TransactionalFooterLinks0a37">
          <div class="tile-transactional-footer" data-component-endpoint="/aries-common/v1/transactionalFooterLinks.comp" data-component-id="TransactionalFooterLinks_02_0a37" data-component-name="transactionalFooterLinks">
           <li>[keywordx][symbolx][keywordx][symbolx][bracketl3][keywordx][bracketr3][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx]</li><li>[keywordx][symbolx][keywordx][symbolx][bracketl4][keywordx][bracketr4][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx]</li>[keywordx]<li>[pkeyx]</li>[ahref]
          </div>
         </div>
         <div id="TransactionalFooterLinks0450">
          <div class="tile-transactional-footer" data-component-endpoint="/aries-common/v1/transactionalFooterLinks.comp" data-component-id="TransactionalFooterLinks_03_0450" data-component-name="transactionalFooterLinks">
           <section class="t-border-bottom t-border-color-standard-110 t-footer-section clearfix">
            <h3 class="t-font-s t-line-height-m is-drawer-control toggle-data l-margin-none t-font-weight-bold t-extend-h3 l-padding-bottom-half" role="button">
             <b>[mkey1][symbolx][pkeyx][symbolx][keyword1][bracketl1][keywordx][bracketr1][symbolx][bracketl2][keywordx][bracketr2][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx]</b>
            </h3>
            <ul class="t-footer-links-list">
             <li class="l-padding-left-none l-display-inline-block t-font-s">
              [ahref]
              
             </li>
             <li class="l-padding-left-none l-display-inline-block t-font-s">
              [ahref]
              
             </li>
             <li class="l-padding-left-none l-display-inline-block t-font-s">
              [linkx]
              
             </li>
            </ul>
           </section>
          </div>
         </div>
        </div>
        <div class="l-s-col-4 l-m-col-8 l-s-col-last l-l-col-4 l-l-text-align-left l-l-col-last">
         <div id="ArticleLinksGroup8500">
          <div class="tile-help-text" data-component-endpoint="/aries-common/v1/articleLinksGroup.comp" data-component-id="ArticleLinksGroup_01_8500" data-component-name="articleLinksGroup">
           <div class="l-l-col-10 l-l-offset-2 need-help-wrap">
            <h3 class="t-font-weight-bold l-margin-none l-padding-bottom-quarter l-display-inline-block l-l-display-block t-extend-h4">
             [mkey1][symbolx][pkeyx][symbolx][keyword1][bracketl1][keywordx][bracketr1][symbolx][bracketl2][keywordx][bracketr2][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx]
            </h3>
            <h4 class="t-font-weight-bold l-margin-none l-display-inline-block l-l-display-block l-padding-left-half l-l-padding-left-none">
             [linkx]
             
            </h4>
           </div>
          </div>
         </div>
         <div id="CardLinks91b5">
          <div class="m-socialLinksWrapper l-display-inline-block l-l-offset-2 l-clear" data-component-endpoint="/aries-common/v1/cardLinks.comp" data-component-id="CardLinks_04_91b5" data-component-name="cardLinks">
           <p class="l-margin-top-double l-margin-bottom-none t-font-xs">
            소셜 네트워크
           </p>
           <ul class="m-socialLinks">
            <li class="l-display-inline-block">
             [ahref]
             
            </li>
            <li class="l-display-inline-block">
             [ahref]
             
            </li>
            <li class="l-display-inline-block">
             [ahref]
             
            </li>
            <li class="l-display-inline-block">
             [ahref]
             
            </li>
            <li class="l-display-inline-block">
             [linkx]
             
            </li>
           </ul>
          </div>
         </div>
        </div>
       </div>
      </div>
     </div>
     <div class="l-univ-nav-footer">
      <div class="l-container">
       <div class="l-clear l-padding-top-five-quarters l-padding-bottom-five-quarters t-border-top t-border-color-standard-110 t-border-color-standard-10 l-margin-bottom-one-and-half l-l-margin-bottom-none">
        <div class="l-s-col-4 l-m-col-8 l-l-text-align-left l-s-col-last l-center-align l-l-col-11">
         <div id="ArticleLinksGroupa114">
          <div class="tile-copyright-text" data-component-endpoint="/aries-common/v1/articleLinksGroup.comp" data-component-id="ArticleLinksGroup_02_a114" data-component-name="articleLinksGroup">
           <p class="t-font-xs t-line-height-xs l-margin-top-none l-s-display-block l-clear l-margin-bottom-half">
            © 1996 - 2019
            <span class="t-icon-mi-globe">
            </span>
            <span itemscope=" " itemtype="http://schema.org/Organization">
             <span itemprop="name">
              메리어트 인터내셔널
             </span>
             All rights reserved. 메리어트 독점 정보
            </span>
           </p>
           <div class="l-display-inline-block l-clear l-universal-footer-link t-font-xs t-line-height-xs l-padding-none l-margin-none">
            <span class="icon t-font-family-marriotticons t-icon-dot">
            </span>
            [linkx]
            
           </div>
           <div class="l-display-inline-block l-clear l-universal-footer-link t-font-xs t-line-height-xs l-padding-none l-margin-none">
            <span class="icon t-font-family-marriotticons t-icon-dot">
            </span>
            [ahref]
            
           </div>
           <div class="l-display-inline-block l-clear l-universal-footer-link t-font-xs t-line-height-xs l-padding-none l-margin-none">
            <span class="icon t-font-family-marriotticons t-icon-dot">
            </span>
            [linkx]
            
           </div>
           <div class="l-display-inline-block l-clear l-universal-footer-link t-font-xs t-line-height-xs l-padding-none l-margin-none">
            <span class="icon t-font-family-marriotticons t-icon-dot">
            </span>
            [ahref]
            
           </div>
           <div class="l-display-inline-block l-clear l-universal-footer-link t-font-xs t-line-height-xs l-padding-none l-margin-none">
            <span class="icon t-font-family-marriotticons t-icon-dot">
            </span>
            [linkx]
            
           </div>
           <p aria-hidden="true" class="js-session-detail l-margin-top l-padding-top t-font-xs t-border-top t-border-color-standard-110 l-l-col-12">
           </p>
          </div>
         </div>
        </div>
        <div class="l-s-col-4 l-m-col-8 l-s-col-last l-center-align l-l-col-1 l-l-text-align-right l-l-col-last">
         <li class="l-padding-none t-global-nav-items t-line-height-xs" id="QuickLinkItem6edf">
          [ahref]
          
         </li>
        </div>
       </div>
      </div>
     </div>
    </footer>
    <div data-component-endpoint="/aries-common/v1/hdVars.comp" data-component-id="HDVars_01_6cc9" data-component-name="hdVars">
     <div class="session-cleanup js-session-cleanup" data-invokesessioncleanup="false" data-sessioncleanupurl="/aries-common/v1/sessionCleanup.comp" data-trackingurls="">
     </div>
    </div>
    <div class="is-hidden session-timeout" data-component-endpoint="/aries-auth/sessionTimeOutForm.comp" data-component-id="SessionTimeOutForm_01_15ff" data-component-name="sessionTimeOut">
    </div>
   </div>
  </div>
  <b style="color:black;background-color:#a0ffff">
   jnice09-ipp30-wq-zq-0240
  </b>
 </body>
</html>
|<---