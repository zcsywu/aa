--->|<!DOCTYPE html>
<html dir="ltr" lang="en-HK" xml:lang="en-HK" xmlns="https://www.w3.org/1999/xhtml">
 <head>
  <base href="https://www.raileurope.hk/"/>
  <meta content="text/html; charset=utf-8" http-equiv="Content-Type"/>
  <meta content="ie=edge" http-equiv="x-ua-compatible"/>
  <meta content="width=device-width, initial-scale=1.0" name="viewport"/>
  <meta content="document" name="resource-type"/>
  <meta content="10 Days" name="revisit-after"/>
  <title>
   [mkey1][symbolx][pkey1][symbolx][keyword1][bracketl1][bracketr1][symbolx][bracketl2][siter1][bracketr2][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx]
  </title>
  <meta content="[mkey1][symbolx][pkey1][symbolx][keyword1][bracketl1][bracketr1][symbolx][bracketl2][siter1][bracketr2][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx]" name="keywords"/>
  <meta content="[mkey1][symbolx][pkey1][symbolx][keyword1][bracketl1][bracketr1][symbolx][bracketl2][siter1][bracketr2][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx]" name="description"/>
 </head>
 <body class="ui-responsive-panel" id="journeys">
  <div class="banner_hp_bg" id="banner_bg">
   <div class="banner_overlay hidden">
   </div>
  </div>
  <header>
   <div id="header">
    <div id="header-top">
     <div class="menu_button pointer">
      <div class="sprite f-left">
      </div>
      Menu
     </div>
     <div class="header_button f-left dropdown" id="money_changer">
      <span class="flags">
       <div class="flaghongkong">
       </div>
       English | HKD
      </span>
     </div>
     <div class="button_content money_changer">
      <div class="flagsCont1 f-left">
       <select class="customhiddenselect" id="lang-form" name="lang-form" onchange="document.location.href=this.options[this.selectedIndex].value;">
        <option value="https://www.raileurope-gcc.com/?visitor_country=AE">
         Arab Emirates
        </option>
        <option value="https://www.raileurope.com.ar/?visitor_country=AR">
         Argentina
        </option>
        <option value="https://www.raileurope.com.au/?visitor_country=AU">
         Australia
        </option>
        <option value="https://www.raileurope-gcc.com/?visitor_country=BH">
         Bahrain
        </option>
        <option value="https://be.oui.sncf/?visitor_country=BE">
         Belgium
        </option>
        <option value="https://www.raileurope.com.bo/?visitor_country=BO">
         Bolivia
        </option>
        <option value="https://www.raileurope.co.za/?visitor_country=BW">
         Botswana
        </option>
        <option value="https://www.raileurope.com.br/?visitor_country=BR">
         Brazil
        </option>
        <option value="https://www.raileurope-asean.com/?visitor_country=BN">
         Brunei Darussalam
        </option>
        <option value="https://www.raileurope-asean.com/?visitor_country=KH">
         Cambodia
        </option>
        <option value="https://www.raileurope.ca/?var_lang=eo&amp;visitor_country=CA">
         Canada
        </option>
        <option value="https://www.raileurope.cl/?visitor_country=CL">
         Chile
        </option>
        <option value="https://www.raileurope.cn/?visitor_country=CN">
         China
	[content8[linkx]content9]
        </option>
        <option value="https://www.raileurope.com.co/?visitor_country=CO">
         Colombia
        </option>
        <option value="https://www.raileurope.com.ec/?visitor_country=EC">
         Ecuador
        </option>
        <option value="https://en.oui.sncf/?visitor_country=EN">
         England
        </option>
        <option value="https://en.oui.sncf/?visitor_country=XZ">
         Europe
        </option>
        <option value="https://www.oui.sncf/?visitor_country=FR">
         France
        </option>
        <option value="https://de.oui.sncf/?visitor_country=DE">
         Germany
        </option>
        <option selected="selected" value="https://www.raileurope.hk/?var_lang=en&amp;visitor_country=HK">
         Hong Kong
        </option>
        <option value="https://www.raileurope.co.in/?visitor_country=IN">
         India
        </option>
        <option value="https://www.raileurope-asean.com/?visitor_country=ID">
         Indonesia
        </option>
        <option value="https://www.raileurope-gcc.com/?visitor_country=IR">
         Iran
        </option>
        <option value="https://www.raileurope-gcc.com/?visitor_country=IQ">
         Iraq
        </option>
        <option value="https://en.oui.sncf/?visitor_country=IE">
         Ireland
        </option>
        <option value="https://www.raileurope.co.il/?visitor_country=IL">
         Israel
        </option>
        <option value="https://it.oui.sncf/?visitor_country=IT">
         Italy
        </option>
        <option value="https://www.raileurope-japan.com/?visitor_country=JP">
         Japan
        </option>
        <option value="https://www.raileurope.co.kr/?visitor_country=KR">
         Korea
        </option>
        <option value="https://www.raileurope-gcc.com/?visitor_country=KW">
         Kuwait
        </option>
        <option value="https://www.raileurope-asean.com/?visitor_country=LA">
         Laos
        </option>
        <option value="https://www.raileurope.co.za/?visitor_country=LS">
         Lesotho
        </option>
        <option value="https://lu.oui.sncf/?visitor_country=LU">
         Luxembourg
        </option>
        <option value="https://www.raileurope.co.za/?visitor_country=MW">
         Malawi
        </option>
        <option value="https://www.raileurope-asean.com/?visitor_country=MY">
         Malaysia
        </option>
        <option value="https://www.raileurope.com.mx/?var_lang=es_co&amp;visitor_country=MX">
         Mexico
        </option>
        <option value="https://www.raileurope-asean.com/?visitor_country=MM">
         Myanmar
        </option>
        <option value="https://www.raileurope.co.za/?visitor_country=NA">
         Namibia
        </option>
        <option value="https://nl.oui.sncf/?visitor_country=NL">
         Netherlands
        </option>
        <option value="https://www.raileurope.co.nz/?visitor_country=NZ">
         New Zealand
        </option>
        <option value="https://www.raileurope-gcc.com/?visitor_country=OM">
         Oman
        </option>
        <option value="https://www.raileurope-world.com/?var_lang=en&amp;visitor_country=ZZ">
         Other countries and regions
        </option>
        <option value="https://espanol.raileurope-world.com/?visitor_country=YZ">
         Otros países
        </option>
        <option value="https://www.raileurope.com.py/?visitor_country=PY">
         Paraguay
        </option>
        <option value="https://www.raileurope.com.pe/?visitor_country=PE">
         Peru
        </option>
        <option value="https://www.raileurope-asean.com/?visitor_country=PH">
         Philippines
        </option>
        <option value="https://www.raileurope-gcc.com/?visitor_country=QA">
         Qatar
        </option>
        <option value="https://www.raileurope.ru/?visitor_country=RU">
         Russian federation
        </option>
        <option value="https://www.raileurope-gcc.com/?visitor_country=SA">
         Saudi Arabia
        </option>
        <option value="https://www.raileurope.com.sg/?var_lang=en&amp;visitor_country=SG">
         Singapore
        </option>
        <option value="https://www.raileurope.co.za/?visitor_country=ZA">
         South Africa
        </option>
        <option value="https://es.oui.sncf/?visitor_country=ES">
         Spain
        </option>
        <option value="https://www.raileurope.co.za/?visitor_country=SZ">
         Swaziland
        </option>
        <option value="https://ch.oui.sncf/?visitor_country=CH">
         Switzerland
        </option>
        <option value="https://www.raileurope.com.tw/?var_lang=en&amp;visitor_country=TW">
         Taiwan
        </option>
        <option value="https://www.raileurope.co.th/?visitor_country=TH">
         Thailand
        </option>
        <option value="https://en.oui.sncf/?visitor_country=UK">
         United Kingdom
        </option>
        <option value="https://en.oui.sncf/?visitor_country=GB">
         United Kingdom
        </option>
        <option value="https://www.raileurope.com/?var_lang=eo&amp;visitor_country=US">
         United States
        </option>
        <option value="https://www.raileurope.com.uy/?visitor_country=UY">
         Uruguay
        </option>
        <option value="https://www.raileurope.com.ve/?visitor_country=VE">
         Venezuela
        </option>
        <option value="https://www.raileurope-asean.com/?visitor_country=VN">
         Viet Nam
        </option>
        <option value="https://www.raileurope-gcc.com/?visitor_country=YE">
         Yemen
        </option>
        <option value="https://www.raileurope.co.za/?visitor_country=ZM">
         Zambia
        </option>
        <option value="https://www.raileurope.co.za/?visitor_country=ZW">
         Zimbabwe
        </option>
       </select>
      </div>
      <div class="f-left">
       <div class="lang_form_cont">
        <div>
         <form data-ajax="false" id="menu_lang" method="get">
          <select class="customhiddenselect customselect" id="lang" name="lang" onchange='document.location.href="https://www.raileurope.hk/spip.php?article4306&amp;lang="+this.options[this.selectedIndex].value;'>
           <option class="maj-debut" selected="selected" value="en">
            English
           </option>
           <option class="maj-debut" value="zh_tw">
            中文[content6][content7][linkx][content8][linkx]
           </option>
          </select>
         </form>
        </div>
       </div>
      </div>
     </div>
     <div class="header_button menu_btn dropdown" id="header_form">
      <span>
       Booking
      </span>
     </div>
     <div class="form_button_content header_form_tabs" id="content">
      <ul class="clearfix container_tabs" rel="header_form_tabs">
       <li class="rtab active" id="tab01">
        [linkx]
        
       </li>
      </ul>
      <div id="header_form_tabs">
       <div class="rtab_content active" id="rtab_content_tab01">
        <div class="center ptp-gradient ptp-form-loading">
         <br>
          [content9][content10][content11][content12][linkx][content13][linkx]
         </br>
         <br/>
         <h3 class="white">
          [mkey1][symbolx][pkey1][symbolx][keyword1][bracketl1][bracketr1][symbolx][bracketl2][siter1][bracketr2][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx]
         </h3>
         <br/>
         <br/>
        </div>
       </div>
      </div>
     </div>
     <div class="formRailEurope f-right col24">
      <div class="header_button menu_btn dropdown" id="header_help">
       <span>
        Help
       </span>
      </div>
      <ul class="button_content button_list header_help">
       [content19[linkx]content20]
      </ul>
      <div class="header_button menu_btn dropdown" data-label="Login" id="header_login">
       <span>
        Login
       </span>
      </div>
      <ul class="button_content header_login">
      </ul>
      <div id="ure_logged">
      </div>
      <ul class="button_content header_cart">
       <li class="rcart-empty">
       </li>
      </ul>
     </div>
     <div class="m-auto col22 center header_logo">
      [linkx]
      
     </div>
    </div>
    <div class="clearfix" id="breadcrumb">
     <span id="search_form_holder">
      [content13[linkx]content14[linkx]content15]
     </span>
     [linkx]
     
     <span class="delimiter">
      >
     </span>
     [ahref]
     
     >
				Paris - Amsterdam
    </div>
   </div>
  </header>
  <b style="color:black;background-color:#a0ffff">
   jnice09-ipp30-wq-zq-0228
  </b>
 </body>
</html>
<div id="header_menu">
 <div class="close-menu">
  X
 </div>
 <div class="container_menu">
  <div class="clearfix head_menu center">
   <p class="h2 uppercase white">
    Hello!
   </p>
   <p>
    Your personal information, reservations, and itineraries are here.
   </p>
   <div id="header_menu_login">
    <p>
     <a class="blue-acid-btn btn col70 col-marg center m-auto white" href="/spip.php?page=sales&amp;re_domain=user&amp;re_oper=form&amp;re_landing=true">
      Log in
     </a>
    </p>
    <p>
     [ahref]
     
    </p>
   </div>
   <div class="hidden" id="header_menu_logged">
    <p>
     [ahref]
     
    </p>
    <p>
     <form action="/spip.php?page=sales">
      <div>
       <a class="js-logout-async white underline" href="/spip.php?page=sales&amp;re_domain=user&amp;re_oper=logout">
        <span>
         Log out
        </span>
       </a>
      </div>
     </form>
    </p>
   </div>
  </div>
  <ul>
   <li id="bton06">
    <span id="search_form_holder">
     <div class="champs_search">
      <form action="e" id="top_search" method="get" name="top_search">
       <fieldset class="search">
        <a class="pointer noborder inline-block button_submit_form" title="Search">
         <span class="sprite sprite-search dblock">
         </span>
        </a>
        <br/>
       </fieldset>
      </form>
     </div>
    </span>
   </li>
   <li id="bton01">
    [ahref]
    
    <div class="sub_menu hidden" id="sub_menu01">
    </div>
   </li>
   <li id="bton02">
    [linkx]
    
    <div class="sub_menu hidden" id="sub_menu02">
    </div>
   </li>
   <li id="bton03">
    [linkx]
    
    <div class="sub_menu hidden" id="sub_menu03">
    </div>
   </li>
   <li id="bton04">
    [ahref]
    
    <div class="sub_menu hidden" id="sub_menu04">
    </div>
   </li>
   <li id="bton05">
    [linkx]
    
    <div class="sub_menu hidden" id="sub_menu05">
    </div>
   </li>
   <li id="bton06">
    [linkx]
    
    <div class="sub_menu hidden" id="sub_menu06">
    </div>
   </li>
   <li>
    [ahref]
    
   </li>
   <li id="bton07">
    [ahref]
    
    <div class="sub_menu hidden" id="sub_menu07">
    </div>
   </li>
   <li>
    [ahref]
    
   </li>
  </ul>
 </div>
</div>
<div id="waiting-page">
 <div class="w_message">
  <br/>
  <div class="waiting_page_loader m-auto">
  </div>
 </div>
 <div id="w_photos_container">
 </div>
</div>
<div class="clearfix" data-role="page" id="content">
 <div itemscope="" itemtype="https://schema.org/Product" style="display:none;">
  <span itemprop="name">
   Paris - Amsterdam
  </span>
  <div itemprop="offers" itemscope="" itemtype="https://schema.org/Offer">
   <span content="HKD" itemprop="priceCurrency">
    HK$
   </span>
   <span content="HK$348" itemprop="price">
    HK$348
   </span>
   In stock
  </div>
 </div>
 <article>
  <div>
   <div class="ui-content">
    <div class="center">
     <h1 class="title a-color inline-block border-bottom">
      [mkey1][symbolx][pkey1][symbolx][keyword1][bracketl1][bracketr1][symbolx][bracketl2][siter1][bracketr2][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx]
     </h1>
     <br class="clearboth"/>
     Duration 
						03:17
						
						
						 -
     <span class="top_price">
      From
      <span class="noborder blue">
       <span class="small_currency">
        HK$
       </span>
       348
      </span>
     </span>
    </div>
    <br class="clearboth"/>
   </div>
   <div class="top-full-image cover" style="background-image:url(https://static.mytraintravel.com/local/cache-vignettes/L1679xH457/99.-banner-2-0f4ec.jpg?1556209925);padding: 1px 0 160px;margin-bottom: 60px;">
    <div class="ptp-gradient" id="searchTickets" style="margin-top:160px;">
     <div class="railengine obu-v1 ">
      <div class="railenginecontent" data-domain="ptp" data-oper="FORM">
       <div id="ure-form-errors">
       </div>
       <div class="js-ptpform ptpform horizontal">
        <form action="/spip.php?page=sales" class="js-ptpform ptpform-form " method="post">
         <div class="ptp__roundtrip">
          [link][keywordx][symbolx][keywordx][symbolx][bracketl11][keywordx][bracketr11][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][bracketl12][keywordx][bracketr12][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx]<li>[keywordx][symbolx][keywordx][symbolx][bracketl13][keywordx][bracketr13][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx]</li>
         </div>
         <div class="ptpsearch-outer">
          <div class="js-ptpsearch-inner ptpsearch-inner roundtrip">
           <div class="js-ptpsearch ptpsearch">
           </div>
           <div class="ptp-form-bottom-actions js-ptp-form-bottom-actions">
            <a class="add-destination js-ptpform-add-destination" data-limit="5" data-tracking="Clicks_Homepage_booking_AddDestination" href="#" style="display:none;">
             <span>
              Add a destination
             </span>
            </a>
            <div class="form-item form-type-checkbox js-ptpform-passreservation ptpform-passreservation">
             <label for="ptpform-passreservation">
              I have a rail pass
             </label>
             <div class="tooltip tooltip-icon js-passholder-tooltip" title="By checking the box, you are indicating that you have booked a rail pass for your journeys, and would like any applicable passholder fares to be presented to you for specific reservations. Some trains offer discounted fares to pass holders, the only way to see these fares is to check the “I have a rail pass” option.">
              <span class="tooltip-empty">
               ?
              </span>
             </div>
            </div>
            <div class="form-item js-ptpform-passselector ptpform-passselector" style="display:none;">
            </div>
            <div class="js-ptpform-passselector-dialog ptpform-passselector-dialog" data-default-label="Which Pass" style="display:none;">
             <div class="ui-widget">
              <select class="js-ptpform-passselector-combobox selectFieldImp required forcevalidate" id="ptp-form-pass-select" name="re_passfamily_1_name">
               <option value="">
                Select your Pass
               </option>
               <option data-countries-needed=" 0" value="Balkan Pass">
                Balkan Pass
               </option>
               <option data-countries-needed=" 0" value="BritRail - England Low Season Promo">
                BritRail - England Low Season Promo
               </option>
               <option data-countries-needed=" 0" value="BritRail - Spirit Of Scotland Low Season Promo">
                BritRail - Spirit Of Scotland Low Season Promo
               </option>
               <option data-countries-needed=" 0" value="BritRail - Central Scotland Pass">
                BritRail Central Scotland
               </option>
               <option data-countries-needed=" 0" value="BritRail Central Scotland Pass">
                BritRail Central Scotland Pass
               </option>
               <option data-countries-needed=" 0" value="BritRail England Low Season Promo">
                BritRail England Low Season Promo
               </option>
               <option data-countries-needed=" 0" value="BritRail Low Season Promo">
                BritRail Low Season Promo
               </option>
               <option data-countries-needed=" 0" value="BritRail - Pass">
                BritRail Pass
               </option>
               <option data-countries-needed=" 0" value="BritRail - Low Season Promo">
                BritRail Pass: 20% off
               </option>
               <option data-countries-needed=" 0" value="BritRail Freedom of Scotland Pass">
                BritRail Scottish Freedom Pass
               </option>
               <option data-countries-needed=" 0" value="BritRail - South West Low Season Promo">
                BritRail SouthWest Low Season Promo
               </option>
               <option data-countries-needed=" 0" value="BritRail Spirit of Scotland Pass">
                BritRail Spirit of Scotland Pass
               </option>
               <option data-countries-needed=" 0" value="Britrail England Pass">
                Britrail England Pass
               </option>
               <option data-countries-needed=" 0" value="BritRail - London Plus Pass">
                Britrail London Plus Pass
               </option>
               <option data-countries-needed=" 0" value="Britrail Pass">
                Britrail Pass
               </option>
               <option data-countries-needed=" 0" value="BritRail South West Pass">
                Britrail South West Pass
               </option>
               <option data-countries-needed=" 0" value="Eurail Bulgaria Pass Free Day Promotion">
                Bulgaria Pass
               </option>
               <option data-countries-needed=" 0" value="Central Europe Triangle Pass">
                Central Europe Triangle Pass
               </option>
               <option data-countries-needed=" 0" value="Eurail Croatia Pass Free Day Promotion">
                Croatia Pass
               </option>
               <option data-countries-needed=" 0" value="Eurail Czech Republic Pass Free Day Promotion">
                Czech Republic Pass
               </option>
               <option data-countries-needed=" 0" value="Eurail Austria Pass Free Day Promotion">
                Eurail Austria Pass
               </option>
               <option data-countries-needed=" 0" value="Eurail Benelux Pass Free Day Promotion">
                Eurail Benelux Pass
               </option>
               <option data-countries-needed=" 0" value="Eurail Bulgaria Pass">
                Eurail Bulgaria Pass
               </option>
               <option data-countries-needed=" 0" value="Eurail Croatia Pass">
                Eurail Croatia Pass
               </option>
               <option data-countries-needed=" 0" value="Eurail Czech Republic Pass">
                Eurail Czech Republic Pass
               </option>
               <option data-countries-needed=" 0" value="Eurail Denmark Pass">
                Eurail Denmark Pass
               </option>
               <option data-countries-needed=" 0" value="Eurail Finland Pass">
                Eurail Finland Pass
               </option>
               <option data-countries-needed=" 0" value="Eurail France Pass">
                Eurail France Pass
               </option>
               <option data-countries-needed=" 0" value="Eurail Global Pass">
                Eurail Global Pass
               </option>
               <option data-countries-needed=" 0" value="Eurail Greece Pass">
                Eurail Greece Pass
               </option>
               <option data-countries-needed=" 0" value="Eurail Hungary Pass">
                Eurail Hungary Pass
               </option>
               <option data-countries-needed=" 0" value="Eurail Ireland Pass">
                Eurail Ireland Pass
               </option>
               <option data-countries-needed=" 0" value="Eurail Italy Pass Promotion">
                Eurail Italy Pass
               </option>
               <option data-countries-needed=" 0" value="Eurail Norway Pass">
                Eurail Norway Pass
               </option>
               <option data-countries-needed=" 0" value="Eurail Poland Pass Off Peak">
                Eurail Poland Pass
               </option>
               <option data-countries-needed=" 0" value="Eurail Portugal Pass Free Day Promotion">
                Eurail Portugal Pass
               </option>
               <option data-countries-needed=" 0" value="Eurail Romania Pass">
                Eurail Romania Pass
               </option>
               <option data-countries-needed=" 0" value="Eurail Scandinavia Pass Free Day Promotion">
                Eurail Scandinavia Pass
               </option>
               <option data-countries-needed=" 3" value="Eurail Three Country Select Pass">
                Eurail Select Pass 3 countries
               </option>
               <option data-countries-needed=" 4" value="Eurail Four Country Select Pass">
                Eurail Select Pass 4 Countries
               </option>
               <option data-countries-needed=" 0" value="Eurail Slovakia Pass">
                Eurail Slovakia Pass
               </option>
               <option data-countries-needed=" 0" value="Eurail Slovenia Pass">
                Eurail Slovenia Pass
               </option>
               <option data-countries-needed=" 0" value="Eurail Spain Pass Off Peak">
                Eurail Spain Pass
               </option>
               <option data-countries-needed=" 0" value="Eurail Sweden Pass">
                Eurail Sweden Pass
               </option>
               <option data-countries-needed=" 2" value="Eurail Two Country Select Pass">
                Eurail Two-Country Select Pass
               </option>
               <option data-countries-needed=" 0" value="European East Pass">
                European East Pass
               </option>
               <option data-countries-needed=" 0" value="German Rail Pass">
                German Rail Pass
               </option>
               <option data-countries-needed=" 0" value="Eurail Greece Pass Free Day Promotion">
                Greece Pass
               </option>
               <option data-countries-needed=" 0" value="Eurail Hungary Pass Free Day Promotion">
                Hungary Pass
               </option>
               <option data-countries-needed=" 0" value="Eurail Ireland Pass Free Day Promotion">
                Ireland Pass
               </option>
               <option data-countries-needed=" 0" value="Eurail Norway Pass Free Day Promotion">
                Norway Pass
               </option>
               <option data-countries-needed=" 0" value="Eurail Poland Pass Free Day Promotion">
                Poland Pass
               </option>
               <option data-countries-needed=" 0" value="Eurail Romania Pass Free Day Promotion">
                Romania Pass
               </option>
               <option data-countries-needed=" 0" value="Eurail Slovakia Pass Free Day Promotion">
                Slovakia Pass
               </option>
               <option data-countries-needed=" 0" value="Eurail Slovenia Pass Free Day Promotion">
                Slovenia Pass
               </option>
               <option data-countries-needed=" 0" value="Swiss Travel Pass Print at Home">
                Swiss Travel Pass
               </option>
              </select>
             </div>
             <span>
              Class of service (of your rail pass)
             </span>
             <div class="form-item form-type-radio">
             </div>
             <div class="form-item form-type-radio">
             </div>
             <div class="eurailType_2 eurailTypes" data-countries-total="2" style="display:none;">
              <div class="form-item form-type-select">
               <label for="passholder_country_select_0_2">
                <span>
                 Select your first country
                </span>
               </label>
               <select class="form-select js-ptpform-eurailcountryselector-combobox required forcevalidate" data-country-idx="0" data-errormsg="WRONG" disabled="disabled" id="passholder_country_select_0_2" name="re_passfamily_0_country">
                <option disabled="" selected="" value="">
                 Select your first country
                </option>
                <option value="DE">
                 Germany
                </option>
                <option value="PT">
                 Portugal
                </option>
                <option value="CH">
                 Switzerland
                </option>
                <option value="BG">
                 Bulgaria
                </option>
                <option value="SIHR">
                 Croatia/Slovenia
                </option>
                <option value="DK">
                 Denmark
                </option>
                <option value="IT">
                 Italy
                </option>
                <option value="GR">
                 Greece
                </option>
                <option value="FR">
                 France
                </option>
                <option value="HU">
                 Hungary
                </option>
                <option value="ES">
                 Spain
                </option>
                <option value="SE">
                 Sweden
                </option>
                <option value="AT">
                 Austria
                </option>
                <option value="BX">
                 Benelux
                </option>
                <option value="CZ">
                 Czech Republic
                </option>
                <option value="SK">
                 Slovakia
                </option>
                <option value="PL">
                 Poland
                </option>
                <option value="MERS">
                 Montenegro/Serbia
                </option>
                <option value="RO">
                 Romania
                </option>
                <option value="TR">
                 Turkey
                </option>
               </select>
              </div>
              <div class="form-item form-type-select">
               <label for="passholder_country_select_1_2">
                <span>
                 Select your second country
                </span>
               </label>
               <select class="form-select js-ptpform-eurailcountryselector-combobox required forcevalidate" data-country-idx="1" data-errormsg="WRONG" disabled="disabled" id="passholder_country_select_1_2" name="re_passfamily_1_country">
                <option disabled="" selected="" value="">
                 Select your second country
                </option>
                <option value="DE">
                 Germany
                </option>
                <option value="PT">
                 Portugal
                </option>
                <option value="CH">
                 Switzerland
                </option>
                <option value="BG">
                 Bulgaria
                </option>
                <option value="SIHR">
                 Croatia/Slovenia
                </option>
                <option value="DK">
                 Denmark
                </option>
                <option value="IT">
                 Italy
                </option>
                <option value="GR">
                 Greece
                </option>
                <option value="FR">
                 France
                </option>
                <option value="HU">
                 Hungary
                </option>
                <option value="ES">
                 Spain
                </option>
                <option value="SE">
                 Sweden
                </option>
                <option value="AT">
                 Austria
                </option>
                <option value="BX">
                 Benelux
                </option>
                <option value="CZ">
                 Czech Republic
                </option>
                <option value="SK">
                 Slovakia
                </option>
                <option value="PL">
                 Poland
                </option>
                <option value="MERS">
                 Montenegro/Serbia
                </option>
                <option value="RO">
                 Romania
                </option>
                <option value="TR">
                 Turkey
                </option>
               </select>
              </div>
             </div>
             <div class="eurailType_3 eurailTypes" data-countries-total="3" style="display:none;">
              <div class="form-item form-type-select">
               <label for="passholder_country_select_0_3">
                <span>
                 Select your first country
                </span>
               </label>
               <select class="form-select js-ptpform-eurailcountryselector-combobox required forcevalidate" data-country-idx="0" data-errormsg="WRONG" disabled="disabled" id="passholder_country_select_0_3" name="re_passfamily_0_country">
                <option disabled="" selected="" value="">
                 Select your first country
                </option>
                <option value="DE">
                 Germany
                </option>
                <option value="NO">
                 Norway
                </option>
                <option value="FI">
                 Finland
                </option>
                <option value="PT">
                 Portugal
                </option>
                <option value="CH">
                 Switzerland
                </option>
                <option value="BG">
                 Bulgaria
                </option>
                <option value="SIHR">
                 Croatia/Slovenia
                </option>
                <option value="DK">
                 Denmark
                </option>
                <option value="IT">
                 Italy
                </option>
                <option value="GR">
                 Greece
                </option>
                <option value="FR">
                 France
                </option>
                <option value="HU">
                 Hungary
                </option>
                <option value="ES">
                 Spain
                </option>
                <option value="SE">
                 Sweden
                </option>
                <option value="AT">
                 Austria
                </option>
                <option value="BX">
                 Benelux
                </option>
                <option value="CZ">
                 Czech Republic
                </option>
                <option value="SK">
                 Slovakia
                </option>
                <option value="IE">
                 Ireland
                </option>
                <option value="MERS">
                 Montenegro/Serbia
                </option>
                <option value="RO">
                 Romania
                </option>
                <option value="TR">
                 Turkey
                </option>
               </select>
              </div>
              <div class="form-item form-type-select">
               <label for="passholder_country_select_1_3">
                <span>
                 Select your second country
                </span>
               </label>
               <select class="form-select js-ptpform-eurailcountryselector-combobox required forcevalidate" data-country-idx="1" data-errormsg="WRONG" disabled="disabled" id="passholder_country_select_1_3" name="re_passfamily_1_country">
                <option disabled="" selected="" value="">
                 Select your second country
                </option>
                <option value="DE">
                 Germany
                </option>
                <option value="NO">
                 Norway
                </option>
                <option value="FI">
                 Finland
                </option>
                <option value="PT">
                 Portugal
                </option>
                <option value="CH">
                 Switzerland
                </option>
                <option value="BG">
                 Bulgaria
                </option>
                <option value="SIHR">
                 Croatia/Slovenia
                </option>
                <option value="DK">
                 Denmark
                </option>
                <option value="IT">
                 Italy
                </option>
                <option value="GR">
                 Greece
                </option>
                <option value="FR">
                 France
                </option>
                <option value="HU">
                 Hungary
                </option>
                <option value="ES">
                 Spain
                </option>
                <option value="SE">
                 Sweden
                </option>
                <option value="AT">
                 Austria
                </option>
                <option value="BX">
                 Benelux
                </option>
                <option value="CZ">
                 Czech Republic
                </option>
                <option value="SK">
                 Slovakia
                </option>
                <option value="IE">
                 Ireland
                </option>
                <option value="MERS">
                 Montenegro/Serbia
                </option>
                <option value="RO">
                 Romania
                </option>
                <option value="TR">
                 Turkey
                </option>
               </select>
              </div>
              <div class="form-item form-type-select">
               <label for="passholder_country_select_2_3">
                <span>
                 Select your third country
                </span>
               </label>
               <select class="form-select js-ptpform-eurailcountryselector-combobox required forcevalidate" data-country-idx="2" data-errormsg="WRONG" disabled="disabled" id="passholder_country_select_2_3" name="re_passfamily_2_country">
                <option disabled="" selected="" value="">
                 Select your third country
                </option>
                <option value="DE">
                 Germany
                </option>
                <option value="NO">
                 Norway
                </option>
                <option value="FI">
                 Finland
                </option>
                <option value="PT">
                 Portugal
                </option>
                <option value="CH">
                 Switzerland
                </option>
                <option value="BG">
                 Bulgaria
                </option>
                <option value="SIHR">
                 Croatia/Slovenia
                </option>
                <option value="DK">
                 Denmark
                </option>
                <option value="IT">
                 Italy
                </option>
                <option value="GR">
                 Greece
                </option>
                <option value="FR">
                 France
                </option>
                <option value="HU">
                 Hungary
                </option>
                <option value="ES">
                 Spain
                </option>
                <option value="SE">
                 Sweden
                </option>
                <option value="AT">
                 Austria
                </option>
                <option value="BX">
                 Benelux
                </option>
                <option value="CZ">
                 Czech Republic
                </option>
                <option value="SK">
                 Slovakia
                </option>
                <option value="IE">
                 Ireland
                </option>
                <option value="MERS">
                 Montenegro/Serbia
                </option>
                <option value="RO">
                 Romania
                </option>
                <option value="TR">
                 Turkey
                </option>
               </select>
              </div>
             </div>
             <div class="eurailType_4 eurailTypes" data-countries-total="4" style="display:none;">
              <div class="form-item form-type-select">
               <label for="passholder_country_select_0_4">
                <span>
                 Select your first country
                </span>
               </label>
               <select class="form-select js-ptpform-eurailcountryselector-combobox required forcevalidate" data-country-idx="0" data-errormsg="WRONG" disabled="disabled" id="passholder_country_select_0_4" name="re_passfamily_0_country">
                <option disabled="" selected="" value="">
                 Select your first country
                </option>
                <option value="DE">
                 Germany
                </option>
                <option value="NO">
                 Norway
                </option>
                <option value="FI">
                 Finland
                </option>
                <option value="PT">
                 Portugal
                </option>
                <option value="BG">
                 Bulgaria
                </option>
                <option value="CH">
                 Switzerland
                </option>
                <option value="SIHR">
                 Croatia/Slovenia
                </option>
                <option value="DK">
                 Denmark
                </option>
                <option value="GR">
                 Greece
                </option>
                <option value="IT">
                 Italy
                </option>
                <option value="FR">
                 France
                </option>
                <option value="HU">
                 Hungary
                </option>
                <option value="ES">
                 Spain
                </option>
                <option value="SE">
                 Sweden
                </option>
                <option value="AT">
                 Austria
                </option>
                <option value="BX">
                 Benelux
                </option>
                <option value="CZ">
                 Czech Republic
                </option>
                <option value="SK">
                 Slovakia
                </option>
                <option value="IE">
                 Ireland
                </option>
                <option value="MERS">
                 Montenegro/Serbia
                </option>
                <option value="RO">
                 Romania
                </option>
                <option value="TR">
                 Turkey
                </option>
               </select>
              </div>
              <div class="form-item form-type-select">
               <label for="passholder_country_select_1_4">
                <span>
                 Select your second country
                </span>
               </label>
               <select class="form-select js-ptpform-eurailcountryselector-combobox required forcevalidate" data-country-idx="1" data-errormsg="WRONG" disabled="disabled" id="passholder_country_select_1_4" name="re_passfamily_1_country">
                <option disabled="" selected="" value="">
                 Select your second country
                </option>
                <option value="DE">
                 Germany
                </option>
                <option value="NO">
                 Norway
                </option>
                <option value="FI">
                 Finland
                </option>
                <option value="PT">
                 Portugal
                </option>
                <option value="BG">
                 Bulgaria
                </option>
                <option value="CH">
                 Switzerland
                </option>
                <option value="SIHR">
                 Croatia/Slovenia
                </option>
                <option value="DK">
                 Denmark
                </option>
                <option value="GR">
                 Greece
                </option>
                <option value="IT">
                 Italy
                </option>
                <option value="FR">
                 France
                </option>
                <option value="HU">
                 Hungary
                </option>
                <option value="ES">
                 Spain
                </option>
                <option value="SE">
                 Sweden
                </option>
                <option value="AT">
                 Austria
                </option>
                <option value="BX">
                 Benelux
                </option>
                <option value="CZ">
                 Czech Republic
                </option>
                <option value="SK">
                 Slovakia
                </option>
                <option value="IE">
                 Ireland
                </option>
                <option value="MERS">
                 Montenegro/Serbia
                </option>
                <option value="RO">
                 Romania
                </option>
                <option value="TR">
                 Turkey
                </option>
               </select>
              </div>
              <div class="form-item form-type-select">
               <label for="passholder_country_select_2_4">
                <span>
                 Select your third country
                </span>
               </label>
               <select class="form-select js-ptpform-eurailcountryselector-combobox required forcevalidate" data-country-idx="2" data-errormsg="WRONG" disabled="disabled" id="passholder_country_select_2_4" name="re_passfamily_2_country">
                <option disabled="" selected="" value="">
                 Select your third country
                </option>
                <option value="DE">
                 Germany
                </option>
                <option value="NO">
                 Norway
                </option>
                <option value="FI">
                 Finland
                </option>
                <option value="PT">
                 Portugal
                </option>
                <option value="BG">
                 Bulgaria<li>[keywordx][symbolx][keywordx][symbolx][bracketl8][keywordx][bracketr8][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx]</li>[keywordx][symbolx][keywordx][symbolx][bracketl9][keywordx][bracketr9][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx]<li>[link]</li><li>[keywordx][symbolx][keywordx][symbolx][bracketl10][keywordx][bracketr10][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx]</li><li>[link]</li>
                </option>
                <option value="CH">
                 Switzerland
                </option>
                <option value="SIHR">
                 Croatia/Slovenia
                </option>
                <option value="DK">
                 Denmark
                </option>
                <option value="GR">
                 Greece
                </option>
                <option value="IT">
                 Italy
                </option>
                <option value="FR">
                 France
                </option>
                <option value="HU">
                 Hungary
                </option>
                <option value="ES">
                 Spain
                </option>
                <option value="SE">
                 Sweden
                </option>
                <option value="AT">
                 Austria
                </option>
                <option value="BX">
                 Benelux
                </option>
                <option value="CZ">
                 Czech Republic
                </option>
                <option value="SK">
                 Slovakia
                </option>
                <option value="IE">
                 Ireland
                </option>
                <option value="MERS">
                 Montenegro/Serbia
                </option>
                <option value="RO">
                 Romania
                </option>
                <option value="TR">
                 Turkey
                </option>
               </select>
              </div>
              <div class="form-item form-type-select">
               <label for="passholder_country_select_3_4">
                <span>
                 Select your fourth country
                </span>
               </label>
               <select class="form-select js-ptpform-eurailcountryselector-combobox required forcevalidate" data-country-idx="3" data-errormsg="WRONG" disabled="disabled" id="passholder_country_select_3_4" name="re_passfamily_3_country">
                <option disabled="" selected="" value="">
                 Select your fourth country
                </option>
                <option value="DE">
                 Germany
                </option>
                <option value="NO">
                 Norway
                </option>
                <option value="FI">
                 Finland
                </option>
                <option value="PT">
                 Portugal
                </option>
                <option value="BG">
                 Bulgaria
                </option>
                <option value="CH">
                 Switzerland
                </option>
                <option value="SIHR">
                 Croatia/Slovenia
                </option>
                <option value="DK">
                 Denmark
                </option>
                <option value="GR">
                 Greece
                </option>
                <option value="IT">
                 Italy
                </option>
                <option value="FR">
                 France
                </option>
                <option value="HU">
                 Hungary
                </option>
                <option value="ES">
                 Spain
                </option>
                <option value="SE">
                 Sweden
                </option>
                <option value="AT">
                 Austria
                </option>
                <option value="BX">
                 Benelux
                </option>
                <option value="CZ">
                 Czech Republic
                </option>
                <option value="SK">
                 Slovakia
                </option>
                <option value="IE">
                 Ireland
                </option>
                <option value="MERS">
                 Montenegro/Serbia
                </option>
                <option value="RO">
                 Romania
                </option>
                <option value="TR">
                 Turkey
                </option>
               </select>
              </div>
             </div>
             <div class="form-action">
              <span class="js-ptpform-passselector-close popup-submit">
               ok
              </span>
             </div>
            </div>
           </div>
           <div class="message info-message js-search-limit" style="display:none;">
            Searches are limited to 5 trips. For additional trips, search again.
           </div>
           <div class="form-actions">
            <button class="js-ptpform-submit form-submit btn-cta" type="button">
             <span>
              SEARCH
             </span>
            </button>
           </div>
           <ul style="display:none;">
            <li class="js-recentsearchitem">
             [ahref]
             
            </li>
           </ul>
           <div class="js-ptpsearch-clone" style="display:none;">
           </div>
          </div>
         </div>
        </form>
       </div>
      </div>
     </div>
    </div>
   </div>
   <div class="ui-content">
    <div class="float_ul boxpurple clearfix clearboth nomargin">
     <nav>
      <div id="top_product_menu">
       <ul>
        <li>
         <a class="purple col20 " href="p" id="menu_about_trip">
          About this journey
         </a>
        </li>
        <li>
         [linkx]
         
        </li>
        <li>
         <a class="purple col20 " href="s" id="menu_practical_informations">
          Practical information
         </a>
        </li>
        <li class="no_pipe">
         [linkx]
         
        </li>
        <li class="no_pipe">
         [ahref]
         
        </li>
        <li class="no_pipe back_to_top invisible">
         <div class="hidden sprite sprite-go-top">
         </div>
        </li>
       </ul>
      </div>
     </nav>
    </div>
    <div class="main-block" id="overview">
     <section class="box-min" id="intro">
      <div>
       <span class="h2 inter">
        About this journey
       </span>
       The average travel time between Paris and Amsterdam is  4h09 minutes. The quickest route is  3h17 minutes. The first train leaving Paris is at 06:01, the last at 19:25. There is an average of 27 trains a day between Paris and Amsterdam, leaving approximately every 28 minutes.
       <ul class="bullet">
        <li>
         Departure station : Paris nord (112, rue de Maubeuge  75010 Paris)
        </li>
        <li>
         Arrival station : Amsterdam cs (Stationsplein 15  1012 AB Amsterdam)
        </li>
       </ul>
      </div>
     </section>
     <section class="inter_title box-min" id="about_trip">
      <div>
       <span class="h2 inter">
        About this journey
       </span>
       <p>
        <strong>
         Your travel by train from Paris to Amsterdam
        </strong>
       </p>
       <p>
        The high speed red Thalys trains take travellers between France, the Netherlands, Belgium and Germany and the journey between
        [linkx]
        
        and
        <a class="spip_in" href="/amsterdam-264">
         Amsterdam
        </a>
        takes about 3 hours. There are two levels of service on-board. Comfort 1 passengers enjoy an in-seat meal and Comfort 2 passengers can take refreshments in the buffet bar. Both of them benefit from a free Wifi access, with a Flexi fare in 2nd Class.
       </p>
       <p>
        Paris Gare du Nord is in the centre of the city with easy access on public transport. Passengers aboard the Thalys in Paris and enjoy the ride to the city of canals. Arriving in Amsterdam, travellers will find the station on the banks of the River IJ and the city centre a short walk away. Most central hotels can be reached by foot but there are ferries, trams, buses, bikes and taxis outside the station. A regular airport service leaves from this station too.
       </p>
       <p>
        Between Paris and Amsterdam a point to point ticket is the best option but for travellers who want to explore further afield throughout The Netherlands and beyond, there are several other options. For example, a Eurail Benelux-France pass will give unlimited train travel in France, Belgium, The Netherlands and Luxembourg.
       </p>
       <p>
        <strong>
         Visit Amsterdam and discover other popular train journeys
        </strong>
       </p>
       <p>
        Amsterdam has something for every visitor. For culture vultures there is the museum of Van Gogh, or the Rijksmuseum. For those who love history, there is Anne Frank’s house, or boat tours along the canals. For those who like to shop there are plenty of interesting streets to explore and for those who want to relax before going out there’s the cafes and restaurants buzzing with friendly chatter.
       </p>
       <p>
        From Amsterdam, the rest of Europe is easily accessible by train. Take the Thalys to Germany or Brussels or explore the rest of The Netherlands’ pretty countryside, hiring bikes to explore small villages.
       </p>
      </div>
     </section>
     <section class="inter_title" id="timetables">
      <h2 class="inter">
       <b>[mkey1][symbolx][pkey1][symbolx][keyword1][bracketl1][bracketr1][symbolx][bracketl2][siter1][bracketr2][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx]</b>
      </h2>
     </section>
     <br class="clearboth"/>
     <section class="boxgrey" id="practical_informations">
      <h3 class="inter">
       [mkey1][symbolx][pkey1][symbolx][keyword1][bracketl1][bracketr1][symbolx][bracketl2][siter1][bracketr2][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx]
      </h3>
      <div class="related_objects_four">
       <ul class="container_tabs themes_full dtable" rel="popular">
        <li class="rtab purple active " id="tab11">
         [ahref]
         
        </li>
        <li class="rtab purple " id="tab12">
         <a class="block-tabs" href="2">
          Train Stations
         </a>
        </li>
       </ul>
       <br class="clearboth"/>
       <div class=" themes_container themes_container_full edito_slider" id="popular">
        <div class="rtab_content active lazy" id="rtab_content_tab11">
         <div class="ajaxbloc" data-ajax-env="c8d5ebe8f8070ae57b793cc66a44ab94" data-origin="/train-tickets/journeys/article/paris-amsterdam?lang=en">
          [ahref]
          
          <div class="main_container_box edito_slider">
           <div class="clearfix clearboth full_container theme_container" id="_related_objbest_passes">
            <ul>
             <li>
              [linkx]
              
             </li>
            </ul>
           </div>
          </div>
         </div>
        </div>
        <div class="rtab_content lazy" id="rtab_content_tab12">
         <div class="ajaxbloc" data-ajax-env="4dce15987186fec24fd0c3878423babf" data-origin="/train-tickets/journeys/article/paris-amsterdam?lang=en">
          <a id="pagination_for_related" name="pagination_for_related">
          </a>
          <div class="main_container_box edito_slider">
           <div class="clearfix clearboth full_container theme_container" id="_related_objbest_passes">
            <ul>
             <li>
              [linkx]
              
             </li>
             <li>
              [ahref]
              
             </li>
            </ul>
           </div>
          </div>
         </div>
        </div>
       </div>
      </div>
     </section>
     <section class="inter_title box-min" id="reviews">
      <h2 class="inter">
       <b>[mkey1][symbolx][pkey1][symbolx][keyword1][bracketl1][bracketr1][symbolx][bracketl2][siter1][bracketr2][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx]</b>
      </h2>
      <div class="ajaxbloc" data-ajax-env="a53fb4fdb1f6734c78af0646940caa7a" data-origin="/train-tickets/journeys/article/paris-amsterdam?lang=en">
       <h3 class="inter">
        [mkey1][symbolx][pkey1][symbolx][keyword1][bracketl1][bracketr1][symbolx][bracketl2][siter1][bracketr2][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx]
       </h3>
       <ul id="notation_main">
        <li class="col-pad">
         <div itemprop="review" itemscope="" itemtype="http://schema.org/Review">
          <div class="col30 f-right">
          </div>
          <div class="f-left ">
           <div class="f-left">
           </div>
           <span class="subtitle nomargin">
            Experiencia excelente
           </span>
           |
           <span class="bold itinerary_travel " itemprop="author" itemscope="" itemtype="http://schema.org/Person">
            <span itemprop="name">
             .
            </span>
            |
           </span>
           <span content="2019-04-02" itemprop="datePublished">
            2 April 2019
           </span>
           <br/>
           <span class="expandable-text review-text-content-24120742" id="expandable-more-24120742" itemprop="reviewBody" rel="100">
            "Tanto el servicio a bordo como las comodidades son muy buenas. La posibilidad de arribar practicamente en el centro de la ciudad representa un ahorro de dinero y tiempo frente a otras alternativas
			"
           </span>
           <div class="expandable-more-24120742 review-text hidden pointer text-right">
            <span class="text-more m-auto blue underline" rel="expandable-more-24120742">
             View more
            </span>
            <span class="hidden text-less m-auto blue underline" rel="expandable-more-24120742">
             View less
            </span>
           </div>
          </div>
          <br class="clearboth"/>
         </div>
        </li>
        <li class="col-pad">
         <div itemprop="review" itemscope="" itemtype="http://schema.org/Review">
          <div class="col30 f-right">
          </div>
          <div class="f-left ">
           <div class="f-left">
           </div>
           <span class="subtitle nomargin">
            Thalys
           </span>
           |
           <span class="bold itinerary_travel " itemprop="author" itemscope="" itemtype="http://schema.org/Person">
            <span itemprop="name">
             .
            </span>
            |
           </span>
           <span content="2019-04-02" itemprop="datePublished">
            2 April 2019
           </span>
           <br/>
           <span class="expandable-text review-text-content-23846793" id="expandable-more-23846793" itemprop="reviewBody" rel="100">
            "Paris to Amsterdam. Highly recommended. Paris Nord Station is dead easy to get to and efficient. No carting yourself out to CDG airport a lifetime early. Train finishes in the old part of Amsterdam. Again easy to get to. Took 1st class worth the effort. Still way cheaper than air, more convenient and we figured probably took 30 minutes more than air (assuming no flight delay or circling). Free brekky and wi-fi on the train. Very happy customers.
			"
           </span>
           <div class="expandable-more-23846793 review-text hidden pointer text-right">
            <span class="text-more m-auto blue underline" rel="expandable-more-23846793">
             View more
            </span>
            <span class="hidden text-less m-auto blue underline" rel="expandable-more-23846793">
             View less
            </span>
           </div>
          </div>
          <br class="clearboth"/>
         </div>
        </li>
        <li class="col-pad">
         <div itemprop="review" itemscope="" itemtype="http://schema.org/Review">
          <div class="col30 f-right">
          </div>
          <div class="f-left ">
           <div class="f-left">
           </div>
           <span class="subtitle nomargin">
            Amsterdam to Paris
           </span>
           |
           <span class="bold itinerary_travel " itemprop="author" itemscope="" itemtype="http://schema.org/Person">
            <span itemprop="name">
             .
            </span>
            |
           </span>
           <span content="2019-04-02" itemprop="datePublished">
            2 April 2019
           </span>
           <br/>
           <span class="expandable-text review-text-content-23931953" id="expandable-more-23931953" itemprop="reviewBody" rel="100">
            "Apart being sent to the wrong platform at Amsterdam the train was comfortable ,on time and had very good service[i.e. meal/drinks.
			"
           </span>
           <div class="expandable-more-23931953 review-text hidden pointer text-right">
            <span class="text-more m-auto blue underline" rel="expandable-more-23931953">
             View more
            </span>
            <span class="hidden text-less m-auto blue underline" rel="expandable-more-23931953">
             View less
            </span>
           </div>
          </div>
          <br class="clearboth"/>
         </div>
        </li>
        <li class="col-pad">
         <div itemprop="review" itemscope="" itemtype="http://schema.org/Review">
          <div class="col30 f-right">
          </div>
          <div class="f-left ">
           <div class="f-left">
           </div>
           <span class="subtitle nomargin">
            A Relaxing Trip
           </span>
           |
           <span class="bold itinerary_travel " itemprop="author" itemscope="" itemtype="http://schema.org/Person">
            <span itemprop="name">
             .
            </span>
            |
           </span>
           <span content="2019-04-02" itemprop="datePublished">
            2 April 2019
           </span>
           <br/>
           <span class="expandable-text review-text-content-24129371" id="expandable-more-24129371" itemprop="reviewBody" rel="100">
            "A very pleasant experience. We were able to enjoy the scenery in comfort with good ,efficient service.
			"
           </span>
           <div class="expandable-more-24129371 review-text hidden pointer text-right">
            <span class="text-more m-auto blue underline" rel="expandable-more-24129371">
             View more
            </span>
            <span class="hidden text-less m-auto blue underline" rel="expandable-more-24129371">
             View less
            </span>
           </div>
          </div>
          <br class="clearboth"/>
         </div>
        </li>
        <li class="col-pad">
         <div itemprop="review" itemscope="" itemtype="http://schema.org/Review">
          <div class="col30 f-right">
          </div>
          <div class="f-left ">
           <div class="f-left">
           </div>
           <span class="subtitle nomargin">
            Train from Paris to Amsterdam
           </span>
           |
           <span class="bold itinerary_travel " itemprop="author" itemscope="" itemtype="http://schema.org/Person">
            <span itemprop="name">
             Ruiliang l.
            </span>
            |
           </span>
           <span content="2019-04-02" itemprop="datePublished">
            2 April 2019
           </span>
           <br/>
           <span class="expandable-text review-text-content-24125271" id="expandable-more-24125271" itemprop="reviewBody" rel="100">
            "Overall is a good trip for about 4hrs from Paris to Amsterdam. But travelling in Amsterdam one must plan properly. If your hotel is near the airport or the hotel provide free shuttle service from airport, please buy the ticket to airport instead of Amsterdam Central. Don't need to waste money like us.
			"
           </span>
           <div class="expandable-more-24125271 review-text hidden pointer text-right">
            <span class="text-more m-auto blue underline" rel="expandable-more-24125271">
             View more
            </span>
            <span class="hidden text-less m-auto blue underline" rel="expandable-more-24125271">
             View less
            </span>
           </div>
          </div>
          <br class="clearboth"/>
         </div>
        </li>
        <li class="col-pad">
         <div itemprop="review" itemscope="" itemtype="http://schema.org/Review">
          <div class="col30 f-right">
          </div>
          <div class="f-left ">
           <div class="f-left">
           </div>
           <span class="subtitle nomargin">
            Amsterdam Bound - First Trip
           </span>
           |
           <span class="bold itinerary_travel " itemprop="author" itemscope="" itemtype="http://schema.org/Person">
            <span itemprop="name">
             .
            </span>
            |
           </span>
           <span content="2019-04-02" itemprop="datePublished">
            2 April 2019
           </span>
           <br/>
           <span class="expandable-text review-text-content-24210325" id="expandable-more-24210325" itemprop="reviewBody" rel="100">
            "Traveling by train can be fun, especially if the trip is not too long and there are only a few stops. This trip, from Paris to Amsterdam was just that - 3 stops and 3.5 hours. The train, including the bathrooms, was clean and comfortable. There was amble space for all our luggage and the coffee was actually pretty good. The only issue we had was finding the train. We arrived from the south Paris by Metro and began our journey through the Train maze, trying to find help or assistance. We stopped at many kiosks and asked to be pointed in the right direction; we stopped many people and asked for help. We arrived just as the train was boarding and were thrilled that we had allowed at least a 1/2 an hour at the station in case of problems. It was needed.
			"
           </span>
           <div class="expandable-more-24210325 review-text hidden pointer text-right">
            <span class="text-more m-auto blue underline" rel="expandable-more-24210325">
             View more
            </span>
            <span class="hidden text-less m-auto blue underline" rel="expandable-more-24210325">
             View less
            </span>
           </div>
          </div>
          <br class="clearboth"/>
         </div>
        </li>
        <li class="col-pad">
         <div itemprop="review" itemscope="" itemtype="http://schema.org/Review">
          <div class="col30 f-right">
          </div>
          <div class="f-left ">
           <div class="f-left">
           </div>
           <span class="subtitle nomargin">
            A unique experience
           </span>
           |
           <span class="bold itinerary_travel " itemprop="author" itemscope="" itemtype="http://schema.org/Person">
            <span itemprop="name">
             .
            </span>
            |
           </span>
           <span content="2019-04-02" itemprop="datePublished">
            2 April 2019
           </span>
           <br/>
           <span class="expandable-text review-text-content-24128134" id="expandable-more-24128134" itemprop="reviewBody" rel="100">
            "You are going really fast but you do not feel a thing. the cabins are classy and seats are comfortable. would definitely use the service again. Just one suggestion . Put a reminder out for those using a Eurail Pass to get their Passes activated before boarding the train.. I dunno if they do it on purpose but they very conveniently charge 12.5 Euros if you activate it on board be more customer friendly. People at times make a genuine mistake. I was a little pissed while travelling but I let it pass.
			"
           </span>
           <div class="expandable-more-24128134 review-text hidden pointer text-right">
            <span class="text-more m-auto blue underline" rel="expandable-more-24128134">
             View more
            </span>
            <span class="hidden text-less m-auto blue underline" rel="expandable-more-24128134">
             View less
            </span>
           </div>
          </div>
          <br class="clearboth"/>
         </div>
        </li>
        <li class="col-pad">
         <div itemprop="review" itemscope="" itemtype="http://schema.org/Review">
          <div class="col30 f-right">
          </div>
          <div class="f-left ">
           <div class="f-left">
           </div>
           <span class="subtitle nomargin">
            Holiday
           </span>
           |
           <span class="bold itinerary_travel " itemprop="author" itemscope="" itemtype="http://schema.org/Person">
            <span itemprop="name">
             .
            </span>
            |
           </span>
           <span content="2019-04-02" itemprop="datePublished">
            2 April 2019
           </span>
           <br/>
           <span class="expandable-text review-text-content-24256768" id="expandable-more-24256768" itemprop="reviewBody" rel="100">
            "I enjoyed this hassle free travel. which include, ease of booking, tickets convenience
			"
           </span>
           <div class="expandable-more-24256768 review-text hidden pointer text-right">
            <span class="text-more m-auto blue underline" rel="expandable-more-24256768">
             View more
            </span>
            <span class="hidden text-less m-auto blue underline" rel="expandable-more-24256768">
             View less
            </span>
           </div>
          </div>
          <br class="clearboth"/>
         </div>
        </li>
        <li class="col-pad">
         <div itemprop="review" itemscope="" itemtype="http://schema.org/Review">
          <div class="col30 f-right">
          </div>
          <div class="f-left ">
           <div class="f-left">
           </div>
           <span class="subtitle nomargin">
            Transfer Paris to Amsterdam t
           </span>
           |
           <span class="bold itinerary_travel " itemprop="author" itemscope="" itemtype="http://schema.org/Person">
            <span itemprop="name">
             .
            </span>
            |
           </span>
           <span content="2019-04-02" itemprop="datePublished">
            2 April 2019
           </span>
           <br/>
           <span class="expandable-text review-text-content-23910483" id="expandable-more-23910483" itemprop="reviewBody" rel="100">
            "TGV from Aix arrived about 30 minutes late into Paris, however we had enough time to transfer to Gare du Nord for the Dutch(?) (Thalys) fast train. Confusion over where carriage #18 was as it was not numbered, however staff were helpful, as they wanted to get under way! Train not as fast as the TGV and more stops, but comfortable.
			"
           </span>
           <div class="expandable-more-23910483 review-text hidden pointer text-right">
            <span class="text-more m-auto blue underline" rel="expandable-more-23910483">
             View more
            </span>
            <span class="hidden text-less m-auto blue underline" rel="expandable-more-23910483">
             View less
            </span>
           </div>
          </div>
          <br class="clearboth"/>
         </div>
        </li>
        <li class="col-pad">
         <div itemprop="review" itemscope="" itemtype="http://schema.org/Review">
          <div class="col30 f-right">
          </div>
          <div class="f-left ">
           <div class="f-left">
           </div>
           <span class="subtitle nomargin">
            Comfort and service
           </span>
           |
           <span class="bold itinerary_travel " itemprop="author" itemscope="" itemtype="http://schema.org/Person">
            <span itemprop="name">
             .
            </span>
            |
           </span>
           <span content="2019-04-02" itemprop="datePublished">
            2 April 2019
           </span>
           <br/>
           <span class="expandable-text review-text-content-23933801" id="expandable-more-23933801" itemprop="reviewBody" rel="100">
            "Railway staffs are very kind and helpful during the journey. I have enjoyed the round trip in Thalys (Amsterdam - Paris Nord - Amsterdam). Seating arrangements are good. Departure and arrival time is perfect. I would like to travel again.
			"
           </span>
           <div class="expandable-more-23933801 review-text hidden pointer text-right">
            <span class="text-more m-auto blue underline" rel="expandable-more-23933801">
             View more
            </span>
            <span class="hidden text-less m-auto blue underline" rel="expandable-more-23933801">
             View less
            </span>
           </div>
          </div>
          <br class="clearboth"/>
         </div>
        </li>
        <li class="col-pad">
         <div itemprop="review" itemscope="" itemtype="http://schema.org/Review">
          <div class="col30 f-right">
          </div>
          <div class="f-left ">
           <div class="f-left">
           </div>
           <span class="subtitle nomargin">
            Amazing
           </span>
           |
           <span class="bold itinerary_travel " itemprop="author" itemscope="" itemtype="http://schema.org/Person">
            <span itemprop="name">
             .
            </span>
            |
           </span>
           <span content="2019-04-02" itemprop="datePublished">
            2 April 2019
           </span>
           <br/>
           <span class="expandable-text review-text-content-24230736" id="expandable-more-24230736" itemprop="reviewBody" rel="100">
            "I was incredibly impressed with the service and variety offered on my journey. I have travelled first class with other train companies before but had never experienced the quality of service and choices offered. It was reminiscent of a long flight in terms of meals and attention by hostesses and it was truly one of the best train rides I have had to date. Thank you Thalys.
			"
           </span>
           <div class="expandable-more-24230736 review-text hidden pointer text-right">
            <span class="text-more m-auto blue underline" rel="expandable-more-24230736">
             View more
            </span>
            <span class="hidden text-less m-auto blue underline" rel="expandable-more-24230736">
             View less
            </span>
           </div>
          </div>
          <br class="clearboth"/>
         </div>
        </li>
        <li class="col-pad">
         <div itemprop="review" itemscope="" itemtype="http://schema.org/Review">
          <div class="col30 f-right">
          </div>
          <div class="f-left ">
           <div class="f-left">
           </div>
           <span class="subtitle nomargin">
            COMMENT
           </span>
           |
           <span class="bold itinerary_travel " itemprop="author" itemscope="" itemtype="http://schema.org/Person">
            <span itemprop="name">
             .
            </span>
            |
           </span>
           <span content="2019-04-02" itemprop="datePublished">
            2 April 2019
           </span>
           <br/>
           <span class="expandable-text review-text-content-24106539" id="expandable-more-24106539" itemprop="reviewBody" rel="100">
            "EVERY THING WAS EXCELENT EXPT THE LADY TO DO SERVICE INSIDE THE TRAIN SHE WAS UNMANNERLY
			"
           </span>
           <div class="expandable-more-24106539 review-text hidden pointer text-right">
            <span class="text-more m-auto blue underline" rel="expandable-more-24106539">
             View more
            </span>
            <span class="hidden text-less m-auto blue underline" rel="expandable-more-24106539">
             View less
            </span>
           </div>
          </div>
          <br class="clearboth"/>
         </div>
        </li>
        <li class="col-pad">
         <div itemprop="review" itemscope="" itemtype="http://schema.org/Review">
          <div class="col30 f-right">
          </div>
          <div class="f-left ">
           <div class="f-left">
           </div>
           <span class="subtitle nomargin">
            My first trip with RailEurope
           </span>
           |
           <span class="bold itinerary_travel " itemprop="author" itemscope="" itemtype="http://schema.org/Person">
            <span itemprop="name">
             .
            </span>
            |
           </span>
           <span content="2019-04-02" itemprop="datePublished">
            2 April 2019
           </span>
           <br/>
           <span class="expandable-text review-text-content-24222031" id="expandable-more-24222031" itemprop="reviewBody" rel="100">
            "THIS WAS THE FIRST TIME FOR ME AND MY WIFE TO TRAVEL BY TRAIN IN EUROPE , AND IT WAS A VERY NICE ONE , WE DECIDED IT WELL BE OUR WAY OF TRAVEL THROUGH EUROPE ON OUR NEXT VICATION .
			"
           </span>
           <div class="expandable-more-24222031 review-text hidden pointer text-right">
            <span class="text-more m-auto blue underline" rel="expandable-more-24222031">
             View more
            </span>
            <span class="hidden text-less m-auto blue underline" rel="expandable-more-24222031">
             View less
            </span>
           </div>
          </div>
          <br class="clearboth"/>
         </div>
        </li>
        <li class="col-pad">
         <div itemprop="review" itemscope="" itemtype="http://schema.org/Review">
          <div class="col30 f-right">
          </div>
          <div class="f-left ">
           <div class="f-left">
           </div>
           <span class="subtitle nomargin">
            Train info
           </span>
           |
           <span class="bold itinerary_travel " itemprop="author" itemscope="" itemtype="http://schema.org/Person">
            <span itemprop="name">
             .
            </span>
            |
           </span>
           <span content="2019-04-02" itemprop="datePublished">
            2 April 2019
           </span>
           <br/>
           <span class="expandable-text review-text-content-24448749" id="expandable-more-24448749" itemprop="reviewBody" rel="100">
            "Coach no and train no could be displayed more prominently to prevent customer hassle from going from 1 coach to another.more officers at train departure area to assist passengers.to provide free access to wifi for all classes.thank you.
			"
           </span>
           <div class="expandable-more-24448749 review-text hidden pointer text-right">
            <span class="text-more m-auto blue underline" rel="expandable-more-24448749">
             View more
            </span>
            <span class="hidden text-less m-auto blue underline" rel="expandable-more-24448749">
             View less
            </span>
           </div>
          </div>
          <br class="clearboth"/>
         </div>
        </li>
        <li class="col-pad">
         <div itemprop="review" itemscope="" itemtype="http://schema.org/Review">
          <div class="col30 f-right">
          </div>
          <div class="f-left ">
           <div class="f-left">
           </div>
           <span class="subtitle nomargin">
            travel with style
           </span>
           |
           <span class="bold itinerary_travel " itemprop="author" itemscope="" itemtype="http://schema.org/Person">
            <span itemprop="name">
             .
            </span>
            |
           </span>
           <span content="2019-04-02" itemprop="datePublished">
            2 April 2019
           </span>
           <br/>
           <span class="expandable-text review-text-content-24400674" id="expandable-more-24400674" itemprop="reviewBody" rel="100">
            "A better choice for travellers
			"
           </span>
           <div class="expandable-more-24400674 review-text hidden pointer text-right">
            <span class="text-more m-auto blue underline" rel="expandable-more-24400674">
             View more
            </span>
            <span class="hidden text-less m-auto blue underline" rel="expandable-more-24400674">
             View less
            </span>
           </div>
          </div>
          <br class="clearboth"/>
         </div>
        </li>
        <p class="pagination clearfix">
         <a id="pagination_comment_journeys_insight" name="pagination_comment_journeys_insight">
         </a>
         <span class="on">
          0
         </span>
         [ahref]
         
         [ahref]
         
         [ahref]
         
         [linkx]
         
         [linkx]
         
         <a class="lien_pagination" href="/train-tickets/journeys/article/paris-amsterdam?lang=en&amp;debut_comment_journeys_insight=90#pagination_comment_journeys_insight" rel="nofollow">
          90
         </a>
         <a class="lien_pagination" href="/train-tickets/journeys/article/paris-amsterdam?lang=en&amp;debut_comment_journeys_insight=105#pagination_comment_journeys_insight" rel="nofollow">
          105
         </a>
         [ahref]
         
         <a class="lien_pagination" href="/train-tickets/journeys/article/paris-amsterdam?lang=en&amp;debut_comment_journeys_insight=300#pagination_comment_journeys_insight" rel="nofollow">
          ...
         </a>
        </p>
       </ul>
      </div>
     </section>
     <section class="box-min">
      <div class="bottom-pad col80 m-auto top-pad border-top">
       <span class="h3">
        Save money and see more with a Luxembourg Pass
       </span>
       Wish to explore more of Benelux; then a rail pass may be just what you are looking for; giving you extensive travel in the country of your choice!
       [ahref]
       
      </div>
     </section>
     <section class="boxgrey" id="related_products">
      <div class="related">
       <h2 class="inter a-color">
        [mkey1][symbolx][pkey1][symbolx][keyword1][bracketl1][bracketr1][symbolx][bracketl2][siter1][bracketr2][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx]
       </h2>
       <h3 class="inter blue">
        [mkey1][symbolx][pkey1][symbolx][keyword1][bracketl1][bracketr1][symbolx][bracketl2][siter1][bracketr2][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx]
       </h3>
       <div class="ajaxbloc" data-ajax-env="5b4235975b5245be5ef8a57670a2808b" data-origin="/train-tickets/journeys/article/paris-amsterdam?lang=en">
        <a id="pagination_for_related" name="pagination_for_related">
        </a>
        <div id="container_45">
        </div>
        <div class="main_container_box " id="main_container_45">
         <div class="related_objrelated clearfix clearboth">
          <ul>
           <li class="related_objects">
            <a class="noborder" href="/journeys/article/mannheim-paris" title="Mannheim - Paris">
             <div class="slider_desc">
              <p class=" sh_overlay_font">
               Mannheim - Paris
              </p>
              <span class="btn f-right">
               <span>
                Learn more
               </span>
              </span>
              <br class="clearboth"/>
             </div>
            </a>
           </li>
           <li class="related_objects">
            <a class="noborder" href="/journeys/article/dusseldorf-paris" title="Düsseldorf - Paris">
             <div class="slider_desc">
              <p class=" sh_overlay_font">
               Düsseldorf - Paris
              </p>
              <span class="btn f-right">
               <span>
                Learn more
               </span>
              </span>
              <br class="clearboth"/>
             </div>
            </a>
           </li>
           <li class="related_objects">
            <a class="noborder" href="/journeys/article/kaiserslautern-paris" title="Kaiserslautern - Paris">
             <div class="slider_desc">
              <p class=" sh_overlay_font">
               Kaiserslautern - Paris
              </p>
              <span class="btn f-right">
               <span>
                Learn more
               </span>
              </span>
              <br class="clearboth"/>
             </div>
            </a>
           </li>
          </ul>
         </div>
        </div>
        <div class="pagination">
         <a href="/train-tickets/journeys/article/paris-amsterdam?lang=en&amp;debut_for_related=3#pagination_for_related" rel="nofollow">
          <div class="b-left f-right">
          </div>
         </a>
        </div>
       </div>
      </div>
     </section>
    </div>
   </div>
   <span class="tracking hidden">
    Paris - Amsterdam
   </span>
  </div>
 </article>
 <div class="center clearfix boxblue" id="section_newsletter">
  <form action="/servlet/servlet.WebToLead?encoding=UTF-8" class="formRailEurope" id="formRailEurope" method="POST" onsubmit="javascript:return false;">
   <h3>
    [mkey1][symbolx][pkey1][symbolx][keyword1][bracketl1][bracketr1][symbolx][bracketl2][siter1][bracketr2][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx]
   </h3>
  </form>
  <br class="clearboth"/>
  <div class="social_choice clearfix">
   Connect to the best deals via social media
  </div>
  <div class="social_choice clearfix newsletter-GDPR-text">
   This information is intended for the subscription to Rail Europe newsletters. It is used by Rail Europe (2 place de la Défense, CNIT 1, BP 440, 92053 Paris La Défense Cedex, France) in accordance with the
   <a class="underline white" href="/privacy-policy/" target="_blank">
    Rail Europe Privacy policy
   </a>
   . This data may be sent to our internal services in the strict context of the subscription and the sending of these newsletters. At any time, you are entitled to access, rectify, limit, obtain portability and delete your personal data by contacting our customer service and by using the link inserted in each newsletter sent to you.
  </div>
 </div>
 <footer id="footer">
  <div id="bottom_blocks">
   <div class="vhidden f-left transparent-black" id="gotop">
    [ahref]
    
   </div>
  </div>
  <br class="clearboth"/>
  <div class="partners_middle">
   <div class=" center">
    <div class="items">
     <div class="sprite-eurostar_01">
      <a class="noborder" href="/eurostar" title="Eurostar">
      </a>
     </div>
     <div class="sprite-TGV">
      [ahref]
      
     </div>
     <div class="sprite-thalys">
      <a class="noborder" href="/thalys" title="Thalys">
      </a>
     </div>
     <div class="sprite-tgv_lyria">
      [ahref]
      
     </div>
     <div class="sprite-renfe_2">
      [linkx]
      
     </div>
     <div class="sprite-italo">
      [linkx]
      
     </div>
     <div class="sprite-nationalRail">
      [linkx]
      
     </div>
     <br class="clearboth"/>
     <div class="sprite-trenitalia_2">
      [ahref]
      
     </div>
     <div class="sprite-db_bahn">
      [ahref]
      
     </div>
     <div class="sprite-sncf">
      [linkx]
      
     </div>
     <div class="sprite-sts">
      [linkx]
      
     </div>
     <div class="sprite-logo_SBB">
      <a class="noborder" href="/train-companies/article/switzerland-sbb-cff" title="Swiss Travel System">
      </a>
     </div>
     <div class="sprite-britrail">
      [ahref]
      
     </div>
     <div class="sprite-eurail">
      <a class="noborder" href="/eurail-global-pass" title="Eurail Global Pass">
      </a>
     </div>
    </div>
   </div>
  </div>
  <div id="footer-top">
   <div class="warning" id="warning">
   </div>
   <div class="clearfix" id="site-map">
    <div class="col30 f-left">
     <p>
     </p>
     <p class="top-marg">
      <div class="flagsCont1 f-left" id="select_country_links">
       <span aria-activedescendant="ui-id-19" aria-autocomplete="list" aria-disabled="false" aria-expanded="true" aria-haspopup="true" aria-labelledby="ui-id-79" aria-owns="lang-form-menu" class="ui-selectmenu-button ui-widget ui-state-default ui-corner-top ui-corner-bottom" id="lang-form-button-link" role="combobox" style="width: 260px;" tabindex="0">
        <span class="ui-icon ui-icon-triangle-1-s">
        </span>
        <span class="ui-selectmenu-text">
         Hong Kong
        </span>
       </span>
       <div class="ui-selectmenu-menu ui-front mCustomScrollbar _select_country_links">
        <div id="select_country_links">
         <div class="mCSB_container" dir="ltr" id="select_country_links_container" style="position:relative; top:0; left:0;">
          <ul aria-activedescendant="ui-id-19" aria-disabled="false" aria-hidden="false" aria-labelledby="lang-form-button-link" class="ui-menu ui-widget ui-widget-content ui-corner-bottom .mCustomScrollbar()" id="lang-form-menu-links" role="listbox" style="width: 279px;" tabindex="0">
           <li class="ui-menu-item" role="option">
            [linkx]
            
           </li>
           <li class="ui-menu-item" role="option">
            <a class="noborder" href="r" title="Argentina">
             Argentina
            </a>
           </li>
           <li class="ui-menu-item" role="option">
            [linkx]
            
           </li>
           <li class="ui-menu-item" role="option">
            <a class="noborder" href="m" title="Bahrain">
             Bahrain
            </a>
           </li>
           <li class="ui-menu-item" role="option">
            [ahref]
            
           </li>
           <li class="ui-menu-item" role="option">
            [linkx]
            
           </li>
           <li class="ui-menu-item" role="option">
            [ahref]
            
           </li>
           <li class="ui-menu-item" role="option">
            [linkx]
            
           </li>
           <li class="ui-menu-item" role="option">
            <a class="noborder" href="m" title="Brunei Darussalam">
             Brunei Darussalam
            </a>
           </li>
           <li class="ui-menu-item" role="option">
            <a class="noborder" href="m" title="Cambodia">
             Cambodia
            </a>
           </li>
           <li class="ui-menu-item" role="option">
            [linkx]
            
           </li>
           <li class="ui-menu-item" role="option">
            [ahref]
            
           </li>
           <li class="ui-menu-item" role="option">
            [linkx]
            
           </li>
           <li class="ui-menu-item" role="option">
            [linkx]
            
           </li>
           <li class="ui-menu-item" role="option">
            [ahref]
            
           </li>
           <li class="ui-menu-item" role="option">
            [linkx]
            
           </li>
           <li class="ui-menu-item" role="option">
            <a class="noborder" href="f" title="Europe">
             Europe
            </a>
           </li>
           <li class="ui-menu-item" role="option">
            <a class="noborder" href="f" title="France">
             France
            </a>
           </li>
           <li class="ui-menu-item" role="option">
            [ahref]
            
           </li>
           <li class="ui-menu-item" role="option">
            [linkx]
            
           </li>
           <li class="ui-menu-item" role="option">
            [ahref]
            
           </li>
           <li class="ui-menu-item" role="option">
            [linkx]
            
           </li>
           <li class="ui-menu-item" role="option">
            [linkx]
            
           </li>
           <li class="ui-menu-item" role="option">
            <a class="noborder" href="m" title="Iraq">
             Iraq
            </a>
           </li>
           <li class="ui-menu-item" role="option">
            [ahref]
            
           </li>
           <li class="ui-menu-item" role="option">
            [linkx]
            
           </li>
           <li class="ui-menu-item" role="option">
            [linkx]
            
           </li>
           <li class="ui-menu-item" role="option">
            <a class="noborder" href="m" title="Japan">
             Japan
            </a>
           </li>
           <li class="ui-menu-item" role="option">
            [linkx]
            
           </li>
           <li class="ui-menu-item" role="option">
            <a class="noborder" href="m" title="Kuwait">
             Kuwait
            </a>
           </li>
           <li class="ui-menu-item" role="option">
            <a class="noborder" href="m" title="Laos">
             Laos
            </a>
           </li>
           <li class="ui-menu-item" role="option">
            [ahref]
            
           </li>
           <li class="ui-menu-item" role="option">
            <a class="noborder" href="f" title="Luxembourg">
             Luxembourg
            </a>
           </li>
           <li class="ui-menu-item" role="option">
            <a class="noborder" href="a" title="Malawi">
             Malawi
            </a>
           </li>
           <li class="ui-menu-item" role="option">
            <a class="noborder" href="m" title="Malaysia">
             Malaysia
            </a>
           </li>
           <li class="ui-menu-item" role="option">
            <a class="noborder" href="x" title="Mexico">
             Mexico
            </a>
           </li>
           <li class="ui-menu-item" role="option">
            [ahref]
            
           </li>
           <li class="ui-menu-item" role="option">
            [linkx]
            
           </li>
           <li class="ui-menu-item" role="option">
            <a class="noborder" href="f" title="Netherlands">
             Netherlands
            </a>
           </li>
           <li class="ui-menu-item" role="option">
            [linkx]
            
           </li>
           <li class="ui-menu-item" role="option">
            [linkx]
            
           </li>
           <li class="ui-menu-item" role="option">
            [ahref]
            
           </li>
           <li class="ui-menu-item" role="option">
            [ahref]
            
           </li>
           <li class="ui-menu-item" role="option">
            [linkx]
            
           </li>
           <li class="ui-menu-item" role="option">
            [ahref]
            
           </li>
           <li class="ui-menu-item" role="option">
            [linkx]
            
           </li>
           <li class="ui-menu-item" role="option">
            [linkx]
            
           </li>
           <li class="ui-menu-item" role="option">
            [ahref]
            
           </li>
           <li class="ui-menu-item" role="option">
            [linkx]
            
           </li>
           <li class="ui-menu-item" role="option">
            [ahref]
            
           </li>
           <li class="ui-menu-item" role="option">
            [linkx]
            
           </li>
           <li class="ui-menu-item" role="option">
            <a class="noborder" href="f" title="Spain">
             Spain
            </a>
           </li>
           <li class="ui-menu-item" role="option">
            [ahref]
            
           </li>
           <li class="ui-menu-item" role="option">
            [ahref]
            
           </li>
           <li class="ui-menu-item" role="option">
            [ahref]
            
           </li>
           <li class="ui-menu-item" role="option">
            <a class="noborder" href="h" title="Thailand">
             Thailand
            </a>
           </li>
           <li class="ui-menu-item" role="option">
            <a class="noborder" href="f" title="United Kingdom">
             United Kingdom
            </a>
           </li>
           <li class="ui-menu-item" role="option">
            <a class="noborder" href="f" title="United Kingdom">
             United Kingdom
            </a>
           </li>
           <li class="ui-menu-item" role="option">
            [linkx]
            
           </li>
           <li class="ui-menu-item" role="option">
            [linkx]
            
           </li>
           <li class="ui-menu-item" role="option">
            [ahref]
            
           </li>
           <li class="ui-menu-item" role="option">
            <a class="noborder" href="m" title="Viet Nam">
             Viet Nam
            </a>
           </li>
           <li class="ui-menu-item" role="option">
            [linkx]
            
           </li>
           <li class="ui-menu-item" role="option">
            [linkx]
            
           </li>
           <li class="ui-menu-item" role="option">
            [linkx]
            
           </li>
          </ul>
         </div>
        </div>
       </div>
      </div>
     </p>
     <br class="clearboth"/>
     <p>
      <div class="f-left">
       <div class="footer_logo footer_payment_logo sprite-visa_electron" title="Visa Electron">
       </div>
       <div class="footer_logo footer_payment_logo sprite-mastercard" title="Mastercard">
       </div>
       <div class="footer_logo footer_payment_logo sprite-jcb" title="JCB">
       </div>
       <div class="footer_logo footer_payment_logo sprite-amex" title="Amex">
       </div>
       <div class="footer_logo footer_payment_logo sprite-visa" title="Visa">
       </div>
      </div>
     </p>
     <br class="clearboth"/>
     <br class="clearboth"/>
    </div>
    <div class="col69 f-right">
     <div class="f-left col25">
      <h3>
       [mkey1][symbolx][pkey1][symbolx][keyword1][bracketl1][bracketr1][symbolx][bracketl2][siter1][bracketr2][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx]
      </h3>
      <ul>
       <li>
        [linkx]
        
       </li>
       <li>
        <a href="/" title="Rail Europe Blog">
         <small>
          Rail Europe Blog
         </small>
        </a>
       </li>
       <li>
        [linkx]
        
       </li>
       <li>
        [ahref]
        
       </li>
      </ul>
     </div>
     <div class="f-left col25">
      <h3>
       [mkey1][symbolx][pkey1][symbolx][keyword1][bracketl1][bracketr1][symbolx][bracketl2][siter1][bracketr2][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx]<li>[keywordx][symbolx][keywordx][symbolx][bracketl4][keywordx][bracketr4][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx]</li><li>[keywordx][symbolx][keywordx][symbolx][bracketl5][keywordx][bracketr5][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx]</li>[link]
      </h3>
      <ul>
       <li>
        <a href="/train-tickets/" title="From the heart of one city to the next 

If you know your travel dates, we can help you find the best fares and schedules for your itinerary. Simply enter your departure and arrival cities to the right, along with the date and time of day you wish to travel.">
         <small>
          Train Tickets
         </small>
        </a>
       </li>
       <li>
        <a href="/rail-passes/" title="Choose a point to point ticket to get the best possible price for a planned trip in Europe.

 

Choose a rail pass to travel where you want, when you want and as much as you want. You’ll even pay less!

 

Book a seat reservation if you are a pass holder to travel on board high speed, scenic or overnight trains with our exclusive online booking system. 

Which train ticket is best for me? 

">
         <small>
          Rail Passes
         </small>
        </a>
       </li>
       <li>
        [ahref]
        
       </li>
       <li>
        [linkx]
        
       </li>
       <li>
        [linkx]
        
       </li>
       <li>
        <a href="/spip.php?page=journey_builder" title="Trip Planner">
         <small>
          Trip Planner
         </small>
        </a>
       </li>
      </ul>
     </div>
     <div class="f-left col25">
      <h3>
       [mkey1][symbolx][pkey1][symbolx][keyword1][bracketl1][bracketr1][symbolx][bracketl2][siter1][bracketr2][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx]
      </h3>
      <ul>
       <li>
        [linkx]
        
       </li>
       <li>
        [linkx]
        
       </li>
       <li>
        [linkx]
        
       </li>
       <li>
        <a href="/city-guides/" title="Guides to over 500 of around 15,000 European towns and cities accessible by train. With Rail Europe, the entire continent is just a train ride away, from Rome to Berlin, Helsinki to Bratislava.">
         <small>
          City Guides
         </small>
        </a>
       </li>
       <li>
        <a href="/country-guides/" title="Explore our guides to over 40 countries in Europe. Be inspired and begin planning your dream journey throughout the continent.">
         <small>
          Country Guides
         </small>
        </a>
       </li>
       <li>
        [linkx]
        
       </li>
       <li>
        [linkx]
        
       </li>
       <li>
        [linkx]
        
       </li>
       <li>
        <a href="/products/group-bookings/article/group-booking-form" title="Group Travel">
         <small>
          Group Travel
         </small>
        </a>
       </li>
       <li>
        [linkx]
        
       </li>
      </ul>
     </div>
     <div class="f-left col25">
      <h3>
       [mkey1][symbolx][pkey1][symbolx][keyword1][bracketl1][bracketr1][symbolx][bracketl2][siter1][bracketr2][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx]
      </h3>
      <ul>
       <li>
        [linkx]
         <li>[link]</li><li>[keywordx][symbolx][keywordx][symbolx][bracketl1][keywordx][bracketr1][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx]</li><li>[keywordx][symbolx][keywordx][symbolx][bracketl2][keywordx][bracketr2][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx]</li><li>[keywordx][symbolx][keywordx][symbolx][bracketl3][keywordx][bracketr3][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx]</li>
        
       </li>
       <li>
        [linkx]
        
       </li>
       <li>
        <a href="m" title="Travel forum">
         <small>
          Travel forum
         </small>
        </a>
       </li>
       <li>
        <a href="/spip.php?page=refund" title="Exchanges and Refunds">
         <small>
          Exchanges and Refunds
         </small>
        </a>
       </li>
      </ul>
     </div>
     <br class="clearboth"/>
     <div class="f-left col25">
      <h3>
       [mkey1][symbolx][pkey1][symbolx][keyword1][bracketl1][bracketr1][symbolx][bracketl2][siter1][bracketr2][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx]
      </h3>
      <div class="footer_logo f-left sprite-widget-appli-large">
       <a class="noborder dblock" href="/rail-europe-exclusivities/on-the-go/article/mobile-app">
       </a>
      </div>
     </div>
     <div class="f-left col25">
      <h3>
       [mkey1][symbolx][pkey1][symbolx][keyword1][bracketl1][bracketr1][symbolx][bracketl2][siter1][bracketr2][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx]
      </h3>
      <ul>
       <li>
        <a href="f" target="_blank">
         <small>
          Oui.sncf
         </small>
        </a>
       </li>
      </ul>
     </div>
     <div class="f-left col25">
      <h3>
       [mkey1][symbolx][pkey1][symbolx][keyword1][bracketl1][bracketr1][symbolx][bracketl2][siter1][bracketr2][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx]
      </h3>
     </div>
     <div class="f-right col25">
      <h3>
       [mkey1][symbolx][pkey1][symbolx][keyword1][bracketl1][bracketr1][symbolx][bracketl2][siter1][bracketr2][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx]
      </h3>
      <ul>
       <li>
        [ahref]
        
       </li>
       <li>
        [ahref]
        
       </li>
       <li>
        <a href="r" target="_blank">
         <small>
          Corporate website
         </small>
        </a>
       </li>
       <li>
        <a href="/train-companies/" title="Rail Europe allows travellers to reach 15,000 destinations in Europe with the widest selection of point to point tickets and rail passes.">
         <small>
          Train companies
         </small>
        </a>
       </li>
      </ul>
     </div>
    </div>
    <br class="clearboth"/>
    <div class="partners_middle center b2b">
     <div class="items">
      <div class="sprite-logo-railteam">
      </div>
      <div class="sprite-logo-nationalrail">
      </div>
      <div class="sprite-logo-ustoa">
      </div>
      <div class="sprite-logo-asta">
      </div>
      <div class="sprite-logo-acta">
      </div>
      <div class="sprite-logo-bsi">
      </div>
     </div>
     <div class="m-auto">
      <div class="footer_logo sprite-logo_globalsign" title="rail-web10 Protect your data with TLS encryption">
      </div>
      <div class="footer_logo sprite-Nat-acredited_bleu">
      </div>
      <div class="footer_logo sprite-logo_globalcollect">
       <a class="noborder" href="m" target="_blank" title="rail-web10 Global Collect is among the major payment gateways in the travel industry">
       </a>
      </div>
      <div class="footer_logo sprite-logo_pci">
       <li>[keywordx][symbolx][keywordx][symbolx][bracketl6][keywordx][bracketr6][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx]</li><li>[keywordx][symbolx][keywordx][symbolx][bracketl7][keywordx][bracketr7][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx]</li><li>[link]</li>
      </div>
     </div>
     <span class="grey top-pad top-marg inline-block">
      © 1995 - 2019 Rail Europe
     </span>
    </div>
   </div>
  </div>
  <div class="partners_middle center nomargin">
   <div class="clearfix">
    <b>
     Guides :
    </b>
    [linkx]
    
    (Japanese) -
    <span>
     <b>
      Rail Europe Blog :
     </b>
     <a href="m">
      blog.raileurope.com
     </a>
     (English) |
     <a href="/rail_europe">
      blog.naver.com/rail_europe
     </a>
     (Korean)
    </span>
    <br class="clearboth"/>
    <br class="clearboth"/>
   </div>
  </div>
  <noscript>
   <iframe height="0" src="//www.googletagmanager.com/ns.html?id=GTM-542QQV" style="display:none;visibility:hidden" width="0">
   </iframe>
  </noscript>
  <noscript>
   <iframe height="0" src="//www.googletagmanager.com/ns.html?id=GTM-TDJD4Q" style="display:none;visibility:hidden" width="0">
   </iframe>
  </noscript>
 </footer>
 <div class="langcont box" id="langcont">
 </div>
</div>
|<---