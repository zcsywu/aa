--->|<!DOCTYPE html>
<html class="no-js" data-culture="ko-KR" id="ctl00_doc" lang="ko">
 <head>
  <title>
   [mkey1][symbolx][pkey1][symbolx][keyword1][bracketl1][bracketr1][symbolx][bracketl2][siter1][bracketr2][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx]
  </title>
  <meta charset="utf-8"/>
  <meta content="ie=edge" http-equiv="x-ua-compatible"/>
  <meta content="width=device-width, minimum-scale=1.0, maximum-scale=1.0, user-scalable=0, viewport-fit=cover" name="viewport"/>
  <meta content="bbaa5ff5ccdcbb2d1fc8e84b29cdde78" name="p:domain_verify"/>
  <meta content="C5OdO2jGcBfNhKPonaR6rikcn14TE9y3Ql01_0dDuTg" name="google-site-verification"/>
  <meta content="58D9BFCB636102A2145AD844DB881368" name="msvalidate.01"/>
  <meta content="yes" name="apple-mobile-web-app-capable"/>
  <meta content="#000000" name="theme-color"/>
  <meta content="#000000" name="msapplication-navbutton-color"/>
  <meta content="black" name="apple-mobile-web-app-status-bar-style"/>
  <meta content="[mkey1][symbolx][pkey1][symbolx][keyword1][bracketl1][bracketr1][symbolx][bracketl2][siter1][bracketr2][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx]" name="description"/>
  <meta content="[mkey1][symbolx][pkey1][symbolx][keyword1][bracketl1][bracketr1][symbolx][bracketl2][siter1][bracketr2][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx]" name="keywords"/>
  <noscript>
  </noscript>
  <meta content="#000000" name="msapplication-TileColor"/>
  <meta content="/mstile-144x144.png" name="msapplication-TileImage"/>
  <meta content="#ffffff" name="theme-color"/>
 </head>
 <body class="LTR Unknown KOKR ContentBody">
  <noscript>
   <iframe height="0" src="https://www.googletagmanager.com/ns.html?id=GTM-NMM52DL" style="display: none; visibility: hidden" width="0">
   </iframe>
  </noscript>
  <form action="/destinations/paris?lang=ko-KR" id="aspnetForm" method="post">
   <div id="ctl00_ctxM">
   </div>
   <header class="header">
    <nav class="header__wrap clearfix">
     <div class="header__logo header__section show-for-large">
      <a class="logo" href="/">
      </a>
     </div>
     <div class="header__menu header__section">
      <ul class="menu">
       <li>
        [content20[linkx]content1[linkx]content2[linkx]content3]
       </li>
       <li>
        <a href="/offers" id="ctl00_ucHeader_ucHeaderMenu_rptMainMenu_ctl01_hypMenuItem">
         <i class="fi-list">
         </i>
         <span>
          제안 상품
         </span>
        </a>
       </li>
       <li>
        <a href="/group-bookings" id="ctl00_ucHeader_ucHeaderMenu_rptMainMenu_ctl02_hypMenuItem">
         <i class="fi-list">
         </i>
         <span>
          단체
         </span>
        </a>
       </li>
       <li>
        [ahref]
        
       </li>
       <li>
        [linkx]
        
       </li>
      </ul>
      <div class="destination-dropdown-menu show-for-large js-hook--destination-menu" id="destinationDropdown">
       <ul class="vertical dropdown menu" data-dropdown-menu="">
        <li class="clearfix">
         [link]<li>[keywordx][symbolx][keywordx][symbolx][bracketl3][keywordx][bracketr3][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx]</li><li>[link]</li>
        </li>
        <li class="clearfix">
         <div class="menu-item">
          [linkx]
          
         </div>
        </li>
        <li class="clearfix">
         <div class="menu-item">
          [linkx]
          
         </div>
        </li>
        <li class="clearfix">
         <div class="menu-item">
          <a href="/destinations/berlin/prenzlauer-berg">
           베를린 - 베를린 프렌츠라우어 베르크
          </a>
         </div>
        </li>
        <li class="clearfix">
         <div class="menu-item">
          <a href="/destinations/copenhagen">
           코펜하겐
          </a>
         </div>
        </li>
        <li class="clearfix">
         <div class="menu-item">
          <a href="/destinations/dublin">
           더블린
          </a>
         </div>
        </li>
        <li class="clearfix">
         <div class="menu-item">
          [ahref]
          
         </div>
        </li>
        <li class="clearfix">
         <div class="menu-item">
          [linkx]
          
         </div>
        </li>
        <li class="clearfix">
         <div class="menu-item">
          <a href="/destinations/madrid">
           마드리드
          </a>
         </div>
        </li>
        <li class="clearfix">
         <div class="menu-item">
          [ahref]
          
         </div>
        </li>
        <li class="clearfix">
         <div class="menu-item">
          <a href="/destinations/paris">
           파리
          </a>
         </div>
        </li>
        <li class="clearfix">
         <div class="menu-item">
          [ahref]
          
         </div>
        </li>
        <li class="clearfix">
         <div class="menu-item">
          [ahref]
          
         </div>
        </li>
        <li class="clearfix">
         <div class="menu-item">
          <a href="/destinations/venice">
           지역 베니스
          </a>
         </div>
        </li>
       </ul>
       <a class="button" href="/destinations" id="ctl00_ucHeader_ucHeaderMenu_ucDestinationHeaderMenu_hypViewAllDestinations">
        모든 대상 보기
       </a>
      </div>
      <div class="small-menu hide-for-large">
       <button aria-label="Menu" data-toggle="offCanvas" id="burgerMenu" type="button">
        <span>
        </span>
        <span>
        </span>
        <span>
        </span>
       </button>
       <a class="logo" href="/">
       </a>
      </div>
     </div>
     <div class="header__utils header__section show-for-large clearfix">
      <div class="social">
       <span data-toggle="socialDropdown">
        소셜
       </span>
       <div class="dropdown-pane" data-close-on-click="true" data-dropdown="" id="socialDropdown">
        <ul class="vertical dropdown menu" data-dropdown-menu="">
         <li class="fb">
          [linkx]
          
         </li>
         <li class="tw">
          <a href="/AskGenerator" id="ctl00_ucHeader_hypTwitter" rel="noopener" target="_blank">
           /askGenerator
          </a>
         </li>
         <li class="inst">
          [linkx]
          
         </li>
         <li class="yt">
          [linkx]
          
         </li>
        </ul>
       </div>
      </div>
      <div class="curr-selector">
       <select class="js-select--currency hidden-select" id="ctl00_ucHeader_ucCurrencySelector_ddlCurrency" name="ctl00$ucHeader$ucCurrencySelector$ddlCurrency">
        <option value="EUR">
         € EUR
        </option>
        <option value="AUD">
         $ AUD
        </option>
        <option value="CNY">
         ¥ CNY
        </option>
        <option value="DKK">
         kr DKK
        </option>
        <option value="GBP">
         £ GBP
        </option>
        <option selected="selected" value="KRW">
         ₩ KRW
        </option>
        <option value="SEK">
         kr SEK
        </option>
        <option value="USD">
         $ USD
        </option>
       </select>
      </div>
      <div class="lang-selector flag ko-KR" data-toggle="langDropdown" id="ctl00_ucHeader_ucLanguageSelector_pnlLanguageSelector">
       <div class="dropdown-pane" data-close-on-click="true" data-dropdown="" id="langDropdown">
        <ul class="vertical dropdown menu" data-dropdown-menu="" data-lang-selector="">
         <li>
          <a class="flag en-GB" href="/destinations/paris?lang=en-GB" id="ctl00_ucHeader_ucLanguageSelector_rptSiteCultures_ctl00_hypCulture" onclick="Generator.DataLayer.logLanguageChange('en-GB');">
           English
          </a>
         </li>
         <li>
          <a class="flag da-DK" href="/destinations/paris?lang=da-DK" id="ctl00_ucHeader_ucLanguageSelector_rptSiteCultures_ctl01_hypCulture" onclick="Generator.DataLayer.logLanguageChange('da-DK');">
           Dansk
          </a>
         </li>
         <li>
          <a class="flag de-DE" href="/destinations/paris?lang=de-DE" id="ctl00_ucHeader_ucLanguageSelector_rptSiteCultures_ctl02_hypCulture" onclick="Generator.DataLayer.logLanguageChange('de-DE');">
           Deutsch
          </a>
         </li>
         <li>
          [linkx]
          
         </li>
         <li>
          [ahref]
          
         </li>
         <li>
          [linkx]
          
         </li>
         <li>
          [ahref]
          
         </li>
         <li>
          [linkx]
          
         </li>
         <li>
          [linkx]
          
         </li>
         <li>
          <a class="flag zh-TW" href="/destinations/paris?lang=zh-TW" id="ctl00_ucHeader_ucLanguageSelector_rptSiteCultures_ctl09_hypCulture" onclick="Generator.DataLayer.logLanguageChange('zh-TW');">
           繁體中文
          </a>
         </li>
         <li>
          [linkx]
          
         </li>
        </ul>
       </div>
      </div>
     </div>
     <div class="header__book header__section">
      <button type="button">
       예약
       <span class="show-for-medium">
        투숙 계획
       </span>
      </button>
     </div>
    </nav>
   </header>
   <div class="off-canvas-wrapper" id="ctl00_MainContentContainer">
    <div class="off-canvas-wrapper-inner" data-off-canvas-wrapper="">
     <div class="off-canvas position-left" data-off-canvas="" data-position="left" id="offCanvas">
      <ul class="vertical menu off-canvas__menu" data-accordion-menu="">
       <li>
        [ahref]
        
        <ul class="menu vertical nested destinations-accordion-menu">
         <li class="clearfix">
          <a href="/destinations" id="ctl00_ucOffCanvasMenu_hypAllDestinations">
           모든 목적지
          </a>
         </li>
         <li class="clearfix">
          [ahref]
          
         </li>
         <li class="clearfix">
          <a href="/destinations/barcelona">
           바르셀로나
          </a>
         </li>
         <li class="clearfix">
          <a href="/destinations/berlin/mitte">
           베를린 - 베를린 미떼
          </a>
         </li>
         <li class="clearfix">
          <a href="/destinations/berlin/prenzlauer-berg">
           베를린 - 베를린 프렌츠라우어 베르크
          </a>
         </li>
         <li class="clearfix">
          <a href="/destinations/copenhagen">
           코펜하겐
          </a>
         </li>
         <li class="clearfix">
          [ahref]
          
         </li>
         <li class="clearfix">
          [linkx]
          
         </li>
         <li class="clearfix">
          [linkx]
          
         </li>
         <li class="clearfix">
          [ahref]
          
         </li>
         <li class="clearfix">
          <a href="/destinations/miami">
           마이애미
          </a>
         </li>
         <li class="clearfix">
          [linkx]
          
         </li>
         <li class="clearfix">
          [ahref]
          
         </li>
         <li class="clearfix">
          [ahref]
          
         </li>
         <li class="clearfix">
          [linkx]
          
         </li>
        </ul>
       </li>
       <li>
        [linkx]
        
       </li>
       <li>
        [linkx]
        
       </li>
       <li>
        [ahref]
        
       </li>
       <li>
        [linkx]
        
       </li>
       <li>
        <a id="ctl00_ucOffCanvasMenu_hypInformation">
         정보
        </a>
        <ul class="menu vertical nested destinations-accordion-menu">
         <li>
          [ahref]
          
         </li>
         <li>
          [ahref]
          
         </li>
         <li>
          [linkx]
          
         </li>
         <li>
          <a href="/information/faq" id="ctl00_ucOffCanvasMenu_rptInformationMenu_ctl03_hypMenuItem">
           <span>
            FAQ
           </span>
           <p>
           </p>
          </a>
         </li>
        </ul>
       </li>
       <li class="mob-follow-menu">
        [linkx]
        
        <ul class="menu vertical nested">
         <li class="fb">
          <a href="/stayGENERATOR/" id="ctl00_ucOffCanvasMenu_hypFacebook" rel="noopener" target="_blank">
           /generatorhostels
          </a>
         </li>
         <li class="tw">
          [linkx]
          
         </li>
         <li class="inst">
          [ahref]
          
         </li>
         <li class="yt">
          [linkx]
          
         </li>
        </ul>
       </li>
       <li>
        [ahref]
        
        <ul class="menu vertical nested currencies-list">
         <li>
          <span class="js-hook--lang-selector-item" data-currencycode="GBP" id="ctl00_ucOffCanvasMenu_ucCurrencySelectorList_rptCurrencies_ctl00_lblCurrency">
           £ GBP
          </span>
         </li>
         <li>
          <span class="js-hook--lang-selector-item" data-currencycode="EUR" id="ctl00_ucOffCanvasMenu_ucCurrencySelectorList_rptCurrencies_ctl01_lblCurrency">
           € EUR
          </span>
         </li>
         <li>
          <span class="js-hook--lang-selector-item" data-currencycode="AUD" id="ctl00_ucOffCanvasMenu_ucCurrencySelectorList_rptCurrencies_ctl02_lblCurrency">
           $ AUD
          </span>
         </li>
         <li>
          kr DKK[content18][content19][linkx][content20][content1][content2]
         </li>
         <li>
          <span class="js-hook--lang-selector-item" data-currencycode="CNY" id="ctl00_ucOffCanvasMenu_ucCurrencySelectorList_rptCurrencies_ctl04_lblCurrency">
           ¥ CNY
          </span>
         </li>
         <li>
          <span class="js-hook--lang-selector-item" data-currencycode="KRW" id="ctl00_ucOffCanvasMenu_ucCurrencySelectorList_rptCurrencies_ctl05_lblCurrency">
           ₩ KRW
          </span>
         </li>
         <li>
          <span class="js-hook--lang-selector-item" data-currencycode="SEK" id="ctl00_ucOffCanvasMenu_ucCurrencySelectorList_rptCurrencies_ctl06_lblCurrency">
           kr SEK
          </span>
         </li>
         <li>
          <span class="js-hook--lang-selector-item" data-currencycode="USD" id="ctl00_ucOffCanvasMenu_ucCurrencySelectorList_rptCurrencies_ctl07_lblCurrency">
           $ USD
          </span>
         </li>
        </ul>
       </li>
       <li class="mob-lang-menu">
        [linkx]
        
        <ul class="menu vertical nested" data-lang-selector="">
         <li>
          [ahref]
          
         </li>
         <li>
          [ahref]
          
         </li>
         <li>
          [ahref]
          
         </li>
         <li>
          [ahref]
          
         </li>
         <li>
          [ahref]
          
         </li>
         <li>
          <a class="flag it-IT" href="/destinations/paris?lang=it-IT" id="ctl00_ucOffCanvasMenu_ucLanguageSelectorList_rptLanguages_ctl05_hypCulture" onclick="Generator.DataLayer.logLanguageChange('it-IT');">
           Italiano
          </a>
         </li>
         <li>
          [ahref]
          
         </li>
         <li>
          [linkx]
          
         </li>
         <li>
          [linkx]
          
         </li>
         <li>
          [ahref]
          
         </li>
         <li>
          <a class="flag zh-CN" href="/destinations/paris?lang=zh-CN" id="ctl00_ucOffCanvasMenu_ucLanguageSelectorList_rptLanguages_ctl10_hypCulture" onclick="Generator.DataLayer.logLanguageChange('zh-CN');">
           简体中文
          </a>
         </li>
        </ul>
       </li>
      </ul>
     </div>
     <div class="off-canvas-content" data-off-canvas-content="">
      <main role="main">
       <div id="destinationHeroContainer">
        <section class="destination-hero" id="ctl00_MainContent_destinationHero_destinationHero" v-bind:class="{ 'destination-hero--location-overlay' : locationOverlay }">
         <div class="destination-hero__image" data-interchange="[/getmedia/8239a5bc-a514-433c-896f-9b65bd93b75e/generator_paris_.jpg?ext=.jpg&amp;height=340, small], [/getmedia/8239a5bc-a514-433c-896f-9b65bd93b75e/generator_paris_.jpg?ext=.jpg&amp;height=420, medium], [/getmedia/8239a5bc-a514-433c-896f-9b65bd93b75e/generator_paris_.jpg?width=1600&amp;height=1067&amp;ext=.jpg&amp;maxsidesize=1600, large]" id="ctl00_MainContent_destinationHero_destinationHeroImage">
         </div>
         <div class="destination-hero__location-overlay destination-hero__location-overlay--360" v-bind:class="{ 'destination-hero__location-overlay--visible' : insideView }">
         </div>
         <div class="destination-hero__location-overlay destination-hero__location-overlay--map" data-google-map="" data-google-map-lat="48.8781526" data-google-map-long="2.3698083" id="ctl00_MainContent_destinationHero_map-overlay" v-bind:class="{ 'destination-hero__location-overlay--visible' : mapVisible }">
          <div class="google-map" id="ctl00_MainContent_destinationHero_map">
          </div>
         </div>
         <div class="destination-hero__content">
          <div class="destination-hero__title-container" v-bind:class="{ 'destination-hero__title-container--hidden' : locationOverlay }">
           <h1 class="destination-hero__title">
            [mkey1][symbolx][pkey1][symbolx][keyword1][bracketl1][bracketr1][symbolx][bracketl2][siter1][bracketr2][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx]
           </h1>
           <h2 class="destination-hero__subtitle">
            [mkey1][symbolx][pkey1][symbolx][keyword1][bracketl1][bracketr1][symbolx][bracketl2][siter1][bracketr2][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx]
           </h2>
          </div>
         </div>
         <div class="destination-hero__footer">
          <div class="destination-hero__location-panel" v-bind:class="{ 'destination-hero__location-panel--open' : locationPanelOpen, 'destination-hero__location-panel--collapsed' : outsideView }">
           <div class="destination-hero__location-panel-header" data-google-map-viewmap="ctl00_MainContent_destinationHero_map-overlay" v-on:click="onLocationHeaderClick">
            <span class="destination-hero__location-panel-header-text">
             <span itemprop="streetAddress">
              9-11 PLACE DU COLONEL FABIEN
             </span>
             ,
             <span itemprop="addressLocality">
              Paris
             </span>
             ,
             <span itemprop="addressCountry">
              France
             </span>
             ,
             <span itemprop="postalCode">
              75010
             </span>
            </span>
           </div>
           <div class="destination-hero__location-panel-content">
            <p>
             [ahref]
             
            </p>
            <p>
             [linkx]
             
            </p>
            <h3>
             [mkey1][symbolx][pkey1][symbolx][keyword1][bracketl1][bracketr1][symbolx][bracketl2][siter1][bracketr2][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx]
            </h3>
            <p>
             공항에서 택시를 이용하면, 약 40유로 정도의 요금이 나옵니다. 기차를 이용할 경우에는 RER B를 이용하여 북부 철도 역(Gare du Nord)으로 오십시오. 기차는 6분~15분마다 운행하며 약 30분 정도 소요됩니다. 편도 요금은 9.75유로입니다.
            </p>
            <p>
             북부 철도 역에서는 도보로 15~20분 정도면 파리 Generator 호스텔에 도착할 수 있습니다. 아니면 라샤펠(La Chapelle)에서 파리 전철 2번 라인(Line 2)을 타고 콜로넬 파비앙(Colonel Fabien) 역에서 내리십시오.
            </p>
            <p>
             버스를 이용하는 경우에는 350번을 타고 파리 서쪽 역(Gare de Paris-Est)까지 오십시오. 역에서 15분 정도 걸으면 파리 Generator에 도착합니다.
            </p>
            <p>
             공항과 호스텔 사이를 오가는 셔틀버스를 25유로에 예약할 수 있습니다. 이메일을 travelshop.paris@generatorhostels.com으로 보내십시오.
            </p>
           </div>
          </div>
          <ul class="destination-hero__action-list" v-bind:class="{ 'destination-hero__action-list--invert' : locationOverlay }">
           <li class="destination-hero__action-item destination-hero__action-item--gallery" data-open="destinationsGalleryModal" data-slide-index="0">
            <span>
             See All
            </span>
           </li>
           <li class="destination-hero__action-item destination-hero__action-item--outside" data-google-map-viewstreet="ctl00_MainContent_destinationHero_map-overlay" id="ctl00_MainContent_destinationHero_liOutsideView">
            <div v-on:click="onOutsideViewClick">
             <span>
              See Outside
             </span>
            </div>
           </li>
          </ul>
         </div>
         <div class="destination-hero__right">
          <div class="destination-hero__booking" id="ctl00_MainContent_destinationHero_booking">
           <h2 class="destination-hero__subtitle">
            [mkey1][symbolx][pkey1][symbolx][keyword1][bracketl1][bracketr1][symbolx][bracketl2][siter1][bracketr2][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx]
           </h2>
           <div data-current-destination="파리" id="ctl00_MainContent_destinationHero_pnlStickyForm">
            <div class="daterange-picker" id="ctl00_MainContent_destinationHero_ucBookingDateRangeCalendar_pnlCalendarField">
             <div>
              <span data-clndr-datefield="" id="ctl00_MainContent_destinationHero_ucBookingDateRangeCalendar_lblRangeLabel">
               ARRIVAL - DEPARTURE
              </span>
              <section data-clndr-container="">
              </section>
             </div>
            </div>
            [ahref]
            
           </div>
           <div id="ctl00_MainContent_destinationHero_pnlBookingButtons">
            <h2 class="destination-hero__subtitle destination-hero__subtitle--margin-top">
             [mkey1][symbolx][pkey1][symbolx][keyword1][bracketl1][bracketr1][symbolx][bracketl2][siter1][bracketr2][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx]
            </h2>
            <div id="ctl00_MainContent_destinationHero_pnlButtonBookTonight">
             [ahref]
             
            </div>
            <div id="ctl00_MainContent_destinationHero_pnlButtonBookTomorrow">
             [linkx]
             
            </div>
            <div id="ctl00_MainContent_destinationHero_pnlButtonBookThisWeekend">
             <a class="g-button g-button--default-outline g-button--primary g-button--thin g-button--full destination-hero__booking-button" href=")" id="ctl00_MainContent_destinationHero_lnkBookThisWeekend">
              이번 주말 예약
             </a>
            </div>
           </div>
          </div>
         </div>
        </section>
       </div>
       <div class="destination-gallery" id="ctl00_MainContent_ucDestinationGallery_pnlDestinationGallery" style="display: none;">
        <div class="reveal large gallery-modal" data-reveal="" id="destinationsGalleryModal">
         <div class="gallery">
          <div>
           <div>
           </div>
           <div class="gallery__caption">
            <div class="gallery__caption-text">
            </div>
           </div>
          </div>
          <div>
           <div>
           </div>
           <div class="gallery__caption">
            <div class="gallery__caption-text">
            </div>
           </div>
          </div>
          <div>
           <div>
           </div>
           <div class="gallery__caption">
            <div class="gallery__caption-text">
            </div>
           </div>
          </div>
          <div>
           <div>
           </div>
           <div class="gallery__caption">
            <div class="gallery__caption-text">
            </div>
           </div>
          </div>
          <div>
           <div>
           </div>
           <div class="gallery__caption">
            <div class="gallery__caption-text">
            </div>
           </div>
          </div>
          <div>
           <div>
           </div>
           <div class="gallery__caption">
            <div class="gallery__caption-text">
            </div>
           </div>
          </div>
          <div>
           <div>
           </div>
           <div class="gallery__caption">
            <div class="gallery__caption-text">
            </div>
           </div>
          </div>
          <div>
           <div>
           </div>
           <div class="gallery__caption">
            <div class="gallery__caption-text">
            </div>
           </div>
          </div>
          <div>
           <div>
           </div>
           <div class="gallery__caption">
            <div class="gallery__caption-text">
            </div>
           </div>
          </div>
          <div>
           <div>
           </div>
           <div class="gallery__caption">
            <div class="gallery__caption-text">
            </div>
           </div>
          </div>
          <div>
           <div>
           </div>
           <div class="gallery__caption">
            <div class="gallery__caption-text">
            </div>
           </div>
          </div>
          <div>
           <div>
           </div>
           <div class="gallery__caption">
            <div class="gallery__caption-text">
            </div>
           </div>
          </div>
          <div>
           <div>
           </div>
           <div class="gallery__caption">
            <div class="gallery__caption-text">
            </div>
           </div>
          </div>
          <div>
           <div>
           </div>
           <div class="gallery__caption">
            <div class="gallery__caption-text">
            </div>
           </div>
          </div>
          <div>
           <div>
           </div>
           <div class="gallery__caption">
            <div class="gallery__caption-text">
             <li>[link]</li><li>[link]</li>[link]<li>[keywordx][symbolx][keywordx][symbolx][bracketl4][keywordx][bracketr4][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx]</li><li>[link]</li>
            </div>
           </div>
          </div>
          <div>
           <div>
           </div>
           <div class="gallery__caption">
            <div class="gallery__caption-text">
            </div>
           </div>
          </div>
          <div>
           <div>
           </div>
           <div class="gallery__caption">
            <div class="gallery__caption-text">
            </div>
           </div>
          </div>
          <div>
           <div>
           </div>
           <div class="gallery__caption">
            <div class="gallery__caption-text">
            </div>
           </div>
          </div>
          <div>
           <div>
           </div>
           <div class="gallery__caption">
            <div class="gallery__caption-text">
            </div>
           </div>
          </div>
          <div>
           <div>
           </div>
           <div class="gallery__caption">
            <div class="gallery__caption-text">
            </div>
           </div>
          </div>
         </div>
         <button aria-label="Close modal" class="close-button" data-close="" type="button">
          <span aria-hidden="true">
           ×
          </span>
         </button>
        </div>
        <div class="row collapse small-up-3 large-up-2" id="ctl00_MainContent_ucDestinationGallery_destinationGalleryThumbs">
        </div>
       </div>
       <div class="g-subnav__container">
        <ul class="g-subnav" data-magellan="" data-offset="200" data-threshold="200">
         <li class="g-subnav__item">
          <a href="r">
           방
          </a>
         </li>
         <li class="g-subnav__item">
          [linkx]
          
         </li>
        </ul>
        <div class="g-page__content">
         <div>
          <div class="grid-row__container r-container-full">
           <div class="grid-row r-grid">
            <div class="r-col-6 r-col-lg-auto r-col-bleed grid-item">
             <article class="static-grid-item static-grid-item--expand-on-hover static-grid-item--margin static-grid-item--blue static-grid-item--underline static-grid-item--underline-peach static-grid-item--large static-grid-item--underline static-grid-item--underline-0" data-open="room-type_1089" data-open-type="room-type" id="ctl00_MainContent_plcRoomTypesCTAZone_lt_RoomTypesCTAZone_RoomTypeCTAGridItem_staticGridItem_staticGridItem">
              <div class="static-grid-item__image" data-interchange="[/getmedia/15a8758a-797b-48e5-80cb-63e8410064d1/room_2zd.jpg?maxsidesize=320&amp;ext=.jpg, small], [/getmedia/15a8758a-797b-48e5-80cb-63e8410064d1/room_2zd.jpg?maxsidesize=640&amp;ext=.jpg, smallretina], [/getmedia/15a8758a-797b-48e5-80cb-63e8410064d1/room_2zd.jpg?maxsidesize=640&amp;ext=.jpg, medium], [/getmedia/15a8758a-797b-48e5-80cb-63e8410064d1/room_2zd.jpg?maxsidesize=1024&amp;ext=.jpg, mediumretina], [/getmedia/15a8758a-797b-48e5-80cb-63e8410064d1/room_2zd.jpg?maxsidesize=1024&amp;ext=.jpg, large]" id="ctl00_MainContent_plcRoomTypesCTAZone_lt_RoomTypesCTAZone_RoomTypeCTAGridItem_staticGridItem_staticGridItemImage">
              </div>
              <div class="static-grid-item__content static-grid-item__content--bottom-left static-grid-item__content--padding" id="ctl00_MainContent_plcRoomTypesCTAZone_lt_RoomTypesCTAZone_RoomTypeCTAGridItem_staticGridItem_staticGridItemContent">
               [linkx]
               
               <p class="static-grid-item__description static-grid-item__description--light" id="ctl00_MainContent_plcRoomTypesCTAZone_lt_RoomTypesCTAZone_RoomTypeCTAGridItem_staticGridItem_staticGridItemDescription">
                부터
                <span data-pricing="">
                 <span data-currency-symbol="€" itemprop="priceCurrency">
                  €
                 </span>
                 <span data-price="78.0000" itemprop="price">
                  78.0000
                 </span>
                </span>
                객실당
                <br/>
                투숙 인원 1-2
               </p>
               <div class="static-grid-item__buttons" id="ctl00_MainContent_plcRoomTypesCTAZone_lt_RoomTypesCTAZone_RoomTypeCTAGridItem_staticGridItem_staticGridItemButtons">
                [linkx]
                
               </div>
              </div>
             </article>
            </div>
            <div class="r-col-6 r-col-lg-auto r-col-bleed grid-item">
             <article class="static-grid-item static-grid-item--expand-on-hover static-grid-item--margin static-grid-item--blue static-grid-item--underline static-grid-item--underline-peach static-grid-item--large static-grid-item--underline static-grid-item--underline-0" data-open="room-type_1090" data-open-type="room-type" id="ctl00_MainContent_plcRoomTypesCTAZone_lt_RoomTypesCTAZone_RoomTypeCTAGridItem1_staticGridItem_staticGridItem">
              <div class="static-grid-item__image" data-interchange="[/getmedia/fc9f9d1c-a889-47c9-9ecc-3ab1ba8f5233/room_4p.jpg?maxsidesize=320&amp;ext=.jpg, small], [/getmedia/fc9f9d1c-a889-47c9-9ecc-3ab1ba8f5233/room_4p.jpg?maxsidesize=640&amp;ext=.jpg, smallretina], [/getmedia/fc9f9d1c-a889-47c9-9ecc-3ab1ba8f5233/room_4p.jpg?maxsidesize=640&amp;ext=.jpg, medium], [/getmedia/fc9f9d1c-a889-47c9-9ecc-3ab1ba8f5233/room_4p.jpg?maxsidesize=1024&amp;ext=.jpg, mediumretina], [/getmedia/fc9f9d1c-a889-47c9-9ecc-3ab1ba8f5233/room_4p.jpg?maxsidesize=1024&amp;ext=.jpg, large]" id="ctl00_MainContent_plcRoomTypesCTAZone_lt_RoomTypesCTAZone_RoomTypeCTAGridItem1_staticGridItem_staticGridItemImage">
              </div>
              <div class="static-grid-item__content static-grid-item__content--bottom-left static-grid-item__content--padding" id="ctl00_MainContent_plcRoomTypesCTAZone_lt_RoomTypesCTAZone_RoomTypeCTAGridItem1_staticGridItem_staticGridItemContent">
               [linkx]
               
               <p class="static-grid-item__description static-grid-item__description--light" id="ctl00_MainContent_plcRoomTypesCTAZone_lt_RoomTypesCTAZone_RoomTypeCTAGridItem1_staticGridItem_staticGridItemDescription">
                부터
                <span data-pricing="">
                 <span data-currency-symbol="€" itemprop="priceCurrency">
                  €
                 </span>
                 <span data-price="17.0000" itemprop="price">
                  17.0000
                 </span>
                </span>
                침대 당
                <br/>
                투숙 인원 1-10
               </p>
               <div class="static-grid-item__buttons" id="ctl00_MainContent_plcRoomTypesCTAZone_lt_RoomTypesCTAZone_RoomTypeCTAGridItem1_staticGridItem_staticGridItemButtons">
                [ahref]
                
               </div>
              </div>
             </article>
            </div>
           </div>
          </div>
         </div>
         <section class="section section--margin-top section--column-padding" data-magellan-target="location" id="location">
          <div class="row">
           <div class="columns large-6">
            <div class="section__content section__content--introduction">
             <h1>
              <b>[mkey1][symbolx][pkey1][symbolx][keyword1][bracketl1][bracketr1][symbolx][bracketl2][siter1][bracketr2][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx]</b>
             </h1>
             <p>
              파리 Generator는 오스카 니마이어(Oscar Niemeyer)의 대표적 작품인 프랑스 공산당 본부 건너편에 있습니다. 호스텔은 쌩마르땡 운하 및 뷔트 쇼몽 공원 바로 옆에 있으며, 북부 철도 역(Gard du Nord)에서 15분 도보 거리에 있습니다. 영화 같은 느낌을 주는 디자인, 풍부한 색채, 빛이 나는 리셉션 구역 그리고 피터 세제(Pieter Ceizer)의 예술 작품으로 꾸민 모로코 스타일의 휴식 공간을 갖추고 있어, 방문객은 파리 아트하우스 영화 세트장에 있다는 느낌을 받게 됩니다.
             </p>
             <p>
              호스텔 지상 층에는 카페 파비앙(Café Fabien)이 위치하고 있는데, 정원을 내다볼 수 있는 식사 구역과 온실을 갖추고 있습니다. 휘어진 계단을 따라 내려가면 파리 지하철에서 영감을 받은 아치 형태의 천장을 갖춘 Le Club이 나옵니다. 9층으로 올라가면 Le Rooftop이 있는데, 그곳 바에서는 사크레쾨르(Sacré-Cœur) 성당과 몽마르트르 언덕의 놀라운 전경을 볼 수 있습니다. 호스텔 Generator 파리는 한 곳에서 파리의 가장 좋은 것들을 접할 수 있는 곳입니다.
             </p>
            </div>
           </div>
           <div class="columns large-6">
            <div class="content-panel content-panel--light" id="ctl00_MainContent_ucCommonFacilitiesPanel_pnlFacilities">
             <h3 class="content-panel__header">
              [mkey1][symbolx][pkey1][symbolx][keyword1][bracketl1][bracketr1][symbolx][bracketl2][siter1][bracketr2][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx]
             </h3>
             <div class="row collapse">
              <div class="columns large-6">
               <ul class="menu vertical iconlist">
                <li class="iconwifi" id="ctl00_MainContent_ucCommonFacilitiesPanel_ucTwoColFacilities_rptLeftFacilities_ctl01_liFacility">
                 무료 와이파이
                </li>
                <li class="iconfemale" id="ctl00_MainContent_ucCommonFacilitiesPanel_ucTwoColFacilities_rptLeftFacilities_ctl02_liFacility">
                 여성 전용실
                </li>
                <li class="iconbeer" id="ctl00_MainContent_ucCommonFacilitiesPanel_ucTwoColFacilities_rptLeftFacilities_ctl03_liFacility">
                 바
                </li>
               </ul>
              </div>
              <div class="columns large-6">
               <ul class="menu vertical iconlist">
                <li class="iconreception" id="ctl00_MainContent_ucCommonFacilitiesPanel_ucTwoColFacilities_rptRightFacilities_ctl01_liFacility">
                 24시간 리셉션 운영
                </li>
                <li class="icontravelshop" id="ctl00_MainContent_ucCommonFacilitiesPanel_ucTwoColFacilities_rptRightFacilities_ctl02_liFacility">
                 여행물품 숍
                </li>
                <li class="iconcupandsaucer" id="ctl00_MainContent_ucCommonFacilitiesPanel_ucTwoColFacilities_rptRightFacilities_ctl03_liFacility">
                 카페
                </li>
               </ul>
              </div>
             </div>
            </div>
            <div class="content-panel content-panel--light" id="ctl00_MainContent_ucDestinationFacilitiesPanel_pnlFacilities">
             <h3 class="content-panel__header">
              [mkey1][symbolx][pkey1][symbolx][keyword1][bracketl1][bracketr1][symbolx][bracketl2][siter1][bracketr2][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx]
             </h3>
             <div class="row collapse">
              <div class="columns large-6">
               <ul class="menu vertical iconlist">
                <li class="iconwashingmachine" id="ctl00_MainContent_ucDestinationFacilitiesPanel_ucTwoColFacilities_rptLeftFacilities_ctl01_liFacility">
                 세탁물
                </li>
                <li class="icontravelshop" id="ctl00_MainContent_ucDestinationFacilitiesPanel_ucTwoColFacilities_rptLeftFacilities_ctl02_liFacility">
                 이벤트 공간
                </li>
                <li class="iconluggagestorage" id="ctl00_MainContent_ucDestinationFacilitiesPanel_ucTwoColFacilities_rptLeftFacilities_ctl03_liFacility">
                 짐 보관
                </li>
               </ul>
              </div>
              <div class="columns large-6">
               <ul class="menu vertical iconlist">
                <li class="iconterrace" id="ctl00_MainContent_ucDestinationFacilitiesPanel_ucTwoColFacilities_rptRightFacilities_ctl01_liFacility">
                 옥상 테라스
                </li>
                <li class="iconmartini" id="ctl00_MainContent_ucDestinationFacilitiesPanel_ucTwoColFacilities_rptRightFacilities_ctl02_liFacility">
                 지하 바
                </li>
                <li class="iconchair" id="ctl00_MainContent_ucDestinationFacilitiesPanel_ucTwoColFacilities_rptRightFacilities_ctl03_liFacility">
                 휴게 공간
                </li>
               </ul>
              </div>
             </div>
            </div>
           </div>
          </div>
         </section>
         <section data-magellan-target="spaces" id="spaces">
          <div class="grid-row__container r-container">
           <div class="grid-row r-grid">
            <div class="r-col-6 r-col-lg-auto r-col-bleed grid-item">
             <article class="static-grid-item static-grid-item--margin" data-open="ctl00_MainContent_plcSpaceGalleriesZone_lt_SpaceGalleryZone_SpaceGalleryAccordionItem_ucSpaceGallery_ucSpaceModal_pnlRoomPodModal" id="ctl00_MainContent_plcSpaceGalleriesZone_lt_SpaceGalleryZone_SpaceGalleryAccordionItem_ucSpaceGallery_staticGridItem_staticGridItem">
              <div class="static-grid-item__image g-placeholder" data-interchange="[/getmedia/a6237136-d7c3-4568-8a57-94fe2bf76a1f/generator-paris-rooftop-nov-2016-_66_0370.jpeg?width=900&amp;height=600&amp;ext=.jpeg&amp;maxsidesize=320, small], [/getmedia/a6237136-d7c3-4568-8a57-94fe2bf76a1f/generator-paris-rooftop-nov-2016-_66_0370.jpeg?width=900&amp;height=600&amp;ext=.jpeg&amp;maxsidesize=640, smallretina], [/getmedia/a6237136-d7c3-4568-8a57-94fe2bf76a1f/generator-paris-rooftop-nov-2016-_66_0370.jpeg?width=900&amp;height=600&amp;ext=.jpeg&amp;maxsidesize=640, medium], [/getmedia/a6237136-d7c3-4568-8a57-94fe2bf76a1f/generator-paris-rooftop-nov-2016-_66_0370.jpeg?width=900&amp;height=600&amp;ext=.jpeg&amp;maxsidesize=1024, mediumretina], [/getmedia/a6237136-d7c3-4568-8a57-94fe2bf76a1f/generator-paris-rooftop-nov-2016-_66_0370.jpeg?width=900&amp;height=600&amp;ext=.jpeg&amp;maxsidesize=1024, large]" id="ctl00_MainContent_plcSpaceGalleriesZone_lt_SpaceGalleryZone_SpaceGalleryAccordionItem_ucSpaceGallery_staticGridItem_staticGridItemImage">
              </div>
              <div class="static-grid-item__content static-grid-item__content--bottom-left static-grid-item__content--padding" id="ctl00_MainContent_plcSpaceGalleriesZone_lt_SpaceGalleryZone_SpaceGalleryAccordionItem_ucSpaceGallery_staticGridItem_staticGridItemContent">
               <a class="static-grid-item__overlay-link" id="ctl00_MainContent_plcSpaceGalleriesZone_lt_SpaceGalleryZone_SpaceGalleryAccordionItem_ucSpaceGallery_staticGridItem_staticGridItemLink">
                <p class="static-grid-item__caption static-grid-item__caption--light" id="ctl00_MainContent_plcSpaceGalleriesZone_lt_SpaceGalleryZone_SpaceGalleryAccordionItem_ucSpaceGallery_staticGridItem_staticGridItemCaption">
                 <span id="ctl00_MainContent_plcSpaceGalleriesZone_lt_SpaceGalleryZone_SpaceGalleryAccordionItem_ucSpaceGallery_staticGridItem_staticGridItemCaptionText">
                  KHAYMA ROOFTOP
                 </span>
                </p>
               </a>
              </div>
             </article>
            </div>
            <div class="reveal modal space-modal" data-reveal="" id="ctl00_MainContent_plcSpaceGalleriesZone_lt_SpaceGalleryZone_SpaceGalleryAccordionItem_ucSpaceGallery_ucSpaceModal_pnlRoomPodModal">
             <span class="modal__close-button" data-close="" type="button">
              Close
             </span>
             <section class="grid-row__container r-container-full">
              <div class="grid-row r-grid">
               <div class="r-col-12 r-col-lg-5">
                <div class="modal__gallery modal__gallery--space space-gallery" id="ctl00_MainContent_plcSpaceGalleriesZone_lt_SpaceGalleryZone_SpaceGalleryAccordionItem_ucSpaceGallery_ucSpaceModal_pnlGalleryContainer">
                 <div data-interchange="[/getmedia/a6237136-d7c3-4568-8a57-94fe2bf76a1f/generator-paris-rooftop-nov-2016-_66_0370.jpeg?ext=.jpeg&amp;width=600, small],[/getmedia/a6237136-d7c3-4568-8a57-94fe2bf76a1f/generator-paris-rooftop-nov-2016-_66_0370.jpeg?ext=.jpeg&amp;width=800, medium],[/getmedia/a6237136-d7c3-4568-8a57-94fe2bf76a1f/generator-paris-rooftop-nov-2016-_66_0370.jpeg?ext=.jpeg&amp;width=1400, large]" id="ctl00_MainContent_plcSpaceGalleriesZone_lt_SpaceGalleryZone_SpaceGalleryAccordionItem_ucSpaceGallery_ucSpaceModal_rptSpaceGallery_ctl00_pnlGalleryImage">
                  <figcaption>
                   Le Rooftop
                  </figcaption>
                 </div>
                 <div data-interchange="[/getmedia/a155c9a9-7158-477c-b823-a6671800ee39/generator-paris-rooftop-nov-2016-_66_0398-copy.jpeg?ext=.jpeg&amp;width=600, small],[/getmedia/a155c9a9-7158-477c-b823-a6671800ee39/generator-paris-rooftop-nov-2016-_66_0398-copy.jpeg?ext=.jpeg&amp;width=800, medium],[/getmedia/a155c9a9-7158-477c-b823-a6671800ee39/generator-paris-rooftop-nov-2016-_66_0398-copy.jpeg?ext=.jpeg&amp;width=1400, large]" id="ctl00_MainContent_plcSpaceGalleriesZone_lt_SpaceGalleryZone_SpaceGalleryAccordionItem_ucSpaceGallery_ucSpaceModal_rptSpaceGallery_ctl01_pnlGalleryImage">
                  <figcaption>
                   Le Rooftop
                  </figcaption>
                 </div>
                 <div data-interchange="[/getmedia/b8756f93-f12a-4489-9178-6c84069f13db/generator-paris-rooftop-nov-2016-_66_0438.jpeg?ext=.jpeg&amp;width=600, small],[/getmedia/b8756f93-f12a-4489-9178-6c84069f13db/generator-paris-rooftop-nov-2016-_66_0438.jpeg?ext=.jpeg&amp;width=800, medium],[/getmedia/b8756f93-f12a-4489-9178-6c84069f13db/generator-paris-rooftop-nov-2016-_66_0438.jpeg?ext=.jpeg&amp;width=1400, large]" id="ctl00_MainContent_plcSpaceGalleriesZone_lt_SpaceGalleryZone_SpaceGalleryAccordionItem_ucSpaceGallery_ucSpaceModal_rptSpaceGallery_ctl02_pnlGalleryImage">
                  <figcaption>
                   Le Rooftop
                  </figcaption>
                 </div>
                </div>
               </div>
               <div class="r-col-12 r-col-lg-7">
                <div class="modal__header modal__header--large modal__header--underline">
                 <h3>
                  [mkey1][symbolx][pkey1][symbolx][keyword1][bracketl1][bracketr1][symbolx][bracketl2][siter1][bracketr2][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx]
                 </h3>
                </div>
                <section class="section" id="ctl00_MainContent_plcSpaceGalleriesZone_lt_SpaceGalleryZone_SpaceGalleryAccordionItem_ucSpaceGallery_ucSpaceModal_pnlCallout">
                 <h3>
                  [mkey1][symbolx][pkey1][symbolx][keyword1][bracketl1][bracketr1][symbolx][bracketl2][siter1][bracketr2][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx]
                 </h3>
                 <p>
                  Le Rooftop은 파리에서 가장 멋진 바 중 하나입니다. 호스텔 건물의 9층에 위치한 Le Rooftop에서는 칵테일을 마시며 몽마르트르와 사크레쾨르 성당으로 해가 지는 장관을 감상할 수 있습니다. 그야말로 멋진 밤을 시작하기에 최고의 장소입니다.
                 </p>
                 <div id="ctl00_MainContent_plcSpaceGalleriesZone_lt_SpaceGalleryZone_SpaceGalleryAccordionItem_ucSpaceGallery_ucSpaceModal_pnlCalloutFooter">
                  <p>
                   음식과 조식이 제공됩니다. 친절한 직원에게 문의하세요.
                  </p>
                 </div>
                </section>
                <section class="section" id="ctl00_MainContent_plcSpaceGalleriesZone_lt_SpaceGalleryZone_SpaceGalleryAccordionItem_ucSpaceGallery_ucSpaceModal_pnlHowToHire">
                 <h3>
                  [mkey1][symbolx][pkey1][symbolx][keyword1][bracketl1][bracketr1][symbolx][bracketl2][siter1][bracketr2][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx]
                 </h3>
                 <p>
                  <section data-anchor="spaces">
                   <p>
                    자세한 정보는
                    [ahref]
                    
                    으로 문의하시기 바랍니다.
                   </p>
                  </section>
                 </p>
                </section>
                <section class="section" id="ctl00_MainContent_plcSpaceGalleriesZone_lt_SpaceGalleryZone_SpaceGalleryAccordionItem_ucSpaceGallery_ucSpaceModal_pnlOpeningHours">
                 <div>
                  <p>
                   Le Rooftop은 날씨가 허락하는 한 오전 16시에 문을 엽니다.
                  </p>
                  <p>
                   <strong>
                    영업 시작 시간:
                   </strong>
                  </p>
                  <p>
                   월요일 - 일요일
                   <br/>
                   16:00 - 22:00
                  </p>
                 </div>
                </section>
               </div>
              </div>
             </section>
            </div>
            <div class="r-col-6 r-col-lg-auto r-col-bleed grid-item">
             <article class="static-grid-item static-grid-item--margin" data-open="ctl00_MainContent_plcSpaceGalleriesZone_lt_SpaceGalleryZone_SpaceGalleryAccordionItem1_ucSpaceGallery_ucSpaceModal_pnlRoomPodModal" id="ctl00_MainContent_plcSpaceGalleriesZone_lt_SpaceGalleryZone_SpaceGalleryAccordionItem1_ucSpaceGallery_staticGridItem_staticGridItem">
              <div class="static-grid-item__image g-placeholder" data-interchange="[/getmedia/61ee1732-7034-4de3-995c-b29ac4526762/generator-paris-cafe-fabien-veranda-nikolas-koenig.jpg?width=900&amp;height=594&amp;ext=.jpg&amp;maxsidesize=320, small], [/getmedia/61ee1732-7034-4de3-995c-b29ac4526762/generator-paris-cafe-fabien-veranda-nikolas-koenig.jpg?width=900&amp;height=594&amp;ext=.jpg&amp;maxsidesize=640, smallretina], [/getmedia/61ee1732-7034-4de3-995c-b29ac4526762/generator-paris-cafe-fabien-veranda-nikolas-koenig.jpg?width=900&amp;height=594&amp;ext=.jpg&amp;maxsidesize=640, medium], [/getmedia/61ee1732-7034-4de3-995c-b29ac4526762/generator-paris-cafe-fabien-veranda-nikolas-koenig.jpg?width=900&amp;height=594&amp;ext=.jpg&amp;maxsidesize=1024, mediumretina], [/getmedia/61ee1732-7034-4de3-995c-b29ac4526762/generator-paris-cafe-fabien-veranda-nikolas-koenig.jpg?width=900&amp;height=594&amp;ext=.jpg&amp;maxsidesize=1024, large]" id="ctl00_MainContent_plcSpaceGalleriesZone_lt_SpaceGalleryZone_SpaceGalleryAccordionItem1_ucSpaceGallery_staticGridItem_staticGridItemImage">
              </div>
              <div class="static-grid-item__content static-grid-item__content--bottom-left static-grid-item__content--padding" id="ctl00_MainContent_plcSpaceGalleriesZone_lt_SpaceGalleryZone_SpaceGalleryAccordionItem1_ucSpaceGallery_staticGridItem_staticGridItemContent">
               [ahref]
               
              </div>
             </article>
            </div>
            <div class="reveal modal space-modal" data-reveal="" id="ctl00_MainContent_plcSpaceGalleriesZone_lt_SpaceGalleryZone_SpaceGalleryAccordionItem1_ucSpaceGallery_ucSpaceModal_pnlRoomPodModal">
             <span class="modal__close-button" data-close="" type="button">
              Close
             </span>
             <section class="grid-row__container r-container-full">
              <div class="grid-row r-grid">
               <div class="r-col-12 r-col-lg-5">
                <div class="modal__gallery modal__gallery--space space-gallery" id="ctl00_MainContent_plcSpaceGalleriesZone_lt_SpaceGalleryZone_SpaceGalleryAccordionItem1_ucSpaceGallery_ucSpaceModal_pnlGalleryContainer">
                 <div data-interchange="[/getmedia/61ee1732-7034-4de3-995c-b29ac4526762/generator-paris-cafe-fabien-veranda-nikolas-koenig.jpg?ext=.jpg&amp;width=600, small],[/getmedia/61ee1732-7034-4de3-995c-b29ac4526762/generator-paris-cafe-fabien-veranda-nikolas-koenig.jpg?ext=.jpg&amp;width=800, medium],[/getmedia/61ee1732-7034-4de3-995c-b29ac4526762/generator-paris-cafe-fabien-veranda-nikolas-koenig.jpg?ext=.jpg&amp;width=1400, large]" id="ctl00_MainContent_plcSpaceGalleriesZone_lt_SpaceGalleryZone_SpaceGalleryAccordionItem1_ucSpaceGallery_ucSpaceModal_rptSpaceGallery_ctl00_pnlGalleryImage">
                  <figcaption>
                   Cafe Fabien
                  </figcaption>
                 </div>
                 <div data-interchange="[/getmedia/7030306f-484e-4331-89fd-9c56ff233467/gen_paris-26_rgb_1600px.jpg?ext=.jpg&amp;width=600, small],[/getmedia/7030306f-484e-4331-89fd-9c56ff233467/gen_paris-26_rgb_1600px.jpg?ext=.jpg&amp;width=800, medium],[/getmedia/7030306f-484e-4331-89fd-9c56ff233467/gen_paris-26_rgb_1600px.jpg?ext=.jpg&amp;width=1400, large]" id="ctl00_MainContent_plcSpaceGalleriesZone_lt_SpaceGalleryZone_SpaceGalleryAccordionItem1_ucSpaceGallery_ucSpaceModal_rptSpaceGallery_ctl01_pnlGalleryImage">
                  <figcaption>
                   Cafe Fabien
                  </figcaption>
                 </div>
                </div>
               </div>
               <div class="r-col-12 r-col-lg-7">
                <div class="modal__header modal__header--large modal__header--underline">
                 <h3>
                  [mkey1][symbolx][pkey1][symbolx][keyword1][bracketl1][bracketr1][symbolx][bracketl2][siter1][bracketr2][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx]
                 </h3>
                </div>
                <section class="section" id="ctl00_MainContent_plcSpaceGalleriesZone_lt_SpaceGalleryZone_SpaceGalleryAccordionItem1_ucSpaceGallery_ucSpaceModal_pnlCallout">
                 <h3>
                  [mkey1][symbolx][pkey1][symbolx][keyword1][bracketl1][bracketr1][symbolx][bracketl2][siter1][bracketr2][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx]
                 </h3>
                 <p>
                  카페 파비앙(Café Fabien)은 파리의 식당 거리에서 영감을 받은 것으로서, 온실에서 도시 정원을 바라볼 수 있는 전망과 함께 프랑스 최고의 음식을 제공합니다. 카페 파비앙은 파리 Generator 호스텔의 대표 장소로서, 바리스타 스타일의 커피와 스낵을 즐기기
                 </p>
                </section>
                <section class="section" id="ctl00_MainContent_plcSpaceGalleriesZone_lt_SpaceGalleryZone_SpaceGalleryAccordionItem1_ucSpaceGallery_ucSpaceModal_pnlHowToHire">
                 [keywordx][symbolx][keywordx][symbolx][bracketl1][keywordx][bracketr1][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][link][link][keywordx][symbolx][keywordx][symbolx][bracketl2][keywordx][bracketr2][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][link]
                </section>
                <section class="section" id="ctl00_MainContent_plcSpaceGalleriesZone_lt_SpaceGalleryZone_SpaceGalleryAccordionItem1_ucSpaceGallery_ucSpaceModal_pnlOpeningHours">
                 <div>
                  <table border="0" cellpadding="0" cellspacing="0" width="451">
                   <tbody>
                    <tr height="20">
                     <td height="20" width="451">
                      <font>
                       조식 07:00-10:00
                      </font>
                     </td>
                    </tr>
                    <tr height="20">
                     <td height="20" width="451">
                      <font>
                       중식 10:00-17:00
                      </font>
                     </td>
                    </tr>
                    <tr height="20">
                     <td height="20" width="451">
                      <font>
                       석식 17:00-22:00
                      </font>
                     </td>
                    </tr>
                   </tbody>
                  </table>
                  <p>
                  </p>
                  <p data-fulltext="" data-placeholder="Translation" dir="ltr">
                   음료 및 스낵 :
                   <br/>
                   07:00 - 02:00
                  </p>
                 </div>
                </section>
               </div>
              </div>
             </section>
            </div>
           </div>
          </div>
         </section>
         <section data-magellan-target="rooms" id="rooms">
          <section class="section section--column-padding" id="ctl00_MainContent_roomsHeader_section">
           <header class="section__header row section__header--large" data-magellan-target="ctl00_MainContent_roomsHeader" id="ctl00_MainContent_roomsHeader">
            <div class="columns large-12">
             <h2 class="" id="ctl00_MainContent_roomsHeader_headerText">
              <b>[mkey1][symbolx][pkey1][symbolx][keyword1][bracketl1][bracketr1][symbolx][bracketl2][siter1][bracketr2][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx]</b>
             </h2>
            </div>
           </header>
          </section>
          <div class="row collapse">
           <div class="columns">
            <div class="booking-cta booking-cta--green show-for-medium" id="ctl00_MainContent_ucBookingCTA_pnlBookingCta">
             <div class="row collapse">
              <div class="text-center columns">
               <span>
                직접 예약:
               </span>
               <span class="booking__prices">
                Best prices guaranteed
               </span>
               <span class="booking__wifi">
                무료 와이파이
               </span>
              </div>
             </div>
            </div>
           </div>
          </div>
          <section class="room-listing" data-magellan-target="%ea%b0%9c%ec%9d%b8-%ec%8b%a4" id="%ea%b0%9c%ec%9d%b8-%ec%8b%a4">
           <section class="section section--column-padding" id="ctl00_MainContent_ucRoomSlider_rptGroupedRooms_ctl01_header_section">
            <header class="section__header row" id="ctl00_MainContent_ucRoomSlider_rptGroupedRooms_ctl01_header_sectionHeader">
             <div class="columns large-12">
              <h2 class="expando-line" id="ctl00_MainContent_ucRoomSlider_rptGroupedRooms_ctl01_header_headerText">
               [mkey1][symbolx][pkey1][symbolx][keyword1][bracketl1][bracketr1][symbolx][bracketl2][siter1][bracketr2][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx]
              </h2>
             </div>
            </header>
           </section>
           <div class="room-list room-slider" data-room-slider="">
            <div class="columns medium-6 large-4 room-column--slider" id="ctl00_MainContent_ucRoomSlider_rptGroupedRooms_ctl01_rptRooms_ctl00_ucRoomSliderPod_pnlRoomColumnSlider">
             <article class="static-grid-item static-grid-item--margin static-grid-item--underline static-grid-item--underline-peach static-grid-item--room-slider-pod" data-room-name="프리미엄-트윈-테라스" id="ctl00_MainContent_ucRoomSlider_rptGroupedRooms_ctl01_rptRooms_ctl00_ucRoomSliderPod_staticGridItem_staticGridItem">
              <div class="static-grid-item__image g-placeholder" data-interchange="[/getmedia/1dddf06a-10c8-4ac8-8b0a-2aade66f8002/gen-paris-premium-room-sinue-serra.jpg?width=900&amp;height=716&amp;ext=.jpg&amp;maxsidesize=320, small], [/getmedia/1dddf06a-10c8-4ac8-8b0a-2aade66f8002/gen-paris-premium-room-sinue-serra.jpg?width=900&amp;height=716&amp;ext=.jpg&amp;maxsidesize=640, smallretina], [/getmedia/1dddf06a-10c8-4ac8-8b0a-2aade66f8002/gen-paris-premium-room-sinue-serra.jpg?width=900&amp;height=716&amp;ext=.jpg&amp;maxsidesize=640, medium], [/getmedia/1dddf06a-10c8-4ac8-8b0a-2aade66f8002/gen-paris-premium-room-sinue-serra.jpg?width=900&amp;height=716&amp;ext=.jpg&amp;maxsidesize=1024, mediumretina], [/getmedia/1dddf06a-10c8-4ac8-8b0a-2aade66f8002/gen-paris-premium-room-sinue-serra.jpg?width=900&amp;height=716&amp;ext=.jpg&amp;maxsidesize=1024, large]" id="ctl00_MainContent_ucRoomSlider_rptGroupedRooms_ctl01_rptRooms_ctl00_ucRoomSliderPod_staticGridItem_staticGridItemImage">
              </div>
              <div class="static-grid-item__content static-grid-item__content--bottom-left static-grid-item__content--padding" id="ctl00_MainContent_ucRoomSlider_rptGroupedRooms_ctl01_rptRooms_ctl00_ucRoomSliderPod_staticGridItem_staticGridItemContent">
               [ahref]
               
               <p class="static-grid-item__description static-grid-item__description--light" id="ctl00_MainContent_ucRoomSlider_rptGroupedRooms_ctl01_rptRooms_ctl00_ucRoomSliderPod_staticGridItem_staticGridItemDescription">
                부터
                <span data-pricing="">
                 <span data-currency-symbol="€" itemprop="priceCurrency">
                  €
                 </span>
                 <span data-price="108.0000" itemprop="price">
                  108.0000
                 </span>
                </span>
                객실당
                <br/>
                <strong>
                 투숙 인원: 1-2
                </strong>
               </p>
               <div class="static-grid-item__buttons" id="ctl00_MainContent_ucRoomSlider_rptGroupedRooms_ctl01_rptRooms_ctl00_ucRoomSliderPod_staticGridItem_staticGridItemButtons">
                [linkx]
                
               </div>
              </div>
             </article>
            </div>
            <div class="reveal modal room-modal" data-reveal="" data-room-type-open="room-type_1089" id="room-modal_626">
             <span class="modal__close-button" data-close="" type="button">
              Close
             </span>
             <div class="vue-content">
              <section class="grid-row__container r-container-full" data-room-name="프리미엄-트윈-테라스" id="ctl00_MainContent_ucRoomSlider_rptGroupedRooms_ctl01_rptRooms_ctl00_ucRoomPodModal_roomPod" itemscope="" itemtype="http://schema.org/Product">
               <div class="grid-row r-grid">
                <div class="r-col-12 r-col-lg-6">
                 <div class="modal__gallery modal__gallery--room" data-room-pod-modal-gallery="">
                  <div id="ctl00_MainContent_ucRoomSlider_rptGroupedRooms_ctl01_rptRooms_ctl00_ucRoomPodModal_rptRoomGallery_ctl00_divGalleryItem" style="background: url('/getmedia/1dddf06a-10c8-4ac8-8b0a-2aade66f8002/gen-paris-premium-room-sinue-serra.jpg?width=900&amp;height=716&amp;ext=.jpg');background-size: cover;background-position: center;background-repeat: no-repeat;">
                  </div>
                  <div id="ctl00_MainContent_ucRoomSlider_rptGroupedRooms_ctl01_rptRooms_ctl00_ucRoomPodModal_rptRoomGallery_ctl01_divGalleryItem" style="background: url('/getmedia/20c1fc75-11a5-4000-8fca-e6cadd18beb1/generator-paris-terrace-room-2-nikolas-koenig.jpg?width=900&amp;height=600&amp;ext=.jpg');background-size: cover;background-position: center;background-repeat: no-repeat;">
                  </div>
                  <div id="ctl00_MainContent_ucRoomSlider_rptGroupedRooms_ctl01_rptRooms_ctl00_ucRoomPodModal_rptRoomGallery_ctl02_divGalleryItem" style="background: url('/getmedia/37415fad-1fba-45d4-9f58-9783076c464c/gen-paris-premium-room-nikolas-koenig.jpg?width=900&amp;height=656&amp;ext=.jpg');background-size: cover;background-position: center;background-repeat: no-repeat;">
                  </div>
                 </div>
                </div>
                <div class="r-col-12 r-col-lg-6">
                 <div class="modal__header modal__header--uppercase">
                  <h3 itemprop="name">
                   [mkey1][symbolx][pkey1][symbolx][keyword1][bracketl1][bracketr1][symbolx][bracketl2][siter1][bracketr2][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx]
                  </h3>
                 </div>
                 <p class="room-modal__price" itemprop="offers" itemscope="" itemtype="http://schema.org/Offer">
                  부터
                  <span data-pricing="">
                   <span data-currency-symbol="€" itemprop="priceCurrency">
                    €
                   </span>
                   <span data-price="108.0000" itemprop="price">
                    108.0000
                   </span>
                  </span>
                  객실당
                 </p>
                 <p class="room-modal__sleeps">
                  <strong>
                   투숙 인원:
                        1-2
                  </strong>
                 </p>
                 <div class="row collapse">
                  <div class="columns large-6">
                   [ahref]
                   
                  </div>
                 </div>
                 <p class="room-modal__description" itemprop="description">
                  누구나 전망이 좋은 방을 좋아합니다. 그렇지 않습니까? 매우 특별한 프라이빗 테라스 룸을 경험해 보십시오. 전에는 경험하지 못한 도시를 보게 될 것입니다.
                 </p>
                 <p class="room-modal__description" itemprop="description">
                 </p>
                 <div class="row collapse room-modal__perks">
                  <div class="columns medium-6">
                   <h3>
                    [mkey1][symbolx][pkey1][symbolx][keyword1][bracketl1][bracketr1][symbolx][bracketl2][siter1][bracketr2][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx]
                   </h3>
                   <ul class="menu vertical uppercase iconlist">
                    <li class="iconglass" id="ctl00_MainContent_ucRoomSlider_rptGroupedRooms_ctl01_rptRooms_ctl00_ucRoomPodModal_ucRoomFacilities_rptFacilities_ctl00_liFacility">
                     1+1 음료 쿠폰
                    </li>
                    <li class="iconcoathanger" id="ctl00_MainContent_ucRoomSlider_rptGroupedRooms_ctl01_rptRooms_ctl00_ucRoomPodModal_ucRoomFacilities_rptFacilities_ctl01_liFacility">
                     옷걸이
                    </li>
                    <li class="icontoiletries" id="ctl00_MainContent_ucRoomSlider_rptGroupedRooms_ctl01_rptRooms_ctl00_ucRoomPodModal_ucRoomFacilities_rptFacilities_ctl02_liFacility">
                     무료 욕실용품
                    </li>
                    <li class="icondesk" id="ctl00_MainContent_ucRoomSlider_rptGroupedRooms_ctl01_rptRooms_ctl00_ucRoomPodModal_ucRoomFacilities_rptFacilities_ctl03_liFacility">
                     책상 및 의자
                    </li>
                    <li class="icontoilet" id="ctl00_MainContent_ucRoomSlider_rptGroupedRooms_ctl01_rptRooms_ctl00_ucRoomPodModal_ucRoomFacilities_rptFacilities_ctl04_liFacility">
                     방에 딸린 욕실
                    </li>
                    <li class="icontowels" id="ctl00_MainContent_ucRoomSlider_rptGroupedRooms_ctl01_rptRooms_ctl00_ucRoomPodModal_ucRoomFacilities_rptFacilities_ctl05_liFacility">
                     풍성한 타월
                    </li>
                    <li class="iconmirror" id="ctl00_MainContent_ucRoomSlider_rptGroupedRooms_ctl01_rptRooms_ctl00_ucRoomPodModal_ucRoomFacilities_rptFacilities_ctl06_liFacility">
                     전신 거울
                    </li>
                    <li class="iconclock" id="ctl00_MainContent_ucRoomSlider_rptGroupedRooms_ctl01_rptRooms_ctl00_ucRoomPodModal_ucRoomFacilities_rptFacilities_ctl07_liFacility">
                     체크아웃 시간 연장
                    </li>
                    <li class="iconplugeu" id="ctl00_MainContent_ucRoomSlider_rptGroupedRooms_ctl01_rptRooms_ctl00_ucRoomPodModal_ucRoomFacilities_rptFacilities_ctl08_liFacility">
                     전원 소켓 (EU 어댑터만 해당)
                    </li>
                    <li class="iconterrace" id="ctl00_MainContent_ucRoomSlider_rptGroupedRooms_ctl01_rptRooms_ctl00_ucRoomPodModal_ucRoomFacilities_rptFacilities_ctl09_liFacility">
                     개인용 테라스
                    </li>
                   </ul>
                  </div>
                  <div class="columns medium-6">
                   <h3>
                    [mkey1][symbolx][pkey1][symbolx][keyword1][bracketl1][bracketr1][symbolx][bracketl2][siter1][bracketr2][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx]
                   </h3>
                   <ul class="menu vertical uppercase iconlist">
                    <li class="iconbedsidelamp" id="ctl00_MainContent_ucRoomSlider_rptGroupedRooms_ctl01_rptRooms_ctl00_ucRoomPodModal_ucAllRoomsFacilities_rptFacilities_ctl00_liFacility">
                     침실용 램프
                    </li>
                   </ul>
                  </div>
                 </div>
                 <div class="row collapse">
                  <div class="columns large-6">
                   [linkx]
                   
                  </div>
                 </div>
                </div>
               </div>
              </section>
              <section class="section section--column-padding" id="ctl00_MainContent_ucRoomSlider_rptGroupedRooms_ctl01_rptRooms_ctl00_ucRoomPodModal_interestedRooms_section">
               <header class="section__header row full-width" id="ctl00_MainContent_ucRoomSlider_rptGroupedRooms_ctl01_rptRooms_ctl00_ucRoomPodModal_interestedRooms_sectionHeader">
                <div class="columns large-12">
                 <h2 class="expando-line" id="ctl00_MainContent_ucRoomSlider_rptGroupedRooms_ctl01_rptRooms_ctl00_ucRoomPodModal_interestedRooms_headerText">
                  [mkey1][symbolx][pkey1][symbolx][keyword1][bracketl1][bracketr1][symbolx][bracketl2][siter1][bracketr2][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx]
                 </h2>
                </div>
               </header>
              </section>
              <room-price-grid v-bind:exclude-room="626">
              </room-price-grid>
             </div>
            </div>
            <div class="columns medium-6 large-4 room-column--slider" id="ctl00_MainContent_ucRoomSlider_rptGroupedRooms_ctl01_rptRooms_ctl01_ucRoomSliderPod_pnlRoomColumnSlider">
             <article class="static-grid-item static-grid-item--margin static-grid-item--underline static-grid-item--underline-peach static-grid-item--room-slider-pod" data-room-name="트윈-더블" id="ctl00_MainContent_ucRoomSlider_rptGroupedRooms_ctl01_rptRooms_ctl01_ucRoomSliderPod_staticGridItem_staticGridItem">
              <div class="static-grid-item__image g-placeholder" data-interchange="[/getmedia/3572ae26-7111-45fb-8d8c-9d37512eee19/generator-paris-private-twin-room-nikolas-koenig.jpg?width=900&amp;height=663&amp;ext=.jpg&amp;maxsidesize=320, small], [/getmedia/3572ae26-7111-45fb-8d8c-9d37512eee19/generator-paris-private-twin-room-nikolas-koenig.jpg?width=900&amp;height=663&amp;ext=.jpg&amp;maxsidesize=640, smallretina], [/getmedia/3572ae26-7111-45fb-8d8c-9d37512eee19/generator-paris-private-twin-room-nikolas-koenig.jpg?width=900&amp;height=663&amp;ext=.jpg&amp;maxsidesize=640, medium], [/getmedia/3572ae26-7111-45fb-8d8c-9d37512eee19/generator-paris-private-twin-room-nikolas-koenig.jpg?width=900&amp;height=663&amp;ext=.jpg&amp;maxsidesize=1024, mediumretina], [/getmedia/3572ae26-7111-45fb-8d8c-9d37512eee19/generator-paris-private-twin-room-nikolas-koenig.jpg?width=900&amp;height=663&amp;ext=.jpg&amp;maxsidesize=1024, large]" id="ctl00_MainContent_ucRoomSlider_rptGroupedRooms_ctl01_rptRooms_ctl01_ucRoomSliderPod_staticGridItem_staticGridItemImage">
              </div>
              <div class="static-grid-item__content static-grid-item__content--bottom-left static-grid-item__content--padding" id="ctl00_MainContent_ucRoomSlider_rptGroupedRooms_ctl01_rptRooms_ctl01_ucRoomSliderPod_staticGridItem_staticGridItemContent">
               [linkx]
               
               <p class="static-grid-item__description static-grid-item__description--light" id="ctl00_MainContent_ucRoomSlider_rptGroupedRooms_ctl01_rptRooms_ctl01_ucRoomSliderPod_staticGridItem_staticGridItemDescription">
                부터
                <span data-pricing="">
                 <span data-currency-symbol="€" itemprop="priceCurrency">
                  €
                 </span>
                 <span data-price="78.0000" itemprop="price">
                  78.0000
                 </span>
                </span>
                객실당
                <br/>
                <strong>
                 투숙 인원: 1-2
                </strong>
               </p>
               <div class="static-grid-item__buttons" id="ctl00_MainContent_ucRoomSlider_rptGroupedRooms_ctl01_rptRooms_ctl01_ucRoomSliderPod_staticGridItem_staticGridItemButtons">
                [linkx]
                
               </div>
              </div>
             </article>
            </div>
            <div class="reveal modal room-modal" data-reveal="" data-room-type-open="room-type_1089" id="room-modal_627">
             <span class="modal__close-button" data-close="" type="button">
              Close
             </span>
             <div class="vue-content">
              <section class="grid-row__container r-container-full" data-room-name="트윈-더블" id="ctl00_MainContent_ucRoomSlider_rptGroupedRooms_ctl01_rptRooms_ctl01_ucRoomPodModal_roomPod" itemscope="" itemtype="http://schema.org/Product">
               <div class="grid-row r-grid">
                <div class="r-col-12 r-col-lg-6">
                 <div class="modal__gallery modal__gallery--room" data-room-pod-modal-gallery="">
                  <div id="ctl00_MainContent_ucRoomSlider_rptGroupedRooms_ctl01_rptRooms_ctl01_ucRoomPodModal_rptRoomGallery_ctl00_divGalleryItem" style="background: url('/getmedia/3572ae26-7111-45fb-8d8c-9d37512eee19/generator-paris-private-twin-room-nikolas-koenig.jpg?width=900&amp;height=663&amp;ext=.jpg');background-size: cover;background-position: center;background-repeat: no-repeat;">
                  </div>
                  <div id="ctl00_MainContent_ucRoomSlider_rptGroupedRooms_ctl01_rptRooms_ctl01_ucRoomPodModal_rptRoomGallery_ctl01_divGalleryItem" style="background: url('/getmedia/122b1588-9221-47f5-891d-91f2b3a1c99b/generator_paris_highres-1.jpg?width=900&amp;height=600&amp;ext=.jpg');background-size: cover;background-position: center;background-repeat: no-repeat;">
                  </div>
                  <div id="ctl00_MainContent_ucRoomSlider_rptGroupedRooms_ctl01_rptRooms_ctl01_ucRoomPodModal_rptRoomGallery_ctl02_divGalleryItem" style="background: url('/getmedia/0c1af9a1-5ac5-490c-bd6d-0d13f97e537a/generator_paris_highres-3.jpg?width=900&amp;height=900&amp;ext=.jpg');background-size: cover;background-position: center;background-repeat: no-repeat;">
                  </div>
                 </div>
                </div>
                <div class="r-col-12 r-col-lg-6">
                 <div class="modal__header modal__header--uppercase">
                  <h3 itemprop="name">
                   [mkey1][symbolx][pkey1][symbolx][keyword1][bracketl1][bracketr1][symbolx][bracketl2][siter1][bracketr2][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx]
                  </h3>
                 </div>
                 <p class="room-modal__price" itemprop="offers" itemscope="" itemtype="http://schema.org/Offer">
                  부터
                  <span data-pricing="">
                   <span data-currency-symbol="€" itemprop="priceCurrency">
                    €
                   </span>
                   <span data-price="78.0000" itemprop="price">
                    78.0000
                   </span>
                  </span>
                  객실당
                 </p>
                 <p class="room-modal__sleeps">
                  <strong>
                   투숙 인원:
                        1-2
                  </strong>
                 </p>
                 <div class="row collapse">
                  <div class="columns large-6">
                   <a class="g-button g-button--default g-button--primary g-button--full" href="/booking?be=2&amp;language=ko-KR&amp;mewsCityId=f9bd6e2b-bd1e-4b2b-a91e-5c3ae7cb2c06&amp;currency=KRW" id="ctl00_MainContent_ucRoomSlider_rptGroupedRooms_ctl01_rptRooms_ctl01_ucRoomPodModal_hypCheckAvailability1">
                    이용 가능 여부 확인
                   </a>
                  </div>
                 </div>
                 <p class="room-modal__description" itemprop="description">
                  혼자 여행하거나 커플로 여행하는 사람들을 위한 방입니다. 스타일리시하고 널찍하며 아주 조용합니다.
                 </p>
                 <p class="room-modal__description" itemprop="description">
                 </p>
                 <div class="row collapse room-modal__perks">
                  <div class="columns medium-6">
                   <h3>
                    [mkey1][symbolx][pkey1][symbolx][keyword1][bracketl1][bracketr1][symbolx][bracketl2][siter1][bracketr2][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx]
                   </h3>
                   <ul class="menu vertical uppercase iconlist">
                    <li class="iconcoathanger" id="ctl00_MainContent_ucRoomSlider_rptGroupedRooms_ctl01_rptRooms_ctl01_ucRoomPodModal_ucRoomFacilities_rptFacilities_ctl00_liFacility">
                     옷걸이
                    </li>
                    <li class="icondesk" id="ctl00_MainContent_ucRoomSlider_rptGroupedRooms_ctl01_rptRooms_ctl01_ucRoomPodModal_ucRoomFacilities_rptFacilities_ctl01_liFacility">
                     책상 및 의자
                    </li>
                    <li class="icontoilet" id="ctl00_MainContent_ucRoomSlider_rptGroupedRooms_ctl01_rptRooms_ctl01_ucRoomPodModal_ucRoomFacilities_rptFacilities_ctl02_liFacility">
                     방에 딸린 욕실
                    </li>
                    <li class="icontowels" id="ctl00_MainContent_ucRoomSlider_rptGroupedRooms_ctl01_rptRooms_ctl01_ucRoomPodModal_ucRoomFacilities_rptFacilities_ctl03_liFacility">
                     풍성한 타월
                    </li>
                    <li class="iconmirror" id="ctl00_MainContent_ucRoomSlider_rptGroupedRooms_ctl01_rptRooms_ctl01_ucRoomPodModal_ucRoomFacilities_rptFacilities_ctl04_liFacility">
                     전신 거울
                    </li>
                    <li class="iconplugeu" id="ctl00_MainContent_ucRoomSlider_rptGroupedRooms_ctl01_rptRooms_ctl01_ucRoomPodModal_ucRoomFacilities_rptFacilities_ctl05_liFacility">
                     전원 소켓 (EU 어댑터만 해당)
                    </li>
                   </ul>
                  </div>
                  <div class="columns medium-6">
                   <h3>
                    [mkey1][symbolx][pkey1][symbolx][keyword1][bracketl1][bracketr1][symbolx][bracketl2][siter1][bracketr2][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx]
                   </h3>
                   <ul class="menu vertical uppercase iconlist">
                    <li class="iconbedsidelamp" id="ctl00_MainContent_ucRoomSlider_rptGroupedRooms_ctl01_rptRooms_ctl01_ucRoomPodModal_ucAllRoomsFacilities_rptFacilities_ctl00_liFacility">
                     침실용 램프
            [content15][content16][content17][linkx][content18]
                    </li>
                   </ul>
                  </div>
                 </div>
                 <div class="row collapse">
                  <div class="columns large-6">
                   [linkx]
                   
                  </div>
                 </div>
                </div>
               </div>
              </section>
              <section class="section section--column-padding" id="ctl00_MainContent_ucRoomSlider_rptGroupedRooms_ctl01_rptRooms_ctl01_ucRoomPodModal_interestedRooms_section">
               <header class="section__header row full-width" id="ctl00_MainContent_ucRoomSlider_rptGroupedRooms_ctl01_rptRooms_ctl01_ucRoomPodModal_interestedRooms_sectionHeader">
                <div class="columns large-12">
                 <h2 class="expando-line" id="ctl00_MainContent_ucRoomSlider_rptGroupedRooms_ctl01_rptRooms_ctl01_ucRoomPodModal_interestedRooms_headerText">
                  <b>[mkey1][symbolx][pkey1][symbolx][keyword1][bracketl1][bracketr1][symbolx][bracketl2][siter1][bracketr2][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx]</b>
                 </h2>
                </div>
               </header>
              </section>
              <room-price-grid v-bind:exclude-room="627">
              </room-price-grid>
             </div>
            </div>
            <div class="columns medium-6 large-4 room-column--slider" id="ctl00_MainContent_ucRoomSlider_rptGroupedRooms_ctl01_rptRooms_ctl02_ucRoomSliderPod_pnlRoomColumnSlider">
             <article class="static-grid-item static-grid-item--margin static-grid-item--underline static-grid-item--underline-peach static-grid-item--room-slider-pod" data-room-name="4-인실" id="ctl00_MainContent_ucRoomSlider_rptGroupedRooms_ctl01_rptRooms_ctl02_ucRoomSliderPod_staticGridItem_staticGridItem">
              <div class="static-grid-item__image g-placeholder" data-interchange="[/getmedia/6b560b65-9cbf-4924-9973-a449344de35f/generator-paris-shared-room-nikolas-koenig?maxsidesize=320&amp;ext=.jpg, small], [/getmedia/6b560b65-9cbf-4924-9973-a449344de35f/generator-paris-shared-room-nikolas-koenig?maxsidesize=640&amp;ext=.jpg, smallretina], [/getmedia/6b560b65-9cbf-4924-9973-a449344de35f/generator-paris-shared-room-nikolas-koenig?maxsidesize=640&amp;ext=.jpg, medium], [/getmedia/6b560b65-9cbf-4924-9973-a449344de35f/generator-paris-shared-room-nikolas-koenig?maxsidesize=1024&amp;ext=.jpg, mediumretina], [/getmedia/6b560b65-9cbf-4924-9973-a449344de35f/generator-paris-shared-room-nikolas-koenig?maxsidesize=1024&amp;ext=.jpg, large]" id="ctl00_MainContent_ucRoomSlider_rptGroupedRooms_ctl01_rptRooms_ctl02_ucRoomSliderPod_staticGridItem_staticGridItemImage">
              </div>
              <div class="static-grid-item__content static-grid-item__content--bottom-left static-grid-item__content--padding" id="ctl00_MainContent_ucRoomSlider_rptGroupedRooms_ctl01_rptRooms_ctl02_ucRoomSliderPod_staticGridItem_staticGridItemContent">
               [linkx]
               
               <p class="static-grid-item__description static-grid-item__description--light" id="ctl00_MainContent_ucRoomSlider_rptGroupedRooms_ctl01_rptRooms_ctl02_ucRoomSliderPod_staticGridItem_staticGridItemDescription">
                부터
                <span data-pricing="">
                 <span data-currency-symbol="€" itemprop="priceCurrency">
                  €
                 </span>
                 <span data-price="116.0000" itemprop="price">
                  116.0000
                 </span>
                </span>
                객실당
                <br/>
                <strong>
                 투숙 인원: 1-4
                </strong>
               </p>
               <div class="static-grid-item__buttons" id="ctl00_MainContent_ucRoomSlider_rptGroupedRooms_ctl01_rptRooms_ctl02_ucRoomSliderPod_staticGridItem_staticGridItemButtons">
                [ahref]
                
               </div>
              </div>
             </article>
            </div>
            <div class="reveal modal room-modal" data-reveal="" data-room-type-open="room-type_1089" id="room-modal_628">
             <span class="modal__close-button" data-close="" type="button">
              Close
             </span>
             <div class="vue-content">
              <section class="grid-row__container r-container-full" data-room-name="4-인실" id="ctl00_MainContent_ucRoomSlider_rptGroupedRooms_ctl01_rptRooms_ctl02_ucRoomPodModal_roomPod" itemscope="" itemtype="http://schema.org/Product">
               <div class="grid-row r-grid">
                <div class="r-col-12 r-col-lg-6">
                 <div class="modal__gallery modal__gallery--room" data-room-pod-modal-gallery="">
                  <div id="ctl00_MainContent_ucRoomSlider_rptGroupedRooms_ctl01_rptRooms_ctl02_ucRoomPodModal_rptRoomGallery_ctl00_divGalleryItem" style="background: url('/getmedia/6b560b65-9cbf-4924-9973-a449344de35f/generator-paris-shared-room-nikolas-koenig?ext=.jpg');background-size: cover;background-position: center;background-repeat: no-repeat;">
                  </div>
                  <div id="ctl00_MainContent_ucRoomSlider_rptGroupedRooms_ctl01_rptRooms_ctl02_ucRoomPodModal_rptRoomGallery_ctl01_divGalleryItem" style="background: url('/getmedia/015f33d1-00f3-4ff1-b055-ce6581e30b4f/generator_paris_highres-19.jpg?width=900&amp;height=900&amp;ext=.jpg');background-size: cover;background-position: center;background-repeat: no-repeat;">
                  </div>
                  <div id="ctl00_MainContent_ucRoomSlider_rptGroupedRooms_ctl01_rptRooms_ctl02_ucRoomPodModal_rptRoomGallery_ctl02_divGalleryItem" style="background: url('/getmedia/aaaf05ae-88a3-41b1-a790-cb180c8f39c6/generator_paris_highres-7.jpg?width=900&amp;height=653&amp;ext=.jpg');background-size: cover;background-position: center;background-repeat: no-repeat;">
                  </div>
                 </div>
                </div>
                <div class="r-col-12 r-col-lg-6">
                 <div class="modal__header modal__header--uppercase">
                  <h3 itemprop="name">
                   [mkey1][symbolx][pkey1][symbolx][keyword1][bracketl1][bracketr1][symbolx][bracketl2][siter1][bracketr2][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx]
                  </h3>
                 </div>
                 <p class="room-modal__price" itemprop="offers" itemscope="" itemtype="http://schema.org/Offer">
                  부터
                  <span data-pricing="">
                   <span data-currency-symbol="€" itemprop="priceCurrency">
                    €
                   </span>
                   <span data-price="116.0000" itemprop="price">
                    116.0000
                   </span>
                  </span>
                  객실당
                 </p>
                 <p class="room-modal__sleeps">
                  <strong>
                   투숙 인원:
                        1-4
                  </strong>
                 </p>
                 <div class="row collapse">
                  <div class="columns large-6">
                   <a class="g-button g-button--default g-button--primary g-button--full" href="/booking?be=2&amp;language=ko-KR&amp;mewsCityId=f9bd6e2b-bd1e-4b2b-a91e-5c3ae7cb2c06&amp;currency=KRW" id="ctl00_MainContent_ucRoomSlider_rptGroupedRooms_ctl01_rptRooms_ctl02_ucRoomPodModal_hypCheckAvailability1">
                    이용 가능 여부 확인
                   </a>
                  </div>
                 </div>
                 <p class="room-modal__description" itemprop="description">
                  조용한 분위기를 좋아하지만 여러 명이 함께 여행하는 사람들에게는 프라이빗 쿼드를 추천합니다. 친구들 및 가족들에게는 완벽한 방입니다.
                 </p>
                 <p class="room-modal__description" itemprop="description">
                 </p>
                 <div class="row collapse room-modal__perks">
                  <div class="columns medium-6">
                   <li>[keywordx][symbolx][keywordx][symbolx][bracketl5][keywordx][bracketr5][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx]</li><li>[keywordx][symbolx][keywordx][symbolx][bracketl6][keywordx][bracketr6][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx]</li><li>[link]</li>
                  </div>
                  <div class="columns medium-6">
                   <h3>
                    [mkey1][symbolx][pkey1][symbolx][keyword1][bracketl1][bracketr1][symbolx][bracketl2][siter1][bracketr2][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx]
                   </h3>
                   <ul class="menu vertical uppercase iconlist">
                    <li class="iconbedsidelamp" id="ctl00_MainContent_ucRoomSlider_rptGroupedRooms_ctl01_rptRooms_ctl02_ucRoomPodModal_ucAllRoomsFacilities_rptFacilities_ctl00_liFacility">
                     침실용 램프
                    </li>
                   </ul>
                  </div>
                 </div>
                 <div class="row collapse">
                  <div class="columns large-6">
                   [ahref]
                   
                  </div>
                 </div>
                </div>
               </div>
              </section>
              <section class="section section--column-padding" id="ctl00_MainContent_ucRoomSlider_rptGroupedRooms_ctl01_rptRooms_ctl02_ucRoomPodModal_interestedRooms_section">
               <header class="section__header row full-width" id="ctl00_MainContent_ucRoomSlider_rptGroupedRooms_ctl01_rptRooms_ctl02_ucRoomPodModal_interestedRooms_sectionHeader">
                <div class="columns large-12">
                 <h2 class="expando-line" id="ctl00_MainContent_ucRoomSlider_rptGroupedRooms_ctl01_rptRooms_ctl02_ucRoomPodModal_interestedRooms_headerText">
                  [mkey1][symbolx][pkey1][symbolx][keyword1][bracketl1][bracketr1][symbolx][bracketl2][siter1][bracketr2][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx]
                 </h2>
                </div>
               </header>
              </section>
              <room-price-grid v-bind:exclude-room="628">
              </room-price-grid>
             </div>
            </div>
           </div>
          </section>
          <section class="room-listing" data-magellan-target="%ea%b3%b5%ec%9c%a0-%eb%b0%a9" id="%ea%b3%b5%ec%9c%a0-%eb%b0%a9">
           <section class="section section--column-padding" id="ctl00_MainContent_ucRoomSlider_rptGroupedRooms_ctl02_header_section">
            <header class="section__header row" id="ctl00_MainContent_ucRoomSlider_rptGroupedRooms_ctl02_header_sectionHeader">
             <div class="columns large-12">
              <h2 class="expando-line" id="ctl00_MainContent_ucRoomSlider_rptGroupedRooms_ctl02_header_headerText">
               <b>[mkey1][symbolx][pkey1][symbolx][keyword1][bracketl1][bracketr1][symbolx][bracketl2][siter1][bracketr2][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx]</b>
              </h2>
             </div>
            </header>
           </section>
           <div class="room-list room-slider" data-room-slider="">
            <div class="columns medium-6 large-4 room-column--slider" id="ctl00_MainContent_ucRoomSlider_rptGroupedRooms_ctl02_rptRooms_ctl00_ucRoomSliderPod_pnlRoomColumnSlider">
             <article class="static-grid-item static-grid-item--margin static-grid-item--underline static-grid-item--underline-peach static-grid-item--room-slider-pod" data-room-name="작은-공유" id="ctl00_MainContent_ucRoomSlider_rptGroupedRooms_ctl02_rptRooms_ctl00_ucRoomSliderPod_staticGridItem_staticGridItem">
              <div class="static-grid-item__image g-placeholder" data-interchange="[/getmedia/6b560b65-9cbf-4924-9973-a449344de35f/generator-paris-shared-room-nikolas-koenig?maxsidesize=320&amp;ext=.jpg, small], [/getmedia/6b560b65-9cbf-4924-9973-a449344de35f/generator-paris-shared-room-nikolas-koenig?maxsidesize=640&amp;ext=.jpg, smallretina], [/getmedia/6b560b65-9cbf-4924-9973-a449344de35f/generator-paris-shared-room-nikolas-koenig?maxsidesize=640&amp;ext=.jpg, medium], [/getmedia/6b560b65-9cbf-4924-9973-a449344de35f/generator-paris-shared-room-nikolas-koenig?maxsidesize=1024&amp;ext=.jpg, mediumretina], [/getmedia/6b560b65-9cbf-4924-9973-a449344de35f/generator-paris-shared-room-nikolas-koenig?maxsidesize=1024&amp;ext=.jpg, large]" id="ctl00_MainContent_ucRoomSlider_rptGroupedRooms_ctl02_rptRooms_ctl00_ucRoomSliderPod_staticGridItem_staticGridItemImage">
              </div>
              <div class="static-grid-item__content static-grid-item__content--bottom-left static-grid-item__content--padding" id="ctl00_MainContent_ucRoomSlider_rptGroupedRooms_ctl02_rptRooms_ctl00_ucRoomSliderPod_staticGridItem_staticGridItemContent">
               [ahref]
               
               <p class="static-grid-item__description static-grid-item__description--light" id="ctl00_MainContent_ucRoomSlider_rptGroupedRooms_ctl02_rptRooms_ctl00_ucRoomSliderPod_staticGridItem_staticGridItemDescription">
                부터
                <span data-pricing="">
                 <span data-currency-symbol="€" itemprop="priceCurrency">
                  €
                 </span>
                 <span data-price="25.0000" itemprop="price">
                  25.0000
                 </span>
                </span>
                침대 당
                <br/>
                <strong>
                 투숙 인원: 1-8
                </strong>
               </p>
               <div class="static-grid-item__buttons" id="ctl00_MainContent_ucRoomSlider_rptGroupedRooms_ctl02_rptRooms_ctl00_ucRoomSliderPod_staticGridItem_staticGridItemButtons">
                [ahref]
                
               </div>
              </div>
             </article>
            </div>
            <div class="reveal modal room-modal" data-reveal="" data-room-type-open="room-type_1090" id="room-modal_629">
             <span class="modal__close-button" data-close="" type="button">
              Close
             </span>
             <div class="vue-content">
              <section class="grid-row__container r-container-full" data-room-name="작은-공유" id="ctl00_MainContent_ucRoomSlider_rptGroupedRooms_ctl02_rptRooms_ctl00_ucRoomPodModal_roomPod" itemscope="" itemtype="http://schema.org/Product">
               <div class="grid-row r-grid">
                <div class="r-col-12 r-col-lg-6">
                 <div class="modal__gallery modal__gallery--room" data-room-pod-modal-gallery="">
                  <div id="ctl00_MainContent_ucRoomSlider_rptGroupedRooms_ctl02_rptRooms_ctl00_ucRoomPodModal_rptRoomGallery_ctl00_divGalleryItem" style="background: url('/getmedia/6b560b65-9cbf-4924-9973-a449344de35f/generator-paris-shared-room-nikolas-koenig?ext=.jpg');background-size: cover;background-position: center;background-repeat: no-repeat;">
                  </div>
                  <div id="ctl00_MainContent_ucRoomSlider_rptGroupedRooms_ctl02_rptRooms_ctl00_ucRoomPodModal_rptRoomGallery_ctl01_divGalleryItem" style="background: url('/getmedia/aaaf05ae-88a3-41b1-a790-cb180c8f39c6/Generator_Paris_highres-7?ext=.jpg');background-size: cover;background-position: center;background-repeat: no-repeat;">
                  </div>
                  <div id="ctl00_MainContent_ucRoomSlider_rptGroupedRooms_ctl02_rptRooms_ctl00_ucRoomPodModal_rptRoomGallery_ctl02_divGalleryItem" style="background: url('/getmedia/70f687f4-bf22-4019-84ab-5461342f1021/generator_paris_highres-14.jpg?width=900&amp;height=713&amp;ext=.jpg');background-size: cover;background-position: center;background-repeat: no-repeat;">
                  </div>
                 </div>
                </div>
                <div class="r-col-12 r-col-lg-6">
                 <div class="modal__header modal__header--uppercase">
                  <h3 itemprop="name">
                   [mkey1][symbolx][pkey1][symbolx][keyword1][bracketl1][bracketr1][symbolx][bracketl2][siter1][bracketr2][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx]
                  </h3>
                 </div>
                 <p class="room-modal__price" itemprop="offers" itemscope="" itemtype="http://schema.org/Offer">
                  부터
                  <span data-pricing="">
                   <span data-currency-symbol="€" itemprop="priceCurrency">
                    €
                   </span>
                   <span data-price="25.0000" itemprop="price">
                    25.0000
                   </span>
                  </span>
                  침대 당
                 </p>
                 <p class="room-modal__sleeps">
                  <strong>
                   투숙 인원:
                        1-8
                  </strong>
                 </p>
                 <div class="row collapse">
                  <div class="columns large-6">
                   [linkx]
                   
                  </div>
                 </div>
                 <p class="room-modal__description" itemprop="description">
                  공용. 작은 쉐어 룸에서 자면서 새로운 친구들을 만드십시오.
                 </p>
                 <p class="room-modal__description" itemprop="description">
                 </p>
                 <div class="row collapse room-modal__perks">
                  <div class="columns medium-6">
                   <h3>
                    [mkey1][symbolx][pkey1][symbolx][keyword1][bracketl1][bracketr1][symbolx][bracketl2][siter1][bracketr2][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx]
                   </h3>
                   <ul class="menu vertical uppercase iconlist">
                    <li class="iconbunk" id="ctl00_MainContent_ucRoomSlider_rptGroupedRooms_ctl02_rptRooms_ctl00_ucRoomPodModal_ucRoomFacilities_rptFacilities_ctl00_liFacility">
                     가리개를 갖춘 벙커 침대
                    </li>
                    <li class="icontoilet" id="ctl00_MainContent_ucRoomSlider_rptGroupedRooms_ctl02_rptRooms_ctl00_ucRoomPodModal_ucRoomFacilities_rptFacilities_ctl01_liFacility">
                     방에 딸린 욕실
                    </li>
                    <li class="iconmirror" id="ctl00_MainContent_ucRoomSlider_rptGroupedRooms_ctl02_rptRooms_ctl00_ucRoomPodModal_ucRoomFacilities_rptFacilities_ctl02_liFacility">
                     전신 거울
                    </li>
                    <li class="iconlockedstorage" id="ctl00_MainContent_ucRoomSlider_rptGroupedRooms_ctl02_rptRooms_ctl00_ucRoomPodModal_ucRoomFacilities_rptFacilities_ctl03_liFacility">
                     간편한 잠금 가능 물품보관처
                    </li>
                    <li class="iconplugeu" id="ctl00_MainContent_ucRoomSlider_rptGroupedRooms_ctl02_rptRooms_ctl00_ucRoomPodModal_ucRoomFacilities_rptFacilities_ctl04_liFacility">
                     전원 소켓 (EU 어댑터만 해당)
                    </li>
                    <li class="iconphone" id="ctl00_MainContent_ucRoomSlider_rptGroupedRooms_ctl02_rptRooms_ctl00_ucRoomPodModal_ucRoomFacilities_rptFacilities_ctl05_liFacility">
                     USB 소켓
                    </li>
                   </ul>
                  </div>
                  <div class="columns medium-6">
                   <h3>
                    [mkey1][symbolx][pkey1][symbolx][keyword1][bracketl1][bracketr1][symbolx][bracketl2][siter1][bracketr2][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx]
                   </h3>
                   <ul class="menu vertical uppercase iconlist">
                    <li class="icontowels" id="ctl00_MainContent_ucRoomSlider_rptGroupedRooms_ctl02_rptRooms_ctl00_ucRoomPodModal_ucAllRoomsFacilities_rptFacilities_ctl00_liFacility">
                     추가 타올 신청 가능
                    </li>
                   </ul>
                  </div>
                 </div>
                 <div class="row collapse">
                  <div class="columns large-6">
                   [ahref]
                   
                  </div>
                 </div>
                </div>
               </div>
              </section>
              <section class="section section--column-padding" id="ctl00_MainContent_ucRoomSlider_rptGroupedRooms_ctl02_rptRooms_ctl00_ucRoomPodModal_interestedRooms_section">
               <header class="section__header row full-width" id="ctl00_MainContent_ucRoomSlider_rptGroupedRooms_ctl02_rptRooms_ctl00_ucRoomPodModal_interestedRooms_sectionHeader">
                <div class="columns large-12">
                 <h2 class="expando-line" id="ctl00_MainContent_ucRoomSlider_rptGroupedRooms_ctl02_rptRooms_ctl00_ucRoomPodModal_interestedRooms_headerText">
                  <b>[mkey1][symbolx][pkey1][symbolx][keyword1][bracketl1][bracketr1][symbolx][bracketl2][siter1][bracketr2][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx]</b>
                 </h2>
                </div>
               </header>
              </section>
              <room-price-grid v-bind:exclude-room="629">
              </room-price-grid>
             </div>
            </div>
            <div class="columns medium-6 large-4 room-column--slider" id="ctl00_MainContent_ucRoomSlider_rptGroupedRooms_ctl02_rptRooms_ctl01_ucRoomSliderPod_pnlRoomColumnSlider">
             <article class="static-grid-item static-grid-item--margin static-grid-item--underline static-grid-item--underline-peach static-grid-item--room-slider-pod" data-room-name="대형-공유" id="ctl00_MainContent_ucRoomSlider_rptGroupedRooms_ctl02_rptRooms_ctl01_ucRoomSliderPod_staticGridItem_staticGridItem">
              <div class="static-grid-item__image g-placeholder" data-interchange="[/getmedia/39cd6e89-2386-4c4d-88bf-b820c86c0b1f/Generator_Paris_highres-12?maxsidesize=320&amp;ext=.jpg, small], [/getmedia/39cd6e89-2386-4c4d-88bf-b820c86c0b1f/Generator_Paris_highres-12?maxsidesize=640&amp;ext=.jpg, smallretina], [/getmedia/39cd6e89-2386-4c4d-88bf-b820c86c0b1f/Generator_Paris_highres-12?maxsidesize=640&amp;ext=.jpg, medium], [/getmedia/39cd6e89-2386-4c4d-88bf-b820c86c0b1f/Generator_Paris_highres-12?maxsidesize=1024&amp;ext=.jpg, mediumretina], [/getmedia/39cd6e89-2386-4c4d-88bf-b820c86c0b1f/Generator_Paris_highres-12?maxsidesize=1024&amp;ext=.jpg, large]" id="ctl00_MainContent_ucRoomSlider_rptGroupedRooms_ctl02_rptRooms_ctl01_ucRoomSliderPod_staticGridItem_staticGridItemImage">
              </div>
              <div class="static-grid-item__content static-grid-item__content--bottom-left static-grid-item__content--padding" id="ctl00_MainContent_ucRoomSlider_rptGroupedRooms_ctl02_rptRooms_ctl01_ucRoomSliderPod_staticGridItem_staticGridItemContent">
               <a class="static-grid-item__overlay-link" data-open="room-modal_630" data-room-slider-pod="" id="ctl00_MainContent_ucRoomSlider_rptGroupedRooms_ctl02_rptRooms_ctl01_ucRoomSliderPod_staticGridItem_staticGridItemLink">
                <p class="static-grid-item__caption static-grid-item__caption--light" id="ctl00_MainContent_ucRoomSlider_rptGroupedRooms_ctl02_rptRooms_ctl01_ucRoomSliderPod_staticGridItem_staticGridItemCaption">
                 <span id="ctl00_MainContent_ucRoomSlider_rptGroupedRooms_ctl02_rptRooms_ctl01_ucRoomSliderPod_staticGridItem_staticGridItemCaptionText">
                  대형 공유
                 </span>
                </p>
               </a>
               <p class="static-grid-item__description static-grid-item__description--light" id="ctl00_MainContent_ucRoomSlider_rptGroupedRooms_ctl02_rptRooms_ctl01_ucRoomSliderPod_staticGridItem_staticGridItemDescription">
                부터
                <span data-pricing="">
                 <span data-currency-symbol="€" itemprop="priceCurrency">
                  €
                 </span>
                 <span data-price="17.0000" itemprop="price">
                  17.0000
                 </span>
                </span>
                침대 당
                <br/>
                <strong>
                 투숙 인원: 1-10
                </strong>
               </p>
               <div class="static-grid-item__buttons" id="ctl00_MainContent_ucRoomSlider_rptGroupedRooms_ctl02_rptRooms_ctl01_ucRoomSliderPod_staticGridItem_staticGridItemButtons">
                [linkx]
                
               </div>
              </div>
             </article>
            </div>
            <div class="reveal modal room-modal" data-reveal="" data-room-type-open="room-type_1090" id="room-modal_630">
             <span class="modal__close-button" data-close="" type="button">
              Close
             </span>
             <div class="vue-content">
              <section class="grid-row__container r-container-full" data-room-name="대형-공유" id="ctl00_MainContent_ucRoomSlider_rptGroupedRooms_ctl02_rptRooms_ctl01_ucRoomPodModal_roomPod" itemscope="" itemtype="http://schema.org/Product">
               <div class="grid-row r-grid">
                <div class="r-col-12 r-col-lg-6">
                 <div class="modal__gallery modal__gallery--room" data-room-pod-modal-gallery="">
                  <div id="ctl00_MainContent_ucRoomSlider_rptGroupedRooms_ctl02_rptRooms_ctl01_ucRoomPodModal_rptRoomGallery_ctl00_divGalleryItem" style="background: url('/getmedia/39cd6e89-2386-4c4d-88bf-b820c86c0b1f/Generator_Paris_highres-12?ext=.jpg');background-size: cover;background-position: center;background-repeat: no-repeat;">
                  </div>
                 </div>
                </div>
                <div class="r-col-12 r-col-lg-6">
                 <div class="modal__header modal__header--uppercase">
                  <h3 itemprop="name">
                   [mkey1][symbolx][pkey1][symbolx][keyword1][bracketl1][bracketr1][symbolx][bracketl2][siter1][bracketr2][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx]
                  </h3>
                 </div>
                 <p class="room-modal__price" itemprop="offers" itemscope="" itemtype="http://schema.org/Offer">
                  부터
                  <span data-pricing="">
                   <span data-currency-symbol="€" itemprop="priceCurrency">
                    €
                   </span>
                   <span data-price="17.0000" itemprop="price">
                    17.0000
                   </span>
                  </span>
                  침대 당
                 </p>
                 <p class="room-modal__sleeps">
                  <strong>
                   투숙 인원:
                        1-10
                  </strong>
                 </p>
                 <div class="row collapse">
                  <div class="columns large-6">
                   [linkx]
                   
                  </div>
                 </div>
                 <p class="room-modal__description" itemprop="description">
                  사교적인 사람들에게 안성맞춤인 방입니다. 평생지기 친구를 만나게 될 것입니다. 큰 쉐어 룸에서 한번 머물러 보십시오.
                 </p>
                 <p class="room-modal__description" itemprop="description">
                 </p>
                 <div class="row collapse room-modal__perks">
                  <div class="columns medium-6">
                   <h3>
                    [mkey1][symbolx][pkey1][symbolx][keyword1][bracketl1][bracketr1][symbolx][bracketl2][siter1][bracketr2][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx]
                   </h3>
                   <ul class="menu vertical uppercase iconlist">
                    <li class="iconbunk" id="ctl00_MainContent_ucRoomSlider_rptGroupedRooms_ctl02_rptRooms_ctl01_ucRoomPodModal_ucRoomFacilities_rptFacilities_ctl00_liFacility">
                     가리개를 갖춘 벙커 침대
                    </li>
                    <li class="iconcoathanger" id="ctl00_MainContent_ucRoomSlider_rptGroupedRooms_ctl02_rptRooms_ctl01_ucRoomPodModal_ucRoomFacilities_rptFacilities_ctl01_liFacility">
                     옷걸이
                    </li>
                    <li class="icontoilet" id="ctl00_MainContent_ucRoomSlider_rptGroupedRooms_ctl02_rptRooms_ctl01_ucRoomPodModal_ucRoomFacilities_rptFacilities_ctl02_liFacility">
                     방에 딸린 욕실
                    </li>
                    <li class="iconmirror" id="ctl00_MainContent_ucRoomSlider_rptGroupedRooms_ctl02_rptRooms_ctl01_ucRoomPodModal_ucRoomFacilities_rptFacilities_ctl03_liFacility">
                     전신 거울
                    </li>
                    <li class="iconlockedstorage" id="ctl00_MainContent_ucRoomSlider_rptGroupedRooms_ctl02_rptRooms_ctl01_ucRoomPodModal_ucRoomFacilities_rptFacilities_ctl04_liFacility">
                     간편한 잠금 가능 물품보관처
                    </li>
                    <li class="iconshower" id="ctl00_MainContent_ucRoomSlider_rptGroupedRooms_ctl02_rptRooms_ctl01_ucRoomPodModal_ucRoomFacilities_rptFacilities_ctl05_liFacility">
                     힘센 샤워기
            [content1[linkx]content2[linkx]content3[linkx]content4[linkx]content5]
                    </li>
                    <li class="iconplugeu" id="ctl00_MainContent_ucRoomSlider_rptGroupedRooms_ctl02_rptRooms_ctl01_ucRoomPodModal_ucRoomFacilities_rptFacilities_ctl06_liFacility">
                     전원 소켓 (EU 어댑터만 해당)
                    </li>
                    <li class="icontowels" id="ctl00_MainContent_ucRoomSlider_rptGroupedRooms_ctl02_rptRooms_ctl01_ucRoomPodModal_ucRoomFacilities_rptFacilities_ctl07_liFacility">
                     타월 추가 가능
                    </li>
                    <li class="iconphone" id="ctl00_MainContent_ucRoomSlider_rptGroupedRooms_ctl02_rptRooms_ctl01_ucRoomPodModal_ucRoomFacilities_rptFacilities_ctl08_liFacility">
                     USB 소켓
                    </li>
                   </ul>
                  </div>
                  <div class="columns medium-6">
                   <h3>
                    [mkey1][symbolx][pkey1][symbolx][keyword1][bracketl1][bracketr1][symbolx][bracketl2][siter1][bracketr2][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx]
                   </h3>
                   <ul class="menu vertical uppercase iconlist">
                    <li class="icontowels" id="ctl00_MainContent_ucRoomSlider_rptGroupedRooms_ctl02_rptRooms_ctl01_ucRoomPodModal_ucAllRoomsFacilities_rptFacilities_ctl00_liFacility">
                     추가 타올 신청 가능
                    </li>
                   </ul>
                  </div>
                 </div>
                 <div class="row collapse">
                  <div class="columns large-6">
                   [ahref]
                   
                  </div>
                 </div>
                </div>
               </div>
              </section>
              <section class="section section--column-padding" id="ctl00_MainContent_ucRoomSlider_rptGroupedRooms_ctl02_rptRooms_ctl01_ucRoomPodModal_interestedRooms_section">
               <header class="section__header row full-width" id="ctl00_MainContent_ucRoomSlider_rptGroupedRooms_ctl02_rptRooms_ctl01_ucRoomPodModal_interestedRooms_sectionHeader">
                <div class="columns large-12">
                 <h2 class="expando-line" id="ctl00_MainContent_ucRoomSlider_rptGroupedRooms_ctl02_rptRooms_ctl01_ucRoomPodModal_interestedRooms_headerText">
                  <b>[mkey1][symbolx][pkey1][symbolx][keyword1][bracketl1][bracketr1][symbolx][bracketl2][siter1][bracketr2][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx]</b>
                 </h2>
                </div>
               </header>
              </section>
              <room-price-grid v-bind:exclude-room="630">
              </room-price-grid>
             </div>
            </div>
            <div class="columns medium-6 large-4 room-column--slider" id="ctl00_MainContent_ucRoomSlider_rptGroupedRooms_ctl02_rptRooms_ctl02_ucRoomSliderPod_pnlRoomColumnSlider">
             <article class="static-grid-item static-grid-item--margin static-grid-item--underline static-grid-item--underline-peach static-grid-item--room-slider-pod" data-room-name="여성-공유" id="ctl00_MainContent_ucRoomSlider_rptGroupedRooms_ctl02_rptRooms_ctl02_ucRoomSliderPod_staticGridItem_staticGridItem">
              <div class="static-grid-item__image g-placeholder" data-interchange="[/getmedia/a244d58e-205b-44d0-85a4-41c610040831/generator_paris_highres-25?maxsidesize=320&amp;ext=.jpg, small], [/getmedia/a244d58e-205b-44d0-85a4-41c610040831/generator_paris_highres-25?maxsidesize=640&amp;ext=.jpg, smallretina], [/getmedia/a244d58e-205b-44d0-85a4-41c610040831/generator_paris_highres-25?maxsidesize=640&amp;ext=.jpg, medium], [/getmedia/a244d58e-205b-44d0-85a4-41c610040831/generator_paris_highres-25?maxsidesize=1024&amp;ext=.jpg, mediumretina], [/getmedia/a244d58e-205b-44d0-85a4-41c610040831/generator_paris_highres-25?maxsidesize=1024&amp;ext=.jpg, large]" id="ctl00_MainContent_ucRoomSlider_rptGroupedRooms_ctl02_rptRooms_ctl02_ucRoomSliderPod_staticGridItem_staticGridItemImage">
              </div>
              <div class="static-grid-item__content static-grid-item__content--bottom-left static-grid-item__content--padding" id="ctl00_MainContent_ucRoomSlider_rptGroupedRooms_ctl02_rptRooms_ctl02_ucRoomSliderPod_staticGridItem_staticGridItemContent">
               <a class="static-grid-item__overlay-link" data-open="room-modal_631" data-room-slider-pod="" id="ctl00_MainContent_ucRoomSlider_rptGroupedRooms_ctl02_rptRooms_ctl02_ucRoomSliderPod_staticGridItem_staticGridItemLink">
                <p class="static-grid-item__caption static-grid-item__caption--light" id="ctl00_MainContent_ucRoomSlider_rptGroupedRooms_ctl02_rptRooms_ctl02_ucRoomSliderPod_staticGridItem_staticGridItemCaption">
                 <span id="ctl00_MainContent_ucRoomSlider_rptGroupedRooms_ctl02_rptRooms_ctl02_ucRoomSliderPod_staticGridItem_staticGridItemCaptionText">
                  여성 공유
                 </span>
                </p>
               </a>
               <p class="static-grid-item__description static-grid-item__description--light" id="ctl00_MainContent_ucRoomSlider_rptGroupedRooms_ctl02_rptRooms_ctl02_ucRoomSliderPod_staticGridItem_staticGridItemDescription">
                부터
                <span data-pricing="">
                 <span data-currency-symbol="€" itemprop="priceCurrency">
                  €
                 </span>
                 <span data-price="23.0000" itemprop="price">
                  23.0000
                 </span>
                </span>
                침대 당
                <br/>
                <strong>
                 투숙 인원: 1-8
                </strong>
               </p>
               <div class="static-grid-item__buttons" id="ctl00_MainContent_ucRoomSlider_rptGroupedRooms_ctl02_rptRooms_ctl02_ucRoomSliderPod_staticGridItem_staticGridItemButtons">
                <a class="g-button g-button g-button--arrow g-button--primary g-button--solid g-button--full g-button--underline static-grid-item__button" href="/booking?be=2&amp;language=ko-KR&amp;mewsCityId=f9bd6e2b-bd1e-4b2b-a91e-5c3ae7cb2c06&amp;currency=KRW" id="ctl00_MainContent_ucRoomSlider_rptGroupedRooms_ctl02_rptRooms_ctl02_ucRoomSliderPod_staticGridItem_staticGridItemButton1">
                 투숙 예약
                </a>
               </div>
              </div>
             </article>
            </div>
            <div class="reveal modal room-modal" data-reveal="" data-room-type-open="room-type_1090" id="room-modal_631">
             <span class="modal__close-button" data-close="" type="button">
              Close
             </span>
             <div class="vue-content">
              <section class="grid-row__container r-container-full" data-room-name="여성-공유" id="ctl00_MainContent_ucRoomSlider_rptGroupedRooms_ctl02_rptRooms_ctl02_ucRoomPodModal_roomPod" itemscope="" itemtype="http://schema.org/Product">
               <div class="grid-row r-grid">
                <div class="r-col-12 r-col-lg-6">
                 <div class="modal__gallery modal__gallery--room" data-room-pod-modal-gallery="">
                  <div id="ctl00_MainContent_ucRoomSlider_rptGroupedRooms_ctl02_rptRooms_ctl02_ucRoomPodModal_rptRoomGallery_ctl00_divGalleryItem" style="background: url('/getmedia/a244d58e-205b-44d0-85a4-41c610040831/generator_paris_highres-25?ext=.jpg');background-size: cover;background-position: center;background-repeat: no-repeat;">
                  </div>
                 </div>
                </div>
                <div class="r-col-12 r-col-lg-6">
                 <div class="modal__header modal__header--uppercase">
                  <h3 itemprop="name">
                   [mkey1][symbolx][pkey1][symbolx][keyword1][bracketl1][bracketr1][symbolx][bracketl2][siter1][bracketr2][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx]
                  </h3>
                 </div>
                 <p class="room-modal__price" itemprop="offers" itemscope="" itemtype="http://schema.org/Offer">
                  부터
                  <span data-pricing="">
                   <span data-currency-symbol="€" itemprop="priceCurrency">
                    €
                   </span>
                   <span data-price="23.0000" itemprop="price">
                    23.0000
                   </span>
                  </span>
                  침대 당
                 </p>
                 <p class="room-modal__sleeps">
                  <strong>
                   투숙 인원:
                        1-8
                  </strong>
                 </p>
                 <div class="row collapse">
                  <div class="columns large-6">
                   [linkx]
                   
                  </div>
                 </div>
                 <p class="room-modal__description" itemprop="description">
                  "남자는 허용되지 않습니다! 이 방은 여성만을 위한 방입니다. 여성전용 쉐어 룸에는 헤어드라이어가 구비되어 있고, 아울러 새로운 친구도 만날 수 있습니다. "
                 </p>
                 <p class="room-modal__description" itemprop="description">
                 </p>
                 <div class="row collapse room-modal__perks">
                  <div class="columns medium-6">
                   <h3>
                    [mkey1][symbolx][pkey1][symbolx][keyword1][bracketl1][bracketr1][symbolx][bracketl2][siter1][bracketr2][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx]
                   </h3>
                   <ul class="menu vertical uppercase iconlist">
                    <li class="iconbunk" id="ctl00_MainContent_ucRoomSlider_rptGroupedRooms_ctl02_rptRooms_ctl02_ucRoomPodModal_ucRoomFacilities_rptFacilities_ctl00_liFacility">
                     가리개를 갖춘 벙커 침대
                    </li>
                    <li class="icondressingtable" id="ctl00_MainContent_ucRoomSlider_rptGroupedRooms_ctl02_rptRooms_ctl02_ucRoomPodModal_ucRoomFacilities_rptFacilities_ctl01_liFacility">
                     화장대
                    </li>
                    <li class="icontoilet" id="ctl00_MainContent_ucRoomSlider_rptGroupedRooms_ctl02_rptRooms_ctl02_ucRoomPodModal_ucRoomFacilities_rptFacilities_ctl02_liFacility">
                     방에 딸린 욕실
                    </li>
                    <li class="iconmirror" id="ctl00_MainContent_ucRoomSlider_rptGroupedRooms_ctl02_rptRooms_ctl02_ucRoomPodModal_ucRoomFacilities_rptFacilities_ctl03_liFacility">
                     전신 거울
                    </li>
                    <li class="iconlockedstorage" id="ctl00_MainContent_ucRoomSlider_rptGroupedRooms_ctl02_rptRooms_ctl02_ucRoomPodModal_ucRoomFacilities_rptFacilities_ctl04_liFacility">
                     간편한 잠금 가능 물품보관처
                    </li>
                    <li class="iconplugeu" id="ctl00_MainContent_ucRoomSlider_rptGroupedRooms_ctl02_rptRooms_ctl02_ucRoomPodModal_ucRoomFacilities_rptFacilities_ctl05_liFacility">
                     전원 소켓 (EU 어댑터만 해당)
                    </li>
                    <li class="icontowels" id="ctl00_MainContent_ucRoomSlider_rptGroupedRooms_ctl02_rptRooms_ctl02_ucRoomPodModal_ucRoomFacilities_rptFacilities_ctl06_liFacility">
                     타월 추가 가능
                    </li>
                   </ul>
                  </div>
                  <div class="columns medium-6">
                   <h3>
                    [mkey1][symbolx][pkey1][symbolx][keyword1][bracketl1][bracketr1][symbolx][bracketl2][siter1][bracketr2][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx]
                   </h3>
                   <ul class="menu vertical uppercase iconlist">
                    <li class="icontowels" id="ctl00_MainContent_ucRoomSlider_rptGroupedRooms_ctl02_rptRooms_ctl02_ucRoomPodModal_ucAllRoomsFacilities_rptFacilities_ctl00_liFacility">
                     추가 타올 신청 가능
                    </li>
                   </ul>
                  </div>
                 </div>
                 <div class="row collapse">
                  <div class="columns large-6">
                   [ahref]
                   
                  </div>
                 </div>
                </div>
               </div>
              </section>
              [ahref]
              
              <room-price-grid v-bind:exclude-room="631">
              </room-price-grid>
             </div>
            </div>
           </div>
          </section>
         </section>
         <div data-magellan-target="groups" id="groups">
          <section class="section section--column-padding" id="ctl00_MainContent_groupBookingsHeader_section">
           <header class="section__header row section__header--large" data-magellan-target="ctl00_MainContent_groupBookingsHeader" id="ctl00_MainContent_groupBookingsHeader">
            <div class="columns large-12">
             <h2 class="" id="ctl00_MainContent_groupBookingsHeader_headerText">
              <b>[mkey1][symbolx][pkey1][symbolx][keyword1][bracketl1][bracketr1][symbolx][bracketl2][siter1][bracketr2][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx]</b>
             </h2>
            </div>
           </header>
          </section>
          <section class="grid-row__container r-container">
           <div class="grid-row r-grid r-wrap-reverse">
            <div class="r-col-12 r-col-lg-6 r-col-bleed">
             <div class="content-panel content-panel--light">
              <div id="ctl00_MainContent_ucGroupBookingCallout_pnlCalloutIntro">
               <p>
                단체 예약도 번거롭고 복잡하지 않습니다. 파리의 단체 손님 전담 팀이 모든 것을 알아서 처리하고 관리해 드립니다.
               </p>
              </div>
              <h3 class="content-panel__header">
               [mkey1][symbolx][pkey1][symbolx][keyword1][bracketl1][bracketr1][symbolx][bracketl2][siter1][bracketr2][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx]
              </h3>
              <div class="row collapse">
               <div class="columns large-6">
                <ul class="menu vertical iconlist">
                 <li class="iconprice" id="ctl00_MainContent_ucGroupBookingCallout_ucTwoColFacilities_rptLeftFacilities_ctl01_liFacility">
                  Best rates guaranteed
                 </li>
                 <li class="iconcoordinator" id="ctl00_MainContent_ucGroupBookingCallout_ucTwoColFacilities_rptLeftFacilities_ctl02_liFacility">
                  지정 예약 담당자
                 </li>
                </ul>
               </div>
               <div class="columns large-6">
                <ul class="menu vertical iconlist">
                 <li class="iconbunk" id="ctl00_MainContent_ucGroupBookingCallout_ucTwoColFacilities_rptRightFacilities_ctl01_liFacility">
                  객실 선택, 트윈룸 - 8인실
                 </li>
                 <li class="iconpin" id="ctl00_MainContent_ucGroupBookingCallout_ucTwoColFacilities_rptRightFacilities_ctl02_liFacility">
                  지정 차량 인수/인계 장소
                 </li>
                </ul>
               </div>
              </div>
              <div class="row collapse" id="ctl00_MainContent_ucGroupBookingCallout_ucTwoColFacilities_pnlButton">
               <div class="columns large-6">
                [linkx]
                
               </div>
              </div>
             </div>
            </div>
            <div class="r-col-12 r-col-lg-6 r-col-bleed">
             <div class="destination-group-booking__image" data-interchange="[/getmedia/2adf1af8-6a85-4b26-bf34-2b9daa5999df/paris.jpg?ext=.jpg&amp;width=600, small],[/getmedia/2adf1af8-6a85-4b26-bf34-2b9daa5999df/paris.jpg?ext=.jpg&amp;width=800, medium],[/getmedia/2adf1af8-6a85-4b26-bf34-2b9daa5999df/paris.jpg?ext=.jpg&amp;width=1000, large]" id="ctl00_MainContent_ucGroupBookingCallout_pnlCalloutImage">
             </div>
            </div>
           </div>
          </section>
         </div>
         <section data-magellan-target="why-generator" id="why-generator">
          <section class="section section--column-padding">
           <div class="row">
            <div class="columns large-7 section__left" id="ctl00_MainContent_whyGeneratorLeftContent">
            </div>
            <div class="columns large-5 section__right" id="ctl00_MainContent_whyGeneratorRightContent">
            </div>
           </div>
          </section>
         </section>
         <section class="section section--column-padding section--dark" id="ctl00_MainContent_plcBottom_lt_BottomZone_SectionHeader_sectionHeader_section">
          <header class="section__header row full-width" id="ctl00_MainContent_plcBottom_lt_BottomZone_SectionHeader_sectionHeader_sectionHeader">
           <div class="columns large-12">
            <h2 class="expando-line" id="ctl00_MainContent_plcBottom_lt_BottomZone_SectionHeader_sectionHeader_headerText">
             [mkey1][symbolx][pkey1][symbolx][keyword1][bracketl1][bracketr1][symbolx][bracketl2][siter1][bracketr2][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx]
            </h2>
           </div>
          </header>
         </section>
         <div class="grid-row__container grid-row__container--black r-container-full">
          <div class="grid-row r-grid">
           <div class="row full-width" id="vue__InstagramSliderRoot">
            <div class="instagram-slider__slider-container">
             <a class="instagram-slider__pod" target="_blank" v-bind:href="post.permalink" v-for="post in media">
              <div class="instagram-slider__pod-image" style="background-size: cover; background-position: center;" v-bind:data-src="post.thumbnail_url" v-if="post.media_type === 'VIDEO'">
              </div>
              <div class="instagram-slider__pod-image" style="background-size: cover; background-position: center;" v-bind:data-src="post.media_url" v-else="">
              </div>
              <div class="instagram-slider__pod-caption">
               <div class="row full-width">
                <div class="columns small-2 no-padding">
                </div>
                <div class="columns small-7 no-padding instagram-slider__pod-caption-name-container">
                 <div class="instagram-slider__pod-caption-profile-name">
                  {{post.username}}
                 </div>
                </div>
               </div>
              </div>
             </a>
            </div>
           </div>
          </div>
         </div>
        </div>
       </div>
       <footer class="destination-mobile-footer">
        <ul class="destination-mobile-footer__icons">
         <li>
          <a class="destination-mobile-footer__icon-gallery" data-open="destinationsGalleryModal" data-slide-index="0" href="#" title="Open gallery">
          </a>
         </li>
         <li>
          [ahref]
          
         </li>
         <li>
          <a class="destination-mobile-footer__icon-phone" href="0" title="Call destination">
          </a>
         </li>
         <li>
          <a class="destination-mobile-footer__icon-email" href="m" title="Email destination">
          </a>
         </li>
        </ul>
       </footer>
       <div id="cookieRoot">
        <cookie-preferences inline-template="" v-bind:expanded="isExpanded" v-bind:mode="currentMode" v-bind:visible="isVisible" v-on:close="onClose" v-on:expand="onExpand" v-on:prefs-confirmed="onPrefsConfirmed">
         <div class="cookie-pref" v-bind:class="{ expanded: expanded }" v-cloak="" v-if="visible">
          <div class="row collapse">
           <div class="columns medium-9">
            <div class="cookie-preferences" v-if="expanded">
             <div class="column row collapse">
              <h2>
               <b>[mkey1][symbolx][pkey1][symbolx][keyword1][bracketl1][bracketr1][symbolx][bracketl2][siter1][bracketr2][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx]</b>
              </h2>
              <ul class="fancy-rbl">
               <li class="disabled">
                <label class="css-label" for="noCookies">
                 없음
                </label>
                <div>
                 쿠키는 절대 허용되지 않습니다.
                </div>
               </li>
               <li class="disabled">
                <label class="css-label" for="systemCookies">
                 System
                </label>
                <div>
                 시스템 전용 쿠키만 허용됩니다. 귀하가 사이트에서 이동할 수 있게 하려면 이 쿠키가 반드시 필요합니다.
                </div>
               </li>
               <li>
                <label class="css-label" for="essentialCookies">
                 필수
                </label>
                <div>
                 웹 사이트가 정상적으로 작동하는 데 필요한 쿠키.
                </div>
               </li>
               <li>
                <label class="css-label" for="visitorCookies">
                 방문객
                </label>
                <div>
                 내부 분석 및 프로파일링에 사용되는 쿠키. 이러한 쿠키가 제공하는 정보는 방문자가 선호하는 마케팅 정보와 웹사이트 사용 방법을 이해하는 데 도움이 되므로 사용 경험을 지속적으로 개선할 수 있습니다.
                </div>
                <div class="cookie-pref-manage-custom" v-if="visitorCookieOptionSelected">
                 <h3>
                  [mkey1][symbolx][pkey1][symbolx][keyword1][bracketl1][bracketr1][symbolx][bracketl2][siter1][bracketr2][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx]
                 </h3>
                 <ul class="form">
                  <li>
                   <div class="css-checkbox generator-checkbox" id="ctl00_ucCookiePreferencesSelector_ucEnableCompetitionTrackingCookie_pnlCheckbox">
                    <label class="css-checkbox-label" for="ctl00_ucCookiePreferencesSelector_ucEnableCompetitionTrackingCookie_checkbox" id="ctl00_ucCookiePreferencesSelector_ucEnableCompetitionTrackingCookie_label">
                     대회 - 사용자가 참가한 대회 추적
                    </label>
                   </div>
                  </li>
                  <li>
                   <div class="css-checkbox generator-checkbox" id="ctl00_ucCookiePreferencesSelector_ucEnableEmarsysTrackingCookie_pnlCheckbox">
                    <label class="css-checkbox-label" for="ctl00_ucCookiePreferencesSelector_ucEnableEmarsysTrackingCookie_checkbox" id="ctl00_ucCookiePreferencesSelector_ucEnableEmarsysTrackingCookie_label">
                     Email marketing cookies. This data is used to enrich your customer profile and helps us to provide a personalised experience for you across all our touch points.
                    </label>
                   </div>
                  </li>
                  <li>
                   <div class="css-checkbox generator-checkbox" id="ctl00_ucCookiePreferencesSelector_ucEnableGaTracking_pnlCheckbox">
                    <label class="css-checkbox-label" for="ctl00_ucCookiePreferencesSelector_ucEnableGaTracking_checkbox" id="ctl00_ucCookiePreferencesSelector_ucEnableGaTracking_label">
                     Google 애드워즈, 리마케팅 등의 마케팅 쿠키. 이는 방문객과 관련이 있는 광고가 표시되도록 하고, 방문객이 이미 본 광고가 게재되지 않도록 하며, 캠페인 실적에 대한 보고를 개선하는 데 도움이 됩니다.
                    </label>
                   </div>
                  </li>
                 </ul>
                </div>
               </li>
               <li>
                <label class="css-label" for="allCookies">
                 모두
                </label>
                <div>
                 이 사이트에 사용된 모든 쿠키를 허용합니다.
                </div>
               </li>
              </ul>
             </div>
            </div>
            <div class="cookie-content" v-else="">
             <h2>
              <b>[mkey1][symbolx][pkey1][symbolx][keyword1][bracketl1][bracketr1][symbolx][bracketl2][siter1][bracketr2][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx]</b>
             </h2>
             <div>
             </div>
            </div>
           </div>
           <div class="columns medium-3 cookie-button">
            <div v-else-if="!isSaving">
             [ahref]
             
             <span class="cookie-more-options" v-if="mode === 'default' || mode === undefined" v-on:click="expand">
              {{moreOptionsText}}
             </span>
             <span class="cookie-more-options" v-else-if="mode === 'on-demand'" v-on:click="dismiss">
              취소
             </span>
            </div>
           </div>
          </div>
         </div>
        </cookie-preferences>
       </div>
      </main>
      <footer class="footer">
       <div class="footer__links" id="ctl00_ucFooter_pnlFooterLinks">
        <div class="row show-for-small-only small-newsletter">
         <div class="columns">
          <div class="form form--newsletter js-hook--newsletter-pod" data-form-source="Footer" id="ctl00_ucFooter_ucNewsletterSignup_pnlNewsletterSignup">
           <h2>
            [mkey1][symbolx][pkey1][symbolx][keyword1][bracketl1][bracketr1][symbolx][bracketl2][siter1][bracketr2][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx]
           </h2>
           <div class="row collapse">
            <div class="columns medium-8 large-12" id="ctl00_ucFooter_ucNewsletterSignup_pnlFormEmailColumn">
             <div class="form-control">
             </div>
            </div>
            <div class="columns medium-4 large-12" id="ctl00_ucFooter_ucNewsletterSignup_pnlFormSubmitColumn">
             <div class="form-control">
              [ahref]
              
             </div>
            </div>
           </div>
          </div>
         </div>
        </div>
        <div class="row">
         <div class="medium-4 large-3 columns">
          <strong>
           정보
          </strong>
          <ul class="menu vertical">
           <li>
            <a href="/information/about" id="ctl00_ucFooter_rptInformationMenu_ctl00_hypMenuItem">
             개요
            </a>
           </li>
           <li>
            <a href="/information/contact-us" id="ctl00_ucFooter_rptInformationMenu_ctl01_hypMenuItem">
             문의
            </a>
           </li>
           <li>
            [ahref]
            
           </li>
           <li>
            <a href="/information/faq" id="ctl00_ucFooter_rptInformationMenu_ctl03_hypMenuItem">
             FAQ
            </a>
           </li>
          </ul>
         </div>
         <div class="medium-4 large-3 columns">
          <strong>
           LEGAL STUFF
          </strong>
          <ul class="menu vertical">
           <li>
            [linkx]
            
           </li>
           <li>
            [linkx]
            
           </li>
           <li>
            [ahref]
            
           </li>
           <li>
            <a href="/information/modern-slavery-transparency-statement" id="ctl00_ucFooter_rptLegalMenu_ctl03_hypMenuItem">
             Modern Slavery Statement
            </a>
           </li>
          </ul>
         </div>
         <div class="medium-4 large-3 columns">
          <strong>
           소셜
          </strong>
          <ul class="menu social-menu">
           <li>
            [ahref]
            
           </li>
           <li>
            [linkx]
            
           </li>
           <li>
            <a aria-label="Instagram" href="/staygenerator/" id="ctl00_ucFooter_ucSocialMenu_hypInstagram" rel="noopener" target="_blank">
             <i class="insta-icon">
             </i>
            </a>
           </li>
           <li>
            <a aria-label="Youtube" href="/user/TheGeneratorHostels" id="ctl00_ucFooter_ucSocialMenu_hypYoutube" rel="noopener" target="_blank">
             <i class="yt-icon">
             </i>
            </a>
           </li>
          </ul>
         </div>
         <div class="large-3 columns show-for-medium">
          <div class="form form--newsletter js-hook--newsletter-pod medium-full-width" data-form-source="Footer" id="ctl00_ucFooter_NewsletterSignup_pnlNewsletterSignup">
           <h2>
            [mkey1][symbolx][pkey1][symbolx][keyword1][bracketl1][bracketr1][symbolx][bracketl2][siter1][bracketr2][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx]
           </h2>
           <div class="row collapse">
            <div class="columns medium-8 large-12" id="ctl00_ucFooter_NewsletterSignup_pnlFormEmailColumn">
             <div class="form-control">
             </div>
            </div>
            <div class="columns medium-4 large-12" id="ctl00_ucFooter_NewsletterSignup_pnlFormSubmitColumn">
             <div class="form-control">
              [ahref]
              
             </div>
            </div>
           </div>
          </div>
         </div>
        </div>
       </div>
       <div class="footer__locations" id="ctl00_ucFooter_pnlFooterLocations">
        <div class="row">
         <div class="columns hide-for-large">
          <div class="view-destinations js--hook-toggle-ftr-destinations">
           <h4>
            제공 목적지
           </h4>
          </div>
         </div>
        </div>
        <div class="footer__locations-list show-for-large js--hook-footer-locations-list">
         <ul class="menu">
          <li>
           [linkx]
           
          </li>
          <li>
           <a href="/destinations/berlin/prenzlauer-berg" id="ctl00_ucFooter_rptDestinations_ctl01_hypDestination">
            Berlin - 베를린 - 베를린 프렌츠라우어 베르크
           </a>
          </li>
          <li>
           [ahref]
           
          </li>
          <li>
           [ahref]
           
          </li>
          <li>
           <a href="/destinations/rome" id="ctl00_ucFooter_rptDestinations_ctl04_hypDestination">
            로마
           </a>
          </li>
          <li>
           <a href="/destinations/madrid" id="ctl00_ucFooter_rptDestinations_ctl05_hypDestination">
            마드리드(MADRID)
           </a>
          </li>
          <li>
           <a href="/destinations/miami" id="ctl00_ucFooter_rptDestinations_ctl06_hypDestination">
            마이애미(MIAMI)
           </a>
          </li>
          <li>
           [ahref]
           
          </li>
          <li>
           [ahref]
           
          </li>
          <li>
           <a href="/destinations/stockholm" id="ctl00_ucFooter_rptDestinations_ctl09_hypDestination">
            스톡홀름
           </a>
          </li>
          <li>
           <a href="/destinations/amsterdam" id="ctl00_ucFooter_rptDestinations_ctl10_hypDestination">
            암스테르담
           </a>
          </li>
          <li>
           [ahref]
           
          </li>
          <li>
           [linkx]
           
          </li>
          <li>
           [ahref]
           
          </li>
         </ul>
        </div>
        <div class="copy">
         © 2019 Generator Hostels ltd. 판권 소유
        </div>
       </div>
      </footer>
     </div>
    </div>
   </div>
   <div class="reveal modal js-hook-newsletter-modal newsletter-modal" data-reveal="" id="newsletterModal">
    <span class="modal__close-button" data-close="" type="button">
     Close
    </span>
    <div class="form" data-emarsys-form="" id="ctl00_ucNewsletterModal_pnlModal">
     <meta data-emarsys-source="Newsletter"/>
     <section class="grid-row__container r-container-full">
      <div class="grid-row r-grid">
       <div class="r-col-12">
        <div class="modal__header modal__header--uppercase modal__header--underline">
         <h3>
          [mkey1][symbolx][pkey1][symbolx][keyword1][bracketl1][bracketr1][symbolx][bracketl2][siter1][bracketr2][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx]
         </h3>
        </div>
        <section class="section">
         <p>
          제너레이터를 구독하세요. 최신 혜택과 이벤트 소식을 빠르게 전해드리겠습니다.
         </p>
        </section>
       </div>
      </div>
      <div class="r-grid">
       <div class="r-col-12">
       </div>
      </div>
      <div class="r-grid">
       <div class="r-col-12 r-col-md-auto">
       </div>
       <div class="r-col-12 r-col-md-auto">
       </div>
      </div>
      <div class="r-grid">
       <div class="r-col-12 r-col-md-6">
        <div class="r-grid r-grid-bleed field-wrapper">
         <div class="r-col-12">
          <label class="label--small label--inline" for="ctl00_ucNewsletterModal_txtDateOfBirthDay" id="ctl00_ucNewsletterModal_lblDateOfBirth">
           DATE OF BIRTH*
          </label>
         </div>
         <div class="r-col-auto">
         </div>
         <div class="r-col-auto">
         </div>
         <div class="r-col-auto">
         </div>
         <div class="r-col-sm-12 validation">
         </div>
        </div>
       </div>
       <div class="r-col-12 r-col-md-6">
        <div class="r-grid r-grid-bleed field-wrapper field-wrapper--radio field-wrapper--padding">
         <div class="r-col-12">
          <label class="label--small label--inline" for="ctl00_ucNewsletterModal_rdoGender" id="ctl00_ucNewsletterModal_lblGender">
           GENDER*
          </label>
         </div>
         <div class="r-col-12">
          <span class="radio-button-list radio-button-list--horizontal" id="ctl00_ucNewsletterModal_rdoGender">
           <label for="ctl00_ucNewsletterModal_rdoGender_0">
            Male
           </label>
           <br/>
           <label for="ctl00_ucNewsletterModal_rdoGender_1">
            Female
           </label>
          </span>
         </div>
         <div class="r-col-sm-12 validation">
         </div>
        </div>
       </div>
      </div>
      <div class="r-grid">
       <div class="r-col-12">
        <div class="select">
         <select id="ctl00_ucNewsletterModal_ddlCountry" name="ctl00$ucNewsletterModal$ddlCountry">
          <option value="">
           COUNTRY*
          </option>
          <option value="10">
           Austria
          </option>
          <option value="65">
           Germany
          </option>
          <option value="168">
           Switzerland
          </option>
          <option value="100">
           Liechtenstein
          </option>
          <option value="1">
           Afghanistan
          </option>
          <option value="2">
           Albania
          </option>
          <option value="3">
           Algeria
          </option>
          <option value="4">
           Andorra
          </option>
          <option value="5">
           Angola
          </option>
          <option value="6">
           Antigua and Barbuda
          </option>
          <option value="7">
           Argentina
          </option>
          <option value="8">
           Armenia
          </option>
          <option value="9">
           Australia
          </option>
          <option value="11">
           Azerbaijan
          </option>
          <option value="12">
           Bahamas
          </option>
          <option value="13">
           Bahrain
          </option>
          <option value="14">
           Bangladesh
          </option>
          <option value="15">
           Barbados
          </option>
          <option value="16">
           Belarus
          </option>
          <option value="17">
           Belgium
          </option>
          <option value="18">
           Belize
          </option>
          <option value="19">
           Benin
          </option>
          <option value="20">
           Bhutan
          </option>
          <option value="21">
           Bolivia
          </option>
          <option value="22">
           Bosnia and Herzegovina
          </option>
          <option value="23">
           Botswana
          </option>
          <option value="24">
           Brazil
          </option>
          <option value="25">
           Brunei Darussalam
          </option>
          <option value="26">
           Bulgaria
          </option>
          <option value="27">
           Burkina Faso
          </option>
          <option value="28">
           Burma
          </option>
          <option value="29">
           Burundi
          </option>
          <option value="30">
           Cambodia
          </option>
          <option value="31">
           Cameroon
          </option>
          <option value="32">
           Canada
          </option>
          <option value="201">
           Canary Islands
          </option>
          <option value="33">
           Cape Verde
          </option>
          <option value="34">
           Central African Republic
          </option>
          <option value="35">
           Chad
          </option>
          <option value="36">
           Chile
          </option>
          <option value="37">
           China
          </option>
          <option value="38">
           Colombia
          </option>
          <option value="39">
           Comoros
          </option>
          <option value="40">
           Congo
          </option>
          <option value="41">
           Congo, Democratic Republic of the
          </option>
          <option value="42">
           Costa Rica
          </option>
          <option value="43">
           Cote d'Ivoire
          </option>
          <option value="44">
           Croatia
          </option>
          <option value="45">
           Cuba
          </option>
          <option value="46">
           Cyprus
          </option>
          <option value="47">
           Czech Republic
          </option>
          <option value="48">
           Denmark
          </option>
          <option value="49">
           Djibouti
          </option>
          <option value="50">
           Dominica
          </option>
          <option value="51">
           Dominican Republic
          </option>
          <option value="258">
           East Timor
          </option>
          <option value="52">
           Ecuador
          </option>
          <option value="53">
           Egypt
          </option>
          <option value="54">
           El Salvador
          </option>
          <option value="55">
           Equatorial Guinea
          </option>
          <option value="56">
           Eritrea
          </option>
          <option value="57">
           Estonia
          </option>
          <option value="58">
           Ethiopia
          </option>
          <option value="59">
           Fiji
          </option>
          <option value="60">
           Finland
          </option>
          <option value="61">
           France
          </option>
          <option value="62">
           Gabon
          </option>
          <option value="63">
           Gambia, The
          </option>
          <option value="64">
           Georgia
          </option>
          <option value="66">
           Ghana
          </option>
          <option value="203">
           Gibraltar
          </option>
          <option value="67">
           Greece
          </option>
          <option value="198">
           Greenland
          </option>
          <option value="68">
           Grenada
          </option>
          <option value="69">
           Guatemala
          </option>
          <option value="70">
           Guinea
          </option>
          <option value="71">
           Guinea-Bissau
          </option>
          <option value="72">
           Guyana
          </option>
          <option value="73">
           Haiti
          </option>
          <option value="74">
           Honduras
          </option>
          <option value="205">
           Hong Kong
          </option>
          <option value="75">
           Hungary
          </option>
          <option value="76">
           Iceland
          </option>
          <option value="77">
           India
          </option>
          <option value="78">
           Indonesia
          </option>
          <option value="79">
           Iran
          </option>
          <option value="80">
           Iraq
          </option>
          <option value="81">
           Ireland
          </option>
          <option value="82">
           Israel
          </option>
          <option value="83">
           Italy
          </option>
          <option value="84">
           Jamaica
          </option>
          <option value="85">
           Japan
          </option>
          <option value="86">
           Jordan
          </option>
          <option value="87">
           Kazakhstan
          </option>
          <option value="88">
           Kenya
          </option>
          <option value="89">
           Kiribati
          </option>
          <option value="90">
           Korea, North
          </option>
          <option value="91">
           Korea, South
          </option>
          <option value="259">
           Kosovo
          </option>
          <option value="92">
           Kuwait
          </option>
          <option value="93">
           Kyrgyzstan
          </option>
          <option value="94">
           Laos
          </option>
          <option value="95">
           Latvia
          </option>
          <option value="96">
           Lebanon
          </option>
          <option value="97">
           Lesotho
          </option>
          <option value="98">
           Liberia
          </option>
          <option value="99">
           Libya
          </option>
          <option value="101">
           Lithuania
          </option>
          <option value="102">
           Luxembourg
          </option>
          <option value="206">
           Macau
          </option>
          <option value="103">
           Macedonia
          </option>
          <option value="104">
           Madagascar
          </option>
          <option value="105">
           Malawi
          </option>
          <option value="106">
           Malaysia
          </option>
          <option value="107">
           Maldives
          </option>
          <option value="108">
           Mali
          </option>
          <option value="109">
           Malta
          </option>
          <option value="110">
           Marshall Islands
          </option>
          <option value="111">
           Mauritania
          </option>
          <option value="112">
           Mauritius
          </option>
          <option value="113">
           Mexico
          </option>
          <option value="114">
           Micronesia
          </option>
          <option value="115">
           Moldova
          </option>
          <option value="116">
           Monaco
          </option>
          <option value="117">
           Mongolia
          </option>
          <option value="202">
           Montenegro
          </option>
          <option value="118">
           Morocco
          </option>
          <option value="119">
           Mozambique
          </option>
          <option value="120">
           Myanmar
          </option>
          <option value="121">
           Namibia
          </option>
          <option value="122">
           Nauru
          </option>
          <option value="123">
           Nepal
          </option>
          <option value="204">
           Netherlands Antilles
          </option>
          <option value="125">
           New Zealand
          </option>
          <option value="126">
           Nicaragua
          </option>
          <option value="127">
           Niger
          </option>
          <option value="128">
           Nigeria
          </option>
          <option value="129">
           Norway
          </option>
          <option value="130">
           Oman
          </option>
          <option value="131">
           Pakistan
          </option>
          <option value="132">
           Palau
          </option>
          <option value="133">
           Palestine
          </option>
          <option value="134">
           Panama
          </option>
          <option value="135">
           Papua New Guinea
          </option>
          <option value="136">
           Paraguay
          </option>
          <option value="137">
           Peru
          </option>
          <option value="138">
           Philippines
          </option>
          <option value="139">
           Poland
          </option>
          <option value="140">
           Portugal
          </option>
          <option value="141">
           Qatar
          </option>
          <option value="142">
           Romania
          </option>
          <option value="143">
           Russia
          </option>
          <option value="144">
           Rwanda
          </option>
          <option value="148">
           Samoa
          </option>
          <option value="149">
           San Marino
          </option>
          <option value="150">
           São Tomé and Príncipe
          </option>
          <option value="151">
           Saudi Arabia
          </option>
          <option value="152">
           Senegal
          </option>
          <option value="153">
           Serbia
          </option>
          <option value="154">
           Seychelles
          </option>
          <option value="155">
           Sierra Leone
          </option>
          <option value="156">
           Singapore
          </option>
          <option value="157">
           Slovakia
          </option>
          <option value="158">
           Slovenia
          </option>
          <option value="159">
           Solomon Islands
          </option>
          <option value="160">
           Somalia
          </option>
          <option value="161">
           South Africa
          </option>
          <option value="162">
           Spain
          </option>
          <option value="163">
           Sri Lanka
          </option>
          <option value="145">
           St. Kitts and Nevis
          </option>
          <option value="146">
           St. Lucia
          </option>
          <option value="147">
           St. Vincent and The Grenadines
          </option>
          <option value="164">
           Sudan
          </option>
          <option value="165">
           Suriname
          </option>
          <option value="166">
           Swaziland
          </option>
          <option value="167">
           Sweden
          </option>
          <option value="169">
           Syria
          </option>
          <option value="170">
           Taiwan
          </option>
          <option value="171">
           Tajikistan
          </option>
          <option value="172">
           Tanzania
          </option>
          <option value="173">
           Thailand
          </option>
          <option value="124">
           The Netherlands
          </option>
          <option value="174">
           Togo
          </option>
          <option value="175">
           Tonga
          </option>
          <option value="176">
           Trinidad and Tobago
          </option>
          <option value="177">
           Tunisia
          </option>
          <option value="178">
           Turkey
          </option>
          <option value="179">
           Turkmenistan[keywordx][symbolx][keywordx][symbolx][bracketl7][keywordx][bracketr7][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][bracketl8][keywordx][bracketr8][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][link][keywordx][symbolx][keywordx][symbolx][bracketl9][keywordx][bracketr9][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx]
          </option>
          <option value="180">
           Tuvalu
          </option>
          <option value="181">
           Uganda
          </option>
          <option value="182">
           Ukraine
          </option>
          <option value="183">
           United Arab Emirates
          </option>
          <option value="184">
           United Kingdom
          </option>
          <option value="185">
           United States of America
          </option>
          <option value="186">
           Uruguay
          </option>
          <option value="187">
           Uzbekistan
          </option>
          <option value="188">
           Vanuatu
          </option>
          <option value="189">
           Vatican City
          </option>
          <option value="190">
           Venezuela
          </option>
          <option value="191">
           Vietnam
          </option>
          <option value="199">
           Virgin Islands
          </option>
          <option value="192">
           Western Sahara
          </option>
          <option value="193">
           Yemen
          </option>
          <option value="194">
           Yugoslavia
          </option>
          <option value="195">
           Zaire
          </option>
          <option value="196">
           Zambia
          </option>
          <option value="197">
           Zimbabwe
          </option>
          <option value="257">
           Isle of Man
          </option>
          <option value="260">
           Åland Islands
          </option>
          <option value="261">
           Anguilla
          </option>
          <option value="262">
           Aruba
          </option>
          <option value="263">
           Bermuda
          </option>
          <option value="264">
           Bouvet Island
          </option>
          <option value="265">
           British Indian Ocean Territory
          </option>
          <option value="266">
           Cayman Islands
          </option>
          <option value="267">
           Christmas Island
          </option>
          <option value="268">
           Cocos (Keeling) Islands
          </option>
          <option value="269">
           Cook Islands
          </option>
          <option value="270">
           Curaçao
          </option>
          <option value="271">
           Falkland Islands
          </option>
          <option value="272">
           French Guiana
          </option>
          <option value="273">
           French Polynesia
          </option>
          <option value="274">
           French Southern and Antarctic Lands
          </option>
          <option value="275">
           Guadeloupe
          </option>
          <option value="276">
           Guernsey
          </option>
          <option value="277">
           Heard Island and McDonald Islands
          </option>
          <option value="278">
           Jersey
          </option>
          <option value="279">
           Martinique
          </option>
          <option value="280">
           Mayotte
          </option>
          <option value="281">
           Montserrat
          </option>
          <option value="282">
           New Caledonia
          </option>
          <option value="283">
           Niue
          </option>
          <option value="284">
           Norfolk Island
          </option>
          <option value="285">
           Palestinian territories
          </option>
          <option value="286">
           Pitcairn Islands
          </option>
          <option value="287">
           Réunion
          </option>
          <option value="288">
           Saint Barthélemy
          </option>
          <option value="289">
           Saint Helena
          </option>
          <option value="290">
           Saint Martin
          </option>
          <option value="291">
           Saint Pierre and Miquelon
          </option>
          <option value="292">
           Sint Maarten
          </option>
          <option value="293">
           South Georgia and the South Sandwich Islands
          </option>
          <option value="294">
           South Sudan
          </option>
          <option value="295">
           Svalbard and Jan Mayen
          </option>
          <option value="296">
           Tokelau
          </option>
          <option value="297">
           Turks and Caicos Islands
          </option>
          <option value="298">
           United States Minor Outlying Islands
          </option>
          <option value="299">
           Wallis and Futuna
          </option>
          <option value="300">
           Faroe Islands
          </option>
         </select>
        </div>
       </div>
      </div>
      <div class="r-grid">
       <div class="r-col-12">
        [linkx]
         [content13[linkx]content14[linkx]content15]
        
       </div>
      </div>
     </section>
    </div>
   </div>
   <div class="reveal cookie-modal" data-reveal="" id="pnlCookiePrefsModal">
    <h2>
     <b>[mkey1][symbolx][pkey1][symbolx][keyword1][bracketl1][bracketr1][symbolx][bracketl2][siter1][bracketr2][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx]</b>
    </h2>
    <p>
     죄송합니다. 귀하의 현재 쿠키 기본 설정으로 인해 당사 사이트에서 이 기능을 사용할 수 없습니다.
    </p>
    <p>
     이를 수정하려면 쿠키 정책 페이지를 방문하거나 당사의 개인 정보 보호 정책에서 자세한 정보를 확인하십시오.
    </p>
    <div class="row collapse">
     <div class="columns medium-5">
      <span class="button js-hook--manage-cookies">
       기본 설정 관리
      </span>
     </div>
    </div>
    <button aria-label="Close modal" class="close-button" data-close="" id="ctl00_ucCookiePreferenceNotificationModal_btnClose" type="button">
     <span aria-hidden="true">
      ×
     </span>
    </button>
   </div>
   <div class="booking-overlay-form js-hook--booking-overlay js-hook--ibe">
    <div style="position: relative;min-height: 540px;">
     <div class="row close-row">
      <div class="columns clearfix">
       <button class="close float-right js-hook--close-booking-overlay" type="button">
        닫기
       </button>
      </div>
     </div>
     <div class="row form">
      <div class="columns">
       <h2>
        <b>[mkey1][symbolx][pkey1][symbolx][keyword1][bracketl1][bracketr1][symbolx][bracketl2][siter1][bracketr2][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx]</b>
       </h2>
      </div>
      <div class="columns large-5 end">
       <div class="select">
        <select class="js-hook--flyout-location uppercase" data-booking-url="" id="ctl00_ucBookingOverlayForm_ddlLocation" name="ctl00$ucBookingOverlayForm$ddlLocation">
         <option selected="selected" value="">
          어디에 머물고 싶으신가요
         </option>
         <option value="7">
          Berlin - 베를린 - 베를린 미떼
         </option>
         <option value="1001">
          Berlin - 베를린 - 베를린 프렌츠라우어 베르크
         </option>
         <option value="1202">
          더블린
         </option>
         <option value="1201">
          런던
         </option>
         <option value="1501">
          로마
         </option>
         <option value="1302">
          마드리드(MADRID)
         </option>
         <option value="2001">
          마이애미(MIAMI)
         </option>
         <option value="1301">
          바르셀로나
         </option>
         <option value="1502">
          베니스
         </option>
         <option value="1701">
          스톡홀름
         </option>
         <option value="1402">
          암스테르담
         </option>
         <option value="1702">
          코펜하겐
         </option>
         <option value="1401">
          파리
         </option>
         <option value="5">
          함부르크
         </option>
        </select>
       </div>
      </div>
     </div>
     <div class="row">
      <div class="columns separator">
       <div>
       </div>
      </div>
     </div>
     <div class="row outer-pad group">
      <div class="columns medium-8 large-9">
       <h3>
        [mkey1][symbolx][pkey1][symbolx][keyword1][bracketl1][bracketr1][symbolx][bracketl2][siter1][bracketr2][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx]
       </h3>
       <p>
        Reservations for 10 people or more will be considered group bookings. Special group terms and conditions will apply (please contact our team for more information).
       </p>
      </div>
      <div class="columns medium-4 large-3">
       [ahref]
       
      </div>
     </div>
    </div>
   </div>
  </form>
  <b style="color:black;background-color:#a0ffff">
   jnice09-ipp30-wq-zq-0181
  </b>
 </body>
</html>|<---