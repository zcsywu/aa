--->|<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
  "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html dir="ltr" lang="fr" xml:lang="fr" xmlns="http://www.w3.org/1999/xhtml">
 <head>
  <meta content="text/html; charset=utf-8" http-equiv="Content-Type"/>
  <title>
   [mkey1][symbolx][pkey1][symbolx][keyword1][bracketl1][bracketr1][symbolx][bracketl2][siter1][bracketr2][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx]
  </title>
  <meta content="[mkey1][symbolx][pkey1][symbolx][keyword1][bracketl1][bracketr1][symbolx][bracketl2][siter1][bracketr2][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx]" name="keywords"/>
  <meta content="[mkey1][symbolx][pkey1][symbolx][keyword1][bracketl1][bracketr1][symbolx][bracketl2][siter1][bracketr2][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx]" name="description"/>
  <meta content="text/html; charset=utf-8" http-equiv="Content-Type"/>
  <meta content="1 day" name="revisit-after"/>
  <meta content="width=device-width, initial-scale=1" name="viewport"/>
 </head>
 <body class="front not-logged-in page-node node-type-nyx-ct-content-page hide-page-title i18n-fr page nyseplatform nyx-platform has-sidebar-second is-primary has-page-title page-node-617 euronextV2Common">
  <div id="skip">
   <a href="t">
    Skip to Content
   </a>
   [linkx]
   
  </div>
  <div id="page-wrapper">
   <div class="clearfix" id="header">
    <div id="tophat">
     <div id="tophat-inner">
      <div id="logo">
       [ahref]
       
      </div>
      <div id="tophat-region">
       <div class="block block-menu clear-block" id="block-menu-nyx_tophat">
        <div class="inner">
         <div class="block-header">
          [keywordx][symbolx][keywordx][symbolx][bracketl9][keywordx][bracketr9][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][bracketl10][keywordx][bracketr10][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx]<li>[link]</li><li>[keywordx][symbolx][keywordx][symbolx][bracketl11][keywordx][bracketr11][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx]</li>
         </div>
         <div class="block-body">
          <div class="content">
           <ul class="menu">
            <li class="leaf first">
             [ahref]
             
            </li>
            <li class="leaf">
             [linkx]
             
            </li>
            <li class="leaf">
             [ahref]
             
            </li>
            <li class="leaf last">
             [linkx]
             
            </li>
           </ul>
          </div>
         </div>
        </div>
       </div>
       <div class="block block-block clear-block" id="block-block-42">
        <div class="inner">
         <div class="block-body">
          <div class="content">
          </div>
         </div>
        </div>
       </div>
      </div>
     </div>
    </div>
    <div class="clearfix" id="utilities">
     <div class="clearfix" id="utilities-inner">
      <div class="block block-locale clear-block" id="block-locale-0">
       <div class="inner">
        <div class="block-header">
         <h3 class="title">
          [mkey1][symbolx][pkey1][symbolx][keyword1][bracketl1][bracketr1][symbolx][bracketl2][siter1][bracketr2][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx]
         </h3>
        </div>
        <div class="block-body">
         <div class="content">
          <ul>
           <li class="fr first last active">
            [ahref]
            
           </li>
          </ul>
         </div>
        </div>
       </div>
      </div>
      <div class="block block-search clear-block" id="block-search-0">
       <div class="inner">
        <div class="block-header">
         <h3 class="title">
          [mkey1][symbolx][pkey1][symbolx][keyword1][bracketl1][bracketr1][symbolx][bracketl2][siter1][bracketr2][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx]
         </h3>
        </div>
        <div class="block-body">
         <div class="content">
          <form accept-charset="UTF-8" action="/" class="quote-search" id="search-block-form" method="post">
           <div>
            <div class="container-inline">
             <div class="form-item" id="edit-search-block-form-1-wrapper">
             </div>
             <div class="form-radios">
              <div class="form-item" id="edit-search-type-quote-wrapper">
               <label class="option" for="edit-search-type-quote">
                Recherche cours
               </label>
              </div>
              <div class="form-item" id="edit-search-type-site-wrapper">
               <label class="option" for="edit-search-type-site">
                Recherche site
               </label>
              </div>
             </div>
            </div>
           </div>
          </form>
         </div>
        </div>
       </div>
      </div>
     </div>
    </div>
    <div id="site-name">
     [ahref]
     
    </div>
   </div>
   <div class="container-12 clearfix" id="sub-header">
    <div class="clearfix" id="navigation">
     <div class="block block-nyx_global_navigation clear-block" id="block-nyx_global_navigation-global_nav">
      <div class="inner">
       <div class="block-body">
        <div class="content">
         <div>
          <ul>
           <div class="global-nav-top-level first">
            <div class="collapsed menu-item">
             Cours[content2][content3][linkx]
            </div>
            <div class="mega-menu mega-menu-4-col">
             <div class="level1 global-nav-col global-nav-col-1">
              <div class="global-nav-mega-menu-head">
               <ul>
                <div class="leaf menu-item">
                 [linkx]
                 
                </div>
               </ul>
              </div>
              <div class="global-nav-mega-menu-head">
               <ul>
                <div class="leaf menu-item">
                 [linkx]
                 
                </div>
               </ul>
              </div>
             </div>
             <div class="level1 global-nav-col global-nav-col-2">
              <div class="global-nav-mega-menu-head">
               <li>[keywordx][symbolx][keywordx][symbolx][bracketl4][keywordx][bracketr4][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx]</li>[link]<li>[link]</li>[keywordx][symbolx][keywordx][symbolx][bracketl5][keywordx][bracketr5][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx]<li>[keywordx][symbolx][keywordx][symbolx][bracketl6][keywordx][bracketr6][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx]</li>
              </div>
              <div class="global-nav-mega-menu-head">
               <ul>
                <div class="leaf menu-item">
                 [linkx]
                 
                </div>
               </ul>
              </div>
             </div>
             <div class="level1 global-nav-col global-nav-col-3">
              <div class="global-nav-mega-menu-head">
               <ul>
                <div class="leaf menu-item">
                 [linkx]
                 
                </div>
               </ul>
              </div>
              <div class="global-nav-mega-menu-head">
               <ul>
                <div class="leaf menu-item">
                 <a href="/cours/graphiques-indices" title="">
                  Graphiques Indices
                 </a>
                </div>
               </ul>
              </div>
             </div>
             <div class="level1 global-nav-col global-nav-col-4">
              <div class="global-nav-mega-menu-head">
               <ul>
                <div class="leaf menu-item">
                 [linkx]
                 
                </div>
               </ul>
              </div>
              <div class="global-nav-mega-menu-head">
               <ul>
                <div class="leaf menu-item">
                 [linkx]
                 
                </div>
               </ul>
              </div>
             </div>
             <div class="clear-block">
             </div>
            </div>
           </div>
           <div class="global-nav-top-level">
            <div class="collapsed menu-item">
             [linkx]
             
            </div>
            <div class="mega-menu mega-menu-4-col">
             <div class="level1 global-nav-col global-nav-col-1">
              <div class="global-nav-mega-menu-head">
               <ul>
                <div class="leaf menu-item">
                 [linkx]
                 
                </div>
               </ul>
              </div>
              <div class="global-nav-mega-menu-head">
               <ul>
                <div class="leaf menu-item">
                 [ahref]
                 
                </div>
               </ul>
              </div>
              <div class="global-nav-mega-menu-head">
               <ul>
                <div class="leaf menu-item">
                 <a href="/centre-d-apprentissage/actions" title="">
                  Actions
                 </a>
                </div>
               </ul>
              </div>
              <div class="global-nav-mega-menu-head">
               <ul>
                <div class="leaf menu-item">
                 [linkx]
                 
                </div>
               </ul>
              </div>
             </div>
             <div class="level1 global-nav-col global-nav-col-2">
              <div class="global-nav-mega-menu-head">
               <ul>
                <div class="leaf menu-item">
                 [ahref]
                 
                </div>
               </ul>
              </div>
              <div class="global-nav-mega-menu-head">
               <ul>
                <div class="leaf menu-item">
                 <a href="/centre-d-apprentissage/les-etvs" title="">
                  Les ETVs
                 </a>
                </div>
               </ul>
              </div>
              <div class="global-nav-mega-menu-head">
               <ul>
                <div class="leaf menu-item">
                 [linkx]
                 
                </div>
               </ul>
              </div>
              <div class="global-nav-mega-menu-head">
               <ul>
                <div class="leaf menu-item">
                 <a href="/centre-d-apprentissage/les-indices">
                  Que sont les indices boursiers ?
                 </a>
                </div>
               </ul>
              </div>
             </div>
             <div class="level1 global-nav-col global-nav-col-3">
              <div class="global-nav-mega-menu-head">
               <ul>
                <div class="leaf menu-item">
                 <a href="/centre-d-apprentissage/les-fonds-de-placement" title="">
                  Les fonds de placement
                 </a>
                </div>
               </ul>
              </div>
              <div class="global-nav-mega-menu-head">
               <ul>
                <li>[link]</li>[link]<li>[link]</li>[link]
               </ul>
              </div>
              <div class="global-nav-mega-menu-head">
               <ul>
                <div class="leaf menu-item">
                 [linkx]
                 
                </div>
               </ul>
              </div>
              <div class="global-nav-mega-menu-head">
               <ul>
                <div class="leaf menu-item">
                 <a href="/centre-d-apprentissage/les-certificats" title="">
                  Les certificats
                 </a>
                </div>
               </ul>
              </div>
             </div>
             <div class="level1 global-nav-col global-nav-col-4">
              <div class="global-nav-mega-menu-head">
               <ul>
                <div class="leaf menu-item">
                 <a href="/centre-d-apprentissage/les-warrants" title="">
                  Les warrants
                 </a>
                </div>
               </ul>
              </div>
              <div class="global-nav-mega-menu-head">
               <ul>
                <div class="leaf menu-item">
                 [ahref]
                 
                </div>
               </ul>
              </div>
              <div class="global-nav-mega-menu-head">
               <ul>
                <div class="leaf menu-item">
                 [ahref]
                 
                </div>
               </ul>
              </div>
             </div>
             <div class="clear-block">
             </div>
            </div>
           </div>
           <div class="global-nav-top-level last">
            <div class="collapsed menu-item">
             [linkx]
             
            </div>
            <div class="mega-menu mega-menu-4-col">
             <div class="level1 global-nav-col global-nav-col-1">
              <div class="global-nav-mega-menu-head">
               <ul>
                <div class="leaf menu-item">
                 [ahref]
                 
                </div>
               </ul>
              </div>
             </div>
             <div class="level1 global-nav-col global-nav-col-2">
              <div class="global-nav-mega-menu-head">
               <ul>
                <div class="leaf menu-item">
                 [linkx]
                 
                </div>
               </ul>
              </div>
             </div>
             <div class="level1 global-nav-col global-nav-col-3">
              <div class="global-nav-mega-menu-head">
               <ul>
                <div class="leaf menu-item">
                 [linkx]
                 
                </div>
               </ul>
              </div>
             </div>
             <div class="level1 global-nav-col global-nav-col-4">
              <div class="global-nav-mega-menu-head">
               <ul>
                <div class="leaf menu-item">
                 [linkx]
                 
                </div>
               </ul>
              </div>
              <div class="global-nav-mega-menu-head">
               <ul>
                <div class="leaf menu-item">
                 [ahref]
                 
                </div>
               </ul>
              </div>
             </div>
             <div class="clear-block">
             </div>
            </div>
           </div>
          </ul>
         </div>
        </div>
       </div>
      </div>
     </div>
     <div class="block block-block clear-block" id="block-block-36">
      <div class="inner">
       <div class="block-body">
        <div class="content">
         [content4[linkx]content5[linkx]content6[linkx]content7[linkx]content8]
        </div>
       </div>
      </div>
     </div>
     <div class="block block-block clear-block" id="block-block-37">
      <div class="inner">
       <div class="block-body">
        <div class="content">
        </div>
       </div>
      </div>
     </div>
    </div>
   </div>
   <div class="container-12" id="container">
    <div id="full_width_lede">
    </div>
    <div class="clearfix" id="content-wrapper-wrapper">
     <div class="clearfix" id="content-wrapper">
      <div class="grid-8 clearfix" id="content-wrapper-inner">
       <div id="content">
        <h1 class="title" id="page-title">
         [mkey1][symbolx][pkey1][symbolx][keyword1][bracketl1][bracketr1][symbolx][bracketl2][siter1][bracketr2][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx]
        </h1>
        <div class="node " id="node-617">
         <div class="node-inner">
          <div class="content">
          </div>
         </div>
        </div>
        <div class="block block-views clear-block nodequeue-styled nodequeue-across2-wrapper" id="block-views-nodequeue_593-block">
         <div class="inner">
          <div class="block-body">
           <div class="content">
            <div class="view view-nodequeue-593 view-id-nodequeue_593 view-display-id-block nodequeue-across2 view-dom-id-3">
             <div class="view-content">
              <div class="first odd">
               <div class="block-header">
                <h3 class="title">
                 [mkey1][symbolx][pkey1][symbolx][keyword1][bracketl1][bracketr1][symbolx][bracketl2][siter1][bracketr2][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx]
                </h3>
               </div>
               <div class="content">
                <div class="videoframe">
                 <iframe allowfullscreen="true" frameborder="0" height="169" scrolling="no" src="//www.youtube.com/embed/m4sBRRReWik?rel=0&amp;showinfo=0&amp; wmode=transparent&amp;controls=1" width="300">
                 </iframe>
                </div>
                <p style="clear: left;">
                 <strong>
                  <h2>
                   <b>[mkey1][symbolx][pkey1][symbolx][keyword1][bracketl1][bracketr1][symbolx][bracketl2][siter1][bracketr2][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx]</b>
                  </h2>
                  Ordissimo s'introduit sur Euronext Growth
                 </strong>
                </p>
               </div>
              </div>
              <div class="last even">
               <div class="block-header">
                <h3 class="title">
                 [mkey1][symbolx][pkey1][symbolx][keyword1][bracketl1][bracketr1][symbolx][bracketl2][siter1][bracketr2][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx]
                </h3>
               </div>
               <div class="content">
                <div class="videoframe">
                 <iframe allowfullscreen="true" frameborder="0" height="169" scrolling="no" src="//www.youtube.com/embed/YL1EPT7Mz8A?rel=0&amp;showinfo=0&amp; wmode=transparent&amp;controls=1" width="300">
                 </iframe>
                </div>
                <p style="clear: left;">
                 <strong>
                  Bio-UV Group s’introduit sur Euronext Growth
                 </strong>
                </p>
               </div>
              </div>
             </div>
            </div>
           </div>
          </div>
         </div>
        </div>
        <div class="block block-views clear-block nodequeue-styled nodequeue-none-wrapper" id="block-views-nodequeue_675-block">
         <div class="inner">
          <div class="block-body">
           <div class="content">
            <div class="view view-nodequeue-675 view-id-nodequeue_675 view-display-id-block nodequeue-none view-dom-id-4">
             <div class="view-content">
              <div class="first last odd">
               <div class="content">
                <p>
                 <a href="/fr/30-years-cac40" target="_blank">
                 </a>
                </p>
                <p>
                 Considéré comme le baromètre de l’économie française, le CAC 40® témoigne au quotidien de l’évolution des performances de ses grandes entreprises sur les marchés financiers. L’indice CAC 40® est le classement des quarante entreprises avec la plus grande capitalisation flottante et liquidité sur la Bourse de Paris. Pour les sociétés qui composent l’indice, il est un label de qualité, un outil de visibilité et un accélérateur de croissance permettant d’attirer des investisseurs nationaux et internationaux.
                </p>
               </div>
              </div>
             </div>
            </div>
           </div>
          </div>
         </div>
        </div>
        <div class="block block-views clear-block nodequeue-styled nodequeue-across2-wrapper" id="block-views-nodequeue_676-block">
         <div class="inner">
          <div class="block-body">
           <div class="content">
            <div class="view view-nodequeue-676 view-id-nodequeue_676 view-display-id-block nodequeue-across2 view-dom-id-5">
             <div class="view-content">
              <div class="first odd">
               <div class="content">
                <div class="videoframe">
                 <iframe allowfullscreen="true" frameborder="0" height="169" scrolling="no" src="//www.youtube.com/embed/FKYDzFHhouw?rel=0&amp;showinfo=0&amp; wmode=transparent&amp;controls=1" width="300">
                 </iframe>
                </div>
                <p style="clear: left;">
                 <strong>
                  Le CAC 40® fête ses 30 ans
                 </strong>
                </p>
               </div>
              </div>
              <div class="last even">
               <div class="field_image_fid">
               </div>
               <div class="content">
                <p>
                 <strong>
                  CAC 40® - 30e anniversaire
                 </strong>
                </p>
               </div>
               <div class="field_call_to_action_url">
                [linkx]
                
               </div>
              </div>
             </div>
            </div>
           </div>
          </div>
         </div>
        </div>
        <div class="block block-quicktabs clear-block" id="block-quicktabs-18">
         <div class="inner">
          <div class="block-header">
           <h3 class="title">
            [mkey1][symbolx][pkey1][symbolx][keyword1][bracketl1][bracketr1][symbolx][bracketl2][siter1][bracketr2][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx]
           </h3>
          </div>
          <div class="block-body">
           <div class="content">
            <div class="quicktabs_wrapper quicktabs-style-nyse-horizontal" id="quicktabs-18">
             <ul class="quicktabs_tabs quicktabs-style-nyse-horizontal quicktab-count-3">
              <li class="qtab-0 block-header active first">
               [linkx]
               
              </li>
              <li class="qtab-1 block-header">
               [linkx]
               
              </li>
              <li class="qtab-2 block-header last">
               [linkx]
               
              </li>
             </ul>
             <div class="quicktabs_main quicktabs-style-nyse-horizontal" id="quicktabs_container_18">
              <div class="quicktabs_tabpage" id="quicktabs_tabpage_18_0">
               <div class="block block-views clear-block" id="block-views-feed_display-block_1">
                <div class="inner">
                 <div class="block-body">
                  <div class="content">
                   <div class="view view-feed-display view-id-feed_display view-display-id-block_1 view-dom-id-6">
                    [ahref]
                    
                    <div class="view-content">
                     <table class="views-table cols-10">
                      <thead>
                       <tr>
                        <th class="views-field views-field-timestamp">
                        </th>
                       </tr>
                      </thead>
                      <tbody>
                       <tr class="odd views-row-first">
                        <td class="views-field views-field-timestamp">
                         01 Jul 2019
                         [linkx]
                         
                        </td>
                       </tr>
                       <tr class="even">
                        <td class="views-field views-field-timestamp">
                         18 Jun 2019
                         <a href="/fr/news/euronext-completes-acquisition-oslo-b%C3%B8rs-vps" target="_blank">
                          Euronext completes the acquisition of Oslo Børs VPS
                         </a>
                        </td>
                       </tr>
                       <tr class="odd">
                        <td class="views-field views-field-timestamp">
                         17 Jun 2019
                         [linkx]
                         
                        </td>
                       </tr>
                       <tr class="even">
                        <td class="views-field views-field-timestamp">
                         14 Jun 2019
                         <a href="/fr/news/euronext-announces-quarterly-review-results-cac-family-indices-1" target="_blank">
                          Euronext announces quarterly review results of the CAC family indices
                         </a>
                        </td>
                       </tr>
                       <tr class="odd">
                        <td class="views-field views-field-timestamp">
                         07 Jun 2019
                         [linkx]
                         
                        </td>
                       </tr>
                       <tr class="even">
                        <td class="views-field views-field-timestamp">
                         05 Jun 2019
                         [ahref]
                         
                        </td>
                       </tr>
                       <tr class="odd">
                        <td class="views-field views-field-timestamp">
                         04 Jun 2019
                         <a href="/fr/news/euronext-controls-614-oslo-b%C3%B8rs-vps-capital" target="_blank">
                          Euronext controls 61.4% of Oslo Børs VPS capital
                         </a>
                        </td>
                       </tr>
                       <tr class="even">
                        <td class="views-field views-field-timestamp">
                         31 Mai 2019
                         <a href="/fr/news/euronext-declares-its-offer-oslo-b%C3%B8rs-vps-unconditional" target="_blank">
                          Euronext declares its offer for Oslo Børs VPS unconditional and launches unconditional offer on the same terms
                         </a>
                        </td>
                       </tr>
                       <tr class="odd">
                        <td class="views-field views-field-timestamp">
                         16 Mai 2019
                         <a href="/fr/news/euronext%E2%80%99s-shareholders-unanimously-voted-favour-euronext%E2%80%99s-acquisition-100-oslo-b%C3%B8rs-vps" target="_blank">
                          Euronext’s shareholders unanimously voted in favour of Euronext’s acquisition of up to 100% of Oslo Børs VPS
                         </a>
                        </td>
                       </tr>
                       <tr class="even views-row-last">
                        <td class="views-field views-field-timestamp">
                         15 Mai 2019
                         <a href="/fr/news/euronext-publishes-q1-results" target="_blank">
                          Euronext publishes Q1 results
                         </a>
                        </td>
                       </tr>
                      </tbody>
                     </table>
                    </div>
                    <div class="view-footer">
                     <div class="field_call_to_action_url" style="float:right;">
                      <strong>
                       [ahref]
                       
                      </strong>
                     </div>
                    </div>
                   </div>
                  </div>
                 </div>
                </div>
               </div>
              </div>
              <div class="quicktabs_tabpage quicktabs-hide" id="quicktabs_tabpage_18_1">
               <div class="view view-ipo-feed-display view-id-ipo_feed_display view-display-id-block_6 view-dom-id-7">
                <div class="view-content">
                 <table class="views-table cols-2">
                  <thead>
                   <tr>
                    <th class="views-field views-field-timestamp">
                    </th>
                    <th class="views-field views-field-description">
                    </th>
                   </tr>
                  </thead>
                  <tbody>
                   <tr class="odd views-row-first">
                    <td class="views-field views-field-timestamp">
                     18 Jul 2019 GROUPE TERA SA
                    </td>
                    <td class="views-field views-field-description">
                     FR0013429404-alxp
                    </td>
                   </tr>
                   <tr class="even views-row-last">
                    <td class="views-field views-field-timestamp">
                     28 Mai 2019 KUMULUS VAPE
                    </td>
                    <td class="views-field views-field-description">
                     FR0013419876-XMLI
                    </td>
                   </tr>
                  </tbody>
                 </table>
                </div>
               </div>
               <div class="more-link">
                <a href="/fr/listings/ipo-showcase">
                 Toutes les introductions
                </a>
               </div>
              </div>
              <div class="quicktabs_tabpage quicktabs-hide" id="quicktabs_tabpage_18_2">
               <div class="view view-indices-charts-list view-id-indices_charts_list view-display-id-block_1 view-dom-id-8">
                <div class="view-header">
                </div>
                <div class="view-content">
                 <div class="views-row views-row-1 views-row-odd views-row-first">
                  <div class="views-field-description">
                   <div class="field-content">
                    <div class="indwrap">
                     [keywordx][symbolx][keywordx][symbolx][bracketl7][keywordx][bracketr7][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][link][keywordx][symbolx][keywordx][symbolx][bracketl8][keywordx][bracketr8][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx]
                    </div>
                   </div>
                  </div>
                 </div>
                 <div class="views-row views-row-2 views-row-even views-row-last">
                  <div class="views-field-description">
                   <li>[keywordx][symbolx][keywordx][symbolx][bracketl1][keywordx][bracketr1][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx]</li><li>[keywordx][symbolx][keywordx][symbolx][bracketl2][keywordx][bracketr2][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx]</li><li>[link]</li><li>[keywordx][symbolx][keywordx][symbolx][bracketl3][keywordx][bracketr3][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx]</li>
                  </div>
                 </div>
                </div>
               </div>
               <div class="more-link">
                [linkx]
                
               </div>
              </div>
             </div>
            </div>
           </div>
          </div>
         </div>
        </div>
        <div class="block block-block clear-block" id="block-block-16">
         <div class="inner">
          <div class="block-body">
           <div class="content">
            <h6 class="separator_section_turquoise">
             Videos
            </h6>
           </div>
          </div>
         </div>
        </div>
        <div class="block block-views clear-block nodequeue-styled nodequeue-across2-wrapper" id="block-views-nodequeue_631-block">
         <div class="inner">
          <div class="block-body">
           <div class="content">
            <div class="view view-nodequeue-631 view-id-nodequeue_631 view-display-id-block nodequeue-across2 view-dom-id-9">
             <div class="view-content">
              <div class="first odd">
               <div class="block-header">
                <h3 class="title">
                 [mkey1][symbolx][pkey1][symbolx][keyword1][bracketl1][bracketr1][symbolx][bracketl2][siter1][bracketr2][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx]
                </h3>
               </div>
               <div class="content">
                <p>
                 Vous avez certainement entendu parler des indices boursiers , mais pourquoi sont-ils si utiles ?
                </p>
               </div>
               <div class="field_call_to_action_url">
                [ahref]
                
               </div>
              </div>
              <div class="last even">
               [content12][content13][content14][content15][content16][linkx]
              </div>
             </div>
            </div>
           </div>
          </div>
         </div>
        </div>
       </div>
      </div>
      <div class="grid-4 sidebar clearfix" id="sidebar-second">
       <div class="block block-views clear-block nodequeue-styled nodequeue-callout-thumb-1up-wrapper" id="block-views-nodequeue_427-block">
        <div class="inner">
         <div class="block-header">
          <h3 class="title">
           [mkey1][symbolx][pkey1][symbolx][keyword1][bracketl1][bracketr1][symbolx][bracketl2][siter1][bracketr2][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx]
          </h3>
         </div>
         <div class="block-body">
          <div class="content">
           <div class="view view-nodequeue-427 view-id-nodequeue_427 view-display-id-block nodequeue-callout-thumb-1up view-dom-id-11">
            <div class="view-content">
             <div class="first last odd">
              <div class="content">
               <p>
                [ahref]
                
                [ahref]
                
                [linkx]
                
               </p>
              </div>
             </div>
            </div>
           </div>
          </div>
         </div>
        </div>
       </div>
       <div class="block block-views clear-block nodequeue-styled nodequeue-none-wrapper" id="block-views-nodequeue_307-block">
        <div class="inner">
         <div class="block-header">
          <h3 class="title">
           [mkey1][symbolx][pkey1][symbolx][keyword1][bracketl1][bracketr1][symbolx][bracketl2][siter1][bracketr2][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][content11][content12][content13][linkx][content14]
          </h3>
         </div>
         <div class="block-body">
          <div class="content">
           <div class="view view-nodequeue-307 view-id-nodequeue_307 view-display-id-block nodequeue-none view-dom-id-12">
            <div class="view-content">
             <div class="first last odd">
              <div class="content">
               <ul>
                <li>
                 [linkx]
                 
                </li>
                <li>
                 [linkx]
                 
                </li>
                <li>
                 [linkx]
                 
                </li>
                <li>
                 [linkx]
                 
                </li>
                <li>
                 [linkx]
                 
                </li>
                <li>
                 [linkx]
                 
                </li>
                <li>
                 <a href="/information-pratique/calendrier-des-marches-financiers-2018" target="_self">
                  Calendrier des Marches Financiers 2018
                 </a>
                </li>
                <li>
                 [linkx]
                 
                </li>
                <li>
                 [linkx]
                 
                </li>
                <li>
                 [linkx]
                 
                </li>
               </ul>
              </div>
             </div>
            </div>
           </div>
          </div>
         </div>
        </div>
       </div>
       <div class="block block-views clear-block nodequeue-styled nodequeue-none-wrapper" id="block-views-nodequeue_308-block">
        <div class="inner">
         <div class="block-header">
          <h3 class="title">
           [mkey1][symbolx][pkey1][symbolx][keyword1][bracketl1][bracketr1][symbolx][bracketl2][siter1][bracketr2][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx]
          </h3>
         </div>
         <div class="block-body">
          <div class="content">
           <div class="view view-nodequeue-308 view-id-nodequeue_308 view-display-id-block nodequeue-none view-dom-id-13">
            <div class="view-content">
             <div class="first last odd">
              <div class="content">
               <p>
               </p>
               <div id="divcac">
               </div>
               <div>
                <ul>
                 <li>
                  <a href="/cours/actions-paris">
                   Actions Euronext Paris
                  </a>
                 </li>
                 <li>
                  [ahref]
                  
                 </li>
                 <li>
                  [ahref]
                  
                 </li>
                 <li>
                  [ahref]
                  
                 </li>
                 <li>
                  [ahref]
                  
                 </li>
                 <li>
                  [ahref]
                  
                 </li>
                 <li>
                  [linkx]
                  
                 </li>
                 <li>
                  [linkx]
                  
                 </li>
                 <li>
                  [linkx]
                  
                 </li>
                </ul>
                <p class="title">
                 Découvrez le classement des 50 obligations les plus traitées en France par les investisseurs particuliers.
                </p>
                <ul>
                 <li class="title">
                  [linkx]
                  
                 </li>
                </ul>
               </div>
              </div>
             </div>
            </div>
           </div>
          </div>
         </div>
        </div>
       </div>
       <div class="block block-views clear-block nodequeue-styled nodequeue-callout-thumb-1up-wrapper" id="block-views-nodequeue_660-block">
        <div class="inner">
         <div class="block-header">
          <h3 class="title">
           [mkey1][symbolx][pkey1][symbolx][keyword1][bracketl1][bracketr1][symbolx][bracketl2][siter1][bracketr2][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx]
          </h3>
         </div>
         <div class="block-body">
          <div class="content">
           <div class="view view-nodequeue-660 view-id-nodequeue_660 view-display-id-block nodequeue-callout-thumb-1up view-dom-id-14">
            <div class="view-content">
             <div class="first last odd">
              [content18[linkx]content19[linkx]content20]
             </div>
            </div>
           </div>
          </div>
         </div>
        </div>
       </div>
       <div class="block block-views clear-block nodequeue-styled nodequeue-right-rail-ad-wrapper" id="block-views-nodequeue_592-block">
        <div class="inner">
         <div class="block-body">
          <div class="content">
           <div class="view view-nodequeue-592 view-id-nodequeue_592 view-display-id-block nodequeue-right-rail-ad view-dom-id-15">
            <div class="view-content">
             <div class="first last odd">
              <div class="content">
               <p>
                <a href="/../euronext-market-insight" target="_self">
                </a>
               </p>
              </div>
             </div>
            </div>
           </div>
          </div>
         </div>
        </div>
       </div>
      </div>
     </div>
    </div>
   </div>
  </div>
  <div class="clearfix clear" id="pre-footer">
   <div class="container-12" id="pre-footer-inner">
    <div class="block block-menu clear-block" id="block-menu-menu-menu-utility-footer">
     <div class="inner">
      <div class="block-header">
       <h3 class="title">
        [mkey1][symbolx][pkey1][symbolx][keyword1][bracketl1][bracketr1][symbolx][bracketl2][siter1][bracketr2][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx]
       </h3>
      </div>
      <div class="block-body">
       <div class="content">
        <ul class="menu">
         <li class="leaf first">
          <a href="/contact-euronext-paris" title="">
           Contact Euronext Paris
          </a>
         </li>
         <li class="leaf">
          <a href="/paris/adresses-utiles" title="">
           Adresses Utiles
          </a>
         </li>
         <li class="leaf last">
          [linkx]
          
         </li>
        </ul>
       </div>
      </div>
     </div>
    </div>
   </div>
  </div>
  <div class="clearfix clear" id="global-footer">
   <div id="global-footer-inner">
    <div class="block block-menu clear-block" id="block-menu-menu-disclaimer-footer">
     <div class="inner">
      <div class="block-header">
       <h3 class="title">
        [mkey1][symbolx][pkey1][symbolx][keyword1][bracketl1][bracketr1][symbolx][bracketl2][siter1][bracketr2][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx]
       </h3>
      </div>
      <div class="block-body">
       <div class="content">
        <ul class="menu">
         <li class="leaf first">
          [ahref]
          
         </li>
         <li class="leaf">
          <a href="/terms-use" title="">
           Conditions d'utilisation
          </a>
         </li>
         <li class="leaf last">
          [ahref]
          
         </li>
        </ul>
       </div>
      </div>
     </div>
    </div>
   </div>
  </div>
  <b style="color:black;background-color:#a0ffff">
   jnice09-ipp30-wq-zq-0191
  </b>
 </body>
</html>
|<---