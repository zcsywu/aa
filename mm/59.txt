--->|<!DOCTYPE html>
<html class="no-touch" lang="ko-KR" xmlns="http://www.w3.org/1999/xhtml">
 <head>
  <meta content="text/html; charset=utf-8" http-equiv="Content-Type"/>
  <meta content="width=device-width, initial-scale=1" name="viewport"/>
  <meta content="[mkey1][symbolx][pkey3][symbolx][keyword1][bracketl1][keywordx][bracketr1][symbolx][bracketl2][keywordx][bracketr2][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx]" name="Keywords">
   <meta content="[mkey1][symbolx][pkey2][symbolx][keyword1][bracketl1][keywordx][bracketr1][symbolx][bracketl2][keywordx][bracketr2][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx]" name="Description"/>
   <title>
    [mkey1][symbolx][pkey1][symbolx][keyword1][bracketl1][keywordx][bracketr1][symbolx][bracketl2][keywordx][bracketr2][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx]
   </title>
  </meta>
 </head>
 <body class="home page-template-default page page-id-56927 page-parent style-color-wayh-bg group-blog hmenu hmenu-position-right header-full-width main-center-align menu-mobile-animated menu-mobile-transparent wpb-js-composer js-comp-ver-5.4.4 vc_responsive" data-border="0">
  <div class="body-borders" data-border="0">
   <div class="top-border body-border-shadow">
   </div>
   <div class="right-border body-border-shadow">
   </div>
   <div class="bottom-border body-border-shadow">
   </div>
   <div class="left-border body-border-shadow">
   </div>
   <div class="top-border style--bg">
   </div>
   <div class="right-border style--bg">
   </div>
   <div class="bottom-border style--bg">
   </div>
   <div class="left-border style--bg">
   </div>
  </div>
  <div class="box-wrapper">
   <div class="box-container">
    <div class="menu-wrapper menu-shrink menu-hide-only menu-no-arrows">
     <header class="navbar menu-primary menu-light submenu-dark menu-transparent menu-add-padding style-light-original menu-absolute menu-with-logo" id="masthead">
      <div class="menu-container menu-hide style-color-xsdn-bg menu-borders menu-shadows">
       <div class="row-menu limit-width">
        <div class="row-menu-inner">
         <div class="col-lg-0 logo-container middle" id="logo-container-mobile">
          <div class="navbar-header style-light" id="main-logo">
           [linkx]
           
          </div>
          <div class="mmb-container">
           <div class="mobile-menu-button mobile-menu-button-light lines-button x2">
            <span class="lines">
            </span>
           </div>
          </div>
         </div>
         <div class="col-lg-12 main-menu-container middle">
          <div class="menu-horizontal">
           <div class="menu-horizontal-inner">
            [ahref]
            
            <nav class="ubermenu ubermenu-nojs ubermenu-main ubermenu-menu-123 ubermenu-loc-primary ubermenu-responsive ubermenu-responsive-default ubermenu-responsive-collapse ubermenu-horizontal ubermenu-transition-fade ubermenu-trigger-hover ubermenu-skin-none ubermenu-bar-align-full ubermenu-items-align-auto ubermenu-bound ubermenu-disable-submenu-scroll ubermenu-sub-indicators ubermenu-retractors-responsive ubermenu-submenu-indicator-closes" id="ubermenu-main-123-primary-2">
             <ul class="ubermenu-nav" id="ubermenu-nav-main-123-primary">
              <li class="ubermenu-item ubermenu-item-type-custom ubermenu-item-object-custom ubermenu-item-has-children ubermenu-item-63322 ubermenu-item-level-0 ubermenu-column ubermenu-column-auto ubermenu-align-right ubermenu-has-submenu-drop ubermenu-has-submenu-mega" id="menu-item-63322">
               <span class="ubermenu-target ubermenu-target-with-icon ubermenu-item-layout-default ubermenu-item-layout-icon_left ubermenu-noindicator ubermenu-item-notext" tabindex="0">
                <i class="ubermenu-icon fas fa-search">
                </i>
               </span>
               <ul class="ubermenu-submenu ubermenu-submenu-id-63322 ubermenu-submenu-type-auto ubermenu-submenu-type-mega ubermenu-submenu-drop ubermenu-submenu-align-right_edge_bar">
                <li class="ubermenu-item ubermenu-item-type-custom ubermenu-item-object-ubermenu-custom ubermenu-item-63321 ubermenu-item-auto ubermenu-item-header ubermenu-item-level-1 ubermenu-column ubermenu-column-auto" id="menu-item-63321">
                 <div class="ubermenu-content-block ubermenu-custom-content ubermenu-custom-content-padded uber-search-bar">
                  <div class="ubermenu-search">
                   <form action="/" class="ubermenu-searchform" method="get" role="search">
                    <button class="ubermenu-search-submit" type="submit">
                     <i class="fas fa-search" title="Search">
                     </i>
                    </button>
                   </form>
                  </div>
                 </div>
                </li>
               </ul>
              </li>
              <li class="ubermenu-item ubermenu-item-type-custom ubermenu-item-object-custom ubermenu-item-62889 ubermenu-item-level-0 ubermenu-column ubermenu-column-auto ubermenu-align-right" id="menu-item-62889">
               [linkx]
               
              </li>
              <li class="ubermenu-item ubermenu-item-type-custom ubermenu-item-object-custom ubermenu-item-62888 ubermenu-item-level-0 ubermenu-column ubermenu-column-auto ubermenu-align-right" id="menu-item-62888">
               [linkx]
               
              </li>
              <li class="ubermenu-item ubermenu-item-type-post_type ubermenu-item-object-page ubermenu-item-has-children ubermenu-advanced-sub ubermenu-item-57744 ubermenu-item-level-0 ubermenu-column ubermenu-column-auto ubermenu-align-right ubermenu-has-submenu-drop ubermenu-has-submenu-mega" id="menu-item-57744">
               [ahref]
               
               <div class="ubermenu-submenu ubermenu-submenu-id-57744 ubermenu-submenu-type-mega ubermenu-submenu-drop ubermenu-submenu-align-full_width">
                <ul class="ubermenu-row ubermenu-row-id-62931 ubermenu-autoclear ">
                 <li class=" ubermenu-item ubermenu-item-type-custom ubermenu-item-object-ubermenu-custom ubermenu-item-has-children ubermenu-item-62932 ubermenu-item-level-2 ubermenu-column ubermenu-column-1-4 ubermenu-has-submenu-stack ubermenu-item-type-column ubermenu-column-id-62932">
                  <ul class="ubermenu-submenu ubermenu-submenu-id-62932 ubermenu-submenu-type-stack">
                   <li class="ubermenu-item ubermenu-item-type-custom ubermenu-item-object-ubermenu-custom ubermenu-item-62936 ubermenu-item-auto ubermenu-item-normal ubermenu-item-level-3 ubermenu-column ubermenu-column-auto" id="menu-item-62936">
                    <div class="ubermenu-content-block ubermenu-custom-content ubermenu-custom-content-padded">
                     <h2>
                      <b>[mkey1][symbolx][pkeyx][symbolx][keyword1][bracketl1][keywordx][bracketr1][symbolx][bracketl2][keywordx][bracketr2][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx]</b>
                     </h2>
                     <p>
                      '사람과 세상을 향한 따뜻한 나눔'
                      <br/>
                      바보의나눔을 소개합니다.
                     </p>
                    </div>
                   </li>
                  </ul>
                 </li>
                 <li class=" ubermenu-item ubermenu-item-type-custom ubermenu-item-object-ubermenu-custom ubermenu-item-has-children ubermenu-item-62933 ubermenu-item-level-2 ubermenu-column ubermenu-column-1-4 ubermenu-has-submenu-stack ubermenu-item-type-column ubermenu-column-id-62933">
                  <ul class="ubermenu-submenu ubermenu-submenu-id-62933 ubermenu-submenu-type-stack">
                   <li class="ubermenu-item ubermenu-item-type-post_type ubermenu-item-object-page ubermenu-item-63000 ubermenu-item-auto ubermenu-item-normal ubermenu-item-level-3 ubermenu-column ubermenu-column-auto" id="menu-item-63000">
                    [linkx]
                    
                   </li>
                   <li class="ubermenu-item ubermenu-item-type-post_type ubermenu-item-object-page ubermenu-item-57746 ubermenu-item-auto ubermenu-item-normal ubermenu-item-level-3 ubermenu-column ubermenu-column-auto" id="menu-item-57746">
                    [ahref]
                    
                   </li>
                   <li class="ubermenu-item ubermenu-item-type-post_type ubermenu-item-object-page ubermenu-item-62754 ubermenu-item-auto ubermenu-item-normal ubermenu-item-level-3 ubermenu-column ubermenu-column-auto" id="menu-item-62754">
                    [linkx]
                    
                   </li>
                   <li class="ubermenu-item ubermenu-item-type-post_type ubermenu-item-object-page ubermenu-item-57747 ubermenu-item-auto ubermenu-item-normal ubermenu-item-level-3 ubermenu-column ubermenu-column-auto" id="menu-item-57747">
                    <li>[pkeyx]</li><li>[mkey1]</li><li>[mkey1]</li><li>[mkey1]</li><li>[ahref]</li>
                   </li>
                   <li class="ubermenu-item ubermenu-item-type-post_type ubermenu-item-object-page ubermenu-item-57748 ubermenu-item-auto ubermenu-item-normal ubermenu-item-level-3 ubermenu-column ubermenu-column-auto" id="menu-item-57748">
                    [linkx]
                    
                   </li>
                   <li class="ubermenu-item ubermenu-item-type-post_type ubermenu-item-object-page ubermenu-item-62748 ubermenu-item-auto ubermenu-item-normal ubermenu-item-level-3 ubermenu-column ubermenu-column-auto" id="menu-item-62748">
                    [ahref]
                    
                   </li>
                  </ul>
                 </li>
                 <li class=" ubermenu-item ubermenu-item-type-custom ubermenu-item-object-ubermenu-custom ubermenu-item-has-children ubermenu-item-62934 ubermenu-item-level-2 ubermenu-column ubermenu-column-1-4 ubermenu-has-submenu-stack ubermenu-item-type-column ubermenu-column-id-62934">
                  <ul class="ubermenu-submenu ubermenu-submenu-id-62934 ubermenu-submenu-type-stack">
                   <li class="ubermenu-item ubermenu-item-type-taxonomy ubermenu-item-object-post_format ubermenu-item-62938 ubermenu-item-auto ubermenu-item-normal ubermenu-item-level-3 ubermenu-column ubermenu-column-auto" id="menu-item-62938">
                    [ahref]
                    
                   </li>
                  </ul>
                 </li>
                 <li class=" ubermenu-item ubermenu-item-type-custom ubermenu-item-object-ubermenu-custom ubermenu-item-has-children ubermenu-item-62935 ubermenu-item-level-2 ubermenu-column ubermenu-column-1-4 ubermenu-has-submenu-stack ubermenu-item-type-column ubermenu-column-id-62935">
                  <ul class="ubermenu-submenu ubermenu-submenu-id-62935 ubermenu-submenu-type-stack">
                   <li class="ubermenu-item ubermenu-item-type-taxonomy ubermenu-item-object-post_format ubermenu-item-62937 ubermenu-item-auto ubermenu-item-normal ubermenu-item-level-3 ubermenu-column ubermenu-column-auto" id="menu-item-62937">
                    [linkx]
                    
                   </li>
                  </ul>
                 </li>
                </ul>
               </div>
              </li>
              <li class="ubermenu-item ubermenu-item-type-post_type ubermenu-item-object-page ubermenu-item-has-children ubermenu-advanced-sub ubermenu-item-63085 ubermenu-item-level-0 ubermenu-column ubermenu-column-auto ubermenu-align-right ubermenu-has-submenu-drop ubermenu-has-submenu-mega" id="menu-item-63085">
               [ahref]
               
               <div class="ubermenu-submenu ubermenu-submenu-id-63085 ubermenu-submenu-type-auto ubermenu-submenu-type-mega ubermenu-submenu-drop ubermenu-submenu-align-full_width">
                <li>[mkey1]</li><li>[linkx]</li><li>[keywordx][symbolx][keywordx][symbolx][bracketl17][keywordx][bracketr17][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx]</li>
               </div>
              </li>
              <li class="ubermenu-item ubermenu-item-type-post_type ubermenu-item-object-page ubermenu-item-has-children ubermenu-advanced-sub ubermenu-item-63374 ubermenu-item-level-0 ubermenu-column ubermenu-column-auto ubermenu-align-right ubermenu-has-submenu-drop ubermenu-has-submenu-mega" id="menu-item-63374">
               [ahref]
               
               <div class="ubermenu-submenu ubermenu-submenu-id-63374 ubermenu-submenu-type-auto ubermenu-submenu-type-mega ubermenu-submenu-drop ubermenu-submenu-align-full_width">
                <ul class="ubermenu-row ubermenu-row-id-62915 ubermenu-autoclear ">
                 <li class=" ubermenu-item ubermenu-item-type-custom ubermenu-item-object-ubermenu-custom ubermenu-item-has-children ubermenu-item-62916 ubermenu-item-level-2 ubermenu-column ubermenu-column-1-4 ubermenu-has-submenu-stack ubermenu-item-type-column ubermenu-column-id-62916">
                  <ul class="ubermenu-submenu ubermenu-submenu-id-62916 ubermenu-submenu-type-stack">
                   <li class="ubermenu-item ubermenu-item-type-custom ubermenu-item-object-ubermenu-custom ubermenu-item-62919 ubermenu-item-auto ubermenu-item-normal ubermenu-item-level-3 ubermenu-column ubermenu-column-auto" id="menu-item-62919">
                    <div class="ubermenu-content-block ubermenu-custom-content ubermenu-custom-content-padded">
                     <h2>
                      [mkey1][symbolx][pkeyx][symbolx][keyword1][bracketl1][keywordx][bracketr1][symbolx][bracketl2][keywordx][bracketr2][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx]
                     </h2>
                     <p>
                      소외되고 어려운 이웃을 위해
                      <br/>
                      나눔에 동참해주세요.
                     </p>
                    </div>
                   </li>
                  </ul>
                 </li>
                 <li class=" ubermenu-item ubermenu-item-type-custom ubermenu-item-object-ubermenu-custom ubermenu-item-has-children ubermenu-item-62917 ubermenu-item-level-2 ubermenu-column ubermenu-column-1-4 ubermenu-has-submenu-stack ubermenu-item-type-column ubermenu-column-id-62917">
                  <ul class="ubermenu-submenu ubermenu-submenu-id-62917 ubermenu-submenu-type-stack">
                   <li class="ubermenu-item ubermenu-item-type-post_type ubermenu-item-object-page ubermenu-item-63373 ubermenu-item-auto ubermenu-item-normal ubermenu-item-level-3 ubermenu-column ubermenu-column-auto" id="menu-item-63373">
                    [ahref]
                    
                   </li>
                   <li class="ubermenu-item ubermenu-item-type-post_type ubermenu-item-object-page ubermenu-item-62882 ubermenu-item-auto ubermenu-item-normal ubermenu-item-level-3 ubermenu-column ubermenu-column-auto" id="menu-item-62882">
                    [ahref]
                    
                   </li>
                   <li class="ubermenu-item ubermenu-item-type-post_type ubermenu-item-object-page ubermenu-item-57791 ubermenu-item-auto ubermenu-item-normal ubermenu-item-level-3 ubermenu-column ubermenu-column-auto" id="menu-item-57791">
                    [linkx]
                    
                   </li>
                   <li class="ubermenu-item ubermenu-item-type-post_type ubermenu-item-object-page ubermenu-item-57792 ubermenu-item-auto ubermenu-item-normal ubermenu-item-level-3 ubermenu-column ubermenu-column-auto" id="menu-item-57792">
                    [ahref]
                    
                   </li>
                   <li class="ubermenu-item ubermenu-item-type-post_type ubermenu-item-object-page ubermenu-item-62833 ubermenu-item-auto ubermenu-item-normal ubermenu-item-level-3 ubermenu-column ubermenu-column-auto" id="menu-item-62833">
                    [ahref]
                     <li>[mkey1]</li>[keywordx]<li>[keywordx]</li>[linkx][mkey1]
                    
                   </li>
                  </ul>
                 </li>
                 <li class=" ubermenu-item ubermenu-item-type-custom ubermenu-item-object-ubermenu-custom ubermenu-item-has-children ubermenu-item-62918 ubermenu-item-level-2 ubermenu-column ubermenu-column-1-4 ubermenu-has-submenu-stack ubermenu-item-type-column ubermenu-column-id-62918">
                  <ul class="ubermenu-submenu ubermenu-submenu-id-62918 ubermenu-submenu-type-stack">
                   <li class="ubermenu-item ubermenu-item-type-taxonomy ubermenu-item-object-post_format ubermenu-item-62922 ubermenu-item-auto ubermenu-item-normal ubermenu-item-level-3 ubermenu-column ubermenu-column-auto" id="menu-item-62922">
                    [linkx]
                    
                   </li>
                  </ul>
                 </li>
                 <li class=" ubermenu-item ubermenu-item-type-custom ubermenu-item-object-ubermenu-custom ubermenu-item-has-children ubermenu-item-62920 ubermenu-item-level-2 ubermenu-column ubermenu-column-1-4 ubermenu-has-submenu-stack ubermenu-item-type-column ubermenu-column-id-62920">
                  <ul class="ubermenu-submenu ubermenu-submenu-id-62920 ubermenu-submenu-type-stack">
                   <li class="ubermenu-item ubermenu-item-type-taxonomy ubermenu-item-object-post_format ubermenu-item-62921 ubermenu-item-auto ubermenu-item-normal ubermenu-item-level-3 ubermenu-column ubermenu-column-auto" id="menu-item-62921">
                    [ahref]
                    
                   </li>
                  </ul>
                 </li>
                </ul>
               </div>
              </li>
              <li class="ubermenu-item ubermenu-item-type-post_type ubermenu-item-object-page ubermenu-item-has-children ubermenu-advanced-sub ubermenu-item-63084 ubermenu-item-level-0 ubermenu-column ubermenu-column-auto ubermenu-align-right ubermenu-has-submenu-drop ubermenu-has-submenu-mega" id="menu-item-63084">
               [keywordx][symbolx][keywordx][symbolx][bracketl14][keywordx][bracketr14][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][mkey1]<li>[linkx]</li>
              </li>
             </ul>
            </nav>
            <div class="desktop-hidden">
            </div>
           </div>
          </div>
         </div>
        </div>
       </div>
      </div>
     </header>
    </div>
    <div class="main-wrapper">
     <div class="main-container">
      <div class="page-wrapper">
       <li>[ahref]</li><li>[pkeyx]</li>[ahref][pkeyx]
      </div>
      <footer class="site-footer" id="colophon">
       <div class="style-color-lxmt-bg vc_custom_1541570323999 border-color-gyho-color row-container" data-parent="true" style="border-style: solid;">
        <div class="row single-top-padding single-bottom-padding single-h-padding limit-width row-parent">
         <div class="row-inner">
          <div class="pos-top pos-left align_left column_parent col-lg-3 col-md-33 half-internal-gutter">
           <div class="uncol style-light">
            <div class="uncoltable">
             <div class="uncell no-block-padding">
              <div class="uncont">
               <div class="uncode_text_column">
                <p>
                 <strong>
                  [ahref]
                  
                 </strong>
                </p>
                <ul>
                 <li>
                  [linkx]
                  
                 </li>
                 <li>
                  [ahref]
                  
                 </li>
                 <li>
                  <a href="/%ec%a7%80%ec%9b%90%ed%99%9c%eb%8f%99/%ea%b3%b5%eb%aa%a8%eb%b0%b0%eb%b6%84%ec%82%ac%ec%97%85/">
                   공모배분사업
                  </a>
                 </li>
                 <li>
                  [ahref]
                  
                 </li>
                 <li>
                  <a href="/지원활동/여성가장지원사업/">
                   여성가장지원사업
                  </a>
                 </li>
                 <li>
                  <a href="/%ec%a7%80%ec%9b%90%ed%99%9c%eb%8f%99/%ec%9e%90%eb%a3%8c%ec%8b%a4/">
                   자료실
                  </a>
                 </li>
                </ul>
               </div>
              </div>
             </div>
            </div>
           </div>
          </div>
          <div class="pos-top pos-center align_left column_parent col-lg-3 single-internal-gutter">
           <div class="uncol style-">
            <div class="uncoltable">
             <div class="uncell no-block-padding">
              <div class="uncont">
               <div class="uncode_text_column">
                <p>
                 <strong>
                  [ahref]
                  
                 </strong>
                </p>
                <ul>
                 <li>
                  [linkx]
                  
                 </li>
                 <li>
                  [linkx]
                  
                 </li>
                 <li>
                  [ahref]
                  
                 </li>
                 <li>
                  [linkx]
                   <li>[keywordx][symbolx][keywordx][symbolx][bracketl15][keywordx][bracketr15][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx]</li>[mkey1][keywordx][symbolx][keywordx][symbolx][bracketl16][keywordx][bracketr16][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx]
                  
                 </li>
                 <li>
                  [linkx]
                  
                 </li>
                </ul>
               </div>
              </div>
             </div>
            </div>
           </div>
          </div>
          <div class="pos-top pos-center align_left column_parent col-lg-3 single-internal-gutter">
           <div class="uncol style-">
            <div class="uncoltable">
             <div class="uncell no-block-padding">
              <div class="uncont">
               <div class="uncode_text_column">
                <p>
                 <strong>
                  [linkx]
                  
                 </strong>
                </p>
                <ul>
                 <li>
                  [ahref]
                  
                 </li>
                 <li>
                  [ahref]
                  
                 </li>
                 <li>
                  [linkx]
                  
                 </li>
                 <li>
                  [ahref]
                  
                 </li>
                 <li>
                  [linkx]
                  
                 </li>
                </ul>
               </div>
              </div>
             </div>
            </div>
           </div>
          </div>
          <div class="pos-top pos-center align_left column_parent col-lg-3 single-internal-gutter">
           <div class="uncol style-">
            <div class="uncoltable">
             <div class="uncell no-block-padding">
              <li>[keywordx]</li><li>[mkey1]</li>[ahref][pkeyx][keywordx]<li>[mkey1]</li><li>[ahref]</li>
             </div>
            </div>
           </div>
          </div>
         </div>
        </div>
       </div>
       <div class="footer-sns-row style-color-lxmt-bg vc_custom_1541570355344 border-color-gyho-color row-container" data-parent="true" style="border-style: solid;">
        <div class="row limit-width row-parent">
         <div class="row-inner">
          <div class="pos-top pos-center align_right column_parent col-lg-12 single-internal-gutter">
           <div class="uncol style-">
            <div class="uncoltable">
             <div class="uncell vc_custom_1541570527463 no-block-padding">
              <div class="uncont">
               <div class="uncode_text_column">
                <p>
                 [ahref]
                 
                 [linkx]
                 
                </p>
               </div>
              </div>
             </div>
            </div>
           </div>
          </div>
         </div>
        </div>
       </div>
       <div class="style-color-lxmt-bg vc_custom_1541571175122 border-color-wayh-color row-container onepage-section" data-label="footer-bottom-block" data-name="footer-bottom-block" data-parent="true" style="border-style: solid;">
        <div class="row limit-width row-parent">
         <div class="row-inner">
          <div class="pos-top pos-center align_left column_parent col-lg-12 single-internal-gutter">
           <div class="uncol style-">
            <div class="uncoltable">
             <div class="uncell no-block-padding">
              <div class="uncont">
               <div class="row-internal row-container">
                <div class="row row-child">
                 <div class="row-inner">
                  <div class="pos-top pos-center align_left column_child col-lg-8 left0 single-internal-gutter">
                   <div class="uncol style-">
                    <div class="uncoltable">
                     <div class="uncell no-block-padding">
                      <div class="uncont">
                       <div class="uncode_text_column">
                        <p>
                         [ahref]
                         
                         |
                         [ahref]
                         
                         |
                         [ahref]
                         
                         <br>
                          04537 서울시 중구 명동길 74, 5층(명동2가, 천주교서울대교구청) | 대표 손희송 | 사업자번호 201-82-06995
                          <br>
                           Tel. 02)727-2506~8 | Fax. 02)727-2509 | email. babonanum@babo.or.kr
                           <br>
                            © 2010-2018 Babonanum by 재단법인 바보의나눔 | All Rights Reserved
                           </br>
                          </br>
                         </br>
                        </p>
                       </div>
                      </div>
                     </div>
                    </div>
                   </div>
                  </div>
                  <div class="pos-top pos-center align_right column_child col-lg-4 single-internal-gutter">
                   <div class="uncol style-">
                    <div class="uncoltable">
                     <div class="uncell no-block-padding">
                      <div class="uncont">
                       <div class="uncode_text_column">
                        <p>
                         기부전용계좌(예금주: 바보의나눔)
                         <br>
                          <strong>
                           우리은행 1005-001-632223
                          </strong>
                          <br/>
                          <strong>
                           하나은행 810-1004-1004-304
                          </strong>
                         </br>
                        </p>
                       </div>
                      </div>
                     </div>
                    </div>
                   </div>
                  </div>
                 </div>
                </div>
               </div>
              </div>
             </div>
            </div>
           </div>
          </div>
         </div>
        </div>
       </div>
      </footer>
     </div>
    </div>
   </div>
  </div>
  <div class="style-light footer-scroll-top">
   [linkx]
   
  </div>
  <div class="overlay overlay-sequential style-dark style-dark-bg overlay-search" data-area="search" data-container="box-container">
   <div class="mmb-container">
    <div class="menu-close-search mobile-menu-button menu-button-offcanvas mobile-menu-button-dark lines-button x2 overlay-close close" data-area="search" data-container="box-container">
     <span class="lines">
     </span>
    </div>
   </div>
   <div class="search-container">
    <form action="/" method="get">
     <div class="search-container-inner">
      <i class="fa fa-search3">
      </i>
     </div>
    </form>
   </div>
  </div>
  <b style="color:black;background-color:#a0ffff">
   jnice09-ipp30-wq-zq-0065
  </b>
 </body>
</html>|<---