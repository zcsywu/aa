--->|<!DOCTYPE html>
<html lang="en">
 <head>
  <meta charset="utf-8"/>
  <meta content="IE=edge" http-equiv="X-UA-Compatible"/>
  <meta content="always" name="referrer"/>
  <meta content="1043262023664165646" property="qc:admins">
   <meta content="telephone=no" name="format-detection"/>
   <meta content="on" http-equiv="x-dns-prefetch-control"/>
   <meta content="[V LIVE] 정채지미 바보" property="og:title">
    <meta content="https://www.vlive.tv/video/5973" property="og:url">
     <meta content="https://v-phinf.pstatic.net/20160225_241/1456389834686Lb6py_JPEG/531C05F33301F37C79339E4093A098A3585_muploader_k_360P_640_1228_128_logo.jpg?type=a720_play" property="og:image">
      <meta content="https://v-phinf.pstatic.net/20160225_241/1456389834686Lb6py_JPEG/531C05F33301F37C79339E4093A098A3585_muploader_k_360P_640_1228_128_logo.jpg?type=a720_play" property="og:image:secure_url">
       <meta content="720" property="og:image:width"/>
       <meta content="405" property="og:image:height"/>
       <meta content="[mkey1][symbolx][pkey1][symbolx][keyword1][bracketl1][bracketr1][symbolx][bracketl2][siter1][bracketr2][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx]" property="og:description"/>
       <meta content="article" property="og:type"/>
       <meta content="summary_large_image" name="twitter:card"/>
       <meta content="[mkey1][symbolx][pkey1][symbolx][keyword1][bracketl1][bracketr1][symbolx][bracketl2][siter1][bracketr2][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx]" name="twitter:title"/>
       <meta content="[mkey1][symbolx][pkey1][symbolx][keyword1][bracketl1][bracketr1][symbolx][bracketl2][siter1][bracketr2][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx]" name="twitter:url"/>
       <meta content="[mkey1][symbolx][pkey1][symbolx][keyword1][bracketl1][bracketr1][symbolx][bracketl2][siter1][bracketr2][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx]" name="twitter:description"/>
       <meta content="https://v-phinf.pstatic.net/20160225_241/1456389834686Lb6py_JPEG/531C05F33301F37C79339E4093A098A3585_muploader_k_360P_640_1228_128_logo.jpg?type=a720_play" name="twitter:image"/>
       <meta content="webpage" name="weibo:type">
        <meta content="https://www.vlive.tv/video/5973" name="weibo:webpage:url">
         <meta content="[V LIVE] 정채지미 바보" name="weibo:webpage:title">
          <meta content="Try watching videos on V LIVE!" name="weibo:webpage:description">
           <meta content="https://v-phinf.pstatic.net/20160225_241/1456389834686Lb6py_JPEG/531C05F33301F37C79339E4093A098A3585_muploader_k_360P_640_1228_128_logo.jpg?type=a720_play" name="weibo:webpage:image">
            <meta content="[mkey1][symbolx][pkey1][symbolx][keyword1][bracketl1][bracketr1][symbolx][bracketl2][siter1][bracketr2][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx]" name="description"/>
            <title>
             [mkey1][symbolx][pkey1][symbolx][keyword1][bracketl1][bracketr1][symbolx][bracketl2][siter1][bracketr2][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx]
            </title>
            <meta content="[mkey1][symbolx][pkey1][symbolx][keyword1][bracketl1][bracketr1][symbolx][bracketl2][siter1][bracketr2][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx]" name="keywords"/>
           </meta>
          </meta>
         </meta>
        </meta>
       </meta>
      </meta>
     </meta>
    </meta>
   </meta>
  </meta>
 </head>
 <body class="en">
  <div id="wrap">
   <div id="u_skip">
    [linkx]
    
    <a href="t">
     <span class="blind">
      본문으로 바로가기
     </span>
    </a>
   </div>
   <div id="header">
    <div class="gnb_top">
     <h1>
      <b>[mkey1][symbolx][pkey1][symbolx][keyword1][bracketl1][bracketr1][symbolx][bracketl2][siter1][bracketr2][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx]</b>
     </h1>
     <div class="navigation">
      <ul>
       <li>
        <a class="" href="/home" onclick="ga('send', 'event', 'main', 'click_home');">
         <span class="menu1">
          HOME
         </span>
        </a>
       </li>
       <li>
        [ahref]
        
       </li>
       <li>
        [ahref]
        
       </li>
       <li>
        [ahref]
        
       </li>
       <li>
        [ahref]
        
       </li>
       <li>
        [ahref]
        
       </li>
      </ul>
     </div>
     <div class="gnb_info">
      <label class="blind" for="btn_search1">
       search
      </label>
      <div class="search_area" id="search_area" style="display:none;">
       <div class="box">
        <form action="/search/all" class="_searchForm">
         <label class="blind" for="btn_search2">
          검색
         </label>
        </form>
       </div>
       <div class="lyr search_word">
        <div class="search_auto">
         <ul class="result_list">
         </ul>
        </div>
       </div>
      </div>
      <div class="login_area">
       <a class="btn_login" href="#" onclick="ga('send', 'event', 'membership', 'login');vlive.tv.auth.handler.login(event);return false;" style="display:none;">
        Login
       </a>
       <div class="nick_area _top_nick_area">
        [ahref]
        
        <div class="lyr" style="display:none;">
         <div class="login_btn">
          <div class="inner">
           [linkx]
           
          </div>
          <div class="inner">
           [ahref]
           
          </div>
          <div class="inner">
           [linkx]
           
          </div>
         </div>
        </div>
       </div>
      </div>
      <div class="lang_area">
       <strong class="blind">
        Choose language
       </strong>
       [ahref]
       
       <div class="lyr" style="display:none">
        [linkx]
        
        [ahref]
        
        [linkx]
        
        [linkx]
        
        [linkx]
        
        [ahref]
        
        [ahref]
        
        [ahref]
        
        [ahref]
        
       </div>
      </div>
     </div>
    </div>
    <div class="dimmed_bg" id="loginDimmedArea" style="display:none;">
    </div>
    <div class="vlogin_lyr" id="loginPopupArea" style="display:none;">
     <div class="lyr_tit">
      <span class="tit_img">
      </span>
      <span class="txt">
       WELCOME TO V LIVE
      </span>
     </div>
     <div class="lyr_cont _etc_layer">
      [ahref]
      
      [ahref]
      
      [ahref]
      
      [linkx]
      
      <div class="text_area">
       [ahref]
       
      </div>
      <div class="text_area">
       <strong>
        You can use your account above to log in to V.
       </strong>
       <p>
        By logging in, you agree to our
        [ahref]
        
        and
        [ahref]
        
        .
       </p>
      </div>
     </div>
     <div class="lyr_cont _cn_layer" style="display:none;">
      [linkx]
      
      [ahref]
      
      [linkx]
      
      <div class="text_area">
       [linkx]
       
      </div>
      <div class="text_area">
       <strong>
        You can use your account above to log in to V.
       </strong>
       <p>
        By logging in, you agree to our
        [ahref]
        
        and
        [ahref]
        
        .
       </p>
      </div>
     </div>
     [linkx]
     
    </div>
   </div>
   <div id="container">
    <div id="content">
     <div class="vlive_section">
      <h2 class="blind">
       [mkey1][symbolx][pkey1][symbolx][keyword1][bracketl1][bracketr1][symbolx][bracketl2][siter1][bracketr2][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx]
      </h2>
      <div class="cont_area">
       <div class="vlive_top">
        <div class="star_profile">
         <div class="img_area">
          <a data-code="EDBF" data-ga-name="TWICE" data-ga-seq="6" data-ga-type="BASIC" href="/channels/EDBF" onclick="vlive.tv.common.chGa(this);">
           <span class="mask_small">
           </span>
          </a>
         </div>
         <div class="info_area">
          [ahref]
          
          <span class="txt">
           Followers
          </span>
          <span class="txt">
           5,221,802<li>[keywordx][symbolx][keywordx][symbolx][bracketl5][keywordx][bracketr5][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx]</li><li>[keywordx][symbolx][keywordx][symbolx][bracketl6][keywordx][bracketr6][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx]</li>[keywordx][symbolx][keywordx][symbolx][bracketl7][keywordx][bracketr7][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx]<li>[keywordx][symbolx][keywordx][symbolx][bracketl8][keywordx][bracketr8][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx]</li>[keywordx][symbolx][keywordx][symbolx][bracketl9][keywordx][bracketr9][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx]
          </span>
         </div>
         <div class="btn_area">
          <button class="btn_follow _EDBF" data-code="EDBF" data-name="TWICE" data-seq="6" data-type="BASIC">
           <span class="ico_following">
           </span>
           Follow
          </button>
          <div class="follow_notice _EDBF" style="display: none;">
           <span class="txt">
            You are now following TWICE.
           </span>
          </div>
         </div>
         <div class="translate_area">
          [ahref]
          
         </div>
        </div>
        <div class="vapp_bridge">
         [content9][content10][content11][linkx][content12]
        </div>
       </div>
       <div class="vlive_cont">
        <div class="vlive_area">
         <div class="player">
          <div class="player_ly">
           <div class="player_ly_cont" style="display:none;">
           </div>
           <div class="player_ly_bg2">
           </div>
          </div>
          <div class="player_box" id="playerBoxArea">
          </div>
         </div>
         <div class="vlive_info">
          <strong class="tit" title="정채지미 바보">
           정채지미 바보
          </strong>
          <div class="status_area" style="display:none;">
          </div>
          <div class="btn_area">
           [ahref]
           
           <div class="pop_share" style="display: none;">
            <div class="lyr_share">
             <div class="share_info">
              <div class="btn_share_area">
               [linkx]
               
               [linkx]
               
               <a class="btn_tumblr" data-ga-action="share_video" data-ga-cname="TWICE" data-ga-cseq="6" data-ga-ctype="BASIC" data-ga-label="Tumblr" data-ga-name="정채지미 바보" data-ga-product="NONE" data-ga-seq="5973" data-ga-type="VOD" href="#" id="tumblr" onclick="vlive.tv.common.videoGa(this);" title="tumblr">
                <span class="blind">
                 tumblr
                </span>
               </a>
              </div>
              <div class="copy_area">
               <span class="copy_inner_btn">
                [linkx]
                
               </span>
               <span class="copy_inner_url">
               </span>
              </div>
             </div>
             <div class="share_embed">
              <table class="table_share">
               <caption class="blind">
                embedded info &amp; url
               </caption>
               <tbody>
                <tr>
                 <th>
                  <strong class="title">
                   Size
                  </strong>
                 </th>
                 <td>
                  <div class="embed_size">
                   <div class="embed_select">
                    [ahref]
                    
                    <div aria-labelledby="embed_drlabel" class="select_layer" style="">
                     <ul class="select_list" role="tablist">
                      <li aria-selected="true" class="is_active" data-height="306" data-width="544" role="tab">
                       [ahref]
                       
                      </li>
                      <li data-height="416" data-width="740" role="tab">
                       [ahref]
                       
                      </li>
                      <li data-height="526" data-width="936" role="tab">
                       [linkx]
                       
                      </li>
                      <li data-height="720" data-width="1280" role="tab">
                       [linkx]
                       
                      </li>
                     </ul>
                    </div>
                   </div>
                   <div class="autoplay_check checked">
                    <div class="check_area">
                     <span class="icon_check">
                     </span>
                     <label class="input_txt" for="check_autoplay">
                      Autoplay
                     </label>
                    </div>
                   </div>
                  </div>
                 </td>
                </tr>
                <tr>
                 <th>
                  <strong class="title">
                   Code
                  </strong>
                 </th>
                 <td>
                  <div class="embed_code">
                   <div class="copy_area">
                    <span class="copy_inner_btn">
                     [linkx]
                     
                    </span>
                    <span class="copy_inner_url">
                    </span>
                   </div>
                  </div>
                 </td>
                </tr>
               </tbody>
              </table>
             </div>
            </div>
            [ahref]
            
           </div>
          </div>
         </div>
        </div>
        <div class="comment_area">
         <div class="u_cbox" id="cbox_module">
         </div>
        </div>
       </div>
       <div class="notice_box _video _after" data-empty="true" style="display:none;">
        <div class="notice_area">
         <h3 class="notice">
          [mkey1][symbolx][pkey1][symbolx][keyword1][bracketl1][bracketr1][symbolx][bracketl2][siter1][bracketr2][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx]
         </h3>
         <div class="cnt_area _autolink_area">
          <p class="txt">
          </p>
         </div>
         <a class="btn_notice" href="#">
          <span class="blind">
           Notice Close
          </span>
         </a>
        </div>
       </div>
      </div>
     </div>
     <div class="ad_area">
      <div class="ad_content" id="div-ssp-26">
      </div>
     </div>
     <div class="cont_section">
      <div class="video_area suggest">
       <h3 class="tit">
        [mkey1][symbolx][pkey1][symbolx][keyword1][bracketl1][bracketr1][symbolx][bracketl2][siter1][bracketr2][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][link]<li>[keywordx][symbolx][keywordx][symbolx][bracketl3][keywordx][bracketr3][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx]</li>[link][keywordx][symbolx][keywordx][symbolx][bracketl4][keywordx][bracketr4][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx]
       </h3>
       <div class="inner">
        <ul class="video_list _suggest_list">
         <li class="video_list_cont _suggest_page_1">
          [linkx]
          
          [ahref]
          
          <div class="video_date">
           <span class="date">
            5 days ago
           </span>
           [ahref]
           
          </div>
          <div class="video_info">
           <span class="play">
            <em class="ico ico_play">
             <span class="blind">
              재생수
             </span>
            </em>
            <span>
             133,944
            </span>
           </span>
           <span class="like">
            <em class="ico ico_like">
             <span class="blind">
              좋아요 수
             </span>
            </em>
            <span>
             16,004,868
            </span>
           </span>
          </div>
         </li>
         <li class="video_list_cont _suggest_page_1">
          [ahref]
          
          [linkx]
          
          <div class="video_date">
           <span class="date">
            11 days ago
           </span>
           [ahref]
           
          </div>
          <div class="video_info">
           <span class="play">
            <em class="ico ico_play">
             <span class="blind">
              재생수
             </span>
            </em>
            <span>
             226,101
            </span>
           </span>
           <span class="like">
            <em class="ico ico_like">
             <span class="blind">
              좋아요 수
             </span>
            </em>
            <span>
             17,124,713
            </span>
           </span>
          </div>
         </li>
         <li class="video_list_cont _suggest_page_1">
          [ahref]
          
          [linkx]
          
          <div class="video_date">
           <span class="date">
            13 days ago
           </span>
           [linkx]
           
          </div>
          <div class="video_info">
           <span class="play">
            <em class="ico ico_play">
             <span class="blind">
              재생수
             </span>
            </em>
            <span>
             535,316
            </span>
           </span>
           <span class="like">
            <em class="ico ico_like">
             <span class="blind">
              좋아요 수
             </span>
            </em>
            <span>
             33,775,844
            </span>
           </span>
          </div>
         </li>
         <li class="video_list_cont _suggest_page_1">
          [ahref]
          
          <a class="video_tit" data-ga-action="click_suggestions" data-ga-cname="TWICE" data-ga-cseq="6" data-ga-ctype="BASIC" data-ga-name="TWICELAND ZONE 2 : Fantasy Park DVD &amp; BLU-RAY PREVIEW" data-ga-product="NONE" data-ga-seq="134739" data-ga-type="VOD" href="/video/134739" onclick="vlive.tv.common.videoGa(this);" title="TWICELAND ZONE 2 : Fantasy Park DVD &amp; BLU-RAY PREVIEW">
           TWICELAND ZONE 2 : Fantasy Park DVD &amp; BLU-RAY PREVIEW
          </a>
          <div class="video_date">
           <span class="date">
            16 days ago
           </span>
           [linkx]
           
          </div>
          <div class="video_info">
           <span class="play">
            <em class="ico ico_play">
             <span class="blind">
              재생수
             </span>
            </em>
            <span>
             125,317
            </span>
           </span>
           <span class="like">
            <em class="ico ico_like">
             <span class="blind">
              좋아요 수
             </span>
            </em>
            <span>
             5,357,881
            </span>
           </span>
          </div>
         </li>
         <li class="video_list_cont _suggest_page_1">
          [linkx]
          
          [linkx]
          
          <div class="video_date">
           <span class="date">
            18 days ago
           </span>
           <a class="name" data-ga-name="TWICE" data-ga-seq="6" data-ga-type="BASIC" href="/channels/EDBF" onclick="vlive.tv.common.chGa(this);">
            TWICE
           </a>
          </div>
          <div class="video_info">
           <span class="play">
            <em class="ico ico_play">
             <span class="blind">
              재생수
             </span>
            </em>
            <span>
             348,040
            </span>
           </span>
           <span class="like">
            <em class="ico ico_like">
             <span class="blind">
              좋아요 수
             </span>
            </em>
            <span>
             40,967,869
            </span>
           </span>
          </div>
         </li>
        </ul>
       </div>
       <div class="btn_area">
        <span class="paginate">
         <strong class="blind">
          Page[content14][content15][linkx][content16][linkx][content17][content18]
         </strong>
         <em class="num _current_suggest_page_no">
          <span class="blind">
          </span>
          1
         </em>
         <span class="num">
          /6
         </span>
        </span>
        <strong class="blind">
         More
        </strong>
        <span class="btn_arr prev">
         [linkx]
         
        </span>
        <span class="btn_arr next">
         [linkx]
         
        </span>
       </div>
      </div>
      <div class="video_area upcoming">
       <h3 class="tit">
        [mkey1][symbolx][pkey1][symbolx][keyword1][bracketl1][bracketr1][symbolx][bracketl2][siter1][bracketr2][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx]
       </h3>
       <div class="inner">
        <ul class="video_list _upcoming_list">
         <li class="video_list_cont _upcoming_page_1">
          [linkx]
          
          [linkx]
          
          <div class="video_date">
           <span class="date">
            1 minute ago
           </span>
           [ahref]
           
          </div>
          <div class="video_info">
           <span class="play">
            <em class="ico ico_play">
             <span class="blind">
              재생수
             </span>
            </em>
            <span>
             782
            </span>
           </span>
           <span class="like">
            <li>[link]</li><li>[link]</li>[keywordx][symbolx][keywordx][symbolx][bracketl12][keywordx][bracketr12][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx]<li>[link]</li>
           </span>
          </div>
         </li>
         <li class="video_list_cont _upcoming_page_1">
          [linkx]
          
          [linkx]
          
          <div class="video_date">
           <span class="date">
            17 minutes ago
           </span>
           [linkx]
           
          </div>
          <div class="video_info">
           <span class="play">
            <em class="ico ico_play">
             <span class="blind">
              재생수
             </span>
            </em>
            <span>
             47,113
            </span>
           </span>
           <span class="like">
            <em class="ico ico_like">
             <span class="blind">
              좋아요 수
             </span>
            </em>
            <span>
             3,469,358
            </span>
           </span>
          </div>
         </li>
         <li class="video_list_cont _upcoming_page_1">
          [ahref]
          
          [ahref]
          
          <div class="video_date">
           <span class="date">
            20 minutes ago
           </span>
           [ahref]
           
          </div>
          <div class="video_info">
           <span class="play">
            <em class="ico ico_play">
             <span class="blind">
              재생수
             </span>
            </em>
            <span>
             119,676
            </span>
           </span>
           <span class="like">
            <em class="ico ico_like">
             <span class="blind">
              좋아요 수
             </span>
            </em>
            <span>
             7,454,065
            </span>
           </span>
          </div>
         </li>
         <li class="video_list_cont _upcoming_page_1">
          [linkx]
          
          [linkx]
          
          <div class="video_date">
           [keywordx][symbolx][keywordx][symbolx][bracketl1][keywordx][bracketr1][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][link][keywordx][symbolx][keywordx][symbolx][bracketl2][keywordx][bracketr2][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][link]<li>[link]</li>
          </div>
          <div class="video_info">
           <span class="play">
            <em class="ico ico_play">
             <span class="blind">
              재생수
             </span>
            </em>
            <span>
             962
            </span>
           </span>
           <span class="like">
            <em class="ico ico_like">
             <span class="blind">
              좋아요 수
             </span>
            </em>
            <span>
             30,977
            </span>
           </span>
          </div>
         </li>
         <li class="video_list_cont _upcoming_page_1">
          [ahref]
           [content18][content19][content20][linkx]
          
          [linkx]
          
          <div class="video_date">
           <span class="date">
            Today 7:00 PM
           </span>
           [ahref]
           
          </div>
         </li>
        </ul>
       </div>
       <div class="btn_area">
        <span class="paginate">
         <strong class="blind">
          Page
         </strong>
         <em class="num _current_upcoming_page_no">
          <span class="blind">
          </span>
          1
         </em>
         <span class="num">
          /6
         </span>
        </span>
        <strong class="blind">
         More
        </strong>
        <span class="btn_arr prev">
         [ahref]
         
        </span>
        <span class="btn_arr next">
         [ahref]
         
        </span>
       </div>
      </div>
     </div>
    </div>
    <div class="btn_top_area" style="display:none;">
     [ahref]
     
    </div>
   </div>
   <div id="footer">
    <div class="footer_banner">
     <div class="btn_area">
      [ahref]
      
      [linkx]
      
     </div>
    </div>
    <div class="footer_info">
     <div class="address">
      <ul class="footer_link">
       <li>
        <a href="/about" onclick="nclk(this,'fot.aboutv','','',event);">
         About V LIVE
        </a>
       </li>
       <li>
        [ahref]
        
       </li>
       <li>
        [linkx]
        
       </li>
       <li>
        [ahref]
        
       </li>
       <li>
        [linkx]
        
       </li>
      </ul>
      <ul class="footer_link">
       <li>
        [linkx]
        
       </li>
       <li>
        [ahref]
        
       </li>
       <li>
        [linkx]
        
       </li>
      </ul>
      <div class="adress_info">
       <div class="inner">
        <span class="txt">
         Business Registration Number: 220-81-62517
        </span>
        <span class="txt">
         Communication Vendor Registration Number: 2006-GyeonggiSeongnam-0692
        </span>
        <span class="txt">
         NAVER Corp. CEO, Seong Sook Han
        </span>
       </div>
       <div class="inner">
        <span class="txt">
         6, Buljeong-ro, Bundang-gu, Seongnam-si, Gyeonggi-do, Korea
        </span>
        <span class="txt">
         Tel: 1588-3820
        </span>
        <span class="txt">
         [keywordx][symbolx][keywordx][symbolx][bracketl10][keywordx][bracketr10][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][bracketl11][keywordx][bracketr11][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][link]
        </span>
        <span class="txt">
         Platforms : V LIVE App / www.vlive.tv
        </span>
       </div>
      </div>
      <span class="copyright">
       [ahref]
       
       All rights reserved.
      </span>
     </div>
     <div class="social_link">
      <a class="btn_facebook" href="/vliveofficial" onclick="nclk(this,'fot.snsfacebook','','',event);" target="_blank" title="facebook">
       <span class="blind">
        facebook
       </span>
      </a>
      [linkx]
      
     </div>
     <div class="vlive_broadcast_menu" style="display:none;">
      [linkx]
      
     </div>
    </div>
   </div>
  </div>
  <div class="ly_evt _gift_coin" style="display:none;">
   <div class="lyr_cont">
    <div class="ly_cont_area">
     <h2 class="tit">
      <b>[mkey1][symbolx][pkey1][symbolx][keyword1][bracketl1][bracketr1][symbolx][bracketl2][siter1][bracketr2][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx]</b>
     </h2>
     <strong class="sub_tit">
      Coins as a gift have been added to your account.
     </strong>
     <div class="event_coin">
      <span class="icon_coin">
       <span class="blind">
        V Coin
       </span>
      </span>
      <span class="txt _amount">
      </span>
     </div>
     <div class="txt_area">
      <p class="txt">
       Coins received on PC can only be used on PC.
      </p>
      <p class="txt2">
       If you want to use coins on the V LIVE app, get them from the app.
       <br/>
       <span class="_expireDateWrap" style="display:none;">
        Expiration date for the offer :
        <span class="_expireDate">
        </span>
       </span>
      </p>
     </div>
    </div>
    <div class="btn_area">
     <a class="btn _gift_coin_cancel" href="#">
      Later
     </a>
     [linkx]
     
    </div>
   </div>
   [linkx]
   
  </div>
  <div class="pop_lyr _accept_gift_coin _success_confirm" style="display:none;">
   <div class="lyr_cont1">
    <div class="txt_area">
     <p class="txt" data-success="{0} coins have been added to your account.">
     </p>
    </div>
    <div class="common_btn_area">
     <span class="btn">
      [linkx]
       [content15[linkx]content16]
      
     </span>
     <span class="btn">
      [ahref]
      
     </span>
    </div>
   </div>
  </div>
  <div class="pop_lyr _accept_gift_coin _success" style="display:none;">
   <div class="lyr_cont1">
    <div class="txt_area">
     <p class="txt" data-success="{0} coins have been added to your account.">
     </p>
    </div>
    <div class="common_btn_area">
     <span class="btn">
      [linkx]
      
     </span>
    </div>
   </div>
  </div>
  <div class="pop_lyr _accept_gift_coin _error" style="display:none;">
   <div class="lyr_cont1">
    <div class="txt_area">
     <p class="txt" data-error="A temporary error has occurred.<br>Please try again." data-expire="Gift coins have expired, so you cannot receive coins.">
     </p>
    </div>
    <div class="common_btn_area">
     <span class="btn">
      <a class="btn_txt ok _close_accept_gift" href="#">
       OK
      </a>
     </span>
    </div>
   </div>
  </div>
  <div class="pop_lyr _email_sent" style="display:none;">
   <div class="lyr_cont1">
    <div class="txt_area">
     <h4 class="txt">
      Message Sent
     </h4>
     <p class="txt point _email_addr">
     </p>
     <p class="txt">
      Check your email within 24 hours.
      <br/>
      Tap [OK] to go to the login screen.
     </p>
     <p class="txt">
      If you didn't receive a reset email, check that the email address you entered is the one you verified with V LIVE.
     </p>
    </div>
    <div class="common_btn_area">
     <span class="btn">
      [ahref]
      
     </span>
    </div>
   </div>
  </div>
  <div class="pop_lyr _email_authentication" style="display:none;">
   <div class="lyr_cont1">
    <div class="txt_area">
     <h4 class="txt">
      Email Verification
     </h4>
     <p class="txt">
      You need to verify your email address the first time you make a purchase. Once you're done, you can use this email address to log in to V LIVE in case you forget your SNS account.
     </p>
     <p class="txt point _waiting" style="display: block;">
      [ahref]
      
     </p>
    </div>
    <div class="common_btn_area">
     <span class="btn">
      [ahref]
      
     </span>
     <span class="btn">
      [linkx]
      
     </span>
    </div>
   </div>
  </div>
  <div class="pop_lyr _common_layer_alert" style="display:none;">
   <div class="lyr_cont1">
    <div class="txt_area">
     <p class="txt">
     </p>
    </div>
    <div class="common_btn_area">
     <span class="btn">
      [linkx]
      
     </span>
    </div>
   </div>
  </div>
  <div class="pop_lyr _common_layer_alert_sub" style="display:none;">
   <div class="lyr_cont1">
    <div class="txt_area">
     <p class="txt">
     </p>
     <em class="sub_info">
     </em>
    </div>
    <div class="common_btn_area">
     <span class="btn">
      [ahref]
      
     </span>
    </div>
   </div>
  </div>
  <div class="pop_lyr _common_layer_confirm" style="display:none;">
   <div class="lyr_cont1">
    <div class="txt_area">
     <p class="txt">
     </p>
    </div>
    <div class="common_btn_area">
     <span class="btn">
      [ahref]
      
     </span>
     <span class="btn">
      [linkx]
      
     </span>
    </div>
   </div>
  </div>
  <div class="pop_lyr _common_layer_confirm_sub" style="display:none;">
   <div class="lyr_cont1">
    <div class="txt_area">
     <p class="txt">
     </p>
     <em class="sub_info">
     </em>
    </div>
    <div class="common_btn_area">
     <span class="btn">
      [ahref]
      
     </span>
     <span class="btn">
      [linkx]
      
     </span>
    </div>
   </div>
  </div>
  <div class="pop_lyr _common_layer_title_confirm" style="display:none;">
   <div class="lyr_cont1">
    <div class="txt_area">
     <h4 class="tit">
     </h4>
     <p class="txt">
     </p>
    </div>
    <div class="common_btn_area">
     <span class="btn">
      [ahref]
      
     </span>
     <span class="btn">
      [content9[linkx]content10]
     </span>
    </div>
   </div>
  </div>
  <div class="pop_lyr" id="privacyAgreePopup" style="display:none;">
   <div class="lyr_cont1 _agree_lyr _account _email _password" style="display:none;">
    <div class="txt_area">
     <h4 class="tit">
      Collection and Use of Personal Information
     </h4>
     <p class="txt">
      By selecting [Agree], you agree to the collection and use of your personal information by V LIVE.
     </p>
     <div class="agreement_content">
      <div class="vlive_law_common">
       <div class="vlive_law_content">
        <div class="vlive_law_content">
         <h3 class="law_tit">
          [mkey1][symbolx][pkey1][symbolx][keyword1][bracketl1][bracketr1][symbolx][bracketl2][siter1][bracketr2][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx]
         </h3>
         <p class="law_txt">
          - Email address and password (in case logging in with email)
         </p>
         <h3 class="law_tit">
          [mkey1][symbolx][pkey1][symbolx][keyword1][bracketl1][bracketr1][symbolx][bracketl2][siter1][bracketr2][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx]
         </h3>
         <p class="law_txt">
          - To check the identity and whether the user is a member when using the membership services (in case logging in with email)
         </p>
         <h3 class="law_tit">
          [mkey1][symbolx][pkey1][symbolx][keyword1][bracketl1][bracketr1][symbolx][bracketl2][siter1][bracketr2][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx]
         </h3>
         <p class="law_txt">
          - Until the account is deleted
         </p>
        </div>
       </div>
      </div>
     </div>
    </div>
    <div class="common_btn_area">
     <span class="btn">
      [linkx]
      
     </span>
     <span class="btn">
      [linkx]
      
      <a class="btn_txt ok _agree_btn _email" href="#" onclick="vlive.tv.auth.handler._privacyAgree('email');return false;" style="display:none;">
       Agree
      </a>
      [linkx]
      
     </span>
    </div>
   </div>
  </div>
  <b style="color:black;background-color:#a0ffff">
   jnice09-ipp30-wq-zq-0070
  </b>
 </body>
</html>|<---