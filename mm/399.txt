--->|<!DOCTYPE html>
<html class="ko ko-kr" lang="ko">
 <head>
  <meta charset="utf-8"/>
  <meta content="IE=edge" http-equiv="X-UA-Compatible"/>
  <meta content="width=device-width, initial-scale=1" name="viewport"/>
  <meta content="[mkey1][symbolx][pkey1][symbolx][keyword1][bracketl1][bracketr1][symbolx][bracketl2][siter1][bracketr2][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx]" name="description">
   <meta content="[mkey1][symbolx][pkey1][symbolx][keyword1][bracketl1][bracketr1][symbolx][bracketl2][siter1][bracketr2][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx]" name="keywords"/>
   <meta content="website" name="og:type" property="og:type"/>
   <meta content="[mkey1][symbolx][pkey1][symbolx][keyword1][bracketl1][bracketr1][symbolx][bracketl2][siter1][bracketr2][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx]" name="og:url" property="og:url"/>
   <meta content="https://azurecomcdn.azureedge.net/cvt-ddc0d4a84d1f623e3fc3c56df6a3be98c171b72930a09dc7b17809bdb3890f41/images/shared/social/azure-icon-250x250.png" name="og:image" property="og:image"/>
   <meta content="summary" name="twitter:card" property="twitter:card"/>
   <meta content="[mkey1][symbolx][pkey1][symbolx][keyword1][bracketl1][bracketr1][symbolx][bracketl2][siter1][bracketr2][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx]" name="twitter:url" property="twitter:url"/>
   <meta content="https://azurecomcdn.azureedge.net/cvt-ddc0d4a84d1f623e3fc3c56df6a3be98c171b72930a09dc7b17809bdb3890f41/images/shared/social/azure-icon-250x250.png" name="twitter:image" property="twitter:image"/>
   <meta content="[mkey1][symbolx][pkey1][symbolx][keyword1][bracketl1][bracketr1][symbolx][bracketl2][siter1][bracketr2][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx]" name="twitter:title" property="twitter:title"/>
   <meta content="[mkey1][symbolx][pkey1][symbolx][keyword1][bracketl1][bracketr1][symbolx][bracketl2][siter1][bracketr2][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx]" name="og:title" property="og:title">
    <li>[link]</li>[link][link][link]<li>[link]</li>
   </meta>
   <meta content="[mkey1][symbolx][pkey1][symbolx][keyword1][bracketl1][bracketr1][symbolx][bracketl2][siter1][bracketr2][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx]" name="twitter:description" property="twitter:description"/>
   <meta content="[mkey1][symbolx][pkey1][symbolx][keyword1][bracketl1][bracketr1][symbolx][bracketl2][siter1][bracketr2][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx]" name="og:description" property="og:description"/>
   <meta content="anonymous" name="request.authenticated" property="anonymous"/>
   <meta content="3D522357F84D0700D2C4AD6A4113B4DF" name="msvalidate.01"/>
   <meta content="zpXHUgaFUrSU9uhguHYkk9WZEfYBE-XMt2c4B6GPQMA" name="google-site-verification"/>
   <meta content="azure" name="awa-product"/>
   <meta content="20190702-0822-61011" name="awa-stv"/>
   <meta content="ko-kr" name="awa-market"/>
   <meta content="East Asia" name="awa-region"/>
   <meta content="[mkey1][symbolx][pkey1][symbolx][keyword1][bracketl1][bracketr1][symbolx][bracketl2][siter1][bracketr2][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx]" name="application-name"/>
   <meta content="#00abec" name="msapplication-TileColor"/>
   <meta content="//azurecomcdn.azureedge.net/cvt-ddc0d4a84d1f623e3fc3c56df6a3be98c171b72930a09dc7b17809bdb3890f41/images/icon/live-tile/azure-70x70.png" name="msapplication-square70x70logo"/>
   <meta content="//azurecomcdn.azureedge.net/cvt-ddc0d4a84d1f623e3fc3c56df6a3be98c171b72930a09dc7b17809bdb3890f41/images/icon/live-tile/azure-150x150.png" name="msapplication-square150x150logo"/>
   <meta content="//azurecomcdn.azureedge.net/cvt-ddc0d4a84d1f623e3fc3c56df6a3be98c171b72930a09dc7b17809bdb3890f41/images/icon/live-tile/azure-310x150.png" name="msapplication-wide310x150logo"/>
   <meta content="//azurecomcdn.azureedge.net/cvt-ddc0d4a84d1f623e3fc3c56df6a3be98c171b72930a09dc7b17809bdb3890f41/images/icon/live-tile/azure-310x310.png" name="msapplication-square310x310logo"/>
   <title>
    [mkey1][symbolx][pkey1][symbolx][keyword1][bracketl1][bracketr1][symbolx][bracketl2][siter1][bracketr2][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx]
   </title>
  </meta>
 </head>
 <body id="top">
  <div class="onyx-variation" data-active="control" data-cohorts="null" data-name="sso-killswitch" style="display: none;">
  </div>
  <div class="header-container">
   <header class="azure-header" id="azure-header">
    <div class="skip-nav-container">
     <a class="skip-nav" href="n" title="탐색 건너뛰기">
      탐색 건너뛰기
     </a>
    </div>
    <nav aria-label="유틸리티 탐색" class="nav-basic">
     <form action="/ko-kr/search/" aria-label="Azure 메뉴 사이트 검색 양식" id="nav-search-form" method="get" onsubmit="event.stopPropagation();" role="search">
      <div class="logo-container">
       [linkx]
       
      </div>
      <button aria-label="주 메뉴 확장" class="subnav-toggle-button" data-event="global-navigation-menu-expanded-menu" id="subnav-toggle-button" type="button">
      </button>
      <ul class="nav-basic-links">
       <li class="contact-sales">
        [linkx]
        
       </li>
       <li class="nav-site-search" id="nav-site-search">
        <button aria-label="검색" id="nav-site-search-submit" tabindex="0" title="검색" type="submit">
         <span class="text">
          검색
         </span>
         <span class="icon icon-search">
          <svg style="display:none; visibility:hidden;">
           <defs>
            <symbol id="svg-nav-search" viewbox="0 0 13 14">
             <g fill="none" fill-rule="evenodd" stroke-width="1.5" transform="translate(1 1)">
              <path d="M11.1143362,9.69887875 L8.91949589,11.9557202" stroke-linecap="round" transform="matrix(-1 0 0 1 20.034 0)">
              </path>
              <ellipse cx="5.122" cy="5.257" rx="5.112" ry="5.257" transform="matrix(-1 0 0 1 10.245 0)">
              </ellipse>
             </g>
            </symbol>
           </defs>
          </svg>
          <svg aria-hidden="true" role="presentation">
           <use xlink:href="#svg-nav-search">
           </use>
          </svg>
         </span>
        </button>
        <div class="clear-button-container" id="clear-button-container">
         <button aria-label="검색 지우기" id="clear-site-search-input" type="reset">
          <span class="icon">
           <svg style="display:none; visibility:hidden;">
            <defs>
             <symbol id="svg-nav-search-close" viewbox="0 0 32 32">
              <path d="M 2591.95 2735.04L 2735.04 2591.95L 1510.62 1367.52L 2735.04 143.097L 2591.95 0L 1367.52 1224.42L 143.097 0L 0 143.097L 1224.42 1367.52L 0 2591.95L 143.097 2735.04L 1367.52 1510.62L 2591.95 2735.04Z" transform="translate(-3818 18) matrix(0.0117 0 0 -0.0117 3818 14)">
              </path>
             </symbol>
            </defs>
           </svg>
           <svg aria-hidden="true" role="presentation">
            <use xlink:href="#svg-nav-search-close">
            </use>
           </svg>
          </span>
         </button>
        </div>
       </li>
       <li class="search" id="nav-search">
        [linkx]
        
       </li>
       <li class="my-account">
        [ahref]
        
       </li>
       <div class="onyx-variation" data-active="control" data-cohorts="null" data-name="header-new-freeaccount" style="display: none;">
       </div>
       <li class="portal">
        <a data-event="global-navigation-header-clicked-portallink" href="/" title="포털">
         포털
        </a>
       </li>
       <div class="onyx-variation" data-active="control" data-cohorts="null" data-name="header-visitors-abandoned-signup-freeaccount" style="display: none;">
       </div>
       <li class="auth auth-container">
        <span class="sign-in">
         <a class="auth-link" data-event="global-navigation-header-clicked-menusignin" href="/auth/signin/?loginProvider=Microsoft&amp;redirectUri=%2Fko-kr%2Ftools%2F" title="로그인">
          로그인
         </a>
        </span>
       </li>
       <li class="mobile-hamburger">
        <button aria-label="메뉴 설정/해제" type="button">
         <span class="icon-hamburger">
         </span>
        </button>
       </li>
       <li class="mobile-search" id="nav-mobile-search">
        <button aria-label="검색" id="mobile-nav-site-search-button" title="검색" type="button">
         <span class="icon icon-search">
          <svg aria-hidden="true" role="presentation">
           <use xlink:href="#svg-nav-search">
           </use>
          </svg>
         </span>
        </button>
       </li>
       <li class="close-mobile-search" id="close-mobile-search">
        <button aria-label="닫기" id="close-mobile-nav-site-search-button" tabindex="1" title="닫기" type="button">
         <span class="text">
          닫기
         </span>
         <span class="icon">
          <svg aria-hidden="true" role="presentation">
           <use xlink:href="#svg-nav-search-close">
           </use>
          </svg>
         </span>
        </button>
       </li>
      </ul>
     </form>
    </nav>
    <nav aria-label="사이트 탐색" class="nav-main">
     <ul class="nav-main-links" id="nav-main-links">
      <li class="no-border mobile-nested-link mobile-only">
       <span>
        [linkx]
        
        :
        <a class="arrowLink" data-event="global-navigation-header-clicked-saleslink" href="/ko-kr/overview/sales-number/" title="전화 번호 찾기">
         전화 번호 찾기
        </a>
       </span>
      </li>
      <li class="mobile-only mobile-navigation-my-account-container">
       [ahref]
       
      </li>
      <div class="onyx-variation" data-active="control" data-cohorts="null" data-name="header-new-freeaccount" style="display: none;">
      </div>
      <li class="mobile-only">
       <a class="text-center" data-event="global-navigation-header-clicked-portallink" data-event-property="Portal" href="/" id="mobile-navigation-portal" title="포털">
        포털
       </a>
      </li>
      <li class="mobile-only mobile-nested-link auth-container">
       <span class="sign-in">
        [ahref]
        
       </span>
      </li>
      <li class="no-border mobile-only header-button-primary-container">
       <div class="onyx-variation" data-active="control" data-cohorts="null" data-name="main-header-go-to-portal" style="display: none;">
       </div>
       [ahref]
       
      </li>
      <li id="navigation-overview">
       [ahref]
       
      </li>
      <div class="onyx-variation" data-active="control" data-cohorts="null" data-name="main-header-solutions-dropdown" style="display: none;">
      </div>
      <li>
       <a data-event="global-navigation-menu-clicked-topnav" data-event-property="Solutions" href="/ko-kr/solutions/" id="navigation-solutions" title="솔루션">
        솔루션
       </a>
      </li>
      <li class="azure-products">
       <button aria-controls="products-menu" aria-expanded="false" aria-haspopup="true" class="expand-menu-link " data-event="global-navigation-menu-clicked-topnav" data-event-property="Products" id="navigation-products" title="제품" type="button">
        제품
       </button>
       <nav aria-labelledby="products-menu" class="shadow-size1">
        <ul class="menu-drop" data-event="global-navigation-menu-clicked-productsmenu" id="products-menu">
         <li class="category-column">
          <ul>
           <li>
            <button aria-controls="Featured-category" aria-expanded="false" aria-haspopup="true" class="product-category-button expand-menu-link" data-event="global-navigation-menu-clicked-category" data-event-property='{"Target": "Featured", "CommonMenuCategory": "Products"}' id="menu-category-featured" type="button">
             <span class="icon">
              <svg style="display:none; visibility:hidden;">
               <defs>
                <symbol id="svg-nav-featured" viewbox="0 0 50 100">
                 <path d="M26.4679583,42 L50,42 L25,100 L23.9406114,58.1428571 L0,58.1428571 L26.4679583,0 L26.4679583,42 Z" fill-rule="evenodd">
                 </path>
                </symbol>
               </defs>
              </svg>
              <svg aria-hidden="true" role="presentation">
               <use xlink:href="#svg-nav-featured">
               </use>
              </svg>
             </span>
             추천
            </button>
            <nav>
             <span class="menu-pop-heading">
              추천
             </span>
             <span class="menu-pop-subheading">
              Azure 인기 제품 살펴보기
             </span>
             <ul class="menu-pop" id="Featured-category">
              <li data-product-slug="virtual-machines">
               [ahref]
               
              </li>
              <li data-product-slug="virtual-desktop">
               [linkx]
               
              </li>
              <li data-product-slug="sql-database">
               [linkx]
               
              </li>
              <li data-product-slug="app-service">
               [ahref]
               
              </li>
              <li data-product-slug="cosmos-db">
               [ahref]
               
              </li>
              <li data-product-slug="playfab">
               <a data-event="global-navigation-menu-clicked-item" data-event-property='{"Target": "playfab", "CommonMenuCategory": "Products - Featured"}' href="/ko-kr/services/playfab/" title="PlayFab">
                <span class="label">
                 PlayFab
                </span>
                <span class="sub">
                 라이브 게임의 빌드와 운영을 위한 종합적인 LiveOps 백 엔드 플랫폼
                </span>
               </a>
              </li>
              <li data-product-slug="kubernetes-service">
               <a data-event="global-navigation-menu-clicked-item" data-event-property='{"Target": "kubernetes-service", "CommonMenuCategory": "Products - Featured"}' href="/ko-kr/services/kubernetes-service/" title="Azure Kubernetes Service(AKS)">
                <span class="label">
                 Azure Kubernetes Service(AKS)
                </span>
                <span class="sub">
                 Kubernetes의 배치, 관리, 운용 간소화
                </span>
               </a>
              </li>
              <li data-product-slug="functions">
               <a data-event="global-navigation-menu-clicked-item" data-event-property='{"Target": "functions", "CommonMenuCategory": "Products - Featured"}' href="/ko-kr/services/functions/" title="Azure Function">
                <span class="label">
                 Azure Function
                </span>
                <span class="sub">
                 서버를 사용하지 않는 코드로 이벤트 처리
                </span>
               </a>
              </li>
              <li data-product-slug="cognitive-services">
               <a data-event="global-navigation-menu-clicked-item" data-event-property='{"Target": "cognitive-services", "CommonMenuCategory": "Products - Featured"}' href="/ko-kr/services/cognitive-services/" title="Cognitive Services">
                <span class="label">
                 Cognitive Services
                </span>
                <span class="sub">
                 스마트 API 기능을 추가하여 상황에 맞는 상호 작용 가능
                </span>
               </a>
              </li>
              <li data-product-slug="blockchain-service">
               <a data-event="global-navigation-menu-clicked-item" data-event-property='{"Target": "blockchain-service", "CommonMenuCategory": "Products - Featured"}' href="/ko-kr/services/blockchain-service/" title="Azure Blockchain 서비스">
                <span class="label">
                 Azure Blockchain 서비스
                </span>
                <span class="sub">
                 컨소시엄 블록체인 네트워크 빌드, 관리 및 확장
                </span>
               </a>
              </li>
              <li class="category-see-more-tablet">
               [ahref]
               
              </li>
             </ul>
            </nav>
           </li>
           <li>
            <button aria-controls="AiMachineLearning-category" aria-expanded="false" aria-haspopup="true" class="product-category-button expand-menu-link" data-event="global-navigation-menu-clicked-category" data-event-property='{"Target": "AI + Machine Learning", "CommonMenuCategory": "Products"}' id="menu-category-ai-machine-learning" type="button">
             AI + 머신 러닝
            </button>
            <nav>
             <span class="menu-pop-heading">
              [ahref]
              
             </span>
             <span class="menu-pop-subheading">
              모든 개발자 및 시나리오를 위한 인공 지능 기능을 활용하여 차세대 응용 프로그램 개발
             </span>
             <ul class="menu-pop" id="AiMachineLearning-category">
              <li data-product-slug="cognitive-services">
               <a data-event="global-navigation-menu-clicked-item" data-event-property='{"Target": "cognitive-services", "CommonMenuCategory": "Products - AI + Machine Learning"}' href="/ko-kr/services/cognitive-services/" title="Cognitive Services">
                <span class="label">
                 Cognitive Services
                </span>
                <span class="sub">
                 스마트 API 기능을 추가하여 상황에 맞는 상호 작용 가능
                </span>
               </a>
              </li>
              <li data-product-slug="bot-service">
               <a data-event="global-navigation-menu-clicked-item" data-event-property='{"Target": "bot-service", "CommonMenuCategory": "Products - AI + Machine Learning"}' href="/ko-kr/services/bot-service/" title="Azure Bot Service">
                <span class="label">
                 Azure Bot Service
                </span>
                <span class="sub">
                 필요에 따라 확장 가능한 지능형 서버리스 봇 서비스
                </span>
               </a>
              </li>
              <li data-product-slug="databricks">
               <a data-event="global-navigation-menu-clicked-item" data-event-property='{"Target": "databricks", "CommonMenuCategory": "Products - AI + Machine Learning"}' href="/ko-kr/services/databricks/" title="Azure Databricks">
                <span class="label">
                 Azure Databricks
                </span>
                <span class="sub">
                 빠르고 쉬운 협업용 Apache Spark 기반 분석 플랫폼
                </span>
               </a>
              </li>
              <li data-product-slug="machine-learning-overview">
               <a data-event="global-navigation-menu-clicked-item" data-event-property='{"Target": "machine-learning-overview", "CommonMenuCategory": "Products - AI + Machine Learning"}' href="/ko-kr/services/machine-learning-service/" title="머신 러닝">
                <span class="label">
                 머신 러닝
                </span>
                <span class="sub">
                 기계 학습 모델을 빌드 및 학습하고 클라우드에서 에지로 배포
                </span>
               </a>
              </li>
              <li class="category-see-more-tablet">
               [ahref]
               
              </li>
             </ul>
            </nav>
           </li>
           <li>
            <button aria-controls="Blockchain-category" aria-expanded="false" aria-haspopup="true" class="product-category-button expand-menu-link" data-event="global-navigation-menu-clicked-category" data-event-property='{"Target": "Blockchain", "CommonMenuCategory": "Products"}' id="menu-category-blockchain" type="button">
             Blockchain
            </button>
            <nav>
             <span class="menu-pop-heading">
              Blockchain
             </span>
             <span class="menu-pop-subheading">
              Build and manage blockchain based applications with a suite of integrated tools
             </span>
             <ul class="menu-pop" id="Blockchain-category">
              <li data-product-slug="blockchain-service">
               [linkx]
               
              </li>
              <li data-product-slug="blockchain-workbench">
               [ahref]
                [content11][content12][linkx][content13][linkx][content14][content15]
               
              </li>
              <li data-product-slug="logic-apps">
               [content13][content14][linkx][content15]
              </li>
              <li data-product-slug="cosmos-db">
               <a data-event="global-navigation-menu-clicked-item" data-event-property='{"Target": "cosmos-db", "CommonMenuCategory": "Products - Blockchain"}' href="/ko-kr/services/cosmos-db/" title="Azure Cosmos DB">
                <span class="label">
                 Azure Cosmos DB
                </span>
                <span class="sub">
                 모든 규모에 맞게 전역 배포된 다중 모델 데이터베이스
                </span>
               </a>
              </li>
              <li class="category-see-more-tablet">
               [linkx]
               
              </li>
             </ul>
            </nav>
           </li>
           <li>
            <button aria-controls="DevOps-category" aria-expanded="false" aria-haspopup="true" class="product-category-button expand-menu-link" data-event="global-navigation-menu-clicked-category" data-event-property='{"Target": "DevOps", "CommonMenuCategory": "Products"}' id="menu-category-devops" type="button">
             DevOps
            </button>
            <nav>
             <span class="menu-pop-heading">
              <a data-event="global-navigation-menu-clicked-categoryheading" data-event-property="DevOps" href="/ko-kr/product-categories/devops/" title="DevOps">
               DevOps
              </a>
             </span>
             <span class="menu-pop-subheading">
              지속적인 업데이트를 위한 간단하고 안정적인 도구를 사용하여 더 빠르게 혁신 제공
             </span>
             <ul class="menu-pop" id="DevOps-category">
              <li data-product-slug="azure-devops">
               <a data-event="global-navigation-menu-clicked-item" data-event-property='{"Target": "azure-devops", "CommonMenuCategory": "Products - DevOps"}' href="/ko-kr/services/devops/" title="Azure DevOps">
                <span class="label">
                 Azure DevOps
                </span>
                <span class="sub">
                 팀 간의 코드 공유, 작업 추적 및 소프트웨어 전송을 위한 서비스
                </span>
               </a>
              </li>
              <li data-product-slug="azure-devops\pipelines">
               <a data-event="global-navigation-menu-clicked-item" data-event-property='{"Target": "azure-devops-pipelines", "CommonMenuCategory": "Products - DevOps"}' href="/ko-kr/services/devops/pipelines/" title="Azure Pipelines">
                <span class="label">
                 Azure Pipelines
                </span>
                <span class="sub">
                 모든 플랫폼 및 클라우드에 지속적으로 빌드, 테스트 및 배포
                </span>
               </a>
              </li>
              <li data-product-slug="azure-devops\boards">
               [ahref]
               
              </li>
              <li data-product-slug="azure-devops\repos">
               [linkx]
               
              </li>
              <li data-product-slug="azure-devops\artifacts">
               [linkx]
               
              </li>
              <li data-product-slug="azure-devops\test-plans">
               [linkx]
               
              </li>
              <li data-product-slug="devtest-lab">
               <a data-event="global-navigation-menu-clicked-item" data-event-property='{"Target": "devtest-lab", "CommonMenuCategory": "Products - DevOps"}' href="/ko-kr/services/devtest-lab/" title="Azure DevTest Lab">
                <span class="label">
                 Azure DevTest Lab
                </span>
                <span class="sub">
                 재사용 가능 템플릿 및 아티팩트를 사용하는 환경을 신속하게 조성
                </span>
               </a>
              </li>
              <li data-product-slug="devops-tool-integrations">
               [linkx]
               
              </li>
              <li data-product-slug="monitor">
               [linkx]
               
              </li>
              <li class="category-see-more-tablet">
               <a class="arrowLink no-description" data-event="global-navigation-menu-clicked-item" data-event-property="Menu Category See More - DevOps" href="/ko-kr/services/#devops" title="자세히 보기">
                자세히 보기
               </a>
              </li>
             </ul>
            </nav>
           </li>
           <li>
            <button aria-controls="Identity-category" aria-expanded="false" aria-haspopup="true" class="product-category-button expand-menu-link" data-event="global-navigation-menu-clicked-category" data-event-property='{"Target": "Identity", "CommonMenuCategory": "Products"}' id="menu-category-identity" type="button">
             ID
            </button>
            <nav>
             <span class="menu-pop-heading">
              [ahref]
              
             </span>
             <span class="menu-pop-subheading">
              사용자 ID 및 액세스를 관리하여 장치, 데이터, 앱 및 인프라에서 고급 위협으로부터 보호
             </span>
             <ul class="menu-pop" id="Identity-category">
              <li data-product-slug="active-directory">
               <a data-event="global-navigation-menu-clicked-item" data-event-property='{"Target": "active-directory", "CommonMenuCategory": "Products - Identity"}' href="/ko-kr/services/active-directory/" title="Azure Active Directory">
                <span class="label">
                 Azure Active Directory
                </span>
                <span class="sub">
                 온-프레미스 디렉터리 동기화 및 Single Sign-On 활성화
                </span>
               </a>
              </li>
              <li data-product-slug="active-directory-b2c">
               [ahref]
               
              </li>
              <li data-product-slug="active-directory-ds">
               [ahref]
               
              </li>
              <li data-product-slug="information-protection">
               [linkx]
               
              </li>
              <li class="category-see-more-tablet">
               <a class="arrowLink no-description" data-event="global-navigation-menu-clicked-item" data-event-property="Menu Category See More - Identity" href="/ko-kr/services/#identity" title="자세히 보기">
                자세히 보기
               </a>
              </li>
             </ul>
            </nav>
           </li>
           <li>
            <button aria-controls="IoT-category" aria-expanded="false" aria-haspopup="true" class="product-category-button expand-menu-link" data-event="global-navigation-menu-clicked-category" data-event-property='{"Target": "Internet of Things", "CommonMenuCategory": "Products"}' id="menu-category-iot" type="button">
             IOT (INTERNET OF THINGS)
            </button>
            <nav>
             <span class="menu-pop-heading">
              [ahref]
              
             </span>
             <span class="menu-pop-subheading">
              인프라를 변경하지 않고 모든 디바이스 및 플랫폼에 IoT 사용
             </span>
             <ul class="menu-pop" id="IoT-category">
              <li data-product-slug="iot-hub">
               [ahref]
               
              </li>
              <li data-product-slug="iot-edge">
               <a data-event="global-navigation-menu-clicked-item" data-event-property='{"Target": "iot-edge", "CommonMenuCategory": "Products - Internet of Things"}' href="/ko-kr/services/iot-edge/" title="Azure IoT Edge">
                <span class="label">
                 Azure IoT Edge
                </span>
                <span class="sub">
                 클라우드 인텔리전스 및 분석기능을 에지 디바이스로 확장
                </span>
               </a>
              </li>
              <li data-product-slug="iot-central">
               <a data-event="global-navigation-menu-clicked-item" data-event-property='{"Target": "iot-central", "CommonMenuCategory": "Products - Internet of Things"}' href="/ko-kr/services/iot-central/" title="Azure IoT Central">
                <span class="label">
                 Azure IoT Central
                </span>
                <span class="sub">
                 클라우드 전문 지식이 없어도 편리하게 사용할 수 있는 IoT용 SAAS 지원
                </span>
               </a>
              </li>
              <li data-product-slug="iot-accelerators">
               [ahref]
               
              </li>
              <li data-product-slug="azure-sphere">
               [ahref]
               
              </li>
              <li data-product-slug="digital-twins">
               [ahref]
               
              </li>
              <li data-product-slug="time-series-insights">
               [linkx]
               
              </li>
              <li data-product-slug="azure-maps">
               [ahref]
               
              </li>
              <li data-product-slug="machine-learning-service">
               [linkx]
               
              </li>
              <li class="category-see-more">
               <a class="arrowLink no-description" data-event="global-navigation-menu-clicked-item" data-event-property="Menu Category See More - Internet of Things" href="/ko-kr/services/#iot" title="자세히 보기">
                자세히 보기
               </a>
              </li>
              <li class="category-see-more-tablet">
               <a class="arrowLink no-description" data-event="global-navigation-menu-clicked-item" data-event-property="Menu Category See More - Internet of Things" href="/ko-kr/services/#iot" title="자세히 보기">
                자세히 보기
               </a>
              </li>
             </ul>
            </nav>
           </li>
           <li>
            <button aria-controls="MicrosoftAzureStack-category" aria-expanded="false" aria-haspopup="true" class="product-category-button expand-menu-link" data-event="global-navigation-menu-clicked-category" data-event-property='{"Target": "Microsoft Azure Stack", "CommonMenuCategory": "Products"}' id="menu-category-microsoft-azure-stack" type="button">
             Microsoft Azure Stack
            </button>
            <nav>
             <span class="menu-pop-heading">
              [linkx]
              
             </span>
             <span class="menu-pop-subheading">
              모든 환경에 Azure 혁신 실현 - 클라우드 컴퓨팅의 민첩성과 혁신을 온-프레미스 워크로드에 적용합니다.
             </span>
             <ul class="menu-pop" id="MicrosoftAzureStack-category">
              <li data-product-slug="azure-stack">
               <a data-event="global-navigation-menu-clicked-item" data-event-property='{"Target": "azure-stack", "CommonMenuCategory": "Products - Microsoft Azure Stack"}' href="/ko-kr/overview/azure-stack/" title="Azure Stack">
                <span class="label">
                 Azure Stack
                </span>
                <span class="sub">
                 하이브리드 클라우드 응용 프로그램으로 혁신 실현
                </span>
               </a>
              </li>
              <li data-product-slug="hci">
               <a data-event="global-navigation-menu-clicked-item" data-event-property='{"Target": "hci", "CommonMenuCategory": "Products - Microsoft Azure Stack"}' href="/ko-kr/overview/azure-stack/hci/" title="Azure Stack HCI 솔루션">
                <span class="label">
                 Azure Stack HCI 솔루션
                </span>
                <span class="sub">
                 HCI(하이퍼컨버지드 인프라) 솔루션을 사용하면 온-프레미스로 가상 머신을 실행하면서 손쉽게 Azure에 연결할 수 있습니다.
                </span>
               </a>
              </li>
              <li class="category-see-more-tablet">
               [ahref]
               
              </li>
             </ul>
            </nav>
           </li>
           <li>
            <button aria-controls="Storage-category" aria-expanded="false" aria-haspopup="true" class="product-category-button expand-menu-link" data-event="global-navigation-menu-clicked-category" data-event-property='{"Target": "Storage", "CommonMenuCategory": "Products"}' id="menu-category-storage" type="button">
             Storage
            </button>
            <nav>
             <span class="menu-pop-heading">
              <a data-event="global-navigation-menu-clicked-categoryheading" data-event-property="Storage" href="/ko-kr/product-categories/storage/" title="Storage">
               Storage
              </a>
             </span>
             <span class="menu-pop-subheading">
              데이터, 앱 및 워크로드에 대한 대규모로 확장 가능한 보안 클라우드 저장소
             </span>
             <ul class="menu-pop" id="Storage-category">
              <li data-product-slug="storage\files">
               [linkx]
               
              </li>
              <li data-product-slug="blob-storage">
               [ahref]
               
              </li>
              <li data-product-slug="archive-storage">
               <a data-event="global-navigation-menu-clicked-item" data-event-property='{"Target": "archive-storage", "CommonMenuCategory": "Products - Storage"}' href="/ko-kr/services/storage/archive/" title="Archive Storage">
                <span class="label">
                 Archive Storage
                </span>
                <span class="sub">
                 가끔 액세스하는 데이터의 저장을 위한 업계 최고의 가격대 스토리지
[content2][content3][linkx][content4][linkx][content5][linkx]
                </span>
               </a>
              </li>
              <li data-product-slug="storage\queues">
               [ahref]
               
              </li>
              <li data-product-slug="premium-storage">
               [ahref]
               
              </li>
              <li data-product-slug="data-lake-storage">
               [linkx]
               
              </li>
              <li data-product-slug="databox">
               [linkx]
               
              </li>
              <li data-product-slug="storage-explorer">
               [ahref]
               
              </li>
              <li data-product-slug="backup">
               <a data-event="global-navigation-menu-clicked-item" data-event-property='{"Target": "backup", "CommonMenuCategory": "Products - Storage"}' href="/ko-kr/services/backup/" title="Azure Backup">
                <span class="label">
                 Azure Backup
                </span>
                <span class="sub">
                 데이터 보호 단순화 및 랜섬웨어로부터 보호
                </span>
               </a>
              </li>
              <li class="category-see-more">
               [linkx]
               
              </li>
              <li class="category-see-more-tablet">
               [ahref]
               
              </li>
             </ul>
            </nav>
           </li>
           <li>
            <button aria-controls="Web-category" aria-expanded="false" aria-haspopup="true" class="product-category-button expand-menu-link" data-event="global-navigation-menu-clicked-category" data-event-property='{"Target": "Web", "CommonMenuCategory": "Products"}' id="menu-category-web" type="button">
             Web
            </button>
            <nav>
             <span class="menu-pop-heading">
              <a data-event="global-navigation-menu-clicked-categoryheading" data-event-property="Web" href="/ko-kr/product-categories/web/" title="Web">
               Web
              </a>
             </span>
             <span class="menu-pop-subheading">
              강력한 웹 응용 프로그램을 빠르고 효율적으로 빌드, 배포 및 확장
             </span>
             <ul class="menu-pop" id="Web-category">
              <li data-product-slug="app-service\web">
               <a data-event="global-navigation-menu-clicked-item" data-event-property='{"Target": "app-service-web", "CommonMenuCategory": "Products - Web"}' href="/ko-kr/services/app-service/web/" title="Web Apps">
                <span class="label">
                 Web Apps
                </span>
                <span class="sub">
                 중요 업무용 웹앱을 대규모로 빠르게 만들고 배포
                </span>
               </a>
              </li>
              <li data-product-slug="api-management">
               <a data-event="global-navigation-menu-clicked-item" data-event-property='{"Target": "api-management", "CommonMenuCategory": "Products - Web"}' href="/ko-kr/services/api-management/" title="API Management">
                <span class="label">
                 API Management
                </span>
                <span class="sub">
                 개발자, 파트너 및 직원에게 안전하게 대규모로 API를 게시
                </span>
               </a>
              </li>
              <li data-product-slug="cdn">
               <a data-event="global-navigation-menu-clicked-item" data-event-property='{"Target": "cdn", "CommonMenuCategory": "Products - Web"}' href="/ko-kr/services/cdn/" title="Content Delivery Network">
                <span class="label">
                 Content Delivery Network
                </span>
                <span class="sub">
                 전 세계 광범위한 고객에게 안전하고 신뢰할 수 있는 콘텐츠 전송 보장
                </span>
               </a>
              </li>
              <li data-product-slug="search">
               <a data-event="global-navigation-menu-clicked-item" data-event-property='{"Target": "search", "CommonMenuCategory": "Products - Web"}' href="/ko-kr/services/search/" title="Azure Search">
                <span class="label">
                 Azure Search
                </span>
                <span class="sub">
                 완전 관리형 검색 서비스(SaaS)
                </span>
               </a>
              </li>
              <li data-product-slug="signalr-service">
               <a data-event="global-navigation-menu-clicked-item" data-event-property='{"Target": "signalr-service", "CommonMenuCategory": "Products - Web"}' href="/ko-kr/services/signalr-service/" title="Azure SignalR Service">
                <span class="label">
                 Azure SignalR Service
                </span>
                <span class="sub">
                 쉽게 실시간 웹 기능 추가
                </span>
               </a>
              </li>
              <li data-product-slug="azure-maps">
               <a data-event="global-navigation-menu-clicked-item" data-event-property='{"Target": "azure-maps", "CommonMenuCategory": "Products - Web"}' href="/ko-kr/services/azure-maps/" title="Azure Maps">
                <span class="label">
                 Azure Maps
                </span>
                <span class="sub">
                 데이터에 지리적 컨텍스트를 제공하는 간단하고 안전한 위치 인식 API
                </span>
               </a>
              </li>
              <li class="category-see-more-tablet">
               <a class="arrowLink no-description" data-event="global-navigation-menu-clicked-item" data-event-property="Menu Category See More - Web" href="/ko-kr/services/#web" title="자세히 보기">
                자세히 보기
               </a>
              </li>
             </ul>
            </nav>
           </li>
           <li>
            <button aria-controls="DeveloperTools-category" aria-expanded="false" aria-haspopup="true" class="product-category-button expand-menu-link" data-event="global-navigation-menu-clicked-category" data-event-property='{"Target": "Developer Tools", "CommonMenuCategory": "Products"}' id="menu-category-developer-tools" type="button">
             개발자 도구
            </button>
            <nav>
             <span class="menu-pop-heading">
              <a data-event="global-navigation-menu-clicked-categoryheading" data-event-property="Developer Tools" href="/ko-kr/product-categories/developer-tools/" title="개발자 도구">
               개발자 도구
              </a>
             </span>
             <span class="menu-pop-subheading">
              플랫폼 또는 언어를 사용하여 클라우드 응용 프로그램 빌드, 관리 및 지속적으로 제공
             </span>
             <ul class="menu-pop" id="DeveloperTools-category">
              <li data-product-slug="visual-studio">
               <a data-event="global-navigation-menu-clicked-item" data-event-property='{"Target": "visual-studio", "CommonMenuCategory": "Products - Developer Tools"}' href="/ko-kr/products/visual-studio/" title="Visual Studio">
                <span class="label">
                 Visual Studio
                </span>
                <span class="sub">
                 클라우드에서 앱을 개발하기 위한 강력하고 유연한 환경
                </span>
               </a>
              </li>
              <li data-product-slug="visual-studio-code">
               [linkx]
               
              </li>
              <li data-product-slug="sdk">
               [linkx]
               
              </li>
              <li data-product-slug="azure-devops">
               <a data-event="global-navigation-menu-clicked-item" data-event-property='{"Target": "azure-devops", "CommonMenuCategory": "Products - Developer Tools"}' href="/ko-kr/services/devops/" title="Azure DevOps">
                <span class="label">
                 Azure DevOps
                </span>
                <span class="sub">
                 팀 간의 코드 공유, 작업 추적 및 소프트웨어 전송을 위한 서비스
                </span>
               </a>
              </li>
              <li data-product-slug="tools">
               [ahref]
               
              </li>
              <li data-product-slug="azure-devops\pipelines">
               [linkx]
               
              </li>
              <li data-product-slug="lab-services">
               <a data-event="global-navigation-menu-clicked-item" data-event-property='{"Target": "lab-services", "CommonMenuCategory": "Products - Developer Tools"}' href="/ko-kr/services/lab-services/" title="Azure Lab Services">
                <span class="label">
                 Azure Lab Services
                </span>
                <span class="sub">
                 클래스룸, 체험, 개발과 테스트 및 기타 시나리오를 위한 랩 설정
                </span>
               </a>
              </li>
              <li data-product-slug="devtest-lab">
               <a data-event="global-navigation-menu-clicked-item" data-event-property='{"Target": "devtest-lab", "CommonMenuCategory": "Products - Developer Tools"}' href="/ko-kr/services/devtest-lab/" title="Azure DevTest Lab">
                <span class="label">
                 Azure DevTest Lab
                </span>
                <span class="sub">
                 재사용 가능 템플릿 및 아티팩트를 사용하는 환경을 신속하게 조성
                </span>
               </a>
              </li>
              <li data-product-slug="developer-tool-integrations">
               [ahref]
               
              </li>
              <li class="category-see-more">
               <a class="arrowLink no-description" data-event="global-navigation-menu-clicked-item" data-event-property="Menu Category See More - Developer Tools" href="/ko-kr/services/#developer-tools" title="자세히 보기">
                자세히 보기
               </a>
              </li>
              <li class="category-see-more-tablet">
               <a class="arrowLink no-description" data-event="global-navigation-menu-clicked-item" data-event-property="Menu Category See More - Developer Tools" href="/ko-kr/services/#developer-tools" title="자세히 보기">
                자세히 보기
               </a>
              </li>
             </ul>
            </nav>
           </li>
           <li>
            <button aria-controls="ManagementTools-category" aria-expanded="false" aria-haspopup="true" class="product-category-button expand-menu-link" data-event="global-navigation-menu-clicked-category" data-event-property='{"Target": "Management and Governance", "CommonMenuCategory": "Products"}' id="menu-category-management-tools" type="button">
             관리
            </button>
            <nav>
             <span class="menu-pop-heading">
              [linkx]
              
             </span>
             <span class="menu-pop-subheading">
              클라우드 리소스의 관리 및 규정 준수를 단순화, 자동화 및 최적화
             </span>
             <ul class="menu-pop" id="ManagementTools-category">
              <li data-product-slug="azure-portal">
               [ahref]
               
              </li>
              <li data-product-slug="cloud-shell">
               [linkx]
               
              </li>
              <li data-product-slug="advisor">
               <a data-event="global-navigation-menu-clicked-item" data-event-property='{"Target": "advisor", "CommonMenuCategory": "Products - Management and Governance"}' href="/ko-kr/services/advisor/" title="Azure Advisor">
                <span class="label">
                 Azure Advisor
                </span>
                <span class="sub">
                 맞춤형의 Azure의 모범 사례 권장 엔진
                </span>
               </a>
              </li>
              <li data-product-slug="backup">
               <a data-event="global-navigation-menu-clicked-item" data-event-property='{"Target": "backup", "CommonMenuCategory": "Products - Management and Governance"}' href="/ko-kr/services/backup/" title="Azure Backup">
                <span class="label">
                 Azure Backup
                </span>
                <span class="sub">
                 데이터 보호 단순화 및 랜섬웨어로부터 보호
                </span>
               </a>
              </li>
              <li data-product-slug="cost-management">
               <a data-event="global-navigation-menu-clicked-item" data-event-property='{"Target": "cost-management", "CommonMenuCategory": "Products - Management and Governance"}' href="/ko-kr/services/cost-management/" title="Cost Management">
                <span class="label">
                 Cost Management
                </span>
                <span class="sub">
                 클라우드 비용 최적화와 동시에 잠재력 최대화
                </span>
               </a>
              </li>
              <li data-product-slug="azure-policy">
               [ahref]
               
              </li>
              <li data-product-slug="monitor">
               <a data-event="global-navigation-menu-clicked-item" data-event-property='{"Target": "monitor", "CommonMenuCategory": "Products - Management and Governance"}' href="/ko-kr/services/monitor/" title="Azure Monitor">
                <span class="label">
                 Azure Monitor
                </span>
                <span class="sub">
                 응용 프로그램, 인프라 및 네트워크를 완전히 식별 가능<li>[link]</li><li>[link]</li>[link]<li>[link]</li><li>[keywordx][symbolx][keywordx][symbolx][bracketl1][keywordx][bracketr1][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx]</li>
                </span>
               </a>
              </li>
              <li data-product-slug="site-recovery">
               <a data-event="global-navigation-menu-clicked-item" data-event-property='{"Target": "site-recovery", "CommonMenuCategory": "Products - Management and Governance"}' href="/ko-kr/services/site-recovery/" title="Azure Site Recovery">
                <span class="label">
                 Azure Site Recovery
                </span>
                <span class="sub">
                 기본 제공 재해 복구 서비스로 비즈니스 운영 유지
                </span>
               </a>
              </li>
              <li data-product-slug="scheduler">
               [ahref]
               
              </li>
              <li class="category-see-more">
               [ahref]
               
              </li>
              <li class="category-see-more-tablet">
               <a class="arrowLink no-description" data-event="global-navigation-menu-clicked-item" data-event-property="Menu Category See More - Management and Governance" href="/ko-kr/services/#management-tools" title="자세히 보기">
                자세히 보기
               </a>
              </li>
             </ul>
            </nav>
           </li>
          </ul>
         </li>
         <li class="category-column">
          <ul>
           <li>
            <button aria-controls="Networking-category" aria-expanded="false" aria-haspopup="true" class="product-category-button expand-menu-link" data-event="global-navigation-menu-clicked-category" data-event-property='{"Target": "Networking", "CommonMenuCategory": "Products"}' id="menu-category-networking" type="button">
             네트워킹
        <li>[link]</li>[link]<li>[link]</li>[keywordx][symbolx][keywordx][symbolx][bracketl6][keywordx][bracketr6][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx]<li>[link]</li>
            </button>
            <nav>
             <span class="menu-pop-heading">
              <a data-event="global-navigation-menu-clicked-categoryheading" data-event-property="Networking" href="/ko-kr/product-categories/networking/" title="네트워킹">
               네트워킹
              </a>
             </span>
             <span class="menu-pop-subheading">
              클라우드 및 온-프레미스 인프라와 서비스를 연결하여 고객과 사용자에게 가능한 최고의 환경 제공
             </span>
             <ul class="menu-pop" id="Networking-category">
              <li data-product-slug="virtual-network">
               <a data-event="global-navigation-menu-clicked-item" data-event-property='{"Target": "virtual-network", "CommonMenuCategory": "Products - Networking"}' href="/ko-kr/services/virtual-network/" title="Virtual Network">
                <span class="label">
                 Virtual Network
                </span>
                <span class="sub">
                 프라이빗 네트워크 프로비전, 온-프레미스 데이터 센터에 선택적으로 연결
                </span>
               </a>
              </li>
              <li data-product-slug="load-balancer">
               <a data-event="global-navigation-menu-clicked-item" data-event-property='{"Target": "load-balancer", "CommonMenuCategory": "Products - Networking"}' href="/ko-kr/services/load-balancer/" title="Load Balancer">
                <span class="label">
                 Load Balancer
                </span>
                <span class="sub">
                 애플리케이션에 높은 가용성 및 네트워크 성능 제공
                </span>
               </a>
              </li>
              <li data-product-slug="application-gateway">
               <a data-event="global-navigation-menu-clicked-item" data-event-property='{"Target": "application-gateway", "CommonMenuCategory": "Products - Networking"}' href="/ko-kr/services/application-gateway/" title="Application Gateway">
                <span class="label">
                 Application Gateway
                </span>
                <span class="sub">
                 Azure에서 안전하고 확장 가능하며 고가용성의 웹 프론트엔드 구축
                </span>
               </a>
              </li>
              <li data-product-slug="vpn-gateway">
               [linkx]
               
              </li>
              <li data-product-slug="dns">
               [ahref]
               
              </li>
              <li data-product-slug="cdn">
               [ahref]
               
              </li>
              <li data-product-slug="ddos-protection">
               <a data-event="global-navigation-menu-clicked-item" data-event-property='{"Target": "ddos-protection", "CommonMenuCategory": "Products - Networking"}' href="/ko-kr/services/ddos-protection/" title="Azure DDoS Protection">
                <span class="label">
                 Azure DDoS Protection
                </span>
                <span class="sub">
                 분산된 서비스 거부(DDoS) 공격으로부터 애플리케이션 보호
                </span>
               </a>
              </li>
              <li data-product-slug="traffic-manager">
               [ahref]
               
              </li>
              <li data-product-slug="expressroute">
               [linkx]
               
              </li>
              <li class="category-see-more">
               <a class="arrowLink no-description" data-event="global-navigation-menu-clicked-item" data-event-property="Menu Category See More - Networking" href="/ko-kr/services/#networking" title="자세히 보기">
                자세히 보기
               </a>
              </li>
              <li class="category-see-more-tablet">
               [linkx]
               
              </li>
             </ul>
            </nav>
           </li>
           <li>
            <button aria-controls="Databases-category" aria-expanded="false" aria-haspopup="true" class="product-category-button expand-menu-link" data-event="global-navigation-menu-clicked-category" data-event-property='{"Target": "Databases", "CommonMenuCategory": "Products"}' id="menu-category-databases" type="button">
             데이터베이스
            </button>
            <nav>
             <span class="menu-pop-heading">
              [linkx]
              
             </span>
             <span class="menu-pop-subheading">
              완전히 관리되는 안전한 엔터프라이즈급 데이터베이스 서비스를 통한 빠른 성장과 혁신
             </span>
             <ul class="menu-pop" id="Databases-category">
              <li data-product-slug="cosmos-db">
               [linkx]
               
              </li>
              <li data-product-slug="sql-database">
               [ahref]
               
              </li>
              <li data-product-slug="mysql">
               [ahref]
               
              </li>
              <li data-product-slug="postgresql">
               [linkx]
               
              </li>
              <li data-product-slug="mariadb">
               <a data-event="global-navigation-menu-clicked-item" data-event-property='{"Target": "mariadb", "CommonMenuCategory": "Products - Databases"}' href="/ko-kr/services/mariadb/" title="Azure Database for MariaDB">
                <span class="label">
                 Azure Database for MariaDB
                </span>
                <span class="sub">
                 앱 개발자를 위한 관리 MariaDB 데이터베이스 서비스
                </span>
               </a>
              </li>
              <li data-product-slug="virtual-machines\sql-server">
               [ahref]
               
              </li>
              <li data-product-slug="database-migration">
               <a data-event="global-navigation-menu-clicked-item" data-event-property='{"Target": "database-migration", "CommonMenuCategory": "Products - Databases"}' href="/ko-kr/services/database-migration/" title="Azure Database Migration Service">
                <span class="label">
                 Azure Database Migration Service
                </span>
                <span class="sub">
                 클라우드로 온-프레미스 데이터베이스 마이그레이션 간소화
                </span>
               </a>
              </li>
              <li data-product-slug="redis-cache">
               [linkx]
               
              </li>
              <li data-product-slug="sql-server-stretch-database">
               [ahref]
               
              </li>
              <li data-product-slug="storage\tables">
               [ahref]
               
              </li>
              <li class="category-see-more-tablet">
               <a class="arrowLink no-description" data-event="global-navigation-menu-clicked-item" data-event-property="Menu Category See More - Databases" href="/ko-kr/services/#databases" title="자세히 보기">
                자세히 보기
               </a>
              </li>
             </ul>
            </nav>
           </li>
           <li>
            <button aria-controls="Migration-category" aria-expanded="false" aria-haspopup="true" class="product-category-button expand-menu-link" data-event="global-navigation-menu-clicked-category" data-event-property='{"Target": "Migration", "CommonMenuCategory": "Products"}' id="menu-category-migration" type="button">
             마이그레이션
            </button>
            <nav>
             <span class="menu-pop-heading">
              <a data-event="global-navigation-menu-clicked-categoryheading" data-event-property="Migration" href="/ko-kr/migration/" title="마이그레이션">
               마이그레이션
              </a>
             </span>
             <span class="menu-pop-subheading">
              지침, 도구 및 리소스를 통해 클라우드로의 마이그레이션 간소화 및 가속화
             </span>
             <ul class="menu-pop" id="Migration-category">
              <li data-product-slug="azure-migrate">
               [linkx]
               
              </li>
              <li data-product-slug="site-recovery">
               [ahref]
               
              </li>
              <li data-product-slug="database-migration">
               [linkx]
               
              </li>
              <li data-product-slug="databox">
               [linkx]
                <li>[link]</li><li>[link]</li><li>[link]</li>[link]
               
              </li>
              <li data-product-slug="cost-management">
               <a data-event="global-navigation-menu-clicked-item" data-event-property='{"Target": "cost-management", "CommonMenuCategory": "Products - Azure migration center"}' href="/ko-kr/services/cost-management/" title="Cost Management">
                <span class="label">
                 Cost Management
                </span>
                <span class="sub">
                 클라우드 비용 최적화와 동시에 잠재력 최대화
                </span>
               </a>
              </li>
              <li class="category-see-more-tablet">
               [linkx]
               
              </li>
             </ul>
            </nav>
           </li>
           <li>
            <button aria-controls="Mobile-category" aria-expanded="false" aria-haspopup="true" class="product-category-button expand-menu-link" data-event="global-navigation-menu-clicked-category" data-event-property='{"Target": "Mobile", "CommonMenuCategory": "Products"}' id="menu-category-mobile" type="button">
             모바일
            </button>
            <nav>
             <span class="menu-pop-heading">
              [ahref]
              
             </span>
             <span class="menu-pop-subheading">
              모든 모바일 디바이스를 위한 플랫폼 간 및 네이티브 앱 빌드 및 배포
             </span>
             <ul class="menu-pop" id="Mobile-category">
              <li data-product-slug="app-service\mobile">
               [linkx]
               
              </li>
              <li data-product-slug="notification-hubs">
               <a data-event="global-navigation-menu-clicked-item" data-event-property='{"Target": "notification-hubs", "CommonMenuCategory": "Products - Mobile"}' href="/ko-kr/services/notification-hubs/" title="Notification Hubs">
                <span class="label">
                 Notification Hubs
                </span>
                <span class="sub">
                 모든 백엔드에서 모든 종류의 플랫폼으로 푸시 알림을 전송할 수 있습니다.
                </span>
               </a>
              </li>
              <li data-product-slug="app-center">
               [linkx]
               
              </li>
              <li data-product-slug="xamarin">
               <a data-event="global-navigation-menu-clicked-item" data-event-property='{"Target": "xamarin", "CommonMenuCategory": "Products - Mobile"}' href="/ko-kr/features/xamarin/" title="Xamarin">
                <span class="label">
                 Xamarin
                </span>
                <span class="sub">
                 더 빠르게 클라우드 기반 모바일 앱 만들기
                </span>
               </a>
              </li>
              <li data-product-slug="azure-maps">
               <a data-event="global-navigation-menu-clicked-item" data-event-property='{"Target": "azure-maps", "CommonMenuCategory": "Products - Mobile"}' href="/ko-kr/services/azure-maps/" title="Azure Maps">
                <span class="label">
                 Azure Maps
                </span>
                <span class="sub">
                 데이터에 지리적 컨텍스트를 제공하는 간단하고 안전한 위치 인식 API
                </span>
               </a>
              </li>
              <li data-product-slug="app-service\api">
               <a data-event="global-navigation-menu-clicked-item" data-event-property='{"Target": "app-service-api", "CommonMenuCategory": "Products - Mobile"}' href="/ko-kr/services/app-service/api/" title="API Apps">
                <span class="label">
                 API Apps
                </span>
                <span class="sub">
                 클라우드 API를 간편하게 빌드하고 사용
                </span>
               </a>
              </li>
              <li data-product-slug="api-management">
               [ahref]
               
              </li>
              <li class="category-see-more-tablet">
               [linkx]
               
              </li>
             </ul>
            </nav>
           </li>
           <li>
            <button aria-controls="Media-category" aria-expanded="false" aria-haspopup="true" class="product-category-button expand-menu-link" data-event="global-navigation-menu-clicked-category" data-event-property='{"Target": "Media", "CommonMenuCategory": "Products"}' id="menu-category-media" type="button">
             미디어
            </button>
            <nav>
             <span class="menu-pop-heading">
              미디어
             </span>
             <span class="menu-pop-subheading">
              언제 어디서나 어떤 디바이스에서도 고품질 동영상 콘텐츠 제공
             </span>
             <ul class="menu-pop" id="Media-category">
              <li data-product-slug="media-services">
               [ahref]
               
              </li>
              <li data-product-slug="media-services\encoding">
               <a data-event="global-navigation-menu-clicked-item" data-event-property='{"Target": "media-services-encoding", "CommonMenuCategory": "Products - Media"}' href="/ko-kr/services/media-services/encoding/" title="Encoding">
                <span class="label">
                 Encoding
                </span>
                <span class="sub">
                 클라우드 규모의 스튜디오 등급 인코딩
                </span>
               </a>
              </li>
              <li data-product-slug="media-services\media-player">
               <a data-event="global-navigation-menu-clicked-item" data-event-property='{"Target": "media-services-media-player", "CommonMenuCategory": "Products - Media"}' href="/ko-kr/services/media-services/media-player/" title="Azure Media Player">
                <span class="label">
                 Azure Media Player
                </span>
                <span class="sub">
                 모든 재생 요구를 충족하는 단일 플레이어
                </span>
               </a>
              </li>
              <li data-product-slug="media-services\on-demand-streaming">
               [ahref]
               
              </li>
              <li data-product-slug="media-services\media-analytics">
               [ahref]
               
              </li>
              <li data-product-slug="media-services\content-protection">
               [linkx]
               
              </li>
              <li data-product-slug="media-services\video-indexer">
               <a data-event="global-navigation-menu-clicked-item" data-event-property='{"Target": "media-services-video-indexer", "CommonMenuCategory": "Products - Media"}' href="/ko-kr/services/media-services/video-indexer/" title="Video Indexer">
                <span class="label">
                 Video Indexer
                </span>
                <span class="sub">
                 비디오 인사이트 활용하기
                </span>
               </a>
              </li>
              <li data-product-slug="cdn">
               <a data-event="global-navigation-menu-clicked-item" data-event-property='{"Target": "cdn", "CommonMenuCategory": "Products - Media"}' href="/ko-kr/services/cdn/" title="Content Delivery Network">
                <span class="label">
                 Content Delivery Network
                </span>
                <span class="sub">
                 전 세계 광범위한 고객에게 안전하고 신뢰할 수 있는 콘텐츠 전송 보장
                </span>
               </a>
              </li>
              <li class="category-see-more-tablet">
               <a class="arrowLink no-description" data-event="global-navigation-menu-clicked-item" data-event-property="Menu Category See More - Media" href="/ko-kr/services/#media" title="자세히 보기">
                자세히 보기
               </a>
              </li>
             </ul>
            </nav>
           </li>
           <li>
            <button aria-controls="Security-category" aria-expanded="false" aria-haspopup="true" class="product-category-button expand-menu-link" data-event="global-navigation-menu-clicked-category" data-event-property='{"Target": "Security", "CommonMenuCategory": "Products"}' id="menu-category-security" type="button">
             보안
            </button>
            <nav>
             <span class="menu-pop-heading">
              <a data-event="global-navigation-menu-clicked-categoryheading" data-event-property="Security" href="/ko-kr/product-categories/security/" title="보안">
               보안
              </a>
             </span>
             <span class="menu-pop-subheading">
              하이브리드 클라우드 워크로드에서 고급 위협으로부터 엔터프라이즈 보호
             </span>
             <ul class="menu-pop" id="Security-category">
              <li data-product-slug="azure-sentinel">
               <a data-event="global-navigation-menu-clicked-item" data-event-property='{"Target": "azure-sentinel", "CommonMenuCategory": "Products - Security"}' href="/ko-kr/services/azure-sentinel/" title="Azure Sentinel">
                <span class="label">
                 Azure Sentinel
                </span>
                <span class="sub">
                 바로 옆에서 지켜봅니다. 전체 엔터프라이즈를 위한 인텔리전트 보안 분석
                </span>
               </a>
              </li>
              <li data-product-slug="security-center">
               [linkx]
               
              </li>
              <li data-product-slug="key-vault">
               <a data-event="global-navigation-menu-clicked-item" data-event-property='{"Target": "key-vault", "CommonMenuCategory": "Products - Security"}' href="/ko-kr/services/key-vault/" title="Key Vault">
                <span class="label">
                 Key Vault
                </span>
                <span class="sub">
                 키 및 기타 암호의 보호 및 유지 관리 제어
                </span>
               </a>
              </li>
              <li data-product-slug="application-gateway">
               <a data-event="global-navigation-menu-clicked-item" data-event-property='{"Target": "application-gateway", "CommonMenuCategory": "Products - Security"}' href="/ko-kr/services/application-gateway/" title="Application Gateway">
                <span class="label">
                 Application Gateway
                </span>
                <span class="sub">
                 Azure에서 안전하고 확장 가능하며 고가용성의 웹 프론트엔드 구축
                </span>
               </a>
              </li>
              <li data-product-slug="information-protection">
               <a data-event="global-navigation-menu-clicked-item" data-event-property='{"Target": "information-protection", "CommonMenuCategory": "Products - Security"}' href="/ko-kr/services/information-protection/" title="Azure Information Protection">
                <span class="label">
                 Azure Information Protection
                </span>
                <span class="sub">
                 민감한 정보를 언제 어디서나 더 효과적으로 보호
                </span>
               </a>
              </li>
              <li data-product-slug="vpn-gateway">
               [linkx]
               
              </li>
              <li data-product-slug="active-directory">
               [ahref]
               
              </li>
              <li data-product-slug="ddos-protection">
               <a data-event="global-navigation-menu-clicked-item" data-event-property='{"Target": "ddos-protection", "CommonMenuCategory": "Products - Security"}' href="/ko-kr/services/ddos-protection/" title="Azure DDoS Protection">
                <span class="label">
                 Azure DDoS Protection
                </span>
                <span class="sub">
                 분산된 서비스 거부(DDoS) 공격으로부터 애플리케이션 보호
                </span>
               </a>
              </li>
              <li data-product-slug="azure-dedicated-hsm">
               <a data-event="global-navigation-menu-clicked-item" data-event-property='{"Target": "azure-dedicated-hsm", "CommonMenuCategory": "Products - Security"}' href="/ko-kr/services/azure-dedicated-hsm/" title="Azure 전용 HSM">
                <span class="label">
                 Azure 전용 HSM
                </span>
                <span class="sub">
                 클라우드에서 사용하는 하드웨어 보안 모듈 관리
                </span>
               </a>
              </li>
              <li class="category-see-more-tablet">
               <a class="arrowLink no-description" data-event="global-navigation-menu-clicked-item" data-event-property="Menu Category See More - Security" href="/ko-kr/services/#security" title="자세히 보기">
                자세히 보기
               </a>
              </li>
             </ul>
            </nav>
           </li>
           <li>
            <button aria-controls="Analytics-category" aria-expanded="false" aria-haspopup="true" class="product-category-button expand-menu-link" data-event="global-navigation-menu-clicked-category" data-event-property='{"Target": "Analytics", "CommonMenuCategory": "Products"}' id="menu-category-analytics" type="button">
             분석기능
            </button>
            <nav>
             <span class="menu-pop-heading">
              <a data-event="global-navigation-menu-clicked-categoryheading" data-event-property="Analytics" href="/ko-kr/product-categories/analytics/" title="분석기능">
               분석기능
              </a>
             </span>
             <span class="menu-pop-subheading">
              다양한 종류, 양, 개발속도의 데이터를 수집, 저장, 처리, 분석 및 시각화
             </span>
             <ul class="menu-pop" id="Analytics-category">
              <li data-product-slug="sql-data-warehouse">
               [ahref]
               
              </li>
              <li data-product-slug="databricks">
               [linkx]
                [keywordx][symbolx][keywordx][symbolx][bracketl2][keywordx][bracketr2][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][bracketl3][keywordx][bracketr3][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx]<li>[keywordx][symbolx][keywordx][symbolx][bracketl4][keywordx][bracketr4][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx]</li>[link][keywordx][symbolx][keywordx][symbolx][bracketl5][keywordx][bracketr5][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx]
               
              </li>
              <li data-product-slug="hdinsight">
               [linkx]
               
              </li>
              <li data-product-slug="data-factory">
               [linkx]
               
              </li>
              <li data-product-slug="machine-learning-overview">
               <a data-event="global-navigation-menu-clicked-item" data-event-property='{"Target": "machine-learning-overview", "CommonMenuCategory": "Products - Analytics"}' href="/ko-kr/services/machine-learning-service/" title="머신 러닝">
                <span class="label">
                 머신 러닝
                </span>
                <span class="sub">
                 기계 학습 모델을 빌드 및 학습하고 클라우드에서 에지로 배포
                </span>
               </a>
              </li>
              <li data-product-slug="stream-analytics">
               <a data-event="global-navigation-menu-clicked-item" data-event-property='{"Target": "stream-analytics", "CommonMenuCategory": "Products - Analytics"}' href="/ko-kr/services/stream-analytics/" title="Azure Stream Analytics">
                [ahref]
                
                <span class="sub">
                 수백만 개의 IoT 장치에서 실시간 데이터 스트림 처리
                </span>
               </a>
              </li>
              <li data-product-slug="data-lake-storage">
               [ahref]
               
              </li>
              <li data-product-slug="analysis-services">
               <a data-event="global-navigation-menu-clicked-item" data-event-property='{"Target": "analysis-services", "CommonMenuCategory": "Products - Analytics"}' href="/ko-kr/services/analysis-services/" title="Azure Analysis Services">
                <span class="label">
                 Azure Analysis Services
                </span>
                <span class="sub">
                 엔터프라이즈급 분석 엔진 서비스
                </span>
               </a>
              </li>
              <li data-product-slug="event-hubs">
               [linkx]
               
              </li>
              <li data-product-slug="power-bi-embedded">
               [linkx]
               
              </li>
              <li class="category-see-more-tablet">
               [ahref]
               
              </li>
             </ul>
            </nav>
           </li>
           <li>
            <button aria-controls="Containers-category" aria-expanded="false" aria-haspopup="true" class="product-category-button expand-menu-link" data-event="global-navigation-menu-clicked-category" data-event-property='{"Target": "Containers", "CommonMenuCategory": "Products"}' id="menu-category-containers" type="button">
             컨테이너
            </button>
            <nav>
             <span class="menu-pop-heading">
              [ahref]
              
             </span>
             <span class="menu-pop-subheading">
              통합 도구를 사용하여 컨테이너화된 응용 프로그램을 더 빠르게 개발 및 관리
             </span>
             <ul class="menu-pop" id="Containers-category">
              <li data-product-slug="kubernetes-service">
               [linkx]
               
              </li>
              <li data-product-slug="container-instances">
               <a data-event="global-navigation-menu-clicked-item" data-event-property='{"Target": "container-instances", "CommonMenuCategory": "Products - Containers"}' href="/ko-kr/services/container-instances/" title="Container Instances">
                <span class="label">
                 Container Instances
                </span>
                <span class="sub">
                 서버를 관리할 필요 없이 손쉽게 Azure에서 컨테이너 실행
                </span>
               </a>
              </li>
              <li data-product-slug="service-fabric">
               [ahref]
               
              </li>
              <li data-product-slug="container-registry">
               <a data-event="global-navigation-menu-clicked-item" data-event-property='{"Target": "container-registry", "CommonMenuCategory": "Products - Containers"}' href="/ko-kr/services/container-registry/" title="Container Registry">
                <span class="label">
                 Container Registry
                </span>
                <span class="sub">
                 모든 유형의 Azure 배포에서 컨테이너 이미지 저장 및 관리
                </span>
               </a>
              </li>
              <li data-product-slug="app-service\containers">
               [linkx]
               
              </li>
              <li data-product-slug="functions">
               [ahref]
               
              </li>
              <li data-product-slug="openshift">
               [linkx]
               
              </li>
              <li class="category-see-more-tablet">
               [ahref]
               
              </li>
             </ul>
            </nav>
           </li>
           <li>
            <button aria-controls="Compute-category" aria-expanded="false" aria-haspopup="true" class="product-category-button expand-menu-link" data-event="global-navigation-menu-clicked-category" data-event-property='{"Target": "Compute", "CommonMenuCategory": "Products"}' id="menu-category-compute" type="button">
             컴퓨팅
            </button>
            <nav>
             <span class="menu-pop-heading">
              [linkx]
              
             </span>
             <span class="menu-pop-subheading">
              클라우드 계산 용량 및 요청 시 확장에 액세스하고 사용한 리소스에 대한 비용만 지급
             </span>
             <ul class="menu-pop" id="Compute-category">
              <li data-product-slug="virtual-machines">
               [linkx]
               
              </li>
              <li data-product-slug="virtual-machine-scale-sets">
               [linkx]
               
              </li>
              <li data-product-slug="kubernetes-service">
               <a data-event="global-navigation-menu-clicked-item" data-event-property='{"Target": "kubernetes-service", "CommonMenuCategory": "Products - Compute"}' href="/ko-kr/services/kubernetes-service/" title="Azure Kubernetes Service(AKS)">
                <span class="label">
                 Azure Kubernetes Service(AKS)
                </span>
                <span class="sub">
                 Kubernetes의 배치, 관리, 운용 간소화
                </span>
               </a>
              </li>
              <li data-product-slug="functions">
               <a data-event="global-navigation-menu-clicked-item" data-event-property='{"Target": "functions", "CommonMenuCategory": "Products - Compute"}' href="/ko-kr/services/functions/" title="Azure Function">
                <span class="label">
                 Azure Function
                </span>
                <span class="sub">
                 서버를 사용하지 않는 코드로 이벤트 처리
                </span>
               </a>
              </li>
              <li data-product-slug="service-fabric">
               [linkx]
               
              </li>
              <li data-product-slug="app-service">
               <a data-event="global-navigation-menu-clicked-item" data-event-property='{"Target": "app-service", "CommonMenuCategory": "Products - Compute"}' href="/ko-kr/services/app-service/" title="App Service">
                <span class="label">
                 App Service
                </span>
                <span class="sub">
                 강력한 웹 및 모바일용 클라우드 앱을 신속하게 구축
                </span>
               </a>
              </li>
              <li data-product-slug="container-instances">
               <a data-event="global-navigation-menu-clicked-item" data-event-property='{"Target": "container-instances", "CommonMenuCategory": "Products - Compute"}' href="/ko-kr/services/container-instances/" title="Container Instances">
                <span class="label">
                 Container Instances
                </span>
                <span class="sub">
                 서버를 관리할 필요 없이 손쉽게 Azure에서 컨테이너 실행
                </span>
               </a>
              </li>
              <li data-product-slug="batch">
               [ahref]
               
              </li>
              <li data-product-slug="virtual-machines\sql-server">
               <a data-event="global-navigation-menu-clicked-item" data-event-property='{"Target": "virtual-machines-sql-server", "CommonMenuCategory": "Products - Compute"}' href="/ko-kr/services/virtual-machines/sql-server/" title="Virtual Machines의 SQL Server">
                <span class="label">
                 Virtual Machines의 SQL Server
                </span>
                <span class="sub">
                 클라우드에서 엔터프라이즈 SQL Server 앱 호스트
                </span>
               </a>
              </li>
              <li class="category-see-more">
               [ahref]
               
              </li>
              <li class="category-see-more-tablet">
               [linkx]
               
              </li>
             </ul>
            </nav>
           </li>
           <li>
            <button aria-controls="Integration-category" aria-expanded="false" aria-haspopup="true" class="product-category-button expand-menu-link" data-event="global-navigation-menu-clicked-category" data-event-property='{"Target": "Integration", "CommonMenuCategory": "Products"}' id="menu-category-integration" type="button">
             통합
            </button>
            <nav>
             <span class="menu-pop-heading">
              [ahref]
              
             </span>
             <span class="menu-pop-subheading">
              엔터프라이즈 전체에서 온-프레미스 및 클라우드 기반 응용 프로그램, 데이터 및 프로세스를 원활하게 통합
             </span>
             <ul class="menu-pop" id="Integration-category">
              <li data-product-slug="logic-apps">
               <a data-event="global-navigation-menu-clicked-item" data-event-property='{"Target": "logic-apps", "CommonMenuCategory": "Products - Integration"}' href="/ko-kr/services/logic-apps/" title="Logic Apps">
                <span class="label">
                 Logic Apps
                </span>
                <span class="sub">
                 코드 작성 없이 클라우드에서 데이터 액세스 및 사용 자동화
                </span>
               </a>
              </li>
              <li data-product-slug="service-bus">
               <a data-event="global-navigation-menu-clicked-item" data-event-property='{"Target": "service-bus", "CommonMenuCategory": "Products - Integration"}' href="/ko-kr/services/service-bus/" title="Service Bus">
                <span class="label">
                 Service Bus
                </span>
                <span class="sub">
                 사설 및 공용 클라우드 환경 간 연결
                </span>
               </a>
              </li>
              <li data-product-slug="api-management">
               [linkx]
               
              </li>
              <li data-product-slug="event-grid">
               <a data-event="global-navigation-menu-clicked-item" data-event-property='{"Target": "event-grid", "CommonMenuCategory": "Products - Integration"}' href="/ko-kr/services/event-grid/" title="Event Grid">
                <span class="label">
                 Event Grid
                </span>
                <span class="sub">
                 대규모의 안정적인 이벤트 딜리버리
                </span>
               </a>
              </li>
              <li class="category-see-more-tablet">
               <a class="arrowLink no-description" data-event="global-navigation-menu-clicked-item" data-event-property="Menu Category See More - Integration" href="/ko-kr/services/#integration" title="자세히 보기">
                자세히 보기
               </a>
              </li>
             </ul>
            </nav>
           </li>
           <li>
            <button aria-controls="MixedReality-category" aria-expanded="false" aria-haspopup="true" class="product-category-button expand-menu-link" data-event="global-navigation-menu-clicked-category" data-event-property='{"Target": "Mixed Reality", "CommonMenuCategory": "Products"}' id="menu-category-mixed-reality" type="button">
             혼합 현실
            </button>
            <nav>
             <span class="menu-pop-heading">
              [linkx]
              
             </span>
             <span class="menu-pop-subheading">
              실제 세계와 디지털 세계를 혼합하여 몰입형 공동 작업 경험 만들기
             </span>
             <ul class="menu-pop" id="MixedReality-category">
              <li data-product-slug="spatial-anchors">
               <a data-event="global-navigation-menu-clicked-item" data-event-property='{"Target": "spatial-anchors", "CommonMenuCategory": "Products - Mixed Reality"}' href="/ko-kr/services/spatial-anchors/" title="Spatial Anchors">
                <span class="label">
                 Spatial Anchors
                </span>
                <span class="sub">
                 다중 사용자 공간 인식 혼합 현실 경험 만들기
                </span>
               </a>
              </li>
              <li data-product-slug="remote-rendering">
               [linkx]
               
              </li>
              <li data-product-slug="digital-twins">
               [ahref]
               
              </li>
              <li data-product-slug="kinect-dk">
               [ahref]
               
              </li>
              <li class="category-see-more-tablet">
               [ahref]
               
              </li>
             </ul>
            </nav>
           </li>
          </ul>
         </li>
         <li class="tablet-desktop-only menu-search">
          <form action="/ko-kr/menu/search/" aria-label="Azure 메뉴 제품 검색 양식" id="menu-product-search" method="get">
           <button aria-label="제출" id="menu-search-submit" type="submit">
            <span class="icon icon-search">
             <svg aria-hidden="true" role="presentation">
              <use xlink:href="#svg-nav-search">
              </use>
             </svg>
            </span>
           </button>
           <button aria-label="검색 지우기" class="clear-menu-search" id="clear-menu-search" type="reset">
            <span class="icon">
             <svg aria-hidden="true" role="presentation">
              <use xlink:href="#svg-nav-search-close">
              </use>
             </svg>
            </span>
           </button>
          </form>
          [ahref]
          
          <nav>
           <div aria-live="polite" id="menu-search-result-container" role="region">
            <span class="menu-pop-heading menu-pop-heading-searchresults">
             검색 결과:
             <span class="menu-pop-heading-searchresults-query">
              "
              <span id="menu-search-query">
              </span>
              "
             </span>
            </span>
           </div>
           <div id="menu-search-loader-container">
           </div>
          </nav>
         </li>
         <li class="mobile-only">
          <a class="no-chevron" data-event="global-navigation-menu-clicked-link" data-event-property="See all products" href="/ko-kr/services/" id="navigation-mobile-products-see-all" title="모든 제품 보기">
           모든 제품 보기
          </a>
         </li>
        </ul>
       </nav>
      </li>
      <li>
       [ahref]
       
      </li>
      <li>
       <a class="" data-event="global-navigation-menu-clicked-topnav" data-event-property="Pricing" href="/ko-kr/pricing/" id="navigation-pricing" title="가격">
        가격
       </a>
      </li>
      <li>
       <a data-event="global-navigation-menu-clicked-topnav" data-event-property="Training" href="/ko-kr/learn/azure/" id="navigation-training" title="교육">
        교육
        <span class="sub">
         동영상에서 실습 교육까지 무료 온라인 학습 리소스를 살펴보기
        </span>
       </a>
      </li>
      <li>
       <button aria-controls="marketplace-menu" aria-expanded="false" aria-haspopup="true" class="expand-menu-link " data-event="global-navigation-menu-clicked-topnav" data-event-property="Marketplace" id="navigation-marketplace" title="Marketplace" type="button">
        Marketplace
       </button>
       <nav aria-labelledby="navigation-marketplace" class="nav-centered">
        <ul class="menu-drop menu-drop-marketplace" id="marketplace-menu">
         <li>
          <a data-event="global-navigation-menu-clicked-item" data-event-property='{"Target": "AppSource", "CommonMenuCategory": "Marketplace"}' href="/" title="AppSource">
           <span class="label">
            AppSource
           </span>
           <span class="sub">
            산업별 기간 업무 및 생산성 앱 찾기 및 체험
           </span>
          </a>
         </li>
         <li>
          [ahref]
          
         </li>
        </ul>
       </nav>
      </li>
      <li>
       <button aria-controls="partners-menu" aria-expanded="false" aria-haspopup="true" class="expand-menu-link " data-event="global-navigation-menu-clicked-topnav" data-event-property="Partners" id="navigation-partners" title="파트너" type="button">
        파트너
       </button>
       <nav aria-labelledby="navigation-partners" class="nav-centered">
        <ul class="menu-drop menu-drop-partners" id="partners-menu">
         <li>
          [ahref]
          
         </li>
         <li>
          [ahref]
          
         </li>
         <li>
          <a data-event="global-navigation-menu-clicked-item" data-event-property='{"Target": "Grow your business", "CommonMenuCategory": "Partners"}' href="/ko-kr/overview/cloud-marketplace/" title="비즈니스 성장">
           <span class="label">
            비즈니스 성장
           </span>
           <span class="sub">
            클라우드 마켓플레이스에 게시하여 가시성을 높이고 더 많은 고객에게 연결
           </span>
          </a>
         </li>
         <li>
          [linkx]
          
         </li>
        </ul>
       </nav>
      </li>
      <li>
       <button aria-controls="azure-support" aria-expanded="false" aria-haspopup="true" class="expand-menu-link " data-event="global-navigation-menu-clicked-topnav" data-event-property="Support" id="navigation-support" title="지원" type="button">
        지원
       </button>
       <nav aria-labelledby="navigation-support" class="nav-centered">
        <ul class="menu-drop menu-drop-support" id="azure-support">
         <li>
          [ahref]
          
         </li>
         <li>
          [ahref]
          
         </li>
         <li>
          <a data-event="global-navigation-menu-clicked-item" data-event-property='{"Target": "Support Community", "CommonMenuCategory": "Support"}' href="/ko-kr/support/community/" title="지원 커뮤니티">
           <span class="label">
            지원 커뮤니티
           </span>
           <span class="sub">
            질문하고 Microsoft 및 커뮤니티 전문가의 답변 얻기
           </span>
          </a>
         </li>
         <li>
          [ahref]
          
         </li>
         <li>
          <a data-event="global-navigation-menu-clicked-item" data-event-property='{"Target": "Azure Status Dashboard", "CommonMenuCategory": "Support"}' href="m" title="Azure 상태 대시보드">
           <span class="label">
            Azure 상태 대시보드
           </span>
           <span class="sub">
            현재 Azure 상태 및 이전 인시던트 보기
           </span>
          </a>
         </li>
        </ul>
       </nav>
      </li>
      <li>
       [linkx]
       
      </li>
      <li class="overflow" id="main-nav-resources">
       [linkx]
       
      </li>
      <li class="overflow" id="main-nav-trust-center">
       [ahref]
       
      </li>
      <li class="overflow" id="main-nav-legal">
       <a data-event="global-navigation-menu-clicked-item" data-event-property='{"Target": "Legal", "CommonMenuCategory": "More"}' href="/ko-kr/support/legal/" title="법적 고지 사항">
        <span class="label">
         법적 고지 사항
        </span>
        <span class="sub">
         사용 약관 보기
        </span>
       </a>
      </li>
      <li id="navigation-more">
       <button aria-controls="more-menu" aria-expanded="false" aria-haspopup="true" class="expand-menu-link nav-more-link" data-event="global-navigation-menu-clicked-topnav" data-event-property="More" id="nav-more-link" title="기타" type="button">
        기타
       </button>
       <nav aria-labelledby="nav-more-link" class="nav-centered">
        <ul class="menu-drop menu-drop-more" id="more-menu">
        </ul>
       </nav>
      </li>
     </ul>
     <div class="onyx-variation" data-active="control" data-cohorts="null" data-name="main-header-go-to-portal" style="display: none;">
     </div>
     [ahref]
     
     <ul class="nav-collapsed-links" id="nav-collapsed-links">
      <li class="portal">
       [linkx]
       
      </li>
      <li class="search">
       [ahref]
       
      </li>
      <li class="contact-sales">
       <a data-event="global-navigation-header-clicked-saleslink" href="/ko-kr/overview/sales-number/" title="영업팀에 문의">
        <span class="icon">
         <svg aria-hidden="true" role="presentation">
          <use xlink:href="#svg-nav-phone">
          </use>
         </svg>
        </span>
       </a>
      </li>
     </ul>
    </nav>
   </header>
  </div>
  <main class="wa-container" data-tag-area="content" data-tag-group="body" id="main" tabindex="-1">
   <div class="section section-palette06">
    <div class="row">
     <div class="column">
      <h1>
       <b>[mkey1][symbolx][pkey1][symbolx][keyword1][bracketl1][bracketr1][symbolx][bracketl2][siter1][bracketr2][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx]</b>
      </h1>
     </div>
    </div>
    <div class="row row-size3">
     <div class="column">
      <p class="text-heading3">
       다중 플랫폼 확장 가능 앱 및 서비스를 손쉽게 빌드, 디버그, 배포, 진단 및 관리
      </p>
     </div>
    </div>
    <div class="row">
     <div class="column medium-6">
      <ul class="wa-checkList wa-checkList-light">
       <li>
        IaaS와 PaaS에서 사용 가능한 앱 빌드
       </li>
       <li>
        엔터프라이즈, 웹, 모바일 및 IoT 앱의 개발 가속화
       </li>
       <li>
        Visual Studio와 기타 독립 실행형 및 명령줄 도구에서 직접 클라우드 액세스
       </li>
      </ul>
     </div>
     <div class="column medium-6">
      <ul class="wa-checkList wa-checkList-light">
       <li>
        Java, Node, Python, Ruby, PHP 또는 .NET용 클라우드 앱 빌드
       </li>
       <li>
        명령줄 인터페이스에서 Azure 명령 실행
       </li>
       <li>
        세계적 수준의 디버거, 프로파일러, 진단 도구 및 탐색기를 사용하여 라이브 앱 진단
       </li>
      </ul>
     </div>
    </div>
   </div>
   <section aria-label="개발자 도구에 대해 알아보기" class="section">
    <div class="row">
     <div class="column large-6">
      <h2>
       <b>[mkey1][symbolx][pkey1][symbolx][keyword1][bracketl1][bracketr1][symbolx][bracketl2][siter1][bracketr2][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx]</b>
      </h2>
      <p>
       Azure 서비스를 최대로 활용하기 위한 다중 플랫폼 앱을 빌드하고 배포합니다. 앱을 Azure 서비스와 통합하고 Azure Resource Manager용 템플릿을 작성하는 데 도움이 되는 수백 개의 확장 및 테마를 사용할 수 있습니다. 간단한 다중 플랫폼 스크립트로 앱 및 템플릿을 Azure에 배포할 수 있습니다.
      </p>
      <p>
       <a class="button button-tiny button-carrot" data-event="area-tools-root-clicked-cta" href="/items?itemName=msazurermtools.azurerm-vscode-tools">
        Azure Resource Manager 도구 확장 받기
       </a>
      </p>
      <p>
       <a class="arrowLink" href="/api/Redirect/ko-kr/documentation/articles/web-sites-create-web-app-using-vscode/" rel="nofollow">
        Visual Studio Code에서 ASP.NET 5 웹앱 만들기
       </a>
      </p>
     </div>
     <div class="column large-6">
     </div>
    </div>
    <div class="row row-divided">
     <div class="column">
      <div class="row">
       <div class="column">
        <h2>
         [mkey1][symbolx][pkey1][symbolx][keyword1][bracketl1][bracketr1][symbolx][bracketl2][siter1][bracketr2][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx]
        </h2>
        <p>
         Visual Studio에서 직접 Azure 개발 환경을 향상시킬 수 있는 더 다양한 클라우드 리소스 및 서비스에 액세스하는 데 도움이 되는 추가적인 템플릿 및 도구 모음을 사용하려면 Azure SDK를 설치하세요. 이러한 도구를 사용하여 무한 확장 가능한 응용 프로그램 및 API를 배포하고, 진단을 구성하고, 앱 서비스 리소스를 생성 및 관리하고, 데이터를 통합하는 등의 작업을 수행할 수 있습니다.
        </p>
       </div>
      </div>
      <div class="row column category-list category-list-arrows">
       <div class="category-container">
        <button class="active" type="button">
         .NET SDK
        </button>
        <div aria-hidden="false" class="tabbed-product-container">
         <div class="row link-row">
          <div class="column large-offset-1 large-4">
           <p>
            <a class="arrowLink" href="/ko-kr/visualstudio/install/install-visual-studio?view=vs-2019">
             Visual Studio 2019
            </a>
           </p>
           <p>
            [linkx]
            
           </p>
           <p>
            [linkx]
            
           </p>
          </div>
          <div class="column large-4 end">
           <p>
            [ahref]
            
           </p>
           <p>
            <a class="arrowLink" href="/ko-kr/develop/net/">
             설명서
            </a>
           </p>
           <p>
            [ahref]
            
           </p>
           <p>
            <a class="arrowLink" href="/ko-kr/downloads/archive-net-downloads/">
             이전 버전
            </a>
           </p>
          </div>
         </div>
        </div>
       </div>
       <div class="category-container">
        <button type="button">
         Java SDK
        </button>
        <div aria-hidden="true" class="tabbed-product-container">
         <div class="row link-row">
          <div class="column large-offset-1 large-4">
           <p>
            [ahref]
            
           </p>
           <p>
            [ahref]
            
           </p>
           <p>
            [ahref]
            
           </p>
           <p>
            [linkx]
            
           </p>
           <p>
            <a class="arrowLink" href="/plugin/8053">
             IntelliJ용 Azure 도구 키트
            </a>
           </p>
           <p>
            [linkx]
            
           </p>
          </div>
          <div class="column large-4 end">
           <p>
            <a class="arrowLink" href="/Azure/azure-sdk-for-java">
             GitHub의 소스
            </a>
           </p>
           <p>
            <a class="arrowLink" href="/ko-kr/develop/java/">
             설명서
            </a>
           </p>
           <p>
            [ahref]
            
           </p>
          </div>
         </div>
        </div>
       </div>
       <div class="category-container">
        <button type="button">
         노드 SDK
        </button>
        <div aria-hidden="true" class="tabbed-product-container">
         <div class="row link-row">
          <div class="column large-offset-1">
           <p>
            <a class="arrowLink" href="/fwlink/?LinkId=254279&amp;clcid=0x412">
             Windows용 Azure Node SDK
            </a>
           </p>
           <p>
            [ahref]
            
           </p>
           <p>
            <a class="arrowLink" href="/fwlink/?LinkId=253472&amp;clcid=0x412">
             Linux용 Azure Node SDK
            </a>
           </p>
           <p>
            <a class="arrowLink" href="/Azure/azure-sdk-for-node">
             GitHub의 소스
            </a>
           </p>
           <p>
            <a class="arrowLink" href="/ko-kr/develop/nodejs/">
             설명서
            </a>
           </p>
           <p>
            <a class="arrowLink" href="/Microsoft/Cognitive-LUIS-Node.js">
             Language Understanding Intelligent Service Node JS SDK
            </a>
           </p>
          </div>
         </div>
        </div>
       </div>
       <div class="category-container">
        <button type="button">
         Python SDK
        </button>
        <div aria-hidden="true" class="tabbed-product-container">
         <div class="row link-row">
          <div class="column large-offset-1">
           <p>
            <a class="arrowLink" href="/fwlink/?LinkId=254281&amp;clcid=0x412">
             Windows용 Azure Python SDK
            </a>
           </p>
           <p>
            [linkx]
            
           </p>
           <p>
            <a class="arrowLink" href="/fwlink/?LinkId=253472&amp;clcid=0x412">
             Linux용 Azure Python SDK
            </a>
           </p>
           <p>
            <a class="arrowLink" href="/Azure/azure-sdk-for-python">
             GitHub의 소스
            </a>
           </p>
           <p>
            <a class="arrowLink" href="/ko-kr/develop/python/">
             설명서
            </a>
           </p>
           <p>
            [ahref]
            
           </p>
           <p>
            <a class="arrowLink" href="/Microsoft/Cognitive-Face-Python">
             Face Python SDK
            </a>
           </p>
          </div>
         </div>
        </div>
       </div>
       <div class="category-container">
        <button type="button">
         Ruby SDK
        </button>
        <div aria-hidden="true" class="tabbed-product-container">
         <div class="row link-row">
          <div class="column large-offset-1">
           <p>
            <a class="arrowLink" href="/fwlink/?LinkId=254280&amp;clcid=0x412">
             Windows용 Azure Ruby SDK
            </a>
           </p>
           <p>
            [ahref]
            
           </p>
           <p>
            <a class="arrowLink" href="/fwlink/?LinkId=253472&amp;clcid=0x412">
             Linux용 Azure Ruby SDK
            </a>
           </p>
           <p>
            <a class="arrowLink" href="/Azure/azure-sdk-for-ruby">
             GitHub의 소스
            </a>
           </p>
           <p>
            [linkx]
            
           </p>
          </div>
         </div>
        </div>
       </div>
       <div class="category-container">
        <button type="button">
         PHP SDK
        </button>
        <div aria-hidden="true" class="tabbed-product-container">
         <div class="row link-row">
          <div class="column large-offset-1">
           <p>
            <a class="arrowLink" href="/fwlink/?LinkId=254280&amp;clcid=0x412">
             Windows용 Azure PHP SDK
            </a>
           </p>
           <p>
            [ahref]
            
           </p>
           <p>
            [ahref]
            
           </p>
           <p>
            <a class="arrowLink" href="/Azure/azure-sdk-for-php">
             GitHub의 소스
            </a>
           </p>
           <p>
            [linkx]
            
           </p>
          </div>
         </div>
        </div>
       </div>
       <div class="category-container">
        <button type="button">
         Xamarin
        </button>
        <div aria-hidden="true" class="tabbed-product-container">
         <div class="row link-row">
          <div class="column large-offset-1">
           <p>
            <a class="arrowLink" href="/colbylwilliams/Cognitive-Face-Xamarin">
             Face Xamarin SDK
            </a>
           </p>
           <p>
            [ahref]
            
           </p>
          </div>
         </div>
        </div>
       </div>
       <div class="category-container">
        <button type="button">
         Android
        </button>
        <div aria-hidden="true" class="tabbed-product-container">
         <div class="row link-row">
          <div class="column large-offset-1">
           <p>
            [linkx]
            
           </p>
           <p>
            [linkx]
            
           </p>
           <p>
            <a class="arrowLink" href="/Microsoft/Cognitive-emotion-android">
             Emotion Android SDK
            </a>
           </p>
           <p>
            <a class="arrowLink" href="/Microsoft/Cognitive-face-android">
             Face Android SDK
            </a>
           </p>
           <p>
            [ahref]
            
           </p>
           <p>
            <a class="arrowLink" href="/Microsoft/Cognitive-SpeakerRecognition-Android">
             Speaker Recognition Android SDK
            </a>
           </p>
          </div>
         </div>
        </div>
       </div>
       <div class="category-container">
        <button type="button">
         iOS
        </button>
        <div aria-hidden="true" class="tabbed-product-container">
         <div class="row link-row">
          <div class="column large-offset-1">
           <p>
            [ahref]
            
           </p>
           <p>
            <a class="arrowLink" href="/Microsoft/Cognitive-face-ios">
             Face iOS SDK
            </a>
           </p>
          </div>
         </div>
        </div>
       </div>
       <div class="category-container">
        <button type="button">
         Swift
        </button>
        <div aria-hidden="true" class="tabbed-product-container">
         <div class="row link-row">
          <div class="column large-offset-1">
           <p>
            [ahref]
            
           </p>
          </div>
         </div>
        </div>
       </div>
       <div class="category-container">
        <button type="button">
         Windows
        </button>
        <div aria-hidden="true" class="tabbed-product-container">
         <div class="row link-row">
          <div class="column large-offset-1 large-4">
           <p>
            <a class="arrowLink" href="/Microsoft/Cognitive-Speech-STT-Windows">
             Bing Speech-to-Text Windows SDK
            </a>
           </p>
           <p>
            [ahref]
            
           </p>
           <p>
            [linkx]
            
           </p>
           <p>
            <a class="arrowLink" href="/Microsoft/Cognitive-face-windows">
             Face Windows SDK
            </a>
           </p>
           <p>
            <a class="arrowLink" href="/Microsoft/Cognitive-Common-windows">
             Windows Common Libraries
            </a>
           </p>
           <p>
            [ahref]
            
           </p>
           <p>
            <a class="arrowLink" href="/Microsoft/Cognitive-SpeakerRecognition-Windows">
             Speaker Recognition Windows SDK
            </a>
           </p>
          </div>
          <div class="column large-4 end">
           <p>
            [linkx]
            
           </p>
           <p>
            <a class="arrowLink" href="/Microsoft/Cognitive-video-windows">
             Video Windows SDK
            </a>
           </p>
           <p>
            [linkx]
            
           </p>
           <p>
            [ahref]
            
           </p>
           <p>
            [ahref]
            
           </p>
           <p>
            <a class="arrowLink" href="/MicrosoftContentModerator/Microsoft.CognitiveServices.ContentModerator-Windows/">
             Content Moderator SDK
            </a>
           </p>
          </div>
         </div>
        </div>
       </div>
      </div>
     </div>
    </div>
    <div class="row row-divided">
     <div class="column">
      <h2>
       [mkey1][symbolx][pkey1][symbolx][keyword1][bracketl1][bracketr1][symbolx][bracketl2][siter1][bracketr2][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx]
      </h2>
     </div>
    </div>
    <div class="row row-size3">
     <div class="column large-6">
      <h3>
       [mkey1][symbolx][pkey1][symbolx][keyword1][bracketl1][bracketr1][symbolx][bracketl2][siter1][bracketr2][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx]
      </h3>
      <p>
       Azure 플랫폼을 통해 제공되는 솔루션과 서비스를 만들고, 테스트하고, 배포하고, 관리하기 위한 cmdlet입니다.
      </p>
      <a class="button button-tiny button-carrot" data-event="area-tools-root-clicked-cta" href="/ko-kr/powershell/azureps-cmdlets-docs/" rel="nofollow">
       Azure PowerShell 설치 및 구성
      </a>
     </div>
     <div class="column large-6">
      <h3>
       [mkey1][symbolx][pkey1][symbolx][keyword1][bracketl1][bracketr1][symbolx][bracketl2][siter1][bracketr2][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx]
      </h3>
      <p>
       서비스를 관리하고 자주 수행하는 작업을 처리하는 경량 교차 플랫폼 명령줄 도구입니다.
      </p>
      [ahref]
      
     </div>
    </div>
    <div class="row">
     <div class="column large-6">
      <h3>
       [mkey1][symbolx][pkey1][symbolx][keyword1][bracketl1][bracketr1][symbolx][bracketl2][siter1][bracketr2][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx]
      </h3>
      <p>
       PowerShell에서 Visual Studio 개발 환경을 사용할 수 있습니다.  즉, 스크립트 및 모듈에 Visual Studio의 로컬, 조사식, 호출 스택을 활용하여 PowerShell 스크립트를 로컬 및 원격으로 편집, 실행 및 디버그합니다.
      </p>
      <a class="button button-tiny button-carrot" data-event="area-tools-root-clicked-cta" href="/c9eb3ba8-0c59-4944-9a62-6eee37294597">
       Visual Studio 2015용 PowerShell 도구 받기
      </a>
     </div>
     <div class="column large-6">
     </div>
    </div>
    <div class="row row-divided">
     <div class="column large-6 text-center">
     </div>
     <div class="column large-6">
      <h2>
       <b>[mkey1][symbolx][pkey1][symbolx][keyword1][bracketl1][bracketr1][symbolx][bracketl2][siter1][bracketr2][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx]</b>
      </h2>
      <p>
       Microsoft Azure Storage 탐색기 프리뷰는 장소에 상관 없이 모든 플랫폼에서 Azure Storage 데이터로 손쉽게 작업할 수 있도록 해주는 독립 실행형 앱입니다. Blob, 테이블, 쿼리를 만들고 관리하며 SAS 키를 생성하는 등의 작업이 가능합니다.
      </p>
      <p>
       다음을 지원하는 Storage 탐색기 다운로드:
      </p>
      <p>
       [linkx]
       
       <a class="button button-tiny button-carrot" data-event="area-tools-root-clicked-cta" href="/fwlink/?LinkId=708342&amp;clcid=0x412">
        Mac
       </a>
       <a class="button button-tiny button-carrot" data-event="area-tools-root-clicked-cta" href="/fwlink/?LinkId=722418&amp;clcid=0x412">
        Linux
       </a>
      </p>
      <p>
       [linkx]
       
      </p>
     </div>
    </div>
    <div class="row row-divided">
     <div class="column large-6">
      <div class="row">
       <div class="column">
        <h2>
         <b>[mkey1][symbolx][pkey1][symbolx][keyword1][bracketl1][bracketr1][symbolx][bracketl2][siter1][bracketr2][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx]</b>
        </h2>
        <p>
         Visual Studio에서 직접 Azure의 클라우드 규모 응용 프로그램을 쉽게 빌드, 관리 및 배포하는 데 필요한 모든 기능을 가져오세요.
        </p>
        <p>
         [linkx]
         
         의 Azure Workload에는 애플리케이션에서 Azure를 활용하는 데 필요한 모든 도구와 기능이 포함되어 있습니다.
        </p>
        <p>
         [linkx]
         
        </p>
       </div>
      </div>
     </div>
     <div class="column large-6 text-center">
     </div>
    </div>
    <div class="row row-divided">
     <div class="column large-6 text-center">
     </div>
     <div class="column large-6">
      [content9][content10][content11][content12][linkx][content13]
     </div>
    </div>
    <div class="row row-divided">
     <div class="column large-6">
      <h2>
       [mkey1][symbolx][pkey1][symbolx][keyword1][bracketl1][bracketr1][symbolx][bracketl2][siter1][bracketr2][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx]
      </h2>
      <p>
       로컬에서 호스트되거나 Azure에서 호스트되는 Docker 컨테이너에서 응용 프로그램을 빌드하고 디버그합니다. 다양한 도구 및 확장을 사용하여 Docker 컨테이너로 작업합니다.
      </p>
      <p>
       Visual Studio 2019용 Docker 도구는 .NET Core 플랫폼 간 개발 워크로드에 포함되어 있습니다.
      </p>
      <p>
       [ahref]
       
      </p>
      <p>
       [linkx]
       
      </p>
      <p>
       [ahref]
       
      </p>
      <p>
       <a class="arrowLink" href="/Microsoft/DockerToolsDocs">
        설명서
       </a>
      </p>
     </div>
     <div class="column large-6 text-center">
     </div>
    </div>
    <div class="row row-divided">
     <div class="column large-6 text-center">
     </div>
     <div class="column large-6">
      <h2>
       [mkey1][symbolx][pkey1][symbolx][keyword1][bracketl1][bracketr1][symbolx][bracketl2][siter1][bracketr2][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx]
      </h2>
      Azure Service Fabric 및 Visual Studio를 사용하여 마이크로 서비스의 구축을 시작하세요. 이러한 도구는 다양한 서비스 템플릿을 사용하여 새로운 Service Fabric 응용 프로그램을 만들기 때문에 이를 손쉽게 디버그하고 배포하고 버전 지정하고 업그레이드할 수 있습니다.
      <p>
       [ahref]
       
      </p>
      <p>
       [ahref]
       
      </p>
     </div>
    </div>
   </section>
   <section aria-label="체험 계정 Visual Studio 스타트업" class="section section-palette03 section-size3" data-tag-group="member-offers">
    <div class="row">
     <div class="column medium-3">
      <h3>
       [mkey1][symbolx][pkey1][symbolx][keyword1][bracketl1][bracketr1][symbolx][bracketl2][siter1][bracketr2][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx]
      </h3>
      <p>
       Azure 체험 계정을 사용하여 멋진 아이디어 실현
      </p>
      [linkx]
      
     </div>
     <div class="column medium-3 medium-offset-1">
      <h3>
       [mkey1][symbolx][pkey1][symbolx][keyword1][bracketl1][bracketr1][symbolx][bracketl2][siter1][bracketr2][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx]
      </h3>
      <p>
       구독자에게 연간 최대
       <span class="price-data " data-amount='{"currencies":{"USD":1800.0,"ARS":70200.0,"AUD":2480.0,"BRL":6690.0,"CAD":2310.0,"CHF":1780.0,"DKK":10200.0,"EUR":1380.0,"GBP":1140.0,"IDR":28160000.0,"INR":96800.0,"JPY":202000.0,"KRW":2024370.0,"NOK":15000.0,"NZD":2730.0,"RUB":62400.0,"SAR":6840.0,"SEK":15750.0,"TRY":10090.0,"TWD":56400.0,"ZAR":27900.0}}' data-decimals="3">
        $1800
       </span>
       의 추가 Azure 서비스 제공
      </p>
      [ahref]
      
     </div>
     <div class="column medium-3 medium-offset-1 end">
      <h3>
       [mkey1][symbolx][pkey1][symbolx][keyword1][bracketl1][bracketr1][symbolx][bracketl2][siter1][bracketr2][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx]
      </h3>
      <p>
       BizSpark 프로그램에 가입하고 무료 Azure 서비스를 이용하십시오.
      </p>
      [ahref]
      
     </div>
    </div>
    <div class="row row-size2 show-for-large">
     <div class="column medium-3">
      [ahref]
      
     </div>
     <div class="column medium-3 medium-offset-1">
      [linkx]
      
     </div>
     <div class="column medium-3 medium-offset-1 end">
      <a class="arrowLink" href="/ko-kr/pricing/member-offers/bizspark-startups/">
       자세한 정보
      </a>
     </div>
    </div>
   </section>
  </main>
  <footer class="section-footer" data-tag-area="footer" data-tag-group="footer">
   <div class="row">
    <nav aria-label="소셜로 이동" class="column medium-3">
     <p class="text-heading6">
      소셜로 이동
     </p>
     <ul aria-label="소셜로 이동" class="linkList linkList-social">
      <li>
       <a href="/microsoftazure">
        <span class="icon icon-size3">
         <svg style="display:none; visibility:hidden;">
          <defs>
           <symbol id="svg-facebook-square-bw" viewbox="0 0 28 28">
            <rect fill="#fff" height="28" width="28">
            </rect>
            <path d="M19.319,28V17.157h3.64l.545-4.226H19.319v-2.7c0-1.223.34-2.057,2.094-2.057h2.238V4.4a29.944,29.944,0,0,0-3.261-.166c-3.226,0-5.435,1.969-5.435,5.586v3.116H11.307v4.226h3.649V28Z">
            </path>
           </symbol>
          </defs>
         </svg>
         <svg aria-hidden="true" role="presentation">
          <use xlink:href="#svg-facebook-square-bw">
          </use>
         </svg>
        </span>
        <span class="show-for-medium">
         Facebook
        </span>
       </a>
      </li>
      <li>
       <a href="/azure">
        <span class="icon icon-size3">
         <svg style="display:none; visibility:hidden;">
          <defs>
           <symbol id="svg-twitter-square" viewbox="0 0 34 34">
            <rect fill="#fff" height="34" width="34">
            </rect>
            <path d="M12.512,27.23A14.5,14.5,0,0,0,27.106,12.636c0-.222,0-.443-.015-.663A10.436,10.436,0,0,0,29.65,9.318a10.238,10.238,0,0,1-2.946.807,5.147,5.147,0,0,0,2.255-2.837A10.279,10.279,0,0,1,25.7,8.533a5.134,5.134,0,0,0-8.741,4.678A14.562,14.562,0,0,1,6.39,7.852,5.133,5.133,0,0,0,7.978,14.7a5.091,5.091,0,0,1-2.328-.642v.065A5.131,5.131,0,0,0,9.765,19.15a5.121,5.121,0,0,1-2.316.088A5.135,5.135,0,0,0,12.241,22.8,10.292,10.292,0,0,1,5.871,25a10.441,10.441,0,0,1-1.221-.074,14.521,14.521,0,0,0,7.862,2.3" fill="#1da1f2" transform="translate(-0.15 -0.073)">
            </path>
           </symbol>
          </defs>
         </svg>
         <svg aria-hidden="true" role="presentation">
          <use xlink:href="#svg-twitter-square">
          </use>
         </svg>
        </span>
        <span class="show-for-medium">
         Twitter
        </span>
       </a>
      </li>
      <li>
       <a href="/user/windowsazure">
        <span class="icon icon-size3">
         <svg style="display:none; visibility:hidden;">
          <defs>
           <symbol id="svg-youtube" viewbox="0 0 40 40">
            <rect fill="#e52d27" height="40" width="40">
            </rect>
            <path d="M33.72,14.4a6.058,6.058,0,0,0-1.113-2.779A4,4,0,0,0,29.8,10.437c-3.918-.283-9.8-.283-9.8-.283h-.012s-5.877,0-9.8.283a4.005,4.005,0,0,0-2.806,1.186A6.056,6.056,0,0,0,6.28,14.4,42.344,42.344,0,0,0,6,18.933v2.124a42.342,42.342,0,0,0,.28,4.532,6.056,6.056,0,0,0,1.113,2.779,4.748,4.748,0,0,0,3.087,1.2c2.24.215,9.52.281,9.52.281s5.884-.009,9.8-.292a4,4,0,0,0,2.806-1.186,6.058,6.058,0,0,0,1.113-2.779A42.406,42.406,0,0,0,34,21.058V18.933A42.408,42.408,0,0,0,33.72,14.4Zm-16.611,9.23V15.765l7.566,3.947Z" fill="#fff">
            </path>
           </symbol>
          </defs>
         </svg>
         <svg aria-hidden="true" role="presentation">
          <use xlink:href="#svg-youtube">
          </use>
         </svg>
        </span>
        <span class="show-for-medium">
         YouTube
        </span>
       </a>
      </li>
      <li>
       <a href="/company/16188386">
        <span class="icon icon-size3">
         <svg style="display:none; visibility:hidden;">
          <defs>
           <symbol id="svg-linkedin" viewbox="0 0 23 23">
            <rect fill="#0080B5" height="23" width="23">
            </rect>
            <rect fill="#FFFFFF" height="7.7391968" width="2.5723877" x="5.6520386" y="9.2667236">
            </rect>
            <path d="M6.9552612,5.5358887C6.0753174,5.5358887,5.5,6.1136475,5.5,6.8730469 c0,0.7426758,0.5582275,1.3369751,1.4215088,1.3369751h0.0166626h0.000061c0.8970337,0,1.4553833-0.5942993,1.4553833-1.3369751 C8.3768921,6.1136475,7.8352661,5.5358887,6.9552612,5.5358887z" fill="#FFFFFF">
            </path>
            <path d="M14.5385132,9.085083c-1.3665161,0-1.9766235,0.7510986-2.3182373,1.2785645V9.2667236H9.6478882 c0.0337524,0.7261963,0,7.7391968,0,7.7391968h2.5722656V12.684021c0-0.2313232,0.0167236-0.4624023,0.0846558-0.6277466 c0.1859741-0.4620972,0.6092529-0.9407349,1.3198853-0.9407349c0.9307861,0,1.3031616,0.7097168,1.3031616,1.750061v4.1403198H17.5 v-4.437561C17.5,10.1912231,16.230896,9.085083,14.5385132,9.085083z" fill="#FFFFFF">
            </path>
           </symbol>
          </defs>
         </svg>
         <svg aria-hidden="true" role="presentation">
          <use xlink:href="#svg-linkedin">
          </use>
         </svg>
        </span>
        <span class="show-for-medium">
         LinkedIn
        </span>
       </a>
      </li>
      <li>
       <a href="/ko-kr/blog/feed/">
        <span class="icon icon-size3">
         <svg style="display:none; visibility:hidden;">
          <defs>
           <symbol id="svg-rss" viewbox="0 0 50 50">
            <rect fill="#ea8335" height="50" width="50" x="0">
            </rect>
            <path d="M31.5,41.3h-5.6c0-9.5-7.7-17.2-17.2-17.2v-5.6C21.3,18.5,31.5,28.7,31.5,41.3z" fill="#FFFFFF">
            </path>
            <path d="M41.3,41.3h-5.6c0-14.9-12.2-27-27-27V8.7C26.7,8.7,41.3,23.3,41.3,41.3z" fill="#FFFFFF">
            </path>
            <circle cx="14.2" cy="35.8" fill="#FFFFFF" r="5.5">
            </circle>
           </symbol>
          </defs>
         </svg>
         <svg aria-hidden="true" role="presentation">
          <use xlink:href="#svg-rss">
          </use>
         </svg>
        </span>
        <span class="show-for-medium">
         RSS
        </span>
       </a>
      </li>
     </ul>
    </nav>
    <div class="column medium-3">
     <nav aria-label="Microsoft Azure" data-control="toggle">
      <button aria-controls="footer-microsoft-azure" aria-expanded="false" class="text-heading6 toggler hide-for-large" type="button">
       Microsoft Azure
      </button>
      <p class="text-heading6 show-for-large">
       <a href="/ko-kr/">
        Microsoft Azure
       </a>
      </p>
      <ul aria-label="Microsoft Azure" class="linkList toggled" id="footer-microsoft-azure">
       <li>
        [ahref]
        
       </li>
       <li>
        [ahref]
        
       </li>
       <li>
        <a href="/ko-kr/global-infrastructure/regions/">
         지역
        </a>
       </li>
       <li>
        <a href="/ko-kr/case-studies/">
         사례 연구
        </a>
       </li>
       <li>
        <a href="/ko-kr/pricing/">
         가격
        </a>
       </li>
       <li>
        <a href="/ko-kr/pricing/member-offers/">
         회원 제안
        </a>
       </li>
       <li>
        <a href="/ko-kr/pricing/calculator/">
         계산기
        </a>
       </li>
       <li>
        <a href="/ko-kr/azure/">
         설명서
        </a>
       </li>
       <li>
        [linkx]
        
       </li>
       <li>
        <a href="/ko-kr/resources/samples/">
         샘플
        </a>
       </li>
       <li>
        <a href="/ko-kr/marketplace/">
         Marketplace
        </a>
       </li>
       <li>
        [ahref]
        
       </li>
      </ul>
     </nav>
    </div>
    <div class="column medium-3">
     <nav aria-label="커뮤니티" data-control="toggle">
      <button aria-controls="footer-community" aria-expanded="false" class="text-heading6 toggler hide-for-large" type="button">
       커뮤니티
      </button>
      <p class="text-heading6 show-for-large">
       [linkx]
       
      </p>
      <ul aria-label="커뮤니티" class="linkList toggled" id="footer-community">
       <li>
        <a href="/ko-kr/blog/" target="_blank">
         블로그
        </a>
       </li>
       <li>
        <a href="/ko-kr/updates/">
         Azure 업데이트
        </a>
       </li>
       <li>
        <a href="/t5/Azure/ct-p/Azure">
         기술 커뮤니티
        </a>
       </li>
       <li>
        [linkx]
        
       </li>
       <li>
        [ahref]
        
       </li>
       <li>
        [ahref]
        
       </li>
       <li>
        [linkx]
        
       </li>
       <li>
        [linkx]
        
       </li>
      </ul>
     </nav>
     <nav aria-label="지원" data-control="toggle">
      <button aria-controls="footer-support" aria-expanded="false" class="text-heading6 toggler hide-for-large" type="button">
       지원
      </button>
      <p class="text-heading6 show-for-large">
       [linkx]
       
      </p>
      <ul aria-label="지원" class="linkList toggled" id="footer-support">
       <li>
        [linkx]
        
       </li>
       <li>
        <a href="/ko-kr/status/">
         Azure 상태 대시보드
        </a>
       </li>
       <li>
        [linkx]
        
       </li>
      </ul>
     </nav>
    </div>
    <div class="column medium-3">
     <nav aria-label="계정" data-control="toggle">
      <button aria-controls="footer-account" aria-expanded="false" class="text-heading6 toggler hide-for-large" type="button">
       계정
      </button>
      <p class="text-heading6 show-for-large">
       <a href="/ko-kr/account/">
        계정
       </a>
      </p>
      <ul aria-label="계정" class="linkList toggled" id="footer-account">
       <li>
        <a href="/">
         Microsoft Azure Portal
        </a>
       </li>
       <li>
        <a href="/ko-kr/updates/?status=inpreview">
         미리 보기 기능
        </a>
       </li>
       <li>
        <a href="/ko-kr/privacy-data-management/">
         프라이버시 데이터 관리
        </a>
       </li>
      </ul>
     </nav>
     <nav aria-label="신뢰성" data-control="toggle">
      <button aria-controls="footer-trust-center" aria-expanded="false" class="text-heading6 toggler hide-for-large" type="button">
       신뢰성
      </button>
      <p class="text-heading6 show-for-large">
       <a href="/ko-kr/overview/trusted-cloud/">
        신뢰성
       </a>
      </p>
      <ul aria-label="신뢰성" class="linkList toggled" id="footer-trust-center">
       <li>
        [linkx]
        
       </li>
       <li>
        <a href="/fwlink/?LinkId=717953&amp;clcid=0x412">
         개인 정보
        </a>
       </li>
       <li>
        [ahref]
        
       </li>
      </ul>
     </nav>
    </div>
   </div>
   <div class="row row-divided row-size2">
    <div class="column medium-2">
     <p class="footer-hello">
      안녕하세요.[content9[linkx]content10[linkx]content11]
     </p>
    </div>
    <div class="column medium-2">
     <div id="dropdown-cultures">
      <select aria-label="문화권" data-dropdown-event="global-footer-dropdownmenu-changed-language" data-dropdown-property="CommonLanguageDropdownValue" title="문화권">
       <option value="en-us">
        English (US)
       </option>
       <option value="cs-cz">
        Čeština
       </option>
       <option value="da-dk">
        Dansk
       </option>
       <option value="de-de">
        Deutsch
       </option>
       <option value="en-au">
        English (Australia)
       </option>
       <option value="en-ca">
        English (Canada)
       </option>
       <option value="en-in">
        English (India)
       </option>
       <option value="en-gb">
        English (UK)
       </option>
       <option value="es-es">
        Español
       </option>
       <option value="es-mx">
        Español (MX)
       </option>
       <option value="fr-fr">
        Français
       </option>
       <option value="fr-ca">
        Français (Canada)
       </option>
       <option value="is-is">
        Íslensku
       </option>
       <option value="th-th">
        ประเทศไทย
       </option>
       <option value="id-id">
        Bahasa Indonesia
       </option>
       <option value="it-it">
        Italiano
       </option>
       <option value="hu-hu">
        Magyar
       </option>
       <option value="nb-no">
        Norsk
       </option>
       <option value="nl-nl">
        Nederlands
       </option>
       <option value="pl-pl">
        Polski
       </option>
       <option value="pt-br">
        Português (Brasil)
       </option>
       <option value="pt-pt">
        Português
       </option>
       <option value="sv-se">
        Svenska
       </option>
       <option value="tr-tr">
        Türkçe
       </option>
       <option value="ru-ru">
        Pусский
       </option>
       <option value="ja-jp">
        日本語
       </option>
       <option selected="selected" value="ko-kr">
        한국어
       </option>
       <option value="zh-cn">
        中文(简体)
       </option>
       <option value="zh-tw">
        中文(繁體)
       </option>
      </select>
     </div>
    </div>
    <div class="column medium-2">
     <div id="dropdown-currency">
      <select aria-label="통화" class="currency-selector " data-dropdown-event="global-footer-dropdownmenu-changed-currency" data-dropdown-property="CommonCurrencyDropdownValue" id="currency-dropdown" title="통화">
       <optgroup label="자주 사용">
        <option value="USD">
         미국 달러($)
        </option>
        <option value="EUR">
         유로(€)
        </option>
        <option value="GBP">
         영국 파운드(£)
        </option>
        <option value="AUD">
         호주 달러($)
        </option>
        <option value="INR">
         인도 루피(₹)
        </option>
        <option value="CAD">
         캐나다 달러($)
        </option>
       </optgroup>
       <optgroup label="전체">
        <option value="ZAR">
         남아프리카공화국 랜드(R)
        </option>
        <option value="NOK">
         노르웨이 크론(kr)
        </option>
        <option value="NZD">
         뉴질랜드 달러($)
        </option>
        <option value="TWD">
         대만 달러(NT$)
        </option>
        <option value="DKK">
         덴마크 크론(kr)
        </option>
        <option value="RUB">
         러시아 루블(руб)
        </option>
        <option value="MYR">
         말레이시아 링깃(RM$)
        </option>
        <option value="MXN">
         멕시코 페소(MXN$)
        </option>
        <option value="USD">
         미국 달러($)
        </option>
        <option value="BRL">
         브라질 헤알(R$)
        </option>
        <option value="SAR">
         사우디아라비아 리얄(SR)
        </option>
        <option value="SEK">
         스웨덴 크로나(kr)
        </option>
        <option value="CHF">
         스위스 프랑(chf)
        </option>
        <option value="ARS">
         아르헨티나 페소($)
        </option>
        <option value="GBP">
         영국 파운드(£)
        </option>
        <option value="EUR">
         유로(€)
        </option>
        <option value="INR">
         인도 루피(₹)
        </option>
        <option value="IDR">
         인도네시아 루피아(Rp)
        </option>
        <option value="JPY">
         일본 엔(¥)
        </option>
        <option value="CAD">
         캐나다 달러($)
        </option>
        <option value="TRY">
         터키 리라(TL)
        </option>
        <option value="KRW">
         한국 원(₩)
        </option>
        <option value="AUD">
         호주 달러($)
        </option>
        <option value="HKD">
         홍콩 달러(HK$)
        </option>
       </optgroup>
      </select>
     </div>
    </div>
    <div class="column medium-4">
     <ul class="linkList linkList-legal">
      <li class="german-legal">
       <a href="/de-de/rechtliche-hinweise/nutzungsbedingungen">
        Nutzungsbedingungen
       </a>
      </li>
      <li class="german-legal">
       [linkx]
       
      </li>
      <li>
       [linkx]
       
      </li>
      <li class="feedback">
       [linkx]
       
      </li>
      <li>
       <a href="/en-us/legal/intellectualproperty/Trademarks/">
        상표
       </a>
      </li>
      <li>
       [linkx]
       
      </li>
     </ul>
    </div>
    <div class="column medium-2">
     <div class="footer-copyright pull-right">
      [linkx]
      
      <span>
       © 2019 Microsoft
      </span>
     </div>
    </div>
   </div>
   <div class="row row-size2 column">
    한국마이크로소프트(유)
    <br/>
    대표이사: 고순동
    <br/>
    주소: (우)110-150 서울 종로구 종로1길 50 더 케이트윈타워 A동 12층
    <br/>
    전화번호: 02-531-4500
    <br/>
    사업자등록번호: 120-81-05948
    <br/>
    통신판매신고: 제2013-서울종로-1009호
   </div>
  </footer>
  <b style="color:black;background-color:#a0ffff">
   jnice09-ipp30-wq-zq-0419
  </b>
 </body>
</html>
|<---