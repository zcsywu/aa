--->|<!DOCTYPE html>
<html class="client-nojs" dir="ltr" lang="en">
 <head>
  <meta charset="utf-8"/>
  <title>
   [mkey1][symbolx][pkey1][symbolx][keyword1][bracketl1][keywordx][bracketr1][symbolx][bracketl2][keywordx][bracketr2][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx]
  </title>
  <meta content="[mkey1][symbolx][pkey3][symbolx][keyword1][bracketl1][keywordx][bracketr1][symbolx][bracketl2][keywordx][bracketr2][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx]" name="keywords"/>
  <meta content="[mkey1][symbolx][pkey2][symbolx][keyword1][bracketl1][keywordx][bracketr1][symbolx][bracketl2][keywordx][bracketr2][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx]" name="description"/>
  <meta content="" name="ResourceLoaderDynamicStyles"/>
  <meta content="MediaWiki 1.27.5" name="generator"/>
  <meta content="http://wiki.teamfortress.com/w/images/3/3f/Reddit_thumbnail.png" name="og:image"/>
 </head>
 <body class="mediawiki ltr sitedir-ltr ns-0 ns-subject page-Hat_With_No_Name_ko rootpage-Hat_With_No_Name skin-vector action-view">
  <div class="noprint" id="mw-page-base">
  </div>
  <div class="noprint" id="mw-head-base">
  </div>
  <div class="mw-body" id="content" role="main">
   [ahref]
   
   <div class="mw-indicators">
   </div>
   <h1 class="firstHeading" id="firstHeading" lang="en">
    <b>[mkey1][symbolx][pkeyx][symbolx][keyword1][bracketl1][keywordx][bracketr1][symbolx][bracketl2][keywordx][bracketr2][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx]</b>
   </h1>
   <div class="mw-body-content" id="bodyContent">
    <div id="siteSub">
     From Team Fortress Wiki
    </div>
    <div id="contentSub">
     <span class="subpages">
      <
      [ahref]
      
     </span>
    </div>
    <div class="mw-jump" id="jump-to-nav">
     Jump to:
     <a href="d">
      navigation
     </a>
     ,
     <a href="h">
      search
     </a>
    </div>
    <div class="mw-content-ltr" dir="ltr" id="mw-content-text" lang="en">
     <div id="right-sidebar">
      <table class="infobox item-infobox cosmetic-infobox" style="width:300px; max-width:300px; {{{1}}}">
       <tr>
        <th class="infobox-header" colspan="2" id="top-header" style="background:#F3A957;">
         이름 없는 모자
        </th>
       </tr>
       <tr>
        <td colspan="2" style="padding:0em;">
         <div class="center">
          <div class="floatnone">
           [ahref]
           
          </div>
         </div>
        </td>
       </tr>
       <tr>
        <td class="infobox-data" colspan="2" style="text-align:center">
         <div class="plainlinks btn_wrapper" style="width:100%">
          <a class="external text" href="/buyitem/440/631" rel="nofollow">
           <span class="btn_buynow">
            즉시 구매 - $4.99
            <span>
            </span>
           </span>
          </a>
         </div>
        </td>
       </tr>
       <tr>
        <th class="infobox-header" colspan="2">
         기본 정보
        </th>
       </tr>
       <tr>
        <td class="infobox-label">
         착용자
        </td>
        <td>
         <a href="/wiki/Soldier/ko" title="Soldier/ko">
          솔저
         </a>
         ,
         [ahref]
         
         ,
         <a href="/wiki/Engineer/ko" title="Engineer/ko">
          엔지니어
         </a>
         ,
         [ahref]
         
        </td>
       </tr>
       <tr>
        <td class="infobox-label">
         칸
        </td>
        <td class="infobox-data">
         [ahref]
         
        </td>
       </tr>
       <tr>
        <td class="infobox-label">
         [linkx]
         
         :
        </td>
        <td class="infobox-data">
         모자
        </td>
       </tr>
       <tr>
        <td class="infobox-label">
         기여자:
        </td>
        <td class="infobox-data">
         [ahref]
         
         <br/>
         [linkx]
         
         <br/>
         [linkx]
         
         <br/>
        </td>
       </tr>
       <tr>
        <td class="infobox-label">
         공개일
        </td>
        <[keywordx]>
        </[keywordx]>
       </tr>
       <tr>
        <td class="infobox-label">
         획득 방법:
        </td>
        <td class="infobox-data">
         [linkx]
         
         ,
         [linkx]
         
         ,
         <a href="/wiki/Mann_Co._Store/ko" title="Mann Co. Store/ko">
          구매
         </a>
         ,
         [ahref]
         
         ,
         [linkx]
         
         (
         [ahref]
         
         ) 또는
         [linkx]
         
         (
         [linkx]
         
         및
         [linkx]
         
         )
        </td>
       </tr>
       <tr>
        <td class="infobox-label">
         <a href="/wiki/Trading/ko" title="Trading/ko">
          교환 여부[linkx][pkeyx][linkx][keywordx][mkey1][linkx][linkx][keywordx][symbolx][keywordx][symbolx][bracketl15][keywordx][bracketr15][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][linkx][keywordx][keywordx][symbolx][keywordx][symbolx][bracketl16][keywordx][bracketr16][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][ahref][ahref][linkx][keywordx][ahref][keywordx]
         </a>
        </td>
        <td class="infobox-data">
         가능
        </td>
       </tr>
       <tr>
        <td class="infobox-label">
         [ahref]
         
        </td>
        <td class="infobox-data">
         가능<li>[ahref]</li><li>[ahref]</li><li>[mkey1]</li>[ahref][keywordx]
        </td>
       </tr>
       <tr>
        [keywordx][mkey1][keywordx][ahref][pkeyx][linkx][mkey1][keywordx][symbolx][keywordx][symbolx][bracketl17][keywordx][bracketr17][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][ahref][mkey1][keywordx][symbolx][keywordx][symbolx][bracketl18][keywordx][bracketr18][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][pkeyx][mkey1][linkx][mkey1][mkey1][keywordx][symbolx][keywordx][symbolx][bracketl1][keywordx][bracketr1][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][linkx][mkey1][keywordx][symbolx][keywordx][symbolx][bracketl2][keywordx][bracketr2][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][linkx]
       </tr>
       <tr>
        <li>[keywordx]</li>[pkeyx]<li>[keywordx]</li>
       </tr>
       <tr>
        <td class="infobox-label">
         [ahref]
         
        </td>
        <td class="infobox-data">
         가능
        </td>
       </tr>
       <tr>
        <td class="infobox-label">
         [ahref][pkeyx][keywordx][pkeyx][ahref][keywordx][symbolx][keywordx][symbolx][bracketl12][keywordx][bracketr12][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][bracketl13][keywordx][bracketr13][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][linkx][mkey1][mkey1][keywordx][linkx][pkeyx][ahref][ahref][mkey1][linkx][mkey1][pkeyx][keywordx][symbolx][keywordx][symbolx][bracketl14][keywordx][bracketr14][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx]
        </td>
        <td class="infobox-data">
         가능
        </td>
       </tr>
       <tr>
        <th class="infobox-header" colspan="2">
         존재하는 품질
        </th>
       </tr>
       <tr>
        <td colspan="2" style="text-align:center;">
         <div class="quality-tag tooltip-unique">
          [linkx]
          
         </div>
         <div class="quality-tag tooltip-strange">
          <a href="/wiki/Strange/ko" title="Strange/ko">
           <span id="tooltip" title="잠금 해제된 장식 아이템 상자">
            이상한
           </span>
          </a>
         </div>
         <div class="quality-tag tooltip-unusual">
          [ahref]
          
         </div>
        </td>
       </tr>
       <tr>
        <th class="infobox-header" colspan="2">
         장비 설정 상태
        </th>
       </tr>
       <tr>
        [ahref][ahref][keywordx][symbolx][keywordx][symbolx][bracketl1][keywordx][bracketr1][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][bracketl2][keywordx][bracketr2][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][pkeyx][mkey1][ahref][keywordx][symbolx][keywordx][symbolx][bracketl3][keywordx][bracketr3][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][bracketl4][keywordx][bracketr4][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][bracketl5][keywordx][bracketr5][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][bracketl6][keywordx][bracketr6][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][linkx][keywordx][mkey1][ahref][ahref][mkey1][pkeyx][ahref][keywordx]
       </tr>
      </table>
     </div>
     <table border="0" cellpadding="0" cellspacing="0" class="quotation" style="border-collapse:collapse; margin: 0em 2em 1em;">
      <tr>
       <td style="margin-left: -0.2em;padding-right: 0em; text-align: right;font: bold 4em Times New Roman, Times, Georgie, serif; color: #B3B3B3;">
        “
       </td>
       <td>
        <div style="font-style: italic; border-left: 1px solid #DDD;border-right: 1px solid #DDD;padding-left: 1em;padding-right: 1em;">
         prOOf 이라는 이름을 가진 플레이어가 제작한 이 멋드러지고 스타일리쉬하며 아래로 살짝 꺾인 챙이 인상적인 아웃도어 스타일의 카우보이 모자는 집을 나가 어떠한 곳을 가서 무슨 일을 하더라도 즐거운 여행이 되기를 약속 할 수 있게 해줍니다.
         <div style="text-align: left; font-size: 0.9em;">
          —
          <b>
           이름 없는 모자
          </b>
          의
          [linkx]
          
         </div>
        </div>
       </td>
       <td style="margin-left: -0.2em; text-align: left;font: bold 4em Times New Roman, Times, Georgie, serif; color: #B3B3B3;">
        ”[keywordx][mkey1][keywordx][symbolx][keywordx][symbolx][bracketl7][keywordx][bracketr7][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][mkey1][linkx][mkey1][ahref][mkey1][keywordx][symbolx][keywordx][symbolx][bracketl8][keywordx][bracketr8][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][pkeyx][linkx][ahref][linkx][keywordx][symbolx][keywordx][symbolx][bracketl9][keywordx][bracketr9][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][bracketl10][keywordx][bracketr10][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][ahref][keywordx][mkey1][keywordx][symbolx][keywordx][symbolx][bracketl11][keywordx][bracketr11][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][mkey1][mkey1][keywordx][linkx][ahref][mkey1][ahref][linkx]
       </td>
      </tr>
     </table>
     <p>
      <b>
       이름 없는 모자
      </b>
      는
      <a href="/wiki/Steam_Workshop/ko" title="Steam Workshop/ko">
       커뮤니티가 제작한
      </a>
      [linkx]
      
      ,
      [linkx]
      
      ,
      [ahref]
      
      와
      [ahref]
      
      를 위한
      <a href="/wiki/Cosmetic_items/ko" title="Cosmetic items/ko">
       장식 아이템
      </a>
      입니다. 이것은 팀 색상으로 칠해진 높은 카우보이 모자이며, 착용자의 눈을 가릴 정도로 챙이 넓습니다.
     </p>
     <p>
      이름 없는 모자는 "Western Legend"라는 이름으로 Steam 창작마당에
      [linkx]
      
      됬습니다.
     </p>
     <div class="toc" id="toc">
      <div id="toctitle">
       <h2>
        <b>[mkey1][symbolx][pkeyx][symbolx][keyword1][bracketl1][keywordx][bracketr1][symbolx][bracketl2][keywordx][bracketr2][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx]</b>
       </h2>
      </div>
      <ul>
       <li class="toclevel-1 tocsection-1">
        [ahref]
        
       </li>
       <li class="toclevel-1 tocsection-2">
        <a href="D">
         <span class="tocnumber">
          2
         </span>
         <span class="toctext">
          업데이트 내역
         </span>
        </a>
       </li>
       <li class="toclevel-1 tocsection-3">
        <a href="D">
         <span class="tocnumber">
          3
         </span>
         <span class="toctext">
          상식
         </span>
        </a>
       </li>
       <li class="toclevel-1 tocsection-4">
        [ahref]
        
       </li>
      </ul>
     </div>
     <h2>
      [mkey1][symbolx][pkeyx][symbolx][keyword1][bracketl1][keywordx][bracketr1][symbolx][bracketl2][keywordx][bracketr2][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx]
     </h2>
     <div style="font-style: italic; padding-left: 2em; margin-bottom: 0.5em;">
      본문:
      [linkx]
      
      <i>
      </i>
     </div>
    </div>
   </div>
  </div>
  <b style="color:black;background-color:#a0ffff">
   jnice09-ipp30-wq-zq-0228
  </b>
 </body>
</html>
<div style="font-style: italic; padding-left: 2em; margin-bottom: 0.5em;">
 <small>
  미리보기 사진에 마우스를 가져다 대면 배경이 검은색으로 변합니다.
 </small>
</div>
<table class="wikitable grid" style="font-size:x-small; font:transparent; line-height:125%; margin-bottom:0.5em;">
 <tr>
  <th class="header" colspan="4">
   <span id="tooltip" style="cursor:help; border-bottom:1px dotted;" title="아래의 색상들은 플레이어의 현재팀에 상관없이 한가지 색상으로만 나타납니다.">
    <b>
     일색
    </b>
   </span>
  </th>
 </tr>
 <tr>
  <td align="center" class="paintCell" style="width:100px;" title="격하게 떡칠된 옅은 색">
   <a class="image" href="/wiki/File:Painted_Hat_With_No_Name_E6E6E6.png">
   </a>
  </td>
  <td align="center" class="paintCell" style="width:100px;" title="색상 번호: 216-190-216">
   [ahref]
   
  </td>
  <td align="center" class="paintCell" style="width:100px;" title="유별나게 칙칙한 팅크색">
   <a class="image" href="/wiki/File:Painted_Hat_With_No_Name_C5AF91.png">
   </a>
  </td>
  <td align="center" class="paintCell" style="width:100px;" title="나이 지긋한 콧수염빛 회색">
   <a class="image" href="/wiki/File:Painted_Hat_With_No_Name_7E7E7E.png">
   </a>
  </td>
 </tr>
 <tr>
  <th style="border-top:solid 5px #E6E6E6;">
   격하게 떡칠된 옅은 색
  </th>
  <th style="border-top:solid 5px #D8BED8;">
   색상 번호: 216-190-216
  </th>
  <th style="border-top:solid 5px #C5AF91;">
   유별나게 칙칙한 팅크색
  </th>
  <th style="border-top:solid 5px #7E7E7E;">
   나이 지긋한 콧수염빛 회색
  </th>
 </tr>
 <tr>
  <td align="center" class="paintCell" title="색다른 색조의 결핍">
   [linkx]
   
  </td>
  <td align="center" class="paintCell" title="애프터 에이트">
   [ahref]
   
  </td>
  <td align="center" class="paintCell" title="레디건 코내거 갈색">
   [ahref]
   
  </td>
  <td align="center" class="paintCell" title="낡고 둔박한 빛깔">
   [ahref]
   
  </td>
 </tr>
 <tr>
  <th style="border-top:solid 5px #141414;">
   색다른 색조의 결핍
  </th>
  <th style="border-top:solid 5px #2D2D24;">
   애프터 에이트
  </th>
  <th style="border-top:solid 5px #694D3A;">
   레디건 코내거 갈색
  </th>
  <th style="border-top:solid 5px #7C6C57;">
   낡고 둔박한 빛깔
  </th>
 </tr>
 <tr>
  <td align="center" class="paintCell" title="근육남의 갈색 피부">
   <a class="image" href="/wiki/File:Painted_Hat_With_No_Name_A57545.png">
   </a>
  </td>
  <td align="center" class="paintCell" title="Mann Co. 주황색">
   <a class="image" href="/wiki/File:Painted_Hat_With_No_Name_CF7336.png">
   </a>
  </td>
  <td align="center" class="paintCell" title="오스트레일륨 황금">
   [ahref]
   
  </td>
  <td align="center" class="paintCell" title="젠틀만의 업무용 바지 색">
   [ahref]
   
  </td>
 </tr>
 <tr>
  <th style="border-top:solid 5px #A57545;">
   근육남의 갈색 피부
  </th>
  <th style="border-top:solid 5px #CF7336;">
   Mann Co. 주황색
  </th>
  <th style="border-top:solid 5px #E7B53B;">
   오스트레일륨 황금
  </th>
  <th style="border-top:solid 5px #F0E68C;">
   젠틀만의 업무용 바지 색
  </th>
 </tr>
 <tr>
  <td align="center" class="paintCell" title="그을린 연어색">
   [ahref]
   
  </td>
  <td align="center" class="paintCell" title="엄청 진한 핑크색">
   [ahref]
   
  </td>
  <td align="center" class="paintCell" title="자주색에 완전 충실한 색">
   [linkx]
   
  </td>
  <td align="center" class="paintCell" title="고결한 모자 장수의 보라색">
   <a class="image" href="/wiki/File:Painted_Hat_With_No_Name_51384A.png">
   </a>
  </td>
 </tr>
 <tr>
  <th style="border-top:solid 5px #E9967A;">
   그을린 연어색
  </th>
  <th style="border-top:solid 5px #FF69B4;">
   엄청 진한 핑크색
  </th>
  <th style="border-top:solid 5px #7D4071;">
   자주색에 완전 충실한 색
  </th>
  <th style="border-top:solid 5px #51384A;">
   고결한 모자 장수의 보라색
  </th>
 </tr>
 <tr>
  <td align="center" class="paintCell" title="벼룻돌 비슷한 색">
   [ahref]
   
  </td>
  <td align="center" class="paintCell" title="제페니아의 탐욕">
   [ahref]
   
  </td>
  <td align="center" class="paintCell" title="국방색">
   [linkx]
   
  </td>
  <td align="center" class="paintCell" title="또렷한 녹색">
   [linkx]
   
  </td>
 </tr>
 <tr>
  <th style="border-top:solid 5px #2F4F4F;">
   벼룻돌 비슷한 색
  </th>
  <th style="border-top:solid 5px #424F3B;">
   제페니아의 탐욕
  </th>
  <th style="border-top:solid 5px #808000;">
   국방색
  </th>
  <th style="border-top:solid 5px #729E42;">
   또렷한 녹색
  </th>
 </tr>
 <tr>
  <td align="center" class="paintCell" title="라임과도 같은 패배의 쓴 맛">
   [linkx]
   
  </td>
  <td align="center" class="paintCell" title="Mann의 박하색">
   [linkx]
   
  </td>
  <td colspan="2" rowspan="2">
  </td>
 </tr>
 <tr>
  <th style="border-top:solid 5px #32CD32;">
   라임과도 같은 패배의 쓴 맛
  </th>
  <th style="border-top:solid 5px #BCDDB3;">
   Mann의 박하색
  </th>
 </tr>
 <tr>
  <th class="header" colspan="4">
   <span id="tooltip" style="cursor:help; border-bottom:1px dotted;" title="아래의 색상들은 플레이어의 현재팀에따라 그 색상이 다르게 나타납니다.">
    <b>
     팀 색상
    </b>
   </span>
  </th>
 </tr>
 <tr>
  <td align="center" class="paintCell" title="물에 젖은 실험복 (레드)">
   [ahref]
   
  </td>
  <td align="center" class="paintCell" title="물에 젖은 실험복 (블루)">
   [ahref]
   
  </td>
  <td align="center" class="paintCell" title="발라클라바는 영원히 (레드)">
   <a class="image" href="/wiki/File:Painted_Hat_With_No_Name_3B1F23.png">
   </a>
  </td>
  <td align="center" class="paintCell" title="발라클라바는 영원히 (블루)">
   <a class="image" href="/wiki/File:Painted_Hat_With_No_Name_18233D.png">
   </a>
  </td>
 </tr>
 <tr>
  <th style="border-top:solid 5px #A89A8C;">
   물에 젖은 실험복 (레드)
  </th>
  <th style="border-top:solid 5px #839FA3;">
   물에 젖은 실험복 (블루)
  </th>
  <th style="border-top:solid 5px #3B1F23;">
   발라클라바는 영원히 (레드)
  </th>
  <th style="border-top:solid 5px #18233D;">
   발라클라바는 영원히 (블루)
  </th>
 </tr>
 <tr>
  <td align="center" class="paintCell" title="단체 정신 (레드)">
   [linkx]
   
  </td>
  <td align="center" class="paintCell" title="단체 정신 (블루)">
   [linkx]
   
  </td>
  <td align="center" class="paintCell" title="기술자의 멜빵바지 (레드)">
   <a class="image" href="/wiki/File:Painted_Hat_With_No_Name_483838.png">
   </a>
  </td>
  <td align="center" class="paintCell" title="기술자의 멜빵바지 (블루)">
   <a class="image" href="/wiki/File:Painted_Hat_With_No_Name_384248.png">
   </a>
  </td>
 </tr>
 <tr>
  <th style="border-top:solid 5px #B8383B;">
   단체 정신 (레드)
  </th>
  <th style="border-top:solid 5px #5885A2;">
   단체 정신 (블루)
  </th>
  <th style="border-top:solid 5px #483838;">
   기술자의 멜빵바지 (레드)
  </th>
  <th style="border-top:solid 5px #384248;">
   기술자의 멜빵바지 (블루)
  </th>
 </tr>
 <tr>
  <td align="center" class="paintCell" title="협동의 가치 (레드)">
   <a class="image" href="/wiki/File:Painted_Hat_With_No_Name_803020.png">
   </a>
  </td>
  <td align="center" class="paintCell" title="협동의 가치 (블루)">
   [linkx]
   
  </td>
  <td align="center" class="paintCell" title="위풍당당한 분위기 (레드)">
   <a class="image" href="/wiki/File:Painted_Hat_With_No_Name_654740.png">
   </a>
  </td>
  <td align="center" class="paintCell" title="위풍당당한 분위기 (블루)">
   [ahref]
   
  </td>
 </tr>
 <tr>
  <th style="border-top:solid 5px #803020;">
   협동의 가치 (레드)
  </th>
  <th style="border-top:solid 5px #256D8D;">
   협동의 가치 (블루)
  </th>
  <th style="border-top:solid 5px #654740;">
   위풍당당한 분위기 (레드)
  </th>
  <th style="border-top:solid 5px #28394D;">
   위풍당당한 분위기 (블루)
  </th>
 </tr>
 <tr>
  <td align="center" class="paintCell" title="크림 정신 (레드)">
   [ahref]
   
  </td>
  <td align="center" class="paintCell" title="크림 정신 (블루)">
   <a class="image" href="/wiki/File:Painted_Hat_With_No_Name_B88035.png">
   </a>
  </td>
  <td align="center" class="paintCell" title="페인트 미적용">
   [ahref]
   
  </td>
  <td colspan="1" rowspan="2">
  </td>
 </tr>
 <tr>
  <th style="border-top:solid 5px #C36C2D;">
   크림 정신 (레드)
  </th>
  <th style="border-top:solid 5px #B88035;">
   크림 정신 (블루)
  </th>
  <th style="border-top:solid 5px #F3A957;">
   페인트 미적용
  </th>
 </tr>
</table>
<h2>
 [mkey1][symbolx][pkeyx][symbolx][keyword1][bracketl1][keywordx][bracketr1][symbolx][bracketl2][keywordx][bracketr2][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx]
</h2>
<p>
 <b>
  [ahref]
  
 </b>
 (
 <a href="/wiki/Manniversary_Update_%26_Sale/ko" title="Manniversary Update &amp; Sale/ko">
  만념일 업데이트와 할인
 </a>
 )
</p>
<ul>
 <li>
  이름 없는 모자가 게임에 추가되었습니다.
 </li>
</ul>
<p>
 <b>
  [ahref]
  
 </b>
</p>
<ul>
 <li>
  이름 없는 모자가 스나이퍼, 데모맨, 그리고 엔지니어의 머리에도 맞도록
  [linkx]
  
  /
  [linkx]
  
  을 개선했습니다
 </li>
</ul>
<p>
 <b>
  [ahref]
  
 </b>
</p>
<ul>
 <li>
  모델/세부사항을 개선했습니다.
 </li>
</ul>
<p>
 <b>
  [ahref]
  
 </b>
 (
 <a href="/wiki/Meet_Your_Match_Update/ko" title="Meet Your Match Update/ko">
  적수를 만나다 업데이트
 </a>
 )
</p>
<ul>
 <li>
  <b>
   [언급되지 않음]
  </b>
  <a href="/wiki/Strange/ko" title="Strange/ko">
   이상한
  </a>
  품질을 추가했습니다.
 </li>
</ul>
<h2>
 <b>[mkey1][symbolx][pkeyx][symbolx][keyword1][bracketl1][keywordx][bracketr1][symbolx][bracketl2][keywordx][bracketr2][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx]</b>
</h2>
<ul>
 <li>
  이 모자의 이름은 일반적으로 서부영화에 전형적으로 쓰이는 비축 캐릭터인
  [linkx]
  
  에서 비롯되었습니다.
 </li>
 <li>
  "이름 없는 남자"의 표제는 솔저를 뜻합니다. 그가
  [ahref]
  
  에서 얻어진 이름, 제인 도우는 소송에서 누군가의 확실한 신원이 불명인 경우 (여성) 이름으로서 쓰입니다.
 </li>
</ul>
<h2>
 [mkey1][symbolx][pkeyx][symbolx][keyword1][bracketl1][keywordx][bracketr1][symbolx][bracketl2][keywordx][bracketr2][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx]
</h2>
<ul class="gallery mw-gallery-traditional" style="max-width: 489px;_width: 489px;">
 <li class="gallerybox" style="width: 155px">
  <div style="width: 155px">
   <div class="thumb" style="width: 150px;">
    <div style="margin:15px auto;">
     [ahref]
     
    </div>
   </div>
   <div class="gallerytext">
    <p>
     [linkx]
     
    </p>
   </div>
  </div>
 </li>
 <li class="gallerybox" style="width: 155px">
  <div style="width: 155px">
   <div class="thumb" style="width: 150px;">
    <div style="margin:15px auto;">
     <a class="image" href="/wiki/File:Hat_With_No_Name_Demoman.png">
     </a>
    </div>
   </div>
   <div class="gallerytext">
    <p>
     <a href="/wiki/Demoman/ko" title="Demoman/ko">
      데모맨
     </a>
    </p>
   </div>
  </div>
 </li>
 <li class="gallerybox" style="width: 155px">
  <div style="width: 155px">
   <div class="thumb" style="width: 150px;">
    <div style="margin:15px auto;">
     [linkx]
     
    </div>
   </div>
   <div class="gallerytext">
    <p>
     [linkx]
     
    </p>
   </div>
  </div>
 </li>
 <li class="gallerybox" style="width: 155px">
  <div style="width: 155px">
   <div class="thumb" style="width: 150px;">
    <div style="margin:15px auto;">
     [linkx]
     
    </div>
   </div>
   <div class="gallerytext">
    <p>
     <a href="/wiki/Sniper/ko" title="Sniper/ko">
      스나이퍼
     </a>
    </p>
   </div>
  </div>
 </li>
 <li class="gallerybox" style="width: 155px">
  <div style="width: 155px">
   <div class="thumb" style="width: 150px;">
    <div style="margin:15px auto;">
     [ahref]
     
    </div>
   </div>
   <div class="gallerytext">
    <p>
     이름 없는 모자의 Steam 창작마당 섬네일.
    </p>
   </div>
  </div>
 </li>
 <li class="gallerybox" style="width: 155px">
  <div style="width: 155px">
   <div class="thumb" style="width: 150px;">
    <div style="margin:15px auto;">
     [linkx]
     
    </div>
   </div>
   <div class="gallerytext">
    <p>
     업데이트가 더해진 이름 없는 모자의 Steam 창작마당 섬네일.
    </p>
   </div>
  </div>
 </li>
 <li class="gallerybox" style="width: 155px">
  <div style="width: 155px">
   <div class="thumb" style="width: 150px;">
    <div style="margin:15px auto;">
     [linkx]
     
    </div>
   </div>
   <div class="gallerytext">
    <p>
     [linkx]
     
     에서 보이는 이름 없는 모자.
    </p>
   </div>
  </div>
 </li>
</ul>
<div style="clear:both;">
</div>
<table cellspacing="0" class="navbox" style="border: 1px solid #AAA;;;">
 <tr>
  <td style="padding:2px;">
   <table cellspacing="0" class="nowraplinks collapsible uncollapsed" style="width:100%;background:transparent;color:inherit;;">
    <tr>
     <th class="navbox-title" colspan="2" style=";">
      <div style="float:left; width:6em;text-align:left;">
       <div class="noprint plainlinks navbar" style="background:none; padding:0; font-weight:normal;;;border:none;; font-size:xx-small;">
        [ahref]
        
        <span style="font-size:80%;">
         •
        </span>
        <a class="external text" href="/wiki/Template_talk:ManniversaryNav" rel="nofollow">
         <span style=";;border:none;" title="Discuss this template">
          d
         </span>
        </a>
        <span style="font-size:80%;">
         •
        </span>
        <a class="external text" href="/w/index.php?title=Template:ManniversaryNav&amp;action=edit" rel="nofollow">
         <span style=";;border:none;;" title="Edit this template">
          e
         </span>
        </a>
       </div>
      </div>
      <span class="" style="font-size:110%;">
       [ahref]
       
       [ahref]
       
      </span>
     </th>
    </tr>
    <tr style="height:2px;">
     <td>
     </td>
    </tr>
    <tr>
     <td class="navbox-abovebelow" colspan="2" style=";">
      <b>
       굵은
      </b>
      글씨로 적힌 아이템은
      [linkx]
      
      의 일부입니다.
     </td>
    </tr>
    <tr style="height:2px;">
     <td>
     </td>
    </tr>
    <tr>
     <td class="navbox-group" style=";;">
      <a href="/wiki/Weapons/ko" title="Weapons/ko">
       무기
      </a>
     </td>
     <td class="navbox-list navbox-odd" style="text-align:left;border-left-width:2px;border-left-style:solid;width:100%;padding:0px;;;">
      <div style="padding:0em 0.25em">
       [ahref]
       
       <b>
        [linkx]
        
       </b>
       <span style="font-weight:bold;">
        ·
       </span>
       <b>
        <a href="/wiki/Bootlegger/ko" title="Bootlegger/ko">
         밀주업자
        </a>
       </b>
       <span style="font-weight:bold;">
        ·
       </span>
       <a href="/wiki/Scout/ko" title="Scout/ko">
       </a>
       [ahref]
       
       [linkx]
       
       <a href="/wiki/Demoman/ko" title="Demoman/ko">
       </a>
       [ahref]
       
       [linkx]
       
       [ahref]
       
       [linkx]
       
      </div>
     </td>
    </tr>
    <tr style="height:2px">
     <td>
     </td>
    </tr>
    <tr>
     <td class="navbox-group" style=";;">
      [linkx]
      
     </td>
     <td class="navbox-list navbox-even" style="text-align:left;border-left-width:2px;border-left-style:solid;width:100%;padding:0px;;;">
      <div style="padding:0em 0.25em">
       [ahref]
       
       <a href="/wiki/Backwards_Ballcap/ko" title="Backwards Ballcap/ko">
        거꾸로 쓴 야구모자
       </a>
       <span style="font-weight:bold;">
        ·
       </span>
       <a href="/wiki/Hermes/ko" title="Hermes/ko">
        헤르메스
       </a>
       <span style="font-weight:bold;">
        ·
       </span>
       [ahref]
       
       <span style="font-weight:bold;">
        ·
       </span>
       [ahref]
       
       <span style="font-weight:bold;">
        ·
       </span>
       [ahref]
       
       [ahref]
       
       <span style="font-weight:bold;">
        ·
       </span>
       [linkx]
       
       <span style="font-weight:bold;">
        ·
       </span>
       [ahref]
       
       <span style="font-weight:bold;">
        ·
       </span>
       <a href="/wiki/Flamboyant_Flamenco/ko" title="Flamboyant Flamenco/ko">
        화려한 플라멩코
       </a>
       <span style="font-weight:bold;">
        ·
       </span>
       [linkx]
       
       [ahref]
       
       <span style="font-weight:bold;">
        ·
       </span>
       <b>
        [linkx]
        
       </b>
       <span style="font-weight:bold;">
        ·
       </span>
       <b>
        [linkx]
        
       </b>
       <span style="font-weight:bold;">
        ·
       </span>
       <a href="/wiki/Heavy/ko" title="Heavy/ko">
       </a>
       [ahref]
       
       <span style="font-weight:bold;">
        ·
       </span>
       [ahref]
       
       <span style="font-weight:bold;">
        ·
       </span>
       <a href="/wiki/Outdoorsman/ko" title="Outdoorsman/ko">
        바깥양반
       </a>
       <span style="font-weight:bold;">
        ·
       </span>
       [ahref]
       
       <a href="/wiki/Pencil_Pusher/ko" title="Pencil Pusher/ko">
        사무실 직원
       </a>
       <span style="font-weight:bold;">
        ·
       </span>
       [linkx]
       
       <span style="font-weight:bold;">
        ·
       </span>
       [linkx]
       
       <span style="font-weight:bold;">
        ·
       </span>
       [ahref]
       
       [linkx]
       
       <span style="font-weight:bold;">
        ·
       </span>
       [linkx]
       
       <span style="font-weight:bold;">
        ·
       </span>
       <a href="/wiki/Surgeon%27s_Stethoscope/ko" title="Surgeon's Stethoscope/ko">
        군의관의 청진기
       </a>
       <span style="font-weight:bold;">
        ·
       </span>
       [ahref]
       
       <a href="/wiki/Your_Worst_Nightmare/ko" title="Your Worst Nightmare/ko">
        끔찍한 악몽
       </a>
       <span style="font-weight:bold;">
        ·
       </span>
       [ahref]
       
       <span style="font-weight:bold;">
        ·
       </span>
       [ahref]
       
       <span style="font-weight:bold;">
        ·
       </span>
       [linkx]
       
       <a href="/wiki/Counterfeit_Billycock/ko" title="Counterfeit Billycock/ko">
        위조 중절모
       </a>
       <span style="font-weight:bold;">
        ·
       </span>
       [linkx]
       
       <span style="font-weight:bold;">
        ·
       </span>
       [ahref]
       
       <span style="font-weight:bold;">
        ·
       </span>
       [ahref]
       
       <a href="/wiki/Demoman/ko" title="Demoman/ko">
       </a>
       [ahref]
       
       [linkx]
       
       <strong class="selflink">
        이름없는 모자
       </strong>
       <span style="font-weight:bold;">
        ·
       </span>
       [linkx]
       
       [ahref]
       
       <span style="font-weight:bold;">
        ·
       </span>
       [ahref]
       
       <span style="font-weight:bold;">
        ·
       </span>
       [ahref]
       
       <span style="font-weight:bold;">
        ·
       </span>
       <a href="/wiki/Manniversary_Paper_Hat/ko" title="Manniversary Paper Hat/ko">
        만념일 종이 모자
       </a>
       <span style="font-weight:bold;">
        ·
       </span>
       <a href="/wiki/Merc%27s_Pride_Scarf/ko" title="Merc's Pride Scarf/ko">
        용병의 긍지 스카프
       </a>
       <span style="font-weight:bold;">
        ·
       </span>
       <a href="/wiki/Photo_Badge/ko" title="Photo Badge/ko">
        증명 사진
       </a>
       <span style="font-weight:bold;">
        ·
       </span>
       [linkx]
       
      </div>
     </td>
    </tr>
    <tr style="height:2px">
     <td>
     </td>
    </tr>
    <tr>
     <td class="navbox-group" style=";;">
      <a href="/wiki/Action_items/ko" title="Action items/ko">
       액션 아이템
      </a>
     </td>
     <td class="navbox-list navbox-odd" style="text-align:left;border-left-width:2px;border-left-style:solid;width:100%;padding:0px;;;">
      <div style="padding:0em 0.25em">
       <a href="/wiki/Classes/ko" title="Classes/ko">
       </a>
       [linkx]
       
       <span style="font-weight:bold;">
        ·
       </span>
       [ahref]
       
       <span style="font-weight:bold;">
        ·
       </span>
       [linkx]
       
       <span style="font-weight:bold;">
        ·
       </span>
       [ahref]
       
      </div>
     </td>
    </tr>
    <tr style="height:2px">
     <td>
     </td>
    </tr>
    <tr>
     <td class="navbox-group" style=";;">
      <a href="/wiki/Item_sets/ko" title="Item sets/ko">
       아이템 세트
      </a>
     </td>
     <td class="navbox-list navbox-even" style="text-align:left;border-left-width:2px;border-left-style:solid;width:100%;padding:0px;;;">
      <div style="padding:0em 0.25em">
       <a href="/wiki/Demoman/ko" title="Demoman/ko">
       </a>
       <a href="/wiki/Swashbuckler%27s_Swag/ko" title="Swashbuckler's Swag/ko">
        해적의 약탈품
       </a>
      </div>
     </td>
    </tr>
    <tr style="height:2px">
     <td>
     </td>
    </tr>
    <tr>
     <td class="navbox-group" style=";;">
      [linkx]
      
     </td>
     <td class="navbox-list navbox-odd" style="text-align:left;border-left-width:2px;border-left-style:solid;width:100%;padding:0px;;;">
      <div style="padding:0em 0.25em">
       [linkx]
       
      </div>
     </td>
    </tr>
    <tr style="height:2px">
     <td>
     </td>
    </tr>
    <tr>
     <td class="navbox-group" style=";;">
      기타
     </td>
     <td class="navbox-list navbox-even" style="text-align:left;border-left-width:2px;border-left-style:solid;width:100%;padding:0px;;;">
      <div style="padding:0em 0.25em">
       [ahref]
       
       <span style="font-weight:bold;">
        ·
       </span>
       [linkx]
       
      </div>
     </td>
    </tr>
   </table>
  </td>
 </tr>
</table>
<table cellspacing="0" class="navbox" style=";;">
 <tr>
  <td style="padding:2px;">
   <table cellspacing="0" class="nowraplinks collapsible collapsed" style="width:100%;background:transparent;color:inherit;;">
    <tr>
     <th class="navbox-title" colspan="2" style=";font-size: 1.025em;">
      <div style="float:left; width:6em;text-align:left;">
       <div class="noprint plainlinks navbar" style="background:none; padding:0; font-weight:normal;;font-size: 1.025em;;border:none;; font-size:xx-small;">
        <a class="external text" href="/wiki/Template:Hat_Nav" rel="nofollow">
         <span style=";font-size: 1.025em;;border:none;" title="View this template">
          v
         </span>
        </a>
        <span style="font-size:80%;">
         •
        </span>
        [ahref]
        
        <span style="font-size:80%;">
         •
        </span>
        [ahref]
        
       </div>
      </div>
      <span class="" style="font-size:110%;">
       [ahref]
       
      </span>
     </th>
    </tr>
    <tr style="height:2px;">
     <td>
     </td>
    </tr>
    <tr>
     <td class="navbox-group" style=";background: #f9d483; width: 5%; text-align: center; font-size: 105%; padding: 0.75em;;">
      [ahref]
      
      <a href="/wiki/Scout/ko" title="Scout/ko">
       스카웃
      </a>
     </td>
     <td class="navbox-list navbox-odd" style="text-align:left;border-left-width:2px;border-left-style:solid;width:100%;padding:0px;;;">
      <div style="padding:0em 0.25em">
       [linkx]
       
       <span style="font-weight:bold;">
        ·
       </span>
       <a href="/wiki/Baseball_Bill%27s_Sports_Shine/ko" title="Baseball Bill's Sports Shine/ko">
        베이스볼 빌 스포츠 샤인
       </a>
       <span style="font-weight:bold;">
        ·
       </span>
       [ahref]
       
       <span style="font-weight:bold;">
        ·
       </span>
       <a href="/wiki/Ye_Olde_Baker_Boy/ko" title="Ye Olde Baker Boy/ko">
        오래된 신문팔이 소년 모자
       </a>
       <span style="font-weight:bold;">
        ·
       </span>
       <a href="/wiki/Troublemaker%27s_Tossle_Cap/ko" title="Troublemaker's Tossle Cap/ko">
        말썽쟁이의 뜨개 모자
       </a>
       <span style="font-weight:bold;">
        ·
       </span>
       [linkx]
       
       <span style="font-weight:bold;">
        ·
       </span>
       <a href="/wiki/Bombing_Run/ko" title="Bombing Run/ko">
        폭격 항정
       </a>
       <span style="font-weight:bold;">
        ·
       </span>
       [ahref]
       
       <span style="font-weight:bold;">
        ·
       </span>
       [linkx]
       
       <span style="font-weight:bold;">
        ·
       </span>
       [linkx]
       
       <span style="font-weight:bold;">
        ·
       </span>
       [linkx]
       
       <span style="font-weight:bold;">
        ·
       </span>
       [ahref]
       
       <span style="font-weight:bold;">
        ·
       </span>
       [ahref]
       
       <span style="font-weight:bold;">
        ·
       </span>
       [ahref]
       
       <span style="font-weight:bold;">
        ·
       </span>
       [linkx]
       
       <span style="font-weight:bold;">
        ·
       </span>
       [linkx]
       
       <span style="font-weight:bold;">
        ·
       </span>
       [ahref]
       
       <span style="font-weight:bold;">
        ·
       </span>
       [ahref]
       
       <span style="font-weight:bold;">
        ·
       </span>
       [linkx]
       
       <span style="font-weight:bold;">
        ·
       </span>
       [linkx]
       
       <span style="font-weight:bold;">
        ·
       </span>
       [linkx]
       
       <span style="font-weight:bold;">
        ·
       </span>
       <a href="/wiki/Stereoscopic_Shades/ko" title="Stereoscopic Shades/ko">
        입체 안경
       </a>
       <span style="font-weight:bold;">
        ·
       </span>
       [linkx]
       
       <span style="font-weight:bold;">
        ·
       </span>
       <a href="/wiki/Futankhamun/ko" title="Futankhamun/ko">
        푸탕카멘
       </a>
       <span style="font-weight:bold;">
        ·
       </span>
       [linkx]
       
       <span style="font-weight:bold;">
        ·
       </span>
       [ahref]
       
       <span style="font-weight:bold;">
        ·
       </span>
       <a href="/wiki/Bootie_Time/ko" title="Bootie Time/ko">
        신발의 대활약
       </a>
       <span style="font-weight:bold;">
        ·
       </span>
       [ahref]
       
       <span style="font-weight:bold;">
        ·
       </span>
       [linkx]
       
       <span style="font-weight:bold;">
        ·
       </span>
       [linkx]
       
       <span style="font-weight:bold;">
        ·
       </span>
       [ahref]
       
       <span style="font-weight:bold;">
        ·
       </span>
       [ahref]
       
       <span style="font-weight:bold;">
        ·
       </span>
       <a href="/wiki/Dillinger%27s_Duffel/ko" title="Dillinger's Duffel/ko">
        딜린저의 돈가방
       </a>
       <span style="font-weight:bold;">
        ·
       </span>
       [linkx]
       
       <span style="font-weight:bold;">
        ·
       </span>
       [ahref]
       
       <span style="font-weight:bold;">
        ·
       </span>
       [linkx]
       
       <span style="font-weight:bold;">
        ·
       </span>
       [linkx]
       
       <span style="font-weight:bold;">
        ·
       </span>
       [ahref]
       
       <span style="font-weight:bold;">
        ·
       </span>
       <a href="/wiki/Crafty_Hair/ko" title="Crafty Hair/ko">
        교묘한 머리카락
       </a>
       <span style="font-weight:bold;">
        ·
       </span>
       [ahref]
       
       <span style="font-weight:bold;">
        ·
       </span>
       [ahref]
       
       <span style="font-weight:bold;">
        ·
       </span>
       [linkx]
       
       <span style="font-weight:bold;">
        ·
       </span>
       [linkx]
       
       <span style="font-weight:bold;">
        ·
       </span>
       <a href="/wiki/Digit_Divulger/ko" title="Digit Divulger/ko">
        손가락 노출 장비
       </a>
       <span style="font-weight:bold;">
        ·
       </span>
       <a href="/wiki/Flight_of_the_Monarch/ko" title="Flight of the Monarch/ko">
        군주의 비행
       </a>
       <span style="font-weight:bold;">
        ·
       </span>
       [linkx]
       
       <span style="font-weight:bold;">
        ·
       </span>
       [ahref]
       
       <span style="font-weight:bold;">
        ·
       </span>
       <a href="/wiki/Mutton_Mann/ko" title="Mutton Mann/ko">
        구레나룻만 신사
       </a>
       <span style="font-weight:bold;">
        ·
       </span>
       [ahref]
       
       <span style="font-weight:bold;">
        ·
       </span>
       <a href="/wiki/Tomb_Wrapper/ko" title="Tomb Wrapper/ko">
        툼 래퍼
       </a>
       <span style="font-weight:bold;">
        ·
       </span>
       [ahref]
       
       <span style="font-weight:bold;">
        ·
       </span>
       [ahref]
       
       <span style="font-weight:bold;">
        ·
       </span>
       <a href="/wiki/Bolt_Boy/ko" title="Bolt Boy/ko">
        번개 소년
       </a>
       <span style="font-weight:bold;">
        ·
       </span>
       <a href="/wiki/Bonk_Leadwear/ko" title="Bonk Leadwear/ko">
        봉크 납장식
       </a>
       <span style="font-weight:bold;">
        ·
       </span>
       [ahref]
       
       <span style="font-weight:bold;">
        ·
       </span>
       <a href="/wiki/Bacteria_Blocker/ko" title="Bacteria Blocker/ko">
        세균 차단기
       </a>
       <span style="font-weight:bold;">
        ·
       </span>
       <a href="/wiki/Beastly_Bonnet/ko" title="Beastly Bonnet/ko">
        짐승같은 보닛
       </a>
       <span style="font-weight:bold;">
        ·
       </span>
       [ahref]
       
       <span style="font-weight:bold;">
        ·
       </span>
       <a href="/wiki/Bigg_Mann_on_Campus/ko" title="Bigg Mann on Campus/ko">
        대학교 교정의 인 기남 씨
       </a>
       <span style="font-weight:bold;">
        ·
       </span>
       [linkx]
       
       <span style="font-weight:bold;">
        ·
       </span>
       [linkx]
       
       <span style="font-weight:bold;">
        ·
       </span>
       [linkx]
       
       <span style="font-weight:bold;">
        ·
       </span>
       [ahref]
       
       <span style="font-weight:bold;">
        ·
       </span>
       [ahref]
       
       <span style="font-weight:bold;">
        ·
       </span>
       [linkx]
       
       <span style="font-weight:bold;">
        ·
       </span>
       [linkx]
       
       <span style="font-weight:bold;">
        ·
       </span>
       [linkx]
       
       <span style="font-weight:bold;">
        ·
       </span>
       [linkx]
       
       <span style="font-weight:bold;">
        ·
       </span>
       <a href="/wiki/Frenchman%27s_Formals/ko" title="Frenchman's Formals/ko">
        프랑스인의 복식
       </a>
       <span style="font-weight:bold;">
        ·
       </span>
       [ahref]
       
       <span style="font-weight:bold;">
        ·
       </span>
       [ahref]
       
       <span style="font-weight:bold;">
        ·
       </span>
       [ahref]
       
       <span style="font-weight:bold;">
        ·
       </span>
       <a href="/wiki/Horrific_Head_of_Hare/ko" title="Horrific Head of Hare/ko">
        보기만 해도 토끼고 싶은 토끼의 대가리
       </a>
       <span style="font-weight:bold;">
        ·
       </span>
       <a href="/wiki/Hound%27s_Hood/ko" title="Hound's Hood/ko">
        사냥개의 후드
       </a>
       <span style="font-weight:bold;">
        ·
       </span>
       [linkx]
       
       <span style="font-weight:bold;">
        ·
       </span>
       [ahref]
       
       <span style="font-weight:bold;">
        ·
       </span>
       <a href="/wiki/Baphomet_Trotters/ko" title="Baphomet Trotters/ko">
        바포메트의 날랜 발
       </a>
       <span style="font-weight:bold;">
        ·
       </span>
       [ahref]
       
       <span style="font-weight:bold;">
        ·
       </span>
       <a href="/wiki/Chucklenuts/ko" title="Chucklenuts/ko">
        쪼개는 다람쥐
       </a>
       <span style="font-weight:bold;">
        ·
       </span>
       [linkx]
       
       <span style="font-weight:bold;">
        ·
       </span>
       <a href="/wiki/Runner%27s_Warm-Up/ko" title="Runner's Warm-Up/ko">
        주자의 예열 운동
       </a>
       <span style="font-weight:bold;">
        ·
       </span>
       [linkx]
       
       <span style="font-weight:bold;">
        ·
       </span>
       [ahref]
       
       <span style="font-weight:bold;">
        ·
       </span>
       <a href="/wiki/Ticket_Boy/ko" title="Ticket Boy/ko">
        매표 소년
       </a>
       <span style="font-weight:bold;">
        ·
       </span>
       [linkx]
       
       <span style="font-weight:bold;">
        ·
       </span>
       [ahref]
       
       <span style="font-weight:bold;">
        ·
       </span>
       [linkx]
       
       <span style="font-weight:bold;">
        ·
       </span>
       [ahref]
       
       <span style="font-weight:bold;">
        ·
       </span>
       [linkx]
       
       <span style="font-weight:bold;">
        ·
       </span>
       [ahref]
       
       <span style="font-weight:bold;">
        ·
       </span>
       [linkx]
       
       <span style="font-weight:bold;">
        ·
       </span>
       [ahref]
       
       <span style="font-weight:bold;">
        ·
       </span>
       <a href="/wiki/Xeno_Suit/ko" title="Xeno Suit/ko">
        외계 생물복
       </a>
       <span style="font-weight:bold;">
        ·
       </span>
       <a href="/wiki/Thirst_Blood/ko" title="Thirst Blood/ko">
        갈취점
       </a>
       <span style="font-weight:bold;">
        ·
       </span>
       [ahref]
       
       <span style="font-weight:bold;">
        ·
       </span>
       [ahref]
       
       <span style="font-weight:bold;">
        ·
       </span>
       [linkx]
       
       <span style="font-weight:bold;">
        ·
       </span>
       [linkx]
       
       <span style="font-weight:bold;">
        ·
       </span>
       [ahref]
       
       <span style="font-weight:bold;">
        ·
       </span>
       [ahref]
       
       <span style="font-weight:bold;">
        ·
       </span>
       [linkx]
       
       <span style="font-weight:bold;">
        ·
       </span>
       [ahref]
       
       <span style="font-weight:bold;">
        ·
       </span>
       [ahref]
       
       <span style="font-weight:bold;">
        ·
       </span>
       [linkx]
       
       <span style="font-weight:bold;">
        ·
       </span>
       <a href="/wiki/Mountebank%27s_Masque/ko" title="Mountebank's Masque/ko">
        기만자의 가면
       </a>
       <span style="font-weight:bold;">
        ·
       </span>
       [linkx]
       
       <span style="font-weight:bold;">
        ·
       </span>
       [ahref]
       
       <span style="font-weight:bold;">
        ·
       </span>
       [ahref]
       
       <span style="font-weight:bold;">
        ·
       </span>
       <a href="/wiki/Fortunate_Son/ko" title="Fortunate Son/ko">
        신의 아들
       </a>
       <span style="font-weight:bold;">
        ·
       </span>
       <a href="/wiki/Cadet_Visor/ko" title="Cadet Visor/ko">
        생도 차광경
       </a>
       <span style="font-weight:bold;">
        ·
       </span>
       <a href="/wiki/B%27aaarrgh-n-Bicorne/ko" title="B'aaarrgh-n-Bicorne/ko">
        안 비싸아아안 이각모
       </a>
       <span style="font-weight:bold;">
        ·
       </span>
       <a href="/wiki/B%27aaarrgh-n-Britches/ko" title="B'aaarrgh-n-Britches/ko">
        비싸아아안 반바지
       </a>
       <span style="font-weight:bold;">
        ·
       </span>
       [linkx]
       
       <span style="font-weight:bold;">
        ·
       </span>
       [linkx]
       
       <span style="font-weight:bold;">
        ·
       </span>
       [ahref]
       
       <span style="font-weight:bold;">
        ·
       </span>
       [linkx]
       
       <span style="font-weight:bold;">
        ·
       </span>
       [linkx]
       
       <span style="font-weight:bold;">
        ·
       </span>
       [linkx]
       
       <span style="font-weight:bold;">
        ·
       </span>
       [ahref]
       
       <span style="font-weight:bold;">
        ·
       </span>
       [ahref]
       
       <span style="font-weight:bold;">
        ·
       </span>
       [linkx]
       
       <span style="font-weight:bold;">
        ·
       </span>
       [linkx]
       
       <span style="font-weight:bold;">
        ·
       </span>
       <a href="/wiki/Courtly_Cuirass/ko" title="Courtly Cuirass/ko">
        격식 있는 견갑
       </a>
       <span style="font-weight:bold;">
        ·
       </span>
       [linkx]
       
       <span style="font-weight:bold;">
        ·
       </span>
       [ahref]
       
       <span style="font-weight:bold;">
        ·
       </span>
       [linkx]
       
       <span style="font-weight:bold;">
        ·
       </span>
       [ahref]
       
       <span style="font-weight:bold;">
        ·
       </span>
       [linkx]
       
       <span style="font-weight:bold;">
        ·
       </span>
       [linkx]
       
       <span style="font-weight:bold;">
        ·
       </span>
       [linkx]
       
       <span style="font-weight:bold;">
        ·
       </span>
       [ahref]
       
       <span style="font-weight:bold;">
        ·
       </span>
       [ahref]
       
       <span style="font-weight:bold;">
        ·
       </span>
       [ahref]
       
       <span style="font-weight:bold;">
        ·
       </span>
       <a href="/wiki/Pocket_Pauling/ko" title="Pocket Pauling/ko">
        호주머니 폴링
       </a>
       <span style="font-weight:bold;">
        ·
       </span>
       [ahref]
       
       <span style="font-weight:bold;">
        ·
       </span>
       [linkx]
       
       <span style="font-weight:bold;">
        ·
       </span>
       <a href="/wiki/Forest_Footwear/ko" title="Forest Footwear/ko">
        숲 신발
       </a>
       <span style="font-weight:bold;">
        ·
       </span>
       [linkx]
       
       <span style="font-weight:bold;">
        ·
       </span>
       [linkx]
       
       <span style="font-weight:bold;">
        ·
       </span>
       [ahref]
       
       <span style="font-weight:bold;">
        ·
       </span>
       [linkx]
       
       <span style="font-weight:bold;">
        ·
       </span>
       [linkx]
       
       <span style="font-weight:bold;">
        ·
       </span>
       [linkx]
       
       <span style="font-weight:bold;">
        ·
       </span>
       [ahref]
       
       <span style="font-weight:bold;">
        ·
       </span>
       <a href="/wiki/Athenian_Attire/ko" title="Athenian Attire/ko">
        Athenian Attire
       </a>
       <span style="font-weight:bold;">
        ·
       </span>
       [ahref]
       
       <span style="font-weight:bold;">
        ·
       </span>
       [linkx]
       
       <span style="font-weight:bold;">
        ·
       </span>
       [ahref]
       
       <span style="font-weight:bold;">
        ·
       </span>
       [linkx]
       
       <span style="font-weight:bold;">
        ·
       </span>
       [ahref]
       
      </div>
     </td>
    </tr>
    <tr style="height:2px">
     <td>
     </td>
    </tr>
    <tr>
     <td class="navbox-group" style=";background: #f9d483; width: 5%; text-align: center; font-size: 105%; padding: 0.75em;;">
      [linkx]
      
      [linkx]
      
     </td>
     <td class="navbox-list navbox-even" style="text-align:left;border-left-width:2px;border-left-style:solid;width:100%;padding:0px;;;">
      <div style="padding:0em 0.25em">
       [ahref]
       
       <span style="font-weight:bold;">
        ·
       </span>
       <a href="/wiki/Gentle_Manne%27s_Service_Medal/ko" title="Gentle Manne's Service Medal/ko">
        젠틀 만의 봉사 증명 훈장
       </a>
       <span style="font-weight:bold;">
        ·
       </span>
       [linkx]
       
       <span style="font-weight:bold;">
        ·
       </span>
       [linkx]
       
       <span style="font-weight:bold;">
        ·
       </span>
       [linkx]
       
       <span style="font-weight:bold;">
        ·
       </span>
       <a href="/wiki/Sergeant%27s_Drill_Hat/ko" title="Sergeant's Drill Hat/ko">
        상사의 훈련모
       </a>
       <span style="font-weight:bold;">
        ·
       </span>
       [ahref]
       
       <span style="font-weight:bold;">
        ·
       </span>
       [ahref]
       
       <span style="font-weight:bold;">
        ·
       </span>
       [ahref]
       
       <span style="font-weight:bold;">
        ·
       </span>
       <a href="/wiki/Grenadier%27s_Softcap/ko" title="Grenadier's Softcap/ko">
        근위 보병의 사냥 모자
       </a>
       <span style="font-weight:bold;">
        ·
       </span>
       [ahref]
       
       <span style="font-weight:bold;">
        ·
       </span>
       [ahref]
       
       <span style="font-weight:bold;">
        ·
       </span>
       [ahref]
       
       <span style="font-weight:bold;">
        ·
       </span>
       [ahref]
       
       <span style="font-weight:bold;">
        ·
       </span>
       [ahref]
       
       <span style="font-weight:bold;">
        ·
       </span>
       [ahref]
       
       <span style="font-weight:bold;">
        ·
       </span>
       [linkx]
       
       <span style="font-weight:bold;">
        ·
       </span>
       [linkx]
       
       <span style="font-weight:bold;">
        ·
       </span>
       <a href="/wiki/Fancy_Dress_Uniform/ko" title="Fancy Dress Uniform/ko">
        세련된 장교용 무도회복
       </a>
       <span style="font-weight:bold;">
        ·
       </span>
       [linkx]
       
       <span style="font-weight:bold;">
        ·
       </span>
       [linkx]
       
       <span style="font-weight:bold;">
        ·
       </span>
       <a href="/wiki/Lord_Cockswain%27s_Novelty_Mutton_Chops_and_Pipe/ko" title="Lord Cockswain's Novelty Mutton Chops and Pipe/ko">
        콕스웨인 경의 놀라운 파이프 담배와 구레나룻
       </a>
       <span style="font-weight:bold;">
        ·
       </span>
       [ahref]
       
       <span style="font-weight:bold;">
        ·
       </span>
       [ahref]
       
       <span style="font-weight:bold;">
        ·
       </span>
       <strong class="selflink">
        이름없는 모자
       </strong>
       <span style="font-weight:bold;">
        ·
       </span>
       [linkx]
       
       <span style="font-weight:bold;">
        ·
       </span>
       [ahref]
       
       <span style="font-weight:bold;">
        ·
       </span>
       <a href="/wiki/Shoestring_Budget/ko" title="Shoestring Budget/ko">
        저예산 신발
       </a>
       <span style="font-weight:bold;">
        ·
       </span>
       [ahref]
       
       <span style="font-weight:bold;">
        ·
       </span>
       [linkx]
       
       <span style="font-weight:bold;">
        ·
       </span>
       <a href="/wiki/All-Father/ko" title="All-Father/ko">
        만물의 아버지
       </a>
       <span style="font-weight:bold;">
        ·
       </span>
       [linkx]
       
       <span style="font-weight:bold;">
        ·
       </span>
       [linkx]
       
       <span style="font-weight:bold;">
        ·
       </span>
       [ahref]
       
       <span style="font-weight:bold;">
        ·
       </span>
       [ahref]
       
       <span style="font-weight:bold;">
        ·
       </span>
       [linkx]
       
       <span style="font-weight:bold;">
        ·
       </span>
       [ahref]
       
       <span style="font-weight:bold;">
        ·
       </span>
       [linkx]
       
       <span style="font-weight:bold;">
        ·
       </span>
       [linkx]
       
       <span style="font-weight:bold;">
        ·
       </span>
       [linkx]
       
       <span style="font-weight:bold;">
        ·
       </span>
       [linkx]
       
       <span style="font-weight:bold;">
        ·
       </span>
       [linkx]
       
       <span style="font-weight:bold;">
        ·
       </span>
       [linkx]
       
       <span style="font-weight:bold;">
        ·
       </span>
       <a href="/wiki/War_Pig/ko" title="War Pig/ko">
        전쟁광
       </a>
       <span style="font-weight:bold;">
        ·
       </span>
       [linkx]
       
       <span style="font-weight:bold;">
        ·
       </span>
       [ahref]
       
       <span style="font-weight:bold;">
        ·
       </span>
       [linkx]
       
       <span style="font-weight:bold;">
        ·
       </span>
       [linkx]
       
       <span style="font-weight:bold;">
        ·
       </span>
       [linkx]
       
       <span style="font-weight:bold;">
        ·
       </span>
       [linkx]
       
       <span style="font-weight:bold;">
        ·
       </span>
       [linkx]
       
       <span style="font-weight:bold;">
        ·
       </span>
       [linkx]
       
       <span style="font-weight:bold;">
        ·
       </span>
       [ahref]
       
       <span style="font-weight:bold;">
        ·
       </span>
       [ahref]
       
       <span style="font-weight:bold;">
        ·
       </span>
       [ahref]
       
       <span style="font-weight:bold;">
        ·
       </span>
       [linkx]
       
       <span style="font-weight:bold;">
        ·
       </span>
       [linkx]
       
       <span style="font-weight:bold;">
        ·
       </span>
       [linkx]
       
       <span style="font-weight:bold;">
        ·
       </span>
       [linkx]
       
       <span style="font-weight:bold;">
        ·
       </span>
       <a href="/wiki/Powdered_Practitioner/ko" title="Powdered Practitioner/ko">
        전분 뿌린 전문직 종사자
       </a>
       <span style="font-weight:bold;">
        ·
       </span>
       <a href="/wiki/Brawling_Buccaneer/ko" title="Brawling Buccaneer/ko">
        쌈박질 해적
       </a>
       <span style="font-weight:bold;">
        ·
       </span>
       [linkx]
       
       <span style="font-weight:bold;">
        ·
       </span>
       [linkx]
       
       <span style="font-weight:bold;">
        ·
       </span>
       [ahref]
       
       <span style="font-weight:bold;">
        ·
       </span>
       <a href="/wiki/Founding_Father/ko" title="Founding Father/ko">
        헌법 제정자
       </a>
       <span style="font-weight:bold;">
        ·
       </span>
       <a href="/wiki/Hornblower/ko" title="Hornblower/ko">
        나팔수 넬슨
       </a>
       <span style="font-weight:bold;">
        ·
       </span>
       <a href="/wiki/Lieutenant_Bites/ko" title="Lieutenant Bites/ko">
        깨물이 중위
       </a>
       <span style="font-weight:bold;">
        ·
       </span>
       [ahref]
       
       <span style="font-weight:bold;">
        ·
       </span>
       <a href="/wiki/Shogun%27s_Shoulder_Guard/ko" title="Shogun's Shoulder Guard/ko">
        쇼군의 어깨 보호대
       </a>
       <span style="font-weight:bold;">
        ·
       </span>
       <a href="/wiki/Valley_Forge/ko" title="Valley Forge/ko">
        밸리 포지
       </a>
       <span style="font-weight:bold;">
        ·
       </span>
       <a href="/wiki/Whirly_Warrior/ko" title="Whirly Warrior/ko">
        회전하는 전사
       </a>
       <span style="font-weight:bold;">
        ·
       </span>
       <a href="/wiki/Macho_Mann/ko" title="Macho Mann/ko">
        마초 만
       </a>
       <span style="font-weight:bold;">
        ·
       </span>
       [ahref]
       
       <span style="font-weight:bold;">
        ·
       </span>
       [ahref]
       
       <span style="font-weight:bold;">
        ·
       </span>
       [ahref]
       
       <span style="font-weight:bold;">
        ·
       </span>
       [linkx]
       
       <span style="font-weight:bold;">
        ·
       </span>
       [linkx]
       
       <span style="font-weight:bold;">
        ·
       </span>
       [ahref]
       
       <span style="font-weight:bold;">
        ·
       </span>
       <a href="/wiki/Hardium_Helm/ko" title="Hardium Helm/ko">
        튼트늄 투구
       </a>
       <span style="font-weight:bold;">
        ·
       </span>
       [linkx]
       
       <span style="font-weight:bold;">
        ·
       </span>
       [ahref]
       
       <span style="font-weight:bold;">
        ·
       </span>
       [linkx]
       
       <span style="font-weight:bold;">
        ·
       </span>
       [linkx]
       
       <span style="font-weight:bold;">
        ·
       </span>
       [linkx]
       
       <span style="font-weight:bold;">
        ·
       </span>
       [linkx]
       
       <span style="font-weight:bold;">
        ·
       </span>
       [linkx]
       
       <span style="font-weight:bold;">
        ·
       </span>
       [linkx]
       
       <span style="font-weight:bold;">
        ·
       </span>
       [linkx]
       
       <span style="font-weight:bold;">
        ·
       </span>
       [linkx]
       
       <span style="font-weight:bold;">
        ·
       </span>
       [ahref]
       
       <span style="font-weight:bold;">
        ·
       </span>
       [ahref]
       
       <span style="font-weight:bold;">
        ·
       </span>
       <a href="/wiki/Marshall%27s_Mutton_Chops/ko" title="Marshall's Mutton Chops/ko">
        연방 보안관의 구레나룻
       </a>
       <span style="font-weight:bold;">
        ·
       </span>
       <a href="/wiki/Slo-Poke/ko" title="Slo-Poke/ko">
        군벵이
       </a>
       <span style="font-weight:bold;">
        ·
       </span>
       [linkx]
       
       <span style="font-weight:bold;">
        ·
       </span>
       <a href="/wiki/Ground_Control/ko" title="Ground Control/ko">
        지상 관제
       </a>
       <span style="font-weight:bold;">
        ·
       </span>
       <a href="/wiki/Killer%27s_Kit/ko" title="Killer's Kit/ko">
        죽이는 자의 장비
       </a>
       <span style="font-weight:bold;">
        ·
       </span>
       [linkx]
       
       <span style="font-weight:bold;">
        ·
       </span>
       [linkx]
       
       <span style="font-weight:bold;">
        ·
       </span>
       <a href="/wiki/Gilded_Guard/ko" title="Gilded Guard/ko">
        호화로운 호위병
       </a>
       <span style="font-weight:bold;">
        ·
       </span>
       [linkx]
       
       <span style="font-weight:bold;">
        ·
       </span>
       <a href="/wiki/Man_in_Slacks/ko" title="Man in Slacks/ko">
        맨 인 슬랙
       </a>
       <span style="font-weight:bold;">
        ·
       </span>
       [linkx]
       
       <span style="font-weight:bold;">
        ·
       </span>
       <a href="/wiki/Lone_Survivor/ko" title="Lone Survivor/ko">
        유일한 생존자
       </a>
       <span style="font-weight:bold;">
        ·
       </span>
       [linkx]
       
       <span style="font-weight:bold;">
        ·
       </span>
       [linkx]
       
       <span style="font-weight:bold;">
        ·
       </span>
       [ahref]
       
       <span style="font-weight:bold;">
        ·
       </span>
       [ahref]
       
       <span style="font-weight:bold;">
        ·
       </span>
       [linkx]
       
       <span style="font-weight:bold;">
        ·
       </span>
       [linkx]
       
       <span style="font-weight:bold;">
        ·
       </span>
       <a href="/wiki/Mistaken_Movember/ko" title="Mistaken Movember/ko">
        사나이용 '실수'염
       </a>
       <span style="font-weight:bold;">
        ·
       </span>
       [ahref]
       
       <span style="font-weight:bold;">
        ·
       </span>
       <a href="/wiki/Cold_Snap_Coat/ko" title="Cold Snap Coat/ko">
        한파 외투
       </a>
       <span style="font-weight:bold;">
        ·
       </span>
       [linkx]
       
       <span style="font-weight:bold;">
        ·
       </span>
       <a href="/wiki/Hellmet/ko" title="Hellmet/ko">
        지옥방탄모
       </a>
       <span style="font-weight:bold;">
        ·
       </span>
       [ahref]
       
       <span style="font-weight:bold;">
        ·
       </span>
       [linkx]
       
       <span style="font-weight:bold;">
        ·
       </span>
       [ahref]
       
       <span style="font-weight:bold;">
        ·
       </span>
       [ahref]
       
       <span style="font-weight:bold;">
        ·
       </span>
       <a href="/wiki/Gift_Bringer/ko" title="Gift Bringer/ko">
        선물의 사도
       </a>
       <span style="font-weight:bold;">
        ·
       </span>
       [ahref]
       
       <span style="font-weight:bold;">
        ·
       </span>
       [linkx]
       
       <span style="font-weight:bold;">
        ·
       </span>
       [linkx]
       
       <span style="font-weight:bold;">
        ·
       </span>
       <a href="/wiki/Handy_Canes/ko" title="Handy Canes/ko">
        Handy Canes
       </a>
       <span style="font-weight:bold;">
        ·
       </span>
       [linkx]
       
       <span style="font-weight:bold;">
        ·
       </span>
       <a href="/wiki/Flakcatcher/ko" title="Flakcatcher/ko">
        Flakcatcher
       </a>
       <span style="font-weight:bold;">
        ·
       </span>
       [linkx]
       
       <span style="font-weight:bold;">
        ·
       </span>
       [ahref]
       
       <span style="font-weight:bold;">
        ·
       </span>
       [linkx]
       
       <span style="font-weight:bold;">
        ·
       </span>
       <a href="/wiki/Nuke/ko" title="Nuke/ko">
        Nuke
       </a>
       <span style="font-weight:bold;">
        ·
       </span>
       <a href="/wiki/Sharp_Chest_Pain/ko" title="Sharp Chest Pain/ko">
        날카로운 가슴 통증
       </a>
       <span style="font-weight:bold;">
        ·
       </span>
       [linkx]
       
       <span style="font-weight:bold;">
        ·
       </span>
       [ahref]
       
       <span style="font-weight:bold;">
        ·
       </span>
       [linkx]
       
       <span style="font-weight:bold;">
        ·
       </span>
       <a href="/wiki/Sky_High_Fly_Guy/ko" title="Sky High Fly Guy/ko">
        Sky High Fly Guy
       </a>
       <span style="font-weight:bold;">
        ·
       </span>
       <a href="/wiki/Veterans_Attire/ko" title="Veterans Attire/ko">
        노병의 복장
       </a>
       <span style="font-weight:bold;">
        ·
       </span>
       <a href="/wiki/Private_Maggot_Muncher/ko" title="Private Maggot Muncher/ko">
        Private Maggot Muncher
       </a>
       <span style="font-weight:bold;">
        ·
       </span>
       [linkx]
       
       <span style="font-weight:bold;">
        ·
       </span>
       [linkx]
       
       <span style="font-weight:bold;">
        ·
       </span>
       [ahref]
       
       <span style="font-weight:bold;">
        ·
       </span>
       <a class="new" href="/w/index.php?title=Climbing_Commander/ko&amp;action=edit&amp;redlink=1" title="Climbing Commander/ko (page does not exist)">
        Climbing Commander
       </a>
       <span style="font-weight:bold;">
        ·
       </span>
       <a class="new" href="/w/index.php?title=Crack_Pot/ko&amp;action=edit&amp;redlink=1" title="Crack Pot/ko (page does not exist)">
        Crack Pot
       </a>
       <span style="font-weight:bold;">
        ·
       </span>
       [ahref]
       
      </div>
     </td>
    </tr>
    <tr style="height:2px">
     <td>
     </td>
    </tr>
    <tr>
     <td class="navbox-group" style=";background: #f9d483; width: 5%; text-align: center; font-size: 105%; padding: 0.75em;;">
      [ahref]
      
      <a href="/wiki/Pyro/ko" title="Pyro/ko">
       파이로
      </a>
     </td>
     <td class="navbox-list navbox-odd" style="text-align:left;border-left-width:2px;border-left-style:solid;width:100%;padding:0px;;;">
      <div style="padding:0em 0.25em">
       [linkx]
       
       <span style="font-weight:bold;">
        ·
       </span>
       <a href="/wiki/Brigade_Helm/ko" title="Brigade Helm/ko">
        소방 헬멧
       </a>
       <span style="font-weight:bold;">
        ·
       </span>
       [linkx]
       
       <span style="font-weight:bold;">
        ·
       </span>
       <a href="/wiki/Triboniophorus_Tyrannus/ko" title="Triboniophorus Tyrannus/ko">
        폭군 민달팽이
       </a>
       <span style="font-weight:bold;">
        ·
       </span>
       [ahref]
       
       <span style="font-weight:bold;">
        ·
       </span>
       [ahref]
       
       <span style="font-weight:bold;">
        ·
       </span>
       [linkx]
       
       <span style="font-weight:bold;">
        ·
       </span>
       [linkx]
       
       <span style="font-weight:bold;">
        ·
       </span>
       [linkx]
       
       <span style="font-weight:bold;">
        ·
       </span>
       [ahref]
       
       <span style="font-weight:bold;">
        ·
       </span>
       <a href="/wiki/Foster%27s_Facade/ko" title="Foster's Facade/ko">
        포스터의 가면
       </a>
       <span style="font-weight:bold;">
        ·
       </span>
       <a href="/wiki/Stockbroker%27s_Scarf/ko" title="Stockbroker's Scarf/ko">
        투자 전문가의 넥타이
       </a>
       <span style="font-weight:bold;">
        ·
       </span>
       <a href="/wiki/Prancer%27s_Pride/ko" title="Prancer's Pride/ko">
        프랜서의 자존심
       </a>
       <span style="font-weight:bold;">
        ·
       </span>
       [linkx]
       
       <span style="font-weight:bold;">
        ·
       </span>
       <a href="/wiki/Pyromancer%27s_Mask/ko" title="Pyromancer's Mask/ko">
        화염술사의 가면
       </a>
       <span style="font-weight:bold;">
        ·
       </span>
       <a href="/wiki/Sight_for_Sore_Eyes/ko" title="Sight for Sore Eyes/ko">
        따가운 눈총
       </a>
       <span style="font-weight:bold;">
        ·
       </span>
       <a href="/wiki/Dead_Cone/ko" title="Dead Cone/ko">
        죽음의 콘
       </a>
       <span style="font-weight:bold;">
        ·
       </span>
       <a href="/wiki/Connoisseur%27s_Cap/ko" title="Connoisseur's Cap/ko">
        감정사의 모자
       </a>
       <span style="font-weight:bold;">
        ·
       </span>
       [ahref]
       
       <span style="font-weight:bold;">
        ·
       </span>
       [linkx]
       
       <span style="font-weight:bold;">
        ·
       </span>
       [ahref]
       
       <span style="font-weight:bold;">
        ·
       </span>
       [linkx]
       
       <span style="font-weight:bold;">
        ·
       </span>
       [linkx]
       
       <span style="font-weight:bold;">
        ·
       </span>
       [ahref]
       
       <span style="font-weight:bold;">
        ·
       </span>
       [ahref]
       
       <span style="font-weight:bold;">
        ·
       </span>
       [ahref]
       
       <span style="font-weight:bold;">
        ·
       </span>
       <a href="/wiki/Fallen_Angel/ko" title="Fallen Angel/ko">
        타락한 천사
       </a>
       <span style="font-weight:bold;">
        ·
       </span>
       <a href="/wiki/Last_Breath/ko" title="Last Breath/ko">
        최후의 호흡
       </a>
       <span style="font-weight:bold;">
        ·
       </span>
       [linkx]
       
       <span style="font-weight:bold;">
        ·
       </span>
       <a href="/wiki/Bubble_Pipe/ko" title="Bubble Pipe/ko">
        방울 담뱃대
       </a>
       <span style="font-weight:bold;">
        ·
       </span>
       <a href="/wiki/Head_Warmer/ko" title="Head Warmer/ko">
        머리 방한구
       </a>
       <span style="font-weight:bold;">
        ·
       </span>
       [linkx]
       
       <span style="font-weight:bold;">
        ·
       </span>
       [linkx]
       
       <span style="font-weight:bold;">
        ·
       </span>
       [linkx]
       
       <span style="font-weight:bold;">
        ·
       </span>
       [ahref]
       
       <span style="font-weight:bold;">
        ·
       </span>
       <a href="/wiki/Scrap_Pack/ko" title="Scrap Pack/ko">
        고물 상자
       </a>
       <span style="font-weight:bold;">
        ·
       </span>
       [linkx]
       
       <span style="font-weight:bold;">
        ·
       </span>
       [linkx]
       
       <span style="font-weight:bold;">
        ·
       </span>
       <a href="/wiki/Burning_Bongos/ko" title="Burning Bongos/ko">
        타오르는 봉고
       </a>
       <span style="font-weight:bold;">
        ·
       </span>
       [ahref]
       
       <span style="font-weight:bold;">
        ·
       </span>
       [linkx]
       
       <span style="font-weight:bold;">
        ·
       </span>
       [linkx]
       
       <span style="font-weight:bold;">
        ·
       </span>
       [ahref]
       
       <span style="font-weight:bold;">
        ·
       </span>
       <a href="/wiki/Pyrobotics_Pack/ko" title="Pyrobotics Pack/ko">
        파이로봇화 배낭
       </a>
       <span style="font-weight:bold;">
        ·
       </span>
       [linkx]
       
       <span style="font-weight:bold;">
        ·
       </span>
       [linkx]
       
       <span style="font-weight:bold;">
        ·
       </span>
       [linkx]
       
       <span style="font-weight:bold;">
        ·
       </span>
       [ahref]
       
       <span style="font-weight:bold;">
        ·
       </span>
       <a href="/wiki/Voodoo-Cursed_Pyro_Soul/ko" title="Voodoo-Cursed Pyro Soul/ko">
        부두교의 저주를 받은 파이로의 영혼
       </a>
       <span style="font-weight:bold;">
        ·
       </span>
       [ahref]
       
       <span style="font-weight:bold;">
        ·
       </span>
       [linkx]
       
       <span style="font-weight:bold;">
        ·
       </span>
       [linkx]
       
       <span style="font-weight:bold;">
        ·
       </span>
       <a href="/wiki/Deadliest_Duckling/ko" title="Deadliest Duckling/ko">
        악랄한 오리 새끼
       </a>
       <span style="font-weight:bold;">
        ·
       </span>
       [ahref]
       
       <span style="font-weight:bold;">
        ·
       </span>
       [linkx]
       
       <span style="font-weight:bold;">
        ·
       </span>
       <a href="/wiki/Rail_Spikes/ko" title="Rail Spikes/ko">
        철도못걸이
       </a>
       <span style="font-weight:bold;">
        ·
       </span>
       [linkx]
       
       <span style="font-weight:bold;">
        ·
       </span>
       [ahref]
       
       <span style="font-weight:bold;">
        ·
       </span>
       [ahref]
       
       <span style="font-weight:bold;">
        ·
       </span>
       <a href="/wiki/Bolted_Birdcage/ko" title="Bolted Birdcage/ko">
        나사못 박힌 새장
       </a>
       <span style="font-weight:bold;">
        ·
       </span>
       [ahref]
       
       <span style="font-weight:bold;">
        ·
       </span>
       [ahref]
       
       <span style="font-weight:bold;">
        ·
       </span>
       [ahref]
       
       <span style="font-weight:bold;">
        ·
       </span>
       [ahref]
       
       <span style="font-weight:bold;">
        ·
       </span>
       <a href="/wiki/Metal_Slug/ko" title="Metal Slug/ko">
        메탈 슬러그
       </a>
       <span style="font-weight:bold;">
        ·
       </span>
       [ahref]
       
       <span style="font-weight:bold;">
        ·
       </span>
       <a href="/wiki/Pyro%27s_Boron_Beanie/ko" title="Pyro's Boron Beanie/ko">
        파이로의 붕소 비니
       </a>
       <span style="font-weight:bold;">
        ·
       </span>
       [ahref]
       
       <span style="font-weight:bold;">
        ·
       </span>
       [linkx]
       
       <span style="font-weight:bold;">
        ·
       </span>
       [linkx]
       
       <span style="font-weight:bold;">
        ·
       </span>
       <a href="/wiki/Breather_Bag/ko" title="Breather Bag/ko">
        호흡용 봉투
       </a>
       <span style="font-weight:bold;">
        ·
       </span>
       <a href="/wiki/Mair_Mask/ko" title="Mair Mask/ko">
        만공기 호흡 장치
       </a>
       <span style="font-weight:bold;">
        ·
       </span>
       <a href="/wiki/Centurion/ko" title="Centurion/ko">
        백부장
       </a>
       <span style="font-weight:bold;">
        ·
       </span>
       <a href="/wiki/Steel_Sixpack/ko" title="Steel Sixpack/ko">
        강철 복근
       </a>
       <span style="font-weight:bold;">
        ·
       </span>
       <a href="/wiki/Backpack_Broiler/ko" title="Backpack Broiler/ko">
        배낭형 브로일러
       </a>
       <span style="font-weight:bold;">
        ·
       </span>
       [ahref]
       
       <span style="font-weight:bold;">
        ·
       </span>
       [ahref]
       
       <span style="font-weight:bold;">
        ·
       </span>
       [linkx]
       
       <span style="font-weight:bold;">
        ·
       </span>
       <a href="/wiki/Pampered_Pyro/ko" title="Pampered Pyro/ko">
        응석받이 파이로
       </a>
       <span style="font-weight:bold;">
        ·
       </span>
       [linkx]
       
       <span style="font-weight:bold;">
        ·
       </span>
       [linkx]
       
       <span style="font-weight:bold;">
        ·
       </span>
       [ahref]
       
       <span style="font-weight:bold;">
        ·
       </span>
       <a href="/wiki/Bone_Dome/ko" title="Bone Dome/ko">
        비행용 골통
       </a>
       <span style="font-weight:bold;">
        ·
       </span>
       [ahref]
       
       <span style="font-weight:bold;">
        ·
       </span>
       <a href="/wiki/Special_Eyes/ko" title="Special Eyes/ko">
        특별한 눈
       </a>
       <span style="font-weight:bold;">
        ·
       </span>
       <a href="/wiki/Trickster%27s_Turnout_Gear/ko" title="Trickster's Turnout Gear/ko">
        사기꾼의 소방복
       </a>
       <span style="font-weight:bold;">
        ·
       </span>
       [ahref]
       
       <span style="font-weight:bold;">
        ·
       </span>
       [linkx]
       
       <span style="font-weight:bold;">
        ·
       </span>
       [ahref]
       
       <span style="font-weight:bold;">
        ·
       </span>
       [linkx]
       
       <span style="font-weight:bold;">
        ·
       </span>
       <a href="/wiki/Carrion_Companion/ko" title="Carrion Companion/ko">
        썩어버린 동료
       </a>
       <span style="font-weight:bold;">
        ·
       </span>
       [ahref]
       
       <span style="font-weight:bold;">
        ·
       </span>
       <a href="/wiki/Corpsemopolitan/ko" title="Corpsemopolitan/ko">
        범시체주의자
       </a>
       <span style="font-weight:bold;">
        ·
       </span>
       [ahref]
       
       <span style="font-weight:bold;">
        ·
       </span>
       [ahref]
       
       <span style="font-weight:bold;">
        ·
       </span>
       [ahref]
       
       <span style="font-weight:bold;">
        ·
       </span>
       <a href="/wiki/External_Organ/ko" title="External Organ/ko">
        외부 오르간
       </a>
       <span style="font-weight:bold;">
        ·
       </span>
       [ahref]
       
       <span style="font-weight:bold;">
        ·
       </span>
       [ahref]
       
       <span style="font-weight:bold;">
        ·
       </span>
       <a href="/wiki/Grisly_Gumbo/ko" title="Grisly Gumbo/ko">
        '죽'을 준비하라
       </a>
       <span style="font-weight:bold;">
        ·
       </span>
       [linkx]
       
       <span style="font-weight:bold;">
        ·
       </span>
       [linkx]
       
       <span style="font-weight:bold;">
        ·
       </span>
       [linkx]
       
       <span style="font-weight:bold;">
        ·
       </span>
       <a href="/wiki/Macabre_Mask/ko" title="Macabre Mask/ko">
        죽음의 복면
       </a>
       <span style="font-weight:bold;">
        ·
       </span>
       <a href="/wiki/Maniac%27s_Manacles/ko" title="Maniac's Manacles/ko">
        미치광이의 수갑
       </a>
       <span style="font-weight:bold;">
        ·
       </span>
       [linkx]
       
       <span style="font-weight:bold;">
        ·
       </span>
       <a href="/wiki/Mucous_Membrain/ko" title="Mucous Membrain/ko">
        점막 속에 뇌가 있다
       </a>
       <span style="font-weight:bold;">
        ·
       </span>
       [linkx]
       
       <span style="font-weight:bold;">
        ·
       </span>
       [ahref]
       
       <span style="font-weight:bold;">
        ·
       </span>
       [ahref]
       
       <span style="font-weight:bold;">
        ·
       </span>
       [linkx]
       
       <span style="font-weight:bold;">
        ·
       </span>
       <a href="/wiki/Spectralnaut/ko" title="Spectralnaut/ko">
        우주비행령
       </a>
       <span style="font-weight:bold;">
        ·
       </span>
       [linkx]
       
       <span style="font-weight:bold;">
        ·
       </span>
       [ahref]
       
       <span style="font-weight:bold;">
        ·
       </span>
       <a href="/wiki/Candleer/ko" title="Candleer/ko">
        양초띠
       </a>
       <span style="font-weight:bold;">
        ·
       </span>
       <a href="/wiki/Pin_Pals/ko" title="Pin Pals/ko">
        찌르개 친구들
       </a>
       <span style="font-weight:bold;">
        ·
       </span>
       [linkx]
       
       <span style="font-weight:bold;">
        ·
       </span>
       [linkx]
       
       <span style="font-weight:bold;">
        ·
       </span>
       [ahref]
       
       <span style="font-weight:bold;">
        ·
       </span>
       [ahref]
       
       <span style="font-weight:bold;">
        ·
       </span>
       [linkx]
       
       <span style="font-weight:bold;">
        ·
       </span>
       [ahref]
       
       <span style="font-weight:bold;">
        ·
       </span>
       [ahref]
       
       <span style="font-weight:bold;">
        ·
       </span>
       [ahref]
       
       <span style="font-weight:bold;">
        ·
       </span>
       [linkx]
       
       <span style="font-weight:bold;">
        ·
       </span>
       [linkx]
       
       <span style="font-weight:bold;">
        ·
       </span>
       [linkx]
       
       <span style="font-weight:bold;">
        ·
       </span>
       [ahref]
       
       <span style="font-weight:bold;">
        ·
       </span>
       [ahref]
       
       <span style="font-weight:bold;">
        ·
       </span>
       <a href="/wiki/Lunatic%27s_Leathers/ko" title="Lunatic's Leathers/ko">
        미치광이의 가죽 재킷
       </a>
       <span style="font-weight:bold;">
        ·
       </span>
       [linkx]
       
       <span style="font-weight:bold;">
        ·
       </span>
       [ahref]
       
       <span style="font-weight:bold;">
        ·
       </span>
       [linkx]
       
       <span style="font-weight:bold;">
        ·
       </span>
       <a href="/wiki/Arsonist_Apparatus/ko" title="Arsonist Apparatus/ko">
        방화범의 방염기관
       </a>
       <span style="font-weight:bold;">
        ·
       </span>
       <a href="/wiki/Creature%27s_Grin/ko" title="Creature's Grin/ko">
        괴생물체의 괴기미소
       </a>
       <span style="font-weight:bold;">
        ·
       </span>
       [linkx]
       
       <span style="font-weight:bold;">
        ·
       </span>
       [linkx]
       
       <span style="font-weight:bold;">
        ·
       </span>
       [ahref]
       
       <span style="font-weight:bold;">
        ·<li>[keywordx][symbolx][keywordx][symbolx][bracketl5][keywordx][bracketr5][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx]</li>[keywordx][symbolx][keywordx][symbolx][bracketl6][keywordx][bracketr6][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx]<li>[linkx]</li><li>[keywordx]</li>
       </span>
       [linkx]
       
       <span style="font-weight:bold;">
        ·
       </span>
       [linkx]
       
       <span style="font-weight:bold;">
        ·
       </span>
       <a href="/wiki/North_Polar_Fleece/ko" title="North Polar Fleece/ko">
        북극 양털옷
       </a>
       <span style="font-weight:bold;">
        ·
       </span>
       <a href="/wiki/Wartime_Warmth/ko" title="Wartime Warmth/ko">
        전쟁의 온기
       </a>
       <span style="font-weight:bold;">
        ·
       </span>
       <a href="/wiki/Black_Knight%27s_Bascinet/ko" title="Black Knight's Bascinet/ko">
        흑기사의 배서닛 투구
       </a>
       <span style="font-weight:bold;">
        ·
       </span>
       <a href="/wiki/Charred_Chainmail/ko" title="Charred Chainmail/ko">
        새까맣게 탄 사슬갑옷
       </a>
       <span style="font-weight:bold;">
        ·
       </span>
       [linkx]
       
       <span style="font-weight:bold;">
        ·
       </span>
       [linkx]
       
       <span style="font-weight:bold;">
        ·
       </span>
       [linkx]
       
       <span style="font-weight:bold;">
        ·
       </span>
       [ahref]
       
       <span style="font-weight:bold;">
        ·
       </span>
       [linkx]
       
       <span style="font-weight:bold;">
        ·
       </span>
       [linkx]
       
       <span style="font-weight:bold;">
        ·
       </span>
       [ahref]
       
       <span style="font-weight:bold;">
        ·
       </span>
       [linkx]
       
       <span style="font-weight:bold;">
        ·
       </span>
       <a href="/wiki/Crusader%27s_Getup/ko" title="Crusader's Getup/ko">
        성전사의 복장
       </a>
       <span style="font-weight:bold;">
        ·
       </span>
       <a href="/wiki/Face_of_Mercy/ko" title="Face of Mercy/ko">
        자비의 면상
       </a>
       <span style="font-weight:bold;">
        ·
       </span>
       [ahref]
       
       <span style="font-weight:bold;">
        ·
       </span>
       <a href="/wiki/Buttler/ko" title="Buttler/ko">
        청덩지기
       </a>
       <span style="font-weight:bold;">
        ·
       </span>
       <a href="/wiki/Fear_Monger/ko" title="Fear Monger/ko">
        공포 살포자
       </a>
       <span style="font-weight:bold;">
        ·
       </span>
       [ahref]
       
       <span style="font-weight:bold;">
        ·
       </span>
       [linkx]
       
       <span style="font-weight:bold;">
        ·
       </span>
       [linkx]
       
       <span style="font-weight:bold;">
        ·
       </span>
       [ahref]
       
       <span style="font-weight:bold;">
        ·
       </span>
       [linkx]
       
       <span style="font-weight:bold;">
        ·
       </span>
       [linkx]
       
       <span style="font-weight:bold;">
        ·
       </span>
       [linkx]
       
       <span style="font-weight:bold;">
        ·
       </span>
       <a href="/wiki/Handy_Canes/ko" title="Handy Canes/ko">
        Handy Canes
       </a>
       <span style="font-weight:bold;">
        ·
       </span>
       [linkx]
       
       <span style="font-weight:bold;">
        ·
       </span>
       [linkx]
       
       <span style="font-weight:bold;">
        ·
       </span>
       <a href="/wiki/Sweet_Smissmas_Sweater/ko" title="Sweet Smissmas Sweater/ko">
        Sweet Smissmas Sweater
       </a>
       <span style="font-weight:bold;">
        ·
       </span>
       [ahref]
       
       <span style="font-weight:bold;">
        ·
       </span>
       [ahref]
       
       <span style="font-weight:bold;">
        ·
       </span>
       [ahref]
       
       <span style="font-weight:bold;">
        ·
       </span>
       [ahref]
       
       <span style="font-weight:bold;">
        ·
       </span>
       <a href="/wiki/Feathered_Fiend/ko" title="Feathered Fiend/ko">
        Feathered Fiend
       </a>
       <span style="font-weight:bold;">
        ·
       </span>
       [ahref]
       
       <span style="font-weight:bold;">
        ·
       </span>
       <a href="/wiki/Hot_Huaraches/ko" title="Hot Huaraches/ko">
        Hot Huaraches
       </a>
       <span style="font-weight:bold;">
        ·
       </span>
       [linkx]
       
       <span style="font-weight:bold;">
        ·
       </span>
       [ahref]
       
       <span style="font-weight:bold;">
        ·
       </span>
       [ahref]
       
       <span style="font-weight:bold;">
        ·
       </span>
       [ahref]
       
       <span style="font-weight:bold;">
        ·
       </span>
       <a href="/wiki/Hot_Case/ko" title="Hot Case/ko">
        Hot Case
       </a>
       <span style="font-weight:bold;">
        ·
       </span>
       [ahref]
       
       <span style="font-weight:bold;">
        ·
       </span>
       [ahref]
       
       <span style="font-weight:bold;">
        ·
       </span>
       [linkx]
       
       <span style="font-weight:bold;">
        ·
       </span>
       [linkx]
       
      </div>
     </td>
    </tr>
    <tr style="height:2px">
     <td>
     </td>
    </tr>
    <tr>
     <td class="navbox-group" style=";background: #f9d483; width: 5%; text-align: center; font-size: 105%; padding: 0.75em;;">
      [linkx]
      
      <a href="/wiki/Demoman/ko" title="Demoman/ko">
       데모맨
      </a>
     </td>
     <td class="navbox-list navbox-even" style="text-align:left;border-left-width:2px;border-left-style:solid;width:100%;padding:0px;;;">
      <div style="padding:0em 0.25em">
       [linkx]
       
       <span style="font-weight:bold;">
        ·
       </span>
       <a href="/wiki/Glengarry_Bonnet/ko" title="Glengarry Bonnet/ko">
        글렌개리 보닛
       </a>
       <span style="font-weight:bold;">
        ·
       </span>
       <a href="/wiki/Scotsman%27s_Stove_Pipe/ko" title="Scotsman's Stove Pipe/ko">
        스코트맨 실크 햇
       </a>
       <span style="font-weight:bold;">
        ·
       </span>
       [linkx]
       
       <span style="font-weight:bold;">
        ·
       </span>
       <a href="/wiki/Tippler%27s_Tricorne/ko" title="Tippler's Tricorne/ko">
        술고래 해적의 삼각모자
       </a>
       <span style="font-weight:bold;">
        ·
       </span>
       <a href="/wiki/Carouser%27s_Capotain/ko" title="Carouser's Capotain/ko">
        놀이꾼의 챙모자
       </a>
       <span style="font-weight:bold;">
        ·
       </span>
       [ahref]
       
       <span style="font-weight:bold;">
        ·
       </span>
       [linkx]
       
       <span style="font-weight:bold;">
        ·
       </span>
       [linkx]
       
       <span style="font-weight:bold;">
        ·
       </span>
       [linkx]
       
       <span style="font-weight:bold;">
        ·
       </span>
       [linkx]
       
       <span style="font-weight:bold;">
        ·
       </span>
       [linkx]
       
       <span style="font-weight:bold;">
        ·
       </span>
       [linkx]
       
       <span style="font-weight:bold;">
        ·
       </span>
       [ahref]
       
       <span style="font-weight:bold;">
        ·
       </span>
       [linkx]
       
       <span style="font-weight:bold;">
        ·
       </span>
       [ahref]
       
       <span style="font-weight:bold;">
        ·
       </span>
       <a href="/wiki/Tam_O%27_Shanter/ko" title="Tam O' Shanter/ko">
        탬 오 쉔터
       </a>
       <span style="font-weight:bold;">
        ·
       </span>
       [linkx]
       
       <span style="font-weight:bold;">
        ·
       </span>
       <a href="/wiki/A_Whiff_of_the_Old_Brimstone/ko" title="A Whiff of the Old Brimstone/ko">
        오래된 유황 내
       </a>
       <span style="font-weight:bold;">
        ·
       </span>
       [linkx]
       
       <span style="font-weight:bold;">
        ·
       </span>
       <strong class="selflink">
        이름없는 모자
       </strong>
       <span style="font-weight:bold;">
        ·
       </span>
       [linkx]
       
       <span style="font-weight:bold;">
        ·
       </span>
       [ahref]
       
       <span style="font-weight:bold;">
        ·
       </span>
       <a href="/wiki/Pickled_Paws/ko" title="Pickled Paws/ko">
        술에 절은 뒷발
       </a>
       <span style="font-weight:bold;">
        ·
       </span>
       <a href="/wiki/Scottish_Snarl/ko" title="Scottish Snarl/ko">
        스코틀랜드의 이빨
       </a>
       <span style="font-weight:bold;">
        ·
       </span>
       <a href="/wiki/All-Father/ko" title="All-Father/ko">
        만물의 아버지
       </a>
       <span style="font-weight:bold;">
        ·
       </span>
       <a href="/wiki/Ornament_Armament/ko" title="Ornament Armament/ko">
        장식용 군장비
       </a>
       <span style="font-weight:bold;">
        ·
       </span>
       [linkx]
       
       <span style="font-weight:bold;">
        ·
       </span>
       [linkx]
       
       <span style="font-weight:bold;">
        ·
       </span>
       [ahref]
       
       <span style="font-weight:bold;">
        ·
       </span>
       [linkx]
       
       <span style="font-weight:bold;">
        ·
       </span>
       [linkx]
       
       <span style="font-weight:bold;">
        ·
       </span>
       [linkx]
       
       <span style="font-weight:bold;">
        ·
       </span>
       [ahref]
       
       <span style="font-weight:bold;">
        ·
       </span>
       [ahref]
       
       <span style="font-weight:bold;">
        ·
       </span>
       [linkx]
       
       <span style="font-weight:bold;">
        ·
       </span>
       [linkx]
       
       <span style="font-weight:bold;">
        ·
       </span>
       [ahref]
       
       <span style="font-weight:bold;">
        ·
       </span>
       [linkx]
       
       <span style="font-weight:bold;">
        ·
       </span>
       <a href="/wiki/Menpo/ko" title="Menpo/ko">
        사무라이 가면
       </a>
       <span style="font-weight:bold;">
        ·
       </span>
       <a href="/wiki/Voodoo-Cursed_Demoman_Soul/ko" title="Voodoo-Cursed Demoman Soul/ko">
        부두교의 저주를 받은 데모맨의 영혼
       </a>
       <span style="font-weight:bold;">
        ·
       </span>
       <a href="/wiki/Voodoo_JuJu_(Slight_Return)/ko" title="Voodoo JuJu (Slight Return)/ko">
        부두교의 주물 (슬라이트 리턴)
       </a>
       <span style="font-weight:bold;">
        ·
       </span>
       <a href="/wiki/Bonedolier/ko" title="Bonedolier/ko">
        해골띠
       </a>
       <span style="font-weight:bold;">
        ·
       </span>
       [linkx]
        [keywordx][symbolx][keywordx][symbolx][bracketl11][keywordx][bracketr11][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][bracketl12][keywordx][bracketr12][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx]<li>[keywordx]</li>
       
       <span style="font-weight:bold;">
        ·
       </span>
       [ahref]
       
       <span style="font-weight:bold;">
        ·
       </span>
       [linkx]
       
       <span style="font-weight:bold;">
        ·
       </span>
       [linkx]
       
       <span style="font-weight:bold;">
        ·
       </span>
       [linkx]
       
       <span style="font-weight:bold;">
        ·
       </span>
       [linkx]
       
       <span style="font-weight:bold;">
        ·
       </span>
       [linkx]
       
       <span style="font-weight:bold;">
        ·
       </span>
       [linkx]
       
       <span style="font-weight:bold;">
        ·
       </span>
       [linkx]
       
       <span style="font-weight:bold;">
        ·
       </span>
       [ahref]
       
       <span style="font-weight:bold;">
        ·
       </span>
       [linkx]
       
       <span style="font-weight:bold;">
        ·
       </span>
       [ahref]
       
       <span style="font-weight:bold;">
        ·
       </span>
       [ahref]
       
       <span style="font-weight:bold;">
        ·
       </span>
       [ahref]
       
       <span style="font-weight:bold;">
        ·
       </span>
       [ahref]
       
       <span style="font-weight:bold;">
        ·
       </span>
       [linkx]
       
       <span style="font-weight:bold;">
        ·
       </span>
       [linkx]
       
       <span style="font-weight:bold;">
        ·
       </span>
       [ahref]
       
       <span style="font-weight:bold;">
        ·
       </span>
       <a href="/wiki/Tartantaloons/ko" title="Tartantaloons/ko">
        타탄탈롱
       </a>
       <span style="font-weight:bold;">
        ·
       </span>
       [ahref]
       
       <span style="font-weight:bold;">
        ·
       </span>
       [ahref]
       
       <span style="font-weight:bold;">
        ·
       </span>
       [ahref]
       
       <span style="font-weight:bold;">
        ·
       </span>
       [ahref]
       
       <span style="font-weight:bold;">
        ·
       </span>
       [ahref]
       
       <span style="font-weight:bold;">
        ·
       </span>
       [linkx]
       
       <span style="font-weight:bold;">
        ·
       </span>
       [linkx]
       
       <span style="font-weight:bold;">
        ·
       </span>
       [linkx]
       
       <span style="font-weight:bold;">
        ·
       </span>
       [ahref]
       
       <span style="font-weight:bold;">
        ·
       </span>
       <a href="/wiki/Pirate_Bandana/ko" title="Pirate Bandana/ko">
        해적 두건
       </a>
       <span style="font-weight:bold;">
        ·
       </span>
       [ahref]
       
       <span style="font-weight:bold;">
        ·
       </span>
       [ahref]
       
       <span style="font-weight:bold;">
        ·
       </span>
       [linkx]
       
       <span style="font-weight:bold;">
        ·
       </span>
       [linkx]
       
       <span style="font-weight:bold;">
        ·
       </span>
       [linkx]
       
       <span style="font-weight:bold;">
        ·
       </span>
       [ahref]
       
       <span style="font-weight:bold;">
        ·
       </span>
       <a href="/wiki/Parasight/ko" title="Parasight/ko">
        기생안
       </a>
       <span style="font-weight:bold;">
        ·
       </span>
       [ahref]
       
       <span style="font-weight:bold;">
        ·
       </span>
       <a href="/wiki/Squid%27s_Lid/ko" title="Squid's Lid/ko">
        오징어 덮개
       </a>
       <span style="font-weight:bold;">
        ·
       </span>
       [ahref]
       
       <span style="font-weight:bold;">
        ·
       </span>
       [linkx]
       
       <span style="font-weight:bold;">
        ·
       </span>
       <a href="/wiki/Candleer/ko" title="Candleer/ko">
        양초띠
       </a>
       <span style="font-weight:bold;">
        ·
       </span>
       [ahref]
       
       <span style="font-weight:bold;">
        ·
       </span>
       [ahref]
       
       <span style="font-weight:bold;">
        ·
       </span>
       [linkx]
       
       <span style="font-weight:bold;">
        ·
       </span>
       <a href="/wiki/Tartan_Tyrolean/ko" title="Tartan Tyrolean/ko">
        타탄 티롤리언
       </a>
       <span style="font-weight:bold;">
        ·
       </span>
       <a href="/wiki/Bushi-Dou/ko" title="Bushi-Dou/ko">
        무사도
       </a>
       <span style="font-weight:bold;">
        ·
       </span>
       [linkx]
       
       <span style="font-weight:bold;">
        ·
       </span>
       [linkx]
       
       <span style="font-weight:bold;">
        ·
       </span>
       [linkx]
       
       <span style="font-weight:bold;">
        ·
       </span>
       <a href="/wiki/Stylish_DeGroot/ko" title="Stylish DeGroot/ko">
        개성적인 디그룻
       </a>
       <span style="font-weight:bold;">
        ·
       </span>
       [ahref]
       
       <span style="font-weight:bold;">
        ·
       </span>
       [linkx]
       
       <span style="font-weight:bold;">
        ·
       </span>
       [ahref]
       
       <span style="font-weight:bold;">
        ·
       </span>
       [linkx]
       
       <span style="font-weight:bold;">
        ·
       </span>
       <a href="/wiki/Seeing_Double/ko" title="Seeing Double/ko">
        둘로 보이는 시야
       </a>
       <span style="font-weight:bold;">
        ·
       </span>
       <a href="/wiki/Six_Pack_Abs/ko" title="Six Pack Abs/ko">
        식스팩 맥주근
       </a>
       <span style="font-weight:bold;">
        ·
       </span>
       [ahref]
       
       <span style="font-weight:bold;">
        ·
       </span>
       [linkx]
       
       <span style="font-weight:bold;">
        ·
       </span>
       [linkx]
       
       <span style="font-weight:bold;">
        ·
       </span>
       <a href="/wiki/Forgotten_King%27s_Restless_Head/ko" title="Forgotten King's Restless Head/ko">
        잊혀진 왕의 잠들지 못하는 머리
       </a>
       <span style="font-weight:bold;">
        ·
       </span>
       <a href="/wiki/Mannhattan_Project/ko" title="Mannhattan Project/ko">
        Mannhattan 계획
       </a>
       <span style="font-weight:bold;">
        ·
       </span>
       [ahref]
       
       <span style="font-weight:bold;">
        ·
       </span>
       [ahref]
       
       <span style="font-weight:bold;">
        ·
       </span>
       [ahref]
       
       <span style="font-weight:bold;">
        ·
       </span>
       [ahref]
       
       <span style="font-weight:bold;">
        ·
       </span>
       <a href="/wiki/Scot_Bonnet/ko" title="Scot Bonnet/ko">
        스코틀랜드 비니
       </a>
       <span style="font-weight:bold;">
        ·
       </span>
       [linkx]
       
       <span style="font-weight:bold;">
        ·
       </span>
       <a href="/wiki/Valhalla_Helm/ko" title="Valhalla Helm/ko">
        발할라 투구
       </a>
       <span style="font-weight:bold;">
        ·
       </span>
       [linkx]
       
       <span style="font-weight:bold;">
        ·
       </span>
       [ahref]
       
       <span style="font-weight:bold;">
        ·
       </span>
       [linkx]
       
       <span style="font-weight:bold;">
        ·
       </span>
       [linkx]
       
       <span style="font-weight:bold;">
        ·
       </span>
       [linkx]
       
       <span style="font-weight:bold;">
        ·
       </span>
       [linkx]
       
       <span style="font-weight:bold;">
        ·
       </span>
       [ahref]
       
       <span style="font-weight:bold;">
        ·
       </span>
       [linkx]
       
       <span style="font-weight:bold;">
        ·
       </span>
       [ahref]
       
       <span style="font-weight:bold;">
        ·
       </span>
       [linkx]
       
       <span style="font-weight:bold;">
        ·
       </span>
       [ahref]
       
       <span style="font-weight:bold;">
        ·
       </span>
       [linkx]
       
       <span style="font-weight:bold;">
        ·
       </span>
       <a href="/wiki/Socked_and_Loaded/ko" title="Socked and Loaded/ko">
        Socked and Loaded
       </a>
       <span style="font-weight:bold;">
        ·
       </span>
       [linkx]
       
       <span style="font-weight:bold;">
        ·
       </span>
       [ahref]
       
       <span style="font-weight:bold;">
        ·
       </span>
       [ahref]
       
       <span style="font-weight:bold;">
        ·
       </span>
       [linkx]
       
       <span style="font-weight:bold;">
        ·
       </span>
       [linkx]
       
       <span style="font-weight:bold;">
        ·
       </span>
       <a href="/wiki/Blast_Blocker/ko" title="Blast Blocker/ko">
        Blast Blocker
       </a>
       <span style="font-weight:bold;">
        ·
       </span>
       [linkx]
       
       <span style="font-weight:bold;">
        ·
       </span>
       [linkx]
       
       <span style="font-weight:bold;">
        ·
       </span>
       [linkx]
       
       <span style="font-weight:bold;">
        ·
       </span>
       [linkx]
       
       <span style="font-weight:bold;">
        ·
       </span>
       [ahref]
       
      </div>
     </td>
    </tr>
    <tr style="height:2px">
     <td>
     </td>
    </tr>
    <tr>
     <td class="navbox-group" style=";background: #f9d483; width: 5%; text-align: center; font-size: 105%; padding: 0.75em;;">
      [ahref]
      
      [ahref]
      
     </td>
     <td class="navbox-list navbox-odd" style="text-align:left;border-left-width:2px;border-left-style:solid;width:100%;padding:0px;;;">
      <div style="padding:0em 0.25em">
       [ahref]
       
       <span style="font-weight:bold;">
        ·
       </span>
       [ahref]
       
       <span style="font-weight:bold;">
        ·
       </span>
       <a href="/wiki/Tough_Guy%27s_Toque/ko" title="Tough Guy's Toque/ko">
        터프가이 모자
       </a>
       <span style="font-weight:bold;">
        ·
       </span>
       [linkx]
       
       <span style="font-weight:bold;">
        ·
       </span>
       [ahref]
       
       <span style="font-weight:bold;">
        ·
       </span>
       [linkx]
       
       <span style="font-weight:bold;">
        ·
       </span>
       <a href="/wiki/Pugilist%27s_Protector/ko" title="Pugilist's Protector/ko">
        권투선수의 보호대
       </a>
       <span style="font-weight:bold;">
        ·
       </span>
       <a href="/wiki/Cadaver%27s_Cranium/ko" title="Cadaver's Cranium/ko">
        시체의 머리통
       </a>
       <span style="font-weight:bold;">
        ·
       </span>
       [linkx]
       
       <span style="font-weight:bold;">
        ·
       </span>
       <a href="/wiki/Big_Chief/ko" title="Big Chief/ko">
        대족장
       </a>
       <span style="font-weight:bold;">
        ·
       </span>
       [linkx]
       
       <span style="font-weight:bold;">
        ·
       </span>
       [linkx]
       
       <span style="font-weight:bold;">
        ·
       </span>
       [linkx]
       
       <span style="font-weight:bold;">
        ·
       </span>
       <a href="/wiki/Large_Luchadore/ko" title="Large Luchadore/ko">
        거구의 루차도르
       </a>
       <span style="font-weight:bold;">
        ·
       </span>
       [ahref]
       
       <span style="font-weight:bold;">
        ·
       </span>
       [linkx]
       
       <span style="font-weight:bold;">
        ·
       </span>
       [linkx]
       
       <span style="font-weight:bold;">
        ·
       </span>
       [linkx]
       
       <span style="font-weight:bold;">
        ·
       </span>
       <a href="/wiki/Copper%27s_Hard_Top/ko" title="Copper's Hard Top/ko">
        경찰 헬멧
       </a>
       <span style="font-weight:bold;">
        ·
       </span>
       [ahref]
       
       <span style="font-weight:bold;">
        ·
       </span>
       [linkx]
       
       <span style="font-weight:bold;">
        ·
       </span>
       [linkx]
       
       <span style="font-weight:bold;">
        ·
       </span>
       [linkx]
       
       <span style="font-weight:bold;">
        ·
       </span>
       [linkx]
       
       <span style="font-weight:bold;">
        ·
       </span>
       [ahref]
       
       <span style="font-weight:bold;">
        ·
       </span>
       [ahref]
       
       <span style="font-weight:bold;">
        ·
       </span>
       <a href="/wiki/Outdoorsman/ko" title="Outdoorsman/ko">
        바깥양반
       </a>
       <span style="font-weight:bold;">
        ·
       </span>
       [linkx]
       
       <span style="font-weight:bold;">
        ·
       </span>
       <a href="/wiki/Soviet_Stitch-Up/ko" title="Soviet Stitch-Up/ko">
        소련식 바느질
       </a>
       <span style="font-weight:bold;">
        ·
       </span>
       [linkx]
       
       <span style="font-weight:bold;">
        ·
       </span>
       <a href="/wiki/Cold_War_Luchador/ko" title="Cold War Luchador/ko">
        냉전의 루차도르
       </a>
       <span style="font-weight:bold;">
        ·
       </span>
       [ahref]
       
       <span style="font-weight:bold;">
        ·
       </span>
       <a href="/wiki/Sandvich_Safe/ko" title="Sandvich Safe/ko">
        샌드비치 보관함
       </a>
       <span style="font-weight:bold;">
        ·
       </span>
       [linkx]
       
       <span style="font-weight:bold;">
        ·
       </span>
       <a href="/wiki/Toss-Proof_Towel/ko" title="Toss-Proof Towel/ko">
        패배 따윈 없다
       </a>
       <span style="font-weight:bold;">
        ·
       </span>
       [ahref]
       
       <span style="font-weight:bold;">
        ·
       </span>
       [linkx]
       
       <span style="font-weight:bold;">
        ·
       </span>
       [linkx]
       
       <span style="font-weight:bold;">
        ·
       </span>
       <a href="/wiki/U-clank-a/ko" title="U-clank-a/ko">
        털털모자
       </a>
       <span style="font-weight:bold;">
        ·
       </span>
       [ahref]
       
       <span style="font-weight:bold;">
        ·
       </span>
       [ahref]
       
       <span style="font-weight:bold;">
        ·
       </span>
       [linkx]
       
       <span style="font-weight:bold;">
        ·
       </span>
       <a href="/wiki/Heavy_Artillery_Officer%27s_Cap/ko" title="Heavy Artillery Officer's Cap/ko">
        중포병 부대 장교의 모자
       </a>
       <span style="font-weight:bold;">
        ·
       </span>
       [ahref]
       
       <span style="font-weight:bold;">
        ·
       </span>
       [linkx]
       
       <span style="font-weight:bold;">
        ·
       </span>
       [linkx]
       
       <span style="font-weight:bold;">
        ·
       </span>
       <a href="/wiki/Grand_Duchess_Tutu/ko" title="Grand Duchess Tutu/ko">
        대공비의 치마
       </a>
       <span style="font-weight:bold;">
        ·
       </span>
       [ahref]
       
       <span style="font-weight:bold;">
        ·
       </span>
       [linkx]
       
       <span style="font-weight:bold;">
        ·
       </span>
       <a href="/wiki/Aqua_Flops/ko" title="Aqua Flops/ko">
        청록색 샌들
       </a>
       <span style="font-weight:bold;">
        ·
       </span>
       [ahref]
       
       <span style="font-weight:bold;">
        ·
       </span>
       [ahref]
       
       <span style="font-weight:bold;">
        ·
       </span>
       [linkx]
       
       <span style="font-weight:bold;">
        ·
       </span>
       <a href="/wiki/Hunger_Force/ko" title="Hunger Force/ko">
        헝거 포스
       </a>
       <span style="font-weight:bold;">
        ·
       </span>
       [linkx]
       
       <span style="font-weight:bold;">
        ·
       </span>
       [linkx]
       
       <span style="font-weight:bold;">
        ·
       </span>
       [linkx]
       
       <span style="font-weight:bold;">
        ·
       </span>
       [linkx]
       
       <span style="font-weight:bold;">
        ·
       </span>
       <a href="/wiki/Bunsen_Brave/ko" title="Bunsen Brave/ko">
        분젠 용사
       </a>
       <span style="font-weight:bold;">
        ·
       </span>
       [ahref]
       
       <span style="font-weight:bold;">
        ·
       </span>
       <a href="/wiki/Titanium_Towel/ko" title="Titanium Towel/ko">
        부식 따윈 없다
       </a>
       <span style="font-weight:bold;">
        ·
       </span>
       [linkx]
       
       <span style="font-weight:bold;">
        ·
       </span>
       [linkx]
       
       <span style="font-weight:bold;">
        ·
       </span>
       [ahref]
       
       <span style="font-weight:bold;">
        ·
       </span>
       [linkx]
       
       <span style="font-weight:bold;">
        ·
       </span>
       <a href="/wiki/Bolshevik_Biker/ko" title="Bolshevik Biker/ko">
        볼셰비크 폭주자
       </a>
       <span style="font-weight:bold;">
        ·
       </span>
       [linkx]
       
       <span style="font-weight:bold;">
        ·
       </span>
       [ahref]
       
       <span style="font-weight:bold;">
        ·
       </span>
       [linkx]
       
       <span style="font-weight:bold;">
        ·
       </span>
       [linkx]
       
       <span style="font-weight:bold;">
        ·
       </span>
       <a href="/wiki/Tsarboosh/ko" title="Tsarboosh/ko">
        짜르보시
       </a>
       <span style="font-weight:bold;">
        ·
       </span>
       [linkx]
       
       <span style="font-weight:bold;">
        ·
       </span>
       [ahref]
       
       <span style="font-weight:bold;">
        ·
       </span>
       [linkx]
       
       <span style="font-weight:bold;">
        ·
       </span>
       [linkx]
       
       <span style="font-weight:bold;">
        ·
       </span>
       <a href="/wiki/Chicken_Kiev/ko" title="Chicken Kiev/ko">
        치킨 키예프
       </a>
       <span style="font-weight:bold;">
        ·
       </span>
       [linkx]
       
       <span style="font-weight:bold;">
        ·
       </span>
       [linkx]
       
       <span style="font-weight:bold;">
        ·
       </span>
       [linkx]
       
       <span style="font-weight:bold;">
        ·
       </span>
       <a href="/wiki/Monstrous_Mandible/ko" title="Monstrous Mandible/ko">
        괴물스러운 아래턱
       </a>
       <span style="font-weight:bold;">
        ·
       </span>
       [ahref]
       
       <span style="font-weight:bold;">
        ·
       </span>
       [linkx]
       
       <span style="font-weight:bold;">
        ·
       </span>
       [linkx]
       
       <span style="font-weight:bold;">
        ·
       </span>
       [ahref]
       
       <span style="font-weight:bold;">
        ·
       </span>
       <a href="/wiki/Eliminators_Safeguard/ko" title="Eliminators Safeguard/ko">
        제거자의 보호구
       </a>
       <span style="font-weight:bold;">
        ·
       </span>
       [ahref]
       
       <span style="font-weight:bold;">
        ·
       </span>
       [ahref]
       
       <span style="font-weight:bold;">
        ·
       </span>
       <a href="/wiki/Leftover_Trap/ko" title="Leftover Trap/ko">
        부스러기 함정
       </a>
       <span style="font-weight:bold;">
        ·
       </span>
       <a href="/wiki/Rat_Stompers/ko" title="Rat Stompers/ko">
        시궁쥐표 신발
       </a>
       <span style="font-weight:bold;">
        ·
       </span>
       <a href="/wiki/Sammy_Cap/ko" title="Sammy Cap/ko">
        식탐유발 모자
       </a>
       <span style="font-weight:bold;">
        ·
       </span>
       <a href="/wiki/Trash_Man/ko" title="Trash Man/ko">
        쓰레기 사나이
       </a>
       <span style="font-weight:bold;">
        ·
       </span>
       [linkx]
       
       <span style="font-weight:bold;">
        ·
       </span>
       [linkx]
       
       <span style="font-weight:bold;">
        ·
       </span>
       <a href="/wiki/Little_Bear/ko" title="Little Bear/ko">
        작은 곰
       </a>
       <span style="font-weight:bold;">
        ·
       </span>
       [ahref]
       
       <span style="font-weight:bold;">
        ·
       </span>
       <a href="/wiki/Die_Regime-Panzerung/ko" title="Die Regime-Panzerung/ko">
        정권 갑옷
       </a>
       <span style="font-weight:bold;">
        ·
       </span>
       [ahref]
       
       <span style="font-weight:bold;">
        ·
       </span>
       [linkx]
       
       <span style="font-weight:bold;">
        ·
       </span>
       <a href="/wiki/Bone-Cut_Belt/ko" title="Bone-Cut Belt/ko">
        깎아 만든 뼈띠
       </a>
       <span style="font-weight:bold;">
        ·
       </span>
       [linkx]
       
       <span style="font-weight:bold;">
        ·
       </span>
       [linkx]
       
       <span style="font-weight:bold;">
        ·
       </span>
       <a href="/wiki/Minsk_Beef/ko" title="Minsk Beef/ko">
        민스크산 소고기
       </a>
       <span style="font-weight:bold;">
        ·
       </span>
       [ahref]
       
       <span style="font-weight:bold;">
        ·
       </span>
       [linkx]
       
       <span style="font-weight:bold;">
        ·
       </span>
       [linkx]
       
       <span style="font-weight:bold;">
        ·
       </span>
       [linkx]
       
       <span style="font-weight:bold;">
        ·
       </span>
       [linkx]
       
       <span style="font-weight:bold;">
        ·
       </span>
       [linkx]
       
       <span style="font-weight:bold;">
        ·
       </span>
       [linkx]
       
       <span style="font-weight:bold;">
        ·
       </span>
       [linkx]
       
       <span style="font-weight:bold;">
        ·
       </span>
       [linkx]
       
       <span style="font-weight:bold;">
        ·
       </span>
       <a href="/wiki/White_Russian/ko" title="White Russian/ko">
        화이트 러시안
       </a>
       <span style="font-weight:bold;">
        ·
       </span>
       [linkx]
       
       <span style="font-weight:bold;">
        ·
       </span>
       [ahref]
       
       <span style="font-weight:bold;">
        ·
       </span>
       [ahref]
       
       <span style="font-weight:bold;">
        ·
       </span>
       <a href="/wiki/Gift_Bringer/ko" title="Gift Bringer/ko">
        선물의 사도
       </a>
       <span style="font-weight:bold;">
        ·
       </span>
       <a href="/wiki/Siberian_Sweater/ko" title="Siberian Sweater/ko">
        시베리아 스웨터
       </a>
       <span style="font-weight:bold;">
        ·
       </span>
       [ahref]
       
       <span style="font-weight:bold;">
        ·
       </span>
       [linkx]
       
       <span style="font-weight:bold;">
        ·
       </span>
       <a href="/wiki/Mo%27Horn/ko" title="Mo'Horn/ko">
        Mo'Horn
       </a>
       <span style="font-weight:bold;">
        ·
       </span>
       <a href="/wiki/Pestering_Jester/ko" title="Pestering Jester/ko">
        성가신 궁정광대
       </a>
       <span style="font-weight:bold;">
        ·
       </span>
       <a href="/wiki/Reader%27s_Choice/ko" title="Reader's Choice/ko">
        Reader's Choice
       </a>
       <span style="font-weight:bold;">
        ·
       </span>
       [linkx]
       
       <span style="font-weight:bold;">
        ·
       </span>
       [ahref]
       
       <span style="font-weight:bold;">
        ·
       </span>
       [ahref]
       
       <span style="font-weight:bold;">
        ·
       </span>
       <a href="/wiki/Aztec_Aggressor/ko" title="Aztec Aggressor/ko">
        Aztec Aggressor
       </a>
       <span style="font-weight:bold;">
        ·
       </span>
       [linkx]
       
       <span style="font-weight:bold;">
        ·
       </span>
       [ahref]
       
       <span style="font-weight:bold;">
        ·
       </span>
       [ahref]
       
       <span style="font-weight:bold;">
        ·
       </span>
       [linkx]
       
       <span style="font-weight:bold;">
        ·
       </span>
       <a href="/wiki/Kathman-Hairdo/ko" title="Kathman-Hairdo/ko">
        Kathman-Hairdo
       </a>
       <span style="font-weight:bold;">
        ·
       </span>
       <a href="/wiki/Nuke/ko" title="Nuke/ko">
        Nuke
       </a>
       <span style="font-weight:bold;">
        ·
       </span>
       [ahref]
       
       <span style="font-weight:bold;">
        ·
       </span>
       [ahref]
       
       <span style="font-weight:bold;">
        ·
       </span>
       [linkx]
       
       <span style="font-weight:bold;">
        ·
       </span>
       [linkx]
       
       <span style="font-weight:bold;">
        ·
       </span>
       [ahref]
       
       <span style="font-weight:bold;">
        ·
       </span>
       <a href="/wiki/Tsar_Platinum/ko" title="Tsar Platinum/ko">
        Tsar Platinum
       </a>
       <span style="font-weight:bold;">
        ·
       </span>
       [ahref]
       
       <span style="font-weight:bold;">
        ·
       </span>
       [linkx]
       
       <span style="font-weight:bold;">
        ·
       </span>
       [ahref]
       
       <span style="font-weight:bold;">
        ·
       </span>
       <a class="new" href="/w/index.php?title=Paka_Parka/ko&amp;action=edit&amp;redlink=1" title="Paka Parka/ko (page does not exist)">
        Paka Parka
       </a>
      </div>
     </td>
    </tr>
    <tr style="height:2px">
     <td>
     </td>
    </tr>
    <tr>
     <td class="navbox-group" style=";background: #f9d483; width: 5%; text-align: center; font-size: 105%; padding: 0.75em;;">
      [linkx]
      
      [linkx]
      
     </td>
     <td class="navbox-list navbox-even" style="text-align:left;border-left-width:2px;border-left-style:solid;width:100%;padding:0px;;;">
      <div style="padding:0em 0.25em">
       [ahref]
       
       <span style="font-weight:bold;">
        ·
       </span>
       [linkx]
       
       <span style="font-weight:bold;">
        ·
       </span>
       [ahref]
       
       <span style="font-weight:bold;">
        ·
       </span>
       [ahref]
       
       <span style="font-weight:bold;">
        ·
       </span>
       [linkx]
       
       <span style="font-weight:bold;">
        ·
       </span>
       <a href="/wiki/Safe%27n%27Sound/ko" title="Safe'n'Sound/ko">
        안전과 평화
       </a>
       <span style="font-weight:bold;">
        ·
       </span>
       [linkx]
       
       <span style="font-weight:bold;">
        ·
       </span>
       [ahref]
       
       <span style="font-weight:bold;">
        ·
       </span>
       <a href="/wiki/Big_Country/ko" title="Big Country/ko">
        컨트리의 대가
       </a>
       <span style="font-weight:bold;">
        ·
       </span>
       [ahref]
       
       <span style="font-weight:bold;">
        ·
       </span>
       [ahref]
       
       <span style="font-weight:bold;">
        ·
       </span>
       [linkx]
       
       <span style="font-weight:bold;">
        ·
       </span>
       [linkx]
       
       <span style="font-weight:bold;">
        ·
       </span>
       [linkx]
       
       <span style="font-weight:bold;">
        ·
       </span>
       [linkx]
       
       <span style="font-weight:bold;">
        ·
       </span>
       [linkx]
       
       <span style="font-weight:bold;">
        ·
       </span>
       [ahref]
       
       <span style="font-weight:bold;">
        ·
       </span>
       [linkx]
       
       <span style="font-weight:bold;">
        ·
       </span>
       [linkx]
       
       <span style="font-weight:bold;">
        ·
       </span>
       [ahref]
       
       <span style="font-weight:bold;">
        ·
       </span>
       <strong class="selflink">
        이름없는 모자
       </strong>
       <span style="font-weight:bold;">
        ·
       </span>
       [ahref]
       
       <span style="font-weight:bold;">
        ·
       </span>
       [linkx]
       
       <span style="font-weight:bold;">
        ·
       </span>
       [ahref]
       
       <span style="font-weight:bold;">
        ·
       </span>
       [linkx]
       
       <span style="font-weight:bold;">
        ·
       </span>
       [linkx]
       
       <span style="font-weight:bold;">
        ·
       </span>
       [ahref]
       
       <span style="font-weight:bold;">
        ·
       </span>
       [ahref]
       
       <span style="font-weight:bold;">
        ·
       </span>
       [linkx]
       
       <span style="font-weight:bold;">
        ·
       </span>
       [linkx]
       
       <span style="font-weight:bold;">
        ·
       </span>
       [linkx]
       
       <span style="font-weight:bold;">
        ·
       </span>
       [ahref]
       
       <span style="font-weight:bold;">
        ·
       </span>
       <a href="/wiki/Texas_Half-Pants/ko" title="Texas Half-Pants/ko">
        텍사스 반쪽 바지
       </a>
       <span style="font-weight:bold;">
        ·
       </span>
       [ahref]
       
       <span style="font-weight:bold;">
        ·
       </span>
       [ahref]
       
       <span style="font-weight:bold;">
        ·
       </span>
       <a href="/wiki/Triad_Trinket/ko" title="Triad Trinket/ko">
        삼합회의 싸구려 장신구
       </a>
       <span style="font-weight:bold;">
        ·
       </span>
       <a href="/wiki/Tin-1000/ko" title="Tin-1000/ko">
        Tin-1000
       </a>
       <span style="font-weight:bold;">
        ·
       </span>
       [linkx]
       
       <span style="font-weight:bold;">
        ·
       </span>
       [linkx]
       
       <span style="font-weight:bold;">
        ·
       </span>
       [ahref]
       
       <span style="font-weight:bold;">
        ·
       </span>
       [ahref]
       
       <span style="font-weight:bold;">
        ·
       </span>
       <a href="/wiki/Voodoo-Cursed_Engineer_Soul/ko" title="Voodoo-Cursed Engineer Soul/ko">
        부두교의 저주를 받은 엔지니어의 영혼
       </a>
       <span style="font-weight:bold;">
        ·
       </span>
       [linkx]
       
       <span style="font-weight:bold;">
        ·
       </span>
       [linkx]
       
       <span style="font-weight:bold;">
        ·
       </span>
       [linkx]
       
       <span style="font-weight:bold;">
        ·
       </span>
       [linkx]
       
       <span style="font-weight:bold;">
        ·
       </span>
       [linkx]
       
       <span style="font-weight:bold;">
        ·
       </span>
       [linkx]
       
       <span style="font-weight:bold;">
        ·
       </span>
       [ahref]
       
       <span style="font-weight:bold;">
        ·
       </span>
       [linkx]
       
       <span style="font-weight:bold;">
        ·
       </span>
       <a href="/wiki/Data_Mining_Light/ko" title="Data Mining Light/ko">
        자료 채광용 조명기구
       </a>
       <span style="font-weight:bold;">
        ·
       </span>
       [ahref]
       
       <span style="font-weight:bold;">
        ·
       </span>
       <a href="/wiki/Teddy_Robobelt/ko" title="Teddy Robobelt/ko">
        테디 로보벨트
       </a>
       <span style="font-weight:bold;">
        ·
       </span>
       <a href="/wiki/Texas_Tin-Gallon/ko" title="Texas Tin-Gallon/ko">
        텍사스 통 갤런
       </a>
       <span style="font-weight:bold;">
        ·
       </span>
       <a href="/wiki/Timeless_Topper/ko" title="Timeless Topper/ko">
        절대 안 썩는 모자
       </a>
       <span style="font-weight:bold;">
        ·
       </span>
       <a href="/wiki/Dual-Core_Devil_Doll/ko" title="Dual-Core Devil Doll/ko">
        듀얼코어 저주 인형
       </a>
       <span style="font-weight:bold;">
        ·
       </span>
       [linkx]
       
       <span style="font-weight:bold;">
        ·
       </span>
       <a href="/wiki/Dry_Gulch_Gulp/ko" title="Dry Gulch Gulp/ko">
        갈증 '그 만'
       </a>
       <span style="font-weight:bold;">
        ·
       </span>
       [ahref]
       
       <span style="font-weight:bold;">
        ·
       </span>
       [ahref]
       
       <span style="font-weight:bold;">
        ·
       </span>
       [linkx]
       
       <span style="font-weight:bold;">
        ·
       </span>
       <a href="/wiki/Macho_Mann/ko" title="Macho Mann/ko">
        마초 만
       </a>
       <span style="font-weight:bold;">
        ·
       </span>
       [ahref]
       
       <span style="font-weight:bold;">
        ·
       </span>
       [linkx]
       
       <span style="font-weight:bold;">
        ·
       </span>
       [ahref]
       
       <span style="font-weight:bold;">
        ·
       </span>
       <a href="/wiki/Special_Eyes/ko" title="Special Eyes/ko">
        특별한 눈
       </a>
       <span style="font-weight:bold;">
        ·
       </span>
       [linkx]
       
       <span style="font-weight:bold;">
        ·
       </span>
       [linkx]
       
       <span style="font-weight:bold;">
        ·
       </span>
       [ahref]
       
       <span style="font-weight:bold;">
        ·
       </span>
       <a href="/wiki/Dogfighter/ko" title="Dogfighter/ko">
        격추전사
       </a>
       <span style="font-weight:bold;">
        ·
       </span>
       <a href="/wiki/Face_Full_of_Festive/ko" title="Face Full of Festive/ko">
        축제장식 면상
       </a>
       <span style="font-weight:bold;">
        ·
       </span>
       [linkx]
       
       <span style="font-weight:bold;">
        ·
       </span>
       [linkx]
       
       <span style="font-weight:bold;">
        ·
       </span>
       [ahref]
       
       <span style="font-weight:bold;">
        ·
       </span>
       <a href="/wiki/Mister_Bubbles/ko" title="Mister Bubbles/ko">
        방울머리 아저씨
       </a>
       <span style="font-weight:bold;">
        ·
       </span>
       <a href="/wiki/Scotch_Saver/ko" title="Scotch Saver/ko">
        탄압 구조원
       </a>
       <span style="font-weight:bold;">
        ·
       </span>
       <a href="/wiki/Trencher%27s_Topper/ko" title="Trencher's Topper/ko">
        참호병의 모자
       </a>
       <span style="font-weight:bold;">
        ·
       </span>
       [linkx]
       
       <span style="font-weight:bold;">
        ·
       </span>
       <a href="/wiki/Danger/ko" title="Danger/ko">
        위험
       </a>
       <span style="font-weight:bold;">
        ·
       </span>
       <a href="/wiki/Egghead%27s_Overalls/ko" title="Egghead's Overalls/ko">
        지식인의 멜빵바지
       </a>
       <span style="font-weight:bold;">
        ·
       </span>
       [linkx]
       
       <span style="font-weight:bold;">
        ·
       </span>
       [ahref]
       
       <span style="font-weight:bold;">
        ·
       </span>
       [linkx]
       
       <span style="font-weight:bold;">
        ·
       </span>
       <a href="/wiki/Lonesome_Loafers/ko" title="Lonesome Loafers/ko">
        왕따의 샌들
       </a>
       <span style="font-weight:bold;">
        ·
       </span>
       [ahref]
       
       <span style="font-weight:bold;">
        ·
       </span>
       [ahref]
       
       <span style="font-weight:bold;">
        ·
       </span>
       [linkx]
       
       <span style="font-weight:bold;">
        ·
       </span>
       <a href="/wiki/Beep_Man/ko" title="Beep Man/ko">
        빕 맨
       </a>
       <span style="font-weight:bold;">
        ·
       </span>
       [ahref]
       
       <span style="font-weight:bold;">
        ·
       </span>
       [ahref]
       
       <span style="font-weight:bold;">
        ·
       </span>
       [linkx]
       
       <span style="font-weight:bold;">
        ·
       </span>
       <a href="/wiki/Tiny_Texan/ko" title="Tiny Texan/ko">
        조그만 텍사스인
       </a>
       <span style="font-weight:bold;">
        ·
       </span>
       [linkx]
       
       <span style="font-weight:bold;">
        ·
       </span>
       [linkx]
       
       <span style="font-weight:bold;">
        ·
       </span>
       [ahref]
       
       <span style="font-weight:bold;">
        ·
       </span>
       [ahref]
       
       <span style="font-weight:bold;">
        ·
       </span>
       [linkx]
       
       <span style="font-weight:bold;">
        ·
       </span>
       [ahref]
       
       <span style="font-weight:bold;">
        ·
       </span>
       [linkx]
       
       <span style="font-weight:bold;">
        ·
       </span>
       [linkx]
       
       <span style="font-weight:bold;">
        ·
       </span>
       [ahref]
       
       <span style="font-weight:bold;">
        ·
       </span>
       [ahref]
       
       <span style="font-weight:bold;">
        ·
       </span>
       [linkx]
       
       <span style="font-weight:bold;">
        ·
       </span>
       <a href="/wiki/Rocket_Operator/ko" title="Rocket Operator/ko">
        로켓 기술자
       </a>
       <span style="font-weight:bold;">
        ·
       </span>
       <a href="/wiki/El_Caballero/ko" title="El Caballero/ko">
        말 탄 소몰이꾼
       </a>
       <span style="font-weight:bold;">
        ·
       </span>
       [ahref]
       
       <span style="font-weight:bold;">
        ·
       </span>
       [ahref]
       
       <span style="font-weight:bold;">
        ·
       </span>
       [linkx]
       
       <span style="font-weight:bold;">
        ·
       </span>
       [linkx]
       
       <span style="font-weight:bold;">
        ·
       </span>
       [linkx]
       
       <span style="font-weight:bold;">
        ·
       </span>
       [linkx]
       
       <span style="font-weight:bold;">
        ·
       </span>
       <a href="/wiki/Teufort_Knight/ko" title="Teufort Knight/ko">
        투포트 나이트
       </a>
       <span style="font-weight:bold;">
        ·
       </span>
       [linkx]
       
       <span style="font-weight:bold;">
        ·
       </span>
       <a href="/wiki/Dad_Duds/ko" title="Dad Duds/ko">
        샤이닝 아재
       </a>
       <span style="font-weight:bold;">
        ·
       </span>
       [ahref]
       
       <span style="font-weight:bold;">
        ·
       </span>
       [linkx]
       
       <span style="font-weight:bold;">
        ·
       </span>
       <a href="/wiki/Final_Frontier_Freighter/ko" title="Final Frontier Freighter/ko">
        Final Frontier Freighter
       </a>
       <span style="font-weight:bold;">
        ·
       </span>
       <a href="/wiki/Wide-Brimmed_Bandito/ko" title="Wide-Brimmed Bandito/ko">
        넓은 챙모자 노상강도
       </a>
       <span style="font-weight:bold;">
        ·
       </span>
       [linkx]
       
       <span style="font-weight:bold;">
        ·
       </span>
       [ahref]
       
       <span style="font-weight:bold;">
        ·
       </span>
       [linkx]
       
       <span style="font-weight:bold;">
        ·
       </span>
       [linkx]
       
       <span style="font-weight:bold;">
        ·
       </span>
       [ahref]
       
       <span style="font-weight:bold;">
        ·
       </span>
       [ahref]
       
       <span style="font-weight:bold;">
        ·
       </span>
       <a href="/wiki/Conaghers%27_Utility_Idol/ko" title="Conaghers' Utility Idol/ko">
        Conaghers' Utility Idol
       </a>
       <span style="font-weight:bold;">
        ·
       </span>
       [ahref]
       
       <span style="font-weight:bold;">
        ·[keywordx]<li>[linkx]</li>[pkeyx][pkeyx]
       </span>
       <a href="/wiki/Trucker%27s_Topper/ko" title="Trucker's Topper/ko">
        Trucker's Topper
       </a>
       <span style="font-weight:bold;">
        ·
       </span>
       [ahref]
       
       <span style="font-weight:bold;">
        ·
       </span>
       <a href="/wiki/Antarctic_Eyewear/ko" title="Antarctic Eyewear/ko">
        Antarctic Eyewear
       </a>
       <span style="font-weight:bold;">
        ·
       </span>
       [ahref]
       
       <span style="font-weight:bold;">
        ·
       </span>
       [ahref]
       
       <span style="font-weight:bold;">
        ·
       </span>
       [ahref]
       
       <span style="font-weight:bold;">
        ·
       </span>
       [ahref]
       
       <span style="font-weight:bold;">
        ·
       </span>
       <a href="/wiki/Mini-Engy/ko" title="Mini-Engy/ko">
        Mini-Engy
       </a>
       <span style="font-weight:bold;">
        ·
       </span>
       [ahref]
       
       <span style="font-weight:bold;">
        ·
       </span>
       <a class="new" href="/w/index.php?title=Wise_Whiskers/ko&amp;action=edit&amp;redlink=1" title="Wise Whiskers/ko (page does not exist)">
        Wise Whiskers
       </a>
      </div>
     </td>
    </tr>
    <tr style="height:2px">
     <td>
     </td>
    </tr>
    <tr>
     <td class="navbox-group" style=";background: #f9d483; width: 5%; text-align: center; font-size: 105%; padding: 0.75em;;">
      [linkx]
      
      [ahref]
      
     </td>
     <td class="navbox-list navbox-odd" style="text-align:left;border-left-width:2px;border-left-style:solid;width:100%;padding:0px;;;">
      <div style="padding:0em 0.25em">
       [ahref]
       
       <span style="font-weight:bold;">
        ·
       </span>
       [ahref]
       
       <span style="font-weight:bold;">
        ·
       </span>
       [linkx]
       
       <span style="font-weight:bold;">
        ·
       </span>
       [linkx]
       
       <span style="font-weight:bold;">
        ·
       </span>
       <a href="/wiki/Gentleman%27s_Gatsby/ko" title="Gentleman's Gatsby/ko">
        신사 개츠비
       </a>
       <span style="font-weight:bold;">
        ·
       </span>
       <a href="/wiki/Ze_Goggles/ko" title="Ze Goggles/ko">
        제트 고글
       </a>
       <span style="font-weight:bold;">
        ·
       </span>
       [linkx]
       
       <span style="font-weight:bold;">
        ·
       </span>
       [ahref]
       
       <span style="font-weight:bold;">
        ·
       </span>
       <a href="/wiki/German_Gonzila/ko" title="German Gonzila/ko">
        독일 곤질라
       </a>
       <span style="font-weight:bold;">
        ·
       </span>
       <a href="/wiki/Geisha_Boy/ko" title="Geisha Boy/ko">
        게이샤 아저씨
       </a>
       <span style="font-weight:bold;">
        ·
       </span>
       [ahref]
       
       <span style="font-weight:bold;">
        ·
       </span>
       [linkx]
       
       <span style="font-weight:bold;">
        ·
       </span>
       [ahref]
       
       <span style="font-weight:bold;">
        ·
       </span>
       <a href="/wiki/Doctor%27s_Sack/ko" title="Doctor's Sack/ko">
        의사의 얼음주머니
       </a>
       <span style="font-weight:bold;">
        ·
       </span>
       [linkx]
       
       <span style="font-weight:bold;">
        ·
       </span>
       <a href="/wiki/Planeswalker_Helm/ko" title="Planeswalker Helm/ko">
        플레인스워커 투구
       </a>
       <span style="font-weight:bold;">
        ·
       </span>
       [linkx]
       
       <span style="font-weight:bold;">
        ·
       </span>
       [ahref]
       
       <span style="font-weight:bold;">
        ·
       </span>
       <a href="/wiki/Surgeon%27s_Stethoscope/ko" title="Surgeon's Stethoscope/ko">
        군의관의 청진기
       </a>
       <span style="font-weight:bold;">
        ·
       </span>
       [linkx]
       
       <span style="font-weight:bold;">
        ·
       </span>
       [ahref]
       
       <span style="font-weight:bold;">
        ·
       </span>
       [linkx]
       
       <span style="font-weight:bold;">
        ·
       </span>
       [ahref]
       
       <span style="font-weight:bold;">
        ·
       </span>
       <a href="/wiki/All-Father/ko" title="All-Father/ko">
        만물의 아버지
       </a>
       <span style="font-weight:bold;">
        ·
       </span>
       <a href="/wiki/Nine-Pipe_Problem/ko" title="Nine-Pipe Problem/ko">
        파이프 담배 9개짜리 문제
       </a>
       <span style="font-weight:bold;">
        ·
       </span>
       <a href="/wiki/Scrap_Pack/ko" title="Scrap Pack/ko">
        고물 상자
       </a>
       <span style="font-weight:bold;">
        ·
       </span>
       [linkx]
       
       <span style="font-weight:bold;">
        ·
       </span>
       [ahref]
       
       <span style="font-weight:bold;">
        ·
       </span>
       [ahref]
       
       <span style="font-weight:bold;">
        ·
       </span>
       [ahref]
       
       <span style="font-weight:bold;">
        ·
       </span>
       <a href="/wiki/Medic_Mech-bag/ko" title="Medic Mech-bag/ko">
        의무병용 기계 장치 가방
       </a>
       <span style="font-weight:bold;">
        ·
       </span>
       <a href="/wiki/Crafty_Hair/ko" title="Crafty Hair/ko">
        교묘한 머리카락
       </a>
       <span style="font-weight:bold;">
        ·
       </span>
       <a href="/wiki/Medi-Mask/ko" title="Medi-Mask/ko">
        의료용 방독면
       </a>
       <span style="font-weight:bold;">
        ·
       </span>
       <a href="/wiki/Combat_Medic%27s_Crusher_Cap/ko" title="Combat Medic's Crusher Cap/ko">
        전투 메딕의 크러셔 모자
       </a>
       <span style="font-weight:bold;">
        ·
       </span>
       <a href="/wiki/Foppish_Physician/ko" title="Foppish Physician/ko">
        멋쟁이 내과의
       </a>
       <span style="font-weight:bold;">
        ·
       </span>
       <a href="/wiki/Voodoo-Cursed_Medic_Soul/ko" title="Voodoo-Cursed Medic Soul/ko">
        부두교의 저주를 받은 메딕의 영혼
       </a>
       <span style="font-weight:bold;">
        ·
       </span>
       [linkx]
       
       <span style="font-weight:bold;">
        ·
       </span>
       [linkx]
       
       <span style="font-weight:bold;">
        ·
       </span>
       [linkx]
       
       <span style="font-weight:bold;">
        ·
       </span>
       [linkx]
       
       <span style="font-weight:bold;">
        ·
       </span>
       [linkx]
       
       <span style="font-weight:bold;">
        ·
       </span>
       <a href="/wiki/Byte%27d_Beak/ko" title="Byte'd Beak/ko">
        말라'비트'러진 부리
       </a>
       <span style="font-weight:bold;">
        ·
       </span>
       [linkx]
       
       <span style="font-weight:bold;">
        ·
       </span>
       <a href="/wiki/Mecha-Medes/ko" title="Mecha-Medes/ko">
        기계메데스
       </a>
       <span style="font-weight:bold;">
        ·
       </span>
       [ahref]
       
       <span style="font-weight:bold;">
        ·
       </span>
       [ahref]
       
       <span style="font-weight:bold;">
        ·
       </span>
       <a href="/wiki/Steam_Pipe/ko" title="Steam Pipe/ko">
        Steam Pipe
       </a>
       <span style="font-weight:bold;">
        ·
       </span>
       [ahref]
       
       <span style="font-weight:bold;">
        ·
       </span>
       [linkx]
       
       <span style="font-weight:bold;">
        ·
       </span>
       <a href="/wiki/Weather_Master/ko" title="Weather Master/ko">
        날씨의 지배자
       </a>
       <span style="font-weight:bold;">
        ·
       </span>
       [linkx]
       
       <span style="font-weight:bold;">
        ·
       </span>
       [ahref]
       
       <span style="font-weight:bold;">
        ·
       </span>
       [linkx]
       
       <span style="font-weight:bold;">
        ·
       </span>
       [ahref]
       
       <span style="font-weight:bold;">
        ·
       </span>
       [linkx]
       
       <span style="font-weight:bold;">
        ·
       </span>
       [ahref]
       
       <span style="font-weight:bold;">
        ·
       </span>
       <a href="/wiki/Das_Maddendoktor/ko" title="Das Maddendoktor/ko">
        다스 미췬으사양봔
       </a>
       <span style="font-weight:bold;">
        ·
       </span>
       [ahref]
       
       <span style="font-weight:bold;">
        ·
       </span>
       <a href="/wiki/Das_Naggenvatcher/ko" title="Das Naggenvatcher/ko">
        다스 고르통보호기
       </a>
       <span style="font-weight:bold;">
        ·
       </span>
       <a href="/wiki/Das_Ubersternmann/ko" title="Das Ubersternmann/ko">
        다스 조나엄수칸양봔
       </a>
       <span style="font-weight:bold;">
        ·
       </span>
       [linkx]
       
       <span style="font-weight:bold;">
        ·
       </span>
       <a href="/wiki/A_Brush_with_Death/ko" title="A Brush with Death/ko">
        스쳐 지나간 죽음
       </a>
       <span style="font-weight:bold;">
        ·
       </span>
       [linkx]
       
       <span style="font-weight:bold;">
        ·
       </span>
       [linkx]
       
       <span style="font-weight:bold;">
        ·
       </span>
       [linkx]
       
       <span style="font-weight:bold;">
        ·
       </span>
       <a href="/wiki/Alternative_Medicine_Mann/ko" title="Alternative Medicine Mann/ko">
        대체 의학'만' 시술자
       </a>
       <span style="font-weight:bold;">
        ·
       </span>
       <a href="/wiki/Archimedes_the_Undying/ko" title="Archimedes the Undying/ko">
        불멸의 아르키메데스
       </a>
       <span style="font-weight:bold;">
        ·
       </span>
       [ahref]
       
       <span style="font-weight:bold;">
        ·
       </span>
       [ahref]
       
       <span style="font-weight:bold;">
        ·
       </span>
       <a href="/wiki/Medimedes/ko" title="Medimedes/ko">
        메디메데스
       </a>
       <span style="font-weight:bold;">
        ·
       </span>
       [ahref]
       
       <span style="font-weight:bold;">
        ·
       </span>
       [ahref]
       
       <span style="font-weight:bold;">
        ·
       </span>
       [linkx]
       
       <span style="font-weight:bold;">
        ·
       </span>
       <a href="/wiki/Surgeon%27s_Space_Suit/ko" title="Surgeon's Space Suit/ko">
        군의관의 우주복
       </a>
       <span style="font-weight:bold;">
        ·
       </span>
       [ahref]
       
       <span style="font-weight:bold;">
        ·
       </span>
       [linkx]
       
       <span style="font-weight:bold;">
        ·
       </span>
       [linkx]
       
       <span style="font-weight:bold;">
        ·
       </span>
       [ahref]
       
       <span style="font-weight:bold;">
        ·
       </span>
       [ahref]
       
       <span style="font-weight:bold;">
        ·
       </span>
       <a href="/wiki/Nunhood/ko" title="Nunhood/ko">
        수녀임 후드
       </a>
       <span style="font-weight:bold;">
        ·
       </span>
       <a href="/wiki/Ruffled_Ruprecht/ko" title="Ruffled Ruprecht/ko">
        헝클어진 루프레히트
       </a>
       <span style="font-weight:bold;">
        ·
       </span>
       [ahref]
       
       <span style="font-weight:bold;">
        ·
       </span>
       [linkx]
       
       <span style="font-weight:bold;">
        ·
       </span>
       <a href="/wiki/Fashionable_Megalomaniac/ko" title="Fashionable Megalomaniac/ko">
        멋들어진 과대망상자
       </a>
       <span style="font-weight:bold;">
        ·
       </span>
       [ahref]
       
       <span style="font-weight:bold;">
        ·
       </span>
       [ahref]
       
       <span style="font-weight:bold;">
        ·
       </span>
       [ahref]
       
       <span style="font-weight:bold;">
        ·
       </span>
       [ahref]
       
       <span style="font-weight:bold;">
        ·
       </span>
       <a href="/wiki/Teutonic_Toque/ko" title="Teutonic Toque/ko">
        게르만식 요리사 모자
       </a>
       <span style="font-weight:bold;">
        ·
       </span>
       [linkx]
       
       <span style="font-weight:bold;">
        ·
       </span>
       <a href="/wiki/Medicine_Manpurse/ko" title="Medicine Manpurse/ko">
        진료가방
       </a>
       <span style="font-weight:bold;">
        ·
       </span>
       [linkx]
       
       <span style="font-weight:bold;">
        ·
       </span>
       [ahref]
       
       <span style="font-weight:bold;">
        ·
       </span>
       <a href="/wiki/Hundkopf/ko" title="Hundkopf/ko">
        개머리
       </a>
       <span style="font-weight:bold;">
        ·
       </span>
       <a href="/wiki/Herzensbrecher/ko" title="Herzensbrecher/ko">
        심장파쇄기
       </a>
       <span style="font-weight:bold;">
        ·
       </span>
       <a href="/wiki/Kriegsmaschine-9000/ko" title="Kriegsmaschine-9000/ko">
        전쟁기계 9000
       </a>
       <span style="font-weight:bold;">
        ·
       </span>
       [linkx]
       
       <span style="font-weight:bold;">
        ·
       </span>
       [linkx]
       
       <span style="font-weight:bold;">
        ·
       </span>
       [ahref]
       
       <span style="font-weight:bold;">
        ·
       </span>
       [ahref]
       
       <span style="font-weight:bold;">
        ·
       </span>
       [ahref]
       
       <span style="font-weight:bold;">
        ·
       </span>
       [linkx]
       
       <span style="font-weight:bold;">
        ·
       </span>
       [linkx]
       
       <span style="font-weight:bold;">
        ·
       </span>
       <a href="/wiki/Vascular_Vestment/ko" title="Vascular Vestment/ko">
        혈관용 제의
       </a>
       <span style="font-weight:bold;">
        ·
       </span>
       [ahref]
       
       <span style="font-weight:bold;">
        ·
       </span>
       [linkx]
       
       <span style="font-weight:bold;">
        ·
       </span>
       [linkx]
       
       <span style="font-weight:bold;">
        ·
       </span>
       [ahref]
       
       <span style="font-weight:bold;">
        ·
       </span>
       [linkx]
       
       <span style="font-weight:bold;">
        ·
       </span>
       [ahref]
       
       <span style="font-weight:bold;">
        ·
       </span>
       [ahref]
       
       <span style="font-weight:bold;">
        ·
       </span>
       [linkx]
       
       <span style="font-weight:bold;">
        ·
       </span>
       [ahref]
       
       <span style="font-weight:bold;">
        ·
       </span>
       [linkx]
       
       <span style="font-weight:bold;">
        ·
       </span>
       [ahref]
       
       <span style="font-weight:bold;">
        ·
       </span>
       [ahref]
       
       <span style="font-weight:bold;">
        ·
       </span>
       [ahref]
       
       <span style="font-weight:bold;">
        ·
       </span>
       <a href="/wiki/Vitals_Vest/ko" title="Vitals Vest/ko">
        Vitals Vest
       </a>
       <span style="font-weight:bold;">
        ·
       </span>
       [ahref]
       
       <span style="font-weight:bold;">
        ·
       </span>
       <a href="/wiki/Coldfront_Carapace/ko" title="Coldfront Carapace/ko">
        Coldfront Carapace
       </a>
       <span style="font-weight:bold;">
        ·
       </span>
       [linkx]
       
       <span style="font-weight:bold;">
        ·
       </span>
       [ahref]
       
       <span style="font-weight:bold;">
        ·
       </span>
       [linkx]
       
       <span style="font-weight:bold;">
        ·
       </span>
       [ahref]
       
       <span style="font-weight:bold;">
        ·
       </span>
       [ahref]
       
      </div>
     </td>
    </tr>
    <tr style="height:2px">
     <td>
     </td>
    </tr>
    <tr>
     <td class="navbox-group" style=";background: #f9d483; width: 5%; text-align: center; font-size: 105%; padding: 0.75em;;">
      [linkx]
      
      [linkx]
      
     </td>
     <td class="navbox-list navbox-even" style="text-align:left;border-left-width:2px;border-left-style:solid;width:100%;padding:0px;;;">
      <div style="padding:0em 0.25em">
       [ahref]
       
       <span style="font-weight:bold;">
        ·
       </span>
       <a href="/wiki/Master%27s_Yellow_Belt/ko" title="Master's Yellow Belt/ko">
        달인의 노란 머리띠
       </a>
       <span style="font-weight:bold;">
        ·
       </span>
       <a href="/wiki/Professional%27s_Panama/ko" title="Professional's Panama/ko">
        전문가의 파나마 모자
       </a>
       <span style="font-weight:bold;">
        ·
       </span>
       [linkx]
       
       <span style="font-weight:bold;">
        ·
       </span>
       [ahref]
       
       <span style="font-weight:bold;">
        ·
       </span>
       [linkx]
       
       <span style="font-weight:bold;">
        ·
       </span>
       <a href="/wiki/Ol%27_Snaggletooth/ko" title="Ol' Snaggletooth/ko">
        오래된 덧니
       </a>
       <span style="font-weight:bold;">
        ·
       </span>
       [linkx]
       
       <span style="font-weight:bold;">
        ·
       </span>
       [ahref]
       
       <span style="font-weight:bold;">
        ·
       </span>
       <a href="/wiki/Villain%27s_Veil/ko" title="Villain's Veil/ko">
        악인의 복면
       </a>
       <span style="font-weight:bold;">
        ·
       </span>
       <a href="/wiki/Desert_Marauder/ko" title="Desert Marauder/ko">
        사막의 약탈자
       </a>
       <span style="font-weight:bold;">
        ·
       </span>
       <a href="/wiki/Anger/ko" title="Anger/ko">
        앵거
       </a>
       <span style="font-weight:bold;">
        ·
       </span>
       [ahref]
       
       <span style="font-weight:bold;">
        ·
       </span>
       <a href="/wiki/Crocodile_Smile/ko" title="Crocodile Smile/ko">
        악어의 미소
       </a>
       <span style="font-weight:bold;">
        ·
       </span>
       <strong class="selflink">
        이름없는 모자
       </strong>
       <span style="font-weight:bold;">
        ·
       </span>
       [ahref]
       
       <span style="font-weight:bold;">
        ·
       </span>
       [linkx]
       
       <span style="font-weight:bold;">
        ·
       </span>
       [ahref]
       
       <span style="font-weight:bold;">
        ·
       </span>
       [ahref]
       
       <span style="font-weight:bold;">
        ·
       </span>
       [linkx]
       
       <span style="font-weight:bold;">
        ·
       </span>
       <a href="/wiki/Itsy_Bitsy_Spyer/ko" title="Itsy Bitsy Spyer/ko">
        자그만 조그만 스파이
       </a>
       <span style="font-weight:bold;">
        ·
       </span>
       <a href="/wiki/All-Father/ko" title="All-Father/ko">
        만물의 아버지
       </a>
       <span style="font-weight:bold;">
        ·
       </span>
       [ahref]
       
       <span style="font-weight:bold;">
        ·
       </span>
       [ahref]
       
       <span style="font-weight:bold;">
        ·
       </span>
       [linkx]
       
       <span style="font-weight:bold;">
        ·
       </span>
       <a href="/wiki/Fruit_Shoot/ko" title="Fruit Shoot/ko">
        과일을 향해 쏴라
       </a>
       <span style="font-weight:bold;">
        ·
       </span>
       [linkx]
       
       <span style="font-weight:bold;">
        ·
       </span>
       [ahref]
       
       <span style="font-weight:bold;">
        ·
       </span>
       [linkx]
       
       <span style="font-weight:bold;">
        ·
       </span>
       <a href="/wiki/Liquidator%27s_Lid/ko" title="Liquidator's Lid/ko">
        청산인의 머리덮개
       </a>
       <span style="font-weight:bold;">
        ·
       </span>
       <a href="/wiki/Lone_Star/ko" title="Lone Star/ko">
        론 스타
       </a>
       <span style="font-weight:bold;">
        ·
       </span>
       [ahref]
       
       <span style="font-weight:bold;">
        ·
       </span>
       <a href="/wiki/Triad_Trinket/ko" title="Triad Trinket/ko">
        삼합회의 싸구려 장신구
       </a>
       <span style="font-weight:bold;">
        ·
       </span>
       [linkx]
       
       <span style="font-weight:bold;">
        ·
       </span>
       [linkx]
       
       <span style="font-weight:bold;">
        ·
       </span>
       [ahref]
       
       <span style="font-weight:bold;">
        ·
       </span>
       [ahref]
       
       <span style="font-weight:bold;">
        ·
       </span>
       [ahref]
       
       <span style="font-weight:bold;">
        ·
       </span>
       <a href="/wiki/Voodoo-Cursed_Sniper_Soul/ko" title="Voodoo-Cursed Sniper Soul/ko">
        부두교의 저주를 받은 스나이퍼의 영혼
       </a>
       <span style="font-weight:bold;">
        ·
       </span>
       [ahref]
       
       <span style="font-weight:bold;">
        ·
       </span>
       [linkx]
       
       <span style="font-weight:bold;">
        ·
       </span>
       [ahref]
       
       <span style="font-weight:bold;">
        ·
       </span>
       <a href="/wiki/Steel_Songbird/ko" title="Steel Songbird/ko">
        강철 송버드
       </a>
       <span style="font-weight:bold;">
        ·
       </span>
       <a href="/wiki/Sydney_Straw_Boat/ko" title="Sydney Straw Boat/ko">
        시드니 보터 모자
       </a>
       <span style="font-weight:bold;">
        ·
       </span>
       [ahref]
       
       <span style="font-weight:bold;">
        ·
       </span>
       [linkx]
       
       <span style="font-weight:bold;">
        ·
       </span>
       [linkx]
       
       <span style="font-weight:bold;">
        ·
       </span>
       [linkx]
       
       <span style="font-weight:bold;">
        ·
       </span>
       [ahref]
       
       <span style="font-weight:bold;">
        ·
       </span>
       [linkx]
       
       <span style="font-weight:bold;">
        ·
       </span>
       <a href="/wiki/Cobber_Chameleon/ko" title="Cobber Chameleon/ko">
        카멜레온 벗
       </a>
       <span style="font-weight:bold;">
        ·
       </span>
       [ahref]
       
       <span style="font-weight:bold;">
        ·
       </span>
       [linkx]
       
       <span style="font-weight:bold;">
        ·
       </span>
       [linkx]
       
       <span style="font-weight:bold;">
        ·
       </span>
       [ahref]
       
       <span style="font-weight:bold;">
        ·
       </span>
       [ahref]
       
       <span style="font-weight:bold;">
        ·
       </span>
       [linkx]
       
       <span style="font-weight:bold;">
        ·
       </span>
       [linkx]
       
       <span style="font-weight:bold;">
        ·
       </span>
       [ahref]
       
       <span style="font-weight:bold;">
        ·
       </span>
       <a href="/wiki/Sir_Shootsalot/ko" title="Sir Shootsalot/ko">
        사격의 기사
       </a>
       <span style="font-weight:bold;">
        ·
       </span>
       [ahref]
       
       <span style="font-weight:bold;">
        ·
       </span>
       [linkx]
       
       <span style="font-weight:bold;">
        ·
       </span>
       <a href="/wiki/Smissmas_Caribou/ko" title="Smissmas Caribou/ko">
        스미스마스 순록
       </a>
       <span style="font-weight:bold;">
        ·
       </span>
       [ahref]
       
       <span style="font-weight:bold;">
        ·
       </span>
       [ahref]
       
       <span style="font-weight:bold;">
        ·
       </span>
       <a href="/wiki/Golden_Garment/ko" title="Golden Garment/ko">
        운치 있는 의복
       </a>
       <span style="font-weight:bold;">
        ·
       </span>
       [linkx]
       
       <span style="font-weight:bold;">
        ·
       </span>
       [ahref]
       
       <span style="font-weight:bold;">
        ·
       </span>
       [linkx]
       
       <span style="font-weight:bold;">
        ·
       </span>
       <a href="/wiki/Huntsman%27s_Essentials/ko" title="Huntsman's Essentials/ko">
        헌츠맨의 필수요소
       </a>
       <span style="font-weight:bold;">
        ·
       </span>
       [linkx]
       
       <span style="font-weight:bold;">
        ·
       </span>
       [linkx]
       
       <span style="font-weight:bold;">
        ·
       </span>
       [linkx]
       
       <span style="font-weight:bold;">
        ·
       </span>
       [ahref]
       
       <span style="font-weight:bold;">
        ·
       </span>
       [ahref]
       
       <span style="font-weight:bold;">
        ·
       </span>
       [linkx]
       
       <span style="font-weight:bold;">
        ·
       </span>
       [ahref]
       
       <span style="font-weight:bold;">
        ·
       </span>
       [linkx]
       
       <span style="font-weight:bold;">
        ·
       </span>
       [ahref]
       
       <span style="font-weight:bold;">
        ·
       </span>
       [linkx]
       
       <span style="font-weight:bold;">
        ·
       </span>
       [linkx]
       
       <span style="font-weight:bold;">
        ·
       </span>
       [ahref]
       
       <span style="font-weight:bold;">
        ·
       </span>
       [ahref]
       
       <span style="font-weight:bold;">
        ·
       </span>
       [linkx]
       
       <span style="font-weight:bold;">
        ·
       </span>
       <a href="/wiki/Scaly_Scrapers/ko" title="Scaly Scrapers/ko">
        비늘투성이 긁개
       </a>
       <span style="font-weight:bold;">
        ·
       </span>
       [ahref]
       
       <span style="font-weight:bold;">
        ·
       </span>
       [ahref]
       
       <span style="font-weight:bold;">
        ·
       </span>
       [ahref]
       
       <span style="font-weight:bold;">
        ·
       </span>
       <a href="/wiki/Professional%27s_Ushanka/ko" title="Professional's Ushanka/ko">
        전문가의 방한모
       </a>
       <span style="font-weight:bold;">
        ·
       </span>
       [ahref]
       
       <span style="font-weight:bold;">
        ·
       </span>
       [linkx]
       
       <span style="font-weight:bold;">
        ·
       </span>
       [linkx]
       
       <span style="font-weight:bold;">
        ·
       </span>
       [linkx]
       
       <span style="font-weight:bold;">
        ·
       </span>
       [linkx]
       
       <span style="font-weight:bold;">
        ·
       </span>
       <a href="/wiki/Teufort_Knight/ko" title="Teufort Knight/ko">
        투포트 나이트
       </a>
       <span style="font-weight:bold;">
        ·
       </span>
       <a href="/wiki/Scoped_Spartan/ko" title="Scoped Spartan/ko">
        스파르탄 저격수
       </a>
       <span style="font-weight:bold;">
        ·
       </span>
       <a href="/wiki/Airborne_Attire/ko" title="Airborne Attire/ko">
        Airborne Attire
       </a>
       <span style="font-weight:bold;">
        ·
       </span>
       [ahref]
       
       <span style="font-weight:bold;">
        ·
       </span>
       [linkx]
       
       <span style="font-weight:bold;">
        ·
       </span>
       [ahref]
       
       <span style="font-weight:bold;">
        ·
       </span>
       <a href="/wiki/Hawk-Eyed_Hunter/ko" title="Hawk-Eyed Hunter/ko">
        Hawk-Eyed Hunter
       </a>
       <span style="font-weight:bold;">
        ·
       </span>
       <a href="/wiki/Bait_and_Bite/ko" title="Bait and Bite/ko">
        Bait and Bite
       </a>
       <span style="font-weight:bold;">
        ·
       </span>
       [ahref]
       
       <span style="font-weight:bold;">
        ·
       </span>
       [linkx]
       
       <span style="font-weight:bold;">
        ·
       </span>
       [ahref]
       
       <span style="font-weight:bold;">
        ·
       </span>
       [linkx]
       
       <span style="font-weight:bold;">
        ·
       </span>
       [linkx]
       
       <span style="font-weight:bold;">
        ·
       </span>
       <a href="/wiki/Handsome_Hitman/ko" title="Handsome Hitman/ko">
        Handsome Hitman
       </a>
       <span style="font-weight:bold;">
        ·
       </span>
       [ahref]
       
       <span style="font-weight:bold;">
        ·
       </span>
       <a href="/wiki/Down_Tundra_Coat/ko" title="Down Tundra Coat/ko">
        Down Tundra Coat
       </a>
       <span style="font-weight:bold;">
        ·
       </span>
       [ahref]
       
       <span style="font-weight:bold;">
        ·
       </span>
       <a href="/wiki/Head_Hedge/ko" title="Head Hedge/ko">
        Head Hedge
       </a>
       <span style="font-weight:bold;">
        ·
       </span>
       [linkx]
       
       <span style="font-weight:bold;">
        ·
       </span>
       <a href="/wiki/Highway_Star/ko" title="Highway Star/ko">
        Highway Star
       </a>
       <span style="font-weight:bold;">
        ·
       </span>
       <a href="/wiki/Scoper%27s_Scales/ko" title="Scoper's Scales/ko">
        Scoper's Scales
       </a>
      </div>
     </td>
    </tr>
    <tr style="height:2px">
     <td>
     </td>
    </tr>
    <tr>
     <td class="navbox-group" style=";background: #f9d483; width: 5%; text-align: center; font-size: 105%; padding: 0.75em;;">
      <a href="/wiki/Spy/ko" title="Spy/ko">
      </a>
      [ahref]
      
     </td>
     <td class="navbox-list navbox-odd" style="text-align:left;border-left-width:2px;border-left-style:solid;width:100%;padding:0px;;;">
      <div style="padding:0em 0.25em">
       <a href="/wiki/Fancy_Fedora/ko" title="Fancy Fedora/ko">
        멋진 중절모
       </a>
       <span style="font-weight:bold;">
        ·
       </span>
       [linkx]
       
       <span style="font-weight:bold;">
        ·
       </span>
       <a href="/wiki/Camera_Beard/ko" title="Camera Beard/ko">
        카메라 턱수염
       </a>
       <span style="font-weight:bold;">
        ·
       </span>
       [linkx]
       
       <span style="font-weight:bold;">
        ·
       </span>
       [ahref]
       
       <span style="font-weight:bold;">
        ·
       </span>
       [linkx]
       
       <span style="font-weight:bold;">
        ·
       </span>
       [linkx]
       
       <span style="font-weight:bold;">
        ·
       </span>
       [ahref]
       
       <span style="font-weight:bold;">
        ·
       </span>
       [linkx]
       
       <span style="font-weight:bold;">
        ·
       </span>
       [ahref]
       
       <span style="font-weight:bold;">
        ·
       </span>
       [ahref]
       
       <span style="font-weight:bold;">
        ·
       </span>
       <a href="/wiki/Janissary_Ketche/ko" title="Janissary Ketche/ko">
        예니체리 모자
       </a>
       <span style="font-weight:bold;">
        ·
       </span>
       [ahref]
       
       <span style="font-weight:bold;">
        ·
       </span>
       [ahref]
       
       <span style="font-weight:bold;">
        ·
       </span>
       [linkx]
       
       <span style="font-weight:bold;">
        ·
       </span>
       [ahref]
       
       <span style="font-weight:bold;">
        ·
       </span>
       [ahref]
       
       <span style="font-weight:bold;">
        ·
       </span>
       [linkx]
       
       <span style="font-weight:bold;">
        ·
       </span>
       <a href="/wiki/Spectre%27s_Spectacles/ko" title="Spectre's Spectacles/ko">
        안 보이는 악령의 안경
       </a>
       <span style="font-weight:bold;">
        ·
       </span>
       [ahref]
       
       <span style="font-weight:bold;">
        ·
       </span>
       [linkx]
       
       <span style="font-weight:bold;">
        ·
       </span>
       <a href="/wiki/Under_Cover/ko" title="Under Cover/ko">
        첩보 요원
       </a>
       <span style="font-weight:bold;">
        ·
       </span>
       [linkx]
       
       <span style="font-weight:bold;">
        ·
       </span>
       [ahref]
       
       <span style="font-weight:bold;">
        ·
       </span>
       [ahref]
       
       <span style="font-weight:bold;">
        ·
       </span>
       [linkx]
       
       <span style="font-weight:bold;">
        ·
       </span>
       [ahref]
       
       <span style="font-weight:bold;">
        ·
       </span>
       <a href="/wiki/Triad_Trinket/ko" title="Triad Trinket/ko">
        삼합회의 싸구려 장신구
       </a>
       <span style="font-weight:bold;">
        ·
       </span>
       [ahref]
       
       <span style="font-weight:bold;">
        ·
       </span>
       [linkx]
        [keywordx][ahref][ahref][pkeyx]
       
       <span style="font-weight:bold;">
        ·
       </span>
       [linkx]
       
       <span style="font-weight:bold;">
        ·
       </span>
       [ahref]
       
       <span style="font-weight:bold;">
        ·
       </span>
       [linkx]
       
       <span style="font-weight:bold;">
        ·
       </span>
       [linkx]
       
       <span style="font-weight:bold;">
        ·
       </span>
       <a href="/wiki/Scarecrow/ko" title="Scarecrow/ko">
        허수아비
       </a>
       <span style="font-weight:bold;">
        ·
       </span>
       [linkx]
       
       <span style="font-weight:bold;">
        ·
       </span>
       [ahref]
       
       <span style="font-weight:bold;">
        ·
       </span>
       [ahref]
       
       <span style="font-weight:bold;">
        ·
       </span>
       [ahref]
       
       <span style="font-weight:bold;">
        ·
       </span>
       [linkx]
       
       <span style="font-weight:bold;">
        ·
       </span>
       [ahref]
       
       <span style="font-weight:bold;">
        ·
       </span>
       [ahref]
       
       <span style="font-weight:bold;">
        ·
       </span>
       [ahref]
       
       <span style="font-weight:bold;">
        ·
       </span>
       [ahref]
       
       <span style="font-weight:bold;">
        ·
       </span>
       [linkx]
       
       <span style="font-weight:bold;">
        ·
       </span>
       [linkx]
       
       <span style="font-weight:bold;">
        ·
       </span>
       [linkx]
       
       <span style="font-weight:bold;">
        ·
       </span>
       [ahref]
       
       <span style="font-weight:bold;">
        ·
       </span>
       <a href="/wiki/Rogue%27s_Brogues/ko" title="Rogue's Brogues/ko">
        절도범의 '절도' 있는 브로그 구두
       </a>
       <span style="font-weight:bold;">
        ·
       </span>
       [linkx]
       
       <span style="font-weight:bold;">
        ·
       </span>
       [ahref]
       
       <span style="font-weight:bold;">
        ·
       </span>
       [linkx]
       
       <span style="font-weight:bold;">
        ·
       </span>
       [linkx]
       
       <span style="font-weight:bold;">
        ·
       </span>
       <a href="/wiki/Bountiful_Bow/ko" title="Bountiful Bow/ko">
        잘 나가는 나비 넥타이
       </a>
       <span style="font-weight:bold;">
        ·
       </span>
       [ahref]
       
       <span style="font-weight:bold;">
        ·
       </span>
       [ahref]
       
       <span style="font-weight:bold;">
        ·
       </span>
       [linkx]
       
       <span style="font-weight:bold;">
        ·
       </span>
       <a href="/wiki/Hyperbaric_Bowler/ko" title="Hyperbaric Bowler/ko">
        고압 중산모
       </a>
       <span style="font-weight:bold;">
        ·
       </span>
       [linkx]
       
       <span style="font-weight:bold;">
        ·
       </span>
       [linkx]
       
       <span style="font-weight:bold;">
        ·
       </span>
       [linkx]
       
       <span style="font-weight:bold;">
        ·
       </span>
       [linkx]
       
       <span style="font-weight:bold;">
        ·
       </span>
       [linkx]
       
       <span style="font-weight:bold;">
        ·
       </span>
       [ahref]
       
       <span style="font-weight:bold;">
        ·
       </span>
       [ahref]
       
       <span style="font-weight:bold;">
        ·
       </span>
       [ahref]
       
       <span style="font-weight:bold;">
        ·
       </span>
       [linkx]
       
       <span style="font-weight:bold;">
        ·
       </span>
       [linkx]
       
       <span style="font-weight:bold;">
        ·
       </span>
       <a href="/wiki/Facepeeler/ko" title="Facepeeler/ko">
        면상까기
       </a>
       <span style="font-weight:bold;">
        ·
       </span>
       [linkx]
       
       <span style="font-weight:bold;">
        ·
       </span>
       [linkx]
       
       <span style="font-weight:bold;">
        ·
       </span>
       [linkx]
       
       <span style="font-weight:bold;">
        ·
       </span>
       [linkx]
       
       <span style="font-weight:bold;">
        ·
       </span>
       [ahref]
       
       <span style="font-weight:bold;">
        ·
       </span>
       [ahref]
       
       <span style="font-weight:bold;">
        ·
       </span>
       <a href="/wiki/Lurker%27s_Leathers/ko" title="Lurker's Leathers/ko">
        잠복자의 가죽 재킷
       </a>
       <span style="font-weight:bold;">
        ·
       </span>
       [linkx]
       
       <span style="font-weight:bold;">
        ·
       </span>
       [ahref]
       
       <span style="font-weight:bold;">
        ·
       </span>
       [linkx]
       
       <span style="font-weight:bold;">
        ·
       </span>
       [linkx]
       
       <span style="font-weight:bold;">
        ·
       </span>
       [linkx]
       
       <span style="font-weight:bold;">
        ·
       </span>
       [linkx]
       
       <span style="font-weight:bold;">
        ·
       </span>
       [ahref]
       
       <span style="font-weight:bold;">
        ·
       </span>
       [linkx]
       
       <span style="font-weight:bold;">
        ·
       </span>
       [linkx]
       
       <span style="font-weight:bold;">
        ·
       </span>
       [linkx]
       
       <span style="font-weight:bold;">
        ·
       </span>
       [linkx]
       
       <span style="font-weight:bold;">
        ·
       </span>
       <a href="/wiki/Upgrade/ko" title="Upgrade/ko">
        Upgrade
       </a>
       <span style="font-weight:bold;">
        ·
       </span>
       <a href="/wiki/Aloha_Apparel/ko" title="Aloha Apparel/ko">
        Aloha Apparel
       </a>
       <span style="font-weight:bold;">
        ·
       </span>
       [ahref]
       
       <span style="font-weight:bold;">
        ·
       </span>
       [linkx]
       
       <span style="font-weight:bold;">
        ·
       </span>
       <a href="/wiki/Bandit%27s_Boots/ko" title="Bandit's Boots/ko">
        Bandit's Boots
       </a>
       <span style="font-weight:bold;">
        ·
       </span>
       [ahref]
       
       <span style="font-weight:bold;">
        ·
       </span>
       [ahref]
       
       <span style="font-weight:bold;">
        ·
       </span>
       [linkx]
       
      </div>
     </td>
    </tr>
    <tr style="height:2px">
     <td>
     </td>
    </tr>
    <tr>
     <td class="navbox-group" style=";background: #f9d483; width: 5%; text-align: center; font-size: 105%; padding: 0.75em;;">
      [linkx]
      
     </td>
     <td class="navbox-list navbox-even" style="text-align:left;border-left-width:2px;border-left-style:solid;width:100%;padding:0px;;;">
      <div style="padding:0em 0.25em">
       [linkx]
       
       <span style="font-weight:bold;">
        ·
       </span>
       [linkx]
       
       <span style="font-weight:bold;">
        ·
       </span>
       [linkx]
       
       <span style="font-weight:bold;">
        ·
       </span>
       [ahref]
       
       <span style="font-weight:bold;">
        ·
       </span>
       <a href="/wiki/Towering_Pillar_of_Hats/ko" title="Towering Pillar of Hats/ko">
        우뚝 솟은 모자 기둥
       </a>
       <span style="font-weight:bold;">
        ·
       </span>
       [linkx]
       
       <span style="font-weight:bold;">
        ·
       </span>
       <a href="/wiki/Amber%27s_Rad_As_All_Hell_Hat/ko" title="Amber's Rad As All Hell Hat/ko">
        앰버의 끝내주는 모자
       </a>
       <span style="font-weight:bold;">
        ·
       </span>
       [ahref]
       
       <span style="font-weight:bold;">
        ·
       </span>
       [linkx]
       
       <span style="font-weight:bold;">
        ·
       </span>
       119번째 훈장 (
       <a href="/wiki/Mercenary/ko" title="Mercenary/ko">
        <span id="tooltip" style="cursor:help; border-bottom:1px dotted;" title="용병">
         용
        </span>
       </a>
       <span style="font-weight:bold;">
        ·
       </span>
       [ahref]
       
       <span style="font-weight:bold;">
        ·
       </span>
       [linkx]
       
       <span style="font-weight:bold;">
        ·
       </span>
       <a href="/wiki/Primeval_Warrior/ko" title="Primeval Warrior/ko">
        <span id="tooltip" style="cursor:help; border-bottom:1px dotted;" title="태고의 전사">
         태
        </span>
       </a>
       )
       <span style="font-weight:bold;">
        ·
       </span>
       [ahref]
       
       <span style="font-weight:bold;">
        ·
       </span>
       [linkx]
       
       <span style="font-weight:bold;">
        ·
       </span>
       <a href="/wiki/Wiki_Cap/ko" title="Wiki Cap/ko">
        위키 모자
       </a>
       <span style="font-weight:bold;">
        ·
       </span>
       [ahref]
       
       <span style="font-weight:bold;">
        ·
       </span>
       [linkx]
       
       <span style="font-weight:bold;">
        ·
       </span>
       [ahref]
       
       (
       [linkx]
       
       <span style="font-weight:bold;">
        ·
       </span>
       [linkx]
       
       <span style="font-weight:bold;">
        ·
       </span>
       [ahref]
       
       <span style="font-weight:bold;">
        ·
       </span>
       [ahref]
       
       )
       <span style="font-weight:bold;">
        ·
       </span>
       [ahref]
       
       <span style="font-weight:bold;">
        ·
       </span>
       [ahref]
       
       <span style="font-weight:bold;">
        ·
       </span>
       [linkx]
       
       <span style="font-weight:bold;">
        ·
       </span>
       <a href="/wiki/License_to_Maim/ko" title="License to Maim/ko">
        불구 만들기 허가증
       </a>
       <span style="font-weight:bold;">
        ·
       </span>
       <a href="/wiki/Bounty_Hat/ko" title="Bounty Hat/ko">
        상금 모자
       </a>
       <span style="font-weight:bold;">
        ·
       </span>
       [linkx]
       
       <span style="font-weight:bold;">
        ·
       </span>
       <a href="/wiki/Hat_of_Undeniable_Wealth_And_Respect/ko" title="Hat of Undeniable Wealth And Respect/ko">
        부정할 수 없는 부와 경의의 모자
       </a>
       <span style="font-weight:bold;">
        ·
       </span>
       [linkx]
       
       <span style="font-weight:bold;">
        ·
       </span>
       [linkx]
       
       <span style="font-weight:bold;">
        ·
       </span>
       [ahref]
       
       <span style="font-weight:bold;">
        ·
       </span>
       [linkx]
       
       <span style="font-weight:bold;">
        ·
       </span>
       [ahref]
       
       <span style="font-weight:bold;">
        ·
       </span>
       [linkx]
       
       <span style="font-weight:bold;">
        ·
       </span>
       <a href="/wiki/Aperture_Labs_Hard_Hat/ko" title="Aperture Labs Hard Hat/ko">
        애퍼처 실험실 안전모
       </a>
       <span style="font-weight:bold;">
        ·
       </span>
       [ahref]
       
       <span style="font-weight:bold;">
        ·
       </span>
       <a href="/wiki/SpaceChem_Pin/ko" title="SpaceChem Pin/ko">
        SpaceChem 장식핀
       </a>
       <span style="font-weight:bold;">
        ·
       </span>
       [linkx]
       
       <span style="font-weight:bold;">
        ·
       </span>
       <a href="/wiki/Lo-Fi_Longwave/ko" title="Lo-Fi Longwave/ko">
        저음질 장파
       </a>
       <span style="font-weight:bold;">
        ·
       </span>
       <a href="/wiki/Spiral_Sallet/ko" title="Spiral Sallet/ko">
        스파이럴 투구
       </a>
       <span style="font-weight:bold;">
        ·
       </span>
       [ahref]
       
       <span style="font-weight:bold;">
        ·
       </span>
       <a href="/wiki/Proof_of_Purchase/ko" title="Proof of Purchase/ko">
        구매 증명
       </a>
       <span style="font-weight:bold;">
        ·
       </span>
       [linkx]
       
       <span style="font-weight:bold;">
        ·
       </span>
       [linkx]
       
       <span style="font-weight:bold;">
        ·
       </span>
       <a href="/wiki/Dr._Grordbort%27s_Crest/ko" title="Dr. Grordbort's Crest/ko">
        그로드보트 박사의 문장
       </a>
       <span style="font-weight:bold;">
        ·
       </span>
       [linkx]
       
       <span style="font-weight:bold;">
        ·
       </span>
       [linkx]
       
       <span style="font-weight:bold;">
        ·
       </span>
       [linkx]
       
       <span style="font-weight:bold;">
        ·
       </span>
       <a href="/wiki/Killer_Exclusive/ko" title="Killer Exclusive/ko">
        살인 특종
       </a>
       <span style="font-weight:bold;">
        ·
       </span>
       <a href="/wiki/Clan_Pride/ko" title="Clan Pride/ko">
        가문의 영광
       </a>
       <span style="font-weight:bold;">
        ·
       </span>
       <a href="/wiki/Flair!/ko" title="Flair!/ko">
        아주 좋소!
       </a>
       <span style="font-weight:bold;">
        ·
       </span>
       [ahref]
       
       <span style="font-weight:bold;">
        ·
       </span>
       [ahref]
       
       <span style="font-weight:bold;">
        ·
       </span>
       [ahref]
       
       <span style="font-weight:bold;">
        ·
       </span>
       <a href="/wiki/Photo_Badge/ko" title="Photo Badge/ko">
        증명 사진
       </a>
       <span style="font-weight:bold;">
        ·
       </span>
       [linkx]
       
       <span style="font-weight:bold;">
        ·
       </span>
       [linkx]
       
       <span style="font-weight:bold;">
        ·
       </span>
       [ahref]
       
       <span style="font-weight:bold;">
        ·
       </span>
       [ahref]
       
       <span style="font-weight:bold;">
        ·
       </span>
       [linkx]
       
       <span style="font-weight:bold;">
        ·
       </span>
       <a href="/wiki/Brown_Bomber/ko" title="Brown Bomber/ko">
        갈색 폭격수
       </a>
       <span style="font-weight:bold;">
        ·
       </span>
       <a href="/wiki/Dr._Grordbort%27s_Copper_Crest/ko" title="Dr. Grordbort's Copper Crest/ko">
        그로드보트 박사의 동 문장
       </a>
       <span style="font-weight:bold;">
        ·
       </span>
       [linkx]
       
       <span style="font-weight:bold;">
        ·
       </span>
       [linkx]
       
       <span style="font-weight:bold;">
        ·
       </span>
       [linkx]
       
       <span style="font-weight:bold;">
        ·
       </span>
       <a href="/wiki/Holiday_Headcase/ko" title="Holiday Headcase/ko">
        축제일 머리통 보관함
       </a>
       <span style="font-weight:bold;">
        ·
       </span>
       <a href="/wiki/Spirit_Of_Giving/ko" title="Spirit Of Giving/ko">
        기부 정신
       </a>
       <span style="font-weight:bold;">
        ·
       </span>
       <a href="/wiki/Bolgan_Family_Crest/ko" title="Bolgan Family Crest/ko">
        볼간 부족 문장
       </a>
       <span style="font-weight:bold;">
        ·
       </span>
       [linkx]
       
       <span style="font-weight:bold;">
        ·
       </span>
       [linkx]
       
       <span style="font-weight:bold;">
        ·
       </span>
       [ahref]
       
       <span style="font-weight:bold;">
        ·
       </span>
       [linkx]
       
       <span style="font-weight:bold;">
        ·
       </span>
       [linkx]
       
       <span style="font-weight:bold;">
        ·
       </span>
       [ahref]
       
       <span style="font-weight:bold;">
        ·
       </span>
       <a href="/wiki/Philateler/ko" title="Philateler/ko">
        우표수집가
       </a>
       <span style="font-weight:bold;">
        ·
       </span>
       <a href="/wiki/Bolt_Action_Blitzer/ko" title="Bolt Action Blitzer/ko">
        볼트 액션식 공습자
       </a>
       <span style="font-weight:bold;">
        ·
       </span>
       [linkx]
       
       <span style="font-weight:bold;">
        ·
       </span>
       [ahref]
       
       <span style="font-weight:bold;">
        ·
       </span>
       [linkx]
       
       <span style="font-weight:bold;">
        ·
       </span>
       [ahref]
       
       <span style="font-weight:bold;">
        ·
       </span>
       [linkx]
       
       <span style="font-weight:bold;">
        ·
       </span>
       [linkx]
       
       <span style="font-weight:bold;">
        ·
       </span>
       <a href="/wiki/Awesomenauts_Badge/ko" title="Awesomenauts Badge/ko">
        Awesomenauts 휘장
       </a>
       <span style="font-weight:bold;">
        ·
       </span>
       [ahref]
       
       <span style="font-weight:bold;">
        ·
       </span>
       [linkx]
       
       <span style="font-weight:bold;">
        ·
       </span>
       [linkx]
       
       <span style="font-weight:bold;">
        ·
       </span>
       <a href="/wiki/RoBro_3000/ko" title="RoBro 3000/ko">
        로봇 친구 3000
       </a>
       <span style="font-weight:bold;">
        ·
       </span>
       [ahref]
       
       <span style="font-weight:bold;">
        ·
       </span>
       <a href="/wiki/Friends_Forever_Companion_Square_Badge/ko" title="Friends Forever Companion Square Badge/ko">
        변치않는 우정의 동행큐브 증표
       </a>
       <span style="font-weight:bold;">
        ·
       </span>
       [ahref]
       
       <span style="font-weight:bold;">
        ·
       </span>
       [linkx]
       
       <span style="font-weight:bold;">
        ·
       </span>
       <a href="/wiki/Whale_Bone_Charm/ko" title="Whale Bone Charm/ko">
        고래뼈 부적
       </a>
       <span style="font-weight:bold;">
        ·
       </span>
       [ahref]
       
       <span style="font-weight:bold;">
        ·
       </span>
       [ahref]
       
       <span style="font-weight:bold;">
        ·
       </span>
       [linkx]
       
       <span style="font-weight:bold;">
        ·
       </span>
       [ahref]
       
       <span style="font-weight:bold;">
        ·
       </span>
       [ahref]
       
       <span style="font-weight:bold;">
        ·
       </span>
       <a href="/wiki/Faerie_Solitaire_Pin/ko" title="Faerie Solitaire Pin/ko">
        Faerie Solitaire 장식핀
       </a>
       <span style="font-weight:bold;">
        ·
       </span>
       <a href="/wiki/Saxxy_Clapper_Badge/ko" title="Saxxy Clapper Badge/ko">
        Saxxy 클래퍼보드 증표
       </a>
       <span style="font-weight:bold;">
        ·
       </span>
       [ahref]
       
       <span style="font-weight:bold;">
        ·
       </span>
       [ahref]
       
       <span style="font-weight:bold;">
        ·
       </span>
       [linkx]
       
       <span style="font-weight:bold;">
        ·
       </span>
       [linkx]
       
       <span style="font-weight:bold;">
        ·
       </span>
       [ahref]
       
       <span style="font-weight:bold;">
        ·
       </span>
       <a href="/wiki/Reindoonicorn/ko" title="Reindoonicorn/ko">
        순로니콘
       </a>
       <span style="font-weight:bold;">
        ·
       </span>
       [linkx]
       
       <span style="font-weight:bold;">
        ·
       </span>
       [ahref]
       
       <span style="font-weight:bold;">
        ·
       </span>
       [ahref]
       
       <span style="font-weight:bold;">
        ·
       </span>
       [ahref]
       
       <span style="font-weight:bold;">
        ·
       </span>
       [linkx]
       
       <span style="font-weight:bold;">
        ·
       </span>
       <a href="/wiki/Fortune_Hunter/ko" title="Fortune Hunter/ko">
        보물사냥꾼
       </a>
       <span style="font-weight:bold;">
        ·
       </span>
       [linkx]
       
       <span style="font-weight:bold;">
        ·
       </span>
       [ahref]
       
       <span style="font-weight:bold;">
        ·
       </span>
       <a href="/wiki/Public_Accessor/ko" title="Public Accessor/ko">
        공개 전파 접근기
       </a>
       <span style="font-weight:bold;">
        ·
       </span>
       <a href="/wiki/Bot_Dogger/ko" title="Bot Dogger/ko">
        봇도그 뻥쟁이
       </a>
       <span style="font-weight:bold;">
        ·
       </span>
       [ahref]
       
       <span style="font-weight:bold;">
        ·
       </span>
       [ahref]
       
       <span style="font-weight:bold;">
        ·
       </span>
       [linkx]
       
       <span style="font-weight:bold;">
        ·
       </span>
       <a href="/wiki/Noble_Nickel_Amassment_of_Hats/ko" title="Noble Nickel Amassment of Hats/ko">
        고급스러운 니켈제 모자 모음
       </a>
       <span style="font-weight:bold;">
        ·
       </span>
       [ahref]
       
       <span style="font-weight:bold;">
        ·
       </span>
       <a href="/wiki/Crosslinker%27s_Coil/ko" title="Crosslinker's Coil/ko">
        크로스링커의 감줄
       </a>
       <span style="font-weight:bold;">
        ·
       </span>
       <a href="/wiki/Breakneck_Baggies/ko" title="Breakneck Baggies/ko">
        헐레벌떡 헐렁바지
       </a>
       <span style="font-weight:bold;">
        ·
       </span>
       <a href="/wiki/Brotherhood_of_Arms/ko" title="Brotherhood of Arms/ko">
        브라더후드 오브 암즈
       </a>
       <span style="font-weight:bold;">
        ·
       </span>
       [linkx]
       
       <span style="font-weight:bold;">
        ·
       </span>
       <a href="/wiki/Hardy_Laurel/ko" title="Hardy Laurel/ko">
        우스꽝스러운 월계관
       </a>
       <span style="font-weight:bold;">
        ·
       </span>
       [linkx]
       
       <span style="font-weight:bold;">
        ·
       </span>
       <a href="/wiki/Federal_Casemaker/ko" title="Federal Casemaker/ko">
        연방 해결사
       </a>
       <span style="font-weight:bold;">
        ·
       </span>
       <a href="/wiki/Virtual_Viewfinder/ko" title="Virtual Viewfinder/ko">
        가상 접안 장치
       </a>
       <span style="font-weight:bold;">
        ·
       </span>
       [ahref]
       
       <span style="font-weight:bold;">
        ·
       </span>
       [ahref]
       
       <span style="font-weight:bold;">
        ·
       </span>
       <a href="/wiki/Hong_Kong_Cone/ko" title="Hong Kong Cone/ko">
        홍콩행 삿갓
       </a>
       <span style="font-weight:bold;">
        ·
       </span>
       [linkx]
       
       <span style="font-weight:bold;">
        ·
       </span>
       [ahref]
       
       <span style="font-weight:bold;">
        ·
       </span>
       [linkx]
       
       <span style="font-weight:bold;">
        ·
       </span>
       [ahref]
       
       <span style="font-weight:bold;">
        ·
       </span>
       [ahref]
       
       <span style="font-weight:bold;">
        ·
       </span>
       [ahref]
       
       <span style="font-weight:bold;">
        ·
       </span>
       [ahref]
       
       <span style="font-weight:bold;">
        ·
       </span>
       [ahref]
       
       <span style="font-weight:bold;">
        ·
       </span>
       <a href="/wiki/Dark_Falkirk_Helm/ko" title="Dark Falkirk Helm/ko">
        암흑 폴커크 투구
       </a>
       <span style="font-weight:bold;">
        ·
       </span>
       [linkx]
       
       <span style="font-weight:bold;">
        ·
       </span>
       <a href="/wiki/Mustachioed_Mann/ko" title="Mustachioed Mann/ko">
        콧수염만 기른 신사
       </a>
       <span style="font-weight:bold;">
        ·
       </span>
       [ahref]
       
       <span style="font-weight:bold;">
        ·
       </span>
       [ahref]
       
       <span style="font-weight:bold;">
        ·
       </span>
       [ahref]
       
       <span style="font-weight:bold;">
        ·
       </span>
       <a href="/wiki/Eye-Catcher/ko" title="Eye-Catcher/ko">
        시선 집중
       </a>
       <span style="font-weight:bold;">
        ·
       </span>
       [ahref]
       
       <span style="font-weight:bold;">
        ·
       </span>
       <a href="/wiki/Tipped_Lid/ko" title="Tipped Lid/ko">
        기울어진 모자
       </a>
       <span style="font-weight:bold;">
        ·
       </span>
       <a href="/wiki/Vive_La_France/ko" title="Vive La France/ko">
        프랑스 만세
       </a>
       <span style="font-weight:bold;">
        ·
       </span>
       [ahref]
       
       <span style="font-weight:bold;">
        ·
       </span>
       [linkx]
       
       <span style="font-weight:bold;">
        ·
       </span>
       [linkx]
       
       <span style="font-weight:bold;">
        ·
       </span>
       [ahref]
       
       <span style="font-weight:bold;">
        ·
       </span>
       [linkx]
       
       <span style="font-weight:bold;">
        ·
       </span>
       [ahref]
       
       <span style="font-weight:bold;">
        ·
       </span>
       [ahref]
       
       <span style="font-weight:bold;">
        ·
       </span>
       [ahref]
       
       <span style="font-weight:bold;">
        ·
       </span>
       <a href="/wiki/Flashdance_Footies/ko" title="Flashdance Footies/ko">
        반짝춤 발덮개
       </a>
       <span style="font-weight:bold;">
        ·
       </span>
       <a href="/wiki/Winter_Woodsman/ko" title="Winter Woodsman/ko">
        겨울 나무꾼
       </a>
       <span style="font-weight:bold;">
        ·
       </span>
       [linkx]
       
       <span style="font-weight:bold;">
        ·
       </span>
       <a href="/wiki/Co-Pilot/ko" title="Co-Pilot/ko">
        부조종사
       </a>
       <span style="font-weight:bold;">
        ·
       </span>
       [ahref]
       
       <span style="font-weight:bold;">
        ·
       </span>
       [ahref]
       
       <span style="font-weight:bold;">
        ·
       </span>
       [ahref]
       
       <span style="font-weight:bold;">
        ·
       </span>
       [linkx]
       
       <span style="font-weight:bold;">
        ·
       </span>
       [ahref]
       
       <span style="font-weight:bold;">
        ·
       </span>
       [linkx]
       
       <span style="font-weight:bold;">
        ·
       </span>
       [linkx]
       
       <span style="font-weight:bold;">
        ·
       </span>
       [linkx]
       
       <span style="font-weight:bold;">
        ·
       </span>
       [ahref]
       
       <span style="font-weight:bold;">
        ·
       </span>
       [linkx]
       
       <span style="font-weight:bold;">
        ·
       </span>
       <a href="/wiki/Universal_Translator/ko" title="Universal Translator/ko">
        만능 번역기
       </a>
       <span style="font-weight:bold;">
        ·
       </span>
       [linkx]
       
       <span style="font-weight:bold;">
        ·
       </span>
       [linkx]
       
       <span style="font-weight:bold;">
        ·
       </span>
       [ahref]
       
       <span style="font-weight:bold;">
        ·
       </span>
       <a href="/wiki/Grim_Tweeter/ko" title="Grim Tweeter/ko">
        음산한 짹짹이
       </a>
       <span style="font-weight:bold;">
        ·
       </span>
       <a href="/wiki/Prehistoric_Pullover/ko" title="Prehistoric Pullover/ko">
        선사 시대 방한 복면
       </a>
       <span style="font-weight:bold;">
        ·
       </span>
       <a href="/wiki/Honeydew%27s_Charitable_Countenance/ko" title="Honeydew's Charitable Countenance/ko">
        Honeydew의 자애로운 자태
       </a>
       <span style="font-weight:bold;">
        ·
       </span>
       [ahref]
       
       <span style="font-weight:bold;">
        ·
       </span>
       [linkx]
       
       <span style="font-weight:bold;">
        ·
       </span>
       [ahref]
       
       <span style="font-weight:bold;">
        ·
       </span>
       <a href="/wiki/Batter%27s_Bracers/ko" title="Batter's Bracers/ko">
        구타자의 팔 보호구
       </a>
       <span style="font-weight:bold;">
        ·
       </span>
       [linkx]
       
       <span style="font-weight:bold;">
        ·
       </span>
       [ahref]
       
       <span style="font-weight:bold;">
        ·
       </span>
       [ahref]
       
       <span style="font-weight:bold;">
        ·
       </span>
       [linkx]
       
       <span style="font-weight:bold;">
        ·
       </span>
       [ahref]
       
       <span style="font-weight:bold;">
        ·
       </span>
       [ahref]
       
       <span style="font-weight:bold;">
        ·
       </span>
       <a href="/wiki/Bedouin_Bandana/ko" title="Bedouin Bandana/ko">
        베두인 족의 반다나
       </a>
       <span style="font-weight:bold;">
        ·
       </span>
       [linkx]
       
       <span style="font-weight:bold;">
        ·
       </span>
       [linkx]
       
       <span style="font-weight:bold;">
        ·
       </span>
       [linkx]
       
       <span style="font-weight:bold;">
        ·
       </span>
       <a href="/wiki/PASS_Time_Early_Participation_Pin/ko" title="PASS Time Early Participation Pin/ko">
        '패스' 시간 조기 참가 장식핀
       </a>
       <span style="font-weight:bold;">
        ·
       </span>
       [linkx]
       
       <span style="font-weight:bold;">
        ·
       </span>
       [linkx]
       
       <span style="font-weight:bold;">
        ·
       </span>
       <a href="/wiki/Altruist%27s_Adornment/ko" title="Altruist's Adornment/ko">
        이타주의자의 장식품
       </a>
       <span style="font-weight:bold;">
        ·
       </span>
       <a href="/wiki/TF2Maps_72hr_TF2Jam_Participant/ko" title="TF2Maps 72hr TF2Jam Participant/ko">
        TF2Maps 72시간 즉흥 제작 참가상
       </a>
       <span style="font-weight:bold;">
        ·
       </span>
       [ahref]
       
       <span style="font-weight:bold;">
        ·
       </span>
       [ahref]
       
       <span style="font-weight:bold;">
        ·
       </span>
       [linkx]
       
       <span style="font-weight:bold;">
        ·
       </span>
       <a href="/wiki/Class_Crown/ko" title="Class Crown/ko">
        우아한 왕관
       </a>
       <span style="font-weight:bold;">
        ·
       </span>
       [ahref]
       
       <span style="font-weight:bold;">
        ·
       </span>
       [ahref]
       
       <span style="font-weight:bold;">
        ·
       </span>
       [ahref]
       
       <span style="font-weight:bold;">
        ·
       </span>
       [ahref]
       
       <span style="font-weight:bold;">
        ·
       </span>
       [ahref]
       
       <span style="font-weight:bold;">
        ·
       </span>
       [linkx]
       
       <span style="font-weight:bold;">
        ·
       </span>
       [linkx]
       
       <span style="font-weight:bold;">
        ·
       </span>
       [linkx]
       
       <span style="font-weight:bold;">
        ·
       </span>
       [linkx]
       
       <span style="font-weight:bold;">
        ·
       </span>
       <a href="/wiki/Snowmann/ko" title="Snowmann/ko">
        눈으로 '만'든 사람
       </a>
       <span style="font-weight:bold;">
        ·
       </span>
       [linkx]
       
       <span style="font-weight:bold;">
        ·
       </span>
       [ahref]
       
       <span style="font-weight:bold;">
        ·
       </span>
       [linkx]
       
       <span style="font-weight:bold;">
        ·
       </span>
       [linkx]
       
       <span style="font-weight:bold;">
        ·
       </span>
       [ahref]
       
       <span style="font-weight:bold;">
        ·
       </span>
       [linkx]
       
       <span style="font-weight:bold;">
        ·
       </span>
       [ahref]
       
       <span style="font-weight:bold;">
        ·
       </span>
       <a href="/wiki/Blapature_Co._Contributor/ko" title="Blapature Co. Contributor/ko">
        Blapature Co. 기여자
       </a>
       <span style="font-weight:bold;">
        ·
       </span>
       [ahref]
       
       <span style="font-weight:bold;">
        ·
       </span>
       [linkx]
       
       <span style="font-weight:bold;">
        ·
       </span>
       [ahref]
       
       <span style="font-weight:bold;">
        ·
       </span>
       [ahref]
       
       <span style="font-weight:bold;">
        ·
       </span>
       [ahref]
       
       <span style="font-weight:bold;">
        ·
       </span>
       <a href="/wiki/Croaking_Hazard/ko" title="Croaking Hazard/ko">
        개굴거리는 위험 동물
       </a>
       <span style="font-weight:bold;">
        ·
       </span>
       <a href="/wiki/Hunter_in_Darkness/ko" title="Hunter in Darkness/ko">
        어둠 속 사냥꾼
       </a>
       <span style="font-weight:bold;">
        ·
       </span>
       [linkx]
       
       <span style="font-weight:bold;">
        ·
       </span>
       [ahref]
       
       <span style="font-weight:bold;">
        ·
       </span>
       [linkx]
       
       <span style="font-weight:bold;">
        ·
       </span>
       <a href="/wiki/Monstrous_Memento/ko" title="Monstrous Memento/ko">
        기괴한 기념품
       </a>
       <span style="font-weight:bold;">
        ·
       </span>
       [ahref]
       
       <span style="font-weight:bold;">
        ·
       </span>
       [ahref]
       
       <span style="font-weight:bold;">
        ·
       </span>
       [ahref]
       
       <span style="font-weight:bold;">
        ·
       </span>
       [linkx]
       
       <span style="font-weight:bold;">
        ·
       </span>
       [linkx]
       
       <span style="font-weight:bold;">
        ·
       </span>
       [ahref]
       
       <span style="font-weight:bold;">
        ·
       </span>
       <a href="/wiki/Yeti_Park_Hardhat/ko" title="Yeti Park Hardhat/ko">
        예티 공원 안전모
       </a>
       <span style="font-weight:bold;">
        ·
       </span>
       [linkx]
       
       <span style="font-weight:bold;">
        ·
       </span>
       [linkx]
       
       <span style="font-weight:bold;">
        ·
       </span>
       [ahref]
       
       <span style="font-weight:bold;">
        ·
       </span>
       [ahref]
       
       <span style="font-weight:bold;">
        ·
       </span>
       [linkx]
       
       <span style="font-weight:bold;">
        ·
       </span>
       <a href="/wiki/Sledder%27s_Sidekick/ko" title="Sledder's Sidekick/ko">
        Sledder's Sidekick
       </a>
       <span style="font-weight:bold;">
        ·
       </span>
       <a href="/wiki/Balloonihoodie/ko" title="Balloonihoodie/ko">
        Balloonihoodie
       </a>
       <span style="font-weight:bold;">
        ·
       </span>
       [linkx]
       
       <span style="font-weight:bold;">
        ·
       </span>
       [ahref]
       
       <span style="font-weight:bold;">
        ·
       </span>
       [ahref]
       
       <span style="font-weight:bold;">
        ·
       </span>
       [linkx]
       
       <span style="font-weight:bold;">
        ·
       </span>
       [linkx]
       
       <span style="font-weight:bold;">
        ·
       </span>
       [ahref]
       
       <span style="font-weight:bold;">
        ·
       </span>
       Canteen Crasher (
       [linkx]
       
       <span style="font-weight:bold;">
        ·
       </span>
       <a class="new" href="/w/index.php?title=Canteen_Crasher_Iron_Recall_Medal_2018/ko&amp;action=edit&amp;redlink=1" title="Canteen Crasher Iron Recall Medal 2018/ko (page does not exist)">
        <span id="tooltip" style="cursor:help; border-bottom:1px dotted;" title="Iron Recall">
         I
        </span>
       </a>
       <span style="font-weight:bold;">
        ·
       </span>
       [linkx]
       
       <span style="font-weight:bold;">
        ·
       </span>
       [ahref]
       
       <span style="font-weight:bold;">
        ·
       </span>
       [ahref]
       
       <span style="font-weight:bold;">
        ·
       </span>
       [ahref]
       
       )
       <span style="font-weight:bold;">
        ·
       </span>
       <a class="new" href="/w/index.php?title=Heartfelt_Hero/ko&amp;action=edit&amp;redlink=1" title="Heartfelt Hero/ko (page does not exist)">
        Heartfelt Hero
       </a>
       <span style="font-weight:bold;">
        ·
       </span>
       [linkx]
       
       <span style="font-weight:bold;">
        ·
       </span>
       [linkx]
       
       <span style="font-weight:bold;">
        ·
       </span>
       [linkx]
       
       <span style="font-weight:bold;">
        ·
       </span>
       <a class="new" href="/w/index.php?title=TF2Maps_Ray_of_Sunshine/ko&amp;action=edit&amp;redlink=1" title="TF2Maps Ray of Sunshine/ko (page does not exist)">
        TF2Maps Ray of Sunshine
       </a>
       <span style="font-weight:bold;">
        ·
       </span>
       <a href="/wiki/Deadbeats/ko" title="Deadbeats/ko">
        Deadbeats
       </a>
       <span style="font-weight:bold;">
        ·
       </span>
       <a class="new" href="/w/index.php?title=Jaunty_Explorer/ko&amp;action=edit&amp;redlink=1" title="Jaunty Explorer/ko (page does not exist)">
        Jaunty Explorer
       </a>
       <span style="font-weight:bold;">
        ·
       </span>
       [ahref]
       
       <span style="font-weight:bold;">
        ·
       </span>
       [linkx]
       
       <span style="font-weight:bold;">
        ·
       </span>
       [linkx]
       
       <span style="font-weight:bold;">
        ·
       </span>
       <a href="/wiki/Terror-antula/ko" title="Terror-antula/ko">
        Terror-antula
       </a>
       <span style="font-weight:bold;">
        ·
       </span>
       [linkx]
       
       <span style="font-weight:bold;">
        ·
       </span>
       <a class="new" href="/w/index.php?title=Pocket_Admin/ko&amp;action=edit&amp;redlink=1" title="Pocket Admin/ko (page does not exist)">
        Pocket Admin
       </a>
       <span style="font-weight:bold;">
        ·
       </span>
       <a class="new" href="/w/index.php?title=Polar_Pal/ko&amp;action=edit&amp;redlink=1" title="Polar Pal/ko (page does not exist)">
        Polar Pal
       </a>
       <span style="font-weight:bold;">
        ·
       </span>
       Madness vs Machines (
       [ahref]
       
       <span style="font-weight:bold;">
        ·
       </span>
       <a class="new" href="/w/index.php?title=Madness_vs_Machines_Grandiose_Garnet_2019/ko&amp;action=edit&amp;redlink=1" title="Madness vs Machines Grandiose Garnet 2019/ko (page does not exist)">
        <span id="tooltip" style="cursor:help; border-bottom:1px dotted;" title="Grandiose Garnet">
         GG
        </span>
       </a>
       <span style="font-weight:bold;">
        ·
       </span>
       [ahref]
       
       <span style="font-weight:bold;">
        ·
       </span>
       [linkx]
       
       <span style="font-weight:bold;">
        ·
       </span>
       <a class="new" href="/w/index.php?title=Madness_vs_Machines_Chaotic_Crystal_2019/ko&amp;action=edit&amp;redlink=1" title="Madness vs Machines Chaotic Crystal 2019/ko (page does not exist)">
        <span id="tooltip" style="cursor:help; border-bottom:1px dotted;" title="Chaotic Crystal">
         CC
        </span>
       </a>
       <span style="font-weight:bold;">
        ·
       </span>
       [ahref]
       
       <span style="font-weight:bold;">
        ·
       </span>
       [linkx]
       
       <span style="font-weight:bold;">
        ·
       </span>
       [ahref]
       
       )
       <span style="font-weight:bold;">
        ·
       </span>
       Memes vs. Machines (
       [linkx]
       
       <span style="font-weight:bold;">
        ·
       </span>
       <a class="new" href="/w/index.php?title=Memes_vs._Machines_PotatOS_Server_2019/ko&amp;action=edit&amp;redlink=1" title="Memes vs. Machines PotatOS Server 2019/ko (page does not exist)">
        <span id="tooltip" style="cursor:help; border-bottom:1px dotted;" title="Memes vs. Machines PotatOS Server 2019">
         PS
        </span>
       </a>
       )
      </div>
     </td>
    </tr>
    <tr style="height:2px">
     <td>
     </td>
    </tr>
    <tr>
     <td class="navbox-group" style=";background: #f9d483; width: 5%; text-align: center; font-size: 105%; padding: 0.75em;;">
      모든 병과
      <br/>
      <small>
       (
       <a href="/wiki/Holiday/ko#Halloween" title="Holiday/ko">
        핼러윈
       </a>
       )
      </small>
     </td>
     <td class="navbox-list navbox-odd" style="text-align:left;border-left-width:2px;border-left-style:solid;width:100%;padding:0px;;;">
      <div style="padding:0em 0.25em">
       [linkx]
       
       <span style="font-weight:bold;">
        ·
       </span>
       [ahref]
       
       <span style="font-weight:bold;">
        ·
       </span>
       [ahref]
       
       <span style="font-weight:bold;">
        ·
       </span>
       [ahref]
       
       <span style="font-weight:bold;">
        ·
       </span>
       [ahref]
       
       <span style="font-weight:bold;">
        ·
       </span>
       [ahref]
       
       <span style="font-weight:bold;">
        ·
       </span>
       [ahref]
       
       <span style="font-weight:bold;">
        ·
       </span>
       [ahref]
       
       <span style="font-weight:bold;">
        ·
       </span>
       <a href="/wiki/Voodoo_Juju/ko" title="Voodoo Juju/ko">
        부두교의 주물
       </a>
       <span style="font-weight:bold;">
        ·
       </span>
       [ahref]
       
       <span style="font-weight:bold;">
        ·
       </span>
       <a href="/wiki/Ghastlierest_Gibus/ko" title="Ghastlierest Gibus/ko">
        가장 무시무시한 오페라 모자
       </a>
       <span style="font-weight:bold;">
        ·
       </span>
       [ahref]
       
       <span style="font-weight:bold;">
        ·
       </span>
       [ahref]
       
       <span style="font-weight:bold;">
        ·
       </span>
       [ahref]
       
       <span style="font-weight:bold;">
        ·
       </span>
       [ahref]
       
       <span style="font-weight:bold;">
        ·
       </span>
       [ahref]
       
       <span style="font-weight:bold;">
        ·
       </span>
       [ahref]
       
       <span style="font-weight:bold;">
        ·
       </span>
       <a href="/wiki/Dead_Little_Buddy/ko" title="Dead Little Buddy/ko">
        죽은 꼬마 친구
       </a>
       <span style="font-weight:bold;">
        ·
       </span>
       [ahref]
       
       <span style="font-weight:bold;">
        ·
       </span>
       [ahref]
       
       <span style="font-weight:bold;">
        ·
       </span>
       [ahref]
       
       <span style="font-weight:bold;">
        ·
       </span>
       [linkx]
       
       <span style="font-weight:bold;">
        ·
       </span>
       [ahref]
       
       <span style="font-weight:bold;">
        ·
       </span>
       [linkx]
       
       <span style="font-weight:bold;">
        ·
       </span>
       [linkx]
       
       <span style="font-weight:bold;">
        ·
       </span>
       [ahref]
       
       <span style="font-weight:bold;">
        ·
       </span>
       <a href="/wiki/Dark_Helm/ko" title="Dark Helm/ko">
        어둠의 투구
       </a>
       <span style="font-weight:bold;">
        ·
       </span>
       [ahref]
       
       <span style="font-weight:bold;">
        ·
       </span>
       [ahref]
       
       <span style="font-weight:bold;">
        ·
       </span>
       [linkx]
       
       <span style="font-weight:bold;">
        ·
       </span>
       [linkx]
       
       <span style="font-weight:bold;">
        ·
       </span>
       [linkx]
       
       <span style="font-weight:bold;">
        ·
       </span>
       [linkx]
       
       <span style="font-weight:bold;">
        ·
       </span>
       [linkx]
       
       <span style="font-weight:bold;">
        ·
       </span>
       [ahref]
       
       <span style="font-weight:bold;">
        ·
       </span>
       [ahref]
       
       <span style="font-weight:bold;">
        ·
       </span>
       [linkx]
       
       <span style="font-weight:bold;">
        ·
       </span>
       [linkx]
       
       <span style="font-weight:bold;">
        ·
       </span>
       [linkx]
       
       <span style="font-weight:bold;">
        ·
       </span>
       [linkx]
       
       <span style="font-weight:bold;">
        ·
       </span>
       [ahref]
       
      </div>
     </td>
    </tr>
    <tr style="height:2px">
     <td>
     </td>
    </tr>
    <tr>
     <td class="navbox-group" style=";background: #f9d483; width: 5%; text-align: center; font-size: 105%; padding: 0.75em;;">
      모든 병과
      <br/>
      <small>
       (
       [ahref]
       
       )
      </small>
     </td>
     <td class="navbox-list navbox-even" style="text-align:left;border-left-width:2px;border-left-style:solid;width:100%;padding:0px;;;">
      <div style="padding:0em 0.25em">
       (ETF2L:
       [ahref]
       
       <span style="font-weight:bold;">
        ·
       </span>
       [linkx]
       
       <span style="font-weight:bold;">
        ·
       </span>
       <a class="new" href="/w/index.php?title=Tournament_Medal_-_ETF2L_Ultiduo/ko&amp;action=edit&amp;redlink=1" title="Tournament Medal - ETF2L Ultiduo/ko (page does not exist)">
        Ultiduo
       </a>
       <span style="font-weight:bold;">
        ·
       </span>
       <a class="new" href="/w/index.php?title=Tournament_Medal_-_ETF2L_Highlander_Open/ko&amp;action=edit&amp;redlink=1" title="Tournament Medal - ETF2L Highlander Open/ko (page does not exist)">
        Highlander Open
       </a>
       <span style="font-weight:bold;">
        ·
       </span>
       [ahref]
       
       )
       <span style="font-weight:bold;">
        ·
       </span>
       [linkx]
       
       <span style="font-weight:bold;">
        ·
       </span>
       (UGC:
       <a class="new" href="/w/index.php?title=Tournament_Medal_-_UGC_Highlander/ko&amp;action=edit&amp;redlink=1" title="Tournament Medal - UGC Highlander/ko (page does not exist)">
        Highlander
       </a>
       <span style="font-weight:bold;">
        ·
       </span>
       [linkx]
       
       <span style="font-weight:bold;">
        ·
       </span>
       [ahref]
       
       )
       <span style="font-weight:bold;">
        ·
       </span>
       [linkx]
       
       <span style="font-weight:bold;">
        ·
       </span>
       [ahref]
       
       <span style="font-weight:bold;">
        ·
       </span>
       [linkx]
       
       <span style="font-weight:bold;">
        ·
       </span>
       (ozfortress:
       [linkx]
       
       <span style="font-weight:bold;">
        ·
       </span>
       [linkx]
       
       <span style="font-weight:bold;">
        ·
       </span>
       [ahref]
       
       )
       <span style="font-weight:bold;">
        ·
       </span>
       [ahref]
       
       <span style="font-weight:bold;">
        ·
       </span>
       [linkx]
       
       <span style="font-weight:bold;">
        ·
       </span>
       (LBTF2:
       [linkx]
       
       <span style="font-weight:bold;">
        ·
       </span>
       [linkx]
       
       <span style="font-weight:bold;">
        ·
       </span>
       [linkx]
       
       <span style="font-weight:bold;">
        ·
       </span>
       [ahref]
       
       )
       <span style="font-weight:bold;">
        ·
       </span>
       (AsiaFortress:
       <a class="new" href="/w/index.php?title=Tournament_Medal_-_AsiaFortress_Cup/ko&amp;action=edit&amp;redlink=1" title="Tournament Medal - AsiaFortress Cup/ko (page does not exist)">
        Cup
       </a>
       <span style="font-weight:bold;">
        ·
       </span>
       [linkx]
       
       )
       <span style="font-weight:bold;">
        ·
       </span>
       <a class="new" href="/w/index.php?title=Tournament_Medal_-_RETF2_Retrospective/ko&amp;action=edit&amp;redlink=1" title="Tournament Medal - RETF2 Retrospective/ko (page does not exist)">
        RETF2 Retrospective
       </a>
       <span style="font-weight:bold;">
        ·
       </span>
       [linkx]
       
       <span style="font-weight:bold;">
        ·
       </span>
       [ahref]
       
       <span style="font-weight:bold;">
        ·
       </span>
       <a class="new" href="/w/index.php?title=Tournament_Medal_-_Gamers_Assembly/ko&amp;action=edit&amp;redlink=1" title="Tournament Medal - Gamers Assembly/ko (page does not exist)">
        Gamers Assembly/GA'lloween
       </a>
       <span style="font-weight:bold;">
        ·
       </span>
       <a href="/wiki/Asymmetric_Accolade/ko" title="Asymmetric Accolade/ko">
        비대칭적인 영예
       </a>
       <span style="font-weight:bold;">
        ·
       </span>
       [ahref]
       
       <span style="font-weight:bold;">
        ·
       </span>
       [ahref]
       
       <span style="font-weight:bold;">
        ·
       </span>
       [linkx]
       
       <span style="font-weight:bold;">
        ·
       </span>
       (Chapelaria:
       [ahref]
       
       <span style="font-weight:bold;">
        ·
       </span>
       <a class="new" href="/w/index.php?title=Tournament_Medal_-_Chapelaria_Highlander/ko&amp;action=edit&amp;redlink=1" title="Tournament Medal - Chapelaria Highlander/ko (page does not exist)">
        Highlander
       </a>
       <span style="font-weight:bold;">
        ·
       </span>
       [linkx]
       
       )
       <span style="font-weight:bold;">
        ·
       </span>
       [linkx]
       
       <span style="font-weight:bold;">
        ·
       </span>
       [ahref]
       
       <span style="font-weight:bold;">
        ·
       </span>
       <a class="new" href="/w/index.php?title=Tournament_Medal_-_ESA_Rewind/ko&amp;action=edit&amp;redlink=1" title="Tournament Medal - ESA Rewind/ko (page does not exist)">
        ESA Rewind
       </a>
       <span style="font-weight:bold;">
        ·
       </span>
       [linkx]
       
       <span style="font-weight:bold;">
        ·
       </span>
       [ahref]
       
       <span style="font-weight:bold;">
        ·
       </span>
       [ahref]
       
       <span style="font-weight:bold;">
        ·
       </span>
       <a class="new" href="/w/index.php?title=Tournament_Medal_-_Snack%27s_Summery_Ultiduo_Siesta/ko&amp;action=edit&amp;redlink=1" title="Tournament Medal - Snack's Summery Ultiduo Siesta/ko (page does not exist)">
        Snack's Summery Ultiduo Siesta
       </a>
       <span style="font-weight:bold;">
        ·
       </span>
       [linkx]
       
       <span style="font-weight:bold;">
        ·
       </span>
       [linkx]
       
       <span style="font-weight:bold;">
        ·
       </span>
       (RGL.gg:
       [linkx]
       
       <span style="font-weight:bold;">
        ·
       </span>
       [linkx]
       
       <span style="font-weight:bold;">
        ·
       </span>
       [linkx]
       
       <span style="font-weight:bold;">
        ·
       </span>
       [linkx]
       
       <span style="font-weight:bold;">
        ·
       </span>
       [ahref]
       
       )
       <span style="font-weight:bold;">
        ·
       </span>
       [linkx]
       
       <span style="font-weight:bold;">
        ·
       </span>
       <a class="new" href="/w/index.php?title=Tournament_Medal_-_National_Heavy_Boxing_League/ko&amp;action=edit&amp;redlink=1" title="Tournament Medal - National Heavy Boxing League/ko (page does not exist)">
        National Heavy Boxing League
       </a>
       <span style="font-weight:bold;">
        ·
       </span>
       [ahref]
       
       <span style="font-weight:bold;">
        ·
       </span>
       <a class="new" href="/w/index.php?title=Tournament_Medal_-_Palaise/ko&amp;action=edit&amp;redlink=1" title="Tournament Medal - Palaise/ko (page does not exist)">
        Palaise
       </a>
       <span style="font-weight:bold;">
        ·
       </span>
       (Newbie Cup:
       [linkx]
       
       <span style="font-weight:bold;">
        ·
       </span>
       [linkx]
       
       )
       <span style="font-weight:bold;">
        ·
       </span>
       [ahref]
       
       <span style="font-weight:bold;">
        ·
       </span>
       [linkx]
       
       <span style="font-weight:bold;">
        ·
       </span>
       [linkx]
       
       <span style="font-weight:bold;">
        ·
       </span>
       [linkx]
       
       <span style="font-weight:bold;">
        ·
       </span>
       <a class="new" href="/w/index.php?title=Tournament_Medal_-_PURE_League/ko&amp;action=edit&amp;redlink=1" title="Tournament Medal - PURE League/ko (page does not exist)">
        PURE League
       </a>
       <span style="font-weight:bold;">
        ·
       </span>
       [linkx]
       
       <span style="font-weight:bold;">
        ·
       </span>
       [ahref]
       
       <span style="font-weight:bold;">
        ·
       </span>
       [linkx]
       
       <span style="font-weight:bold;">
        ·
       </span>
       <a class="new" href="/w/index.php?title=Tournament_Medal_-_Fresh_Meat_Prolander_Cup/ko&amp;action=edit&amp;redlink=1" title="Tournament Medal - Fresh Meat Prolander Cup/ko (page does not exist)">
        Fresh Meat Prolander Cup
       </a>
       <span style="font-weight:bold;">
        ·
       </span>
       <a class="new" href="/w/index.php?title=Tournament_Medal_-_Moscow_LAN/ko&amp;action=edit&amp;redlink=1" title="Tournament Medal - Moscow LAN/ko (page does not exist)">
        Moscow LAN
       </a>
       <span style="font-weight:bold;">
        ·
       </span>
       [linkx]
       
       <span style="font-weight:bold;">
        ·
       </span>
       <a class="new" href="/w/index.php?title=Tournament_Medal_-_PASS_Time_Federation/ko&amp;action=edit&amp;redlink=1" title="Tournament Medal - PASS Time Federation/ko (page does not exist)">
        PASS Time Federation
       </a>
       <span style="font-weight:bold;">
        ·
       </span>
       [linkx]
       
       <span style="font-weight:bold;">
        ·
       </span>
       <a class="new" href="/w/index.php?title=Tournament_Medal_-_TFNew_6v6_Newbie_Cup/ko&amp;action=edit&amp;redlink=1" title="Tournament Medal - TFNew 6v6 Newbie Cup/ko (page does not exist)">
        TFNew 6v6 Newbie Cup
       </a>
       <span style="font-weight:bold;">
        ·
       </span>
       [linkx]
       
       <span style="font-weight:bold;">
        ·
       </span>
       [linkx]
       
       <span style="font-weight:bold;">
        ·
       </span>
       (Brazil Fortress:
       <a class="new" href="/w/index.php?title=Tournament_Medal_-_Brazil_Fortress_6v6/ko&amp;action=edit&amp;redlink=1" title="Tournament Medal - Brazil Fortress 6v6/ko (page does not exist)">
        6v6
       </a>
       <span style="font-weight:bold;">
        ·
       </span>
       [ahref]
       
       <span style="font-weight:bold;">
        ·
       </span>
       <a class="new" href="/w/index.php?title=Tournament_Medal_-_Brazil_Fortress_Halloween/ko&amp;action=edit&amp;redlink=1" title="Tournament Medal - Brazil Fortress Halloween/ko (page does not exist)">
        Halloween
       </a>
       )
       <span style="font-weight:bold;">
        ·
       </span>
       [linkx]
       
       <span style="font-weight:bold;">
        ·
       </span>
       <a class="new" href="/w/index.php?title=Tournament_Medal_-_Russian_Highlander/ko&amp;action=edit&amp;redlink=1" title="Tournament Medal - Russian Highlander/ko (page does not exist)">
        Russian Highlander
       </a>
       <span style="font-weight:bold;">
        ·
       </span>
       [ahref]
       
       <span style="font-weight:bold;">
        ·
       </span>
       [ahref]
       
       <span style="font-weight:bold;">
        ·
       </span>
       <a class="new" href="/w/index.php?title=Tournament_Medal_-_Eu_Mixes_Cup/ko&amp;action=edit&amp;redlink=1" title="Tournament Medal - Eu Mixes Cup/ko (page does not exist)">
        Eu Mixes Cup
       </a>
       <span style="font-weight:bold;">
        ·
       </span>
       <a class="new" href="/w/index.php?title=Tournament_Medal_-_KnightComp/ko&amp;action=edit&amp;redlink=1" title="Tournament Medal - KnightComp/ko (page does not exist)">
        KnightComp
       </a>
       <span style="font-weight:bold;">
        ·
       </span>
       [linkx]
       
       <span style="font-weight:bold;">
        ·
       </span>
       [linkx]
       
       <span style="font-weight:bold;">
        ·
       </span>
       [ahref]
       
       <span style="font-weight:bold;">
        ·
       </span>
       <a class="new" href="/w/index.php?title=Tournament_Medal_-_Rasslabyxa_Cup/ko&amp;action=edit&amp;redlink=1" title="Tournament Medal - Rasslabyxa Cup/ko (page does not exist)">
        Rasslabyxa Cup
       </a>
       <span style="font-weight:bold;">
        ·
       </span>
       <a class="new" href="/w/index.php?title=Tournament_Medal_-_South_American_Vanilla_Fortress_6v6/ko&amp;action=edit&amp;redlink=1" title="Tournament Medal - South American Vanilla Fortress 6v6/ko (page does not exist)">
        South American Vanilla Fortress 6v6
       </a>
       <span style="font-weight:bold;">
        ·
       </span>
       [ahref]
       
       <span style="font-weight:bold;">
        ·
       </span>
       <a class="new" href="/w/index.php?title=Tournament_Medal_-_CustomLander_TF2/ko&amp;action=edit&amp;redlink=1" title="Tournament Medal - CustomLander TF2/ko (page does not exist)">
        CustomLander TF2
       </a>
       <span style="font-weight:bold;">
        ·
       </span>
       [ahref]
       
       <span style="font-weight:bold;">
        ·
       </span>
       [linkx]
       
       <span style="font-weight:bold;">
        ·
       </span>
       <a class="new" href="/w/index.php?title=Tournament_Medal_-_Classic_MGE_Cup/ko&amp;action=edit&amp;redlink=1" title="Tournament Medal - Classic MGE Cup/ko (page does not exist)">
        Classic MGE Cup
       </a>
       <span style="font-weight:bold;">
        ·
       </span>
       [linkx]
       
       <span style="font-weight:bold;">
        ·
       </span>
       [ahref]
       
       <span style="font-weight:bold;">
        ·
       </span>
       <a class="new" href="/w/index.php?title=Tournament_Medal_-_Late_Night_TF2_Cup/ko&amp;action=edit&amp;redlink=1" title="Tournament Medal - Late Night TF2 Cup/ko (page does not exist)">
        Late Night TF2 Cup
       </a>
       <span style="font-weight:bold;">
        ·
       </span>
       [linkx]
       
       <span style="font-weight:bold;">
        ·
       </span>
       [linkx]
       
       <span style="font-weight:bold;">
        ·
       </span>
       [ahref]
       
      </div>
     </td>
    </tr>
   </table>
  </td>
 </tr>
</table>
<table cellspacing="0" class="navbox" style=";;">
 <tr>
  <td style="padding:2px;">
   <table cellspacing="0" class="nowraplinks collapsible collapsed" style="width:100%;background:transparent;color:inherit;;">
    <tr>
     <th class="navbox-title" colspan="2" style=";">
      <div style="float:left; width:6em;text-align:left;">
       <div class="noprint plainlinks navbar" style="background:none; padding:0; font-weight:normal;;;border:none;; font-size:xx-small;">
        <a class="external text" href="/wiki/Template:Soldier_Nav" rel="nofollow">
         <span style=";;border:none;" title="View this template">
          v
         </span>
        </a>
        <span style="font-size:80%;">
         •
        </span>
        <a class="external text" href="/wiki/Template_talk:Soldier_Nav" rel="nofollow">
         <span style=";;border:none;" title="Discuss this template">
          d
         </span>
        </a>
        <span style="font-size:80%;">
         •
        </span>
        <a class="external text" href="/w/index.php?title=Template:Soldier_Nav&amp;action=edit" rel="nofollow">
         <span style=";;border:none;;" title="Edit this template">
          e
         </span>
        </a>
       </div>
      </div>
      <span class="" style="font-size:110%;">
       [ahref]
       
       [ahref]
       
      </span>
     </th>
    </tr>
    <tr style="height:2px;">
     <td>
     </td>
    </tr>
    <tr>
     <td class="navbox-group" style=";;">
      [ahref]
      
     </td>
     <td class="navbox-list navbox-odd" style="text-align:left;border-left-width:2px;border-left-style:solid;width:100%;padding:0px;;background: #FEF5E0;;">
      <div style="padding:0em 0.25em">
      </div>
      <table cellspacing="0" class="nowraplinks navbox-subgroup" style="width:100%;;;;">
       <tr>
        <td class="navbox-group" style=";padding-left:0em;padding-right:0em;background: #FFF2B3;;">
         <div style="padding:0em 0.75em;">
          주무기
         </div>
        </td>
        <td class="navbox-list navbox-odd" style="text-align:left;border-left-width:2px;border-left-style:solid;width:100%;padding:0px;;background: transparent;;">
         <div style="padding:0em 0.25em">
          [linkx]
          
          <span style="font-weight:bold;">
           ·
          </span>
          <a href="/wiki/Direct_Hit/ko" title="Direct Hit/ko">
           직격포
          </a>
          <span style="font-weight:bold;">
           ·
          </span>
          [ahref]
          
          <span style="font-weight:bold;">
           ·
          </span>
          <a href="/wiki/Rocket_Jumper/ko" title="Rocket Jumper/ko">
           로켓 점프 장치
          </a>
          <span style="font-weight:bold;">
           ·
          </span>
          [linkx]
          
          <span style="font-weight:bold;">
           ·
          </span>
          [linkx]
          
          <span style="font-weight:bold;">
           ·
          </span>
          <a href="/wiki/Original/ko" title="Original/ko">
           원조
          </a>
          <span style="font-weight:bold;">
           ·
          </span>
          [linkx]
          
          <span style="font-weight:bold;">
           ·
          </span>
          [ahref]
          
         </div>
        </td>
       </tr>
       <tr style="height:2px">
        <td>
        </td>
       </tr>
       <tr>
        <td class="navbox-group" style=";padding-left:0em;padding-right:0em;background: #FFF2B3;;">
         <div style="padding:0em 0.75em;">
          보조무기
         </div>
        </td>
        <td class="navbox-list navbox-even" style="text-align:left;border-left-width:2px;border-left-style:solid;width:100%;padding:0px;;background: #FEF5E0;;">
         <div style="padding:0em 0.25em">
          [ahref]
          
          <span style="font-weight:bold;">
           ·
          </span>
          <a href="/wiki/Buff_Banner/ko" title="Buff Banner/ko">
           사기 증진 깃발
          </a>
          <span style="font-weight:bold;">
           ·
          </span>
          [ahref]
          
          <span style="font-weight:bold;">
           ·
          </span>
          [ahref]
          
          <span style="font-weight:bold;">
           ·
          </span>
          [ahref]
          
          <span style="font-weight:bold;">
           ·
          </span>
          [linkx]
          
          <span style="font-weight:bold;">
           ·
          </span>
          <a href="/wiki/Reserve_Shooter/ko" title="Reserve Shooter/ko">
           부사수
          </a>
          <span style="font-weight:bold;">
           ·
          </span>
          [linkx]
          
          <span style="font-weight:bold;">
           ·
          </span>
          [linkx]
          
          <span style="font-weight:bold;">
           ·
          </span>
          <a href="/wiki/Panic_Attack/ko" title="Panic Attack/ko">
           공황 공격
          </a>
         </div>
        </td>
       </tr>
       <tr style="height:2px">
        <td>
        </td>
       </tr>
       <tr>
        <td class="navbox-group" style=";padding-left:0em;padding-right:0em;background: #FFF2B3;;">
         <div style="padding:0em 0.75em;">
          근접무기
         </div>
        </td>
        <td class="navbox-list navbox-odd" style="text-align:left;border-left-width:2px;border-left-style:solid;width:100%;padding:0px;;background: transparent;;">
         <div style="padding:0em 0.25em">
          <a href="/wiki/Shovel/ko" title="Shovel/ko">
           야전삽
          </a>
          (
          [linkx]
          
          ,
          [linkx]
          
          ,
          [linkx]
          
          ,
          [ahref]
          
          ,
          <a href="/wiki/Bat_Outta_Hell/ko" title="Bat Outta Hell/ko">
           지옥에서 뛰쳐나온 방망이
          </a>
          ,
          <a href="/wiki/Memory_Maker/ko" title="Memory Maker/ko">
           추억 제조기
          </a>
          ,
          [ahref]
          
          ,
          [ahref]
          
          ,
          <a href="/wiki/Crossing_Guard/ko" title="Crossing Guard/ko">
           건널목지기
          </a>
          ,
          <a href="/wiki/Prinny_Machete/ko" title="Prinny Machete/ko">
           프리니 마체테
          </a>
          )
          <span style="font-weight:bold;">
           ·
          </span>
          [ahref]
          
          <span style="font-weight:bold;">
           ·
          </span>
          <a href="/wiki/Pain_Train/ko" title="Pain Train/ko">
           고통행 열차
          </a>
          <span style="font-weight:bold;">
           ·
          </span>
          [linkx]
          
          <span style="font-weight:bold;">
           ·
          </span>
          [linkx]
          
          <span style="font-weight:bold;">
           ·
          </span>
          <a href="/wiki/Market_Gardener/ko" title="Market Gardener/ko">
           마켓가든 모종삽
          </a>
          <span style="font-weight:bold;">
           ·
          </span>
          <a href="/wiki/Escape_Plan/ko" title="Escape Plan/ko">
           탈출 계획
          </a>
         </div>
        </td>
       </tr>
       <tr style="height:2px">
        <td>
        </td>
       </tr>
       <tr>
        <td class="navbox-group" style=";padding-left:0em;padding-right:0em;background: #FFF2B3;;">
         <div style="padding:0em 0.75em;">
          [linkx]
          
         </div>
        </td>
        <td class="navbox-list navbox-even" style="text-align:left;border-left-width:2px;border-left-style:solid;width:100%;padding:0px;;background: #FEF5E0;;">
         <div style="padding:0em 0.25em">
          [linkx]
          
         </div>
        </td>
       </tr>
      </table>
      <div>
      </div>
     </td>
    </tr>
    <tr style="height:2px">
     <td>
     </td>
    </tr>
    <tr>
     <td class="navbox-group" style=";;">
      [linkx]
      
     </td>
     <td class="navbox-list navbox-even" style="text-align:left;border-left-width:2px;border-left-style:solid;width:100%;padding:0px;;background: transparent;;">
      <div style="padding:0em 0.25em">
       <a href="/wiki/Soldier%27s_Stash/ko" title="Soldier's Stash/ko">
        솔저의 은닉물
       </a>
       <span style="font-weight:bold;">
        ·
       </span>
       <a href="/wiki/Gentle_Manne%27s_Service_Medal/ko" title="Gentle Manne's Service Medal/ko">
        젠틀 만의 봉사 증명 훈장
       </a>
       <span style="font-weight:bold;">
        ·
       </span>
       [linkx]
       
       <span style="font-weight:bold;">
        ·
       </span>
       [linkx]
       
       <span style="font-weight:bold;">
        ·
       </span>
       [ahref]
       
       <span style="font-weight:bold;">
        ·
       </span>
       [ahref]
       
       <span style="font-weight:bold;">
        ·
       </span>
       [linkx]
       
       <span style="font-weight:bold;">
        ·
       </span>
       [linkx]
       
       <span style="font-weight:bold;">
        ·
       </span>
       [linkx]
       
       <span style="font-weight:bold;">
        ·
       </span>
       <a href="/wiki/Grenadier%27s_Softcap/ko" title="Grenadier's Softcap/ko">
        근위 보병의 사냥 모자
       </a>
       <span style="font-weight:bold;">
        ·
       </span>
       [linkx]
       
       <span style="font-weight:bold;">
        ·
       </span>
       <a href="/wiki/Exquisite_Rack/ko" title="Exquisite Rack/ko">
        쌔끈한 뿔
       </a>
       <span style="font-weight:bold;">
        ·
       </span>
       [linkx]
       
       <span style="font-weight:bold;">
        ·
       </span>
       [linkx]
       
       <span style="font-weight:bold;">
        ·
       </span>
       <a href="/wiki/Brain_Bucket/ko" title="Brain Bucket/ko">
        뇌 담는 양동이
       </a>
       <span style="font-weight:bold;">
        ·
       </span>
       <a href="/wiki/Furious_Fukaamigasa/ko" title="Furious Fukaamigasa/ko">
        분노의 후카아미가사
       </a>
       <span style="font-weight:bold;">
        ·
       </span>
       [linkx]
       
       <span style="font-weight:bold;">
        ·
       </span>
       <a href="/wiki/Armored_Authority/ko" title="Armored Authority/ko">
        견고한 지휘권
       </a>
       <span style="font-weight:bold;">
        ·
       </span>
       [linkx]
       
       <span style="font-weight:bold;">
        ·
       </span>
       <a href="/wiki/Jumper%27s_Jeepcap/ko" title="Jumper's Jeepcap/ko">
        공수부대의 뜨개 모자
       </a>
       <span style="font-weight:bold;">
        ·
       </span>
       [linkx]
       
       <span style="font-weight:bold;">
        ·
       </span>
       <a href="/wiki/Lord_Cockswain%27s_Novelty_Mutton_Chops_and_Pipe/ko" title="Lord Cockswain's Novelty Mutton Chops and Pipe/ko">
        콕스웨인 경의 놀라운 파이프 담배와 구레나룻
       </a>
       <span style="font-weight:bold;">
        ·
       </span>
       [linkx]
       
       <span style="font-weight:bold;">
        ·
       </span>
       [ahref]
       
       <span style="font-weight:bold;">
        ·
       </span>
       <strong class="selflink">
        이름없는 모자
       </strong>
       <span style="font-weight:bold;">
        ·
       </span>
       [ahref]
       
       <span style="font-weight:bold;">
        ·
       </span>
       [ahref]
       
       <span style="font-weight:bold;">
        ·
       </span>
       [ahref]
       
       <span style="font-weight:bold;">
        ·
       </span>
       <a href="/wiki/Steel_Pipes/ko" title="Steel Pipes/ko">
        강철 파이프
       </a>
       <span style="font-weight:bold;">
        ·
       </span>
       <a href="/wiki/Kringle_Collection/ko" title="Kringle Collection/ko">
        크링글의 신상품
       </a>
       <span style="font-weight:bold;">
        ·
       </span>
       [ahref]
       
       <span style="font-weight:bold;">
        ·
       </span>
       <a href="/wiki/Ornament_Armament/ko" title="Ornament Armament/ko">
        장식용 군장비
       </a>
       <span style="font-weight:bold;">
        ·
       </span>
       [linkx]
       
       <span style="font-weight:bold;">
        ·
       </span>
       [linkx]
       
       <span style="font-weight:bold;">
        ·
       </span>
       [ahref]
       
       <span style="font-weight:bold;">
        ·
       </span>
       [linkx]
       
       <span style="font-weight:bold;">
        ·
       </span>
       <a href="/wiki/Cross-Comm_Crash_Helmet/ko" title="Cross-Comm Crash Helmet/ko">
        크로스컴 탑재 완충모
       </a>
       <span style="font-weight:bold;">
        ·
       </span>
       [ahref]
       
       <span style="font-weight:bold;">
        ·
       </span>
       <a href="/wiki/Captain%27s_Cocktails/ko" title="Captain's Cocktails/ko">
        대위의 칵테일
       </a>
       <span style="font-weight:bold;">
        ·
       </span>
       [linkx]
       
       <span style="font-weight:bold;">
        ·
       </span>
       <a href="/wiki/Soldier%27s_Stogie/ko" title="Soldier's Stogie/ko">
        솔저의 엽궐련
       </a>
       <span style="font-weight:bold;">
        ·
       </span>
       <a href="/wiki/Tin_Pot/ko" title="Tin Pot/ko">
        고철모
       </a>
       <span style="font-weight:bold;">
        ·
       </span>
       [linkx]
       
       <span style="font-weight:bold;">
        ·
       </span>
       <a href="/wiki/War_Pig/ko" title="War Pig/ko">
        전쟁광
       </a>
       <span style="font-weight:bold;">
        ·
       </span>
       [linkx]
       
       <span style="font-weight:bold;">
        ·
       </span>
       [linkx]
       
       <span style="font-weight:bold;">
        ·
       </span>
       [ahref]
       
       <span style="font-weight:bold;">
        ·
       </span>
       [linkx]
       
       <span style="font-weight:bold;">
        ·
       </span>
       <a href="/wiki/Zipperface/ko" title="Zipperface/ko">
        개폐식 면상
       </a>
       <span style="font-weight:bold;">
        ·
       </span>
       <a href="/wiki/Chief_Constable/ko" title="Chief Constable/ko">
        경찰서장
       </a>
       <span style="font-weight:bold;">
        ·
       </span>
       <a href="/wiki/Deadliest_Duckling/ko" title="Deadliest Duckling/ko">
        악랄한 오리 새끼
       </a>
       <span style="font-weight:bold;">
        ·
       </span>
       <a href="/wiki/Mutton_Mann/ko" title="Mutton Mann/ko">
        구레나룻만 신사
       </a>
       <span style="font-weight:bold;">
        ·
       </span>
       <a href="/wiki/Soldier%27s_Slope_Scopers/ko" title="Soldier's Slope Scopers/ko">
        솔저의 경사도 측정기
       </a>
       <span style="font-weight:bold;">
        ·
       </span>
       [ahref]
       
       <span style="font-weight:bold;">
        ·
       </span>
       <a href="/wiki/Full_Metal_Drill_Hat/ko" title="Full Metal Drill Hat/ko">
        전피갑 훈련모
       </a>
       <span style="font-weight:bold;">
        ·
       </span>
       [linkx]
       
       <span style="font-weight:bold;">
        ·
       </span>
       [linkx]
       
       <span style="font-weight:bold;">
        ·
       </span>
       [linkx]
       
       <span style="font-weight:bold;">
        ·
       </span>
       [linkx]
       
       <span style="font-weight:bold;">
        ·
       </span>
       <a href="/wiki/Powdered_Practitioner/ko" title="Powdered Practitioner/ko">
        전분 뿌린 전문직 종사자
       </a>
       <span style="font-weight:bold;">
        ·
       </span>
       [linkx]
       
       <span style="font-weight:bold;">
        ·
       </span>
       [ahref]
       
       <span style="font-weight:bold;">
        ·
       </span>
       [linkx]
       
       <span style="font-weight:bold;">
        ·
       </span>
       <a href="/wiki/Compatriot/ko" title="Compatriot/ko">
        애국동료
       </a>
       <span style="font-weight:bold;">
        ·
       </span>
       [linkx]
       
       <span style="font-weight:bold;">
        ·
       </span>
       [ahref]
       
       <span style="font-weight:bold;">
        ·
       </span>
       [ahref]
       
       <span style="font-weight:bold;">
        ·
       </span>
       [ahref]
       
       <span style="font-weight:bold;">
        ·
       </span>
       [ahref]
       
       <span style="font-weight:bold;">
        ·
       </span>
       [linkx]
       
       <span style="font-weight:bold;">
        ·
       </span>
       [linkx]
       
       <span style="font-weight:bold;">
        ·
       </span>
       [linkx]
       
       <span style="font-weight:bold;">
        ·
       </span>
       [ahref]
       
       <span style="font-weight:bold;">
        ·
       </span>
       [linkx]
       
       <span style="font-weight:bold;">
        ·
       </span>
       [ahref]
       
       <span style="font-weight:bold;">
        ·
       </span>
       [linkx]
       
       <span style="font-weight:bold;">
        ·
       </span>
       <a href="/wiki/Freedom_Feathers/ko" title="Freedom Feathers/ko">
        자유의 깃털
       </a>
       <span style="font-weight:bold;">
        ·
       </span>
       [ahref]
       
       <span style="font-weight:bold;">
        ·
       </span>
       [ahref]
       
       <span style="font-weight:bold;">
        ·
       </span>
       [ahref]
       
       <span style="font-weight:bold;">
        ·
       </span>
       [ahref]
       
       <span style="font-weight:bold;">
        ·
       </span>
       [linkx]
       
       <span style="font-weight:bold;">
        ·
       </span>
       [linkx]
       
       <span style="font-weight:bold;">
        ·
       </span>
       <a href="/wiki/Shaolin_Sash/ko" title="Shaolin Sash/ko">
        소림사 어깨띠
       </a>
       <span style="font-weight:bold;">
        ·
       </span>
       [linkx]
       
       <span style="font-weight:bold;">
        ·
       </span>
       [ahref]
       
       <span style="font-weight:bold;">
        ·
       </span>
       [linkx]
       
       <span style="font-weight:bold;">
        ·
       </span>
       [linkx]
       
       <span style="font-weight:bold;">
        ·
       </span>
       [ahref]
       
       <span style="font-weight:bold;">
        ·
       </span>
       <a href="/wiki/War_on_Smissmas_Battle_Socks/ko" title="War on Smissmas Battle Socks/ko">
        스미스마스 전투용 양말
       </a>
       <span style="font-weight:bold;">
        ·
       </span>
       [ahref]
       
       <span style="font-weight:bold;">
        ·
       </span>
       [ahref]
       
       <span style="font-weight:bold;">
        ·
       </span>
       [linkx]
        [keywordx][keywordx][symbolx][keywordx][symbolx][bracketl7][keywordx][bracketr7][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][bracketl8][keywordx][bracketr8][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx]<li>[keywordx][symbolx][keywordx][symbolx][bracketl9][keywordx][bracketr9][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx]</li>
       
       <span style="font-weight:bold;">
        ·
       </span>
       <a href="/wiki/Toy_Soldier/ko" title="Toy Soldier/ko">
        장난감 병정
       </a>
       <span style="font-weight:bold;">
        ·
       </span>
       [ahref]
       
       <span style="font-weight:bold;">
        ·
       </span>
       [linkx]
       
       <span style="font-weight:bold;">
        ·
       </span>
       [ahref]
       
       <span style="font-weight:bold;">
        ·
       </span>
       <a href="/wiki/First_American/ko" title="First American/ko">
        최초의 미국인
       </a>
       <span style="font-weight:bold;">
        ·
       </span>
       [ahref]
       
       <span style="font-weight:bold;">
        ·
       </span>
       [ahref]
       
       <span style="font-weight:bold;">
        ·
       </span>
       [linkx]
       
       <span style="font-weight:bold;">
        ·
       </span>
       [ahref]
       
       <span style="font-weight:bold;">
        ·
       </span>
       <a href="/wiki/Lone_Survivor/ko" title="Lone Survivor/ko">
        유일한 생존자
       </a>
       <span style="font-weight:bold;">
        ·
       </span>
       [ahref]
       
       <span style="font-weight:bold;">
        ·
       </span>
       <a href="/wiki/Ghoul_Gibbin%27_Gear/ko" title="Ghoul Gibbin' Gear/ko">
        구울 관통 기구
       </a>
       <span style="font-weight:bold;">
        ·
       </span>
       [ahref]
       
       <span style="font-weight:bold;">
        ·
       </span>
       <a href="/wiki/Supernatural_Stalker/ko" title="Supernatural Stalker/ko">
        초자연적 추적자
       </a>
       <span style="font-weight:bold;">
        ·
       </span>
       [ahref]
       
       <span style="font-weight:bold;">
        ·
       </span>
       [linkx]
       
       <span style="font-weight:bold;">
        ·
       </span>
       [ahref]
       
       <span style="font-weight:bold;">
        ·
       </span>
       [ahref]
       
       <span style="font-weight:bold;">
        ·
       </span>
       <a href="/wiki/Cold_Snap_Coat/ko" title="Cold Snap Coat/ko">
        한파 외투
       </a>
       <span style="font-weight:bold;">
        ·
       </span>
       [ahref]
       
       <span style="font-weight:bold;">
        ·
       </span>
       [ahref]
       
       <span style="font-weight:bold;">
        ·
       </span>
       [ahref]
       
       <span style="font-weight:bold;">
        ·
       </span>
       [linkx]
       
       <span style="font-weight:bold;">
        ·
       </span>
       <a href="/wiki/Teufort_Knight/ko" title="Teufort Knight/ko">
        투포트 나이트
       </a>
       <span style="font-weight:bold;">
        ·
       </span>
       <a href="/wiki/Diplomat/ko" title="Diplomat/ko">
        외교관
       </a>
       <span style="font-weight:bold;">
        ·
       </span>
       [ahref]
       
       <span style="font-weight:bold;">
        ·
       </span>
       [linkx]
        [keywordx][symbolx][keywordx][symbolx][bracketl4][keywordx][bracketr4][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx]<li>[keywordx]</li><li>[ahref]</li>
       
       <span style="font-weight:bold;">
        ·
       </span>
       <a href="/wiki/Pestering_Jester/ko" title="Pestering Jester/ko">
        성가신 궁정광대
       </a>
       <span style="font-weight:bold;">
        ·
       </span>
       [linkx]
       
       <span style="font-weight:bold;">
        ·
       </span>
       [linkx]
       
       <span style="font-weight:bold;">
        ·
       </span>
       <a href="/wiki/Reader%27s_Choice/ko" title="Reader's Choice/ko">
        Reader's Choice
       </a>
       <span style="font-weight:bold;">
        ·
       </span>
       [ahref]
       
       <span style="font-weight:bold;">
        ·
       </span>
       [ahref]
       
       <span style="font-weight:bold;">
        ·
       </span>
       <a href="/wiki/Bananades/ko" title="Bananades/ko">
        Bananades
       </a>
       <span style="font-weight:bold;">
        ·
       </span>
       [linkx]
       
       <span style="font-weight:bold;">
        ·
       </span>
       [ahref]
       
       <span style="font-weight:bold;">
        ·
       </span>
       <a href="/wiki/Sharp_Chest_Pain/ko" title="Sharp Chest Pain/ko">
        날카로운 가슴 통증
       </a>
       <span style="font-weight:bold;">
        ·
       </span>
       [linkx]
       
       <span style="font-weight:bold;">
        ·
       </span>
       [linkx]
       
       <span style="font-weight:bold;">
        ·
       </span>
       [linkx]
       
       <span style="font-weight:bold;">
        ·
       </span>
       <a href="/wiki/Veterans_Attire/ko" title="Veterans Attire/ko">
        노병의 복장
       </a>
       <span style="font-weight:bold;">
        ·
       </span>
       [linkx]
       
       <span style="font-weight:bold;">
        ·
       </span>
       [linkx]
       
       <span style="font-weight:bold;">
        ·
       </span>
       [ahref]
       
       <span style="font-weight:bold;">
        ·
       </span>
       <a href="/wiki/Tank_Top/ko" title="Tank Top/ko">
        Tank Top
       </a>
       <span style="font-weight:bold;">
        ·
       </span>
       [ahref]
       
       <span style="font-weight:bold;">
        ·
       </span>
       <a class="new" href="/w/index.php?title=Climbing_Commander/ko&amp;action=edit&amp;redlink=1" title="Climbing Commander/ko (page does not exist)">
        Climbing Commander
       </a>
       <span style="font-weight:bold;">
        ·
       </span>
       [ahref]
       
       <span style="font-weight:bold;">
        ·
       </span>
       <a class="new" href="/w/index.php?title=Dumb_Bell/ko&amp;action=edit&amp;redlink=1" title="Dumb Bell/ko (page does not exist)">
        Dumb Bell
       </a>
       <span style="font-weight:bold;">
        ·
       </span>
       <a href="/wiki/List_of_All_class_cosmetics/ko" title="List of All class cosmetics/ko">
        모든 병과가 착용 가능한 장식 아이템
       </a>
      </div>
     </td>
    </tr>
    <tr style="height:2px">
     <td>
     </td>
    </tr>
    <tr>
     <td class="navbox-group" style=";;">
      [linkx]
      
     </td>
     <td class="navbox-list navbox-odd" style="text-align:left;border-left-width:2px;border-left-style:solid;width:100%;padding:0px;;background: #FEF5E0;;">
      <div style="padding:0em 0.25em">
       [linkx]
       
       <span style="font-weight:bold;">
        ·
       </span>
       <a href="/wiki/General%27s_Formals/ko" title="General's Formals/ko">
        장군의 제복
       </a>
       <span style="font-weight:bold;">
        ·
       </span>
       [linkx]
       
       <span style="font-weight:bold;">
        ·
       </span>
       [linkx]
       
       <span style="font-weight:bold;">
        ·
       </span>
       [linkx]
       
       <span style="font-weight:bold;">
        ·
       </span>
       [ahref]
       
       <span style="font-weight:bold;">
        ·
       </span>
       [linkx]
       
       <span style="font-weight:bold;">
        ·
       </span>
       [ahref]
       
       <span style="font-weight:bold;">
        ·
       </span>
       [linkx]
       
       <span style="font-weight:bold;">
        ·
       </span>
       [ahref]
       
      </div>
     </td>
    </tr>
    <tr style="height:2px">
     <td>
     </td>
    </tr>
    <tr>
     <td class="navbox-group" style=";;">
      <a href="/wiki/Taunts/ko" title="Taunts/ko">
       도발
      </a>
     </td>
     <td class="navbox-list navbox-even" style="text-align:left;border-left-width:2px;border-left-style:solid;width:100%;padding:0px;;background: transparent;;">
      <div style="padding:0em 0.25em">
       <a href="/wiki/Fresh_Brewed_Victory/ko" title="Fresh Brewed Victory/ko">
        갓 내린 승리
       </a>
       <span style="font-weight:bold;">
        ·
       </span>
       [linkx]
       
       <span style="font-weight:bold;">
        ·
       </span>
       <a href="/wiki/Fubar_Fanfare/ko" title="Fubar Fanfare/ko">
        폭탄급 팡파르
       </a>
       <span style="font-weight:bold;">
        ·
       </span>
       [ahref]
       
      </div>
     </td>
    </tr>
    <tr style="height:2px">
     <td>
     </td>
    </tr>
    <tr>
     <td class="navbox-group" style=";;">
      [linkx]
      
     </td>
     <td class="navbox-list navbox-odd" style="text-align:left;border-left-width:2px;border-left-style:solid;width:100%;padding:0px;;background: #FEF5E0;;">
      <div style="padding:0em 0.25em">
       <a href="/wiki/Soldier_achievements/ko" title="Soldier achievements/ko">
        솔저 도전 과제
       </a>
       [linkx]
       
      </div>
     </td>
    </tr>
    <tr style="height:2px">
     <td>
     </td>
    </tr>
    <tr>
     <td class="navbox-group" style=";;">
      캐릭터
     </td>
     <td class="navbox-list navbox-even" style="text-align:left;border-left-width:2px;border-left-style:solid;width:100%;padding:0px;;background: transparent;;">
      <div style="padding:0em 0.25em">
       [ahref]
       
       <span style="font-weight:bold;">
        ·
       </span>
       [ahref]
       
       <span style="font-weight:bold;">
        ·
       </span>
       [linkx]
       
       <span style="font-weight:bold;">
        ·
       </span>
       [ahref]
       
      </div>
     </td>
    </tr>
    <tr style="height:2px">
     <td>
     </td>
    </tr>
    <tr>
     <td class="navbox-group" style=";;">
      전략
     </td>
     <td class="navbox-list navbox-odd" style="text-align:left;border-left-width:2px;border-left-style:solid;width:100%;padding:0px;;background: #FEF5E0;;">
      <div style="padding:0em 0.25em">
       [linkx]
       
       (
       [ahref]
       
       <span style="font-weight:bold;">
        ·
       </span>
       [linkx]
       
       <span style="font-weight:bold;">
        ·
       </span>
       [linkx]
       
       )
       <span style="font-weight:bold;">
        ·
       </span>
       [linkx]
       
       <span style="font-weight:bold;">
        ·
       </span>
       <a class="new" href="/w/index.php?title=Team_strategy/ko&amp;action=edit&amp;redlink=1" title="Team strategy/ko (page does not exist)">
        팀 전략
       </a>
      </div>
     </td>
    </tr>
    <tr style="height:2px">
     <td>
     </td>
    </tr>
    <tr>
     <td class="navbox-group" style=";;">
      능력
     </td>
     <td class="navbox-list navbox-even" style="text-align:left;border-left-width:2px;border-left-style:solid;width:100%;padding:0px;;background: transparent;;">
      <div style="padding:0em 0.25em">
       [ahref]
       
       <span style="font-weight:bold;">
        ·
       </span>
       <a href="/wiki/Juggling/ko" title="Juggling/ko">
        저글링
       </a>
       <span style="font-weight:bold;">
        ·
       </span>
       [ahref]
       
       <span style="font-weight:bold;">
        ·
       </span>
       [ahref]
       
       <span style="font-weight:bold;">
        ·
       </span>
       [linkx]
       
      </div>
     </td>
    </tr>
    <tr style="height:2px">
     <td>
     </td>
    </tr>
    <tr>
     <td class="navbox-group" style=";;">
      기타
     </td>
     <td class="navbox-list navbox-odd" style="text-align:left;border-left-width:2px;border-left-style:solid;width:100%;padding:0px;;background: #FEF5E0;;">
      <div style="padding:0em 0.25em">
       [ahref]
       
       <span style="font-weight:bold;">
        ·
       </span>
       [ahref]
       
      </div>
     </td>
    </tr>
   </table>
  </td>
 </tr>
</table>
<table cellspacing="0" class="navbox" style=";;">
 <tr>
  <td style="padding:2px;">
   <table cellspacing="0" class="nowraplinks collapsible collapsed" style="width:100%;background:transparent;color:inherit;;">
    <tr>
     <th class="navbox-title" colspan="2" style=";">
      <div style="float:left; width:6em;text-align:left;">
       <div class="noprint plainlinks navbar" style="background:none; padding:0; font-weight:normal;;;border:none;; font-size:xx-small;">
        [ahref]
        
        <span style="font-size:80%;">
         •
        </span>
        [linkx]
        
        <span style="font-size:80%;">
         •
        </span>
        [ahref]
        
       </div>
      </div>
      <span class="" style="font-size:110%;">
       [ahref]
       
       [linkx]
       
      </span>
     </th>
    </tr>
    <tr style="height:2px;">
     <td>
     </td>
    </tr>
    <tr>
     <td class="navbox-group" style=";;">
      [ahref]
      
     </td>
     <td class="navbox-list navbox-odd" style="text-align:left;border-left-width:2px;border-left-style:solid;width:100%;padding:0px;;background: #FEF5E0;;">
      <div style="padding:0em 0.25em">
      </div>
      <table cellspacing="0" class="nowraplinks navbox-subgroup" style="width:100%;;;;">
       <tr>
        <td class="navbox-group" style=";padding-left:0em;padding-right:0em;background: #FFF2B3;;">
         <div style="padding:0em 0.75em;">
          주무기
         </div>
        </td>
        <td class="navbox-list navbox-odd" style="text-align:left;border-left-width:2px;border-left-style:solid;width:100%;padding:0px;;background: transparent;;">
         <div style="padding:0em 0.25em">
          [linkx]
          
          <span style="font-weight:bold;">
           ·
          </span>
          [linkx]
          
          <span style="font-weight:bold;">
           ·
          </span>
          [linkx]
          
          (
          [ahref]
          
          )
          <span style="font-weight:bold;">
           ·
          </span>
          [linkx]
          
          <span style="font-weight:bold;">
           ·
          </span>
          [ahref]
          
          <span style="font-weight:bold;">
           ·
          </span>
          [ahref]
          
         </div>
        </td>
       </tr>
       <tr style="height:2px">
        <td>
        </td>
       </tr>
       <tr>
        <td class="navbox-group" style=";padding-left:0em;padding-right:0em;background: #FFF2B3;;">
         <div style="padding:0em 0.75em;">
          보조무기
         </div>
        </td>
        <td class="navbox-list navbox-even" style="text-align:left;border-left-width:2px;border-left-style:solid;width:100%;padding:0px;;background: #FEF5E0;;">
         <div style="padding:0em 0.25em">
          [ahref]
          
          <span style="font-weight:bold;">
           ·
          </span>
          <a href="/wiki/Chargin%27_Targe/ko" title="Chargin' Targe/ko">
           돌격 방패
          </a>
          <span style="font-weight:bold;">
           ·
          </span>
          [linkx]
          
          <span style="font-weight:bold;">
           ·
          </span>
          [ahref]
          
          <span style="font-weight:bold;">
           ·
          </span>
          [linkx]
          
          <span style="font-weight:bold;">
           ·
          </span>
          <a href="/wiki/Tide_Turner/ko" title="Tide Turner/ko">
           조류 조타기
          </a>
          <span style="font-weight:bold;">
           ·
          </span>
          [linkx]
          
         </div>
        </td>
       </tr>
       <tr style="height:2px">
        <td>
        </td>
       </tr>
       <tr>
        <td class="navbox-group" style=";padding-left:0em;padding-right:0em;background: #FFF2B3;;">
         <div style="padding:0em 0.75em;">
          근접무기
         </div>
        </td>
        <td class="navbox-list navbox-odd" style="text-align:left;border-left-width:2px;border-left-style:solid;width:100%;padding:0px;;background: transparent;;">
         <div style="padding:0em 0.25em">
          <a href="/wiki/Bottle/ko" title="Bottle/ko">
           술병
          </a>
          (
          <a href="/wiki/Frying_Pan/ko" title="Frying Pan/ko">
           프라이팬
          </a>
          ,
          <a href="/wiki/Saxxy/ko" title="Saxxy/ko">
           Saxxy
          </a>
          ,
          [linkx]
          
          ,
          <a href="/wiki/Conscientious_Objector/ko" title="Conscientious Objector/ko">
           양심적 병역 기피자
          </a>
          ,
          <a href="/wiki/Freedom_Staff/ko" title="Freedom Staff/ko">
           자유의 지팡이
          </a>
          ,
          <a href="/wiki/Bat_Outta_Hell/ko" title="Bat Outta Hell/ko">
           지옥에서 뛰쳐나온 방망이
          </a>
          ,
          [ahref]
          
          ,
          [ahref]
          
          ,
          [ahref]
          
          ,
          [ahref]
          
          ,
          [ahref]
          
          )
          <span style="font-weight:bold;">
           ·
          </span>
          [linkx]
          
          (
          [ahref]
          
          ,
          [ahref]
          
          )
          <span style="font-weight:bold;">
           ·
          </span>
          [linkx]
          
          <span style="font-weight:bold;">
           ·
          </span>
          [linkx]
          
          <span style="font-weight:bold;">
           ·
          </span>
          [linkx]
          
          <span style="font-weight:bold;">
           ·
          </span>
          [ahref]
          
          <span style="font-weight:bold;">
           ·
          </span>
          [linkx]
          
          <span style="font-weight:bold;">
           ·
          </span>
          [linkx]
          
         </div>
        </td>
       </tr>
       <tr style="height:2px">
        <td>
        </td>
       </tr>
       <tr>
        <td class="navbox-group" style=";padding-left:0em;padding-right:0em;background: #FFF2B3;;">
         <div style="padding:0em 0.75em;">
          [linkx]
          
         </div>
        </td>
        <td class="navbox-list navbox-even" style="text-align:left;border-left-width:2px;border-left-style:solid;width:100%;padding:0px;;background: #FEF5E0;;">
         <div style="padding:0em 0.25em">
          [ahref]
          
         </div>
        </td>
       </tr>
      </table>
      <div>
      </div>
     </td>
    </tr>
    <tr style="height:2px">
     <td>
     </td>
    </tr>
    <tr>
     <td class="navbox-group" style=";;">
      [ahref]
      
     </td>
     <td class="navbox-list navbox-even" style="text-align:left;border-left-width:2px;border-left-style:solid;width:100%;padding:0px;;background: transparent;;">
      [ahref]<li>[keywordx][symbolx][keywordx][symbolx][bracketl3][keywordx][bracketr3][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx]</li><li>[mkey1]</li>
     </td>
    </tr>
    <tr style="height:2px">
     <td>
     </td>
    </tr>
    <tr>
     <td class="navbox-group" style=";;">
      [linkx]
      
     </td>
     <td class="navbox-list navbox-odd" style="text-align:left;border-left-width:2px;border-left-style:solid;width:100%;padding:0px;;background: #FEF5E0;;">
      <div style="padding:0em 0.25em">
       [linkx]
       
       <span style="font-weight:bold;">
        ·
       </span>
       [ahref]
       
       <span style="font-weight:bold;">
        ·
       </span>
       [linkx]
       
       <span style="font-weight:bold;">
        ·
       </span>
       [linkx]
       
       <span style="font-weight:bold;">
        ·
       </span>
       [linkx]
       
       <span style="font-weight:bold;">
        ·
       </span>
       <a href="/wiki/Cursed_Captain/ko" title="Cursed Captain/ko">
        저주받은 선장
       </a>
       <span style="font-weight:bold;">
        ·
       </span>
       [linkx]
       
       <span style="font-weight:bold;">
        ·
       </span>
       <a href="/wiki/Forgotten_King/ko" title="Forgotten King/ko">
        잊혀진 왕
       </a>
      </div>
     </td>
    </tr>
    <tr style="height:2px">
     <td>
     </td>
    </tr>
    <tr>
     <td class="navbox-group" style=";;">
      [ahref]
      
     </td>
     <td class="navbox-list navbox-even" style="text-align:left;border-left-width:2px;border-left-style:solid;width:100%;padding:0px;;background: transparent;;">
      <div style="padding:0em 0.25em">
       [ahref]
       
       <span style="font-weight:bold;">
        ·
       </span>
       [linkx]
       
       <span style="font-weight:bold;">
        ·
       </span>
       <a href="/wiki/Bad_Pipes/ko" title="Bad Pipes/ko">
        뷁파이프
       </a>
       <span style="font-weight:bold;">
        ·
       </span>
       <a href="/wiki/Scotsmann%27s_Stagger/ko" title="Scotsmann's Stagger/ko">
        스코틀랜드인의 술주정
       </a>
      </div>
     </td>
    </tr>
    <tr style="height:2px">
     <td>
     </td>
    </tr>
    <tr>
     <td class="navbox-group" style=";;">
      [linkx]
      
     </td>
     <td class="navbox-list navbox-odd" style="text-align:left;border-left-width:2px;border-left-style:solid;width:100%;padding:0px;;background: #FEF5E0;;">
      <div style="padding:0em 0.25em">
       <a href="/wiki/Demoman_achievements/ko" title="Demoman achievements/ko">
        데모맨 도전 과제
       </a>
       [ahref]
       
      </div>
     </td>
    </tr>
    <tr style="height:2px">
     <td>
     </td>
    </tr>
    <tr>
     <td class="navbox-group" style=";;">
      캐릭터
     </td>
     <td class="navbox-list navbox-even" style="text-align:left;border-left-width:2px;border-left-style:solid;width:100%;padding:0px;;background: transparent;;">
      <div style="padding:0em 0.25em">
       [ahref]
       
       <span style="font-weight:bold;">
        ·
       </span>
       [ahref]
       
       <span style="font-weight:bold;">
        ·
       </span>
       [linkx]
       
       <span style="font-weight:bold;">
        ·
       </span>
       [ahref]
       
      </div>
     </td>
    </tr>
    <tr style="height:2px">
     <td>
     </td>
    </tr>
    <tr>
     <td class="navbox-group" style=";;">
      전략
     </td>
     <td class="navbox-list navbox-odd" style="text-align:left;border-left-width:2px;border-left-style:solid;width:100%;padding:0px;;background: #FEF5E0;;">
      <div style="padding:0em 0.25em">
       [linkx]
       
       (
       [ahref]
       
       <span style="font-weight:bold;">
        ·
       </span>
       [linkx]
       
       <span style="font-weight:bold;">
        ·
       </span>
       [ahref]
       
       )
       <span style="font-weight:bold;">
        ·
       </span>
       [ahref]
       
       <span style="font-weight:bold;">
        ·
       </span>
       <a class="new" href="/w/index.php?title=Team_strategy/ko&amp;action=edit&amp;redlink=1" title="Team strategy/ko (page does not exist)">
        팀 전략
       </a>
      </div>
     </td>
    </tr>
    <tr style="height:2px">
     <td>
     </td>
    </tr>
    <tr>
     <td class="navbox-group" style=";;">
      능력
     </td>
     <td class="navbox-list navbox-even" style="text-align:left;border-left-width:2px;border-left-style:solid;width:100%;padding:0px;;background: transparent;;">
      <div style="padding:0em 0.25em">
       [ahref]
       
       <span style="font-weight:bold;">
        ·
       </span>
       <a class="new" href="/w/index.php?title=Charging/ko&amp;action=edit&amp;redlink=1" title="Charging/ko (page does not exist)">
        Charging
       </a>
       <span style="font-weight:bold;">
        ·
       </span>
       [ahref]
       
      </div>
     </td>
    </tr>
    <tr style="height:2px">
     <td>
     </td>
    </tr>
    <tr>
     <td class="navbox-group" style=";;">
      기타
     </td>
     <td class="navbox-list navbox-odd" style="text-align:left;border-left-width:2px;border-left-style:solid;width:100%;padding:0px;;background: #FEF5E0;;">
      <div style="padding:0em 0.25em">
       [ahref]
       
       <span style="font-weight:bold;">
        ·
       </span>
       [ahref]
       
      </div>
     </td>
    </tr>
   </table>
  </td>
 </tr>
</table>
<table cellspacing="0" class="navbox" style=";;">
 <tr>
  <td style="padding:2px;">
   <table cellspacing="0" class="nowraplinks collapsible collapsed" style="width:100%;background:transparent;color:inherit;;">
    <tr>
     <th class="navbox-title" colspan="2" style=";">
      <div style="float:left; width:6em;text-align:left;">
       <div class="noprint plainlinks navbar" style="background:none; padding:0; font-weight:normal;;;border:none;; font-size:xx-small;">
        [linkx]
        
        <span style="font-size:80%;">
         •
        </span>
        [linkx]
        
        <span style="font-size:80%;">
         •
        </span>
        <a class="external text" href="/w/index.php?title=Template:Engineer_Nav&amp;action=edit" rel="nofollow">
         <span style=";;border:none;;" title="Edit this template">
          e
         </span>
        </a>
       </div>
      </div>
      <span class="" style="font-size:110%;">
       <a href="/wiki/Engineer/ko" title="Engineer/ko">
       </a>
       [ahref]
       
      </span>
     </th>
    </tr>
    <tr style="height:2px;">
     <td>
     </td>
    </tr>
    <tr>
     <td class="navbox-group" style=";;">
      [ahref]
      
     </td>
     <td class="navbox-list navbox-odd" style="text-align:left;border-left-width:2px;border-left-style:solid;width:100%;padding:0px;;;">
      <div style="padding:0em 0.25em">
      </div>
      <table cellspacing="0" class="nowraplinks navbox-subgroup" style="width:100%;;;;">
       <tr>
        <td class="navbox-group" style=";padding-left:0em;padding-right:0em;background: #FFF2B3;;">
         <div style="padding:0em 0.75em;">
          주무기
         </div>
        </td>
        <td class="navbox-list navbox-odd" style="text-align:left;border-left-width:2px;border-left-style:solid;width:100%;padding:0px;;;">
         <div style="padding:0em 0.25em">
          <a href="/wiki/Shotgun/ko" title="Shotgun/ko">
           산탄총
          </a>
          <span style="font-weight:bold;">
           ·
          </span>
          <a href="/wiki/Frontier_Justice/ko" title="Frontier Justice/ko">
           개척자의 정의
          </a>
          <span style="font-weight:bold;">
           ·
          </span>
          [linkx]
          
          <span style="font-weight:bold;">
           ·
          </span>
          [linkx]
          
          <span style="font-weight:bold;">
           ·
          </span>
          [ahref]
          
          <span style="font-weight:bold;">
           ·
          </span>
          [linkx]
          
         </div>
        </td>
       </tr>
       <tr style="height:2px">
        <td>
        </td>
       </tr>
       <tr>
        <td class="navbox-group" style=";padding-left:0em;padding-right:0em;background: #FFF2B3;;">
         <div style="padding:0em 0.75em;">
          보조무기
         </div>
        </td>
        <td class="navbox-list navbox-even" style="text-align:left;border-left-width:2px;border-left-style:solid;width:100%;padding:0px;;;">
         <div style="padding:0em 0.25em">
          [ahref]
          
          (
          [ahref]
          
          ,
          <a href="/wiki/C.A.P.P.E.R/ko" title="C.A.P.P.E.R/ko">
           선장의 고급진 펄스트론 입자 전자기 광선총
          </a>
          )
          <span style="font-weight:bold;">
           ·
          </span>
          [linkx]
          
          (
          [linkx]
          
          )
          <span style="font-weight:bold;">
           ·
          </span>
          [ahref]
          
         </div>
        </td>
       </tr>
       <tr style="height:2px">
        <td>
        </td>
       </tr>
       <tr>
        <td class="navbox-group" style=";padding-left:0em;padding-right:0em;background: #FFF2B3;;">
         <div style="padding:0em 0.75em;">
          근접무기
         </div>
        </td>
        <td class="navbox-list navbox-odd" style="text-align:left;border-left-width:2px;border-left-style:solid;width:100%;padding:0px;;;">
         <div style="padding:0em 0.25em">
          <a href="/wiki/Wrench/ko" title="Wrench/ko">
           렌치
          </a>
          (
          [linkx]
          
          ,
          [linkx]
          
          ,
          <a href="/wiki/Necro_Smasher/ko" title="Necro Smasher/ko">
           시체 분쇄기
          </a>
          ,
          [ahref]
          
          )
          <span style="font-weight:bold;">
           ·
          </span>
          <a href="/wiki/Gunslinger/ko" title="Gunslinger/ko">
           총잡이
          </a>
          <span style="font-weight:bold;">
           ·
          </span>
          [linkx]
          
          <span style="font-weight:bold;">
           ·
          </span>
          <a href="/wiki/Jag/ko" title="Jag/ko">
           뾰족 렌치
          </a>
          <span style="font-weight:bold;">
           ·
          </span>
          [linkx]
          
         </div>
        </td>
       </tr>
       <tr style="height:2px">
        <td>
        </td>
       </tr>
       <tr>
        <td class="navbox-group" style=";padding-left:0em;padding-right:0em;background: #FFF2B3;;">
         <div style="padding:0em 0.75em;">
          PDA
         </div>
        </td>
        <td class="navbox-list navbox-even" style="text-align:left;border-left-width:2px;border-left-style:solid;width:100%;padding:0px;;;">
         <div style="padding:0em 0.25em">
          [linkx]
          
          <span style="font-weight:bold;">
           ·
          </span>
          [linkx]
          
         </div>
        </td>
       </tr>
       <tr style="height:2px">
        <td>
        </td>
       </tr>
       <tr>
        <td class="navbox-group" style=";padding-left:0em;padding-right:0em;background: #FFF2B3;;">
         <div style="padding:0em 0.75em;">
          [ahref]
          
         </div>
        </td>
        <td class="navbox-list navbox-odd" style="text-align:left;border-left-width:2px;border-left-style:solid;width:100%;padding:0px;;;">
         <div style="padding:0em 0.25em">
          [linkx]
          
          <span style="font-weight:bold;">
           ·
          </span>
          [linkx]
          
         </div>
        </td>
       </tr>
      </table>
      <div>
      </div>
     </td>
    </tr>
    <tr style="height:2px">
     <td>
     </td>
    </tr>
    <tr>
     <td class="navbox-group" style=";;">
      <a href="/wiki/Cosmetic_items/ko" title="Cosmetic items/ko">
       장식
      </a>
     </td>
     <td class="navbox-list navbox-even" style="text-align:left;border-left-width:2px;border-left-style:solid;width:100%;padding:0px;;;">
      <div style="padding:0em 0.25em">
       <a href="/wiki/Mining_Light/ko" title="Mining Light/ko">
        광업용 조명기구
       </a>
       <span style="font-weight:bold;">
        ·
       </span>
       <a href="/wiki/Engineer%27s_Cap/ko" title="Engineer's Cap/ko">
        기술자의 모자
       </a>
       <span style="font-weight:bold;">
        ·
       </span>
       [linkx]
       
       <span style="font-weight:bold;">
        ·
       </span>
       [ahref]
       
       <span style="font-weight:bold;">
        ·
       </span>
       [linkx]
       
       <span style="font-weight:bold;">
        ·
       </span>
       [ahref]
       
       <span style="font-weight:bold;">
        ·
       </span>
       [ahref]
       
       <span style="font-weight:bold;">
        ·
       </span>
       [ahref]
       
       <span style="font-weight:bold;">
        ·
       </span>
       [linkx]
       
       <span style="font-weight:bold;">
        ·
       </span>
       <a href="/wiki/Googly_Gazer/ko" title="Googly Gazer/ko">
        곁눈질하는 감시자
       </a>
       <span style="font-weight:bold;">
        ·
       </span>
       [ahref]
       
       <span style="font-weight:bold;">
        ·
       </span>
       [linkx]
       
       <span style="font-weight:bold;">
        ·
       </span>
       [linkx]
       
       <span style="font-weight:bold;">
        ·
       </span>
       [linkx]
       
       <span style="font-weight:bold;">
        ·
       </span>
       [ahref]
       
       <span style="font-weight:bold;">
        ·
       </span>
       [ahref]
       
       <span style="font-weight:bold;">
        ·
       </span>
       [linkx]
       
       <span style="font-weight:bold;">
        ·
       </span>
       [linkx]
       
       <span style="font-weight:bold;">
        ·
       </span>
       [ahref]
       
       <span style="font-weight:bold;">
        ·
       </span>
       <a href="/wiki/Builder%27s_Blueprints/ko" title="Builder's Blueprints/ko">
        건축가의 청사진
       </a>
       <span style="font-weight:bold;">
        ·
       </span>
       <strong class="selflink">
        이름없는 모자
       </strong>
       <span style="font-weight:bold;">
        ·
       </span>
       [ahref]
       
       <span style="font-weight:bold;">
        ·
       </span>
       [linkx]
       
       <span style="font-weight:bold;">
        ·
       </span>
       [ahref]
       
       <span style="font-weight:bold;">
        ·
       </span>
       [linkx]
       
       <span style="font-weight:bold;">
        ·
       </span>
       [ahref]
       
       <span style="font-weight:bold;">
        ·
       </span>
       [ahref]
       
       <span style="font-weight:bold;">
        ·
       </span>
       [linkx]
       
       <span style="font-weight:bold;">
        ·
       </span>
       [linkx]
       
       <span style="font-weight:bold;">
        ·
       </span>
       [ahref]
       
       <span style="font-weight:bold;">
        ·
       </span>
       <a href="/wiki/Stocking_Stuffer/ko" title="Stocking Stuffer/ko">
        양말 속 선물
       </a>
       <span style="font-weight:bold;">
        ·
       </span>
       [ahref]
       
       <span style="font-weight:bold;">
        ·
       </span>
       [linkx]
       
       <span style="font-weight:bold;">
        ·
       </span>
       [linkx]
       
       <span style="font-weight:bold;">
        ·
       </span>
       <a href="/wiki/Champ_Stamp/ko" title="Champ Stamp/ko">
        용병의 용문신
       </a>
       <span style="font-weight:bold;">
        ·
       </span>
       [ahref]
       
       <span style="font-weight:bold;">
        ·
       </span>
       <a href="/wiki/Tin-1000/ko" title="Tin-1000/ko">
        Tin-1000
       </a>
       <span style="font-weight:bold;">
        ·
       </span>
       <a href="/wiki/Crafty_Hair/ko" title="Crafty Hair/ko">
        교묘한 머리카락
       </a>
       <span style="font-weight:bold;">
        ·
       </span>
       [ahref]
       
       <span style="font-weight:bold;">
        ·
       </span>
       <a href="/wiki/Master_Mind/ko" title="Master Mind/ko">
        주모뇌
       </a>
       <span style="font-weight:bold;">
        ·
       </span>
       [linkx]
       
       <span style="font-weight:bold;">
        ·
       </span>
       [linkx]
       
       <span style="font-weight:bold;">
        ·
       </span>
       [ahref]
       
       <span style="font-weight:bold;">
        ·
       </span>
       [linkx]
       
       <span style="font-weight:bold;">
        ·
       </span>
       <a href="/wiki/Mutton_Mann/ko" title="Mutton Mann/ko">
        구레나룻만 신사
       </a>
       <span style="font-weight:bold;">
        ·
       </span>
       <a href="/wiki/Grizzled_Growth/ko" title="Grizzled Growth/ko">
        우거진 수염
       </a>
       <span style="font-weight:bold;">
        ·
       </span>
       <a href="/wiki/Last_Straw/ko" title="Last Straw/ko">
        최후의 지푸라기
       </a>
       <span style="font-weight:bold;">
        ·
       </span>
       [linkx]
       
       <span style="font-weight:bold;">
        ·
       </span>
       [ahref]
       
       <span style="font-weight:bold;">
        ·
       </span>
       [ahref]
       
       <span style="font-weight:bold;">
        ·
       </span>
       <a href="/wiki/Data_Mining_Light/ko" title="Data Mining Light/ko">
        자료 채광용 조명기구
       </a>
       <span style="font-weight:bold;">
        ·
       </span>
       <a href="/wiki/Plug-In_Prospector/ko" title="Plug-In Prospector/ko">
        플러그인 탐광자
       </a>
       <span style="font-weight:bold;">
        ·
       </span>
       [ahref]
       
       <span style="font-weight:bold;">
        ·
       </span>
       [linkx]
       
       <span style="font-weight:bold;">
        ·
       </span>
       <a href="/wiki/Timeless_Topper/ko" title="Timeless Topper/ko">
        절대 안 썩는 모자
       </a>
       <span style="font-weight:bold;">
        ·
       </span>
       [linkx]
       
       <span style="font-weight:bold;">
        ·
       </span>
       [ahref]
       
       <span style="font-weight:bold;">
        ·
       </span>
       [ahref]
       
       <span style="font-weight:bold;">
        ·
       </span>
       [linkx]
       
       <span style="font-weight:bold;">
        ·
       </span>
       [linkx]
       
       <span style="font-weight:bold;">
        ·
       </span>
       [ahref]
       
       <span style="font-weight:bold;">
        ·
       </span>
       <a href="/wiki/Macho_Mann/ko" title="Macho Mann/ko">
        마초 만
       </a>
       <span style="font-weight:bold;">
        ·
       </span>
       [linkx]
       
       <span style="font-weight:bold;">
        ·
       </span>
       <a href="/wiki/Cuban_Bristle_Crisis/ko" title="Cuban Bristle Crisis/ko">
        쿠바 미수염 위기
       </a>
       <span style="font-weight:bold;">
        ·
       </span>
       [linkx]
       
       <span style="font-weight:bold;">
        ·
       </span>
       [linkx]
       
       <span style="font-weight:bold;">
        ·
       </span>
       [ahref]
       
       <span style="font-weight:bold;">
        ·
       </span>
       [linkx]
       
       <span style="font-weight:bold;">
        ·
       </span>
       [ahref]
       
       <span style="font-weight:bold;">
        ·
       </span>
       [ahref]
       
       <span style="font-weight:bold;">
        ·
       </span>
       [linkx]
       
       <span style="font-weight:bold;">
        ·
       </span>
       [ahref]
       
       <span style="font-weight:bold;">
        ·
       </span>
       <a href="/wiki/Cute_Suit/ko" title="Cute Suit/ko">
        귀염복
       </a>
       <span style="font-weight:bold;">
        ·
       </span>
       [linkx]
       
       <span style="font-weight:bold;">
        ·
       </span>
       <a href="/wiki/Mister_Bubbles/ko" title="Mister Bubbles/ko">
        방울머리 아저씨
       </a>
       <span style="font-weight:bold;">
        ·
       </span>
       <a href="/wiki/Scotch_Saver/ko" title="Scotch Saver/ko">
        탄압 구조원
       </a>
       <span style="font-weight:bold;">
        ·
       </span>
       [ahref]
       
       <span style="font-weight:bold;">
        ·
       </span>
       <a href="/wiki/Trencher%27s_Tunic/ko" title="Trencher's Tunic/ko">
        참호병의 웃옷
       </a>
       <span style="font-weight:bold;">
        ·
       </span>
       [ahref]
       
       <span style="font-weight:bold;">
        ·
       </span>
       [linkx]
       
       <span style="font-weight:bold;">
        ·
       </span>
       <a href="/wiki/Endothermic_Exowear/ko" title="Endothermic Exowear/ko">
        흡열성 외투
       </a>
       <span style="font-weight:bold;">
        ·
       </span>
       [linkx]
       
       <span style="font-weight:bold;">
        ·
       </span>
       <a href="/wiki/Level_Three_Chin/ko" title="Level Three Chin/ko">
        3단계 턱
       </a>
       <span style="font-weight:bold;">
        ·
       </span>
       [ahref]
       
       <span style="font-weight:bold;">
        ·
       </span>
       [linkx]
       
       <span style="font-weight:bold;">
        ·
       </span>
       [ahref]
       
       <span style="font-weight:bold;">
        ·
       </span>
       <a href="/wiki/Hillbilly_Speed-Bump/ko" title="Hillbilly Speed-Bump/ko">
        과속 방지 아르마딜로
       </a>
       <span style="font-weight:bold;">
        ·
       </span>
       [linkx]
       
       <span style="font-weight:bold;">
        ·
       </span>
       [linkx]
       
       <span style="font-weight:bold;">
        ·
       </span>
       [linkx]
       
       <span style="font-weight:bold;">
        ·
       </span>
       [ahref]
       
       <span style="font-weight:bold;">
        ·
       </span>
       [ahref]
       
       <span style="font-weight:bold;">
        ·
       </span>
       <a href="/wiki/Insulated_Inventor/ko" title="Insulated Inventor/ko">
        단열된 발명가
       </a>
       <span style="font-weight:bold;">
        ·
       </span>
       [linkx]
       
       <span style="font-weight:bold;">
        ·
       </span>
       [linkx]
       
       <span style="font-weight:bold;">
        ·
       </span>
       <a href="/wiki/Conagher%27s_Combover/ko" title="Conagher's Combover/ko">
        코내거의 빗어 넘긴 머리
       </a>
       <span style="font-weight:bold;">
        ·
       </span>
       [linkx]
       
       <span style="font-weight:bold;">
        ·
       </span>
       <a href="/wiki/Holstered_Heaters/ko" title="Holstered Heaters/ko">
        권총집 달린 가열기
       </a>
       <span style="font-weight:bold;">
        ·
       </span>
       [linkx]
       
       <span style="font-weight:bold;">
        ·
       </span>
       <a href="/wiki/Sheriff%27s_Stetson/ko" title="Sheriff's Stetson/ko">
        보안관의 스테트튼 모자
       </a>
       <span style="font-weight:bold;">
        ·
       </span>
       [ahref]
       
       <span style="font-weight:bold;">
        ·
       </span>
       [linkx]
       
       <span style="font-weight:bold;">
        ·
       </span>
       <a href="/wiki/Life_Support_System/ko" title="Life Support System/ko">
        생명 유지 장치
       </a>
       <span style="font-weight:bold;">
        ·
       </span>
       [ahref]
       
       <span style="font-weight:bold;">
        ·
       </span>
       [linkx]
       
       <span style="font-weight:bold;">
        ·
       </span>
       [ahref]
       
       <span style="font-weight:bold;">
        ·
       </span>
       <a href="/wiki/Dead%27er_Alive/ko" title="Dead'er Alive/ko">
        죽든 살든
       </a>
       <span style="font-weight:bold;">
        ·
       </span>
       <a href="/wiki/Iron_Lung/ko" title="Iron Lung/ko">
        무쇠 허파
       </a>
       <span style="font-weight:bold;">
        ·
       </span>
       [ahref]
       
       <span style="font-weight:bold;">
        ·
       </span>
       [ahref]
       
       <span style="font-weight:bold;">
        ·
       </span>
       [ahref]
       
       <span style="font-weight:bold;">
        ·
       </span>
       [linkx]
       
       <span style="font-weight:bold;">
        ·
       </span>
       <a href="/wiki/Winter_Backup/ko" title="Winter Backup/ko">
        겨울 예비 장비
       </a>
       <span style="font-weight:bold;">
        ·
       </span>
       [linkx]
       
       <span style="font-weight:bold;">
        ·
       </span>
       [linkx]
       
       <span style="font-weight:bold;">
        ·
       </span>
       [linkx]
       
       <span style="font-weight:bold;">
        ·
       </span>
       <a href="/wiki/Final_Frontier_Freighter/ko" title="Final Frontier Freighter/ko">
        Final Frontier Freighter
       </a>
       <span style="font-weight:bold;">
        ·
       </span>
       [ahref]
       
       <span style="font-weight:bold;">
        ·
       </span>
       <a href="/wiki/Packable_Provisions/ko" title="Packable Provisions/ko">
        Packable Provisions
       </a>
       <span style="font-weight:bold;">
        ·
       </span>
       [linkx]
       
       <span style="font-weight:bold;">
        ·
       </span>
       [ahref]
       
       <span style="font-weight:bold;">
        ·
       </span>
       [ahref]
       
       <span style="font-weight:bold;">
        ·
       </span>
       [ahref]
       
       <span style="font-weight:bold;">
        ·
       </span>
       [ahref]
       
       <span style="font-weight:bold;">
        ·
       </span>
       [ahref]
       
       <span style="font-weight:bold;">
        ·
       </span>
       <a href="/wiki/Tropical_Toad/ko" title="Tropical Toad/ko">
        Tropical Toad
       </a>
       <span style="font-weight:bold;">
        ·
       </span>
       [linkx]
       
       <span style="font-weight:bold;">
        ·
       </span>
       [linkx]
       
       <span style="font-weight:bold;">
        ·
       </span>
       [linkx]
       
       <span style="font-weight:bold;">
        ·
       </span>
       [ahref]
       
       <span style="font-weight:bold;">
        ·
       </span>
       [linkx]
       
       <span style="font-weight:bold;">
        ·
       </span>
       [linkx]
       
       <span style="font-weight:bold;">
        ·
       </span>
       <a href="/wiki/Dell_in_the_Shell/ko" title="Dell in the Shell/ko">
        Dell in the Shell
       </a>
       <span style="font-weight:bold;">
        ·
       </span>
       <a href="/wiki/Mini-Engy/ko" title="Mini-Engy/ko">
        Mini-Engy
       </a>
       <span style="font-weight:bold;">
        ·
       </span>
       <a class="new" href="/w/index.php?title=Puggyback/ko&amp;action=edit&amp;redlink=1" title="Puggyback/ko (page does not exist)">
        Puggyback
       </a>
       <span style="font-weight:bold;">
        ·
       </span>
       [linkx]
       
       <span style="font-weight:bold;">
        ·
       </span>
       [linkx]
       
      </div>
     </td>
    </tr>
    <tr style="height:2px">
     <td>
     </td>
    </tr>
    <tr>
     <td class="navbox-group" style=";;">
      <a href="/wiki/Item_sets/ko" title="Item sets/ko">
       아이템 세트
      </a>
     </td>
     <td class="navbox-list navbox-odd" style="text-align:left;border-left-width:2px;border-left-style:solid;width:100%;padding:0px;;;">
      <div style="padding:0em 0.25em">
       [linkx]
       
       <span style="font-weight:bold;">
        ·
       </span>
       [linkx]
       
       <span style="font-weight:bold;">
        ·
       </span>
       [ahref]
       
       <span style="font-weight:bold;">
        ·
       </span>
       [ahref]
       
      </div>
     </td>
    </tr>
    <tr style="height:2px">
     <td>
     </td>
    </tr>
    <tr>
     <td class="navbox-group" style=";;">
      [ahref]
      
     </td>
     <td class="navbox-list navbox-even" style="text-align:left;border-left-width:2px;border-left-style:solid;width:100%;padding:0px;;;">
      <div style="padding:0em 0.25em">
       <a href="/wiki/Rancho_Relaxo/ko" title="Rancho Relaxo/ko">
        한가로운 휴식
       </a>
       <span style="font-weight:bold;">
        ·
       </span>
       <a href="/wiki/Bucking_Bronco/ko" title="Bucking Bronco/ko">
        환장한 황소
       </a>
       <span style="font-weight:bold;">
        ·
       </span>
       [ahref]
       
       <span style="font-weight:bold;">
        ·
       </span>
       <a href="/wiki/Jumping_Jack/ko" title="Jumping Jack/ko">
        착착 뛰는 착암기
       </a>
      </div>
     </td>
    </tr>
    <tr style="height:2px">
     <td>
     </td>
    </tr>
    <tr>
     <td class="navbox-group" style=";;">
      [linkx]
      
     </td>
     <td class="navbox-list navbox-odd" style="text-align:left;border-left-width:2px;border-left-style:solid;width:100%;padding:0px;;;">
      <div style="padding:0em 0.25em">
       [linkx]
       
       [linkx]
       
      </div>
     </td>
    </tr>
    <tr style="height:2px">
     <td>
     </td>
    </tr>
    <tr>
     <td class="navbox-group" style=";;">
      캐릭터
     </td>
     <td class="navbox-list navbox-even" style="text-align:left;border-left-width:2px;border-left-style:solid;width:100%;padding:0px;;;">
      <div style="padding:0em 0.25em">
       [ahref]
       
       <span style="font-weight:bold;">
        ·
       </span>
       [ahref]
       
       <span style="font-weight:bold;">
        ·
       </span>
       [ahref]
       
       <span style="font-weight:bold;">
        ·
       </span>
       [linkx]
       
      </div>
     </td>
    </tr>
    <tr style="height:2px">
     <td>
     </td>
    </tr>
    <tr>
     <td class="navbox-group" style=";;">
      전략
     </td>
     <td class="navbox-list navbox-odd" style="text-align:left;border-left-width:2px;border-left-style:solid;width:100%;padding:0px;;;">
      <div style="padding:0em 0.25em">
       [ahref]
       
       (
       [ahref]
       
       <span style="font-weight:bold;">
        ·
       </span>
       [linkx]
       
       <span style="font-weight:bold;">
        ·
       </span>
       [linkx]
       
       )
       <span style="font-weight:bold;">
        ·
       </span>
       [linkx]
       
       <span style="font-weight:bold;">
        ·
       </span>
       <a class="new" href="/w/index.php?title=Team_strategy/ko&amp;action=edit&amp;redlink=1" title="Team strategy/ko (page does not exist)">
        팀 전략
       </a>
      </div>
     </td>
    </tr>
    <tr style="height:2px">
     <td>
     </td>
    </tr>
    <tr>
     <td class="navbox-group" style=";;">
      능력
     </td>
     <td class="navbox-list navbox-even" style="text-align:left;border-left-width:2px;border-left-style:solid;width:100%;padding:0px;;;">
      <div style="padding:0em 0.25em">
       [linkx]
       
       (
       [ahref]
       
       <span style="font-weight:bold;">
        ·
       </span>
       [linkx]
       
       <span style="font-weight:bold;">
        ·
       </span>
       <a href="/wiki/Dispenser/ko" title="Dispenser/ko">
        디스펜서
       </a>
       <span style="font-weight:bold;">
        ·
       </span>
       [linkx]
       
       )
       <span style="font-weight:bold;">
        ·
       </span>
       <a href="/wiki/Metal/ko" title="Metal/ko">
        금속
       </a>
       <span style="font-weight:bold;">
        ·
       </span>
       [linkx]
       
       <span style="font-weight:bold;">
        ·
       </span>
       [ahref]
       
       <span style="font-weight:bold;">
        ·
       </span>
       <a class="mw-redirect" href="/wiki/Sentry_Jumps/ko" title="Sentry Jumps/ko">
        센트리 점프
       </a>
      </div>
     </td>
    </tr>
    <tr style="height:2px">
     <td>
     </td>
    </tr>
    <tr>
     <td class="navbox-group" style=";;">
      기타
     </td>
     <td class="navbox-list navbox-odd" style="text-align:left;border-left-width:2px;border-left-style:solid;width:100%;padding:0px;;;">
      <div style="padding:0em 0.25em">
       [ahref]
       
       (
       [linkx]
       
       )
       <span style="font-weight:bold;">
        ·
       </span>
       [ahref]
       
       <span style="font-weight:bold;">
        ·
       </span>
       <a href="/wiki/List_of_references_(Engineer)/ko" title="List of references (Engineer)/ko">
        참고
       </a>
      </div>
     </td>
    </tr>
   </table>
  </td>
 </tr>
</table>
<table cellspacing="0" class="navbox" style=";;">
 <tr>
  <td style="padding:2px;">
   <table cellspacing="0" class="nowraplinks collapsible collapsed" style="width:100%;background:transparent;color:inherit;;">
    <tr>
     <th class="navbox-title" colspan="2" style=";">
      <div style="float:left; width:6em;text-align:left;">
       <div class="noprint plainlinks navbar" style="background:none; padding:0; font-weight:normal;;;border:none;; font-size:xx-small;">
        [linkx]
        
        <span style="font-size:80%;">
         •
        </span>
        [linkx]
        
        <span style="font-size:80%;">
         •
        </span>
        [ahref]
        
       </div>
      </div>
      <span class="" style="font-size:110%;">
       [linkx]
       
       [ahref]
       
      </span>
     </th>
    </tr>
    <tr style="height:2px;">
     <td>
     </td>
    </tr>
    <tr>
     <td class="navbox-group" style=";;">
      <a href="/wiki/Weapons/ko" title="Weapons/ko">
       무기
      </a>
     </td>
     <td class="navbox-list navbox-odd" style="text-align:left;border-left-width:2px;border-left-style:solid;width:100%;padding:0px;;background: #FEF5E0;;">
      <div style="padding:0em 0.25em">
      </div>
      <table cellspacing="0" class="nowraplinks navbox-subgroup" style="width:100%;;;;">
       <tr>
        <td class="navbox-group" style=";padding-left:0em;padding-right:0em;background: #FFF2B3;;">
         <div style="padding:0em 0.75em;">
          주무기
         </div>
        </td>
        <td class="navbox-list navbox-odd" style="text-align:left;border-left-width:2px;border-left-style:solid;width:100%;padding:0px;;background: transparent;;">
         <div style="padding:0em 0.25em">
          [ahref]
          
          (
          [ahref]
          
          )
          <span style="font-weight:bold;">
           ·
          </span>
          [ahref]
          
          (
          <a href="/wiki/Fortified_Compound/ko" title="Fortified Compound/ko">
           강화된 콤파운드 활
          </a>
          )
          <span style="font-weight:bold;">
           ·
          </span>
          <a href="/wiki/Sydney_Sleeper/ko" title="Sydney Sleeper/ko">
           시드니 마취총
          </a>
          <span style="font-weight:bold;">
           ·
          </span>
          <a href="/wiki/Bazaar_Bargain/ko" title="Bazaar Bargain/ko">
           시장 흥정품
          </a>
          <span style="font-weight:bold;">
           ·
          </span>
          [ahref]
          
          (
          <a href="/wiki/Shooting_Star/ko" title="Shooting Star/ko">
           유성
          </a>
          )
          <span style="font-weight:bold;">
           ·
          </span>
          <a href="/wiki/Hitman%27s_Heatmaker/ko" title="Hitman's Heatmaker/ko">
           살인 청부업자의 사건제조기
          </a>
          <span style="font-weight:bold;">
           ·
          </span>
          [ahref]
          
         </div>
        </td>
       </tr>
       <tr style="height:2px">
        <td>
        </td>
       </tr>
       <tr>
        <td class="navbox-group" style=";padding-left:0em;padding-right:0em;background: #FFF2B3;;">
         <div style="padding:0em 0.75em;">
          보조무기
         </div>
        </td>
        <td class="navbox-list navbox-even" style="text-align:left;border-left-width:2px;border-left-style:solid;width:100%;padding:0px;;background: #FEF5E0;;">
         <div style="padding:0em 0.25em">
          <a href="/wiki/SMG/ko" title="SMG/ko">
           기관단총
          </a>
          <span style="font-weight:bold;">
           ·
          </span>
          [linkx]
          
          (
          <a href="/wiki/Self-Aware_Beauty_Mark/ko" title="Self-Aware Beauty Mark/ko">
           자아를 지닌 예쁜 반점
          </a>
          )
          <span style="font-weight:bold;">
           ·
          </span>
          [linkx]
          
          <span style="font-weight:bold;">
           ·
          </span>
          <a href="/wiki/Darwin%27s_Danger_Shield/ko" title="Darwin's Danger Shield/ko">
           다윈산 차단막
          </a>
          <span style="font-weight:bold;">
           ·
          </span>
          <a href="/wiki/Cozy_Camper/ko" title="Cozy Camper/ko">
           안락한 야영 장비
          </a>
          <span style="font-weight:bold;">
           ·
          </span>
          [ahref]
          
         </div>
        </td>
       </tr>
       <tr style="height:2px">
        <td>
        </td>
       </tr>
       <tr>
        <td class="navbox-group" style=";padding-left:0em;padding-right:0em;background: #FFF2B3;;">
         <div style="padding:0em 0.75em;">
          근접무기
         </div>
        </td>
        <td class="navbox-list navbox-odd" style="text-align:left;border-left-width:2px;border-left-style:solid;width:100%;padding:0px;;background: transparent;;">
         <div style="padding:0em 0.25em">
          [ahref]
          
          (
          [linkx]
          
          ,
          <a href="/wiki/Saxxy/ko" title="Saxxy/ko">
           Saxxy
          </a>
          ,
          <a href="/wiki/Conscientious_Objector/ko" title="Conscientious Objector/ko">
           양심적 병역 기피자
          </a>
          ,
          [ahref]
          
          ,
          [linkx]
          
          ,
          <a href="/wiki/Memory_Maker/ko" title="Memory Maker/ko">
           추억 제조기
          </a>
          ,
          [linkx]
          
          ,
          <a href="/wiki/Necro_Smasher/ko" title="Necro Smasher/ko">
           시체 분쇄기
          </a>
          ,
          [ahref]
          
          ,
          [linkx]
          
          )
          <span style="font-weight:bold;">
           ·
          </span>
          [linkx]
          
          <span style="font-weight:bold;">
           ·
          </span>
          <a href="/wiki/Bushwacka/ko" title="Bushwacka/ko">
           부시와카
          </a>
          <span style="font-weight:bold;">
           ·
          </span>
          [ahref]
          
         </div>
        </td>
       </tr>
       <tr style="height:2px">
        <td>
        </td>
       </tr>
       <tr>
        <td class="navbox-group" style=";padding-left:0em;padding-right:0em;background: #FFF2B3;;">
         <div style="padding:0em 0.75em;">
          [ahref]
          
         </div>
        </td>
        <td class="navbox-list navbox-even" style="text-align:left;border-left-width:2px;border-left-style:solid;width:100%;padding:0px;;background: #FEF5E0;;">
         <div style="padding:0em 0.25em">
          <a href="/wiki/Skewer/ko" title="Skewer/ko">
           화살 찌르기
          </a>
         </div>
        </td>
       </tr>
      </table>
      <div>
      </div>
     </td>
    </tr>
    <tr style="height:2px">
     <td>
     </td>
    </tr>
    <tr>
     <td class="navbox-group" style=";;">
      [linkx]
      
     </td>
     <td class="navbox-list navbox-even" style="text-align:left;border-left-width:2px;border-left-style:solid;width:100%;padding:0px;;background: transparent;;">
      <div style="padding:0em 0.25em">
       [ahref]
       
       <span style="font-weight:bold;">
        ·
       </span>
       <a href="/wiki/Master%27s_Yellow_Belt/ko" title="Master's Yellow Belt/ko">
        달인의 노란 머리띠
       </a>
       <span style="font-weight:bold;">
        ·
       </span>
       <a href="/wiki/Professional%27s_Panama/ko" title="Professional's Panama/ko">
        전문가의 파나마 모자
       </a>
       <span style="font-weight:bold;">
        ·
       </span>
       [linkx]
       
       <span style="font-weight:bold;">
        ·
       </span>
       [linkx]
       
       <span style="font-weight:bold;">
        ·
       </span>
       [linkx]
       
       <span style="font-weight:bold;">
        ·
       </span>
       <a href="/wiki/Ol%27_Snaggletooth/ko" title="Ol' Snaggletooth/ko">
        오래된 덧니
       </a>
       <span style="font-weight:bold;">
        ·
       </span>
       [ahref]
       
       <span style="font-weight:bold;">
        ·
       </span>
       [linkx]
       
       <span style="font-weight:bold;">
        ·
       </span>
       [linkx]
       
       <span style="font-weight:bold;">
        ·
       </span>
       <a href="/wiki/Desert_Marauder/ko" title="Desert Marauder/ko">
        사막의 약탈자
       </a>
       <span style="font-weight:bold;">
        ·
       </span>
       [ahref]
       
       <span style="font-weight:bold;">
        ·
       </span>
       [ahref]
       
       <span style="font-weight:bold;">
        ·
       </span>
       <a href="/wiki/Crocodile_Smile/ko" title="Crocodile Smile/ko">
        악어의 미소
       </a>
       <span style="font-weight:bold;">
        ·
       </span>
       <strong class="selflink">
        이름없는 모자
       </strong>
       <span style="font-weight:bold;">
        ·
       </span>
       [ahref]
       
       <span style="font-weight:bold;">
        ·
       </span>
       [ahref]
       
       <span style="font-weight:bold;">
        ·
       </span>
       [linkx]
       
       <span style="font-weight:bold;">
        ·
       </span>
       [linkx]
       
       <span style="font-weight:bold;">
        ·
       </span>
       <a href="/wiki/Silver_Bullets/ko" title="Silver Bullets/ko">
        은제 탄환
       </a>
       <span style="font-weight:bold;">
        ·
       </span>
       <a href="/wiki/Itsy_Bitsy_Spyer/ko" title="Itsy Bitsy Spyer/ko">
        자그만 조그만 스파이
       </a>
       <span style="font-weight:bold;">
        ·
       </span>
       [ahref]
       
       <span style="font-weight:bold;">
        ·
       </span>
       [linkx]
       
       <span style="font-weight:bold;">
        ·
       </span>
       [ahref]
       
       <span style="font-weight:bold;">
        ·
       </span>
       [linkx]
       
       <span style="font-weight:bold;">
        ·
       </span>
       [ahref]
       
       <span style="font-weight:bold;">
        ·
       </span>
       [ahref]
       
       <span style="font-weight:bold;">
        ·
       </span>
       [ahref]
       
       <span style="font-weight:bold;">
        ·
       </span>
       [ahref]
       
       <span style="font-weight:bold;">
        ·
       </span>
       [ahref]
       
       <span style="font-weight:bold;">
        ·
       </span>
       [ahref]
       
       <span style="font-weight:bold;">
        ·
       </span>
       <a href="/wiki/Champ_Stamp/ko" title="Champ Stamp/ko">
        용병의 용문신
       </a>
       <span style="font-weight:bold;">
        ·
       </span>
       <a href="/wiki/Triad_Trinket/ko" title="Triad Trinket/ko">
        삼합회의 싸구려 장신구
       </a>
       <span style="font-weight:bold;">
        ·
       </span>
       <a href="/wiki/Bolted_Bushman/ko" title="Bolted Bushman/ko">
        나사못 박힌 오지 거주민
       </a>
       <span style="font-weight:bold;">
        ·
       </span>
       [linkx]
       
       <span style="font-weight:bold;">
        ·
       </span>
       [linkx]
       
       <span style="font-weight:bold;">
        ·
       </span>
       <a href="/wiki/Sir_Hootsalot/ko" title="Sir Hootsalot/ko">
        부엉 기사
       </a>
       <span style="font-weight:bold;">
        ·
       </span>
       [linkx]
       
       <span style="font-weight:bold;">
        ·
       </span>
       [ahref]
       
       <span style="font-weight:bold;">
        ·
       </span>
       <a href="/wiki/Deadliest_Duckling/ko" title="Deadliest Duckling/ko">
        악랄한 오리 새끼
       </a>
       <span style="font-weight:bold;">
        ·
       </span>
       [ahref]
       
       <span style="font-weight:bold;">
        ·
       </span>
       [linkx]
       
       <span style="font-weight:bold;">
        ·
       </span>
       [linkx]
       
       <span style="font-weight:bold;">
        ·
       </span>
       [ahref]
       
       <span style="font-weight:bold;">
        ·
       </span>
       [linkx]
       
       <span style="font-weight:bold;">
        ·
       </span>
       [linkx]
       
       <span style="font-weight:bold;">
        ·
       </span>
       [linkx]
       
       <span style="font-weight:bold;">
        ·
       </span>
       [linkx]
       
       <span style="font-weight:bold;">
        ·
       </span>
       [linkx]
       
       <span style="font-weight:bold;">
        ·
       </span>
       <a href="/wiki/Birdman_of_Australiacatraz/ko" title="Birdman of Australiacatraz/ko">
        오스트레일리알카트라즈의 조류학자
       </a>
       <span style="font-weight:bold;">
        ·
       </span>
       [ahref]
       
       <span style="font-weight:bold;">
        ·
       </span>
       [ahref]
       
       <span style="font-weight:bold;">
        ·
       </span>
       [ahref]
       
       <span style="font-weight:bold;">
        ·
       </span>
       [linkx]
       
       <span style="font-weight:bold;">
        ·
       </span>
       [linkx]
       
       <span style="font-weight:bold;">
        ·
       </span>
       [linkx]
       
       <span style="font-weight:bold;">
        ·
       </span>
       [ahref]
       
       <span style="font-weight:bold;">
        ·
       </span>
       [linkx]
       
       <span style="font-weight:bold;">
        ·
       </span>
       <a href="/wiki/Hallowed_Headcase/ko" title="Hallowed Headcase/ko">
        신성한 머리덮게
       </a>
       <span style="font-weight:bold;">
        ·
       </span>
       <a href="/wiki/Sir_Shootsalot/ko" title="Sir Shootsalot/ko">
        사격의 기사
       </a>
       <span style="font-weight:bold;">
        ·
       </span>
       [ahref]
       
       <span style="font-weight:bold;">
        ·<li>[mkey1]</li>[keywordx]<li>[mkey1]</li>[keywordx][symbolx][keywordx][symbolx][bracketl10][keywordx][bracketr10][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx]
       </span>
       <a href="/wiki/Randolph_the_Blood-Nosed_Caribou/ko" title="Randolph the Blood-Nosed Caribou/ko">
        핏빛 코를 가진 순록 랜돌프
       </a>
       <span style="font-weight:bold;">
        ·
       </span>
       [linkx]
       
       <span style="font-weight:bold;">
        ·
       </span>
       <a href="/wiki/Extra_Layer/ko" title="Extra Layer/ko">
        덧옷
       </a>
       <span style="font-weight:bold;">
        ·
       </span>
       [ahref]
       
       <span style="font-weight:bold;">
        ·
       </span>
       [ahref]
       
       <span style="font-weight:bold;">
        ·
       </span>
       [ahref]
       
       <span style="font-weight:bold;">
        ·
       </span>
       [linkx]
       
       <span style="font-weight:bold;">
        ·
       </span>
       [linkx]
       
       <span style="font-weight:bold;">
        ·
       </span>
       <a href="/wiki/Huntsman%27s_Essentials/ko" title="Huntsman's Essentials/ko">
        헌츠맨의 필수요소
       </a>
       <span style="font-weight:bold;">
        ·
       </span>
       [ahref]
       
       <span style="font-weight:bold;">
        ·
       </span>
       [ahref]
       
       <span style="font-weight:bold;">
        ·
       </span>
       [ahref]
       
       <span style="font-weight:bold;">
        ·
       </span>
       [linkx]
       
       <span style="font-weight:bold;">
        ·
       </span>
       [ahref]
       
       <span style="font-weight:bold;">
        ·
       </span>
       [linkx]
       
       <span style="font-weight:bold;">
        ·
       </span>
       <a href="/wiki/Poacher%27s_Safari_Jacket/ko" title="Poacher's Safari Jacket/ko">
        밀렵꾼의 사파리 웃옷
       </a>
       <span style="font-weight:bold;">
        ·
       </span>
       [ahref]
       
       <span style="font-weight:bold;">
        ·
       </span>
       [linkx]
       
       <span style="font-weight:bold;">
        ·
       </span>
       [linkx]
       
       <span style="font-weight:bold;">
        ·
       </span>
       <a href="/wiki/Marsupial_Man/ko" title="Marsupial Man/ko">
        유대목 인간
       </a>
       <span style="font-weight:bold;">
        ·
       </span>
       <a href="/wiki/Marsupial_Muzzle/ko" title="Marsupial Muzzle/ko">
        유대목 총구
       </a>
       <span style="font-weight:bold;">
        ·
       </span>
       [linkx]
       
       <span style="font-weight:bold;">
        ·
       </span>
       <a href="/wiki/Roo_Rippers/ko" title="Roo Rippers/ko">
        루 찢개
       </a>
       <span style="font-weight:bold;">
        ·
       </span>
       [linkx]
       
       <span style="font-weight:bold;">
        ·
       </span>
       <a href="/wiki/Snow_Sleeves/ko" title="Snow Sleeves/ko">
        눈 소매
       </a>
       <span style="font-weight:bold;">
        ·
       </span>
       [linkx]
       
       <span style="font-weight:bold;">
        ·
       </span>
       <a href="/wiki/Marksman%27s_Mohair/ko" title="Marksman's Mohair/ko">
        명사수의 모헤어 옷
       </a>
       <span style="font-weight:bold;">
        ·
       </span>
       <a href="/wiki/Professional%27s_Ushanka/ko" title="Professional's Ushanka/ko">
        전문가의 방한모
       </a>
       <span style="font-weight:bold;">
        ·
       </span>
       <a href="/wiki/Wally_Pocket/ko" title="Wally Pocket/ko">
        왈라비 주머니
       </a>
       <span style="font-weight:bold;">
        ·
       </span>
       <a href="/wiki/Support_Spurs/ko" title="Support Spurs/ko">
        버팀용 박차
       </a>
       <span style="font-weight:bold;">
        ·
       </span>
       [ahref]
       
       <span style="font-weight:bold;">
        ·
       </span>
       [linkx]
       
       <span style="font-weight:bold;">
        ·
       </span>
       [ahref]
       
       <span style="font-weight:bold;">
        ·
       </span>
       <a href="/wiki/Teufort_Knight/ko" title="Teufort Knight/ko">
        투포트 나이트
       </a>
       <span style="font-weight:bold;">
        ·
       </span>
       [ahref]
       
       <span style="font-weight:bold;">
        ·
       </span>
       <a href="/wiki/Airborne_Attire/ko" title="Airborne Attire/ko">
        Airborne Attire
       </a>
       <span style="font-weight:bold;">
        ·
       </span>
       [linkx]
       
       <span style="font-weight:bold;">
        ·
       </span>
       [ahref]
       
       <span style="font-weight:bold;">
        ·
       </span>
       [linkx]
       
       <span style="font-weight:bold;">
        ·
       </span>
       [ahref]
       
       <span style="font-weight:bold;">
        ·
       </span>
       [linkx]
       
       <span style="font-weight:bold;">
        ·
       </span>
       [ahref]
       
       <span style="font-weight:bold;">
        ·
       </span>
       [linkx]
       
       <span style="font-weight:bold;">
        ·
       </span>
       <a href="/wiki/Conspicuous_Camouflage/ko" title="Conspicuous Camouflage/ko">
        Conspicuous Camouflage
       </a>
       <span style="font-weight:bold;">
        ·
       </span>
       [linkx]
       
       <span style="font-weight:bold;">
        ·
       </span>
       [linkx]
       
       <span style="font-weight:bold;">
        ·
       </span>
       [ahref]
       
       <span style="font-weight:bold;">
        ·
       </span>
       [ahref]
       
       <span style="font-weight:bold;">
        ·
       </span>
       [linkx]
       
       <span style="font-weight:bold;">
        ·
       </span>
       <a href="/wiki/Antarctic_Eyewear/ko" title="Antarctic Eyewear/ko">
        Antarctic Eyewear
       </a>
       <span style="font-weight:bold;">
        ·
       </span>
       [linkx]
       
       <span style="font-weight:bold;">
        ·
       </span>
       [linkx]
       
       <span style="font-weight:bold;">
        ·
       </span>
       [linkx]
       
       <span style="font-weight:bold;">
        ·
       </span>
       [ahref]
       
       <span style="font-weight:bold;">
        ·
       </span>
       [ahref]
       
      </div>
     </td>
    </tr>
    <tr style="height:2px">
     <td>
     </td>
    </tr>
    <tr>
     <td class="navbox-group" style=";;">
      [ahref]
      
     </td>
     <td class="navbox-list navbox-odd" style="text-align:left;border-left-width:2px;border-left-style:solid;width:100%;padding:0px;;background: #FEF5E0;;">
      <div style="padding:0em 0.25em">
       [ahref]
       
       <span style="font-weight:bold;">
        ·
       </span>
       [ahref]
       
       <span style="font-weight:bold;">
        ·
       </span>
       <a href="/wiki/Camper_Van_Helsing/ko" title="Camper Van Helsing/ko">
        캠핑 밴 헬싱
       </a>
       <span style="font-weight:bold;">
        ·
       </span>
       [linkx]
       
       <span style="font-weight:bold;">
        ·
       </span>
       [ahref]
       
       <span style="font-weight:bold;">
        ·
       </span>
       [ahref]
       
       <span style="font-weight:bold;">
        ·
       </span>
       [ahref]
       
       <span style="font-weight:bold;">
        ·
       </span>
       [linkx]
       
      </div>
     </td>
    </tr>
    <tr style="height:2px">
     <td>
     </td>
    </tr>
    <tr>
     <td class="navbox-group" style=";;">
      [linkx]
      
     </td>
     <td class="navbox-list navbox-even" style="text-align:left;border-left-width:2px;border-left-style:solid;width:100%;padding:0px;;background: transparent;;">
      <div style="padding:0em 0.25em">
       [linkx]
       
       <span style="font-weight:bold;">
        ·
       </span>
       <a href="/wiki/Killer_Solo/ko" title="Killer Solo/ko">
        살인자의 독주
       </a>
       <span style="font-weight:bold;">
        ·
       </span>
       [ahref]
       
       <span style="font-weight:bold;">
        ·
       </span>
       [ahref]
       
      </div>
     </td>
    </tr>
    <tr style="height:2px">
     <td>
     </td>
    </tr>
    <tr>
     <td class="navbox-group" style=";;">
      <a href="/wiki/Achievements/ko" title="Achievements/ko">
       도전 과제
      </a>
     </td>
     <td class="navbox-list navbox-odd" style="text-align:left;border-left-width:2px;border-left-style:solid;width:100%;padding:0px;;background: #FEF5E0;;">
      <div style="padding:0em 0.25em">
       [linkx]
       
       <a href="/wiki/Obtaining_Sniper_achievements/ko" title="Obtaining Sniper achievements/ko">
        <i>
         (달성 방법)
        </i>
       </a>
      </div>
     </td>
    </tr>
    <tr style="height:2px">
     <td>
     </td>
    </tr>
    <tr>
     <td class="navbox-group" style=";;">
      캐릭터
     </td>
     <td class="navbox-list navbox-even" style="text-align:left;border-left-width:2px;border-left-style:solid;width:100%;padding:0px;;background: transparent;;">
      <div style="padding:0em 0.25em">
       <a href="/wiki/Meet_the_Sniper/ko" title="Meet the Sniper/ko">
        <i>
         스나이퍼를 만나다
        </i>
       </a>
       <span style="font-weight:bold;">
        ·
       </span>
       [ahref]
       
       <span style="font-weight:bold;">
        ·
       </span>
       <a href="/wiki/Sniper_taunts/ko" title="Sniper taunts/ko">
        도발
       </a>
       <span style="font-weight:bold;">
        ·
       </span>
       [ahref]
       
      </div>
     </td>
    </tr>
    <tr style="height:2px">
     <td>
     </td>
    </tr>
    <tr>
     <td class="navbox-group" style=";;">
      전략
     </td>
     <td class="navbox-list navbox-odd" style="text-align:left;border-left-width:2px;border-left-style:solid;width:100%;padding:0px;;background: #FEF5E0;;">
      <div style="padding:0em 0.25em">
       <a href="/wiki/Basic_Sniper_strategy/ko" title="Basic Sniper strategy/ko">
        스나이퍼 전략
       </a>
       (
       [ahref]
       
       <span style="font-weight:bold;">
        ·
       </span>
       [linkx]
       
       <span style="font-weight:bold;">
        ·
       </span>
       <a href="/wiki/Anti-Sniper_strategy/ko" title="Anti-Sniper strategy/ko">
        병과 대항
       </a>
       )
       <span style="font-weight:bold;">
        ·
       </span>
       [ahref]
       
       <span style="font-weight:bold;">
        ·
       </span>
       [linkx]
       
      </div>
     </td>
    </tr>
    <tr style="height:2px">
     <td>
     </td>
    </tr>
    <tr>
     <td class="navbox-group" style=";;">
      능력
     </td>
     <td class="navbox-list navbox-even" style="text-align:left;border-left-width:2px;border-left-style:solid;width:100%;padding:0px;;background: transparent;;">
      <div style="padding:0em 0.25em">
       [linkx]
       
       <span style="font-weight:bold;">
        ·
       </span>
       [ahref]
       
       <span style="font-weight:bold;">
        ·
       </span>
       [linkx]
       
       <span style="font-weight:bold;">
        ·
       </span>
       [linkx]
       
      </div>
     </td>
    </tr>
    <tr style="height:2px">
     <td>
     </td>
    </tr>
    <tr>
     <td class="navbox-group" style=";;">
      기타
     </td>
     <td class="navbox-list navbox-odd" style="text-align:left;border-left-width:2px;border-left-style:solid;width:100%;padding:0px;;background: #FEF5E0;;">
      <div style="padding:0em 0.25em">
       <a href="/wiki/Sniper_vs._Spy_Update/ko" title="Sniper vs. Spy Update/ko">
        스나이퍼 대 스파이 업데이트
       </a>
       <span style="font-weight:bold;">
        ·
       </span>
       [ahref]
       
      </div>
     </td>
    </tr>
   </table>
  </td>
 </tr>
</table>
<div class="printfooter">
 Retrieved from "
 <a dir="ltr" href="/w/index.php?title=Hat_With_No_Name/ko&amp;oldid=2413797">
  https://wiki.teamfortress.com/w/index.php?title=Hat_With_No_Name/ko&amp;oldid=2413797
 </a>
 "
</div>
<div class="catlinks" data-mw="interface" id="catlinks">
 <div class="mw-normal-catlinks" id="mw-normal-catlinks">
  <a href="/wiki/Special:Categories" title="Special:Categories">
   Categories
  </a>
  :
  <ul>
   <li>
    [ahref]
    
   </li>
   <li>
    [ahref]
    
   </li>
   <li>
    [ahref]
    
   </li>
   <li>
    [linkx]
    
   </li>
   <li>
    [ahref]
    
   </li>
   <li>
    <a href="/wiki/Category:Cosmetic_items/ko" title="Category:Cosmetic items/ko">
     Cosmetic items/ko
    </a>
   </li>
   <li>
    [linkx]
    
   </li>
   <li>
    <a href="/wiki/Category:Soldier/ko" title="Category:Soldier/ko">
     Soldier/ko
    </a>
   </li>
   <li>
    <a href="/wiki/Category:Demoman/ko" title="Category:Demoman/ko">
     Demoman/ko
    </a>
   </li>
   <li>
    <a href="/wiki/Category:Engineer/ko" title="Category:Engineer/ko">
     Engineer/ko
    </a>
   </li>
   <li>
    [ahref]
    
   </li>
  </ul>
 </div>
 <div class="mw-hidden-catlinks mw-hidden-cats-hidden" id="mw-hidden-catlinks">
  Hidden categories:
  <ul>
   <li>
    [ahref]
    
   </li>
   <li>
    <a href="/wiki/Category:Outdated_Backpack_item_parameters" title="Category:Outdated Backpack item parameters">
     Outdated Backpack item parameters
    </a>
   </li>
   <li>
    <a href="/wiki/Category:Item_infobox_usage" title="Category:Item infobox usage">
     Item infobox usage
    </a>
   </li>
  </ul>
 </div>
</div>
<div class="visualClear">
</div>
<div id="mw-navigation">
 <h2>
  <b>[mkey1][symbolx][pkeyx][symbolx][keyword1][bracketl1][keywordx][bracketr1][symbolx][bracketl2][keywordx][bracketr2][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx]</b>
 </h2>
 <div id="mw-head">
  <div aria-labelledby="p-personal-label" class="" id="p-personal" role="navigation">
   <h3 id="p-personal-label">
    [mkey1][symbolx][pkeyx][symbolx][keyword1][bracketl1][keywordx][bracketr1][symbolx][bracketl2][keywordx][bracketr2][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx]
   </h3>
   <ul>
    <li id="pt-createaccount">
     [ahref]
     
    </li>
    <li id="pt-login">
     [ahref]
     
    </li>
   </ul>
  </div>
  <div id="left-navigation">
   <div aria-labelledby="p-namespaces-label" class="vectorTabs" id="p-namespaces" role="navigation">
    <h3 id="p-namespaces-label">
     [mkey1][symbolx][pkeyx][symbolx][keyword1][bracketl1][keywordx][bracketr1][symbolx][bracketl2][keywordx][bracketr2][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx]
    </h3>
    <ul>
     <li class="selected" id="ca-nstab-main">
      <span>
       [ahref]
       
      </span>
     </li>
     <li class="new" id="ca-talk">
      <span>
       [linkx]
       
      </span>
     </li>
    </ul>
   </div>
   <div aria-labelledby="p-variants-label" class="vectorMenu emptyPortlet" id="p-variants" role="navigation">
    <h3 id="p-variants-label">
     [mkey1][symbolx][pkeyx][symbolx][keyword1][bracketl1][keywordx][bracketr1][symbolx][bracketl2][keywordx][bracketr2][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx]
    </h3>
    <div class="menu">
     <ul>
     </ul>
    </div>
   </div>
  </div>
  <div id="right-navigation">
   <div aria-labelledby="p-views-label" class="vectorTabs" id="p-views" role="navigation">
    <h3 id="p-views-label">
     <b>[mkey1][symbolx][pkeyx][symbolx][keyword1][bracketl1][keywordx][bracketr1][symbolx][bracketl2][keywordx][bracketr2][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx]</b>
    </h3>
    <ul>
     <li class="selected" id="ca-view">
      <span>
       <a href="/wiki/Hat_With_No_Name/ko">
        Read
       </a>
      </span>
     </li>
     <li id="ca-viewsource">
      <span>
       [ahref]
       
      </span>
     </li>
     <li class="collapsible" id="ca-history">
      <span>
       [ahref]
       
      </span>
     </li>
    </ul>
   </div>
   <div aria-labelledby="p-cactions-label" class="vectorMenu emptyPortlet" id="p-cactions" role="navigation">
    <h3 id="p-cactions-label">
     <b>[mkey1][symbolx][pkeyx][symbolx][keyword1][bracketl1][keywordx][bracketr1][symbolx][bracketl2][keywordx][bracketr2][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx]</b>
    </h3>
    <div class="menu">
     <ul>
     </ul>
    </div>
   </div>
   <div id="p-search" role="search">
    <h3>
     <b>[mkey1][symbolx][pkeyx][symbolx][keyword1][bracketl1][keywordx][bracketr1][symbolx][bracketl2][keywordx][bracketr2][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx]</b>
    </h3>
    <form action="/w/index.php" id="searchform">
     <div id="simpleSearch">
     </div>
    </form>
   </div>
  </div>
 </div>
 <div id="mw-panel">
  <div id="p-logo" role="banner">
   [ahref]
   
  </div>
  <div aria-labelledby="p-Navigation-label" class="portal" id="p-Navigation" role="navigation">
   <h3 id="p-Navigation-label">
    <b>[mkey1][symbolx][pkeyx][symbolx][keyword1][bracketl1][keywordx][bracketr1][symbolx][bracketl2][keywordx][bracketr2][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx]</b>
   </h3>
   <div class="body">
    <ul>
     <li id="n-mainpage-description">
      [linkx]
      
     </li>
     <li id="n-about">
      [ahref]
      
     </li>
     <li id="n-recentchanges">
      [linkx]
      
     </li>
     <li id="n-randompage">
      <a accesskey="x" href="/wiki/Special:Random" title="Load a random page [x]">
       Random page
      </a>
     </li>
     <li id="n-Help">
      [linkx]
      
     </li>
     <li id="n-FAQ">
      <a href="/wiki/Team_Fortress_Wiki:FAQ">
       FAQ
      </a>
     </li>
     <li id="n-ircchannel">
      [ahref]
      
     </li>
    </ul>
   </div>
  </div>
  <div aria-labelledby="p-tb-label" class="portal" id="p-tb" role="navigation">
   <h3 id="p-tb-label">
    [mkey1][symbolx][pkeyx][symbolx][keyword1][bracketl1][keywordx][bracketr1][symbolx][bracketl2][keywordx][bracketr2][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx]
   </h3>
   <div class="body">
    <ul>
     <li id="t-whatlinkshere">
      [ahref]
      
     </li>
     <li id="t-recentchangeslinked">
      <a accesskey="k" href="/wiki/Special:RecentChangesLinked/Hat_With_No_Name/ko" title="Recent changes in pages linked from this page [k]">
       Related changes
      </a>
     </li>
     <li id="t-specialpages">
      <a accesskey="q" href="/wiki/Special:SpecialPages" title="A list of all special pages [q]">
       Special pages
      </a>
     </li>
     <li id="t-print">
      [ahref]
      
     </li>
     <li id="t-permalink">
      [ahref]
      
     </li>
     <li id="t-info">
      [linkx]
      
     </li>
     <li id="t-cite">
      [ahref]
      
     </li>
    </ul>
   </div>
  </div>
  <div aria-labelledby="p-Languages-label" class="portal" id="p-Languages" role="navigation">
   <h3 id="p-Languages-label">
    <b>[mkey1][symbolx][pkeyx][symbolx][keyword1][bracketl1][keywordx][bracketr1][symbolx][bracketl2][keywordx][bracketr2][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx]</b>
   </h3>
   <div class="body">
    <ul>
     <li id="n-English">
      [linkx]
      
     </li>
     <li id="n-.C4.8Cesky">
      [ahref]
      
     </li>
     <li id="n-Dansk">
      <a href="/wiki/Hat_With_No_Name/da">
       Dansk
      </a>
     </li>
     <li id="n-Deutsch">
      [linkx]
      
     </li>
     <li id="n-Espa.C3.B1ol">
      [linkx]
      
     </li>
     <li id="n-Suomi">
      [linkx]
      
     </li>
     <li id="n-Fran.C3.A7ais">
      <a href="/wiki/Hat_With_No_Name/fr">
       Français
      </a>
     </li>
     <li id="n-Italiano">
      <a href="/wiki/Hat_With_No_Name/it">
       Italiano
      </a>
     </li>
     <li id="n-.E6.97.A5.E6.9C.AC.E8.AA.9E">
      [linkx]
      
     </li>
     <li id="n-.ED.95.9C.EA.B5.AD.EC.96.B4">
      [linkx]
      
     </li>
     <li id="n-Nederlands">
      [linkx]
      
     </li>
     <li id="n-Norsk-.28bokm.C3.A5l.29">
      [linkx]
      
     </li>
     <li id="n-Polski">
      [linkx]
      
     </li>
     <li id="n-Portugu.C3.AAs">
      [ahref]
      
     </li>
     <li id="n-Portugu.C3.AAs-do-Brasil">
      <a href="/wiki/Hat_With_No_Name/pt-br">
       Português do Brasil
      </a>
     </li>
     <li id="n-Rom.C3.A2n.C4.83">
      [ahref]
      
     </li>
     <li id="n-.D0.A0.D1.83.D1.81.D1.81.D0.BA.D0.B8.D0.B9">
      [linkx]
      
     </li>
     <li id="n-Svenska">
      [linkx]
      
     </li>
     <li id="n-T.C3.BCrk.C3.A7e">
      [linkx]
      
     </li>
     <li id="n-.E2.80.AA.E4.B8.AD.E6.96.87.28.E7.AE.80.E4.BD.93.29.E2.80.AC">
      [ahref]
      
     </li>
     <li id="n-.E2.80.AA.E4.B8.AD.E6.96.87.28.E7.B9.81.E9.AB.94.29">
      [linkx]
      
     </li>
    </ul>
   </div>
  </div>
  <div aria-labelledby="p-Team_Fortress_2-label" class="portal" id="p-Team_Fortress_2" role="navigation">
   <h3 id="p-Team_Fortress_2-label">
    [mkey1][symbolx][pkeyx][symbolx][keyword1][bracketl1][keywordx][bracketr1][symbolx][bracketl2][keywordx][bracketr2][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx]
   </h3>
   <div class="body">
    <ul>
     <li id="n-Download">
      [linkx]
      
     </li>
     <li id="n-Blog">
      [ahref]
      
     </li>
     <li id="n-Updates">
      <a href="/news/?appids=440&amp;appgroupname=Team+Fortress+2&amp;feed=steam_updates" rel="nofollow">
       Updates
      </a>
     </li>
     <li id="n-communityhub">
      [ahref]
      
     </li>
     <li id="n-steamworkshop">
      <a href="/workshop/" rel="nofollow">
       Steam Workshop
      </a>
     </li>
     <li id="n-Forums">
      [ahref]
      
     </li>
    </ul>
   </div>
  </div>
  <div aria-labelledby="p-Team_Fortress_Classic-label" class="portal" id="p-Team_Fortress_Classic" role="navigation">
   <h3 id="p-Team_Fortress_Classic-label">
    [mkey1][symbolx][pkeyx][symbolx][keyword1][bracketl1][keywordx][bracketr1][symbolx][bracketl2][keywordx][bracketr2][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx]
   </h3>
   <div class="body">
    <ul>
     <li id="n-tfcmainpage">
      [ahref]
      
     </li>
     <li id="n-Purchase">
      [linkx]
      
     </li>
     <li id="n-Updates">
      [linkx]
      
     </li>
     <li id="n-communityhub">
      [linkx]
      
     </li>
     <li id="n-Forums">
      <a href="/forums/forumdisplay.php?f=22" rel="nofollow">
       Forums
      </a>
     </li>
    </ul>
   </div>
  </div>
  <div aria-labelledby="p-Valve_Wiki_Network-label" class="portal" id="p-Valve_Wiki_Network" role="navigation">
   <h3 id="p-Valve_Wiki_Network-label">
    [mkey1][symbolx][pkeyx][symbolx][keyword1][bracketl1][keywordx][bracketr1][symbolx][bracketl2][keywordx][bracketr2][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx]
   </h3>
   <div class="body">
    <ul>
     <li id="n-Combine-OverWiki">
      [ahref]
      
     </li>
     <li id="n-Left-4-Dead-Wiki">
      [linkx]
      
     </li>
     <li id="n-Portal-Wiki">
      <a href="/wiki/Main_Page" rel="nofollow">
       Portal Wiki
      </a>
     </li>
    </ul>
   </div>
  </div>
 </div>
</div>
<div id="footer" role="contentinfo">
 <ul id="footer-info">
  <li id="footer-info-lastmod">
   This page was last modified on 25 April 2019, at 12:29.
  </li>
 </ul>
 <ul id="footer-places">
  <li id="footer-places-about">
   [ahref]
   
  </li>
  <li id="footer-places-disclaimer">
   <a href="/wiki/Team_Fortress_Wiki:Terms_of_Use" title="Team Fortress Wiki:Terms of Use">
    Terms of Use
   </a>
  </li>
 </ul>
 <ul class="noprint" id="footer-icons">
  <li id="footer-poweredbyico">
   [ahref]
   
  </li>
 </ul>
 <div style="clear:both">
 </div>
</div>
|<---