--->|<!DOCTYPE html>
<html dir="ltr" lang="fr" prefix="content: http://purl.org/rss/1.0/modules/content/  dc: http://purl.org/dc/terms/  foaf: http://xmlns.com/foaf/0.1/  og: http://ogp.me/ns#  rdfs: http://www.w3.org/2000/01/rdf-schema#  schema: http://schema.org/  sioc: http://rdfs.org/sioc/ns#  sioct: http://rdfs.org/sioc/types#  skos: http://www.w3.org/2004/02/skos/core#  xsd: http://www.w3.org/2001/XMLSchema# ">
 <head>
  <meta charset="utf-8"/>
  <meta content="[mkey1][symbolx][pkey1][symbolx][keyword1][bracketl1][bracketr1][symbolx][bracketl2][siter1][bracketr2][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx]" name="title"/>
  <meta content="[mkey1][symbolx][pkey1][symbolx][keyword1][bracketl1][bracketr1][symbolx][bracketl2][siter1][bracketr2][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx]" name="description"/>
  <meta content="Transport à Paris et en Ile-de-France : itinéraires, plans de métro, bus et RER, informations sur : trafic, tarifs, horaires, quartiers..." name="abstract"/>
  <meta content="Drupal 8 (https://www.drupal.org)" name="Generator"/>
  <meta content="width" name="MobileOptimized"/>
  <meta content="true" name="HandheldFriendly"/>
  <meta content="width=device-width, initial-scale=1.0" name="viewport"/>
  <meta content="IE=edge" http-equiv="X-UA-Compatible"/>
  <meta content="#ffffff" name="theme-color"/>
  <title>
   [mkey1][symbolx][pkey1][symbolx][keyword1][bracketl1][bracketr1][symbolx][bracketl2][siter1][bracketr2][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx]
  </title>
  <meta content="[mkey1][symbolx][pkey1][symbolx][keyword1][bracketl1][bracketr1][symbolx][bracketl2][siter1][bracketr2][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx]" name="keywords"/>
 </head>
 <body class="accueil">
  <div class="dialog-off-canvas-main-canvas" data-off-canvas-main-canvas="">
   <p class="msg-access">
    La RATP vous propose un nouveau site. Certaines fonctionnalités, dont l'accessibilité, sont en cours de finalisation. Afin de vous offrir plus de facilité dans votre navigation, nous vous proposons de
    [linkx]
    
    . Vous pouvez également utiliser notre application RATP, nous vous informerons de la mise en conformité du nouveau site au plus vite.
   </p>
   [linkx]
   
   <div class="layout-container">
    <header class="header header--home desktop clearfix" id="header-home" role="banner">
     <div class="page--home home-desktop">
      <div class="u-colonne u-colonne@small u-colonne@medium u-colonne@large">
       <div class="itineraire-home">
        <div class="itineraire-home--form">
         <div>
          <div id="block-ixxiitinerairesformulairederechercheditineraireseul">
           <h2>
            [mkey1][symbolx][pkey1][symbolx][keyword1][bracketl1][bracketr1][symbolx][bracketl2][siter1][bracketr2][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx]
           </h2>
           <form accept-charset="UTF-8" action="/itineraires" class="itinerarysearchform" data-drupal-selector="itinerarysearchform" id="itinerarysearchform" method="get">
            <div class="u-gridless-flow__item js-form-wrapper form-wrapper" data-drupal-selector="edit-first-container" id="edit-first-container">
             <div class="js-form-item form-item js-form-type-textfield form-item-start js-form-item-start">
              <label for="start">
               De
               <span class="visually-hidden">
                (lieu de départ)
               </span>
              </label>
             </div>
             <datalist id="start_autocomplete">
             </datalist>
             <div class="suggestion-wrapper js-form-wrapper form-wrapper" data-drupal-selector="edit-start-suggestion-wrapper" id="edit-start-suggestion-wrapper">
              <span class="suggestion-text">
               Veuillez préciser le point de départ souhaité :
              </span>
              <div class="js-form-item form-item js-form-type-select form-item-start-suggestion js-form-item-start-suggestion form-no-label form-disabled">
               <label class="visually-hidden" for="start_suggestion">
                De
                <span class="visually-hidden">
                 (lieu de départ)
                </span>
               </label>
               <select class="form-select" data-drupal-selector="start-suggestion" disabled="disabled" id="start_suggestion" name="start_suggestion">
               </select>
              </div>
              <button aria-label="Fermer la liste de suggestions pour le point de départ" class="close-start-suggestion">
               X
              </button>
             </div>
             <div class="js-form-item form-item js-form-type-textfield form-item-end js-form-item-end">
              <label for="end">
               À
               <span class="visually-hidden">
                (lieu d'arrivée)
               </span>
              </label>
             </div>
             <datalist id="end_autocomplete">
             </datalist>
             <div class="suggestion-wrapper js-form-wrapper form-wrapper" data-drupal-selector="edit-end-suggestion-wrapper" id="edit-end-suggestion-wrapper">
              <span class="suggestion-text">
               Veuillez préciser le point d'arrivée souhaité :
              </span>
              <div class="js-form-item form-item js-form-type-select form-item-end-suggestion js-form-item-end-suggestion form-no-label form-disabled">
               <label class="visually-hidden" for="end_suggestion">
                À
                <span class="visually-hidden">
                 (lieu d'arrivée)
                </span>
               </label>
               <select class="form-select" data-drupal-selector="end-suggestion" disabled="disabled" id="end_suggestion" name="end_suggestion">
               </select>
              </div>
              <button aria-label="Fermer la liste de suggestions pour le point d'arrivée" class="close-end-suggestion">
               X
              </button>
             </div>
             <button id="switch-start-end">
             </button>
            </div>
            <div class="u-gridless-flow__item js-form-wrapper form-wrapper" data-drupal-selector="edit-second-container" id="edit-second-container">
             <div id="start_or_arrival">
              <ul class="start_or_arrival--switch">
               <li class="start_or_arrival--btn" role="presentation">
                <label aria-label="calculer en fonction de l’heure de départ" class="option" for="edit-start-or-arrival-1">
                 Départ
                </label>
               </li>
               <li class="start_or_arrival--btn" role="presentation">
                <label aria-label="calculer en fonction de l’heure d’arrivée" class="option" for="edit-start-or-arrival-0">
                 Arrivée
                </label>
               </li>
              </ul>
             </div>
             <div class="date-search-container js-form-wrapper form-wrapper" data-drupal-selector="edit-date-container" id="edit-date-container">
              <div class="js-form-item form-item js-form-type-textfield form-item-departure-date js-form-item-departure-date form-no-label">
               <label class="visually-hidden" for="edit-departure-date">
                Date (au format JJ/MM/AAAA)
               </label>
              </div>
              <div class="time-search-container js-form-wrapper form-wrapper" data-drupal-selector="edit-time-container" id="edit-time-container">
               <span class="separator-container">
                à
               </span>
               <div class="js-form-item form-item js-form-type-select form-item-departure-hour js-form-item-departure-hour form-no-label">
                <label class="visually-hidden" for="edit-departure-hour">
                 Heure
                </label>
                <select class="form-select" data-drupal-selector="edit-departure-hour" id="edit-departure-hour" name="departure_hour">
                 <option value="00">
                  00
                 </option>
                 <option value="01">
                  01
                 </option>
                 <option value="02">
                  02
                 </option>
                 <option value="03">
                  03
                 </option>
                 <option value="04">
                  04
                 </option>
                 <option value="05">
                  05
                 </option>
                 <option value="06">
                  06
                 </option>
                 <option value="07">
                  07
                 </option>
                 <option value="08">
                  08
                 </option>
                 <option value="09">
                  09
                 </option>
                 <option value="10">
                  10
                 </option>
                 <option selected="selected" value="11">
                  11
                 </option>
                 <option value="12">
                  12
                 </option>
                 <option value="13">
                  13
                 </option>
                 <option value="14">
                  14
                 </option>
                 <option value="15">
                  15
                 </option>
                 <option value="16">
                  16
                 </option>
                 <option value="17">
                  17
                 </option>
                 <option value="18">
                  18
                 </option>
                 <option value="19">
                  19
                 </option>
                 <option value="20">
                  20
                 </option>
                 <option value="21">
                  21
                 </option>
                 <option value="22">
                  22
                 </option>
                 <option value="23">
                  23
                 </option>
                </select>
               </div>
               <div class="js-form-item form-item js-form-type-select form-item-departure-minute js-form-item-departure-minute form-no-label">
                <label class="visually-hidden" for="edit-departure-minute">
                 Minute
                </label>
                <select class="form-select" data-drupal-selector="edit-departure-minute" id="edit-departure-minute" name="departure_minute">
                 <option value="00">
                  00
                 </option>
                 <option value="05">
                  05
                 </option>
                 <option value="10">
                  10
                 </option>
                 <option value="15">
                  15
                 </option>
                 <option value="20">
                  20
                 </option>
                 <option selected="selected" value="25">
                  25
                 </option>
                 <option value="30">
                  30
                 </option>
                 <option value="35">
                  35
                 </option>
                 <option value="40">
                  40
                 </option>
                 <option value="45">
                  45
                 </option>
                 <option value="50">
                  50
                 </option>
                 <option value="55">
                  55
                 </option>
                </select>
               </div>
              </div>
             </div>
             <div class="js-form-item form-item js-form-type-checkbox form-item-disabled js-form-item-disabled">
              <label class="option" for="edit-disabled">
               Itinéraires accessibles
              </label>
             </div>
            </div>
            <div class="u-gridless-flow__item js-form-wrapper form-wrapper" data-drupal-selector="edit-third-container" id="edit-third-container">
             <fieldset class="fieldgroup form-composite js-form-item form-item js-form-wrapper form-wrapper" data-drupal-selector="modes" id="modes--wrapper">
              <legend>
               <button aria-controls="mode_criteria" aria-expanded="false" class="fieldset-legend">
                Modes
               </button>
              </legend>
              <div class="fieldset-wrapper" id="mode_criteria">
               <div class="form-checkboxes" id="modes">
                <ul class="mode_rail--checkboxes">
                 <li class="mode_rail--chbox">
                  <span class="pictos-modes pictos-modes-rail">
                  </span>
                  <label class="option" for="edit-modes-rail">
                   RER / Transilien
                  </label>
                 </li>
                 <li class="mode_rail--chbox">
                  <span class="pictos-modes pictos-modes-metro">
                  </span>
                  <label class="option" for="edit-modes-metro">
                   Métro
                  </label>
                 </li>
                 <li class="mode_rail--chbox">
                  <span class="pictos-modes pictos-modes-bus">
                  </span>
                  <label class="option" for="edit-modes-bus">
                   Bus, Optile, Noctilien
                  </label>
                 </li>
                 <li class="mode_rail--chbox">
                  <span class="pictos-modes pictos-modes-tram">
                  </span>
                  <label class="option" for="edit-modes-tram">
                   Tramway
                  </label>
                 </li>
                 <li class="mode_rail--chbox">
                  <span class="pictos-modes pictos-modes-bicycle">
                  </span>
                  <label class="option" for="edit-modes-bicycle">
                   Vélo
                  </label>
                 </li>
                 <li class="mode_rail--chbox">
                  <span class="pictos-modes pictos-modes-scooter">
                  </span>
                  <label class="option" for="edit-modes-scooter">
                   Scooter
                  </label>
                 </li>
                 <li class="mode_rail--chbox">
                  <span class="pictos-modes pictos-modes-carpooling">
                  </span>
                  <label class="option" for="edit-modes-carpooling">
                   Covoiturage
                  </label>
                 </li>
                </ul>
               </div>
              </div>
             </fieldset>
             <fieldset class="fieldgroup form-composite js-form-item form-item js-form-wrapper form-wrapper" data-drupal-selector="itinerary-profile" id="itinerary_profile--wrapper">
              <legend>
               <button aria-controls="profile_criteria" aria-expanded="false" class="fieldset-legend">
                Critères
               </button>
              </legend>
              <div class="fieldset-wrapper" id="profile_criteria">
               <div id="itinerary_profile">
                <ul class="itinerary_profile--radios">
                 <li class="itinerary_profile--btn">
                  <label class="option" for="edit-itinerary-profile-fastest">
                   Le + rapide
                  </label>
                 </li>
                 <li class="itinerary_profile--btn">
                  <label class="option" for="edit-itinerary-profile-min-connections">
                   Le - de correspondance
                  </label>
                 </li>
                 <li class="itinerary_profile--btn">
                  <label class="option" for="edit-itinerary-profile-min-walk">
                   Le - de marche
                  </label>
                 </li>
                </ul>
               </div>
              </div>
             </fieldset>
             <button id="reset-search-form">
              Nouvelle recherche
             </button>
            </div>
           </form>
          </div>
         </div>
         <div class="home--plan-link-wrapper">
          <div class="home--plan-link-border">
          </div>
          <div class="home--plan-link-items">
           [linkx]
           
          </div>
         </div>
        </div>
        <div class="itineraire-home--etiquettes">
         <div>
          <div id="block-homepagetagsblock">
           <div class="article-content">
            <div class="swiper-container swiper-container--home-groupe">
             <ul class="u-ul-reset tags article-colonne article-colonne@small article-colonne@medium article-colonne--wide@large swiper-wrapper" id="hp-tag-container">
              <li class="swiper-slide swiper-slide--hub sliding-tag">
               <a href="/fr/">
                <span class="tag">
                 ratpgroup.com
                </span>
               </a>
              </li>
             </ul>
            </div>
           </div>
          </div>
         </div>
        </div>
       </div>
      </div>
      <div class="article__image-couverture">
       <picture>
        <source media="all and (min-width: 64em)" sizes="100vw" srcset="/sites/default/files/styles/home_couverture_m/public/2019-06/12478d108.img_.jpg?h=e2fa0ca0&amp;itok=07cY03Cx 1024w, /sites/default/files/styles/home_couverture_l/public/2019-06/12478d108.img_.jpg?h=e2fa0ca0&amp;itok=GLj_I9Dm 1440w, /sites/default/files/styles/home_couverture_xl/public/2019-06/12478d108.img_.jpg?h=e2fa0ca0&amp;itok=tO6BLb55 1900w" type="image/jpeg"/>
        <source media="all and (min-width: 36.0625em) and (max-width: 63.9375em)" sizes="100vw" srcset="/sites/default/files/styles/home_couverture_m/public/2019-06/12478d108.img_.jpg?h=e2fa0ca0&amp;itok=07cY03Cx 1024w, /sites/default/files/styles/home_couverture_l/public/2019-06/12478d108.img_.jpg?h=e2fa0ca0&amp;itok=GLj_I9Dm 1440w, /sites/default/files/styles/home_couverture_xl/public/2019-06/12478d108.img_.jpg?h=e2fa0ca0&amp;itok=tO6BLb55 1900w" type="image/jpeg"/>
        <source media="all and (max-width: 36em)" sizes="100vw" srcset="/sites/default/files/styles/home_couverture_xs/public/2019-06/12478d108.img_.jpg?h=e2fa0ca0&amp;itok=B93IbCJI 320w, /sites/default/files/styles/home_couverture_s/public/2019-06/12478d108.img_.jpg?h=e2fa0ca0&amp;itok=XdeWqeM4 576w" type="image/jpeg"/>
       </picture>
      </div>
     </div>
     <div class="header-colonne header-colonne@small header-colonne@medium header-colonne@large clearfix">
      <div class="logo">
       <div id="block-sitebranding">
        [ahref]
        
       </div>
      </div>
      <div class="elements-top">
       <div class="block-social-media-links block-region-elements_top social-share--header header-social-media header-separator" id="block-socialmedialinks">
        <ul class="platforms inline horizontal">
         <li class="social_share_icn">
          <a href="/ratp/">
           <i aria-labelledby="instagram-icon-elements-top" class="fab fa-instagram">
           </i>
          </a>
         </li>
         <li class="social_share_icn">
          [ahref]
          
         </li>
         <li class="social_share_icn">
          [ahref]
          
         </li>
        </ul>
       </div>
       <div class="language-switcher-language-url language-switcher header-separator" id="block-selecteurdelangue">
        <div class="dropdown">
         <button aria-controls="list-lang-block-selecteurdelangue" aria-expanded="false" class="dropdown-button current-fr" id="language-menu-button-block-selecteurdelangue" onclick="toggleDropdownVisibility('list-lang-block-selecteurdelangue', 'language-menu-button-block-selecteurdelangue')">
          <span class="mask-acess">
           langue sélectionnée<li>[link]</li><li>[keywordx][symbolx][keywordx][symbolx][bracketl10][keywordx][bracketr10][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx]</li><li>[link]</li>[link]<li>[keywordx][symbolx][keywordx][symbolx][bracketl11][keywordx][bracketr11][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx]</li>
          </span>
          Français
          <span class="mask-acess">
           changer de langue
          </span>
         </button>
         <ul class="u-toggle__block dropdown-content list-lang" id="list-lang-block-selecteurdelangue">
          <li class="u-flag--en">
           [ahref]
           
          </li>
          <li class="bg-grey">
           Tourist information
          </li>
          <li>
           [ahref]
           
          </li>
          <li>
           [linkx]
           
          </li>
          <li>
           [ahref]
           
          </li>
          <li>
           [linkx]
           
          </li>
          <li>
           [linkx]
           
          </li>
          <li>
           [linkx]
           
          </li>
          <li>
           [ahref]
           
          </li>
          <li>
           [linkx]
           
          </li>
         </ul>
        </div>
       </div>
       <div id="block-ratp-search-block">
        <div class="search-block-form" data-drupal-selector="" id="custom-cludo-search-form" role="search">
         <form accept-charset="UTF-8" id="search-block-form" method="get">
          <div class="js-form-item form-item js-form-type-search form-item-keys js-form-item-keys form-no-label">
           <label class="visually-hidden" for="search1">
            recherche : taper les premières lettres et choisissez dans la liste de suggestion
           </label>
          </div>
          <div class="form-actions js-form-wrapper form-wrapper" data-drupal-selector="edit-actions" id="search-form-block-edit-actions--2">
          </div>
         </form>
        </div>
       </div>
       <div class="maratp-menu maratp-menu--header" id="block-maratp">
        <li>[link]</li><li>[keywordx][symbolx][keywordx][symbolx][bracketl4][keywordx][bracketr4][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx]</li><li>[link]</li>[link]<li>[keywordx][symbolx][keywordx][symbolx][bracketl5][keywordx][bracketr5][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx]</li>
       </div>
      </div>
      <div class="raccourcis">
       <nav aria-label="Menu principal (version abrégée)" id="block-headersubmenu" role="navigation">
        <ul class="raccourcis-menu">
         <li class="raccourcis-menu__item">
          [linkx]
          
         </li>
         <li class="raccourcis-menu__item">
          [ahref]
          
         </li>
         <li class="raccourcis-menu__item">
          [ahref]
          
         </li>
         <li class="raccourcis-menu__item">
          [linkx]
          
         </li>
        </ul>
       </nav>
       <div class="actualite-groupe">
        <button aria-controls="actualite-groupe--content" aria-expanded="false" class="actualite-groupe--title" id="actualite-groupe--title" onclick="toggleGroupButton()">
         En direct du groupe RATP
        </button>
        <div class="actualite-groupe--content" id="actualite-groupe--content">
         <div class="views-element-container">
          <div class="js-view-dom-id-c5073e0afe2e6ed4fa14230ee0f083ce43b17a46c4bfdfc938b6bb8d421c8907 block-groupe-ratp">
           <div class="join-us--type-metier">
            <div class="groupe-actualite">
             <ul class="actu-groupe">
              <li class="actu-groupe__item">
               <div class="u-colonne u-colonne@small u-colonne@medium u-colonne@large clearfix" id="row-groupe-ratp-11099-0">
                <div class="actu-groupe__box">
                 <div class="news_date">
                  02/07 - 09h20
                 </div>
                 <div class="news_title">
                  [linkx]
                  
                 </div>
                 <div class="news_tags">
                 </div>
                </div>
               </div>
              </li>
              <li class="actu-groupe__item">
               <div class="u-colonne u-colonne@small u-colonne@medium u-colonne@large clearfix" id="row-groupe-ratp-11075-1">
                <div class="actu-groupe__box">
                 <div class="news_date">
                  27/06 - 12h52
                 </div>
                 <div class="news_title">
                  [linkx]
                  
                 </div>
                 <div class="news_tags">
                 </div>
                </div>
               </div>
              </li>
              <li class="actu-groupe__item">
               <div class="u-colonne u-colonne@small u-colonne@medium u-colonne@large clearfix" id="row-groupe-ratp-11043-2">
                <div class="actu-groupe__box">
                 <div class="news_date">
                  19/06 - 14h36
                 </div>
                 <div class="news_title">
                  [ahref]
                  
                 </div>
                 <div class="news_tags">
                 </div>
                </div>
               </div>
              </li>
             </ul>
             <div class="twitter_timeline border-block border-block--bleu-twitter">
              [ahref]
              
             </div>
             <ul class="link_groupe_ratp">
              <li>
               [linkx]
               
              </li>
              <li>
               [ahref]
               
              </li>
              <li>
               [ahref]
               
              </li>
             </ul>
            </div>
           </div>
          </div>
         </div>
        </div>
       </div>
       <div class="burger-menu-burger">
        <button class="burger-button burger-button--header" id="burger-button-id" onclick="toggleScroll()">
        </button>
       </div>
      </div>
     </div>
     <div class="bk-menu">
      <nav aria-label="Menu principal (version complète)" id="menu-principal">
       <div aria-hidden="true" class="burger-menu u-toggle__block closed" id="burger-menu-panneau" tabindex="-1">
        <button class="burger-button burger-button--burger" id="close-burger-menu-id" onclick="closeBurgerMenu()">
        </button>
        <div class="burger-menu__menu">
         <div class="maratp-menu maratp-menu--burger" id="block-maratp-2">
          <div>
           <p>
            [linkx]
            
           </p>
          </div>
         </div>
         <div id="block-ratpsearchblock2">
          <div class="search-block-form" data-drupal-selector="" id="custom-cludo-search-form-burger" role="search">
           <form accept-charset="UTF-8" id="search-block-form1" method="get">
            <div class="js-form-item form-item js-form-type-search form-item-keys js-form-item-keys form-no-label">
             <label class="visually-hidden" for="search2">
              recherche : taper les premières lettres et choisissez dans la liste de suggestion
             </label>
            </div>
            <div class="form-actions js-form-wrapper form-wrapper" data-drupal-selector="edit-actions" id="search-form-block-edit-actions---2">
            </div>
           </form>
          </div>
         </div>
         <div class="language-switcher-language-url" id="block-selecteurdelangue-2" role="navigation">
          <div class="dropdown">
           <button aria-controls="list-lang-block-selecteurdelangue-2" aria-expanded="false" class="dropdown-button current-fr" id="language-menu-button-block-selecteurdelangue-2" onclick="toggleDropdownVisibility('list-lang-block-selecteurdelangue-2', 'language-menu-button-block-selecteurdelangue-2')">
            <span class="mask-acess">
             langue sélectionnée
            </span>
            Français
            <span class="mask-acess">
             changer de langue
            </span>
           </button>
           <ul class="u-toggle__block dropdown-content list-lang" id="list-lang-block-selecteurdelangue-2">
            <li class="u-flag--en">
             [linkx]
             
            </li>
            <li class="bg-grey">
             Tourist information
            </li>
            <li>
             [ahref]
             
            </li>
            <li>
             [linkx]
             
            </li>
            <li>
             [ahref]
             
            </li>
            <li>
             [linkx]
             
            </li>
            <li>
             [linkx]
             
            </li>
            <li>
             [linkx]
             
            </li>
            <li>
             [ahref]
              [keywordx][symbolx][keywordx][symbolx][bracketl1][keywordx][bracketr1][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx]<li>[keywordx][symbolx][keywordx][symbolx][bracketl2][keywordx][bracketr2][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx]</li>[keywordx][symbolx][keywordx][symbolx][bracketl3][keywordx][bracketr3][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx]
             
            </li>
            <li>
             [ahref]
             
            </li>
           </ul>
          </div>
         </div>
         <nav aria-label="Menu principal (version abrégée)" id="block-navigationprincipale" role="navigation">
          <ul class="main-menu main-menu-n0" id="burger-menu-id">
           <li area-expanded="false" class="main-menu__item main-menu-n0__item">
            [ahref]
            
            <ul class="main-menu main-menu-n1">
             <li class="main-menu__item main-menu-n1__item">
              [linkx]
              
             </li>
             <li class="main-menu__item main-menu-n1__item">
              [linkx]
              
             </li>
             <li class="main-menu__item main-menu-n1__item">
              [linkx]
              
             </li>
             <li class="main-menu__item main-menu-n1__item">
              [linkx]
              
             </li>
             <li class="main-menu__item main-menu-n1__item">
              [linkx]
              
             </li>
             <li class="main-menu__item main-menu-n1__item">
              [linkx]
              
             </li>
             <li class="main-menu__item main-menu-n1__item">
              [ahref]
              
             </li>
             <li class="main-menu__item main-menu-n1__item">
              [ahref]
              
             </li>
             <li class="main-menu__item main-menu-n1__item">
              [linkx]
              
             </li>
             <li class="main-menu__item main-menu-n1__item">
              [linkx]
              
             </li>
             <li class="main-menu__item main-menu-n1__item">
              [linkx]
              
             </li>
             <li class="main-menu__item main-menu-n1__item">
              [linkx]
              
             </li>
            </ul>
           </li>
           <li area-expanded="false" class="main-menu__item main-menu-n0__item">
            [linkx]
            
            <ul class="main-menu main-menu-n1">
             <li class="main-menu__item main-menu-n1__item">
              [linkx]
              
             </li>
             <li class="main-menu__item main-menu-n1__item">
              [linkx]
              
             </li>
             <li class="main-menu__item main-menu-n1__item">
              [linkx]
              
             </li>
             <li class="main-menu__item main-menu-n1__item">
              [linkx]
              
             </li>
             <li class="main-menu__item main-menu-n1__item">
              [ahref]
              
             </li>
            </ul>
           </li>
           <li area-expanded="false" class="main-menu__item main-menu-n0__item">
            [ahref]
            
            <ul class="main-menu main-menu-n1">
             <li class="main-menu__item main-menu-n1__item">
              [linkx]
              
             </li>
             <li class="main-menu__item main-menu-n1__item">
              [ahref]
              
             </li>
             <li class="main-menu__item main-menu-n1__item">
              [ahref]
              
             </li>
             <li class="main-menu__item main-menu-n1__item">
              [linkx]
              
             </li>
             <li class="main-menu__item main-menu-n1__item">
              [ahref]
              
             </li>
             <li class="main-menu__item main-menu-n1__item">
              [ahref]
              
             </li>
             <li class="main-menu__item main-menu-n1__item">
              [linkx]
              
             </li>
             <li class="main-menu__item main-menu-n1__item">
              [linkx]
              
             </li>
             <li class="main-menu__item main-menu-n1__item">
              [linkx]
              
             </li>
             <li class="main-menu__item main-menu-n1__item">
              [ahref]
              
             </li>
            </ul>
           </li>
          </ul>
         </nav>
         <div class="block-social-media-links block-region-burger_menu social-share--footer" id="block-socialmedialinks-3">
          <ul class="platforms inline horizontal">
           <li class="social_share_icn">
            [ahref]
            
           </li>
           <li class="social_share_icn">
            [linkx]
            
           </li>
           <li class="social_share_icn">
            [linkx]
             [content18[linkx]content19]
            
           </li>
           <li class="social_share_icn">
            [ahref]
            
           </li>
           <li class="social_share_icn">
            [ahref]
            
           </li>
           <li class="social_share_icn">
            [linkx]
            
           </li>
          </ul>
         </div>
        </div>
       </div>
      </nav>
     </div>
    </header>
    <main class="main clearfix home-desktop-main" role="main">
     [linkx]
     
     <div class="layout-content u-colonne page--home--content">
      <div class="page--home--first-row">
       <div class="u-bg-grey">
        <div class="u-colonne u-colonne@small u-colonne@medium u-colonne@large">
         <div class="u-gridless-flow u-section--padding">
          <div class="u-gridless-flow__item u-gridless-flow__item--double">
           <section class="ixxi_infotrafic-content">
            <div>
             <div id="block-ixxiinfotraficblockdetatdureseauratpentempsreel">
              <div id="infotrafic-container">
               <div class="trafic-header">
                <button class="get-info-trafic">
                </button>
                <h2 aria-live="assertive">
                 <b>[mkey1][symbolx][pkey1][symbolx][keyword1][bracketl1][bracketr1][symbolx][bracketl2][siter1][bracketr2][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx]</b>
                </h2>
               </div>
               <div class="trafic-content">
                <div class="trafic-network-wrapper">
                 <div class="trafic-network-detail">
                  <h3>
                   [mkey1][symbolx][pkey1][symbolx][keyword1][bracketl1][bracketr1][symbolx][bracketl2][siter1][bracketr2][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx]
                  </h3>
                 </div>
                 <div class="trafic-network-lines">
                  <ul>
                   <li>
                    <div class="picto-lines picto-line-A">
                     <button aria-expanded="false">
                      <span class="picto rer border picto--border-alert ligneA" data-ratp-line-key="A" data-ratp-network-name="rer">
                      </span>
                     </button>
                    </div>
                    <span class="message-trafic message-A message-alert">
                    </span>
                   </li>
                   <li>
                    <div class="picto-lines picto-line-B">
                     <span class="picto rer border ligneB" data-ratp-line-key="B" data-ratp-network-name="rer">
                     </span>
                    </div>
                   </li>
                  </ul>
                 </div>
                </div>
                <div class="trafic-network-wrapper">
                 <div class="trafic-network-detail">
                  <h3>
                   [mkey1][symbolx][pkey1][symbolx][keyword1][bracketl1][bracketr1][symbolx][bracketl2][siter1][bracketr2][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx]
                  </h3>
                 </div>
                 <div class="trafic-network-lines">
                  <ul>
                   <li>
                    <div class="picto-lines picto-line-1">
                     <span class="picto metro border ligne1" data-ratp-line-key="1" data-ratp-network-name="metro">
                     </span>
                    </div>
                   </li>
                   <li>
                    <div class="picto-lines picto-line-2">
                     <span class="picto metro border ligne2" data-ratp-line-key="2" data-ratp-network-name="metro">
                     </span>
                    </div>
                   </li>
                   <li>
                    <div class="picto-lines picto-line-3">
                     <span class="picto metro border ligne3" data-ratp-line-key="3" data-ratp-network-name="metro">
                     </span>
                    </div>
                   </li>
                   <li>
                    <div class="picto-lines picto-line-3B">
                     <span class="picto metro border ligne3b" data-ratp-line-key="3b" data-ratp-network-name="metro">
                     </span>
                    </div>
                   </li>
                   <li>
                    <div class="picto-lines picto-line-4">
                     <button aria-expanded="false">
                      <span class="picto metro border picto--border-information ligne4" data-ratp-line-key="4" data-ratp-network-name="metro">
                      </span>
                     </button>
                    </div>
                    <span class="message-trafic message-4 message-travaux message-information">
                    </span>
                   </li>
                   <li>
                    <div class="picto-lines picto-line-5">
                     <span class="picto metro border ligne5" data-ratp-line-key="5" data-ratp-network-name="metro">
                     </span>
                    </div>
                   </li>
                   <li>
                    <div class="picto-lines picto-line-6">
                     <button aria-expanded="false">
                      <span class="picto metro border picto--border-information ligne6" data-ratp-line-key="6" data-ratp-network-name="metro">
                      </span>
                     </button>
                    </div>
                    <span class="message-trafic message-6 message-travaux message-information">
                    </span>
                   </li>
                   <li>
                    <div class="picto-lines picto-line-7">
                     [content11[linkx]content12[linkx]content13]
                    </div>
                   </li>
                   <li>
                    <div class="picto-lines picto-line-7B">
                     <span class="picto metro border ligne7b" data-ratp-line-key="7b" data-ratp-network-name="metro">
                     </span>
                    </div>
                   </li>
                   <li>
                    <div class="picto-lines picto-line-8">
                     <span class="picto metro border ligne8" data-ratp-line-key="8" data-ratp-network-name="metro">
                     </span>
                    </div>
                   </li>
                   <li>
                    [content9[linkx]content10[linkx]content11[linkx]content12]
                   </li>
                   <li>
                    <div class="picto-lines picto-line-10">
                     <span class="picto metro border ligne10" data-ratp-line-key="10" data-ratp-network-name="metro">
                     </span>
                    </div>
                   </li>
                   <li>
                    <div class="picto-lines picto-line-11">
                     <button aria-expanded="false">
                      <span class="picto metro border picto--border-information ligne11" data-ratp-line-key="11" data-ratp-network-name="metro">
                      </span>
                     </button>
                    </div>
                    <span class="message-trafic message-11 message-travaux message-information">
                    </span>
                   </li>
                   <li>
                    <div class="picto-lines picto-line-12">
                     <span class="picto metro border ligne12" data-ratp-line-key="12" data-ratp-network-name="metro">
                     </span>
                    </div>
                   </li>
                   <li>
                    <div class="picto-lines picto-line-13">
                     <button aria-expanded="false">
                      <span class="picto metro border picto--border-alert ligne13" data-ratp-line-key="13" data-ratp-network-name="metro">
                      </span>
                     </button>
                    </div>
                    <span class="message-trafic message-13 message-alert">
                     <strong>
                      Perturbé
                     </strong>
                     <br/>
                     09:37, le trafic est perturbé sur la ligne (malaise voyageur)
                     <span class="more-wrapper">
                      [ahref]
                      
                     </span>
                    </span>
                   </li>
                   <li>
                    <div class="picto-lines picto-line-14">
                     <span class="picto metro border ligne14" data-ratp-line-key="14" data-ratp-network-name="metro">
                     </span>
                    </div>
                   </li>
                  </ul>
                 </div>
                </div>
                <div class="trafic-network-wrapper">
                 <div class="trafic-network-detail">
                  <h3>
                   [mkey1][symbolx][pkey1][symbolx][keyword1][bracketl1][bracketr1][symbolx][bracketl2][siter1][bracketr2][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx]
                  </h3>
                 </div>
                 <div class="trafic-network-lines">
                  <ul>
                   <li>
                    <div class="picto-lines picto-line-T1">
                     <span class="picto tram border ligneT1" data-ratp-line-key="T1" data-ratp-network-name="tram">
                     </span>
                    </div>
                   </li>
                   <li>
                    <div class="picto-lines picto-line-T2">
                     <span class="picto tram border ligneT2" data-ratp-line-key="T2" data-ratp-network-name="tram">
                     </span>
                    </div>
                   </li>
                   <li>
                    <div class="picto-lines picto-line-T3A">
                     <span class="picto tram border ligneT3a" data-ratp-line-key="T3a" data-ratp-network-name="tram">
                     </span>
                    </div>
                   </li>
                   <li>
                    <div class="picto-lines picto-line-T3B">
                     <span class="picto tram border ligneT3b" data-ratp-line-key="T3b" data-ratp-network-name="tram">
                     </span>
                    </div>
                   </li>
                   <li>
                    <div class="picto-lines picto-line-T5">
                     <span class="picto tram border ligneT5" data-ratp-line-key="T5" data-ratp-network-name="tram">
                     </span>
                    </div>
                   </li>
                   <li>
                    <div class="picto-lines picto-line-T6">
                     <span class="picto tram border ligneT6" data-ratp-line-key="T6" data-ratp-network-name="tram">
                     </span>
                    </div>
                   </li>
                   <li>
                    <div class="picto-lines picto-line-T7">
                     <span class="picto tram border ligneT7" data-ratp-line-key="T7" data-ratp-network-name="tram">
                     </span>
                    </div>
                   </li>
                   <li>
                    <div class="picto-lines picto-line-T8">
                     <span class="picto tram border ligneT8" data-ratp-line-key="T8" data-ratp-network-name="tram">
                     </span>
                    </div>
                   </li>
                  </ul>
                 </div>
                </div>
               </div>
               <div class="info-trafic-box">
                <div class="trafic-footer">
                 [linkx]
                 
                </div>
                <div class="travaux_manifestations-footer">
                 [linkx]
                 
                </div>
               </div>
              </div>
             </div>
            </div>
           </section>
          </div>
          <div class="u-gridless-flow__item page--home--infos-regions">
           <section>
            <div>
             <div id="block-informationsblock">
              <div class="">
               <div class="swiper-container swiper-container--informe border-block border-block--lila">
                <div class="block--informe swiper-wrapper">
                 <div class="swiper-slide swiper-slide--informe">
                  <h1>
                   [mkey1][symbolx][pkey1][symbolx][keyword1][bracketl1][bracketr1][symbolx][bracketl2][siter1][bracketr2][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx]
                  </h1>
                  <div class="block--informe__contenu">
                   Depuis le 12 juin, vous pouvez stocker simultanément plusieurs titres de transports différents sur cette carte.
                   [ahref]
                   
                  </div>
                 </div>
                 <div class="swiper-slide swiper-slide--informe">
                  <h1>
                   [mkey1][symbolx][pkey1][symbolx][keyword1][bracketl1][bracketr1][symbolx][bracketl2][siter1][bracketr2][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx]
                  </h1>
                  <div class="block--informe__contenu">
                   Découvrez les différents moyens de transports pouvant vous conduire aux gares et aéroports.
                   [ahref]
                   
                  </div>
                 </div>
                 <div class="swiper-slide swiper-slide--informe">
                  <h1>
                   [mkey1][symbolx][pkey1][symbolx][keyword1][bracketl1][bracketr1][symbolx][bracketl2][siter1][bracketr2][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx]
                  </h1>
                  <div class="block--informe__contenu">
                   Les nouveaux clients peuvent dès à présent souscrire leur forfait directement sur internet
                   <a aria-label="La e-souscription imagine R (En savoir plus)" href="/services-aux-voyageurs/la-e-souscription-imagine-r-ouvre-sur-le-site-navigofr">
                    En savoir plus
                   </a>
                  </div>
                 </div>
                </div>
                <div class="swiper-autoplay" id="swiper-play-pause">
                 <button class="swiper-autoplay-start">
                 </button>
                 <button class="swiper-autoplay-stop" style="display: none;">
                 </button>
                </div>
                <ul class="swiper-pagination">
                </ul>
               </div>
              </div>
             </div>
            </div>
           </section>
          </div>
         </div>
        </div>
       </div>
       <div class="u-bg-blue">
        <div class="u-colonne u-colonne@small u-colonne@medium u-colonne@large page--home--aide">
         <section>
          <div>
           <div class="views-element-container" id="block-views-block-recherche-categories-faq-block-1-3">
            <h1>
             <b>[mkey1][symbolx][pkey1][symbolx][keyword1][bracketl1][bracketr1][symbolx][bracketl2][siter1][bracketr2][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx]</b>
            </h1>
            <div>
             <div class="js-view-dom-id-571e0e12cfaf9d7321f81340e9fa1bacc73a45d9f78c3760ff4013579f18d783">
              <form accept-charset="UTF-8" action="/node" class="views-exposed-form" data-drupal-selector="views-exposed-form-recherche-categories-faq-block-1" id="views-exposed-form-recherche-categories-faq-block-1" method="get">
               <label class="faq--label mask-acess u-bold" for="edit-tid">
                Une question: taper les premières lettres et choisir dans la liste de suggestion
               </label>
               <div class="faq--search">
                <div class="js-form-item form-item js-form-type-textfield form-item-tid js-form-item-tid form-no-label">
                </div>
                <div class="form-actions js-form-wrapper form-wrapper" data-drupal-selector="edit-actions" id="edit-actions--2">
                </div>
                <div class="form-actions js-form-wrapper form-wrapper" data-drupal-selector="edit-actions" id="edit-actions-recherche-categories-faq">
                </div>
               </div>
              </form>
              <div class="views-row">
              </div>
              <div class="views-row">
              </div>
              <div class="views-row">
              </div>
              <div class="views-row">
              </div>
              <div class="views-row">
              </div>
              <div class="views-row">
              </div>
              <div class="views-row">
              </div>
              <div class="views-row">
              </div>
              <div class="views-row">
              </div>
              <div class="views-row">
              </div>
              <div class="views-row">
              </div>
              <div class="views-row">
              </div>
              <div class="views-row">
              </div>
              <div class="views-row">
              </div>
              <div class="views-row">
              </div>
              <div class="views-row">
              </div>
              <div class="views-row">
              </div>
              <div class="views-row">
              </div>
              <div class="views-row">
              </div>
              <div class="views-row">
              </div>
              <div class="views-row">
              </div>
              <div class="views-row">
              </div>
              <div class="views-row">
              </div>
              <div class="views-row">
              </div>
              <div class="views-row">
              </div>
              <div class="views-row">
              </div>
              <div class="views-row">
              </div>
              <div class="views-row">
              </div>
              <div class="views-row">
              </div>
              <div class="views-row">
              </div>
              <div class="views-row">
              </div>
              <div class="views-row">
              </div>
              <div class="views-row">
              </div>
              <div class="views-row">
              </div>
              <div class="views-row">
              </div>
              <div class="views-row">
              </div>
              <div class="views-row">
              </div>
              <div class="views-row">
              </div>
              <div class="views-row">
              </div>
              <div class="views-row">
              </div>
              <div class="views-row">
              </div>
              <div class="views-row">
              </div>
              <div class="views-row">
              </div>
              <div class="views-row">
              </div>
              <div class="views-row">
              </div>
              <div class="views-row">
              </div>
              <div class="views-row">
              </div>
              <div class="views-row">
              </div>
              <div class="views-row">
              </div>
              <div class="views-row">
              </div>
              <div class="views-row">
              </div>
              <div class="views-row">
              </div>
             </div>
            </div>
            <div class="all_questions">
             [ahref]
             
            </div>
            <div class="views-element-container">
             <div class="js-view-dom-id-ff4e80c3f574ab20d038f13f5c8af8716b86c492295d9404d1432af852376e50">
              <ul class="u-ul-reset">
               <li class="views-row">
                [ahref]
                
               </li>
               <li class="views-row">
                [linkx]
                
               </li>
               <li class="views-row">
                <a class="tags-question" href="/questions/4661/?taxo=4661&amp;faqid=2066" id="tag-faq-2066-2">
                 Souscrire à un forfait Navigo
                </a>
               </li>
               <li class="views-row">
                [linkx]
                
               </li>
              </ul>
             </div>
            </div>
           </div>
          </div>
         </section>
        </div>
       </div>
       <div class="u-bg-white u-section--padding">
        <div class="u-colonne u-colonne@small u-colonne@medium u-colonne@large page--home--decouvrir">
         <section>
          <div>
           <div id="block-homedecouvrirusblock">
            <div class="billets-hub__read-more">
             <div class="u-colonne u-colonne@small u-colonne@medium u-colonne@large">
              <div class="page--home--decouvrir--head">
               <h1 class="u-titre--50 u-titre--50@small u-titre--50@medium u-titre--50@large u-titre--center">
                [mkey1][symbolx][pkey1][symbolx][keyword1][bracketl1][bracketr1][symbolx][bracketl2][siter1][bracketr2][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx]
               </h1>
               <div class="page--home--decouvrir--subtitle">
                Chaque semaine, des sorties et des contenus qui vous accompagnent dans vos trajets.
               </div>
              </div>
              <div class="swiper-container swiper-container--home-groupe">
               <button class="swiper-button-prev swiper-button-prev--home-groupe swiper-button-prev--hub">
               </button>
               <ul class="block--groupe swiper-wrapper u-ul-reset decouvv">
                <li class="card swiper-slide swiper-slide--hub card--hub" id="row-home-decouvrir-1">
                 [linkx]
                 
                 <div class="card__texte">
                  Jusqu'au 5 janvier 2020, laissez-vous porter par cette exposition qui vous montrera les facettes les plus étonnantes et les plus méconnue ...
                 </div>
                 <div class="card__categorie">
                  [ahref]
                  
                 </div>
                </li>
                <li class="card swiper-slide swiper-slide--hub card--hub" id="row-home-decouvrir-2">
                 [ahref]
                 
                 <div class="card__texte">
                  <p class="text-align-justify">
                   Ce tronçon sera interrompu afin de procéder à la rénovation de viaducs.
                  </p>
                 </div>
                 <div class="card__categorie">
                  [ahref]
                  
                 </div>
                </li>
                <li class="card swiper-slide swiper-slide--hub card--hub" id="row-home-decouvrir-3">
                 [linkx]
                 
                 <div class="card__texte">
                  Jusqu'au 31 décembre 2019, déambulez dans les plus grands chefs-d’oeuvre de Van Gogh à l'Atelier des Lumières. Nous sommes partenaire de  ...
                 </div>
                 <div class="card__categorie">
                  [ahref]
                  
                 </div>
                </li>
               </ul>
               <button class="swiper-button-next swiper-button-next--home-groupe swiper-button-next--hub">
               </button>
              </div>
              <div>
               [linkx]
               
              </div>
             </div>
            </div>
           </div>
          </div>
         </section>
        </div>
       </div>
       <div class="bg-rejoindre">
        <div class="u-colonne u-colonne@small u-colonne@medium u-colonne@large page--home--rejoindre">
         <li>[keywordx][symbolx][keywordx][symbolx][bracketl6][keywordx][bracketr6][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx]</li><li>[keywordx][symbolx][keywordx][symbolx][bracketl7][keywordx][bracketr7][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx]</li>[keywordx][symbolx][keywordx][symbolx][bracketl8][keywordx][bracketr8][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx]<li>[keywordx][symbolx][keywordx][symbolx][bracketl9][keywordx][bracketr9][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx]</li>
        </div>
       </div>
       <div class="u-bg-white">
        <div class="u-colonne u-colonne@small u-colonne@medium u-colonne@large page--home--groupe">
         <section>
          <div>
           <div id="block-homegrouperatpblock">
            <div class="billets-hub__read-more">
             <div class="u-colonne u-colonne@small u-colonne@medium u-colonne@large">
              <h1 class="u-titre--50 u-titre--50@small u-titre--50@medium u-titre--50@large u-titre--center">
               [mkey1][symbolx][pkey1][symbolx][keyword1][bracketl1][bracketr1][symbolx][bracketl2][siter1][bracketr2][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx]
              </h1>
              <div class="swiper-container swiper-container--home-groupe decouvv">
               <button class="swiper-button-prev swiper-button-prev--home-groupe swiper-button-prev--hub">
               </button>
               <ul class="block--groupe swiper-wrapper u-ul-reset">
                <li class="card swiper-slide swiper-slide--hub card--hub">
                 [linkx]
                 
                </li>
                <li class="card swiper-slide swiper-slide--hub card--hub">
                 [linkx]
                  [content8][content9][content10][linkx][content11]
                 
                </li>
                <li class="card swiper-slide swiper-slide--hub card--hub">
                 [linkx]
                 
                </li>
               </ul>
               <button class="swiper-button-next swiper-button-next--home-groupe swiper-button-next--hub">
               </button>
              </div>
             </div>
            </div>
           </div>
          </div>
         </section>
        </div>
        <div class="bg-jade-ratp">
        </div>
       </div>
      </div>
     </div>
    </main>
    <footer class="footer footer@medium footer@large" role="contentinfo">
     <div class="footer-colonne footer-colonne@small footer-colonne@medium footer-colonne@large clearfix">
      <div class="footer-logo footer-logo@small footer-logo@large">
       [ahref]
       
      </div>
      <div class="footer-left footer-left@medium footer-left@large">
       <div aria-labelledby="block-pieddepage-menu" class="menu-footer-secondaire" id="block-pieddepage">
        <ul class="button-menu button-menu-n0" id="block-pieddepage-menu">
         <li class="button-menu__item button-menu-n0__item button-menu-n0__item--dropdown">
          <button aria-controls="footer-list-menu-n2" aria-expanded="false" id="footer-menu-button" onclick="toggleDropdownVisibility('footer-list-menu-n2','footer-menu-button');">
           Accès direct
          </button>
          <ul class="button-menu u-toggle__block button-menu button-menu-n1" id="footer-list-menu-n2">
           <li class="button-menu__item button-menu-n1__item">
            [linkx]
            
           </li>
           <li class="button-menu__item button-menu-n1__item">
            [linkx]
            
           </li>
           <li class="button-menu__item button-menu-n1__item">
            [ahref]
            
           </li>
           <li class="button-menu__item button-menu-n1__item">
            [linkx]
            
           </li>
           <li class="button-menu__item button-menu-n1__item">
            [linkx]
            
           </li>
           <li class="button-menu__item button-menu-n1__item">
            [linkx]
            
           </li>
          </ul>
         </li>
         <li class="button-menu__item button-menu-n0__item">
          [ahref]
          
         </li>
         <li class="button-menu__item button-menu-n0__item">
          [content12][content13][linkx][content14][content15][content16][linkx]
         </li>
        </ul>
       </div>
      </div>
      <div class="footer-right footer-right@medium footer-right@large">
       <div class="block-social-media-links block-region-footer_right social-share--footer footer-social-media" id="block-socialmedialinks-2">
        <h1 class="footer-social-media__titre">
         [mkey1][symbolx][pkey1][symbolx][keyword1][bracketl1][bracketr1][symbolx][bracketl2][siter1][bracketr2][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx]
        </h1>
        <ul class="platforms inline horizontal">
         <li class="social_share_icn">
          [ahref]
          
         </li>
         <li class="social_share_icn">
          [linkx]
           <li>[keywordx][symbolx][keywordx][symbolx][bracketl12][keywordx][bracketr12][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx]</li><li>[keywordx][symbolx][keywordx][symbolx][bracketl13][keywordx][bracketr13][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx]</li><li>[keywordx][symbolx][keywordx][symbolx][bracketl14][keywordx][bracketr14][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx]</li>
          
         </li>
         <li class="social_share_icn">
          [linkx]
          
         </li>
         <li class="social_share_icn">
          [linkx]
          
         </li>
         <li class="social_share_icn">
          [ahref]
          
         </li>
         <li class="social_share_icn">
          <a href="/ratp/">
           <i aria-labelledby="instagram-icon-footer-right" class="fab fa-instagram">
           </i>
          </a>
         </li>
        </ul>
       </div>
       <nav aria-label="Menu principal" id="block-footersubmenu" role="navigation">
        <ul class="footer-menu-secondaire">
         <li class="footer-menu-secondaire__item">
          [ahref]
          
         </li>
         <li class="footer-menu-secondaire__item">
          [linkx]
          
         </li>
         <li class="footer-menu-secondaire__item">
          [linkx]
          
         </li>
         <li class="footer-menu-secondaire__item">
          [linkx]
          
         </li>
         <li>
          [linkx]
          
         </li>
        </ul>
       </nav>
      </div>
     </div>
     [ahref]
     
     <div class="maillage--footer footer-colonne footer-colonne@small footer-colonne@medium footer-colonne@large clearfix">
      A découvrir :
      <ul>
       <li>
        [linkx]
        
        |
       </li>
       <li>
        [linkx]
        
        |
       </li>
       <li>
        [ahref]
        
        |
       </li>
       <li>
        [ahref]
        
        |
       </li>
      </ul>
     </div>
    </footer>
   </div>
  </div>
  <destygo-webchat class="destygo_widget" id="destygo_widget" token="uQRRzHMjRM-Fh0xlICYeuA20180416090116">
  </destygo-webchat>
  <b style="color:black;background-color:#a0ffff">
   jnice09-ipp30-wq-zq-0215
  </b>
 </body>
</html>
|<---