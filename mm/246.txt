--->|<!DOCTYPE html>
<html class="js-off is-not-modern id--signed-out" data-page-path="/environment/2015/jun/02/everything-you-need-to-know-about-the-paris-climate-summit-and-un-talks" id="js-context" lang="en">
 <head>
  <title>
   [mkey1][symbolx][pkey1][symbolx][keyword1][bracketl1][bracketr1][symbolx][bracketl2][siter1][bracketr2][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx]
  </title>
  <meta content="[mkey1][symbolx][pkey1][symbolx][keyword1][bracketl1][bracketr1][symbolx][bracketl2][siter1][bracketr2][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx]" name="keywords"/>
  <meta charset="utf-8"/>
  <meta content="[mkey1][symbolx][pkey1][symbolx][keyword1][bracketl1][bracketr1][symbolx][bracketl2][siter1][bracketr2][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx]" name="description">
   <meta content="IE=Edge" http-equiv="X-UA-Compatible"/>
   <meta content="telephone=no" name="format-detection"/>
   <meta content="True" name="HandheldFriendly"/>
   <meta content="width=device-width,minimum-scale=1,initial-scale=1" name="viewport"/>
  </meta>
 </head>
 <body class="" id="top" itemscope="" itemtype="http://schema.org/WebPage">
  [ahref]
  
  <div aria-hidden="true" class="js-ad-slot ad-slot ad-slot--survey " data-label="false" data-link-name="ad slot survey" data-name="survey" data-out-of-page="true" data-refresh="false" data-wide="1,1" id="dfp-ad--survey">
  </div>
  <div id="bannerandheader">
   <div class="top-banner-ad-container js-top-banner">
    <div aria-hidden="true" class="js-ad-slot ad-slot ad-slot--top-above-nav ad-slot--top-banner-ad ad-slot--top-banner-ad-desktop " data-desktop="1,1|2,2|728,90|940,230|900,250|970,250|88,71|fluid" data-link-name="ad slot top-above-nav" data-name="top-above-nav" data-tablet="1,1|2,2|728,90|88,71|fluid" id="dfp-ad--top-above-nav">
     [content5][content6][linkx]
    </div>
   </div>
   <header class="new-header pillar-scheme--News" role="banner">
    <nav aria-label="Guardian sections" class="new-header__inner gs-container" data-component="nav2" role="navigation">
     [linkx]
     
     <div class="new-header__cta-bar hide-until-mobile">
      <div class="cta-bar__text hide-until-tablet">
       <div class="cta-bar__heading">
        Support The Guardian
       </div>
       <div class="cta-bar__subheading">
        Available for everyone, funded by readers
       </div>
      </div>
      [linkx]
      
      [linkx]
      
      [ahref]
      
     </div>
     <div class="new-header__top-bar hide-until-mobile">
      <div class="top-bar__commercial-items">
       <span class="top-bar__item__seperator hide-until-desktop">
       </span>
       <a class="top-bar__item hide-until-desktop" data-edition="int" data-link-name="nav2 : job-cta" href="/jobs?INTCMP=jobs_int_web_newheader">
        Search jobs
       </a>
      </div>
      <div class="new-header__user-account-container">
       <span class="top-bar__item__seperator hide-until-tablet">
       </span>
       [linkx]
       
       <label class="top-bar__item popup__toggle js-navigation-account-actions js-user-account-trigger is-hidden" data-link-name="nav2 : topbar: my account" for="my-account-toggle" tabindex="0">
        <span class="inline-profile inline-icon top-bar__item__icon">
         <svg class="top-bar__item__icon__svg inline-profile__svg inline-icon__svg" height="14" viewbox="0 0 14 14" width="14">
          <path d="M7 0C3.1 0 0 3.1 0 7c0 2 .9 3.9 2.4 5.2C3.6 13.4 5.3 14 7 14c1.7 0 3.4-.6 4.7-1.8C13.2 10.9 14 9 14 7c0-3.9-3.1-7-7-7zm0 1.8c1.3 0 2.1.8 2.1 2.1S8 6.3 7 6.3c-.8 0-2-1.1-2-2.4 0-1.4.7-2.1 2-2.1zm0 11.6c-1.7 0-3.3-.7-4.5-1.8l.8-3.2.5-.5c1-.4 2.1-.5 3.1-.5 1.1 0 2.1.2 3.1.5l.5.5.9 3.2c-1.1 1.2-2.7 1.8-4.4 1.8z">
          </path>
         </svg>
        </span>
        My account
       </label>
       <div class="my-account__overlay">
       </div>
       <ul aria-hidden="true" class="dropdown-menu dropdown-menu--light js-user-account-dropdown-menu" id="my-account-dropdown">
        <li class="dropdown-menu__item u-h js-show-comment-activity">
         [ahref]
         
        </li>
        <li class="dropdown-menu__item">
         [ahref]
         
        </li>
        <li class="dropdown-menu__item">
         [linkx]
         
        </li>
        <li class="dropdown-menu__item">
         [ahref]
         
        </li>
        <hr/>
        <li class="dropdown-menu__item">
         [ahref]
         
        </li>
        <li class="dropdown-menu__item">
         [ahref]
         
        </li>
        <li class="dropdown-menu__item">
         [ahref]
         
        </li>
        <hr/>
        <li class="dropdown-menu__item">
         [ahref]
         
        </li>
       </ul>
      </div>
      [linkx]
      
     </div>
     <div aria-label="search" class="popup popup--default popup--search js-search-popup js-search-new is-off" id="search-popup" role="dialog" tabindex="-1">
      <div class="js-search-placeholder">
      </div>
     </div>
     <div class="new-header__edition-container hide-until-desktop">
      <span class="top-bar__item__seperator">
      </span>
      <ul aria-hidden="true" class="dropdown-menu js-edition-dropdown-menu" id="edition-dropdown-menu">
       <li class="dropdown-menu__item">
        [linkx]
        
       </li>
       <li class="dropdown-menu__item">
        [linkx]
        
       </li>
       <li class="dropdown-menu__item">
        [ahref]
        
       </li>
       <li class="dropdown-menu__item">
        [ahref]
        
       </li>
      </ul>
      <label class="top-bar__item popup__toggle js-edition-picker-trigger" data-display-name="International edition" data-link-name="nav2 : topnav : edition-picker: toggle" for="edition-picker-toggle" tabindex="0">
       <span class="u-h">
        current edition:
       </span>
       International edition
      </label>
     </div>
     <ul class="pillars">
      <li class="pillars__item">
       [linkx]
       
      </li>
      <li class="pillars__item">
       [ahref]
       
      </li>
      <li class="pillars__item">
       <li>[link]</li>[keywordx][symbolx][keywordx][symbolx][bracketl1][keywordx][bracketr1][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][bracketl2][keywordx][bracketr2][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx]
      </li>
      <li class="pillars__item">
       [ahref]
       
      </li>
      <li class="pillars__item">
       [ahref]
       
      </li>
     </ul>
     <label class="js-change-link new-header__menu-toggle" data-link-name="nav2 : veggie-burger : show" for="main-menu-toggle" tabindex="0">
      <span class="veggie-burger hide-from-desktop">
       <span class="veggie-burger__icon">
       </span>
      </span>
      <span class="pillar-link pillar-link--dropdown pillar-link--sections hide-until-desktop">
       <span class="u-h">
        Show
       </span>
       More
       <i class="pillar-link--dropdown__icon">
       </i>
      </span>
     </label>
     <label aria-hidden="true" class="menu__overlay" data-link-name="nav2 : overlay" for="main-menu-toggle">
     </label>
     <div aria-hidden="true" class="menu js-main-menu" id="main-menu">
      <div class="menu__inner gs-container">
       <ul class="menu-group menu-group--primary" role="menubar">
        <li class="menu-item js-navigation-item" data-section-name="News" role="none">
         <button aria-expanded="true" aria-haspopup="true" class="menu-item__title menu-item__title--News hide-from-desktop js-navigation-toggle" data-link-name="nav2 : secondary : News" role="menuitem">
          <i class="menu-item__toggle">
          </i>
          News
         </button>
         <ul aria-label="Submenu News" class="menu-group menu-group--secondary" data-edition="int" role="menu">
          <li class="menu-item" role="none">
           [linkx]
           
          </li>
          <li class="menu-item" role="none">
           [linkx]
           
          </li>
          <li class="menu-item" role="none">
           [ahref]
           
          </li>
          <li class="menu-item" role="none">
           [ahref]
           
          </li>
          <li class="menu-item" role="none">
           [ahref]
            [link][keywordx][symbolx][keywordx][symbolx][bracketl5][keywordx][bracketr5][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][link]<li>[keywordx][symbolx][keywordx][symbolx][bracketl6][keywordx][bracketr6][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx]</li>
           
          </li>
          <li class="menu-item" role="none">
           [linkx]
           
          </li>
          <li class="menu-item" role="none">
           [ahref]
           
          </li>
          <li class="menu-item" role="none">
           [ahref]
           
          </li>
          <li class="menu-item" role="none">
           [ahref]
           
          </li>
          <li class="menu-item" role="none">
           [linkx]
           
          </li>
         </ul>
        </li>
        <li class="menu-item js-navigation-item" data-section-name="Opinion" role="none">
         <button aria-expanded="true" aria-haspopup="true" class="menu-item__title menu-item__title--Opinion hide-from-desktop js-navigation-toggle" data-link-name="nav2 : secondary : Opinion" role="menuitem">
          <i class="menu-item__toggle">
          </i>
          Opinion
         </button>
         <ul aria-label="Submenu Opinion" class="menu-group menu-group--secondary" data-edition="int" role="menu">
          <li class="menu-item" role="none">
           [ahref]
            <li>[keywordx][symbolx][keywordx][symbolx][bracketl8][keywordx][bracketr8][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx]</li>[link]<li>[keywordx][symbolx][keywordx][symbolx][bracketl9][keywordx][bracketr9][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx]</li>[link]
           
          </li>
          <li class="menu-item" role="none">
           [linkx]
           
          </li>
          <li class="menu-item" role="none">
           [linkx]
           
          </li>
          <li class="menu-item" role="none">
           [ahref]
           
          </li>
          <li class="menu-item" role="none">
           [ahref]
           
          </li>
         </ul>
        </li>
        <li class="menu-item js-navigation-item" data-section-name="Sport" role="none">
         <button aria-expanded="true" aria-haspopup="true" class="menu-item__title menu-item__title--Sport hide-from-desktop js-navigation-toggle" data-link-name="nav2 : secondary : Sport" role="menuitem">
          <i class="menu-item__toggle">
          </i>
          Sport
         </button>
         <ul aria-label="Submenu Sport" class="menu-group menu-group--secondary" data-edition="int" role="menu">
          <li class="menu-item" role="none">
           [linkx]
           
          </li>
          <li class="menu-item" role="none">
           [ahref]
           
          </li>
          <li class="menu-item" role="none">
           [ahref]
           
          </li>
          <li class="menu-item" role="none">
           [ahref]
           
          </li>
          <li class="menu-item" role="none">
           [ahref]
            [content5[linkx]content6]
           
          </li>
          <li class="menu-item" role="none">
           [ahref]
           
          </li>
          <li class="menu-item" role="none">
           [linkx]
           
          </li>
          <li class="menu-item" role="none">
           [ahref]
           
          </li>
         </ul>
        </li>
        <li class="menu-item js-navigation-item" data-section-name="Culture" role="none">
         <button aria-expanded="true" aria-haspopup="true" class="menu-item__title menu-item__title--Culture hide-from-desktop js-navigation-toggle" data-link-name="nav2 : secondary : Culture" role="menuitem">
          <i class="menu-item__toggle">
          </i>
          Culture
         </button>
         <ul aria-label="Submenu Culture" class="menu-group menu-group--secondary" data-edition="int" role="menu">
          <li class="menu-item" role="none">
           [linkx]
           
          </li>
          <li class="menu-item" role="none">
           [linkx]
           
          </li>
          <li class="menu-item" role="none">
           [ahref]
           
          </li>
          <li class="menu-item" role="none">
           [linkx]
           
          </li>
          <li class="menu-item" role="none">
           [ahref]
           
          </li>
          <li class="menu-item" role="none">
           [linkx]
           
          </li>
          <li class="menu-item" role="none">
           [ahref]
           
          </li>
          <li class="menu-item" role="none">
           [linkx]
           
          </li>
         </ul>
        </li>
        <li class="menu-item js-navigation-item" data-section-name="Lifestyle" role="none">
         <button aria-expanded="true" aria-haspopup="true" class="menu-item__title menu-item__title--Lifestyle hide-from-desktop js-navigation-toggle" data-link-name="nav2 : secondary : Lifestyle" role="menuitem">
          <i class="menu-item__toggle">
          </i>
          Lifestyle
         </button>
         <ul aria-label="Submenu Lifestyle" class="menu-group menu-group--secondary" data-edition="int" role="menu">
          <li class="menu-item" role="none">
           [ahref]
           
          </li>
          <li class="menu-item" role="none">
           [linkx]
           
          </li>
          <li class="menu-item" role="none">
           [linkx]
           
          </li>
          <li class="menu-item" role="none">
           [linkx]
           
          </li>
          <li class="menu-item" role="none">
           [linkx]
           
          </li>
          <li class="menu-item" role="none">
           [ahref]
            [keywordx][symbolx][keywordx][symbolx][bracketl3][keywordx][bracketr3][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][bracketl4][keywordx][bracketr4][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][link]
           
          </li>
          <li class="menu-item" role="none">
           [ahref]
           
          </li>
          <li class="menu-item" role="none">
           [linkx]
           
          </li>
          <li class="menu-item" role="none">
           [ahref]
           
          </li>
          <li class="menu-item" role="none">
           [ahref]
           
          </li>
          <li class="menu-item" role="none">
           [linkx]
           
          </li>
         </ul>
        </li>
       </ul>
       <div class="menu-group menu-group--search hide-from-desktop">
        <form action="/search" class="menu-search js-menu-search">
         <label class="menu-search__glass" for="google-search">
          <span class="inline-search-36 inline-icon main-menu__icon main-menu__icon--search">
           <svg class="main-menu__icon__svg main-menu__icon--search__svg inline-search-36__svg inline-icon__svg" height="18" viewbox="0 0 18 18" width="18">
            <path d="M6.5 1.6c2.7 0 4.9 2.2 4.9 4.9s-2.2 4.9-4.9 4.9-4.9-2.2-4.9-4.9 2.2-4.9 4.9-4.9m0-1.6C2.9 0 0 2.9 0 6.5S2.9 13 6.5 13 13 10.1 13 6.5 10.1 0 6.5 0zm6.6 11.5l4.9 4.9-1.6 1.6-4.9-4.9v-.8l.8-.8h.8z">
            </path>
           </svg>
          </span>
          <span class="u-h">
           What term do you want to search?
          </span>
         </label>
         <button class="menu-search__submit" data-link-name="nav2 : search : submit" for="submit-google-search" type="submit">
          <i class="right-arrow__icon">
          </i>
          <span class="u-h">
           Search with google
          </span>
         </button>
        </form>
       </div>
       <ul class="menu-group menu-group--membership" role="menubar">
        <li class="menu-item hide-from-desktop" data-edition="int" role="none">
         [ahref]
         
        </li>
        <li class="menu-item hide-from-desktop" data-edition="int" role="none">
         [linkx]
         
        </li>
       </ul>
       <ul class="menu-group menu-group--editions hide-from-desktop">
        <li class="menu-item js-navigation-item">
         <button aria-expanded="true" aria-haspopup="true" class="menu-item__title js-navigation-toggle" data-link-name="nav2 : edition picker">
          <i class="menu-item__toggle">
          </i>
          International edition
         </button>
         <ul class="menu-group">
          <li class="menu-item">
           [linkx]
           
          </li>
          <li class="menu-item">
           [ahref]
           
          </li>
          <li class="menu-item">
           [linkx]
           
          </li>
         </ul>
        </li>
       </ul>
       <ul class="menu-group menu-group--footer" data-edition="int" role="menubar">
        <li class="menu-item hide-from-desktop" role="none">
         [ahref]
         
        </li>
        <li class="menu-item hide-from-desktop" role="none">
         [linkx]
         
        </li>
        <li class="menu-item hide-from-desktop" role="none">
         [linkx]
         
        </li>
        <li class="menu-item hide-from-desktop" role="none">
         [linkx]
         
        </li>
        <li class="menu-item hide-from-desktop" role="none">
         [ahref]
         
        </li>
        <li class="hide-from-desktop menu-item" role="none">
         [ahref]
         
        </li>
        <li class="menu-item menu-item--no-border" role="none">
         [ahref]
         
        </li>
        <li class="menu-item" role="none">
         [ahref]
         
        </li>
        <li class="menu-item" role="none">
         [ahref]
         
        </li>
        <li class="menu-item" role="none">
         [linkx]
         
        </li>
        <li class="menu-item" role="none">
         [linkx]
         
        </li>
        <li class="menu-item" role="none">
         [ahref]
         
        </li>
        <li class="menu-item" role="none">
         [linkx]
         
        </li>
        <li class="menu-item" role="none">
         [linkx]
         
        </li>
        <li class="menu-item" role="none">
         [ahref]
         
        </li>
        <li class="menu-item hide-from-desktop" role="none">
         [linkx]
         
        </li>
        <li class="menu-item hide-from-desktop" role="none">
         [linkx]
         
        </li>
       </ul>
       <ul class="menu-group menu-group--brand-extensions hide-until-desktop">
        <li class="menu-item--brand-extension">
         [ahref]
         
        </li>
        <li class="menu-item--brand-extension">
         [ahref]
         
        </li>
        <li class="menu-item--brand-extension">
         [ahref]
         
        </li>
        <li class="menu-item--brand-extension">
         [ahref]
         
        </li>
        <li class="menu-item--brand-extension">
         [ahref]
         
        </li>
       </ul>
      </div>
     </div>
    </nav>
    <div class="js-expand-subnav subnav subnav--article">
     <div class="gs-container">
      <ul class="subnav__list js-get-last-child-subnav" data-pillar-title="News">
       <li class="subnav__item subnav__item--parent">
        [linkx]
        
       </li>
       <li class="subnav__item subnav__item--current-section">
        [linkx]
        
       </li>
       <li class="subnav__item">
        [ahref]
        
       </li>
       <li class="subnav__item">
        [ahref]
        
       </li>
       <li class="subnav__item">
        [linkx]
        
       </li>
      </ul>
      <div class="subnav__item subnav__item--toggle-more hide-from-desktop js-show-more-button js-visible">
       <button class="subnav-link subnav-link--toggle-more js-toggle-more-sections" data-link-name="nav2 : subnav-toggle">
        More
       </button>
      </div>
     </div>
    </div>
    <div class="new-header__multiline">
     <div class="gs-container">
      [content6[linkx]content7[linkx]content8[linkx]content9]
     </div>
    </div>
   </header>
  </div>
  <div id="maincontent" tabindex="0">
  </div>
  <div class="js-breaking-news-placeholder breaking-news breaking-news--hidden breaking-news--fade-in" data-component="breaking-news" data-link-name="breaking news">
  </div>
  <div class="l-side-margins">
   <article class="content content--article content--pillar-news content--type-article section-environment tonal tonal--tone-news" data-test-id="article-root" id="article" itemscope="" itemtype="http://schema.org/NewsArticle" role="main">
    <meta content="https://www.theguardian.com/environment/2015/jun/02/everything-you-need-to-know-about-the-paris-climate-summit-and-un-talks" itemprop="mainEntityOfPage"/>
    <div itemprop="publisher" itemscope="" itemtype="https://schema.org/Organization">
     <meta content="[mkey1][symbolx][pkey1][symbolx][keyword1][bracketl1][bracketr1][symbolx][bracketl2][siter1][bracketr2][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx]" itemprop="name"/>
     <div itemprop="logo" itemscope="" itemtype="https://schema.org/ImageObject">
      <meta content="[mkey1][symbolx][pkey1][symbolx][keyword1][bracketl1][bracketr1][symbolx][bracketl2][siter1][bracketr2][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx]" itemprop="url"/>
      <meta content="190" itemprop="width"/>
      <meta content="60" itemprop="height"/>
     </div>
    </div>
    <div class="content__main tonal__main tonal__main--tone-news">
     <div class="gs-container">
      <div class="content__main-column content__main-column--article js-content-main-column ">
       <header class="content__head content__head--article tonal__head tonal__head--tone-news">
        <div class="matchreport">
         <div class="js-score">
         </div>
         <div class="js-sport-tabs football-tabs">
         </div>
        </div>
        <div class="content__labels content__labels--not-immersive ">
         <div class="content__section-label content__label">
          [ahref]
          
         </div>
        </div>
        <div class="content__headline-standfirst-wrapper">
         <div class="content__header tonal__header">
          <div class="u-cf">
           <h1 class="content__headline " itemprop="headline">
            [mkey1][symbolx][pkey1][symbolx][keyword1][bracketl1][bracketr1][symbolx][bracketl2][siter1][bracketr2][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx]
           </h1>
          </div>
         </div>
         <div class="tonal__standfirst u-cf">
          <div class="content__standfirst" data-component="standfirst" data-link-name="standfirst">
           <meta content="As UN climate negotiations resume in Bonn, we look at why the crunch Paris climate conference from 30 November to 11 December is so important" itemprop="description">
            <h3>
             [mkey1][symbolx][pkey1][symbolx][keyword1][bracketl1][bracketr1][symbolx][bracketl2][siter1][bracketr2][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx]
            </h3>
            <p>
             As UN climate negotiations resume in Bonn, we look at why the crunch Paris climate conference from 30 November to 11 December is so important
            </p>
           </meta>
          </div>
         </div>
        </div>
        <div class="content__meta-container js-content-meta u-cf ">
         <div class="meta__contact-wrap">
          <p class="byline" data-component="meta-byline" data-link-name="byline">
           <span itemprop="author" itemscope="" itemtype="http://schema.org/Person">
            [linkx]
            
           </span>
          </p>
          <p aria-hidden="true" class="content__dateline">
           <time class="content__dateline-wpd js-wpd" data-timestamp="1448015887000" datetime="2015-11-20T10:38:07+0000" itemprop="datePublished">
            Fri 20 Nov 2015
            <span class="content__dateline-time">
             10.38 GMT
            </span>
           </time>
           <time class="content__dateline-lm js-lm u-h" data-timestamp="1433247377000" datetime="2015-06-02T13:16:17+0100">
            First published on Tue 2 Jun 2015
            <span class="content__dateline-time">
             13.16 BST
            </span>
           </time>
          </p>
          <meta content="2018-02-14T17:30:02+0000" itemprop="dateModified"/>
         </div>
         <div class="meta__extras">
          <div class="meta__social" data-component="share">
           <ul class="social social--top js-social--top u-unstyled u-cf" data-component="social">
            <li class="social__item social__item--facebook " data-link-name="facebook">
             [linkx]
             
            </li>
            <li class="social__item social__item--twitter " data-link-name="twitter">
             [ahref]
             
            </li>
            <li class="social__item social__item--email " data-link-name="email">
             [ahref]
             
            </li>
           </ul>
          </div>
          <div class="meta__numbers">
           <div class="u-h meta__number js-sharecount">
           </div>
           <div class="u-h meta__number" data-commentcount-format="content" data-discussion-closed="false" data-discussion-id="/p/49b3b">
           </div>
          </div>
         </div>
        </div>
        <figure class="media-primary media-content () " data-component="image" data-media-id="848080edacf9333d1f0b21464ae6132fa42a1698" id="img-1" itemprop="associatedMedia image" itemscope="" itemtype="http://schema.org/ImageObject">
         <meta content="true" itemprop="representativeOfPage"/>
         <meta content="[mkey1][symbolx][pkey1][symbolx][keyword1][bracketl1][bracketr1][symbolx][bracketl2][siter1][bracketr2][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx]" itemprop="url"/>
         <meta content="2060" itemprop="width"/>
         <meta content="1236" itemprop="height"/>
         [linkx]
         
         <label class="mobile-only reveal-caption reveal-caption--img" for="show-caption">
          <span class="inline-information inline-icon reveal-caption-icon centered-icon">
           <svg class="reveal-caption-icon__svg centered-icon__svg inline-information__svg inline-icon__svg" height="14" viewbox="0 0 6 14" width="6">
            <path d="M4.6 12l-.4 1.4c-.7.2-1.9.6-3 .6-.7 0-1.2-.2-1.2-.9 0-.2 0-.3.1-.5l2-6.7H.7l.4-1.5 4.2-.6h.2L3 12h1.6zm-.3-9.2c-.9 0-1.4-.5-1.4-1.3C2.9.5 3.7 0 4.6 0 5.4 0 6 .5 6 1.3c0 1-.8 1.5-1.7 1.5z">
            </path>
           </svg>
          </span>
         </label>
         <figcaption class="caption caption--main caption--img" itemprop="description">
          <span class="inline-triangle inline-icon hide-until-tablet">
           <svg class="hide-until-tablet__svg inline-triangle__svg inline-icon__svg" height="10" viewbox="0 0 11 10" width="11">
            <path d="M5.5 0L11 10H0z" fill-rule="evenodd">
            </path>
           </svg>
          </span>
          French foreign minister Laurent Fabius talks to delegates during the United Nations Framework Convention on Climate Change in Bonn, Germany.
Photograph: Martin Meissner/AP
         </figcaption>
        </figure>
       </header>
       <div class="content__article-body from-content-api js-article__body" data-test-id="article-review-body" itemprop="articleBody">
        <h2>
         [mkey1][symbolx][pkey1][symbolx][keyword1][bracketl1][bracketr1][symbolx][bracketl2][siter1][bracketr2][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx]
        </h2>
        <p>
         The governments of more than 190 nations
         [linkx]
         
         , aimed at reducing global greenhouse gas emissions and thus avoiding the threat of dangerous climate change.
        </p>
        <h2>
         <b>[mkey1][symbolx][pkey1][symbolx][keyword1][bracketl1][bracketr1][symbolx][bracketl2][siter1][bracketr2][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx]</b>
        </h2>
        <p>
         Current commitments on greenhouse gas emissions run out in 2020, so at Paris governments are expected to produce an agreement on what happens for the decade after that at least, and potentially beyond.
        </p>
        <figure class="element element-image img--landscape element--supporting " data-component="image" data-media-id="440b5ed0ef13e50c002e399fe0c51cc86005cbf8" itemprop="associatedMedia image" itemscope="" itemtype="http://schema.org/ImageObject">
         <meta content="[mkey1][symbolx][pkey1][symbolx][keyword1][bracketl1][bracketr1][symbolx][bracketl2][siter1][bracketr2][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx]" itemprop="url"/>
         <meta content="460" itemprop="width"/>
         <meta content="432" itemprop="height"/>
         <div class="u-responsive-ratio" style="padding-bottom: 93.91%">
          <picture>
           <source media="(min-width: 1300px) and (-webkit-min-device-pixel-ratio: 1.25), (min-width: 1300px) and (min-resolution: 120dpi)" sizes="380px" srcset="https://i.guim.co.uk/img/static/sys-images/Guardian/Pix/pictures/2015/6/1/1433162683486/af0f637c-84fb-452e-b6c4-ae16bd46d1aa-bestSizeAvailable.png?width=380&amp;quality=45&amp;auto=format&amp;fit=max&amp;dpr=2&amp;s=244c866bbaab9b9d1b5ca03155a58ae4 760w"/>
           <source media="(min-width: 1300px)" sizes="380px" srcset="https://i.guim.co.uk/img/static/sys-images/Guardian/Pix/pictures/2015/6/1/1433162683486/af0f637c-84fb-452e-b6c4-ae16bd46d1aa-bestSizeAvailable.png?width=380&amp;quality=85&amp;auto=format&amp;fit=max&amp;s=e5231ff027748b4087feb2d68946b0bf 380w"/>
           <source media="(min-width: 980px) and (-webkit-min-device-pixel-ratio: 1.25), (min-width: 980px) and (min-resolution: 120dpi)" sizes="300px" srcset="https://i.guim.co.uk/img/static/sys-images/Guardian/Pix/pictures/2015/6/1/1433162683486/af0f637c-84fb-452e-b6c4-ae16bd46d1aa-bestSizeAvailable.png?width=300&amp;quality=45&amp;auto=format&amp;fit=max&amp;dpr=2&amp;s=3a4258221e53c0b024372e9b818f0316 600w"/>
           <source media="(min-width: 980px)" sizes="300px" srcset="https://i.guim.co.uk/img/static/sys-images/Guardian/Pix/pictures/2015/6/1/1433162683486/af0f637c-84fb-452e-b6c4-ae16bd46d1aa-bestSizeAvailable.png?width=300&amp;quality=85&amp;auto=format&amp;fit=max&amp;s=8822798ea935387ddc7f4afeb7caa95a 300w"/>
           <source media="(min-width: 660px) and (-webkit-min-device-pixel-ratio: 1.25), (min-width: 660px) and (min-resolution: 120dpi)" sizes="620px" srcset="https://i.guim.co.uk/img/static/sys-images/Guardian/Pix/pictures/2015/6/1/1433162683486/af0f637c-84fb-452e-b6c4-ae16bd46d1aa-bestSizeAvailable.png?width=620&amp;quality=45&amp;auto=format&amp;fit=max&amp;dpr=2&amp;s=63a13c49f73ba010c90240603d8491af 1240w"/>
           <source media="(min-width: 660px)" sizes="620px" srcset="https://i.guim.co.uk/img/static/sys-images/Guardian/Pix/pictures/2015/6/1/1433162683486/af0f637c-84fb-452e-b6c4-ae16bd46d1aa-bestSizeAvailable.png?width=620&amp;quality=85&amp;auto=format&amp;fit=max&amp;s=305514ce180da35d4421d3f1c0e09d57 620w"/>
           <source media="(min-width: 480px) and (-webkit-min-device-pixel-ratio: 1.25), (min-width: 480px) and (min-resolution: 120dpi)" sizes="605px" srcset="https://i.guim.co.uk/img/static/sys-images/Guardian/Pix/pictures/2015/6/1/1433162683486/af0f637c-84fb-452e-b6c4-ae16bd46d1aa-bestSizeAvailable.png?width=605&amp;quality=45&amp;auto=format&amp;fit=max&amp;dpr=2&amp;s=b8fef75a151a852c39b8e7ec93b51bd0 1210w"/>
           <source media="(min-width: 480px)" sizes="605px" srcset="https://i.guim.co.uk/img/static/sys-images/Guardian/Pix/pictures/2015/6/1/1433162683486/af0f637c-84fb-452e-b6c4-ae16bd46d1aa-bestSizeAvailable.png?width=605&amp;quality=85&amp;auto=format&amp;fit=max&amp;s=5263ef7749c629983a9d004023260cc3 605w"/>
           <source media="(min-width: 0px) and (-webkit-min-device-pixel-ratio: 1.25), (min-width: 0px) and (min-resolution: 120dpi)" sizes="445px" srcset="https://i.guim.co.uk/img/static/sys-images/Guardian/Pix/pictures/2015/6/1/1433162683486/af0f637c-84fb-452e-b6c4-ae16bd46d1aa-bestSizeAvailable.png?width=445&amp;quality=45&amp;auto=format&amp;fit=max&amp;dpr=2&amp;s=2079996a35edc97c80a15b1cdad06666 890w"/>
           <source media="(min-width: 0px)" sizes="445px" srcset="https://i.guim.co.uk/img/static/sys-images/Guardian/Pix/pictures/2015/6/1/1433162683486/af0f637c-84fb-452e-b6c4-ae16bd46d1aa-bestSizeAvailable.png?width=445&amp;quality=85&amp;auto=format&amp;fit=max&amp;s=ca30835c5e7c77a35dac89cea6b4e57b 445w"/>
          </picture>
         </div>
         <figcaption class="caption caption--img caption caption--img" itemprop="description">
          <span class="inline-triangle inline-icon ">
           <svg class="inline-triangle__svg inline-icon__svg" height="10" viewbox="0 0 11 10" width="11">
            <path d="M5.5 0L11 10H0z" fill-rule="evenodd">
            </path>
           </svg>
          </span>
          Emissions trajectory Photograph: Guardian
         </figcaption>
        </figure>
        <h2>
         [mkey1][symbolx][pkey1][symbolx][keyword1][bracketl1][bracketr1][symbolx][bracketl2][siter1][bracketr2][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx]
        </h2>
        <p>
         Scientists have warned that if greenhouse gas emissions continue to rise, we will pass the threshold beyond which global warming becomes catastrophic and irreversible. That threshold is estimated as a temperature rise of 2C above pre-industrial levels, and on current emissions trajectories
         [ahref]
         
         . That may not sound like much, but the temperature difference between today’s world and the last ice age was about 5C, so seemingly small changes in temperature can mean big differences for the Earth.
        </p>
        <h2>
         <b>[mkey1][symbolx][pkey1][symbolx][keyword1][bracketl1][bracketr1][symbolx][bracketl2][siter1][bracketr2][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx]</b>
        </h2>
        <p>
         They have: global negotiations on climate change have been carrying on for more than 20 years. The history of climate change goes back much further: in the 19th century, physicists theorised about the role of greenhouse gases, chiefly carbon dioxide, in the atmosphere, and several suggested that the warming effect would increase alongside the levels of these gases in the atmosphere. But this was all theoretical.
        </p>
        <p>
         Only in the past few decades have scientists begun the measurements necessary to establish a relationship between current carbon levels and temperatures, and the science conducted since then
         [ahref]
         
         : that rising greenhouse gas emissions, arising from our use of fossil fuels and our industries, lead to higher temperatures.
        </p>
        <aside class="element element-rich-link element--supporting element-rich-link--not-upgraded" data-component="rich-link" data-link-name="rich-link-2 | 1">
         <div class="rich-link">
          <div class="rich-link__container">
           <div class="rich-link__header">
            <h2 class="rich-link__title">
             [mkey1][symbolx][pkey1][symbolx][keyword1][bracketl1][bracketr1][symbolx][bracketl2][siter1][bracketr2][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx]
            </h2>
           </div>
           <div class="rich-link__read-more">
            <div class="rich-link__arrow">
             <span class="inline-arrow-in-circle inline-icon ">
              <svg class="inline-arrow-in-circle__svg inline-icon__svg" height="24" viewbox="0 0 24 24" width="24">
               [content16][content17][content18][linkx]
              </svg>
             </span>
            </div>
            <div class="rich-link__read-more-text">
             Read more
            </div>
           </div>
           [ahref]
           
          </div>
         </div>
        </aside>
        <h2>
         <b>[mkey1][symbolx][pkey1][symbolx][keyword1][bracketl1][bracketr1][symbolx][bracketl2][siter1][bracketr2][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx]</b>
        </h2>
        <p>
         No. Global temperatures have been on a clear upward path. There was a spike in 1998, after which temperatures were lower –
         [linkx]
         
         – that led some climate sceptics to claim that the world was cooling.
        </p>
        <p>
         During the period since 1998, global temperatures have risen at a slower pace than they did in the previous 30 years. That, too, has been seized upon by sceptics
         [ahref]
         
         .
        </p>
        <p>
         But it is important to note that temperatures have not fallen, or stalled – they have continued to rise. Given the variations that characterise our weather systems, a period in which the rate of warming slowed is not unexpected.
        </p>
        <p>
         For the past two years,
         [linkx]
         
         , but little can be construed from that.
        </p>
        <h2>
         <b>[mkey1][symbolx][pkey1][symbolx][keyword1][bracketl1][bracketr1][symbolx][bracketl2][siter1][bracketr2][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx]</b>
        </h2>
        <p>
         In 1992, governments met in Rio de Janeiro and
         [ahref]
         
         . That agreement, still in force, bound governments to take action to avoid dangerous climate change, but did not specify what actions. Over the following five years, governments wrangled over what each should do, and what should be the role of developed countries versus poorer nations.
        </p>
        <p>
         Those years of argument produced, in 1997,
         [linkx]
         
         . That pact required worldwide cuts in emissions of about 5%, compared with 1990 levels, by 2012, and each developed country was allotted a target on emissions reductions. But developing countries, including China, South Korea, Mexico and other rapidly emerging economies, were given no targets and allowed to increase their emissions at will.
        </p>
        <figure class="element element-image img--landscape fig--narrow-caption fig--has-shares " data-component="image" data-media-id="6ed38e7163c649844a6809fea681d9aea8b00b2e" id="img-2" itemprop="associatedMedia image" itemscope="" itemtype="http://schema.org/ImageObject">
         <meta content="[mkey1][symbolx][pkey1][symbolx][keyword1][bracketl1][bracketr1][symbolx][bracketl2][siter1][bracketr2][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx]" itemprop="url"/>
         <meta content="2060" itemprop="width"/>
         <meta content="1236" itemprop="height"/>
         [linkx]
         
         <div class="block-share block-share--article hide-on-mobile " data-link-name="block share">
          [ahref]
          
          [linkx]
          
          [linkx]
          
         </div>
         <figcaption class="caption caption--img caption caption--img" itemprop="description">
          <span class="inline-triangle inline-icon ">
           <svg class="inline-triangle__svg inline-icon__svg" height="10" viewbox="0 0 11 10" width="11">
            <path d="M5.5 0L11 10H0z" fill-rule="evenodd">
            </path>
           </svg>
          </span>
          People sign the Earth pledge made at the the UN Conference on Environment and Development (UNCED) in June 1992. Photograph: UN Photo
         </figcaption>
        </figure>
        <p>
         Al Gore, then US vice-president, signed up to the protocol, but it was quickly apparent that it would never be ratified by the US Congress. Legally, the protocol could not come into force until countries representing 55% of global emissions had ratified it. With the US – then the world’s biggest emitter – on the outside, that was not going to happen.
         <br/>
        </p>
        <p>
         So for most of the following decade, the Kyoto protocol remained in abeyance and global climate change negotiations ground to a near-halt. But in late 2004,
         [linkx]
         
         – unexpectedly, and as part of a move to have its application for World Trade Organisation membership accepted by the European Union. That made up the weight needed, and the protocol finally came into force.
        </p>
        <h2>
         <b>[mkey1][symbolx][pkey1][symbolx][keyword1][bracketl1][bracketr1][symbolx][bracketl2][siter1][bracketr2][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx]</b>
        </h2>
        <p>
         Not quite. The US, under George W Bush, remained firmly outside Kyoto, so although the UN negotiations carried on year after year, the US negotiators were often in different rooms from the rest of the world. It was clear a new approach was needed that could bring the US in, and encourage the major developing economies – especially China, now the world’s biggest emitter – to take on limits to their emissions.
        </p>
        <p>
         What followed was,
         [linkx]
         
         an action plan that set the world on the course to a new agreement that would take over from Kyoto.
        </p>
        <h2>
         <b>[mkey1][symbolx][pkey1][symbolx][keyword1][bracketl1][bracketr1][symbolx][bracketl2][siter1][bracketr2][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx]</b>
        </h2>
        <p>
         It did take a long time. But getting agreement from 196 countries was never going to be easy. The next act of this long-running drama fully demonstrated that: the
         [ahref]
         
         .
        </p>
        <figure class="element element-image img--landscape fig--narrow-caption fig--has-shares " data-component="image" data-media-id="6286d03e2ce2fed38afcc969b244682be3c9278b" id="img-3" itemprop="associatedMedia image" itemscope="" itemtype="http://schema.org/ImageObject">
         <meta content="[mkey1][symbolx][pkey1][symbolx][keyword1][bracketl1][bracketr1][symbolx][bracketl2][siter1][bracketr2][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx]" itemprop="url"/>
         <meta content="2060" itemprop="width"/>
         <meta content="1305" itemprop="height"/>
         [ahref]
         
         <div class="block-share block-share--article hide-on-mobile " data-link-name="block share">
          [linkx]
          
          [linkx]
          
          [ahref]
          
         </div>
         <figcaption class="caption caption--img caption caption--img" itemprop="description">
          <span class="inline-triangle inline-icon ">
           <svg class="inline-triangle__svg inline-icon__svg" height="10" viewbox="0 0 11 10" width="11">
            <path d="M5.5 0L11 10H0z" fill-rule="evenodd">
            </path>
           </svg>
          </span>
          US president Barack Obama along with European leaders including German chancellor Angela Merkel, centre, attend negotiations on the final night of the Copenhagen UN Climate Change summit in Denmark on 18 December 2009. Photograph: Pool/Getty Images
         </figcaption>
        </figure>
        <h2>
         <b>[mkey1][symbolx][pkey1][symbolx][keyword1][bracketl1][bracketr1][symbolx][bracketl2][siter1][bracketr2][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx]</b>
        </h2>
        <p>
         Everything but the treaty. All of the world’s developed countries and the biggest developing countries agreed – for the first time – to limits on their greenhouse gas emissions. This was a landmark, as it meant the world’s biggest emitters were united towards a single goal.
        </p>
        <p>
         The emissions reductions agreed on were still not enough to meet scientific advice, but they were a big advance on reducing emissions compared with “business as usual”.
        </p>
        <p>
         But what didn’t happen turned out to be the point that NGOs and many in the press seized on.
         [linkx]
         
         .
        </p>
        <h2>
         <b>[mkey1][symbolx][pkey1][symbolx][keyword1][bracketl1][bracketr1][symbolx][bracketl2][siter1][bracketr2][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx]</b>
        </h2>
        <p>
         [content12][content13][linkx][content14][content15][content16]
        </p>
        <p>
         The Copenhagen agreement, on the other hand, was not fully adopted by the UN in 2009 because of last-minute chaos at the conference, though it was ratified the following year
         [linkx]
         
         . For this reason, the Copenhagen agreement was derided as a failure by green groups.
        </p>
        <p>
         But the targets agreed at Copenhagen, in the form of a document signed by world leaders, still stand.
        </p>
        <figure class="element element-image img--landscape element--supporting " data-component="image" data-media-id="d1d3d5125920baeb2094ff7bcafb900ee9e78d22" itemprop="associatedMedia image" itemscope="" itemtype="http://schema.org/ImageObject">
         <meta content="[mkey1][symbolx][pkey1][symbolx][keyword1][bracketl1][bracketr1][symbolx][bracketl2][siter1][bracketr2][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx]" itemprop="url"/>
         <meta content="620" itemprop="width"/>
         <meta content="372" itemprop="height"/>
         <div class="u-responsive-ratio" style="padding-bottom: 60.00%">
          <picture>
           <source media="(min-width: 1300px) and (-webkit-min-device-pixel-ratio: 1.25), (min-width: 1300px) and (min-resolution: 120dpi)" sizes="380px" srcset="https://i.guim.co.uk/img/static/sys-images/Guardian/Pix/pictures/2015/6/2/1433246902134/0e24f414-a275-4a88-a0d8-4f071bfb8e36-620x372.jpeg?width=380&amp;quality=45&amp;auto=format&amp;fit=max&amp;dpr=2&amp;s=dc12e43ba618a2d0f22872320146cac1 760w"/>
           <source media="(min-width: 1300px)" sizes="380px" srcset="https://i.guim.co.uk/img/static/sys-images/Guardian/Pix/pictures/2015/6/2/1433246902134/0e24f414-a275-4a88-a0d8-4f071bfb8e36-620x372.jpeg?width=380&amp;quality=85&amp;auto=format&amp;fit=max&amp;s=d10c579c233ab1feb29ad5b600441c5d 380w"/>
           <source media="(min-width: 980px) and (-webkit-min-device-pixel-ratio: 1.25), (min-width: 980px) and (min-resolution: 120dpi)" sizes="300px" srcset="https://i.guim.co.uk/img/static/sys-images/Guardian/Pix/pictures/2015/6/2/1433246902134/0e24f414-a275-4a88-a0d8-4f071bfb8e36-620x372.jpeg?width=300&amp;quality=45&amp;auto=format&amp;fit=max&amp;dpr=2&amp;s=28ed5db96bfbd00be59a307a74041c00 600w"/>
           <source media="(min-width: 980px)" sizes="300px" srcset="https://i.guim.co.uk/img/static/sys-images/Guardian/Pix/pictures/2015/6/2/1433246902134/0e24f414-a275-4a88-a0d8-4f071bfb8e36-620x372.jpeg?width=300&amp;quality=85&amp;auto=format&amp;fit=max&amp;s=c8457842591c3d03c9b40d4dee3fe177 300w"/>
           <source media="(min-width: 660px) and (-webkit-min-device-pixel-ratio: 1.25), (min-width: 660px) and (min-resolution: 120dpi)" sizes="620px" srcset="https://i.guim.co.uk/img/static/sys-images/Guardian/Pix/pictures/2015/6/2/1433246902134/0e24f414-a275-4a88-a0d8-4f071bfb8e36-620x372.jpeg?width=620&amp;quality=45&amp;auto=format&amp;fit=max&amp;dpr=2&amp;s=617e1a07908b968273ca49840d4339e4 1240w"/>
           <source media="(min-width: 660px)" sizes="620px" srcset="https://i.guim.co.uk/img/static/sys-images/Guardian/Pix/pictures/2015/6/2/1433246902134/0e24f414-a275-4a88-a0d8-4f071bfb8e36-620x372.jpeg?width=620&amp;quality=85&amp;auto=format&amp;fit=max&amp;s=b9b8a5981d09ea38c913c20714f84a57 620w"/>
           <source media="(min-width: 480px) and (-webkit-min-device-pixel-ratio: 1.25), (min-width: 480px) and (min-resolution: 120dpi)" sizes="605px" srcset="https://i.guim.co.uk/img/static/sys-images/Guardian/Pix/pictures/2015/6/2/1433246902134/0e24f414-a275-4a88-a0d8-4f071bfb8e36-620x372.jpeg?width=605&amp;quality=45&amp;auto=format&amp;fit=max&amp;dpr=2&amp;s=c5f0c50510f4ce8a04f086b3021804a2 1210w"/>
           <source media="(min-width: 480px)" sizes="605px" srcset="https://i.guim.co.uk/img/static/sys-images/Guardian/Pix/pictures/2015/6/2/1433246902134/0e24f414-a275-4a88-a0d8-4f071bfb8e36-620x372.jpeg?width=605&amp;quality=85&amp;auto=format&amp;fit=max&amp;s=ebf3ef2b2ebac329e34d6abff592ecc1 605w"/>
           <source media="(min-width: 0px) and (-webkit-min-device-pixel-ratio: 1.25), (min-width: 0px) and (min-resolution: 120dpi)" sizes="445px" srcset="https://i.guim.co.uk/img/static/sys-images/Guardian/Pix/pictures/2015/6/2/1433246902134/0e24f414-a275-4a88-a0d8-4f071bfb8e36-620x372.jpeg?width=445&amp;quality=45&amp;auto=format&amp;fit=max&amp;dpr=2&amp;s=1628b27696bacaed7635a4e70593a709 890w"/>
           <source media="(min-width: 0px)" sizes="445px" srcset="https://i.guim.co.uk/img/static/sys-images/Guardian/Pix/pictures/2015/6/2/1433246902134/0e24f414-a275-4a88-a0d8-4f071bfb8e36-620x372.jpeg?width=445&amp;quality=85&amp;auto=format&amp;fit=max&amp;s=d81753818aa5fa8cd303ff5f38e20f61 445w"/>
          </picture>
         </div>
         <figcaption class="caption caption--img caption caption--img" itemprop="description">
          <span class="inline-triangle inline-icon ">
           <svg class="inline-triangle__svg inline-icon__svg" height="10" viewbox="0 0 11 10" width="11">
            <path d="M5.5 0L11 10H0z" fill-rule="evenodd">
            </path>
           </svg>
          </span>
          Representatives of governments from more than 190 nations will try to reach an agreement on carbon emissions at the COP 21 Paris climate talks in December. Photograph: COP21
         </figcaption>
        </figure>
        <h2>
         <b>[mkey1][symbolx][pkey1][symbolx][keyword1][bracketl1][bracketr1][symbolx][bracketl2][siter1][bracketr2][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx]</b>
        </h2>
        <p>
         We know already what the biggest emitters have committed to. The
         [ahref]
         
         , compared with 1990 levels, by 2030. The
         [ahref]
         
         , compared with 2005 levels, by 2025.
         [ahref]
         
         .
        </p>
        <p>
         Nations responsible for more than 90% of global emissions have now come up with their targets –
         [ahref]
         
         . These include all of the major developed and developing countries, though their contributions vary: in the case of developed countries, actual cuts in emissions, but for developing countries a range of targets including limits on emissions compared to “business as usual”, and pledges to increase low-carbon energy or preserve forests.
        </p>
        <p>
         Analysis of the INDCS, endorsed by the UN, has suggested that
         [linkx]
         
         . That is not quite enough to meet the scientific advice. However, that is not the end of the story. One of the key components of any Paris agreement would be to institute a system of review of the emissions targets every five years, with a view to ratcheting them upwards.
        </p>
        <p>
         Another, and complementary, approach is to make more effort to bring down emissions outside the UN process, for instance by engaging “non-state actors” such as cities, local governments and businesses to do more.
        </p>
        <h2>
         [mkey1][symbolx][pkey1][symbolx][keyword1][bracketl1][bracketr1][symbolx][bracketl2][siter1][bracketr2][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx]
        </h2>
        <p>
         Not at all – the other key question, apart from emissions reductions, is finance. Poorer countries want the rich world to provide them with financial help that will enable them to invest in clean technology to cut their greenhouse gas emissions, and to adapt their infrastructure to the likely damage from climate change.
        </p>
        <p>
         This is a hugely contentious issue. At Copenhagen, where the finance part of the deal was only sorted out at the very last minute,
         [ahref]
         
         , and they said that by 2020, financial flows of at least $100bn a year would be provided.
        </p>
        <p>
         As a cornerstone of any Paris agreement, poor countries want assurances that this pledge will be met. That has now been given, in several forms:
         [ahref]
         
         showing that two thirds of the finance required is already being supplied; and
         [linkx]
         
         showed that the remainder can be made up by increased finance from the World Bank and other development banks, and from the private sector. The World Bank and several governments have already committed to upping their financial assistance, meaning that a clear path towards the 2020 target can now be discerned.
        </p>
        <p>
         There is more, however. Poor nations also want a similar provision in place beyond 2020, but there is strong disagreement over how this should be done. Some want all the money to come from rich country governments, but those governments are adamant that they will not provide such funding solely from the public purse. They want international development banks, such as the World Bank, to play a role, and they want most of the funding to come from the private sector.
        </p>
        <p>
         An agreement on this is still possible, but it will be one of the main obstacles to a Paris deal.
        </p>
        <aside class="element element-rich-link element--thumbnail element-rich-link--not-upgraded" data-component="rich-link" data-link-name="rich-link-2 | 2">
         <div class="rich-link">
          <div class="rich-link__container">
           <div class="rich-link__header">
            <h2 class="rich-link__title">
             [mkey1][symbolx][pkey1][symbolx][keyword1][bracketl1][bracketr1][symbolx][bracketl2][siter1][bracketr2][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx]
            </h2>
           </div>
           <div class="rich-link__read-more">
            <div class="rich-link__arrow">
             <span class="inline-arrow-in-circle inline-icon ">
              <svg class="inline-arrow-in-circle__svg inline-icon__svg" height="24" viewbox="0 0 24 24" width="24">
               <path class="rich-link__arrow-icon" d="M12 0C5.373 0 0 5.373 0 12s5.373 12 12 12 12-5.373 12-12S18.627 0 12 0m.21 19l-.637-.668 4.888-6.326H4.996v-1.01h11.465l-4.888-6.333.637-.668L19 11.153v.685l-6.79 7.157" fill-rule="evenodd">
               </path>
              </svg>
             </span>
            </div>
            <div class="rich-link__read-more-text">
             Read more
            </div>
           </div>
           [ahref]
           
          </div>
         </div>
        </aside>
        <h2>
         [mkey1][symbolx][pkey1][symbolx][keyword1][bracketl1][bracketr1][symbolx][bracketl2][siter1][bracketr2][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx]
        </h2>
        <p>
         Yes. The heads of state or government of more than 130 countries have already said they will come. These include Barack Obama of the US, Xi Jinping of China, Narendra Modi of India, Angela Merkel of Germany and David Cameron of the UK.  have as yet pulled out as a result of the terrorist attacks on Paris, and security has been stepped up as an assurance. Unlike the Copenhagen talks, however, at which world leaders turned up at the last minute of the two weeks of talks to find their negotiating teams in chaos and without a clear agreement for them to sign, this time the leaders will arrive at the beginning of the conference, give their negotiating teams clear instructions, and expect a fully formed agreement at the end of it.
        </p>
        <p>
         On behalf of the French government, the conference will be led by foreign minister Laurent Fabius, and environment minister Segolene Royal, but the French president Francois Hollande will also play a key role. They are all confident that a deal can be made.
        </p>
        <figure class="element element-image img--landscape element--supporting fig--narrow-caption fig--has-shares " data-component="image" data-media-id="6b12823df59f1a56e8ade1ca3d4a2a53b7650c30" id="img-4" itemprop="associatedMedia image" itemscope="" itemtype="http://schema.org/ImageObject">
         <meta content="[mkey1][symbolx][pkey1][symbolx][keyword1][bracketl1][bracketr1][symbolx][bracketl2][siter1][bracketr2][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx]" itemprop="url"/>
         <meta content="2060" itemprop="width"/>
         <meta content="1236" itemprop="height"/>
         [ahref]
         
         <div class="block-share block-share--article hide-on-mobile " data-link-name="block share">
          [ahref]
          
          [linkx]
          
          [linkx]
          
         </div>
         <figcaption class="caption caption--img caption caption--img" itemprop="description">
          <span class="inline-triangle inline-icon ">
           <svg class="inline-triangle__svg inline-icon__svg" height="10" viewbox="0 0 11 10" width="11">
            <path d="M5.5 0L11 10H0z" fill-rule="evenodd">
            </path>
           </svg>
          </span>
          French president Francois Hollande. Photograph: Philippe Wojazer /Pool/EPA
         </figcaption>
        </figure>
        <h2>
         [mkey1][symbolx][pkey1][symbolx][keyword1][bracketl1][bracketr1][symbolx][bracketl2][siter1][bracketr2][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx]
        </h2>
        <p>
         The key question now is over security. With the French capital under recent attack, and reports of fresh assaults averted by the armed forces, the atmosphere in Paris will be unlike any city that has hosted major international talks before. Security will be paramount - the French police and army will be on the streets, and the venue will be patrolled by uniformed UN guards - but the atrocities of 13 November will hang heavily on all delegates. This may mean that when world leaders attend private meetings, terrorism is discussed before climate change. But it may also mean that delegates are under more pressure than ever to come up with a deal, given the tragic circumstances surrounding them.
        </p>
        <p>
         If nations can meet and agree equitable goals on the climate, in these circumstances, it will be a triumph for international cooperation, for our wellbeing and security, and for faith in the future, in the face of forces who wish to destroy all three.
        </p>
        <div class="after-article js-after-article">
        </div>
        <div class="submeta ">
         <span class="submeta__label">
          Topics
         </span>
         <div class="submeta__section-labels">
          <ul class="submeta__links">
           <li class="submeta__link-item">
            [ahref]
            
           </li>
          </ul>
         </div>
         <div class="submeta__keywords">
          <ul class="submeta__links">
           <li class="submeta__link-item">
            [linkx]
            
           </li>
           <li class="submeta__link-item">
            [keywordx][symbolx][keywordx][symbolx][bracketl7][keywordx][bracketr7][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][link]<li>[link]</li>
           </li>
           <li class="submeta__link-item">
            [ahref]
            
           </li>
           <li class="submeta__link-item">
            [ahref]
            
           </li>
           <li class="submeta__link-item">
            [linkx]
            
           </li>
           <li class="submeta__link-item">
            [linkx]
            
           </li>
           <li class="submeta__link-item">
            [ahref]
            
           </li>
          </ul>
         </div>
         <div class="submeta__share" data-component="share">
          <ul class="social social--bottom js-social--bottom u-unstyled u-cf" data-component="social">
           <li class="social__item social__item--facebook " data-link-name="facebook">
            [ahref]
            
           </li>
           <li class="social__item social__item--twitter " data-link-name="twitter">
            [ahref]
            
           </li>
           <li class="social__item social__item--email " data-link-name="email">
            <a class="social__action js-social__action--bottom social-icon-wrapper" data-link-name="social bottom" href="k" target="_blank" title="Email">
             <span class="inline-icon__fallback button">
              Share via Email
             </span>
             <span class="inline-share-email inline-icon rounded-icon centered-icon social-icon social-icon--email">
              <svg class="rounded-icon__svg centered-icon__svg social-icon__svg social-icon--email__svg inline-share-email__svg inline-icon__svg" height="32" viewbox="0 0 32 32" width="32">
               <path d="M23.363 20.875H8.637v-8.938l6.545 5.687h1.637l6.544-5.687v8.938zm-1.635-9.75L16 16l-5.728-4.875h11.456zM23.363 9.5H8.637L7 11.125v9.75L8.637 22.5h14.727L25 20.875v-9.75L23.363 9.5z">
               </path>
              </svg>
             </span>
            </a>
           </li>
           <li class="social__item social__item--linkedin " data-link-name="linkedin">
            [linkx]
            
           </li>
           <li class="social__item social__item--pinterest " data-link-name="pinterest">
            [ahref]
            
           </li>
           <li class="social__item social__item--whatsapp " data-link-name="whatsapp">
            [ahref]
            
           </li>
           <li class="social__item social__item--messenger " data-link-name="messenger">
            [linkx]
            
           </li>
          </ul>
         </div>
         <div class="submeta__syndication">
          <ul class="syndication--bottom u-unstyled">
           <li class="syndication__item">
            [ahref]
            
           </li>
          </ul>
         </div>
        </div>
       </div>
      </div>
      <div aria-hidden="true" class="content__secondary-column js-secondary-column">
       <div aria-hidden="true" class="aside-slot-container js-aside-slot-container">
        <div aria-hidden="true" class="js-ad-slot ad-slot ad-slot--right ad-slot--mpu-banner-ad js-sticky-mpu" data-link-name="ad slot right" data-mobile="1,1|2,2|300,250|300,274|300,600|fluid" data-name="right" id="dfp-ad--right">
        </div>
       </div>
       <div class="js-components-container">
       </div>
      </div>
     </div>
    </div>
   </article>
   <div class="content-footer content-footer--pillar-news">
    <div class="discussion discussion--not-staff discussion--loading js-comments discussion--closed u-cf" data-component="discussion" data-discussion-closed="true" data-discussion-key="/p/49b3b" id="comments">
     <div class="discussion__top-border gs-container">
      <div class="content__main-column">
       <div class="modern-hidden">
        <div class="discussion__heading">
         <div class="container__meta modern-hidden">
          <h2 class="container__meta__title">
           <b>[mkey1][symbolx][pkey1][symbolx][keyword1][bracketl1][bracketr1][symbolx][bracketl2][siter1][bracketr2][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx]</b>
          </h2>
         </div>
        </div>
       </div>
       <div class="modern-visible">
        <div class="discussion__heading js-discussion-external-frontend">
        </div>
        <div class="discussion__comment-box js-discussion-comment-box--top">
        </div>
        <div class="discussion__top-comments js-discussion-top-comments">
        </div>
        <div class="discussion__toolbar js-discussion-toolbar u-cf">
         <div class="discussion__toolbar-item js-comment-order-dropdown">
          <button aria-controls="comments-order-popup" aria-haspopup="true" class="u-button-reset popup__toggle" data-toggle="popup--comments-order">
           Order by
           <span class="js-comment-order">
           </span>
          </button>
          <ul class="popup popup--default popup__group popup--comments-order is-off" id="comments-order-popup">
           <li class="popup__item">
            <button class="u-button-reset popup__action" data-link-name="comments-newest" data-order="newest">
             newest
            </button>
           </li>
           <li class="popup__item">
            <button class="u-button-reset popup__action" data-link-name="comments-oldest" data-order="oldest">
             oldest
            </button>
           </li>
           <li class="popup__item">
            <button class="u-button-reset popup__action" data-link-name="comments-recommendations" data-order="recommendations">
             recommendations
            </button>
           </li>
          </ul>
         </div>
         <div class="discussion__toolbar-item hide-until-tablet js-comment-pagesize-dropdown sign-in-required">
          <button aria-controls="comments-pagesize-popup" aria-haspopup="true" class="u-button-reset popup__toggle" data-toggle="popup--comments-pagesize">
           Show
           <span class="js-comment-pagesize">
            25
           </span>
          </button>
          <ul class="popup popup--default popup__group popup--comments-pagesize is-off" id="comments-pagesize-popup">
           <li class="popup__item">
            <button class="u-button-reset popup__action" data-link-name="comments-pagesize-25" data-pagesize="25">
             25
            </button>
           </li>
           <li class="popup__item">
            <button class="u-button-reset popup__action" data-link-name="comments-pagesize-50" data-pagesize="50">
             50
            </button>
           </li>
           <li class="popup__item">
            <button class="u-button-reset popup__action" data-link-name="comments-pagesize-100" data-pagesize="100">
             100
            </button>
           </li>
           <li class="popup__item">
            <button class="u-button-reset popup__action" data-link-name="comments-pagesize-All" data-pagesize="All">
             All
            </button>
           </li>
          </ul>
         </div>
         <div class="discussion__toolbar-item js-comment-threading-dropdown">
          <button aria-controls="comments-order-threading" aria-haspopup="true" class="u-button-reset popup__toggle" data-toggle="popup--comments-threading">
           Threads
           <span class="js-comment-threading">
           </span>
          </button>
          <ul class="popup popup--default popup__group popup--comments-threading is-off" id="comments-order-threading">
           <li class="popup__item">
            <button class="u-button-reset popup__action" data-link-name="comments-threading-collapsed" data-threading="collapsed">
             collapsed
            </button>
           </li>
           <li class="popup__item">
            <button class="u-button-reset popup__action" data-link-name="comments-threading-expanded" data-threading="expanded">
             expanded
            </button>
           </li>
           <li class="popup__item">
            <button class="u-button-reset popup__action" data-link-name="comments-threading-unthreaded" data-threading="unthreaded">
             unthreaded
            </button>
           </li>
          </ul>
         </div>
         <div class="discussion__pagination discussion__pagination--top js-discussion-pagination">
         </div>
        </div>
        <div class="preload-msg discussion__loader">
         Loading comments…
         [linkx]
         
         <div class="is-updating">
         </div>
        </div>
        <div class="discussion__main-comments js-discussion-main-comments">
        </div>
        <div class="discussion__comment-box discussion__comment-box--bottom discussion__comment-box--bottom--hidden js-discussion-comment-box--bottom">
        </div>
        <button class="discussion__show-button button--show-more button button--large button--primary js-discussion-show-button modern-visible" data-link-name="more-comments">
         <span class="inline-plus inline-icon ">
          <svg class="inline-plus__svg inline-icon__svg" height="18" viewbox="0 0 18 18" width="18">
           <path d="M8.2 0h1.6l.4 7.8 7.8.4v1.6l-7.8.4-.4 7.8H8.2l-.4-7.8L0 9.8V8.2l7.8-.4.4-7.8z">
           </path>
          </svg>
         </span>
         View more comments
        </button>
       </div>
       <div class="js-discussion__ad-slot discussion__ad-slot hide-until-desktop">
       </div>
      </div>
     </div>
    </div>
    <aside class="related js-related hide-on-childrens-books-site" data-test-id="related-content">
    </aside>
    <aside class="onward js-onward facia-container facia-container--layout-content js-outbrain-anchor" id="onward">
    </aside>
    <aside class="more-in-section js-more-in-section facia-container facia-container--layout-content " id="more-in-section">
    </aside>
    <div class="js-repositioned-comments content__repositioned-comments">
    </div>
    <section class="fc-container fc-container--has-toggle js-most-popular-footer" data-component="most-popular" data-link-name="most-popular">
     <div class="fc-container__inner">
      <div class="fc-container__header js-container__header">
       <h2 class="fc-container__header__title">
        [mkey1][symbolx][pkey1][symbolx][keyword1][bracketl1][bracketr1][symbolx][bracketl2][siter1][bracketr2][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx]
       </h2>
      </div>
      <div class="fc-container--rolled-up-hide most-popular__container">
       <div class="most-popular__content js-popular-trails">
       </div>
       <div class="most-popular__mpu">
        <div class="">
         <div aria-hidden="true" class="js-ad-slot ad-slot ad-slot--mostpop ad-slot--container-inline " data-desktop="1,1|2,2|300,250|300,274|300,600|fluid" data-link-name="ad slot mostpop" data-mobile="1,1|2,2|300,250|300,274|fluid" data-name="mostpop" data-tablet="1,1|2,2|300,250|300,274|300,600|728,90|fluid" id="dfp-ad--mostpop">
         </div>
        </div>
       </div>
      </div>
     </div>
    </section>
    <div class="fc-container fc-container--commercial js-container--commercial">
     <div aria-hidden="true" class="js-ad-slot ad-slot ad-slot--merchandising ad-slot--commercial-component " data-label="false" data-link-name="ad slot merchandising" data-mobile="1,1|2,2|88,88|fluid" data-name="merchandising" data-refresh="false" id="dfp-ad--merchandising">
     </div>
    </div>
   </div>
  </div>
  <footer class="l-footer u-cf" data-component="footer" data-link-name="footer">
   <div class="footer__primary">
    <div class="js-expand-subnav subnav">
     <div class="gs-container">
      <ul class="subnav__list js-get-last-child-subnav" data-pillar-title="News">
       <li class="subnav__item subnav__item--parent">
        [ahref]
        
       </li>
       <li class="subnav__item subnav__item--current-section">
        [linkx]
        
       </li>
       <li class="subnav__item">
        [linkx]
        
       </li>
       <li class="subnav__item">
        [linkx]
        
       </li>
       <li class="subnav__item">
        <a class="subnav-link" data-link-name="nav2 : subnav : Pollution" href="/environment/pollution">
         Pollution
        </a>
       </li>
      </ul>
     </div>
    </div>
   </div>
   <div class="l-footer__secondary js-footer__secondary gs-container" role="contentinfo">
    <div class="footer__pillars u-cf">
     <ul class="pillars pillars--footer">
      <li class="pillars__item">
       [linkx]
       
      </li>
      <li class="pillars__item">
       [linkx]
       
      </li>
      <li class="pillars__item">
       [ahref]
       
      </li>
      <li class="pillars__item">
       [ahref]
       
      </li>
      <li class="pillars__item">
       [ahref]
       
      </li>
     </ul>
    </div>
    <div class="colophon u-cf">
     <div class="footer__email-container js-footer__email-container">
      <iframe class="iframed--overflow-hidden email-sub__iframe js-email-sub__iframe" data-form-success-desc="We will send you our picks of the most important headlines tomorrow morning." frameborder="0" id="footer__email-form" scrolling="no" seamless="" src="/email/form/footer/today-uk" title="Guardian Email Sign-up Form">
      </iframe>
     </div>
     <div class="colophon__lists-container">
      <ul class="colophon__list">
       <li class="colophon__item">
        [linkx]
        
       </li>
       <li class="colophon__item">
        [ahref]
        
       </li>
       <li class="colophon__item">
        [linkx]
        
       </li>
       <li class="colophon__item">
        [ahref]
        
       </li>
       <li class="colophon__item">
        [linkx]
        
       </li>
       <li class="colophon__item">
        [linkx]
        
       </li>
       <li class="colophon__item">
        [linkx]
        
       </li>
       <li class="colophon__item">
        [linkx]
        
       </li>
      </ul>
      <ul class="colophon__list">
       <li class="colophon__item">
        [linkx]
        
       </li>
       <li class="colophon__item">
        [ahref]
        
       </li>
       <li class="colophon__item">
        [linkx]
        
       </li>
       <li class="colophon__item">
        [linkx]
        
       </li>
       <li class="colophon__item">
        [ahref]
        
       </li>
      </ul>
      <ul class="colophon__list">
       <li class="colophon__item">
        [linkx]
        
       </li>
       <li class="colophon__item">
        [linkx]
        
       </li>
       <li class="colophon__item">
        [ahref]
        
        <li class="colophon__item js-discount-code-link">
         [linkx]
         
        </li>
       </li>
      </ul>
      <div class="colophon__list">
       <div class="cta-bar__text">
        <div class="cta-bar__heading">
         Support The Guardian
        </div>
        <div class="cta-bar__subheading">
         Available for everyone, funded by readers
        </div>
       </div>
       [linkx]
       
       [ahref]
       
      </div>
     </div>
    </div>
    <div class="copyright-container">
     [linkx]
     
     <div class="really-serious-copyright">
      © 2019 Guardian News &amp; Media Limited or its affiliated companies. All rights reserved.
     </div>
    </div>
   </div>
  </footer>
  <div class="site-message-overlay js-site-message-overlay is-hidden" data-link-name="release message : overlay">
  </div>
  <div aria-describedby="site-message__message" aria-label="welcome" aria-live="polite" class="site-message js-site-message is-hidden" data-link-name="release message" role="dialog" tabindex="-1">
   <div class="gs-container">
    <div class="site-message__inner js-site-message-inner">
     <div class="site-message__roundel">
      <span class="inline-marque-36 inline-icon u-vertical-align-middle-icon">
       <svg class="u-vertical-align-middle-icon__svg inline-marque-36__svg inline-icon__svg" height="36" viewbox="0 0 36 36" width="36">
        <path d="M18 0a18 18 0 1 0 0 36 18 18 0 0 0 0-36">
        </path>
        <path d="M21.2 4.4c2.3.4 5.3 2 6.3 3.1v5.2H27L21.2 5v-.6zm-2.2.4c-4 0-6.3 5.6-6.3 13.2 0 7.7 2.2 13.3 6.3 13.3v.6c-6 .4-14.4-4.2-14-13.8A13.3 13.3 0 0 1 19 4v.7zm10.4 14.4l-1.9.9v8.6c-1 1-3.8 2.6-6.3 3.1V19.9l-2.2-.7v-.6h10.4v.6z" fill="#FFF">
        </path>
       </svg>
      </span>
     </div>
     <div class="site-message__copy js-site-message-copy u-cf">
     </div>
     <div class="site-message__close">
      <button class="site-message__close-btn js-site-message-close" data-link-name="hide release message">
       <span class="u-h">
        Close
       </span>
       <span class="inline-close inline-icon inline-close--small">
        <svg class="inline-close--small__svg inline-close__svg inline-icon__svg" height="18" viewbox="0 0 18 18" width="18">
         <path d="M7.5 9L1 2l1-1 7 6.5L16 1l1 1-6.5 7 6.5 7-1 1-7-6.5L2 17l-1-1 6.5-7z">
         </path>
        </svg>
       </span>
      </button>
     </div>
    </div>
   </div>
  </div>
  <noscript id="googleNoScript">
  </noscript>
  <noscript>
  </noscript>
  <noscript>
   <div style="display:inline;">
   </div>
  </noscript>
  <b style="color:black;background-color:#a0ffff">
   jnice09-ipp30-wq-zq-0252
  </b>
 </body>
</html>
|<---