--->|<!DOCTYPE html>
<html class="client-nojs" dir="ltr" lang="ko">
 <head>
  <meta charset="utf-8"/>
  <title>
   [mkey1][symbolx][pkey1][symbolx][keyword1][bracketl1][keywordx][bracketr1][symbolx][bracketl2][keywordx][bracketr2][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx]
  </title>
  <meta content="[mkey1][symbolx][pkey3][symbolx][keyword1][bracketl1][keywordx][bracketr1][symbolx][bracketl2][keywordx][bracketr2][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx]" name="keywords"/>
  <meta content="[mkey1][symbolx][pkey2][symbolx][keyword1][bracketl1][keywordx][bracketr1][symbolx][bracketl2][keywordx][bracketr2][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx]" name="description"/>
  <meta content="" name="ResourceLoaderDynamicStyles"/>
  <meta content="MediaWiki 1.34.0-wmf.11" name="generator"/>
  <meta content="origin" name="referrer"/>
  <meta content="origin-when-crossorigin" name="referrer"/>
  <meta content="origin-when-cross-origin" name="referrer"/>
 </head>
 <body class="mediawiki ltr sitedir-ltr mw-hide-empty-elt ns-14 ns-subject mw-editable page-분류_아프리카의_나라 rootpage-분류_아프리카의_나라 skin-vector action-view">
  <div class="noprint" id="mw-page-base">
  </div>
  <div class="noprint" id="mw-head-base">
  </div>
  <div class="mw-body" id="content" role="main">
   [ahref]
   
   <div class="mw-body-content" id="siteNotice">
   </div>
   <div class="mw-indicators mw-body-content">
    <div class="mw-indicator" id="mw-indicator-mw-helplink">
     [ahref]
     
    </div>
   </div>
   <h1 class="firstHeading" id="firstHeading" lang="ko">
    [mkey1][symbolx][pkeyx][symbolx][keyword1][bracketl1][keywordx][bracketr1][symbolx][bracketl2][keywordx][bracketr2][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx]
   </h1>
   <div class="mw-body-content" id="bodyContent">
    <div class="noprint" id="siteSub">
     위키백과, 우리 모두의 백과사전.
    </div>
    <div id="contentSub">
    </div>
    <div id="jump-to-nav">
    </div>
    [linkx]
    
    [ahref]
    
    <div class="mw-content-ltr" dir="ltr" id="mw-content-text" lang="ko">
     <div class="mw-parser-output">
      <div aria-labelledby="아프리카의_나라와_지역" class="navbox" role="navigation" style="background: white;;padding:3px">
       <table class="nowraplinks collapsible autocollapse navbox-inner" style="border-spacing:0;background:transparent;color:inherit">
        <tbody>
         <tr>
          <th class="navbox-title" colspan="3" scope="col" style="background: khaki;">
           <div class="plainlinks hlist navbar mini">
            <ul>
             <li class="nv-view">
              <a href="/wiki/%ED%8B%80:%EC%95%84%ED%94%84%EB%A6%AC%EC%B9%B4" title="틀:아프리카">
               <abbr style=";background: khaki;;background:none transparent;border:none;-moz-box-shadow:none;-webkit-box-shadow:none;box-shadow:none; padding:0;" title="이 틀을 보기">
                v
               </abbr>
              </a>
             </li>
             <li class="nv-talk">
              [linkx]
              
             </li>
             <li class="nv-edit">
              [linkx]
              
             </li>
             <li class="nv-history">
              [ahref]
              
             </li>
            </ul>
           </div>
           <div id="아프리카의_나라와_지역" style="font-size:114%;margin:0 4em">
            [linkx]
            
            의 나라와 지역
           </div>
          </th>
         </tr>
         <tr>
          <th class="navbox-group" scope="row" style="width:1%;font-size: 9pt; background: #F4EDAB;">
           독립국
          </th>
          <td class="navbox-list navbox-odd hlist" style="text-align:left;border-left-width:2px;border-left-style:solid;width:100%;padding:0px;font-size: 9pt; text-align: left;">
           [linkx][keywordx][pkeyx][ahref][mkey1]
          </td>
          <td class="navbox-image" rowspan="4" style="width:1px;padding:0px 0px 0px 2px">
           <div>
            [linkx]
            
           </div>
          </td>
         </tr>
         <tr>
          <th class="navbox-group" scope="row" style="width:1%;font-size: 9pt; background: #F4EDAB;">
           속령
          </th>
          <td class="navbox-list navbox-even hlist" style="text-align:left;border-left-width:2px;border-left-style:solid;width:100%;padding:0px;font-size: 9pt; text-align: left;;background: #F7F2C3;">
           <div style="padding:0em 0.25em">
            <ul>
             <li>
              [linkx]
              
             </li>
             <li>
              <a href="/wiki/%EB%A7%88%EB%8D%B0%EC%9D%B4%EB%9D%BC_%EC%A0%9C%EB%8F%84" title="마데이라 제도">
               마데이라 제도
              </a>
              <sup class="reference" id="cite_ref-n2_2-0">
               [ahref]
               
              </sup>
             </li>
             <li>
              [ahref]
              
             </li>
             <li>
              [ahref]
              
              <sup class="reference" id="cite_ref-n2_2-1">
               [linkx]
               
              </sup>
             </li>
             <li>
              [ahref]
              
              <sup class="reference" id="cite_ref-n2_2-2">
               <a href="2">
                [* 2]
               </a>
              </sup>
             </li>
             <li>
              [linkx]
              
             </li>
             <li>
              [linkx]
              
              <sup class="reference" id="cite_ref-n2_2-3">
               [ahref]
               
              </sup>
             </li>
             <li>
              [linkx]
              
              <sup class="reference" id="cite_ref-n2_2-4">
               [ahref]
               
              </sup>
             </li>
            </ul>
           </div>
          </td>
         </tr>
         <tr>
          <th class="navbox-group" scope="row" style="width:1%;font-size: 9pt; background: #F4EDAB;">
           미승인 국가
          </th>
          <td class="navbox-list navbox-odd hlist" style="text-align:left;border-left-width:2px;border-left-style:solid;width:100%;padding:0px;font-size: 9pt; text-align: left;">
           <div style="padding:0em 0.25em">
            <ul>
             <li>
              [linkx]
              
             </li>
            </ul>
           </div>
          </td>
         </tr>
         <tr>
          <td class="navbox-list navbox-even hlist" colspan="2" style="width:100%;padding:0px;font-size: 9pt; text-align: left;;background: #F7F2C3;">
           <div style="padding:0em 0.25em">
            <div style="padding-left: 7em; font-size: 9pt;">
             <div class="reflist" style="list-style-type: decimal;">
              <div class="mw-references-wrap">
               <ol class="references">
                <li id="cite_note-n1-1">
                 <span class="mw-cite-backlink">
                  <[keywordx]>
                  </[keywordx]>
                 </span>
                 <span class="reference-text">
                  일부 영토가
                  [linkx]
                  
                  에도 속한다.
                 </span>
                </li>
                <li id="cite_note-n2-2">
                 <span class="mw-cite-backlink">
                  ↑
                  <sup>
                   [ahref]
                   
                  </sup>
                  <sup>
                   [ahref]
                   
                  </sup>
                  <sup>
                   [ahref]
                   
                  </sup>
                  <sup>
                   <li>[linkx]</li>[pkeyx]<li>[mkey1]</li>[ahref]
                  </sup>
                  <sup>
                   [ahref]
                   
                  </sup>
                 </span>
                 <span class="reference-text">
                  [ahref]
                  
                  245개 국가에 포함되지 않는 나라이다.
                 </span>
                </li>
               </ol>
              </div>
             </div>
            </div>
           </div>
          </td>
         </tr>
        </tbody>
       </table>
      </div>
      <table class="metadata mbox-small plainlinks" style="border:1px solid #aaa; background-color:#f9f9f9;">
       <tbody>
        <tr>
         <td class="mbox-image">
         </td>
         <td class="mbox-text plainlist" style="">
          <b>
           [linkx]
           
          </b>
          에 관련된
          <br/>
          미디어 분류가 있습니다.
          <div style="padding-left:1em;">
           <b>
            [ahref]
            
           </b>
          </div>
         </td>
        </tr>
       </tbody>
      </table>
     </div>
     <div class="mw-category-generated" dir="ltr" lang="ko">
      <div id="mw-subcategories">
       <h2>
        <b>[mkey1][symbolx][pkeyx][symbolx][keyword1][bracketl1][keywordx][bracketr1][symbolx][bracketl2][keywordx][bracketr2][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx]</b>
       </h2>
       <p>
        다음은 이 분류에 속하는 하위 분류 58개 가운데 58개입니다.
       </p>
       <div class="mw-content-ltr" dir="ltr" lang="ko">
        <div class="mw-category">
         <div class="mw-category-group">
          <h3>
           <b>[mkey1][symbolx][pkeyx][symbolx][keyword1][bracketl1][keywordx][bracketr1][symbolx][bracketl2][keywordx][bracketr2][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx]</b>
          </h3>
          <ul>
           <li>
            <div class="CategoryTreeSection">
             <div class="CategoryTreeItem">
              <span class="CategoryTreeBullet">
               <span class="CategoryTreeToggle" data-ct-state="collapsed" data-ct-title="아프리카의_옛_나라">
                ►
               </span>
              </span>
              [ahref]
              
              ‎
              <span dir="ltr" title="하위 분류 11개, 문서 82개, 파일 0개를 포함하고 있습니다">
               (11 C, 82 P)
              </span>
             </div>
             <div class="CategoryTreeChildren" style="display:none">
             </div>
            </div>
           </li>
           <li>
            <div class="CategoryTreeSection">
             <div class="CategoryTreeItem">
              <span class="CategoryTreeBullet">
               <span class="CategoryTreeToggle" data-ct-state="collapsed" data-ct-title="아프리카의_속령">
                ►
               </span>
              </span>
              [ahref]
              
              ‎
              <span dir="ltr" title="하위 분류 6개, 문서 2개, 파일 0개를 포함하고 있습니다">
               (6 C, 2 P)
              </span>
             </div>
             <div class="CategoryTreeChildren" style="display:none">
             </div>
            </div>
           </li>
          </ul>
         </div>
         <div class="mw-category-group">
          <h3>
           [mkey1][symbolx][pkeyx][symbolx][keyword1][bracketl1][keywordx][bracketr1][symbolx][bracketl2][keywordx][bracketr2][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx]
          </h3>
          <ul>
           <li>
            <div class="CategoryTreeSection">
             <div class="CategoryTreeItem">
              <span class="CategoryTreeBullet">
               <span class="CategoryTreeToggle" data-ct-state="collapsed" data-ct-title="가공의_아프리카_나라">
                ►
               </span>
              </span>
              [ahref]
              
              ‎
              <span dir="ltr" title="하위 분류 1개, 문서 1개, 파일 0개를 포함하고 있습니다">
               (1 C, 1 P)
              </span>
             </div>
             <div class="CategoryTreeChildren" style="display:none">
             </div>
            </div>
           </li>
           <li>
            <div class="CategoryTreeSection">
             <div class="CategoryTreeItem">
              <span class="CategoryTreeBullet">
               <span class="CategoryTreeToggle" data-ct-state="collapsed" data-ct-title="가나">
                ►
               </span>
              </span>
              [linkx]
              
              ‎
              <span dir="ltr" title="하위 분류 16개, 문서 1개, 파일 0개를 포함하고 있습니다">
               (16 C, 1 P)
              </span>
             </div>
             <div class="CategoryTreeChildren" style="display:none">
              [keywordx][pkeyx][mkey1][keywordx][ahref][ahref][ahref][mkey1][keywordx][mkey1][keywordx][ahref][ahref][mkey1][keywordx][keywordx][symbolx][keywordx][symbolx][bracketl8][keywordx][bracketr8][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx]
             </div>
            </div>
           </li>
           <li>
            <div class="CategoryTreeSection">
             <div class="CategoryTreeItem">
              <span class="CategoryTreeBullet">
               <span class="CategoryTreeToggle" data-ct-state="collapsed" data-ct-title="가봉">
                ►
               </span>
              </span>
              <a class="CategoryTreeLabel CategoryTreeLabelNs14 CategoryTreeLabelCategory" href="/wiki/%EB%B6%84%EB%A5%98:%EA%B0%80%EB%B4%89" title="분류:가봉">
               가봉
              </a>
              ‎
              <span dir="ltr" title="하위 분류 14개, 문서 1개, 파일 0개를 포함하고 있습니다">
               (14 C, 1 P)
              </span>
             </div>
             <div class="CategoryTreeChildren" style="display:none">
             </div>
            </div>
           </li>
           <li>
            <div class="CategoryTreeSection">
             <div class="CategoryTreeItem">
              <span class="CategoryTreeBullet">
               <span class="CategoryTreeToggle" data-ct-state="collapsed" data-ct-title="감비아">
                ►
               </span>
              </span>
              [linkx]
              
              ‎
              <span dir="ltr" title="하위 분류 14개, 문서 1개, 파일 0개를 포함하고 있습니다">
               (14 C, 1 P)
              </span>
             </div>
             <div class="CategoryTreeChildren" style="display:none">
             </div>
            </div>
           </li>
           <li>
            <div class="CategoryTreeSection">
             <div class="CategoryTreeItem">
              <span class="CategoryTreeBullet">
               <span class="CategoryTreeToggle" data-ct-state="collapsed" data-ct-title="기니">
                ►
               </span>
              </span>
              <a class="CategoryTreeLabel CategoryTreeLabelNs14 CategoryTreeLabelCategory" href="/wiki/%EB%B6%84%EB%A5%98:%EA%B8%B0%EB%8B%88" title="분류:기니">
               기니
              </a>
              ‎
              <span dir="ltr" title="하위 분류 14개, 문서 1개, 파일 0개를 포함하고 있습니다">
               (14 C, 1 P)
              </span>
             </div>
             <div class="CategoryTreeChildren" style="display:none">
             </div>
            </div>
           </li>
           <li>
            <div class="CategoryTreeSection">
             <div class="CategoryTreeItem">
              <span class="CategoryTreeBullet">
               <span class="CategoryTreeToggle" data-ct-state="collapsed" data-ct-title="기니비사우">
                ►
               </span>
              </span>
              [linkx]
              
              ‎
              <span dir="ltr" title="하위 분류 14개, 문서 1개, 파일 0개를 포함하고 있습니다">
               (14 C, 1 P)
              </span>
             </div>
             <div class="CategoryTreeChildren" style="display:none">
             </div>
            </div>
           </li>
          </ul>
         </div>
         <div class="mw-category-group">
          <h3>
           <b>[mkey1][symbolx][pkeyx][symbolx][keyword1][bracketl1][keywordx][bracketr1][symbolx][bracketl2][keywordx][bracketr2][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx]</b>
          </h3>
          <ul>
           <li>
            <div class="CategoryTreeSection">
             <div class="CategoryTreeItem">
              <span class="CategoryTreeBullet">
               <span class="CategoryTreeToggle" data-ct-state="collapsed" data-ct-title="나미비아">
                ►
               </span>
              </span>
              [linkx]
              
              ‎
              <span dir="ltr" title="하위 분류 15개, 문서 2개, 파일 0개를 포함하고 있습니다">
               (15 C, 2 P)[ahref]<li>[ahref]</li>[keywordx][symbolx][keywordx][symbolx][bracketl16][keywordx][bracketr16][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx]<li>[keywordx]</li>
              </span>
             </div>
             <div class="CategoryTreeChildren" style="display:none">
             </div>
            </div>
           </li>
           <li>
            <div class="CategoryTreeSection">
             <div class="CategoryTreeItem">
              <span class="CategoryTreeBullet">
               <span class="CategoryTreeToggle" data-ct-state="collapsed" data-ct-title="나이지리아">
                ►
               </span>
              </span>
              [linkx]
              
              ‎
              <span dir="ltr" title="하위 분류 15개, 문서 1개, 파일 0개를 포함하고 있습니다">
               (15 C, 1 P)
              </span>
             </div>
             <div class="CategoryTreeChildren" style="display:none">
             </div>
            </div>
           </li>
           <li>
            <div class="CategoryTreeSection">
             <div class="CategoryTreeItem">
              <span class="CategoryTreeBullet">
               <span class="CategoryTreeToggle" data-ct-state="collapsed" data-ct-title="남수단">
                ►
               </span>
              </span>
              [ahref]
              
              ‎
              <span dir="ltr" title="하위 분류 15개, 문서 3개, 파일 0개를 포함하고 있습니다">
               (15 C, 3 P)
              </span>
             </div>
             <div class="CategoryTreeChildren" style="display:none">
             </div>
            </div>
           </li>
           <li>
            <div class="CategoryTreeSection">
             <div class="CategoryTreeItem">
              <span class="CategoryTreeBullet">
               <span class="CategoryTreeToggle" data-ct-state="collapsed" data-ct-title="남아프리카_공화국">
                ►
               </span>
              </span>
              [ahref]
              
              ‎
              <span dir="ltr" title="하위 분류 17개, 문서 2개, 파일 0개를 포함하고 있습니다">
               (17 C, 2 P)
              </span>
             </div>
             <div class="CategoryTreeChildren" style="display:none">
             </div>
            </div>
           </li>
           <li>
            <div class="CategoryTreeSection">
             <div class="CategoryTreeItem">
              <span class="CategoryTreeBullet">
               <span class="CategoryTreeToggle" data-ct-state="collapsed" data-ct-title="니제르">
                ►
               </span>
              </span>
              <a class="CategoryTreeLabel CategoryTreeLabelNs14 CategoryTreeLabelCategory" href="/wiki/%EB%B6%84%EB%A5%98:%EB%8B%88%EC%A0%9C%EB%A5%B4" title="분류:니제르">
               니제르
              </a>
              ‎
              <span dir="ltr" title="하위 분류 15개, 문서 2개, 파일 0개를 포함하고 있습니다">
               (15 C, 2 P)
              </span>
             </div>
             <div class="CategoryTreeChildren" style="display:none">
             </div>
            </div>
           </li>
          </ul>
         </div>
         <div class="mw-category-group">
          <h3>
           <b>[mkey1][symbolx][pkeyx][symbolx][keyword1][bracketl1][keywordx][bracketr1][symbolx][bracketl2][keywordx][bracketr2][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx]</b>
          </h3>
          <ul>
           <li>
            <div class="CategoryTreeSection">
             <div class="CategoryTreeItem">
              <span class="CategoryTreeBullet">
               <span class="CategoryTreeToggle" data-ct-state="collapsed" data-ct-title="라이베리아">
                ►
               </span>
              </span>
              [linkx]
              
              ‎
              <span dir="ltr" title="하위 분류 14개, 문서 1개, 파일 0개를 포함하고 있습니다">
               (14 C, 1 P)
              </span>
             </div>
             <div class="CategoryTreeChildren" style="display:none">
             </div>
            </div>
           </li>
           <li>
            <div class="CategoryTreeSection">
             <div class="CategoryTreeItem">
              <span class="CategoryTreeBullet">
               <span class="CategoryTreeToggle" data-ct-state="collapsed" data-ct-title="레소토">
                ►
               </span>
              </span>
              <a class="CategoryTreeLabel CategoryTreeLabelNs14 CategoryTreeLabelCategory" href="/wiki/%EB%B6%84%EB%A5%98:%EB%A0%88%EC%86%8C%ED%86%A0" title="분류:레소토">
               레소토
              </a>
              ‎
              <span dir="ltr" title="하위 분류 14개, 문서 1개, 파일 0개를 포함하고 있습니다">
               (14 C, 1 P)
              </span>
             </div>
             <div class="CategoryTreeChildren" style="display:none">
             </div>
            </div>
           </li>
           <li>
            <div class="CategoryTreeSection">
             <div class="CategoryTreeItem">
              <span class="CategoryTreeBullet">
               <span class="CategoryTreeToggle" data-ct-state="collapsed" data-ct-title="르완다">
                ►
               </span>
              </span>
              [linkx]
              
              ‎
              <span dir="ltr" title="하위 분류 15개, 문서 1개, 파일 0개를 포함하고 있습니다">
               (15 C, 1 P)
              </span>
             </div>
             <div class="CategoryTreeChildren" style="display:none">
             </div>
            </div>
           </li>
           <li>
            <div class="CategoryTreeSection">
             <div class="CategoryTreeItem">
              <span class="CategoryTreeBullet">
               <span class="CategoryTreeToggle" data-ct-state="collapsed" data-ct-title="리비아">
                ►
               </span>
              </span>
              [ahref]
              
              ‎
              <span dir="ltr" title="하위 분류 16개, 문서 6개, 파일 0개를 포함하고 있습니다">
               (16 C, 6 P)
              </span>
             </div>
             <div class="CategoryTreeChildren" style="display:none">
             </div>
            </div>
           </li>
          </ul>
         </div>
         <div class="mw-category-group">
          <h3>
           [mkey1][symbolx][pkeyx][symbolx][keyword1][bracketl1][keywordx][bracketr1][symbolx][bracketl2][keywordx][bracketr2][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx]
          </h3>
          <ul>
           <li>
            <div class="CategoryTreeSection">
             <div class="CategoryTreeItem">
              <span class="CategoryTreeBullet">
               <span class="CategoryTreeToggle" data-ct-state="collapsed" data-ct-title="마다가스카르">
                ►
               </span>
              </span>
              [linkx]
              
              ‎
              <span dir="ltr" title="하위 분류 15개, 문서 4개, 파일 0개를 포함하고 있습니다">
               (15 C, 4 P)
              </span>
             </div>
             <div class="CategoryTreeChildren" style="display:none">
             </div>
            </div>
           </li>
           <li>
            <div class="CategoryTreeSection">
             <div class="CategoryTreeItem">
              <span class="CategoryTreeBullet">
               <span class="CategoryTreeToggle" data-ct-state="collapsed" data-ct-title="말라위">
                ►
               </span>
              </span>
              [linkx]
              
              ‎
              <span dir="ltr" title="하위 분류 15개, 문서 1개, 파일 0개를 포함하고 있습니다">
               (15 C, 1 P)
              </span>
             </div>
             <div class="CategoryTreeChildren" style="display:none">
             </div>
            </div>
           </li>
           <li>
            <div class="CategoryTreeSection">
             <div class="CategoryTreeItem">
              <span class="CategoryTreeBullet">
               <span class="CategoryTreeToggle" data-ct-state="collapsed" data-ct-title="말리">
                ►
               </span>
              </span>
              [ahref]
              
              ‎
              <span dir="ltr" title="하위 분류 16개, 문서 1개, 파일 0개를 포함하고 있습니다">
               (16 C, 1 P)
              </span>
             </div>
             <div class="CategoryTreeChildren" style="display:none">
             </div>
            </div>
           </li>
           <li>
            <div class="CategoryTreeSection">
             <div class="CategoryTreeItem">
              <span class="CategoryTreeBullet">
               <span class="CategoryTreeToggle" data-ct-state="collapsed" data-ct-title="모로코">
                ►
               </span>
              </span>
              [ahref]
              
              ‎
              <span dir="ltr" title="하위 분류 15개, 문서 2개, 파일 0개를 포함하고 있습니다">
               (15 C, 2 P)
              </span>
             </div>
             <div class="CategoryTreeChildren" style="display:none">
             </div>
            </div>
           </li>
           <li>
            <div class="CategoryTreeSection">
             <div class="CategoryTreeItem">
              <span class="CategoryTreeBullet">
               <span class="CategoryTreeToggle" data-ct-state="collapsed" data-ct-title="모리셔스">
                ►
               </span>
              </span>
              [ahref]
              
              ‎
              <span dir="ltr" title="하위 분류 14개, 문서 2개, 파일 0개를 포함하고 있습니다">
               (14 C, 2 P)
              </span>
             </div>
             <div class="CategoryTreeChildren" style="display:none">
             </div>
            </div>
           </li>
           <li>
            <div class="CategoryTreeSection">
             <div class="CategoryTreeItem">
              <span class="CategoryTreeBullet">
               <span class="CategoryTreeToggle" data-ct-state="collapsed" data-ct-title="모리타니">
                ►
               </span>
              </span>
              [ahref]
              
              ‎
              <span dir="ltr" title="하위 분류 14개, 문서 2개, 파일 0개를 포함하고 있습니다">
               (14 C, 2 P)
              </span>
             </div>
             <div class="CategoryTreeChildren" style="display:none">
             </div>
            </div>
           </li>
           <li>
            <div class="CategoryTreeSection">
             <div class="CategoryTreeItem">
              <span class="CategoryTreeBullet">
               <span class="CategoryTreeToggle" data-ct-state="collapsed" data-ct-title="모잠비크">
                ►
               </span>
              </span>
              [ahref]
              
              ‎
              <span dir="ltr" title="하위 분류 14개, 문서 2개, 파일 0개를 포함하고 있습니다">
               (14 C, 2 P)
              </span>
             </div>
             <div class="CategoryTreeChildren" style="display:none">
             </div>
            </div>
           </li>
          </ul>
         </div>
         <div class="mw-category-group">
          <h3>
           [mkey1][symbolx][pkeyx][symbolx][keyword1][bracketl1][keywordx][bracketr1][symbolx][bracketl2][keywordx][bracketr2][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx]
          </h3>
          <ul>
           <li>
            <div class="CategoryTreeSection">
             <div class="CategoryTreeItem">
              <span class="CategoryTreeBullet">
               <span class="CategoryTreeToggle" data-ct-state="collapsed" data-ct-title="베냉">
                ►
               </span>
              </span>
              [linkx]
              
              ‎
              <span dir="ltr" title="하위 분류 15개, 문서 3개, 파일 0개를 포함하고 있습니다">
               (15 C, 3 P)
              </span>
             </div>
             <div class="CategoryTreeChildren" style="display:none">
             </div>
            </div>
           </li>
           <li>
            <div class="CategoryTreeSection">
             <div class="CategoryTreeItem">
              <span class="CategoryTreeBullet">
               <span class="CategoryTreeToggle" data-ct-state="collapsed" data-ct-title="보츠와나">
                ►
               </span>
              </span>
              [ahref]
              
              ‎
              <span dir="ltr" title="하위 분류 15개, 문서 4개, 파일 0개를 포함하고 있습니다">
               (15 C, 4 P)
              </span>
             </div>
             <div class="CategoryTreeChildren" style="display:none">
             </div>
            </div>
           </li>
           <li>
            <div class="CategoryTreeSection">
             <div class="CategoryTreeItem">
              <span class="CategoryTreeBullet">
               <span class="CategoryTreeToggle" data-ct-state="collapsed" data-ct-title="부룬디">
                ►
               </span>
              </span>
              [ahref]
              
              ‎
              <span dir="ltr" title="하위 분류 14개, 문서 1개, 파일 0개를 포함하고 있습니다">
               (14 C, 1 P)
              </span>
             </div>
             <div class="CategoryTreeChildren" style="display:none">
             </div>
            </div>
           </li>
           <li>
            <div class="CategoryTreeSection">
             <div class="CategoryTreeItem">
              <span class="CategoryTreeBullet">
               <span class="CategoryTreeToggle" data-ct-state="collapsed" data-ct-title="부르키나파소">
                ►
               </span>
              </span>
              [ahref]
              
              ‎
              <span dir="ltr" title="하위 분류 14개, 문서 1개, 파일 0개를 포함하고 있습니다">
               (14 C, 1 P)
              </span>
             </div>
             <div class="CategoryTreeChildren" style="display:none">
             </div>
            </div>
           </li>
          </ul>
         </div>
         <div class="mw-category-group">
          <h3>
           <b>[mkey1][symbolx][pkeyx][symbolx][keyword1][bracketl1][keywordx][bracketr1][symbolx][bracketl2][keywordx][bracketr2][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx]</b>
          </h3>
          <ul>
           <li>
            <div class="CategoryTreeSection">
             <div class="CategoryTreeItem">
              <span class="CategoryTreeBullet">
               <span class="CategoryTreeToggle" data-ct-state="collapsed" data-ct-title="상투메_프린시페">
                ►
               </span>
              </span>
              [linkx]
              
              ‎
              <span dir="ltr" title="하위 분류 13개, 문서 1개, 파일 0개를 포함하고 있습니다">
               (13 C, 1 P)
              </span>
             </div>
             <div class="CategoryTreeChildren" style="display:none">
             </div>
            </div>
           </li>
           <li>
            <div class="CategoryTreeSection">
             <div class="CategoryTreeItem">
              <span class="CategoryTreeBullet">
               <span class="CategoryTreeToggle" data-ct-state="collapsed" data-ct-title="세네갈">
                ►
               </span>
              </span>
              [ahref]
              
              ‎
              <span dir="ltr" title="하위 분류 14개, 문서 3개, 파일 0개를 포함하고 있습니다">
               (14 C, 3 P)
              </span>
             </div>
             <div class="CategoryTreeChildren" style="display:none">
             </div>
            </div>
           </li>
           <li>
            [pkeyx][pkeyx][pkeyx]<li>[keywordx][symbolx][keywordx][symbolx][bracketl17][keywordx][bracketr17][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx]</li>[keywordx]
           </li>
           <li>
            <div class="CategoryTreeSection">
             <div class="CategoryTreeItem">
              <span class="CategoryTreeBullet">
               <span class="CategoryTreeToggle" data-ct-state="collapsed" data-ct-title="소말리아">
                ►
               </span>
              </span>
              [linkx]
              
              ‎
              <span dir="ltr" title="하위 분류 15개, 문서 6개, 파일 0개를 포함하고 있습니다">
               (15 C, 6 P)
              </span>
             </div>
             <div class="CategoryTreeChildren" style="display:none">
             </div>
            </div>
           </li>
           <li>
            <div class="CategoryTreeSection">
             <div class="CategoryTreeItem">
              <span class="CategoryTreeBullet">
               <span class="CategoryTreeToggle" data-ct-state="collapsed" data-ct-title="수단">
                ►
               </span>
              </span>
              [ahref]
              
              ‎
              <span dir="ltr" title="하위 분류 15개, 문서 1개, 파일 0개를 포함하고 있습니다">
               (15 C, 1 P)
              </span>
             </div>
             <div class="CategoryTreeChildren" style="display:none">
             </div>
            </div>
           </li>
           <li>
            <div class="CategoryTreeSection">
             <div class="CategoryTreeItem">
              <span class="CategoryTreeBullet">
               <span class="CategoryTreeToggle" data-ct-state="collapsed" data-ct-title="시에라리온">
                ►
               </span>
              </span>
              [ahref]
              
              ‎
              <span dir="ltr" title="하위 분류 14개, 문서 2개, 파일 0개를 포함하고 있습니다">
               (14 C, 2 P)
              </span>
             </div>
             <div class="CategoryTreeChildren" style="display:none">
             </div>
            </div>
           </li>
          </ul>
         </div>
         <div class="mw-category-group">
          <h3>
           <b>[mkey1][symbolx][pkeyx][symbolx][keyword1][bracketl1][keywordx][bracketr1][symbolx][bracketl2][keywordx][bracketr2][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx]</b>
          </h3>
          <ul>
           <li>
            <div class="CategoryTreeSection">
             <div class="CategoryTreeItem">
              <span class="CategoryTreeBullet">
               <span class="CategoryTreeToggle" data-ct-state="collapsed" data-ct-title="아프리카의_나라별_역사">
                ►
               </span>
              </span>
              [ahref]
              
              ‎
              <span dir="ltr" title="하위 분류 2개, 문서 0개, 파일 0개를 포함하고 있습니다">
               (2 C)
              </span>
             </div>
             <div class="CategoryTreeChildren" style="display:none">
             </div>
            </div>
           </li>
           <li>
            <div class="CategoryTreeSection">
             <div class="CategoryTreeItem">
              <span class="CategoryTreeBullet">
               <span class="CategoryTreeToggle" data-ct-state="collapsed" data-ct-title="알제리">
                ►
               </span>
              </span>
              [linkx]
              
              ‎
              <span dir="ltr" title="하위 분류 16개, 문서 1개, 파일 0개를 포함하고 있습니다">
               (16 C, 1 P)
              </span>
             </div>
             <div class="CategoryTreeChildren" style="display:none">
             </div>
            </div>
           </li>
           <li>
            <div class="CategoryTreeSection">
             <div class="CategoryTreeItem">
              <span class="CategoryTreeBullet">
               <span class="CategoryTreeToggle" data-ct-state="collapsed" data-ct-title="앙골라">
                ►
               </span>
              </span>
              [ahref]
              
              ‎
              <span dir="ltr" title="하위 분류 14개, 문서 1개, 파일 0개를 포함하고 있습니다">
               (14 C, 1 P)
              </span>
             </div>
             <div class="CategoryTreeChildren" style="display:none">
             </div>
            </div>
           </li>
           <li>
            <div class="CategoryTreeSection">
             <div class="CategoryTreeItem">
              <span class="CategoryTreeBullet">
               <span class="CategoryTreeToggle" data-ct-state="collapsed" data-ct-title="에리트레아">
                ►
               </span>
              </span>
              [linkx]
              
              ‎
              <span dir="ltr" title="하위 분류 15개, 문서 6개, 파일 0개를 포함하고 있습니다">
               (15 C, 6 P)
              </span>
             </div>
             <div class="CategoryTreeChildren" style="display:none">
             </div>
            </div>
           </li>
           <li>
            <div class="CategoryTreeSection">
             <div class="CategoryTreeItem">
              <span class="CategoryTreeBullet">
               [linkx]<li>[pkeyx]</li><li>[keywordx][symbolx][keywordx][symbolx][bracketl5][keywordx][bracketr5][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx]</li>[pkeyx]
              </span>
              [linkx]
              
              ‎
              <span dir="ltr" title="하위 분류 14개, 문서 1개, 파일 0개를 포함하고 있습니다">
               (14 C, 1 P)
              </span>
             </div>
             <div class="CategoryTreeChildren" style="display:none">
             </div>
            </div>
           </li>
           <li>
            <div class="CategoryTreeSection">
             <div class="CategoryTreeItem">
              <span class="CategoryTreeBullet">
               <span class="CategoryTreeToggle" data-ct-state="collapsed" data-ct-title="에티오피아">
                ►
               </span>
              </span>
              [ahref]
              
              ‎
              <span dir="ltr" title="하위 분류 15개, 문서 6개, 파일 0개를 포함하고 있습니다">
               (15 C, 6 P)
              </span>
             </div>
             <div class="CategoryTreeChildren" style="display:none">
             </div>
            </div>
           </li>
           <li>
            <div class="CategoryTreeSection">
             <div class="CategoryTreeItem">
              <span class="CategoryTreeBullet">
               <span class="CategoryTreeToggle" data-ct-state="collapsed" data-ct-title="우간다">
                ►
               </span>
              </span>
              <a class="CategoryTreeLabel CategoryTreeLabelNs14 CategoryTreeLabelCategory" href="/wiki/%EB%B6%84%EB%A5%98:%EC%9A%B0%EA%B0%84%EB%8B%A4" title="분류:우간다">
               우간다
              </a>
              ‎
              <span dir="ltr" title="하위 분류 15개, 문서 2개, 파일 0개를 포함하고 있습니다">
               (15 C, 2 P)
              </span>
             </div>
             <div class="CategoryTreeChildren" style="display:none">
             </div>
            </div>
           </li>
           <li>
            <div class="CategoryTreeSection">
             <div class="CategoryTreeItem">
              <span class="CategoryTreeBullet">
               <span class="CategoryTreeToggle" data-ct-state="collapsed" data-ct-title="이집트">
                ►
               </span>
              </span>
              [linkx]
              
              ‎
              <span dir="ltr" title="하위 분류 17개, 문서 9개, 파일 0개를 포함하고 있습니다">
               (17 C, 9 P)
              </span>
             </div>
             <div class="CategoryTreeChildren" style="display:none">
             </div>
            </div>
           </li>
          </ul>
         </div>
         <div class="mw-category-group">
          <h3>
           [mkey1][symbolx][pkeyx][symbolx][keyword1][bracketl1][keywordx][bracketr1][symbolx][bracketl2][keywordx][bracketr2][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx]
          </h3>
          <ul>
           <li>
            <div class="CategoryTreeSection">
             <div class="CategoryTreeItem">
              <span class="CategoryTreeBullet">
               <span class="CategoryTreeToggle" data-ct-state="collapsed" data-ct-title="잠비아">
                ►
               </span>
              </span>
              [ahref]
              
              ‎
              <span dir="ltr" title="하위 분류 15개, 문서 1개, 파일 0개를 포함하고 있습니다">
               (15 C, 1 P)
              </span>
             </div>
             <div class="CategoryTreeChildren" style="display:none">
             </div>
            </div>
           </li>
           <li>
            <div class="CategoryTreeSection">
             <div class="CategoryTreeItem">
              <span class="CategoryTreeBullet">
               <span class="CategoryTreeToggle" data-ct-state="collapsed" data-ct-title="적도_기니">
                ►
               </span>
              </span>
              <a class="CategoryTreeLabel CategoryTreeLabelNs14 CategoryTreeLabelCategory" href="/wiki/%EB%B6%84%EB%A5%98:%EC%A0%81%EB%8F%84_%EA%B8%B0%EB%8B%88" title="분류:적도 기니">
               적도 기니
              </a>
              ‎
              <span dir="ltr" title="하위 분류 14개, 문서 1개, 파일 0개를 포함하고 있습니다">
               (14 C, 1 P)
              </span>
             </div>
             <div class="CategoryTreeChildren" style="display:none">
             </div>
            </div>
           </li>
           <li>
            <div class="CategoryTreeSection">
             <div class="CategoryTreeItem">
              <span class="CategoryTreeBullet">
               <span class="CategoryTreeToggle" data-ct-state="collapsed" data-ct-title="중앙아프리카_공화국">
                ►
               </span>
              </span>
              [ahref]
              
              ‎
              <span dir="ltr" title="하위 분류 14개, 문서 1개, 파일 0개를 포함하고 있습니다">
               (14 C, 1 P)
              </span>
             </div>
             <div class="CategoryTreeChildren" style="display:none">
             </div>
            </div>
           </li>
           <li>
            <div class="CategoryTreeSection">
             <div class="CategoryTreeItem">
              <span class="CategoryTreeBullet">
               <span class="CategoryTreeToggle" data-ct-state="collapsed" data-ct-title="지부티">
                ►
               </span>
              </span>
              [ahref]
              
              ‎
              <span dir="ltr" title="하위 분류 14개, 문서 3개, 파일 0개를 포함하고 있습니다">
               (14 C, 3 P)
              </span>
             </div>
             <div class="CategoryTreeChildren" style="display:none">
             </div>
            </div>
           </li>
           <li>
            <div class="CategoryTreeSection">
             <div class="CategoryTreeItem">
              <span class="CategoryTreeBullet">
               <span class="CategoryTreeToggle" data-ct-state="collapsed" data-ct-title="짐바브웨">
                ►
               </span>
              </span>
              [ahref]
              
              ‎
              <span dir="ltr" title="하위 분류 15개, 문서 1개, 파일 0개를 포함하고 있습니다">
               (15 C, 1 P)
              </span>
             </div>
             <div class="CategoryTreeChildren" style="display:none">
             </div>
            </div>
           </li>
          </ul>
         </div>
         <div class="mw-category-group">
          <h3>
           <b>[mkey1][symbolx][pkeyx][symbolx][keyword1][bracketl1][keywordx][bracketr1][symbolx][bracketl2][keywordx][bracketr2][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx]</b>
          </h3>
          <ul>
           <li>
            <div class="CategoryTreeSection">
             <div class="CategoryTreeItem">
              <span class="CategoryTreeBullet">
               <span class="CategoryTreeToggle" data-ct-state="collapsed" data-ct-title="차드">
                ►
               </span>
              </span>
              [linkx]
              
              ‎
              <span dir="ltr" title="하위 분류 14개, 문서 1개, 파일 0개를 포함하고 있습니다">
               (14 C, 1 P)
              </span>
             </div>
             <div class="CategoryTreeChildren" style="display:none">
             </div>
            </div>
           </li>
          </ul>
         </div>
         <div class="mw-category-group">
          <h3>
           [mkey1][symbolx][pkeyx][symbolx][keyword1][bracketl1][keywordx][bracketr1][symbolx][bracketl2][keywordx][bracketr2][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx]
          </h3>
          <ul>
           <li>
            <div class="CategoryTreeSection">
             <div class="CategoryTreeItem">
              <span class="CategoryTreeBullet">
               <span class="CategoryTreeToggle" data-ct-state="collapsed" data-ct-title="카메룬">
                ►
               </span>
              </span>
              [linkx]
              
              ‎
              <span dir="ltr" title="하위 분류 14개, 문서 2개, 파일 0개를 포함하고 있습니다">
               (14 C, 2 P)
              </span>
             </div>
             <div class="CategoryTreeChildren" style="display:none">
             </div>
            </div>
           </li>
           <li>
            <div class="CategoryTreeSection">
             <div class="CategoryTreeItem">
              <span class="CategoryTreeBullet">
               <span class="CategoryTreeToggle" data-ct-state="collapsed" data-ct-title="카보베르데">
                ►
               </span>
              </span>
              [ahref]
              
              ‎
              <span dir="ltr" title="하위 분류 14개, 문서 1개, 파일 0개를 포함하고 있습니다">
               (14 C, 1 P)
              </span>
             </div>
             <div class="CategoryTreeChildren" style="display:none">
             </div>
            </div>
           </li>
           <li>
            <div class="CategoryTreeSection">
             <div class="CategoryTreeItem">
              <span class="CategoryTreeBullet">
               <span class="CategoryTreeToggle" data-ct-state="collapsed" data-ct-title="케냐">
                ►
               </span>
              </span>
              [ahref]
              
              ‎
              <span dir="ltr" title="하위 분류 16개, 문서 3개, 파일 0개를 포함하고 있습니다">
               (16 C, 3 P)
              </span>
             </div>
             <div class="CategoryTreeChildren" style="display:none">
             </div>
            </div>
           </li>
           <li>
            <div class="CategoryTreeSection">
             <div class="CategoryTreeItem">
              <span class="CategoryTreeBullet">
               <span class="CategoryTreeToggle" data-ct-state="collapsed" data-ct-title="코모로">
                ►
               </span>
              </span>
              [ahref]
              
              ‎
              <span dir="ltr" title="하위 분류 14개, 문서 1개, 파일 0개를 포함하고 있습니다">
               (14 C, 1 P)
              </span>
             </div>
             <div class="CategoryTreeChildren" style="display:none">
             </div>
            </div>
           </li>
           <li>
            <div class="CategoryTreeSection">
             <div class="CategoryTreeItem">
              <span class="CategoryTreeBullet">
               <span class="CategoryTreeToggle" data-ct-state="collapsed" data-ct-title="코트디부아르">
                ►
               </span>
              </span>
              [linkx]
              
              ‎
              <span dir="ltr" title="하위 분류 14개, 문서 2개, 파일 0개를 포함하고 있습니다">
               (14 C, 2 P)
              </span>
             </div>
             <div class="CategoryTreeChildren" style="display:none">
              [linkx][ahref][keywordx][symbolx][keywordx][symbolx][bracketl9][keywordx][bracketr9][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][pkeyx][mkey1][keywordx][pkeyx][pkeyx][mkey1][mkey1][mkey1][mkey1][keywordx][symbolx][keywordx][symbolx][bracketl10][keywordx][bracketr10][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][mkey1][keywordx][symbolx][keywordx][symbolx][bracketl11][keywordx][bracketr11][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][keywordx][linkx][linkx][keywordx][keywordx][symbolx][keywordx][symbolx][bracketl12][keywordx][bracketr12][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][bracketl13][keywordx][bracketr13][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][mkey1][mkey1][mkey1][ahref][pkeyx][pkeyx][pkeyx][pkeyx]
             </div>
            </div>
           </li>
           <li>
            <div class="CategoryTreeSection">
             <div class="CategoryTreeItem">
              <span class="CategoryTreeBullet">
               <span class="CategoryTreeToggle" data-ct-state="collapsed" data-ct-title="콩고_공화국">
                ►
               </span>
              </span>
              <a class="CategoryTreeLabel CategoryTreeLabelNs14 CategoryTreeLabelCategory" href="/wiki/%EB%B6%84%EB%A5%98:%EC%BD%A9%EA%B3%A0_%EA%B3%B5%ED%99%94%EA%B5%AD" title="분류:콩고 공화국">
               콩고 공화국
              </a>
              ‎
              <span dir="ltr" title="하위 분류 14개, 문서 1개, 파일 0개를 포함하고 있습니다">
               (14 C, 1 P)
              </span>
             </div>
             <div class="CategoryTreeChildren" style="display:none">
             </div>
            </div>
           </li>
           <li>
            <div class="CategoryTreeSection">
             <div class="CategoryTreeItem">
              <span class="CategoryTreeBullet">
               <span class="CategoryTreeToggle" data-ct-state="collapsed" data-ct-title="콩고_민주_공화국">
                ►
               </span>
              </span>
              [linkx]
              
              ‎
              <span dir="ltr" title="하위 분류 16개, 문서 3개, 파일 0개를 포함하고 있습니다">
               (16 C, 3 P)
              </span>
             </div>
             <div class="CategoryTreeChildren" style="display:none">
             </div>
            </div>
           </li>
          </ul>
         </div>
         <div class="mw-category-group">
          <h3>
           <b>[mkey1][symbolx][pkeyx][symbolx][keyword1][bracketl1][keywordx][bracketr1][symbolx][bracketl2][keywordx][bracketr2][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx]</b>
          </h3>
          <ul>
           <li>
            <div class="CategoryTreeSection">
             <div class="CategoryTreeItem">
              <span class="CategoryTreeBullet">
               <span class="CategoryTreeToggle" data-ct-state="collapsed" data-ct-title="탄자니아">
                ►
               </span>
              </span>
              [linkx]
              
              ‎
              <span dir="ltr" title="하위 분류 16개, 문서 2개, 파일 0개를 포함하고 있습니다">
               (16 C, 2 P)
              </span>
             </div>
             <div class="CategoryTreeChildren" style="display:none">
             </div>
            </div>
           </li>
           <li>
            <div class="CategoryTreeSection">
             <div class="CategoryTreeItem">
              <span class="CategoryTreeBullet">
               <span class="CategoryTreeToggle" data-ct-state="collapsed" data-ct-title="토고">
                ►
               </span>
              </span>
              [ahref]
              
              ‎
              <span dir="ltr" title="하위 분류 14개, 문서 2개, 파일 0개를 포함하고 있습니다">
               (14 C, 2 P)
              </span>
             </div>
             <div class="CategoryTreeChildren" style="display:none">
             </div>
            </div>
           </li>
           <li>
            <div class="CategoryTreeSection">
             <div class="CategoryTreeItem">
              <span class="CategoryTreeBullet">
               <span class="CategoryTreeToggle" data-ct-state="collapsed" data-ct-title="튀니지">
                ►
               </span>
              </span>
              <a class="CategoryTreeLabel CategoryTreeLabelNs14 CategoryTreeLabelCategory" href="/wiki/%EB%B6%84%EB%A5%98:%ED%8A%80%EB%8B%88%EC%A7%80" title="분류:튀니지">
               튀니지
              </a>
              ‎
              <span dir="ltr" title="하위 분류 16개, 문서 3개, 파일 0개를 포함하고 있습니다">
               (16 C, 3 P)
              </span>
             </div>
             <div class="CategoryTreeChildren" style="display:none">
             </div>
            </div>
           </li>
          </ul>
         </div>
        </div>
       </div>
      </div>
      <div id="mw-pages">
       <h2>
        [mkey1][symbolx][pkeyx][symbolx][keyword1][bracketl1][keywordx][bracketr1][symbolx][bracketl2][keywordx][bracketr2][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx]
       </h2>
       <p>
        이 분류에는 문서 1개만이 속해 있습니다.
       </p>
       <div class="mw-content-ltr" dir="ltr" lang="ko">
        <h3>
         <b>[mkey1][symbolx][pkeyx][symbolx][keyword1][bracketl1][keywordx][bracketr1][symbolx][bracketl2][keywordx][bracketr2][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx]</b>
        </h3>
        <ul>
         <li>
          [linkx]
          
         </li>
        </ul>
       </div>
      </div>
     </div>
     <noscript>
     </noscript>
    </div>
    <div class="printfooter">
     원본 주소 "
     [ahref]
     
     "
    </div>
    <div class="catlinks" data-mw="interface" id="catlinks">
     <div class="mw-normal-catlinks" id="mw-normal-catlinks">
      [linkx]
      
      :
      <ul>
       <li>
        <a href="/wiki/%EB%B6%84%EB%A5%98:%EB%8C%80%EB%A5%99%EB%B3%84_%EB%82%98%EB%9D%BC" title="분류:대륙별 나라">
         대륙별 나라
        </a>
       </li>
       <li>
        [ahref]
         [pkeyx]<li>[pkeyx]</li>[mkey1]<li>[keywordx]</li>
        
       </li>
      </ul>
     </div>
    </div>
    <div class="visualClear">
    </div>
   </div>
  </div>
  <div id="mw-navigation">
   <h2>
    <b>[mkey1][symbolx][pkeyx][symbolx][keyword1][bracketl1][keywordx][bracketr1][symbolx][bracketl2][keywordx][bracketr2][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx]</b>
   </h2>
   <div id="mw-head">
    <div aria-labelledby="p-personal-label" id="p-personal" role="navigation">
     <h3 id="p-personal-label">
      [mkey1][symbolx][pkeyx][symbolx][keyword1][bracketl1][keywordx][bracketr1][symbolx][bracketl2][keywordx][bracketr2][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx]
     </h3>
     <ul>
      <li id="pt-anonuserpage">
       로그인하지 않음
      </li>
      <li id="pt-anontalk">
       <a accesskey="n" href="/wiki/%ED%8A%B9%EC%88%98:%EB%82%B4%EC%82%AC%EC%9A%A9%EC%9E%90%ED%86%A0%EB%A1%A0" title="현재 사용하는 IP 주소에 대한 토론 문서 [n]">
        토론
       </a>
      </li>
      <li id="pt-anoncontribs">
       [linkx]
       
      </li>
      <li id="pt-createaccount">
       [ahref]
       
      </li>
      <li id="pt-login">
       [ahref]
       
      </li>
     </ul>
    </div>
    <div id="left-navigation">
     <div aria-labelledby="p-namespaces-label" class="vectorTabs" id="p-namespaces" role="navigation">
      <h3 id="p-namespaces-label">
       [mkey1][symbolx][pkeyx][symbolx][keyword1][bracketl1][keywordx][bracketr1][symbolx][bracketl2][keywordx][bracketr2][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx]
      </h3>
      <ul>
       <li class="selected" id="ca-nstab-category">
        <span>
         [ahref]
         
        </span>
       </li>
       <li class="new" id="ca-talk">
        <span>
         <a accesskey="t" href="/w/index.php?title=%EB%B6%84%EB%A5%98%ED%86%A0%EB%A1%A0:%EC%95%84%ED%94%84%EB%A6%AC%EC%B9%B4%EC%9D%98_%EB%82%98%EB%9D%BC&amp;action=edit&amp;redlink=1" rel="discussion" title="문서의 내용에 대한 토론 문서 (없는 문서) [t]">
          토론
         </a>
        </span>
       </li>
      </ul>
     </div>
     <div aria-labelledby="p-variants-label" class="vectorMenu emptyPortlet" id="p-variants" role="navigation">
      <h3 id="p-variants-label">
       [mkey1][symbolx][pkeyx][symbolx][keyword1][bracketl1][keywordx][bracketr1][symbolx][bracketl2][keywordx][bracketr2][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx]
      </h3>
      <ul class="menu">
      </ul>
     </div>
    </div>
    <div id="right-navigation">
     <div aria-labelledby="p-views-label" class="vectorTabs" id="p-views" role="navigation">
      <h3 id="p-views-label">
       [mkey1][symbolx][pkeyx][symbolx][keyword1][bracketl1][keywordx][bracketr1][symbolx][bracketl2][keywordx][bracketr2][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx]
      </h3>
      <ul>
       <li class="collapsible selected" id="ca-view">
        <span>
         <a href="/wiki/%EB%B6%84%EB%A5%98:%EC%95%84%ED%94%84%EB%A6%AC%EC%B9%B4%EC%9D%98_%EB%82%98%EB%9D%BC">
          읽기
         </a>
        </span>
       </li>
       <li class="collapsible" id="ca-edit">
        <span>
         <a accesskey="e" href="/w/index.php?title=%EB%B6%84%EB%A5%98:%EC%95%84%ED%94%84%EB%A6%AC%EC%B9%B4%EC%9D%98_%EB%82%98%EB%9D%BC&amp;action=edit" title="이 문서 편집하기 [e]">
          편집
         </a>
        </span>
       </li>
       <li class="collapsible" id="ca-history">
        <span>
         <a accesskey="h" href="/w/index.php?title=%EB%B6%84%EB%A5%98:%EC%95%84%ED%94%84%EB%A6%AC%EC%B9%B4%EC%9D%98_%EB%82%98%EB%9D%BC&amp;action=history" title="이 문서의 과거 편집 내역입니다. [h]">
          역사 보기
         </a>
        </span>
       </li>
      </ul>
     </div>
     <div aria-labelledby="p-cactions-label" class="vectorMenu emptyPortlet" id="p-cactions" role="navigation">
      <h3 id="p-cactions-label">
       [mkey1][symbolx][pkeyx][symbolx][keyword1][bracketl1][keywordx][bracketr1][symbolx][bracketl2][keywordx][bracketr2][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx]
      </h3>
      <ul class="menu">
      </ul>
     </div>
     <div id="p-search" role="search">
      <h3>
       [mkey1][symbolx][pkeyx][symbolx][keyword1][bracketl1][keywordx][bracketr1][symbolx][bracketl2][keywordx][bracketr2][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx]
      </h3>
      <form action="/w/index.php" id="searchform">
       <div id="simpleSearch">
       </div>
      </form>
     </div>
    </div>
   </div>
   <div id="mw-panel">
    <div id="p-logo" role="banner">
     [ahref]
     
    </div>
    <div aria-labelledby="p-navigation-label" class="portal" id="p-navigation" role="navigation">
     <h3 id="p-navigation-label">
      <b>[mkey1][symbolx][pkeyx][symbolx][keyword1][bracketl1][keywordx][bracketr1][symbolx][bracketl2][keywordx][bracketr2][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx]</b>
     </h3>
     <div class="body">
      <ul>
       <li id="n-mainpage-description">
        [ahref]
        
       </li>
       <li id="n-portal">
        [ahref]
        
       </li>
       <li id="n-currentevents">
        [ahref]
        
       </li>
       <li id="n-recentchanges">
        <a accesskey="r" href="/wiki/%ED%8A%B9%EC%88%98:%EC%B5%9C%EA%B7%BC%EB%B0%94%EB%80%9C" title="위키의 최근 바뀐 목록 [r]">
         최근 바뀜
        </a>
       </li>
       <li id="n-index">
        [linkx]
        
       </li>
       <li id="n-randompage">
        [linkx]
        
       </li>
       <li id="n-help">
        <a href="/wiki/%EC%9C%84%ED%82%A4%EB%B0%B1%EA%B3%BC:%EB%8F%84%EC%9B%80%EB%A7%90" title="도움말">
         도움말
        </a>
       </li>
       <li id="n-sitesupport">
        [linkx]
        
       </li>
      </ul>
     </div>
    </div>
    <div aria-labelledby="p-tb-label" class="portal" id="p-tb" role="navigation">
     <h3 id="p-tb-label">
      [mkey1][symbolx][pkeyx][symbolx][keyword1][bracketl1][keywordx][bracketr1][symbolx][bracketl2][keywordx][bracketr2][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx]
     </h3>
     <div class="body">
      <ul>
       <li id="t-whatlinkshere">
        [linkx]
        
       </li>
       <li id="t-recentchangeslinked">
        [linkx]
        
       </li>
       <li id="t-upload">
        [ahref]
        
       </li>
       <li id="t-specialpages">
        [ahref]
        
       </li>
       <li id="t-permalink">
        [ahref]
        
       </li>
       <li id="t-info">
        [linkx]
        
       </li>
       <li id="t-wikibase">
        [ahref]
        
       </li>
      </ul>
     </div>
    </div>
    <div aria-labelledby="p-wikibase-otherprojects-label" class="portal" id="p-wikibase-otherprojects" role="navigation">
     <h3 id="p-wikibase-otherprojects-label">
      <b>[mkey1][symbolx][pkeyx][symbolx][keyword1][bracketl1][keywordx][bracketr1][symbolx][bracketl2][keywordx][bracketr2][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx]</b>
     </h3>
     <div class="body">
      <ul>
       <li class="wb-otherproject-link wb-otherproject-commons">
        [linkx]
        
       </li>
      </ul>
     </div>
    </div>
    <div aria-labelledby="p-coll-print_export-label" class="portal" id="p-coll-print_export" role="navigation">
     <h3 id="p-coll-print_export-label">
      [mkey1][symbolx][pkeyx][symbolx][keyword1][bracketl1][keywordx][bracketr1][symbolx][bracketl2][keywordx][bracketr2][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx]
     </h3>
     <div class="body">
      [keywordx][symbolx][keywordx][symbolx][bracketl6][keywordx][bracketr6][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][linkx]<li>[linkx]</li>[keywordx]
     </div>
    </div>
    <div aria-labelledby="p-lang-label" class="portal" id="p-lang" role="navigation">
     <h3 id="p-lang-label">
      <b>[mkey1][symbolx][pkeyx][symbolx][keyword1][bracketl1][keywordx][bracketr1][symbolx][bracketl2][keywordx][bracketr2][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx]</b>
     </h3>
     <div class="body">
      <ul>
       <li class="interlanguage-link interwiki-af">
        [ahref]
        
       </li>
       <li class="interlanguage-link interwiki-als">
        [linkx]
        
       </li>
       <li class="interlanguage-link interwiki-am">
        [linkx]
        
       </li>
       <li class="interlanguage-link interwiki-an">
        [linkx]
        
       </li>
       <li class="interlanguage-link interwiki-ang">
        [linkx]
        
       </li>
       <li class="interlanguage-link interwiki-ar">
        [linkx]
        
       </li>
       <li class="interlanguage-link interwiki-arz">
        [linkx]
        
       </li>
       <li class="interlanguage-link interwiki-as">
        [ahref]
        
       </li>
       <li class="interlanguage-link interwiki-ast">
        [linkx]
         [mkey1][linkx][keywordx][symbolx][keywordx][symbolx][bracketl1][keywordx][bracketr1][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][linkx][pkeyx][pkeyx][keywordx][keywordx][symbolx][keywordx][symbolx][bracketl2][keywordx][bracketr2][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][bracketl3][keywordx][bracketr3][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][keywordx][symbolx][keywordx][symbolx][bracketl4][keywordx][bracketr4][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][bracketl5][keywordx][bracketr5][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][pkeyx][pkeyx][linkx][mkey1][linkx][ahref]
        
       </li>
       <li class="interlanguage-link interwiki-ay">
        [ahref]
        
       </li>
       <li class="interlanguage-link interwiki-az">
        [ahref]
        
       </li>
       <li class="interlanguage-link interwiki-ba">
        [ahref]
        
       </li>
       <li class="interlanguage-link interwiki-bar">
        <a class="interlanguage-link-target" href="/wiki/Kategorie:Staat_in_Afrika" hreflang="bar" lang="bar" title="Kategorie:Staat in Afrika – Bavarian">
         Boarisch
        </a>
       </li>
       <li class="interlanguage-link interwiki-bat-smg">
        <a class="interlanguage-link-target" href="/wiki/Kateguor%C4%97j%C4%97:Afr%C4%97kas_valst%C4%ABb%C4%97s" hreflang="sgs" lang="sgs" title="Kateguorėjė:Afrėkas valstībės – Samogitian">
         Žemaitėška
        </a>
       </li>
       <li class="interlanguage-link interwiki-bcl">
        [ahref]
        
       </li>
       <li class="interlanguage-link interwiki-be">
        [ahref]
        
       </li>
       <li class="interlanguage-link interwiki-be-x-old">
        [linkx]
        
       </li>
       <li class="interlanguage-link interwiki-bg">
        [ahref]
        
       </li>
       <li class="interlanguage-link interwiki-bh">
        [linkx]
        
       </li>
       <li class="interlanguage-link interwiki-bn">
        [linkx]
        
       </li>
       <li class="interlanguage-link interwiki-bo">
        [linkx]
        
       </li>
       <li class="interlanguage-link interwiki-br">
        [ahref]
        
       </li>
       <li class="interlanguage-link interwiki-bs">
        [ahref]
        
       </li>
       <li class="interlanguage-link interwiki-cbk-zam">
        [linkx]
        
       </li>
       <li class="interlanguage-link interwiki-cdo">
        [linkx]
        
       </li>
       <li class="interlanguage-link interwiki-ceb">
        [linkx]
        
       </li>
       <li class="interlanguage-link interwiki-ckb">
        [linkx]
        
       </li>
       <li class="interlanguage-link interwiki-crh">
        [ahref]
        
       </li>
       <li class="interlanguage-link interwiki-cs">
        [ahref]
        
       </li>
       <li class="interlanguage-link interwiki-cv">
        <a class="interlanguage-link-target" href="/wiki/%D0%9A%D0%B0%D1%82%D0%B5%D0%B3%D0%BE%D1%80%D0%B8:%D0%90%D1%84%D1%80%D0%B8%D0%BA%D0%B0_%D0%BF%D0%B0%D1%82%D1%88%D0%B0%D0%BB%C4%83%D1%85%C4%95%D1%81%D0%B5%D0%BC" hreflang="cv" lang="cv" title="Категори:Африка патшалăхĕсем – 추바시어">
         Чӑвашла
        </a>
       </li>
       <li class="interlanguage-link interwiki-cy">
        <a class="interlanguage-link-target" href="/wiki/Categori:Gwledydd_Affrica" hreflang="cy" lang="cy" title="Categori:Gwledydd Affrica – 웨일스어">
         Cymraeg[pkeyx]<li>[keywordx][symbolx][keywordx][symbolx][bracketl18][keywordx][bracketr18][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx]</li>[ahref][keywordx][symbolx][keywordx][symbolx][bracketl1][keywordx][bracketr1][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx]
        </a>
       </li>
       <li class="interlanguage-link interwiki-da">
        [ahref]
        
       </li>
       <li class="interlanguage-link interwiki-de">
        <a class="interlanguage-link-target" href="/wiki/Kategorie:Staat_in_Afrika" hreflang="de" lang="de" title="Kategorie:Staat in Afrika – 독일어">
         Deutsch
        </a>
       </li>
       <li class="interlanguage-link interwiki-diq">
        [linkx]
        
       </li>
       <li class="interlanguage-link interwiki-dsb">
        [linkx]
        
       </li>
       <li class="interlanguage-link interwiki-ee">
        [linkx]
        
       </li>
       <li class="interlanguage-link interwiki-el">
        [ahref]
        
       </li>
       <li class="interlanguage-link interwiki-en">
        [linkx]
        
       </li>
       <li class="interlanguage-link interwiki-eo">
        [ahref]
        
       </li>
       <li class="interlanguage-link interwiki-es">
        [ahref]
        
       </li>
       <li class="interlanguage-link interwiki-et">
        [linkx]
        
       </li>
       <li class="interlanguage-link interwiki-eu">
        [ahref]
        
       </li>
       <li class="interlanguage-link interwiki-fa">
        [keywordx][symbolx][keywordx][symbolx][bracketl6][keywordx][bracketr6][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][ahref][mkey1][pkeyx][mkey1][mkey1][mkey1][linkx][keywordx][symbolx][keywordx][symbolx][bracketl7][keywordx][bracketr7][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][linkx][mkey1][linkx][linkx][linkx][mkey1][mkey1][linkx][pkeyx][pkeyx][mkey1][keywordx]
       </li>
       <li class="interlanguage-link interwiki-fi">
        [linkx]
        
       </li>
       <li class="interlanguage-link interwiki-fiu-vro">
        [linkx]
        
       </li>
       <li class="interlanguage-link interwiki-fo">
        [linkx]
        
       </li>
       <li class="interlanguage-link interwiki-fr">
        [ahref]
        
       </li>
       <li class="interlanguage-link interwiki-frp">
        [ahref]
        
       </li>
       <li class="interlanguage-link interwiki-fy">
        [linkx]
        
       </li>
       <li class="interlanguage-link interwiki-ga">
        [linkx]
        
       </li>
       <li class="interlanguage-link interwiki-gag">
        [linkx]
        
       </li>
       <li class="interlanguage-link interwiki-gl">
        [linkx]
        
       </li>
       <li class="interlanguage-link interwiki-gn">
        [linkx]
        
       </li>
       <li class="interlanguage-link interwiki-gu">
        [ahref]
        
       </li>
       <li class="interlanguage-link interwiki-gv">
        [linkx]
        
       </li>
       <li class="interlanguage-link interwiki-ha">
        [linkx]
        
       </li>
       <li class="interlanguage-link interwiki-he">
        [linkx]
        
       </li>
       <li class="interlanguage-link interwiki-hi">
        [linkx]
        
       </li>
       <li class="interlanguage-link interwiki-hr">
        [linkx]
        
       </li>
       <li class="interlanguage-link interwiki-hsb">
        [ahref]
        
       </li>
       <li class="interlanguage-link interwiki-hu">
        [linkx]
        
       </li>
       <li class="interlanguage-link interwiki-hy">
        <a class="interlanguage-link-target" href="/wiki/%D4%BF%D5%A1%D5%BF%D5%A5%D5%A3%D5%B8%D6%80%D5%AB%D5%A1:%D4%B1%D6%86%D6%80%D5%AB%D5%AF%D5%A1%D5%B5%D5%AB_%D5%A5%D6%80%D5%AF%D6%80%D5%B6%D5%A5%D6%80" hreflang="hy" lang="hy" title="Կատեգորիա:Աֆրիկայի երկրներ – 아르메니아어">
         Հայերեն
        </a>
       </li>
       <li class="interlanguage-link interwiki-ia">
        [linkx]
        
       </li>
       <li class="interlanguage-link interwiki-id">
        <a class="interlanguage-link-target" href="/wiki/Kategori:Negara_di_Afrika" hreflang="id" lang="id" title="Kategori:Negara di Afrika – 인도네시아어">
         Bahasa Indonesia
        </a>
       </li>
       <li class="interlanguage-link interwiki-ie">
        [linkx]
        
       </li>
       <li class="interlanguage-link interwiki-ig">
        [linkx]
        
       </li>
       <li class="interlanguage-link interwiki-ilo">
        [ahref]
        
       </li>
       <li class="interlanguage-link interwiki-is">
        [linkx]
        
       </li>
       <li class="interlanguage-link interwiki-it">
        [ahref]
        
       </li>
       <li class="interlanguage-link interwiki-ja">
        [linkx]
        
       </li>
       <li class="interlanguage-link interwiki-jv">
        [linkx]
        
       </li>
       <li class="interlanguage-link interwiki-ka">
        [ahref]
        
       </li>
       <li class="interlanguage-link interwiki-kab">
        [ahref]
        
       </li>
       <li class="interlanguage-link interwiki-kbd">
        [linkx]
        
       </li>
       <li class="interlanguage-link interwiki-kg">
        [linkx]
        
       </li>
       <li class="interlanguage-link interwiki-kk">
        [linkx]
        
       </li>
       <li class="interlanguage-link interwiki-kn">
        [linkx]
        
       </li>
       <li class="interlanguage-link interwiki-koi">
        [ahref]
        
       </li>
       <li class="interlanguage-link interwiki-ku">
        [ahref]
        
       </li>
       <li class="interlanguage-link interwiki-kw">
        <a class="interlanguage-link-target" href="/wiki/Klass:Gwlasow_yn_Afrika" hreflang="kw" lang="kw" title="Klass:Gwlasow yn Afrika – 콘월어">
         Kernowek
        </a>
       </li>
       <li class="interlanguage-link interwiki-ky">
        <a class="interlanguage-link-target" href="/wiki/%D0%9A%D0%B0%D1%82%D0%B5%D0%B3%D0%BE%D1%80%D0%B8%D1%8F:%D0%90%D1%84%D1%80%D0%B8%D0%BA%D0%B0_%D3%A9%D0%BB%D0%BA%D3%A9%D0%BB%D3%A9%D1%80%D2%AF" hreflang="ky" lang="ky" title="Категория:Африка өлкөлөрү – 키르기스어">
         Кыргызча
        </a>
       </li>
       <li class="interlanguage-link interwiki-la">
        [linkx]
        
       </li>
       <li class="interlanguage-link interwiki-lad">
        [linkx]
        
       </li>
       <li class="interlanguage-link interwiki-lb">
        [linkx]
        
       </li>
       <li class="interlanguage-link interwiki-lez">
        [linkx]
        
       </li>
       <li class="interlanguage-link interwiki-lfn">
        <a class="interlanguage-link-target" href="/wiki/Categoria:Paises_de_Africa" hreflang="lfn" lang="lfn" title="Categoria:Paises de Africa – 링구아 프랑카 노바">
         Lingua Franca Nova
        </a>
       </li>
       <li class="interlanguage-link interwiki-lg">
        <a class="interlanguage-link-target" href="/wiki/Category:Amawanga_g%27Afirika" hreflang="lg" lang="lg" title="Category:Amawanga g'Afirika – 간다어">
         Luganda
        </a>
       </li>
       <li class="interlanguage-link interwiki-lij">
        [ahref]
        
       </li>
       <li class="interlanguage-link interwiki-ln">
        [ahref]
        
       </li>
       <li class="interlanguage-link interwiki-lt">
        [linkx]
        
       </li>
       <li class="interlanguage-link interwiki-ltg">
        [ahref]
        
       </li>
       <li class="interlanguage-link interwiki-lv">
        [ahref]
        
       </li>
       <li class="interlanguage-link interwiki-mdf">
        [ahref]
        
       </li>
       <li class="interlanguage-link interwiki-mg">
        [linkx]
        
       </li>
       <li class="interlanguage-link interwiki-mhr">
        [ahref]
        
       </li>
       <li class="interlanguage-link interwiki-min">
        [ahref]
        
       </li>
       <li class="interlanguage-link interwiki-mk">
        [ahref]
        
       </li>
       <li class="interlanguage-link interwiki-ml">
        [ahref]
        
       </li>
       <li class="interlanguage-link interwiki-mn">
        [linkx]
         [linkx][keywordx][keywordx][symbolx][keywordx][symbolx][bracketl7][keywordx][bracketr7][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx]<li>[keywordx][symbolx][keywordx][symbolx][bracketl8][keywordx][bracketr8][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx]</li>
        
       </li>
       <li class="interlanguage-link interwiki-mr">
        [linkx]
        
       </li>
       <li class="interlanguage-link interwiki-mrj">
        [ahref]
        
       </li>
       <li class="interlanguage-link interwiki-ms">
        [ahref]
        
       </li>
       <li class="interlanguage-link interwiki-mt">
        [ahref]
         [keywordx][symbolx][keywordx][symbolx][bracketl2][keywordx][bracketr2][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx]<li>[ahref]</li>[keywordx]<li>[keywordx][symbolx][keywordx][symbolx][bracketl3][keywordx][bracketr3][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx]</li>[keywordx][symbolx][keywordx][symbolx][bracketl4][keywordx][bracketr4][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx]
        
       </li>
       <li class="interlanguage-link interwiki-mwl">
        [ahref]
        
       </li>
       <li class="interlanguage-link interwiki-my">
        [ahref]
        
       </li>
       <li class="interlanguage-link interwiki-mzn">
        [ahref]
        
       </li>
       <li class="interlanguage-link interwiki-na">
        [linkx]
        
       </li>
       <li class="interlanguage-link interwiki-nl">
        [linkx]
        
       </li>
       <li class="interlanguage-link interwiki-nn">
        [ahref]
        
       </li>
       <li class="interlanguage-link interwiki-no">
        [linkx]
        
       </li>
       <li class="interlanguage-link interwiki-nov">
        [ahref]
        
       </li>
       <li class="interlanguage-link interwiki-nso">
        [ahref]
        
       </li>
       <li class="interlanguage-link interwiki-nv">
        <a class="interlanguage-link-target" href="/wiki/T%CA%BC%C3%A1%C3%A1%C5%82%C3%A1h%C3%A1gi_%C3%A1t%CA%BC%C3%A9ego:Naakaii_%C5%81izhin%C3%AD_Bik%C3%A9yah" hreflang="nv" lang="nv" title="Tʼááłáhági átʼéego:Naakaii Łizhiní Bikéyah – 나바호어">
         Diné bizaad
        </a>
       </li>
       <li class="interlanguage-link interwiki-ny">
        [linkx]
        
       </li>
       <li class="interlanguage-link interwiki-oc">
        [linkx]
        
       </li>
       <li class="interlanguage-link interwiki-olo">
        [linkx]
        
       </li>
       <li class="interlanguage-link interwiki-or">
        [linkx]
        
       </li>
       <li class="interlanguage-link interwiki-os">
        [ahref]
        
       </li>
       <li class="interlanguage-link interwiki-pa">
        [ahref]
        
       </li>
       <li class="interlanguage-link interwiki-pdc">
        [linkx]
        
       </li>
       <li class="interlanguage-link interwiki-pfl">
        [ahref]
        
       </li>
       <li class="interlanguage-link interwiki-pl">
        [ahref]
        
       </li>
       <li class="interlanguage-link interwiki-pnt">
        [linkx]
        
       </li>
       <li class="interlanguage-link interwiki-ps">
        [linkx]
        
       </li>
       <li class="interlanguage-link interwiki-pt">
        [ahref]
        
       </li>
       <li class="interlanguage-link interwiki-qu">
        [ahref]
        
       </li>
       <li class="interlanguage-link interwiki-rm">
        [ahref]
        
       </li>
       <li class="interlanguage-link interwiki-ro">
        [linkx]
        
       </li>
       <li class="interlanguage-link interwiki-roa-tara">
        [linkx]
        
       </li>
       <li class="interlanguage-link interwiki-ru">
        [ahref]
        
       </li>
       <li class="interlanguage-link interwiki-rue">
        [linkx]
        
       </li>
       <li class="interlanguage-link interwiki-sa">
        <a class="interlanguage-link-target" href="/wiki/%E0%A4%B5%E0%A4%B0%E0%A5%8D%E0%A4%97%E0%A4%83:%E0%A4%86%E0%A4%AB%E0%A5%8D%E0%A4%B0%E0%A4%BF%E0%A4%95%E0%A4%BE%E0%A4%96%E0%A4%A3%E0%A5%8D%E0%A4%A1%E0%A4%B8%E0%A5%8D%E0%A4%AF_%E0%A4%B0%E0%A4%BE%E0%A4%B7%E0%A5%8D%E0%A4%9F%E0%A5%8D%E0%A4%B0%E0%A4%BE%E0%A4%A3%E0%A4%BF" hreflang="sa" lang="sa" title="वर्गः:आफ्रिकाखण्डस्य राष्ट्राणि – 산스크리트어">
         संस्कृतम्
        </a>
       </li>
       <li class="interlanguage-link interwiki-sah">
        <a class="interlanguage-link-target" href="/wiki/%D0%9A%D0%B0%D1%82%D0%B5%D0%B3%D0%BE%D1%80%D0%B8%D1%8F:%D0%90%D1%84%D1%80%D0%B8%D0%BA%D0%B0_%D0%B4%D0%BE%D0%B9%D0%B4%D1%83%D0%BB%D0%B0%D1%80%D0%B0" hreflang="sah" lang="sah" title="Категория:Африка дойдулара – 야쿠트어">
         Саха тыла
        </a>
       </li>
       <li class="interlanguage-link interwiki-sc">
        [ahref]
        
       </li>
       <li class="interlanguage-link interwiki-sco">
        [ahref]
        
       </li>
       <li class="interlanguage-link interwiki-se">
        <a class="interlanguage-link-target" href="/wiki/Kategoriija:Afrihk%C3%A1_riikkat" hreflang="se" lang="se" title="Kategoriija:Afrihká riikkat – 북부 사미어">
         Davvisámegiella
        </a>
       </li>
       <li class="interlanguage-link interwiki-sh">
        [ahref]
        
       </li>
       <li class="interlanguage-link interwiki-si">
        [linkx]
        
       </li>
       <li class="interlanguage-link interwiki-simple">
        [linkx]
        
       </li>
       <li class="interlanguage-link interwiki-sk">
        <a class="interlanguage-link-target" href="/wiki/Kateg%C3%B3ria:%C5%A0t%C3%A1ty_v_Afrike" hreflang="sk" lang="sk" title="Kategória:Štáty v Afrike – 슬로바키아어">
         Slovenčina
        </a>
       </li>
       <li class="interlanguage-link interwiki-sl">
        [linkx]
        
       </li>
       <li class="interlanguage-link interwiki-sn">
        [linkx]
        
       </li>
       <li class="interlanguage-link interwiki-so">
        [linkx]
        
       </li>
       <li class="interlanguage-link interwiki-sq">
        [linkx]
        
       </li>
       <li class="interlanguage-link interwiki-sr">
        [ahref]
        
       </li>
       <li class="interlanguage-link interwiki-stq">
        <a class="interlanguage-link-target" href="/wiki/Kategorie:Lound_in_Afrikoa" hreflang="stq" lang="stq" title="Kategorie:Lound in Afrikoa – Saterland Frisian">
         Seeltersk
        </a>
       </li>
       <li class="interlanguage-link interwiki-su">
        <a class="interlanguage-link-target" href="/wiki/Kategori:Nagara_di_Afrika" hreflang="su" lang="su" title="Kategori:Nagara di Afrika – 순다어">
         Basa Sunda
        </a>
       </li>
       <li class="interlanguage-link interwiki-sv">
        [ahref]
        
       </li>
       <li class="interlanguage-link interwiki-sw">
        [ahref]
        
       </li>
       <li class="interlanguage-link interwiki-szl">
        [ahref]
        
       </li>
       <li class="interlanguage-link interwiki-ta">
        <a class="interlanguage-link-target" href="/wiki/%E0%AE%AA%E0%AE%95%E0%AF%81%E0%AE%AA%E0%AF%8D%E0%AE%AA%E0%AF%81:%E0%AE%86%E0%AE%AA%E0%AF%8D%E0%AE%AA%E0%AE%BF%E0%AE%B0%E0%AE%BF%E0%AE%95%E0%AF%8D%E0%AE%95_%E0%AE%A8%E0%AE%BE%E0%AE%9F%E0%AF%81%E0%AE%95%E0%AE%B3%E0%AF%8D" hreflang="ta" lang="ta" title="பகுப்பு:ஆப்பிரிக்க நாடுகள் – 타밀어">
         தமிழ்
        </a>
       </li>
       <li class="interlanguage-link interwiki-te">
        [ahref]
        
       </li>
       <li class="interlanguage-link interwiki-tg">
        <a class="interlanguage-link-target" href="/wiki/%D0%93%D1%83%D1%80%D3%AF%D2%B3:%D0%94%D0%B0%D0%B2%D0%BB%D0%B0%D1%82%D2%B3%D0%BE%D0%B8_%D0%90%D1%84%D1%80%D0%B8%D2%9B%D0%BE" hreflang="tg" lang="tg" title="Гурӯҳ:Давлатҳои Африқо – 타지크어">
         Тоҷикӣ
        </a>
       </li>
       <li class="interlanguage-link interwiki-th">
        [ahref]
        
       </li>
       <li class="interlanguage-link interwiki-ti">
        [ahref]
        
       </li>
       <li class="interlanguage-link interwiki-tk">
        <a class="interlanguage-link-target" href="/wiki/Kategori%C3%BDa:Afrikany%C5%88_%C3%BDurtlary" hreflang="tk" lang="tk" title="Kategoriýa:Afrikanyň ýurtlary – 투르크멘어">
         Türkmençe
        </a>
       </li>
       <li class="interlanguage-link interwiki-tl">
        [linkx]
        
       </li>
       <li class="interlanguage-link interwiki-tpi">
        [linkx]
        
       </li>
       <li class="interlanguage-link interwiki-tr">
        [ahref]
        
       </li>
       <li class="interlanguage-link interwiki-tt">
        [ahref]
        
       </li>
       <li class="interlanguage-link interwiki-udm">
        [linkx]
        
       </li>
       <li class="interlanguage-link interwiki-uk">
        [linkx]
        
       </li>
       <li class="interlanguage-link interwiki-ur">
        [linkx]
        
       </li>
       <li class="interlanguage-link interwiki-uz">
        [linkx]
        
       </li>
       <li class="interlanguage-link interwiki-vec">
        [ahref]
        
       </li>
       <li class="interlanguage-link interwiki-vep">
        <a class="interlanguage-link-target" href="/wiki/Kategorii:Afrikan_valdkundad" hreflang="vep" lang="vep" title="Kategorii:Afrikan valdkundad – Veps">
         Vepsän kel’
        </a>
       </li>
       <li class="interlanguage-link interwiki-vi">
        [ahref]
        
       </li>
       <li class="interlanguage-link interwiki-vls">
        [linkx]
        
       </li>
       <li class="interlanguage-link interwiki-vo">
        <a class="interlanguage-link-target" href="/wiki/Klad:L%C3%A4ns_in_Frikop" hreflang="vo" lang="vo" title="Klad:Läns in Frikop – 볼라퓌크어">
         Volapük
        </a>
       </li>
       <li class="interlanguage-link interwiki-wuu">
        [ahref]
        
       </li>
       <li class="interlanguage-link interwiki-xh">
        [ahref]
        
       </li>
       <li class="interlanguage-link interwiki-xmf">
        [linkx]
        
       </li>
       <li class="interlanguage-link interwiki-yi">
        <a class="interlanguage-link-target" href="/wiki/%D7%A7%D7%90%D6%B7%D7%98%D7%A2%D7%92%D7%90%D6%B8%D7%A8%D7%99%D7%A2:%D7%9C%D7%A2%D7%A0%D7%93%D7%A2%D7%A8_%D7%90%D7%99%D7%9F_%D7%90%D7%A4%D7%A8%D7%99%D7%A7%D7%A2" hreflang="yi" lang="yi" title="קאַטעגאָריע:לענדער אין אפריקע – 이디시어">
         ייִדיש
        </a>
       </li>
       <li class="interlanguage-link interwiki-yo">
        [ahref]
        
       </li>
       <li class="interlanguage-link interwiki-za">
        [ahref]
        
       </li>
       <li class="interlanguage-link interwiki-zh">
        [ahref]
        
       </li>
       <li class="interlanguage-link interwiki-zh-min-nan">
        [linkx]
        
       </li>
       <li class="interlanguage-link interwiki-zh-yue">
        [linkx][keywordx][symbolx][keywordx][symbolx][bracketl14][keywordx][bracketr14][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][linkx][ahref][linkx][keywordx][keywordx][symbolx][keywordx][symbolx][bracketl15][keywordx][bracketr15][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][pkeyx]
       </li>
       <li class="interlanguage-link interwiki-zu">
        [ahref]
        
       </li>
      </ul>
      <div class="after-portlet after-portlet-lang">
       <span class="wb-langlinks-edit wb-langlinks-link">
        [ahref]
        
       </span>
      </div>
     </div>
    </div>
   </div>
  </div>
  <div id="footer" role="contentinfo">
   <ul id="footer-info">
    <li id="footer-info-lastmod">
     이 문서는 2018년 6월 18일 (월) 23:11에 마지막으로 편집되었습니다.
    </li>
    <li id="footer-info-copyright">
     모든 문서는
     [linkx]
     
     에 따라 사용할 수 있으며, 추가적인 조건이 적용될 수 있습니다. 자세한 내용은
     [ahref]
     
     을 참고하십시오.
     <br/>
     Wikipedia®는 미국 및 다른 국가에 등록되어 있는
     <a class="internal" href="g">
      Wikimedia Foundation, Inc.
     </a>
     소유의 등록 상표입니다.
    </li>
   </ul>
   <ul id="footer-places">
    <li id="footer-places-privacy">
     [linkx]
     
    </li>
    <li id="footer-places-about">
     [linkx]
     
    </li>
    <li id="footer-places-disclaimer">
     <a href="/wiki/%EC%9C%84%ED%82%A4%EB%B0%B1%EA%B3%BC:%EB%A9%B4%EC%B1%85_%EC%A1%B0%ED%95%AD" title="위키백과:면책 조항">
      면책 조항
     </a>
    </li>
    <li id="footer-places-developers">
     <a href="/wiki/Special:MyLanguage/How_to_contribute">
      개발자
     </a>
    </li>
    <li id="footer-places-cookiestatement">
     [linkx]
     
    </li>
    <li id="footer-places-mobileview">
     [linkx]
     
    </li>
   </ul>
   <ul class="noprint" id="footer-icons">
    <li id="footer-copyrightico">
     [linkx]
     
    </li>
    <li id="footer-poweredbyico">
     [ahref]
     
    </li>
   </ul>
   <div style="clear: both;">
   </div>
  </div>
  <b style="color:black;background-color:#a0ffff">
   jnice09-ipp30-wq-zq-0337
  </b>
 </body>
</html>
|<---