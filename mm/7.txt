--->|<!DOCTYPE html>
<html class="no-js" lang="ko-KR">
 <head>
  <meta content="IE=edge,chrome=1" http-equiv="X-UA-Compatible"/>
  <meta charset="utf-8"/>
  <meta content="width=device-width, initial-scale=1, maximum-scale=1, user-scalable=no" name="viewport"/>
  <title>
   [mkey1][symbolx][pkey1][symbolx][keyword1][bracketl1][bracketr1][symbolx][bracketl2][siter1][bracketr2][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx]
  </title>
  <meta content="[mkey1][symbolx][pkey1][symbolx][keyword1][bracketl1][bracketr1][symbolx][bracketl2][siter1][bracketr2][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx]" name="keywords"/>
  <meta content="[mkey1][symbolx][pkey1][symbolx][keyword1][bracketl1][bracketr1][symbolx][bracketl2][siter1][bracketr2][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx]" itemprop="description" name="description">
  </meta>
 </head>
 <body class="page page-id-9879 page-child parent-pageid-201 page-template-default">
  <div class="site_wrap ">
   <a class="screen-readerbox" href="y">
    본문으로 바로가기
   </a>
   <a class="screen-readerbox" href="t">
    주메뉴 바로가기
   </a>
   <a class="screen-readerbox" href="m">
    이용자 맞춤 서비스 바로가기
   </a>
   <div class="site_boxcontainer">
    <div class="m_target_sidebox">
     <div class="m_container">
      <div class="quick_m_nav">
       <ul class="main_menu">
        <li>
         <a href="/" target="_blank" title="새창으로 열기">
          입학안내
         </a>
        </li>
        <li>
         [ahref]
         
        </li>
        <li>
         [linkx]
         
        </li>
        <li>
         [ahref]
         
        </li>
        <li>
         [ahref]
         
        </li>
        <li>
         [ahref]
         
        </li>
        <li>
         [linkx]
         
        </li>
       </ul>
      </div>
      <div class="target_m_nav">
       <ul class="main_menu">
        <li>
         [linkx]
         
         <ul class="sub_menu">
          <li>
           <a href="/Main.do?cmd=viewHelpMain&amp;mainMenuId=menu_00053&amp;subMenuId=menu_00235&amp;menuType=menu" target="_blank" title="새창으로 열기">
            개설과목정보
           </a>
          </li>
          <li>
           [ahref]
           
          </li>
          <li>
           <a href="/academics/academic-info/course-catalog/">
            대학요람
           </a>
          </li>
          <li>
           <a href="/campus-life/postechian-life/cultural-program/">
            문화행사
           </a>
          </li>
          <li>
           [ahref]
           
          </li>
          <li>
           <a href="/campus-life/scholarships/">
            장학제도
           </a>
          </li>
          <li>
           [linkx]
           
          </li>
          <li>
           <a href="/academics/academic-info/academic-calendar/">
            학사일정
           </a>
          </li>
          <li>
           [ahref]
           
          </li>
         </ul>
        </li>
        <li>
         <a href=";">
          교직원
         </a>
         <ul class="sub_menu">
          <li>
           [ahref]
           
          </li>
          <li>
           [linkx]
           
          </li>
          <li>
           [ahref]
           
          </li>
          <li>
           <a href="/e-postech/news/">
            새소식
           </a>
          </li>
         </ul>
        </li>
        <li>
         [linkx]
         
         <ul class="sub_menu">
          <li>
           [ahref]
           
          </li>
          <li>
           [linkx]
            <li>[link]</li><li>[keywordx][symbolx][keywordx][symbolx][bracketl1][keywordx][bracketr1][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx]</li>[link]
           
          </li>
          <li>
           <a href="/about-postech/campus-life/campus-map/">
            오시는길
           </a>
          </li>
          <li>
           [ahref]
            [link][keywordx][symbolx][keywordx][symbolx][bracketl5][keywordx][bracketr5][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx]<li>[link]</li><li>[keywordx][symbolx][keywordx][symbolx][bracketl6][keywordx][bracketr6][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx]</li>
           
          </li>
         </ul>
        </li>
        <li>
         [ahref]
         
         <ul class="sub_menu">
          <li>
           <a href="/" target="_blank" title="새창으로 열기">
            총동창회
           </a>
          </li>
          <li>
           <a href="/" target="_blank" title="새창으로 열기">
            포스텍 발전기금
           </a>
          </li>
          <li>
           <a href="/e-postech/newsletter/">
            포스텍 뉴스레터
           </a>
          </li>
         </ul>
        </li>
       </ul>
      </div>
      <div class="h_top_links h_top_unit">
       <ul>
        <li class="link1">
         [ahref]
         
        </li>
        <li class="link2">
         [linkx]
         
        </li>
        <li class="link6">
         <a href="/postech2020/" target="_blank" title="Instagram 새창열기">
          Instagram[content2][content3][linkx][content4][linkx][content5]
         </a>
        </li>
        <li class="link3">
         [ahref]
         
        </li>
        <li class="link5">
         [ahref]
         
        </li>
       </ul>
      </div>
      <div class="rang_m_box">
       <ul>
        <li class="active">
         <a href="/">
          한국어
         </a>
        </li>
        <li>
         [ahref]
         
        </li>
       </ul>
      </div>
     </div>
    </div>
    <div class="site" id="page">
     <div class="site-inner">
      <div class="site-header" id="masthead" role="banner">
       <div class="header_wrap">
        <div class="box_bg">
         <div class="box_container">
          <div class="h_top_cont">
           <div class="h_top_container">
            <div class="h_top_box">
             <div class="h_top_links h_top_unit">
              <ul>
               <li class="link1">
                [ahref]
                
               </li>
               <li class="link2">
                <a href="/postech2020" target="_blank" title="twitter 새창열기">
                 <i class="icon_item">
                  Twitter
                 </i>
                </a>
               </li>
               <li class="link6">
                [linkx]
                
               </li>
               <li class="link3">
                <a href="/user/postechvision2020" target="_blank" title="Youtube 새창열기">
                 <i class="icon_item">
                  Youtube
                 </i>
                </a>
               </li>
               <li class="link4">
                [keywordx][symbolx][keywordx][symbolx][bracketl2][keywordx][bracketr2][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx]<li>[link]</li><li>[link]</li><li>[keywordx][symbolx][keywordx][symbolx][bracketl3][keywordx][bracketr3][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx]</li><li>[link]</li>
               </li>
               <li class="link5 sitemap">
                [linkx]
                
               </li>
               <li class="link5">
                <a class="login_pop" href="/login/" id="web_login" title="POVIS 바로가기">
                 POVIS
                </a>
               </li>
              </ul>
             </div>
             <div class="lang_box h_top_unit">
              <ul>
               <li class="kor active">
                [ahref]
                
               </li>
               <li class="eng">
                [ahref]
                
               </li>
              </ul>
             </div>
            </div>
           </div>
          </div>
          <div class="h_bottom_cont">
           <div class="logo_box">
            <a class="m_search_btnbox" href=";">
             search
            </a>
            <a class="login_pop m_login" href="/login/" id="mob_login" title="POVIS 바로가기">
             POVIS
            </a>
            <h1 class="logo">
             [mkey1][symbolx][pkey1][symbolx][keyword1][bracketl1][bracketr1][symbolx][bracketl2][siter1][bracketr2][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx]
            </h1>
            [linkx]
            
           </div>
           <div class="header_navi">
            <div class="header_navi_container">
             <div class="btn_box">
              <button class="navi_btn" type="button">
               <div class="open_btn">
                <span class="icon_item">
                </span>
                <span class="btn_title">
                 MENU OPEN
                </span>
               </div>
               <div class="close_btn">
                <span class="icon_item">
                </span>
                <span class="btn_title">
                 MENU CLOSE
                </span>
               </div>
              </button>
             </div>
             <div class="nav_box" id="nav_first">
              <div class="menu-main_navigation-container">
               <ul class="menu" id="menu-main_navigation">
                <li class="menu-item menu-item-type-post_type menu-item-object-page menu-item-has-children menu-item-921" id="menu-item-921">
                 <a href="/about-postech/president/">
                  대학소개
                  <span class="m_nav_btn">
                   button
                  </span>
                 </a>
                 <ul class="sub-menu">
                  <li class="menu-item menu-item-type-post_type menu-item-object-page menu-item-has-children menu-item-854" id="menu-item-854">
                   [ahref]
                   
                   <ul class="sub-menu">
                    <li class="menu-item menu-item-type-post_type menu-item-object-page menu-item-11521" id="menu-item-11521">
                     <a href="/about-postech/president/welcome-message/">
                      인사말
                     </a>
                    </li>
                    <li class="menu-item menu-item-type-post_type menu-item-object-page menu-item-11522" id="menu-item-11522">
                     <a href="/about-postech/president/biography/">
                      약력
                     </a>
                    </li>
                    <li class="menu-item menu-item-type-post_type menu-item-object-page menu-item-11523" id="menu-item-11523">
                     <a href="/about-postech/president/news/">
                      동정
                     </a>
                    </li>
                    <li class="menu-item menu-item-type-post_type menu-item-object-page menu-item-11524" id="menu-item-11524">
                     <a href="/about-postech/president/media-clipping/">
                      미디어 클리핑
                     </a>
                    </li>
                    <li class="menu-item menu-item-type-post_type menu-item-object-page menu-item-11525" id="menu-item-11525">
                     <a href="/about-postech/president/speeches/">
                      연설문
                     </a>
                    </li>
                    <li class="menu-item menu-item-type-post_type menu-item-object-page menu-item-11526" id="menu-item-11526">
                     [linkx]
                     
                    </li>
                   </ul>
                  </li>
                  <li class="menu-item menu-item-type-post_type menu-item-object-page menu-item-776" id="menu-item-776">
                   [ahref]
                   
                  </li>
                  <li class="menu-item menu-item-type-post_type menu-item-object-page menu-item-has-children menu-item-5023" id="menu-item-5023">
                   [linkx]
                   
                   <ul class="sub-menu">
                    <li class="menu-item menu-item-type-post_type menu-item-object-page menu-item-11505" id="menu-item-11505">
                     건학이념/설립배경<li>[keywordx][symbolx][keywordx][symbolx][bracketl4][keywordx][bracketr4][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx]</li><li>[link]</li><li>[link]</li>
                    </li>
                    <li class="menu-item menu-item-type-post_type menu-item-object-page menu-item-777" id="menu-item-777">
                     [ahref]
                     
                    </li>
                    <li class="menu-item menu-item-type-post_type menu-item-object-page menu-item-10636" id="menu-item-10636">
                     <a href="/about-postech/introduction-to-postech/history/">
                      주요연혁
                     </a>
                    </li>
                    <li class="menu-item menu-item-type-post_type menu-item-object-page menu-item-10637" id="menu-item-10637">
                     [ahref]
                     
                    </li>
                    <li class="menu-item menu-item-type-post_type menu-item-object-page menu-item-has-children menu-item-10638" id="menu-item-10638">
                     [linkx]
                     
                     <ul class="sub-menu">
                      <li class="menu-item menu-item-type-post_type menu-item-object-page menu-item-10869" id="menu-item-10869">
                       [ahref]
                       
                      </li>
                      <li class="menu-item menu-item-type-post_type menu-item-object-page menu-item-10868" id="menu-item-10868">
                       [linkx]
                       
                      </li>
                      <li class="menu-item menu-item-type-post_type menu-item-object-page menu-item-10871" id="menu-item-10871">
                       [linkx]
                       
                      </li>
                      <li class="menu-item menu-item-type-post_type menu-item-object-page menu-item-10870" id="menu-item-10870">
                       <a href="/about-postech/introduction-to-postech/motto/">
                        포스텍 상징
                       </a>
                      </li>
                     </ul>
                    </li>
                    <li class="menu-item menu-item-type-post_type menu-item-object-page menu-item-10639" id="menu-item-10639">
                     [ahref]
                     
                    </li>
                    <li class="menu-item menu-item-type-post_type menu-item-object-page menu-item-15616" id="menu-item-15616">
                     <a href="/about-postech/introduction-to-postech/video/">
                      홍보동영상
                     </a>
                    </li>
                    <li class="menu-item menu-item-type-post_type menu-item-object-page menu-item-19806" id="menu-item-19806">
                     <a href="/about-postech/introduction-to-postech/brochures/">
                      홍보 브로슈어
                     </a>
                    </li>
                   </ul>
                  </li>
                  <li class="menu-item menu-item-type-post_type menu-item-object-page menu-item-has-children menu-item-9995" id="menu-item-9995">
                   [ahref]
                   
                   <ul class="sub-menu">
                    <li class="menu-item menu-item-type-post_type menu-item-object-page menu-item-11506" id="menu-item-11506">
                     [linkx]
                     
                    </li>
                    <li class="menu-item menu-item-type-post_type menu-item-object-page menu-item-10645" id="menu-item-10645">
                     [linkx]
                     
                    </li>
                   </ul>
                  </li>
                  <li class="menu-item menu-item-type-post_type menu-item-object-page menu-item-26824" id="menu-item-26824">
                   <a href="/about-postech/open-shared-campus/">
                    POSTECH-연세대
                    <br/>
                    개방∙공유 캠퍼스
                   </a>
                  </li>
                  <li class="menu-item menu-item-type-post_type menu-item-object-page menu-item-has-children menu-item-15620" id="menu-item-15620">
                   [linkx]
                   
                   <ul class="sub-menu">
                    <li class="menu-item menu-item-type-post_type menu-item-object-page menu-item-15619" id="menu-item-15619">
                     [linkx]
                     
                    </li>
                    <li class="menu-item menu-item-type-post_type menu-item-object-page menu-item-10646" id="menu-item-10646">
                     [ahref]
                     
                    </li>
                    <li class="menu-item menu-item-type-post_type menu-item-object-page menu-item-10647" id="menu-item-10647">
                     [linkx]
                     
                    </li>
                   </ul>
                  </li>
                 </ul>
                </li>
                <li class="menu-item menu-item-type-post_type menu-item-object-page menu-item-has-children menu-item-11281" id="menu-item-11281">
                 [ahref]
                 
                 <ul class="sub-menu">
                  <li class="menu-item menu-item-type-post_type menu-item-object-page menu-item-11235" id="menu-item-11235">
                   <a href="/admission-education/admission-info/">
                    입학정보
                   </a>
                  </li>
                  <li class="menu-item menu-item-type-post_type menu-item-object-page menu-item-11238" id="menu-item-11238">
                   <a href="/admission-education/undergraduate/">
                    대학
                   </a>
                  </li>
                  <li class="menu-item menu-item-type-post_type menu-item-object-page menu-item-10578" id="menu-item-10578">
                   [linkx]
                   
                  </li>
                  <li class="menu-item menu-item-type-post_type menu-item-object-page menu-item-11256" id="menu-item-11256">
                   [ahref]
                   
                  </li>
                  <li class="menu-item menu-item-type-post_type menu-item-object-page menu-item-has-children menu-item-11327" id="menu-item-11327">
                   [linkx]
                   
                   <ul class="sub-menu">
                    <li class="menu-item menu-item-type-post_type menu-item-object-page menu-item-10581" id="menu-item-10581">
                     <a href="/admission-education/exchange/international-education-system/">
                      국제화환경
                     </a>
                    </li>
                    <li class="menu-item menu-item-type-post_type menu-item-object-page menu-item-12995" id="menu-item-12995">
                     <a href="/admission-education/exchange/postech-international-relations/">
                      국제화프로그램
                     </a>
                    </li>
                    <li class="menu-item menu-item-type-post_type menu-item-object-page menu-item-10644" id="menu-item-10644">
                     <a href="/admission-education/exchange/admissions-for-international-students/">
                      외국인교환학생초청
                     </a>
                    </li>
                    <li class="menu-item menu-item-type-post_type menu-item-object-page menu-item-10642" id="menu-item-10642">
                     [linkx]
                     
                    </li>
                   </ul>
                  </li>
                 </ul>
                </li>
                <li class="menu-item menu-item-type-post_type menu-item-object-page menu-item-has-children menu-item-11282" id="menu-item-11282">
                 <a href="/academics/academic-info/academic-calendar/">
                  학사지원
                  <span class="m_nav_btn">
                   button
                  </span>
                 </a>
                 <ul class="sub-menu">
                  <li class="menu-item menu-item-type-post_type menu-item-object-page menu-item-has-children menu-item-816" id="menu-item-816">
                   [linkx]
                   
                   <ul class="sub-menu">
                    <li class="menu-item menu-item-type-post_type menu-item-object-page menu-item-11510" id="menu-item-11510">
                     <a href="/academics/academic-info/academic-calendar/">
                      학사일정
                     </a>
                    </li>
                    <li class="menu-item menu-item-type-post_type menu-item-object-page menu-item-10584" id="menu-item-10584">
                     [ahref]
                     
                    </li>
                    <li class="menu-item menu-item-type-post_type menu-item-object-page menu-item-10585" id="menu-item-10585">
                     [ahref]
                     
                    </li>
                    <li class="menu-item menu-item-type-custom menu-item-object-custom menu-item-16050" id="menu-item-16050">
                     [linkx]
                     
                    </li>
                    <li class="menu-item menu-item-type-post_type menu-item-object-page menu-item-10586" id="menu-item-10586">
                     <a href="/academics/academic-info/certificate-request/">
                      증명서발급
                     </a>
                    </li>
                   </ul>
                  </li>
                  <li class="menu-item menu-item-type-post_type menu-item-object-page menu-item-has-children menu-item-26662" id="menu-item-26662">
                   [linkx]
                   
                   <ul class="sub-menu">
                    <li class="menu-item menu-item-type-post_type menu-item-object-page menu-item-21049" id="menu-item-21049">
                     [ahref]
                     
                    </li>
                    <li class="menu-item menu-item-type-post_type menu-item-object-page menu-item-has-children menu-item-14494" id="menu-item-14494">
                     <a href="/academics/academic-data/course-guide/">
                      교과과정
                     </a>
                     <ul class="sub-menu">
                      <li class="menu-item menu-item-type-post_type menu-item-object-page menu-item-14841" id="menu-item-14841">
                       [linkx]
                       
                      </li>
                      <li class="menu-item menu-item-type-post_type menu-item-object-page menu-item-14843" id="menu-item-14843">
                       <a href="/academics/academic-data/course-for-each-department/">
                        교과과정
                       </a>
                      </li>
                      <li class="menu-item menu-item-type-post_type menu-item-object-page menu-item-14842" id="menu-item-14842">
                       [linkx]
                       
                      </li>
                     </ul>
                    </li>
                   </ul>
                  </li>
                  <li class="menu-item menu-item-type-post_type menu-item-object-page menu-item-801" id="menu-item-801">
                   [linkx]
                   
                  </li>
                  <li class="menu-item menu-item-type-post_type menu-item-object-page menu-item-has-children menu-item-13941" id="menu-item-13941">
                   [ahref]
                   
                   <ul class="sub-menu">
                    <li class="menu-item menu-item-type-post_type menu-item-object-page menu-item-13946" id="menu-item-13946">
                     [ahref]
                     
                    </li>
                    <li class="menu-item menu-item-type-post_type menu-item-object-page menu-item-13945" id="menu-item-13945">
                     <a href="/academics/military-service/general-research-personnel/">
                      일반병무행정
                     </a>
                    </li>
                    <li class="menu-item menu-item-type-custom menu-item-object-custom menu-item-13947" id="menu-item-13947">
                     <a href="/wp-content/uploads/2016/05/millitary.pdf" target="_blank" title="새창으로 열기">
                      병역소개자료
                     </a>
                    </li>
                   </ul>
                  </li>
                 </ul>
                </li>
                <li class="menu-item menu-item-type-post_type menu-item-object-page menu-item-has-children menu-item-838" id="menu-item-838">
                 <a href="/research/research-activities/abstract/">
                  연구・산학
                  <span class="m_nav_btn">
                   button
                  </span>
                 </a>
                 <ul class="sub-menu">
                  <li class="menu-item menu-item-type-post_type menu-item-object-page menu-item-has-children menu-item-837" id="menu-item-837">
                   <a href="/research/research-activities/abstract/">
                    연구활동
                   </a>
                   <ul class="sub-menu">
                    <li class="menu-item menu-item-type-post_type menu-item-object-page menu-item-11514" id="menu-item-11514">
                     [ahref]
                     
                    </li>
                    <li class="menu-item menu-item-type-post_type menu-item-object-page menu-item-10589" id="menu-item-10589">
                     [linkx]
                     
                    </li>
                    <li class="menu-item menu-item-type-post_type menu-item-object-page menu-item-10590" id="menu-item-10590">
                     <a href="/research/research-activities/faculty-directory/">
                      교원검색
                     </a>
                    </li>
                    <li class="menu-item menu-item-type-post_type menu-item-object-page menu-item-10591" id="menu-item-10591">
                     <a href="/research/research-activities/research-infra/">
                      연구인프라
                     </a>
                    </li>
                   </ul>
                  </li>
                  <li class="menu-item menu-item-type-post_type menu-item-object-page menu-item-has-children menu-item-841" id="menu-item-841">
                   [linkx]
                   
                   <ul class="sub-menu">
                    <li class="menu-item menu-item-type-post_type menu-item-object-page menu-item-11515" id="menu-item-11515">
                     [linkx]
                     
                    </li>
                    <li class="menu-item menu-item-type-post_type menu-item-object-page menu-item-10592" id="menu-item-10592">
                     <a href="/research/research-centers/bk21-ibs/">
                      BK21 / IBS
                     </a>
                    </li>
                    <li class="menu-item menu-item-type-post_type menu-item-object-page menu-item-10593" id="menu-item-10593">
                     <a href="/research/research-centers/laboratories/">
                      연구 / 실험실
                     </a>
                    </li>
                   </ul>
                  </li>
                  <li class="menu-item menu-item-type-post_type menu-item-object-page menu-item-has-children menu-item-10600" id="menu-item-10600">
                   <a href="/research/research-ethic/research-ethics/">
                    연구윤리
                   </a>
                   <ul class="sub-menu">
                    <li class="menu-item menu-item-type-post_type menu-item-object-page menu-item-11601" id="menu-item-11601">
                     [linkx]
                     
                    </li>
                    <li class="menu-item menu-item-type-post_type menu-item-object-page menu-item-10601" id="menu-item-10601">
                     <a href="/research/research-ethic/bioethics/">
                      생명윤리
                     </a>
                    </li>
                    <li class="menu-item menu-item-type-post_type menu-item-object-page menu-item-10602" id="menu-item-10602">
                     <a href="/research/research-ethic/biosafety/">
                      생물안전
                     </a>
                    </li>
                    <li class="menu-item menu-item-type-post_type menu-item-object-page menu-item-10603" id="menu-item-10603">
                     [ahref]
                     
                    </li>
                   </ul>
                  </li>
                  <li class="menu-item menu-item-type-post_type menu-item-object-page menu-item-has-children menu-item-10905" id="menu-item-10905">
                   <a href="/research/research-and-business-development-foundation/about-research-and-business-development-foundation/">
                    산학협력단
                   </a>
                   <ul class="sub-menu">
                    <li class="menu-item menu-item-type-post_type menu-item-object-page menu-item-10604" id="menu-item-10604">
                     [ahref]
                     
                    </li>
                   </ul>
                  </li>
                 </ul>
                </li>
                <li class="h_nav_5 menu-item menu-item-type-post_type menu-item-object-page current-page-ancestor menu-item-has-children menu-item-11503" id="menu-item-11503">
                 [linkx]
                 
                 <ul class="sub-menu">
                  <li class="menu-item menu-item-type-post_type menu-item-object-page menu-item-has-children menu-item-520" id="menu-item-520">
                   <a href="/campus-life/postechian-life/cultural-program/">
                    포스테키안생활
                   </a>
                   <ul class="sub-menu">
                    <li class="menu-item menu-item-type-post_type menu-item-object-page menu-item-11470" id="menu-item-11470">
                     [linkx]
                     
                    </li>
                    <li class="menu-item menu-item-type-post_type menu-item-object-page menu-item-10605" id="menu-item-10605">
                     [linkx]
                     
                    </li>
                    <li class="menu-item menu-item-type-post_type menu-item-object-page menu-item-10606" id="menu-item-10606">
                     <a href="/campus-life/postechian-life/volunteer/">
                      봉사활동
                     </a>
                    </li>
                    <li class="menu-item menu-item-type-post_type menu-item-object-page menu-item-10607" id="menu-item-10607">
                     <a href="/campus-life/postechian-life/overseas-visits/">
                      해외탐방
                     </a>
                    </li>
                    <li class="menu-item menu-item-type-post_type menu-item-object-page menu-item-10608" id="menu-item-10608">
                     <a href="/campus-life/postechian-life/mentor-scheme/">
                      멘토제도
                     </a>
                    </li>
                    <li class="menu-item menu-item-type-post_type menu-item-object-page menu-item-10609" id="menu-item-10609">
                     <a href="/campus-life/postechian-life/student-medical-coop-plan/">
                      학생의료공제회
                     </a>
                    </li>
                    <li class="menu-item menu-item-type-post_type menu-item-object-page menu-item-10610" id="menu-item-10610">
                     [ahref]
                     
                    </li>
                    <li class="menu-item menu-item-type-post_type menu-item-object-page menu-item-10611" id="menu-item-10611">
                     <a href="/campus-life/postechian-life/graduate-careers/">
                      졸업생 진로
                     </a>
                    </li>
                   </ul>
                  </li>
                  <li class="menu-item menu-item-type-post_type menu-item-object-page menu-item-12902" id="menu-item-12902">
                   <a href="/campus-life/library/">
                    도서관
                   </a>
                  </li>
                  <li class="menu-item menu-item-type-post_type menu-item-object-page menu-item-has-children menu-item-9919" id="menu-item-9919">
                   [linkx]
                   
                   <ul class="sub-menu">
                    <li class="menu-item menu-item-type-post_type menu-item-object-page menu-item-11536" id="menu-item-11536">
                     [ahref]
                     
                    </li>
                    <li class="menu-item menu-item-type-post_type menu-item-object-page menu-item-10612" id="menu-item-10612">
                     [linkx]
                     
                    </li>
                    <li class="menu-item menu-item-type-post_type menu-item-object-page menu-item-10613" id="menu-item-10613">
                     <a href="/campus-life/welfare-facilities/jigok-community-center/">
                      지곡회관
                     </a>
                    </li>
                    <li class="menu-item menu-item-type-post_type menu-item-object-page menu-item-14421" id="menu-item-14421">
                     [ahref]
                     
                    </li>
                    <li class="menu-item menu-item-type-post_type menu-item-object-page menu-item-10615" id="menu-item-10615">
                     [linkx]
                     
                    </li>
                    <li class="menu-item menu-item-type-post_type menu-item-object-page menu-item-23113" id="menu-item-23113">
                     <a href="/campus-life/welfare-facilities/pyeonghae-training-institute/">
                      평해연수원
                     </a>
                    </li>
                   </ul>
                  </li>
                  <li class="menu-item menu-item-type-post_type menu-item-object-page menu-item-has-children menu-item-11518" id="menu-item-11518">
                   <a href="/campus-life/student-activities/festival/">
                    학생활동
                   </a>
                   <ul class="sub-menu">
                    <li class="menu-item menu-item-type-post_type menu-item-object-page menu-item-27130" id="menu-item-27130">
                     <a href="/campus-life/student-activities/ses/">
                      SES 프로그램
                     </a>
                    </li>
                    <li class="menu-item menu-item-type-post_type menu-item-object-page menu-item-11430" id="menu-item-11430">
                     <a href="/campus-life/student-activities/festival/">
                      축제
                     </a>
                    </li>
                    <li class="menu-item menu-item-type-post_type menu-item-object-page menu-item-11431" id="menu-item-11431">
                     [ahref]
                     
                    </li>
                    <li class="menu-item menu-item-type-post_type menu-item-object-page menu-item-11432" id="menu-item-11432">
                     <a href="/campus-life/student-activities/students-group/">
                      주요학생단체
                     </a>
                    </li>
                    <li class="menu-item menu-item-type-post_type menu-item-object-page menu-item-12848" id="menu-item-12848">
                     [ahref]
                     
                    </li>
                   </ul>
                  </li>
                 </ul>
                </li>
                <li class="h_nav_6 menu-item menu-item-type-post_type menu-item-object-page menu-item-has-children menu-item-5048" id="menu-item-5048">
                 [linkx]
                 
                 <ul class="sub-menu">
                  <li class="menu-item menu-item-type-post_type menu-item-object-page menu-item-11527" id="menu-item-11527">
                   <a href="/e-postech/notice/">
                    공지사항
                   </a>
                  </li>
                  <li class="menu-item menu-item-type-post_type menu-item-object-page menu-item-11528" id="menu-item-11528">
                   <a href="/e-postech/news/">
                    새소식
                   </a>
                  </li>
                  <li class="menu-item menu-item-type-post_type menu-item-object-page menu-item-11529" id="menu-item-11529">
                   [ahref]
                   
                  </li>
                  <li class="menu-item menu-item-type-post_type menu-item-object-page menu-item-11530" id="menu-item-11530">
                   [ahref]
                   
                  </li>
                  <li class="menu-item menu-item-type-post_type menu-item-object-page menu-item-13270" id="menu-item-13270">
                   [linkx]
                   
                  </li>
                  <li class="menu-item menu-item-type-post_type menu-item-object-page menu-item-11531" id="menu-item-11531">
                   [ahref]
                   
                  </li>
                 </ul>
                </li>
                <li class="menu-item menu-item-type-custom menu-item-object-custom menu-item-21390" id="menu-item-21390">
                 [ahref]
                 
                </li>
               </ul>
              </div>
             </div>
            </div>
           </div>
          </div>
          <div class="target_menubox">
           <button class="menu_icon" id="taget_m" type="button">
            타켓메뉴 열기
           </button>
           <div class="target_itembox">
            <div class="box_container">
             <dl>
              <dt>
               <span class="title">
                <span class="bold">
                 이용자 맞춤
                </span>
                서비스
               </span>
               <span class="text">
                자신에게 맞는 서비스를 선택해주세요.
               </span>
              </dt>
              <dd>
               <ul>
                <li>
                 <div class="select_box">
                  <div class="textbox">
                   [linkx]
                   
                  </div>
                  <ul class="select_ul">
                   <li>
                    <a href="/Main.do?cmd=viewHelpMain&amp;mainMenuId=menu_00053&amp;subMenuId=menu_00235&amp;menuType=menu" target="_blank" title="새창으로 열기">
                     개설과목정보
                    </a>
                   </li>
                   <li>
                    <li>[keywordx][symbolx][keywordx][symbolx][bracketl7][keywordx][bracketr7][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx]</li><li>[keywordx][symbolx][keywordx][symbolx][bracketl8][keywordx][bracketr8][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx]</li><li>[keywordx][symbolx][keywordx][symbolx][bracketl9][keywordx][bracketr9][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx]</li><li>[link]</li>[keywordx][symbolx][keywordx][symbolx][bracketl10][keywordx][bracketr10][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx]
                   </li>
                   <li>
                    <a href="/academics/academic-info/course-catalog/">
                     대학요람
                    </a>
                   </li>
                   <li>
                    [linkx]
                    
                   </li>
                   <li>
                    [ahref]
                    
                   </li>
                   <li>
                    [ahref]
                    
                   </li>
                   <li>
                    [linkx]
                    
                   </li>
                   <li>
                    <a href="/academics/academic-info/academic-calendar/">
                     학사일정
                    </a>
                   </li>
                   <li>
                    [ahref]
                    
                   </li>
                  </ul>
                 </div>
                </li>
                <li>
                 <div class="select_box">
                  <div class="textbox">
                   [ahref]
                   
                  </div>
                  <ul class="select_ul">
                   <li>
                    <a href="/about-postech/administration/rules-regulations/">
                     규정집
                    </a>
                   </li>
                   <li>
                    <a href="/e-postech/notice/">
                     공지사항
                    </a>
                   </li>
                   <li>
                    [ahref]
                    
                   </li>
                   <li>
                    <a href="/e-postech/news/">
                     새소식
                    </a>
                   </li>
                   <li>
                    [linkx]
                    
                   </li>
                  </ul>
                 </div>
                </li>
                <li>
                 <div class="select_box">
                  <div class="textbox">
                   [ahref]
                   
                  </div>
                  <ul class="select_ul">
                   <li>
                    [linkx]
                    
                   </li>
                   <li>
                    <a href="/admission-education/admission-info/">
                     입학정보
                    </a>
                   </li>
                   <li>
                    [linkx]
                    
                   </li>
                   <li>
                    [ahref]
                    
                   </li>
                  </ul>
                 </div>
                </li>
                <li>
                 <div class="select_box">
                  <div class="textbox">
                   <a class="text" href=";" title="동문 맞춤 서비스 목록보기">
                    동문
                   </a>
                  </div>
                  <ul class="select_ul">
                   <li>
                    <a href="/" target="_blank" title="새창으로 열기">
                     총동창회
                    </a>
                   </li>
                   <li>
                    [ahref]
                    
                   </li>
                   <li>
                    [linkx]
                    
                   </li>
                  </ul>
                 </div>
                </li>
               </ul>
              </dd>
             </dl>
             [linkx]
             
            </div>
           </div>
          </div>
          <div class="quick_linkbox quick_off">
           <div class="box_container">
            <button class="quick_links_title" title="퀵메뉴바 열기" type="button">
             <span class="txt">
              Quick
             </span>
             <span class="b_txt">
              MENU
             </span>
            </button>
            <div class="quick_btn_box">
             <ul class="link_list">
              <li class="step1">
               [ahref]
               
              </li>
              <li class="step2">
               [ahref]
               
              </li>
              <li class="step3">
               [ahref]
               
              </li>
              <li class="step4">
               [ahref]
               
              </li>
              <li class="step5">
               [ahref]
               
              </li>
              <li class="step6">
               <a class="login_pop" href="/login/">
                <span class="text">
                 POVIS
                </span>
               </a>
              </li>
              <li class="step7">
               Contact[content8][content9][linkx][content10]
              </li>
             </ul>
            </div>
            <a class="close_btn" href=";">
             퀵메뉴 닫기
            </a>
           </div>
          </div>
          <div class="search_ro">
           <div class="search_ro_container">
            <form action="/searchp/" name="search_form">
             <div class="search_box">
              <div class="box_container">
               <div class="search_type_list">
                <ul>
                 <li class="active" data-search="post">
                  <a href=";">
                   일반검색[content4][content5][linkx][content6][content7]
                  </a>
                 </li>
                 <li data-search="phone">
                  [linkx]
                  
                 </li>
                 <li data-search="faculty">
                  <a href=";">
                   연구인력/교원검색
                  </a>
                 </li>
                </ul>
               </div>
               <div class="input_box">
                <label for="header_search_box">
                 검색하기
                </label>
               </div>
               <div class="search_btn_box">
               </div>
              </div>
             </div>
            </form>
           </div>
          </div>
         </div>
        </div>
       </div>
      </div>
      <div class="title_top_box welfare-facilities">
       <div class="top_box_container">
        <div class="thumbox">
         <div class="thum">
          <span class="back_bg">
          </span>
         </div>
        </div>
        <div class="box_container">
         <div class="contbox">
          <div class="parent_title">
           복지시설
          </div>
          <h1 class="entry-title">
           [mkey1][symbolx][pkey1][symbolx][keyword1][bracketl1][bracketr1][symbolx][bracketl2][siter1][bracketr2][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx][symbolx][keywordx]
          </h1>
         </div>
        </div>
       </div>
      </div>
      <div class="site-content" id="content">
       <div class="content-area" id="primary">
        <div class="site-main" id="main" role="main">
         [content12][content13][content14][content15][linkx]
        </div>
       </div>
       <div class="fwc_box">
        <div class="fc_box_container">
         <div class="page_bottom_cont">
          <div class="co_2thirds">
           <div class="thum_feed_ty1">
            <div class="feed_ty_container">
             <div class="cont_box_title">
              <h4 class="title_ubar">
               POPULAR NEWS
              </h4>
             </div>
             <div class="thum">
              <a href="/%ea%b0%80%ec%b9%98%ec%b0%bd%ec%b6%9c%eb%8c%80%ed%95%99-%ec%b9%b4%eb%93%9c%eb%89%b4%ec%8a%a4-vol-3-%ec%9d%b8%ec%9e%ac%ea%b0%80%ec%b9%98%eb%a5%bc-%eb%a7%90%ed%95%98%eb%8b%a4%e2%85%a1/#post-27195">
              </a>
             </div>
             <div class="feed_box">
              <div class="cont_title">
               <h5>
                <a href="/%ea%b0%80%ec%b9%98%ec%b0%bd%ec%b6%9c%eb%8c%80%ed%95%99-%ec%b9%b4%eb%93%9c%eb%89%b4%ec%8a%a4-vol-3-%ec%9d%b8%ec%9e%ac%ea%b0%80%ec%b9%98%eb%a5%bc-%eb%a7%90%ed%95%98%eb%8b%a4%e2%85%a1/#post-27195">
                 <span class="txt_color">
                  [가치창출대학 카드뉴스 Vol.3] 인재가치를 말하다Ⅱ
                 </span>
                </a>
               </h5>
              </div>
              <div class="cont_desc">
               <a href="/%ea%b0%80%ec%b9%98%ec%b0%bd%ec%b6%9c%eb%8c%80%ed%95%99-%ec%b9%b4%eb%93%9c%eb%89%b4%ec%8a%a4-vol-3-%ec%9d%b8%ec%9e%ac%ea%b0%80%ec%b9%98%eb%a5%bc-%eb%a7%90%ed%95%98%eb%8b%a4%e2%85%a1/#post-27195">
                <p class="txt_tiny">
                 ..
                </p>
               </a>
              </div>
              <div class="btn_box">
               [linkx]
               
              </div>
             </div>
            </div>
           </div>
          </div>
          <div class="co_1third">
           <div class="feed_list_ty1">
            <div class="feed_list_box cfff_bg">
             <ul>
              <li class="feed1">
               <div class="thum">
                [ahref]
                
               </div>
               <div class="cont_desc">
                <h5 class="feed_title">
                 <a href="/%ed%99%95%ec%9e%a5%ed%98%95-%ec%96%91%ec%9e%90%ec%bb%b4%ed%93%a8%ed%84%b0-%ea%b8%b0%ec%88%a0%ec%9c%b5%ed%95%a9-%ed%94%8c%eb%9e%ab%ed%8f%bc-%ec%84%bc%ed%84%b0-%ec%84%a0%eb%8f%84%ec%97%b0%ea%b5%ac/#post-32407">
                  확장형 양자컴퓨터 기술융합 플랫폼 센터, 선도연구센터 지원사업 선정..
                 </a>
                </h5>
                <div class="meta">
                 <span class="meta_info1">
                  2019.05.30
                 </span>
                </div>
               </div>
              </li>
              <li class="feed1">
               <div class="thum">
                [ahref]
                
               </div>
               <div class="cont_desc">
                <h5 class="feed_title">
                 <a href="/postech-%ed%8f%ac%ec%8a%a4%ec%bd%94%ec%bc%80%eb%af%b8%ec%b9%bc-%ec%82%b0%ed%95%99%ec%9d%bc%ec%b2%b4%ec%97%b0%ea%b5%ac%ec%84%bc%ed%84%b0-%ea%b0%9c%ec%86%8c/#post-32088">
                  POSTECH-포스코케미칼 산학일체연구센터 개소..
                 </a>
                </h5>
                <div class="meta">
                 <span class="meta_info1">
                  2019.05.08
                 </span>
                </div>
               </div>
              </li>
              <li class="feed1">
               <div class="thum">
                <a href="/postech-%ec%a1%b0%ec%a0%95%ed%8c%80-%ec%a0%84%ea%b5%ad%ec%a1%b0%ec%a0%95%eb%8c%80%ed%9a%8c-%eb%82%a8%ec%9e%90%eb%8c%80%ed%95%99%eb%b6%80-%ec%97%90%ec%9d%b4%ed%8a%b88-%ec%a2%85%eb%aa%a9-2%ec%9c%84/#post-32074">
                </a>
               </div>
               <div class="cont_desc">
                <h5 class="feed_title">
                 [linkx]
                 
                </h5>
                <div class="meta">
                 <span class="meta_info1">
                  2019.05.08
                 </span>
                </div>
               </div>
              </li>
             </ul>
            </div>
            <div class="more_ty1">
             [linkx]
             
            </div>
           </div>
          </div>
         </div>
        </div>
       </div>
      </div>
      <footer class="site-footer" id="colophon" role="contentinfo">
       <a class="f_top_btn top_fixed" href=";">
        top
       </a>
       <div class="footer_wrap">
        <div class="footer_contentbox">
         <div class="box_container">
          <div class="f_top_cont">
           <div class="f_top_links">
            <ul class="f_links_nav" id="menu-footer">
             <li class="menu-item menu-item-type-custom menu-item-object-custom menu-item-10958" id="menu-item-10958">
              <a href="/" target="_blank" title="새창으로 열기">
               POSTECH 발전기금
              </a>
             </li>
             <li class="menu-item menu-item-type-post_type menu-item-object-page menu-item-has-children menu-item-29750" id="menu-item-29750">
              <a href="/ethical-management/ethics-charter/">
               윤리헌장
              </a>
              <ul class="sub-menu">
               <li class="menu-item menu-item-type-post_type menu-item-object-page menu-item-29749" id="menu-item-29749">
                [ahref]
                
               </li>
              </ul>
             </li>
            </ul>
           </div>
          </div>
         </div>
        </div>
       </div>
      </footer>
     </div>
    </div>
   </div>
  </div>
  <div class="pop_layer_box" style="display:none;">
   <div class="pop_layer_bg" style="display:none;">
   </div>
   <div class="pop_layer_cont_box">
    <button class="pop_layer_close" data-focus="pop_layer_close" data-foucs-prev="" title="Close (Esc)" type="button">
     ×
    </button>
    <iframe allowfullscreen="" allowtransparency="true" class="mfp-iframe" frameborder="0" id="povis_iframe" src="http://www.postech.ac.kr/login/" title="POVIS 로그인">
    </iframe>
   </div>
  </div>
  <b style="color:black;background-color:#a0ffff">
   jnice09-ipp30-wq-zq-0008
  </b>
 </body>
</html>|<---