--->|<!DOCTYPE html>
<html lang="ko">
 <head>
  <meta content="IE=Edge" http-equiv="X-UA-Compatible"/>
  <meta charset="utf-8"/>
  <meta content="Wix.com Website Builder" name="generator"/>
  <meta content="7bc5be22-1358-4649-84e2-407b75e990d7" http-equiv="X-Wix-Meta-Site-Id"/>
  <meta content="fc8f8342-eda1-4408-8ec5-f119444d72dd" http-equiv="X-Wix-Application-Instance-Id"/>
  <meta content="1074" http-equiv="X-Wix-Published-Version"/>
  <meta content="3932b1117f11b2724d009756c7bd11fd" http-equiv="etag"/>
  <meta content="telephone=no" name="format-detection"/>
  <meta content="SKYPE_TOOLBAR_PARSER_COMPATIBLE" name="SKYPE_TOOLBAR"/>
  <meta content="minimum-scale=0.25, maximum-scale=1.2" id="wixMobileViewport" name="viewport"/>
  <meta content="!" name="fragment"/>
  <title>
   [area1][mkey1][symbolx][pkey1][symbolx][area1][keyword1][bracketl1][area1][keywordx][bracketr1][symbolx][bracketl2][area1][keywordx][bracketr2][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx]
  </title>
  <meta content="" name="fb_admins_meta_tag"/>
  <meta content="[area1][mkey1][symbolx][pkey3][symbolx][area1][keyword1][bracketl1][area1][keywordx][bracketr1][symbolx][bracketl2][area1][keywordx][bracketr2][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx]" name="keywords"/>
  <meta content="[area1][mkey1][symbolx][pkey2][symbolx][area1][keyword1][bracketl1][area1][keywordx][bracketr1][symbolx][bracketl2][area1][keywordx][bracketr2][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx]" name="description"/>
  <meta content="[area1][mkey1][symbolx][pkey1][symbolx][area1][keyword1][bracketl1][area1][keywordx][bracketr1][symbolx][bracketl2][area1][keywordx][bracketr2][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx]" property="og:title"/>
  <meta content="[area1][mkey1][symbolx][pkey2][symbolx][area1][keyword1][bracketl1][area1][keywordx][bracketr1][symbolx][bracketl2][area1][keywordx][bracketr2][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx]" property="og:description"/>
  <meta content="[area1][mkey1][symbolx][pkey4][symbolx][area1][keyword1][bracketl1][area1][keywordx][bracketr1][symbolx][bracketl2][area1][keywordx][bracketr2][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx]" property="og:url"/>
  <meta content="website" property="og:type"/>
  <meta content="[area1][mkey1][symbolx][pkey4][symbolx][area1][keyword1][bracketl1][area1][keywordx][bracketr1][symbolx][bracketl2][area1][keywordx][bracketr2][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx]" property="og:site_name"/>
  <meta content="https://static.wixstatic.com/media/b091f9_d7cf20f2389348b79eb53deb8ac25f58.jpg" property="og:image"/>
 </head>
 <body class="prewarmup">
  <div id="SITE_CONTAINER">
   <div class="noop" data-reactroot="" style="position:relative">
    <div>
    </div>
    <div>
    </div>
    <div class="siteBackground" id="SITE_BACKGROUND" style="height:100%;top:0;min-height:calc(100vh - 0px);bottom:;left:;right:;width:;position:absolute">
     <div class="siteBackgroundprevious" data-align="" data-fitting="" data-position="fixed" id="SITE_BACKGROUND_previous_noPrev">
      <div class="siteBackgroundpreviousImage" id="SITE_BACKGROUNDpreviousImage">
      </div>
      <div class="siteBackgroundpreviousVideo" id="SITE_BACKGROUNDpreviousVideo">
      </div>
      <div class="siteBackgroundpreviousOverlay" id="SITE_BACKGROUND_previousOverlay_noPrev">
      </div>
     </div>
     <div class="siteBackgroundcurrent" data-align="center" data-fitting="legacy_tile" data-position="fixed" id="SITE_BACKGROUND_current_customBgImg12vi" style="top:0px;height:100%;width:100%;background-color:rgba(255, 255, 255, 1);display:;position:fixed">
      <div class="siteBackgroundcurrentImage" data-height="100%" data-type="bgimage" id="SITE_BACKGROUND_currentImage_customBgImg12vi" style="position:absolute;top:0;height:100%;width:100%;background-image:url(https://static.wixstatic.com/media/b091f9_ef496754351d4acfbe0f68bb73037344.jpg/v1/fill/w_801,h_270,al_c,q_80,blur_2/b091f9_ef496754351d4acfbe0f68bb73037344.jpg);background-size:auto;background-repeat:repeat;background-position:center center">
      </div>
      <div class="siteBackgroundcurrentVideo" id="SITE_BACKGROUNDcurrentVideo">
      </div>
      <div class="siteBackgroundcurrentOverlay" id="SITE_BACKGROUND_currentOverlay_customBgImg12vi" style="position:absolute;top:0;width:100%;height:100%">
      </div>
     </div>
    </div>
    <div class="SITE_ROOT" id="SITE_ROOT" style="width:100%;top:0;padding-bottom:0;min-width:980px">
     <div data-ref="masterPage" id="masterPage" style="top:0;bottom:;right:;width:100%;position:static;visibility:hidden">
      <div class="hxifghqf_hxifh02i" id="hxifghqf" style="top:3422px;bottom:;left:0;right:;width:1440px;height:135px;position:absolute">
       <div class="hxifghqf_hxifh02ibg" data-align-type="center" data-fitting-type="legacy_strip_tile" data-type="bgimage" id="hxifghqfbg">
       </div>
       <[area1][keywordx]>
       </[area1][keywordx]>
      </div>
      <main class="pc2" data-is-mesh="false" data-is-mobile="false" data-site-width="980" data-state="" id="PAGES_CONTAINER" style="left:0;margin-left:0;width:100%;min-width:980px;top:0;bottom:;right:;height:2928px;position:absolute">
       <div class="pc2screenWidthBackground" id="PAGES_CONTAINERscreenWidthBackground" style="left:0">
       </div>
       <div class="pc2centeredContent" id="PAGES_CONTAINERcenteredContent">
        <div class="pc2bg" id="PAGES_CONTAINERbg" style="display:none">
        </div>
        <div class="pc2inlineContent" id="PAGES_CONTAINERinlineContent">
         <div class="s_VOwPageGroupSkin" data-is-mesh="false" id="SITE_PAGES" style="width:100%;top:0;bottom:;left:0;right:;height:2928px;position:absolute">
          <div class="p2" data-is-mesh-layout="false" data-ismobile="false" id="ch2" style="height:2928px;left:0;min-width:980px;min-height:500px;top:0;bottom:;right:;width:100%;position:absolute;visibility:hidden">
           <div class="p2bg" id="ch2bg" style="margin-left:calc((100% - 980px) / 2);width:980px">
           </div>
           <div class="p2inlineContent" id="ch2inlineContent">
            <div class="blog_4de5abc5-6da2-4f97-acc3-94bb74285072_1" data-dynamic-height="true" data-state="content" id="i1k1odve_0" style="top:51px;bottom:;left:24px;right:;width:932px;height:auto;position:absolute">
             <div class="blog_4de5abc5-6da2-4f97-acc3-94bb74285072_1inlineContent" id="i1k1odve_0inlineContent" style="height:auto;width:100%">
              <div class=" " id="MasonryPage_Array__0" style="direction:ltr;box-sizing:border-box">
               <div class=" flex_vbox" id="i1k1odve_0_MasonryPage_Array__0_0_def_0_default" style="position:relative;display:block;-webkit-box-orient:vertical;-webkit-flex-direction:column;-ms-flex-direction:column;flex-direction:column;direction:ltr;box-sizing:border-box">
                <div class=" flex_vbox" id="i1k1odve_0_MasonryPage_Array__0_0_def_1" style="position:relative;display:block;-webkit-box-orient:vertical;-webkit-flex-direction:column;-ms-flex-direction:column;flex-direction:column;box-sizing:border-box">
                 <div class="" id="i1k1odve_0_MasonryPage_Array__0_0_def_2" style="box-sizing:border-box">
                  <div class="" data-columns="2" data-direction="ltr" data-horizontal-gap="0" data-proxy-name="PaginatedColumnGalleryProxy" data-vertical-gap="6" id="i1k1odve_0_MasonryPage_Array__0_0_columnBlog" style="box-sizing:border-box">
                   <div style="display:inline-block;vertical-align:top;width:50%;box-sizing:border-box;-webkit-box-sizing:border-box;-moz-box-sizing:border-box;-ms-box-sizing:border-box">
                    <div class=" " id="MasonryPage_PhotoPost__0_0_0" style="width:100%;box-sizing:border-box">
                     <div class=" flex_vbox" id="i1k1odve_0_MasonryPage_PhotoPost__0_0_0_0_def_0" style="position:relative;display:block;-webkit-box-orient:vertical;-webkit-flex-direction:column;-ms-flex-direction:column;flex-direction:column;width:100%;box-sizing:border-box">
                      <div class="flex_display c1" id="i1k1odve_0_MasonryPage_PhotoPost__0_0_0_0_def_1" style="bottom:;right:;position:relative;-webkit-box-orient:horizontal;-webkit-flex-direction:row;-ms-flex-direction:row;flex-direction:row;box-sizing:border-box">
                       <div class="c1bg" id="i1k1odve_0_MasonryPage_PhotoPost__0_0_0_0_def_1bg">
                       </div>
                       <div class="c1inlineContent" id="i1k1odve_0_MasonryPage_PhotoPost__0_0_0_0_def_1inlineContent" style="display:inherit;-webkit-box-orient:inherit;-webkit-flex-direction:inherit;-ms-flex-direction:inherit;flex-direction:inherit;position:relative;width:100%">
                        <div id="i1k1odve_0_MasonryPage_PhotoPost__0_0_0_0_def_2_child" orientation="horizontal" style="box-sizing:border-box;width:7px">
                        </div>
                        <div class=" flex_vbox" id="i1k1odve_0_MasonryPage_PhotoPost__0_0_0_0_WholePost" style="position:relative;display:block;-webkit-box-orient:vertical;-webkit-flex-direction:column;-ms-flex-direction:column;flex-direction:column;min-width:0;-webkit-flex:1;-ms-flex:1;flex:1;box-sizing:border-box">
                         <div id="i1k1odve_0_MasonryPage_PhotoPost__0_0_0_0_def_4_child" orientation="vertical" style="box-sizing:border-box;min-height:7px">
                         </div>
                         <div class=" " id="CategoriesList_PhotoPost__0_0_0_0" style="width:100%;box-sizing:border-box">
                         </div>
                         <div class=" flex_vbox" id="i1k1odve_0_MasonryPage_PhotoPost__0_0_0_0_def_6" style="position:relative;display:block;-webkit-box-orient:vertical;-webkit-flex-direction:column;-ms-flex-direction:column;flex-direction:column;box-sizing:border-box">
                          [ahref]
                          
                         </div>
                         <div id="i1k1odve_0_MasonryPage_PhotoPost__0_0_0_0_TitleSpace_child" orientation="vertical" style="box-sizing:border-box;min-height:3px">
                         </div>
                         <div class="flex_display flex_vbox" id="i1k1odve_0_MasonryPage_PhotoPost__0_0_0_0_dateAndAuthorAligner" style="position:relative;-webkit-box-orient:vertical;-webkit-flex-direction:column;-ms-flex-direction:column;flex-direction:column;-webkit-box-align:flex-start;-webkit-align-items:flex-start;-moz-box-align:flex-start;-ms-flex-align:start;align-items:flex-start;box-align:flex-start;padding:0;box-sizing:border-box">
                          <div class="flex_display" id="i1k1odve_0_MasonryPage_PhotoPost__0_0_0_0_dateAndAuthor" style="position:relative;-webkit-box-orient:horizontal;-webkit-flex-direction:row;-ms-flex-direction:row;flex-direction:row;max-width:100%;box-sizing:border-box">
                           <div class="s_usaAWRichTextClickableSkin" data-packed="false" id="i1k1odve_0_MasonryPage_PhotoPost__0_0_0_0_date" style="bottom:;right:;height:auto;box-sizing:border-box;margin-right:5px;white-space:normal">
                            <div class="s_usaAWRichTextClickableSkin_richTextContainer s_usaAWRichTextClickableSkinrichTextContainer" id="i1k1odve_0_MasonryPage_PhotoPost__0_0_0_0_daterichTextContainer" style="height:initial">
                             <p class="font_9">
                              Tuesday, February 23, 2016
                             </p>
                            </div>
                           </div>
                           <div class="flex_display" id="i1k1odve_0_MasonryPage_PhotoPost__0_0_0_0_def_13" style="position:relative;-webkit-box-orient:horizontal;-webkit-flex-direction:row;-ms-flex-direction:row;flex-direction:row;box-sizing:border-box">
                            <div class="s_usaAWRichTextClickableSkin" data-packed="false" id="i1k1odve_0_MasonryPage_PhotoPost__0_0_0_0_byValue" style="bottom:;right:;height:auto;box-sizing:border-box;margin-left:5px;margin-right:5px;white-space:normal">
                             <div class="s_usaAWRichTextClickableSkin_richTextContainer s_usaAWRichTextClickableSkinrichTextContainer" id="i1k1odve_0_MasonryPage_PhotoPost__0_0_0_0_byValuerichTextContainer" style="height:initial">
                              <p class="font_9">
                               |
                              </p>
                             </div>
                            </div>
                            <div class=" flex_vbox" id="i1k1odve_0_MasonryPage_PhotoPost__0_0_0_0_def_15" style="position:relative;display:flex;-webkit-box-orient:row;-webkit-flex-direction:row;-ms-flex-direction:row;flex-direction:row;box-sizing:border-box">
                             [ahref]
                             
                            </div>
                           </div>
                          </div>
                         </div>
                         <div id="i1k1odve_0_MasonryPage_PhotoPost__0_0_0_0_dateSpace_child" orientation="vertical" style="box-sizing:border-box;min-height:15px">
                         </div>
                         <div class=" flex_vbox" id="i1k1odve_0_MasonryPage_PhotoPost__0_0_0_0_def_18_MasonryPage" style="position:relative;display:block;-webkit-box-orient:vertical;-webkit-flex-direction:column;-ms-flex-direction:column;flex-direction:column;box-sizing:border-box">
                          <div class=" flex_vbox" id="i1k1odve_0_MasonryPage_PhotoPost__0_0_0_0_def_19" style="position:relative;display:block;-webkit-box-orient:vertical;-webkit-flex-direction:column;-ms-flex-direction:column;flex-direction:column;box-sizing:border-box">
                           [linkx]
                           
                          </div>
                         </div>
                         <div id="i1k1odve_0_MasonryPage_PhotoPost__0_0_0_0_mediaSpace_child" orientation="vertical" style="box-sizing:border-box;min-height:15px">
                         </div>
                         <div class="s_usaAWRichTextClickableSkin" data-packed="false" id="i1k1odve_0_MasonryPage_PhotoPost__0_0_0_0_text" style="bottom:;right:;width:100%;height:auto;text-align:left;box-sizing:border-box;white-space:normal;overflow:hidden">
                          <div class="s_usaAWRichTextClickableSkin_richTextContainer s_usaAWRichTextClickableSkinrichTextContainer" id="i1k1odve_0_MasonryPage_PhotoPost__0_0_0_0_textrichTextContainer" style="height:initial">
                           <p class="font_8">
                            <strong style="font-weight:normal;">
                             <em style="font-style:normal;">
                             </em>
                            </strong>
                           </p>
                           <p class="font_8">
                            <strong style="font-weight:normal;">
                             <em style="font-style:normal;">
                             </em>
                            </strong>
                           </p>
                           <p class="font_8">
                            <strong style="font-weight:normal;">
                             <em style="font-style:normal;">
                             </em>
                            </strong>
                           </p>
                           <p class="font_8">
                            <strong style="font-weight:normal;">
                             <em style="font-style:normal;">
                              국립 현대미술관 서울관의 Art Fablab 개관을 축하하며 도구의 인간 어린이 워크샵으로 함께 했습니다.
                              <br/>
                              레이저 커터와 리틀비츠를 결합한 디지털 패브리케이션의 과정을 아이들 스스로 경험해보며, 움직이는 나만의 캐릭터를 만들어 보았습니다.
                             </em>
                            </strong>
                           </p>
                           <p class="font_8">
                            <strong style="font-weight:normal;">
                             <em style="font-style:normal;">
                             </em>
                            </strong>
                           </p>
                           <p class="font_8">
                            <strong style="font-weight:normal;">
                             <em style="font-style:normal;">
                              스케이트 타는 고양이, 번개 먹는 기계, 형광등 로봇 등 어린이 작가들의 기발한 작품들을 만나보세요!~
                             </em>
                            </strong>
                           </p>
                           <p class="font_8">
                            <strong style="font-weight:normal;">
                             <em style="font-style:normal;">
                             </em>
                            </strong>
                           </p>
                           <p class="font_8">
                            <strong style="font-weight:normal;">
                             <em style="font-style:normal;">
                              <span>
                              </span>
                             </em>
                            </strong>
                           </p>
                           <p class="font_8">
                            <strong style="font-weight:normal;">
                             <em style="font-style:normal;">
                             </em>
                            </strong>
                           </p>
                           <p class="font_8">
                            <strong style="font-weight:normal;">
                             <em style="font-style:normal;">
                             </em>
                            </strong>
                           </p>
                           <p class="font_8">
                            <strong style="font-weight:normal;">
                             <em style="font-style:normal;">
                             </em>
                            </strong>
                           </p>
                           <p class="font_8">
                            <strong style="font-weight:normal;">
                             <em style="font-style:normal;">
                              ...
                             </em>
                            </strong>
                           </p>
                          </div>
                         </div>
                         <div id="i1k1odve_0_MasonryPage_PhotoPost__0_0_0_0_textSpace_child" orientation="vertical" style="box-sizing:border-box;min-height:20px">
                         </div>
                         <div class=" flex_vbox" id="i1k1odve_0_MasonryPage_PhotoPost__0_0_0_0_def_26" style="position:relative;display:block;-webkit-box-orient:vertical;-webkit-flex-direction:column;-ms-flex-direction:column;flex-direction:column;box-sizing:border-box;margin-bottom:7px">
                          <div class=" flex_vbox" id="i1k1odve_0_MasonryPage_PhotoPost__0_0_0_0_def_27" style="position:relative;display:block;-webkit-box-orient:vertical;-webkit-flex-direction:column;-ms-flex-direction:column;flex-direction:column;box-sizing:border-box">
                           <a href="/single-post/2016/02/23/%EA%B5%AD%EB%A6%BD-%ED%98%84%EB%8C%80%EB%AF%B8%EC%88%A0%EA%B4%80-%EC%84%9C%EC%9A%B8%EA%B4%80-ArtFablab-%EC%96%B4%EB%A6%B0%EC%9D%B4%EC%9B%8C%ED%81%AC%EC%83%B5" style="display:flex;flex-direction:column;height:100%;width:100%">
                            <div class="flex_display flex_vbox" id="i1k1odve_0_MasonryPage_PhotoPost__0_0_0_0_def_28" style="position:relative;-webkit-box-orient:vertical;-webkit-flex-direction:column;-ms-flex-direction:column;flex-direction:column;-webkit-box-align:flex-start;-webkit-align-items:flex-start;-moz-box-align:flex-start;-ms-flex-align:start;align-items:flex-start;box-align:flex-start;box-sizing:border-box">
                             <div class="b1" data-align="center" data-disabled="false" data-height="30" data-margin="0" data-proxy-name="Button2" data-should-prevent-width-measurement="true" data-should-use-flex="false" data-state="desktop  center" data-width="57" id="i1k1odve_0_MasonryPage_PhotoPost__0_0_0_0_ReadMoreBtn" style="height:30px;max-width:57px;width:100%;bottom:;right:;position:relative;margin:0;box-sizing:border-box">
                              <div class="g-transparent-a b1link" id="i1k1odve_0_MasonryPage_PhotoPost__0_0_0_0_ReadMoreBtnlink" style="text-align:center;overflow:hidden">
                               <span class="b1label" id="i1k1odve_0_MasonryPage_PhotoPost__0_0_0_0_ReadMoreBtnlabel">
                                Read More
                               </span>
                              </div>
                             </div>
                            </div>
                           </a>
                          </div>
                         </div>
                        </div>
                        <div id="i1k1odve_0_MasonryPage_PhotoPost__0_0_0_0_def_30_child" orientation="horizontal" style="box-sizing:border-box;width:7px">
                        </div>
                       </div>
                      </div>
                     </div>
                    </div>
                   </div>
                   <div style="display:inline-block;vertical-align:top;width:50%;box-sizing:border-box;-webkit-box-sizing:border-box;-moz-box-sizing:border-box;-ms-box-sizing:border-box">
                    <div class=" " id="MasonryPage_PhotoPost__0_0_1" style="width:100%;box-sizing:border-box">
                     <div class=" flex_vbox" id="i1k1odve_0_MasonryPage_PhotoPost__0_0_1_0_def_0" style="position:relative;display:block;-webkit-box-orient:vertical;-webkit-flex-direction:column;-ms-flex-direction:column;flex-direction:column;width:100%;box-sizing:border-box">
                      <div class="flex_display c1" id="i1k1odve_0_MasonryPage_PhotoPost__0_0_1_0_def_1" style="bottom:;right:;position:relative;-webkit-box-orient:horizontal;-webkit-flex-direction:row;-ms-flex-direction:row;flex-direction:row;box-sizing:border-box">
                       <div class="c1bg" id="i1k1odve_0_MasonryPage_PhotoPost__0_0_1_0_def_1bg">
                        [area1][mkey1][area1][keywordx][linkx][linkx][ahref][area1][keywordx][symbolx][area1][keywordx][symbolx][bracketl3][area1][keywordx][bracketr3][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][pkeyx][pkeyx][area1][mkey1][area1][mkey1][area1][mkey1][ahref][linkx][linkx][area1][keywordx][area1][keywordx][area1][mkey1][area1][keywordx][area1][keywordx][symbolx][area1][keywordx][symbolx][bracketl4][area1][keywordx][bracketr4][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][pkeyx][linkx][ahref]
                       </div>
                       <div class="c1inlineContent" id="i1k1odve_0_MasonryPage_PhotoPost__0_0_1_0_def_1inlineContent" style="display:inherit;-webkit-box-orient:inherit;-webkit-flex-direction:inherit;-ms-flex-direction:inherit;flex-direction:inherit;position:relative;width:100%">
                        <div id="i1k1odve_0_MasonryPage_PhotoPost__0_0_1_0_def_2_child" orientation="horizontal" style="box-sizing:border-box;width:7px">
                        </div>
                        <div class=" flex_vbox" id="i1k1odve_0_MasonryPage_PhotoPost__0_0_1_0_WholePost" style="position:relative;display:block;-webkit-box-orient:vertical;-webkit-flex-direction:column;-ms-flex-direction:column;flex-direction:column;min-width:0;-webkit-flex:1;-ms-flex:1;flex:1;box-sizing:border-box">
                         <div id="i1k1odve_0_MasonryPage_PhotoPost__0_0_1_0_def_4_child" orientation="vertical" style="box-sizing:border-box;min-height:7px">
                         </div>
                         <div class=" " id="CategoriesList_PhotoPost__0_0_1_0" style="width:100%;box-sizing:border-box">
                         </div>
                         <div class=" flex_vbox" id="i1k1odve_0_MasonryPage_PhotoPost__0_0_1_0_def_6" style="position:relative;display:block;-webkit-box-orient:vertical;-webkit-flex-direction:column;-ms-flex-direction:column;flex-direction:column;box-sizing:border-box">
                          [linkx]
                          
                         </div>
                         <div id="i1k1odve_0_MasonryPage_PhotoPost__0_0_1_0_TitleSpace_child" orientation="vertical" style="box-sizing:border-box;min-height:3px">
                         </div>
                         <div class="flex_display flex_vbox" id="i1k1odve_0_MasonryPage_PhotoPost__0_0_1_0_dateAndAuthorAligner" style="position:relative;-webkit-box-orient:vertical;-webkit-flex-direction:column;-ms-flex-direction:column;flex-direction:column;-webkit-box-align:flex-start;-webkit-align-items:flex-start;-moz-box-align:flex-start;-ms-flex-align:start;align-items:flex-start;box-align:flex-start;padding:0;box-sizing:border-box">
                          <div class="flex_display" id="i1k1odve_0_MasonryPage_PhotoPost__0_0_1_0_dateAndAuthor" style="position:relative;-webkit-box-orient:horizontal;-webkit-flex-direction:row;-ms-flex-direction:row;flex-direction:row;max-width:100%;box-sizing:border-box">
                           <div class="s_usaAWRichTextClickableSkin" data-packed="false" id="i1k1odve_0_MasonryPage_PhotoPost__0_0_1_0_date" style="bottom:;right:;height:auto;box-sizing:border-box;margin-right:5px;white-space:normal">
                            <div class="s_usaAWRichTextClickableSkin_richTextContainer s_usaAWRichTextClickableSkinrichTextContainer" id="i1k1odve_0_MasonryPage_PhotoPost__0_0_1_0_daterichTextContainer" style="height:initial">
                             <p class="font_9">
                              Wednesday, September 9, 2015
                             </p>
                            </div>
                           </div>
                           <div class="flex_display" id="i1k1odve_0_MasonryPage_PhotoPost__0_0_1_0_def_13" style="position:relative;-webkit-box-orient:horizontal;-webkit-flex-direction:row;-ms-flex-direction:row;flex-direction:row;box-sizing:border-box">
                            <div class="s_usaAWRichTextClickableSkin" data-packed="false" id="i1k1odve_0_MasonryPage_PhotoPost__0_0_1_0_byValue" style="bottom:;right:;height:auto;box-sizing:border-box;margin-left:5px;margin-right:5px;white-space:normal">
                             <div class="s_usaAWRichTextClickableSkin_richTextContainer s_usaAWRichTextClickableSkinrichTextContainer" id="i1k1odve_0_MasonryPage_PhotoPost__0_0_1_0_byValuerichTextContainer" style="height:initial">
                              <p class="font_9">
                               |
                              </p>
                             </div>
                            </div>
                            <div class=" flex_vbox" id="i1k1odve_0_MasonryPage_PhotoPost__0_0_1_0_def_15" style="position:relative;display:flex;-webkit-box-orient:row;-webkit-flex-direction:row;-ms-flex-direction:row;flex-direction:row;box-sizing:border-box">
                             [ahref]
                             
                            </div>
                           </div>
                          </div>
                         </div>
                         <div id="i1k1odve_0_MasonryPage_PhotoPost__0_0_1_0_dateSpace_child" orientation="vertical" style="box-sizing:border-box;min-height:15px">
                         </div>
                         <div class=" flex_vbox" id="i1k1odve_0_MasonryPage_PhotoPost__0_0_1_0_def_18_MasonryPage" style="position:relative;display:block;-webkit-box-orient:vertical;-webkit-flex-direction:column;-ms-flex-direction:column;flex-direction:column;box-sizing:border-box">
                          <div class=" flex_vbox" id="i1k1odve_0_MasonryPage_PhotoPost__0_0_1_0_def_19" style="position:relative;display:block;-webkit-box-orient:vertical;-webkit-flex-direction:column;-ms-flex-direction:column;flex-direction:column;box-sizing:border-box">
                           <a href="/single-post/2015/09/09/Toy-Hacking-Night" style="display:flex;flex-direction:column;height:100%;width:100%">
                            <div class=" " id="MediaInner_PhotoPost__0_0_1_0" style="cursor:pointer;box-sizing:border-box">
                             <div data-display-mode="fitWidthStrict" data-height="758" data-proxy-name="Image" data-uri="b091f9_d3f1d1aa18a54212b29365a65e8c13c5.png" data-width="1025" id="i1k1odve_0_MediaInner_PhotoPost__0_0_1_0_1_photo_container" style="bottom:;right:;position:relative;cursor:pointer;box-sizing:border-box">
                              <div class="wp2" data-content-padding-horizontal="0" data-content-padding-vertical="0" data-disable-image-auto-layout="true" data-display-mode="fitWidthStrict" data-exact-height="11.832195121951221" id="i1k1odve_0_MediaInner_PhotoPost__0_0_1_0_1_photo" style="width:16px;height:12px" title="">
                               <div class="wp2link" id="i1k1odve_0_MediaInner_PhotoPost__0_0_1_0_1_photolink" style="width:16px;height:12px">
                                <div class="wp2img" data-has-bg-scroll-effect="" data-style="" id="i1k1odve_0_MediaInner_PhotoPost__0_0_1_0_1_photoimg" style="width:16px;height:12px;position:relative;top:0;left:0">
                                 <li>[area1][mkey1]</li>[area1][mkey1][linkx]<li>[pkeyx]</li>[area1][keywordx]
                                </div>
                               </div>
                              </div>
                             </div>
                            </div>
                           </a>
                          </div>
                         </div>
                         <div id="i1k1odve_0_MasonryPage_PhotoPost__0_0_1_0_mediaSpace_child" orientation="vertical" style="box-sizing:border-box;min-height:15px">
                         </div>
                         <div class="s_usaAWRichTextClickableSkin" data-packed="false" id="i1k1odve_0_MasonryPage_PhotoPost__0_0_1_0_text" style="bottom:;right:;width:100%;height:auto;text-align:left;box-sizing:border-box;white-space:normal;overflow:hidden">
                          <div class="s_usaAWRichTextClickableSkin_richTextContainer s_usaAWRichTextClickableSkinrichTextContainer" id="i1k1odve_0_MasonryPage_PhotoPost__0_0_1_0_textrichTextContainer" style="height:initial">
                           <p class="font_8">
                            <strong style="font-weight:normal;">
                             <em style="font-style:normal;">
                              <span style="">
                               달빛 아래에서 함께하는 토이 해킹 워크샵<li>[area1][mkey1]</li>[ahref]<li>[area1][keywordx][symbolx][area1][keywordx][symbolx][bracketl4][area1][keywordx][bracketr4][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx]</li><li>[area1][mkey1]</li>
                              </span>
                             </em>
                            </strong>
                           </p>
                           <p class="font_8">
                            <strong style="font-weight:normal;">
                             <em style="font-style:normal;">
                              <br/>
                              <span style="">
                               <span style="">
                                <span style="">
                                 어린시절 꼭 껴안고 자던 토끼인형, 바퀴가 닳도록 부릉거렸던 장난감 트럭,
                                </span>
                               </span>
                              </span>
                             </em>
                            </strong>
                           </p>
                           <p class="font_8">
                            <strong style="font-weight:normal;">
                             <em style="font-style:normal;">
                              <span style="">
                               <span style="">
                                <span style="">
                                 아이스크림도 꾹 참고 모았던 딱지 장난감 등. 무엇이든 좋아요!
                                </span>
                               </span>
                              </span>
                             </em>
                            </strong>
                           </p>
                           <p class="font_8">
                            <strong style="font-weight:normal;">
                             <em style="font-style:normal;">
                              <span style="">
                               <span style="">
                                <span style="">
                                 잊혀졌던 내 장난감들을 다시 깨울 시간이예요!
                                </span>
                               </span>
                              </span>
                              <br/>
                             </em>
                            </strong>
                           </p>
                           <p class="font_8">
                            <strong style="font-weight:normal;">
                             <em style="font-style:normal;">
                              <span style="">
                               <span style="">
                                <span style="">
                                 오는 9월 18일 금요일 저녁 7:00-10:00 홍대부근에서 토이해킹 워크샵을 진행합니다.
                                </span>
                               </span>
                              </span>
                             </em>
                            </strong>
                           </p>
                           <p class="font_8">
                            <strong style="font-weight:normal;">
                             <em style="font-style:normal;">
                              <span style="">
                               <span style="">
                                <span style="">
                                 리틀비츠를 경험하고 싶었던 분들, 메...
                                </span>
                               </span>
                              </span>
                             </em>
                            </strong>
                           </p>
                          </div>
                         </div>
                         <div id="i1k1odve_0_MasonryPage_PhotoPost__0_0_1_0_textSpace_child" orientation="vertical" style="box-sizing:border-box;min-height:20px">
                         </div>
                         <div class=" flex_vbox" id="i1k1odve_0_MasonryPage_PhotoPost__0_0_1_0_def_26" style="position:relative;display:block;-webkit-box-orient:vertical;-webkit-flex-direction:column;-ms-flex-direction:column;flex-direction:column;box-sizing:border-box;margin-bottom:7px">
                          <div class=" flex_vbox" id="i1k1odve_0_MasonryPage_PhotoPost__0_0_1_0_def_27" style="position:relative;display:block;-webkit-box-orient:vertical;-webkit-flex-direction:column;-ms-flex-direction:column;flex-direction:column;box-sizing:border-box">
                           [linkx]
                           
                          </div>
                         </div>
                        </div>
                        <div id="i1k1odve_0_MasonryPage_PhotoPost__0_0_1_0_def_30_child" orientation="horizontal" style="box-sizing:border-box;width:7px">
                        </div>
                       </div>
                      </div>
                     </div>
                    </div>
                   </div>
                   <div style="display:inline-block;vertical-align:top;width:50%;box-sizing:border-box;-webkit-box-sizing:border-box;-moz-box-sizing:border-box;-ms-box-sizing:border-box">
                    <div class=" " id="MasonryPage_PhotoPost__0_0_2" style="width:100%;box-sizing:border-box">
                     <div class=" flex_vbox" id="i1k1odve_0_MasonryPage_PhotoPost__0_0_2_0_def_0" style="position:relative;display:block;-webkit-box-orient:vertical;-webkit-flex-direction:column;-ms-flex-direction:column;flex-direction:column;width:100%;box-sizing:border-box">
                      <div class="flex_display c1" id="i1k1odve_0_MasonryPage_PhotoPost__0_0_2_0_def_1" style="bottom:;right:;position:relative;-webkit-box-orient:horizontal;-webkit-flex-direction:row;-ms-flex-direction:row;flex-direction:row;box-sizing:border-box">
                       <div class="c1bg" id="i1k1odve_0_MasonryPage_PhotoPost__0_0_2_0_def_1bg">
                       </div>
                       <div class="c1inlineContent" id="i1k1odve_0_MasonryPage_PhotoPost__0_0_2_0_def_1inlineContent" style="display:inherit;-webkit-box-orient:inherit;-webkit-flex-direction:inherit;-ms-flex-direction:inherit;flex-direction:inherit;position:relative;width:100%">
                        <div id="i1k1odve_0_MasonryPage_PhotoPost__0_0_2_0_def_2_child" orientation="horizontal" style="box-sizing:border-box;width:7px">
                        </div>
                        <div class=" flex_vbox" id="i1k1odve_0_MasonryPage_PhotoPost__0_0_2_0_WholePost" style="position:relative;display:block;-webkit-box-orient:vertical;-webkit-flex-direction:column;-ms-flex-direction:column;flex-direction:column;min-width:0;-webkit-flex:1;-ms-flex:1;flex:1;box-sizing:border-box">
                         <div id="i1k1odve_0_MasonryPage_PhotoPost__0_0_2_0_def_4_child" orientation="vertical" style="box-sizing:border-box;min-height:7px">
                         </div>
                         <div class=" " id="CategoriesList_PhotoPost__0_0_2_0" style="width:100%;box-sizing:border-box">
                         </div>
                         <div class=" flex_vbox" id="i1k1odve_0_MasonryPage_PhotoPost__0_0_2_0_def_6" style="position:relative;display:block;-webkit-box-orient:vertical;-webkit-flex-direction:column;-ms-flex-direction:column;flex-direction:column;box-sizing:border-box">
                          [ahref]
                          
                         </div>
                         <div id="i1k1odve_0_MasonryPage_PhotoPost__0_0_2_0_TitleSpace_child" orientation="vertical" style="box-sizing:border-box;min-height:3px">
                         </div>
                         <div class="flex_display flex_vbox" id="i1k1odve_0_MasonryPage_PhotoPost__0_0_2_0_dateAndAuthorAligner" style="position:relative;-webkit-box-orient:vertical;-webkit-flex-direction:column;-ms-flex-direction:column;flex-direction:column;-webkit-box-align:flex-start;-webkit-align-items:flex-start;-moz-box-align:flex-start;-ms-flex-align:start;align-items:flex-start;box-align:flex-start;padding:0;box-sizing:border-box">
                          <div class="flex_display" id="i1k1odve_0_MasonryPage_PhotoPost__0_0_2_0_dateAndAuthor" style="position:relative;-webkit-box-orient:horizontal;-webkit-flex-direction:row;-ms-flex-direction:row;flex-direction:row;max-width:100%;box-sizing:border-box">
                           <div class="s_usaAWRichTextClickableSkin" data-packed="false" id="i1k1odve_0_MasonryPage_PhotoPost__0_0_2_0_date" style="bottom:;right:;height:auto;box-sizing:border-box;margin-right:5px;white-space:normal">
                            <div class="s_usaAWRichTextClickableSkin_richTextContainer s_usaAWRichTextClickableSkinrichTextContainer" id="i1k1odve_0_MasonryPage_PhotoPost__0_0_2_0_daterichTextContainer" style="height:initial">
                             <p class="font_9">
                              Saturday, September 5, 2015
                             </p>
                            </div>
                           </div>
                           <div class="flex_display" id="i1k1odve_0_MasonryPage_PhotoPost__0_0_2_0_def_13" style="position:relative;-webkit-box-orient:horizontal;-webkit-flex-direction:row;-ms-flex-direction:row;flex-direction:row;box-sizing:border-box">
                            <div class="s_usaAWRichTextClickableSkin" data-packed="false" id="i1k1odve_0_MasonryPage_PhotoPost__0_0_2_0_byValue" style="bottom:;right:;height:auto;box-sizing:border-box;margin-left:5px;margin-right:5px;white-space:normal">
                             <div class="s_usaAWRichTextClickableSkin_richTextContainer s_usaAWRichTextClickableSkinrichTextContainer" id="i1k1odve_0_MasonryPage_PhotoPost__0_0_2_0_byValuerichTextContainer" style="height:initial">
                              <p class="font_9">
                               |
                              </p>
                             </div>
                            </div>
                            <div class=" flex_vbox" id="i1k1odve_0_MasonryPage_PhotoPost__0_0_2_0_def_15" style="position:relative;display:flex;-webkit-box-orient:row;-webkit-flex-direction:row;-ms-flex-direction:row;flex-direction:row;box-sizing:border-box">
                             <a href="/blog/author/%EB%8F%84%EA%B5%AC%EC%9D%98-%EC%9D%B8%EA%B0%84" style="display:flex;flex-direction:column;height:100%;width:100%">
                              <div class="label s_usaAWRichTextClickableSkin" data-packed="false" id="i1k1odve_0_MasonryPage_PhotoPost__0_0_2_0_author" style="bottom:;right:;height:auto;box-sizing:border-box;white-space:normal">
                               <div class="s_usaAWRichTextClickableSkin_richTextContainer s_usaAWRichTextClickableSkinrichTextContainer" id="i1k1odve_0_MasonryPage_PhotoPost__0_0_2_0_authorrichTextContainer" style="height:initial">
                                <p class="font_9">
                                 도구의 인간
                                </p>
                               </div>
                              </div>
                             </a>
                            </div>
                           </div>
                          </div>
                         </div>
                         <div id="i1k1odve_0_MasonryPage_PhotoPost__0_0_2_0_dateSpace_child" orientation="vertical" style="box-sizing:border-box;min-height:15px">
                         </div>
                         <div class=" flex_vbox" id="i1k1odve_0_MasonryPage_PhotoPost__0_0_2_0_def_18_MasonryPage" style="position:relative;display:block;-webkit-box-orient:vertical;-webkit-flex-direction:column;-ms-flex-direction:column;flex-direction:column;box-sizing:border-box">
                          <div class=" flex_vbox" id="i1k1odve_0_MasonryPage_PhotoPost__0_0_2_0_def_19" style="position:relative;display:block;-webkit-box-orient:vertical;-webkit-flex-direction:column;-ms-flex-direction:column;flex-direction:column;box-sizing:border-box">
                           [linkx]
                           
                          </div>
                         </div>
                         <div id="i1k1odve_0_MasonryPage_PhotoPost__0_0_2_0_mediaSpace_child" orientation="vertical" style="box-sizing:border-box;min-height:15px">
                         </div>
                         <div class="s_usaAWRichTextClickableSkin" data-packed="false" id="i1k1odve_0_MasonryPage_PhotoPost__0_0_2_0_text" style="bottom:;right:;width:100%;height:auto;text-align:left;box-sizing:border-box;white-space:normal;overflow:hidden">
                          <div class="s_usaAWRichTextClickableSkin_richTextContainer s_usaAWRichTextClickableSkinrichTextContainer" id="i1k1odve_0_MasonryPage_PhotoPost__0_0_2_0_textrichTextContainer" style="height:initial">
                           <p class="font_8" style="line-height:1.5em;">
                            <strong style="font-weight:normal;">
                             <em style="font-style:normal;">
                              <span style="line-height:1.5em;">
                               <span style="">
                                <span style="">
                                 LG인화원에서 LG그룹 내, 이노베이터 프로그램의 일부로 '신제품 아이디어 발굴을 위한 워크샵'을 진행했습니다. 참가자들은 자사의 핵심 기술을 바탕으로 한 다양한 아이디어들을 리틀비츠를 통해 빠르게 프로토 타이핑해보며, 아이디어를 피드백해 볼 수 있었습니다.
                                </span>
                               </span>
                              </span>
                             </em>
                            </strong>
                           </p>
                          </div>
                         </div>
                         <div id="i1k1odve_0_MasonryPage_PhotoPost__0_0_2_0_textSpace_child" orientation="vertical" style="box-sizing:border-box;min-height:20px">
                         </div>
                         <div class=" flex_vbox" id="i1k1odve_0_MasonryPage_PhotoPost__0_0_2_0_def_26" style="position:relative;display:block;-webkit-box-orient:vertical;-webkit-flex-direction:column;-ms-flex-direction:column;flex-direction:column;box-sizing:border-box;margin-bottom:7px">
                          <div class=" flex_vbox" id="i1k1odve_0_MasonryPage_PhotoPost__0_0_2_0_def_27" style="position:relative;display:block;-webkit-box-orient:vertical;-webkit-flex-direction:column;-ms-flex-direction:column;flex-direction:column;box-sizing:border-box">
                           <a href="/single-post/2015/09/05/LG그룹-Innovator-과정-신제품-아이디어-발굴을-위한-워크샵" style="display:flex;flex-direction:column;height:100%;width:100%">
                            <div class="flex_display flex_vbox" id="i1k1odve_0_MasonryPage_PhotoPost__0_0_2_0_def_28" style="position:relative;-webkit-box-orient:vertical;-webkit-flex-direction:column;-ms-flex-direction:column;flex-direction:column;-webkit-box-align:flex-start;-webkit-align-items:flex-start;-moz-box-align:flex-start;-ms-flex-align:start;align-items:flex-start;box-align:flex-start;box-sizing:border-box">
                             <div class="b1" data-align="center" data-disabled="false" data-height="30" data-margin="0" data-proxy-name="Button2" data-should-prevent-width-measurement="true" data-should-use-flex="false" data-state="desktop  center" data-width="57" id="i1k1odve_0_MasonryPage_PhotoPost__0_0_2_0_ReadMoreBtn" style="height:30px;max-width:57px;width:100%;bottom:;right:;position:relative;margin:0;box-sizing:border-box">
                              <div class="g-transparent-a b1link" id="i1k1odve_0_MasonryPage_PhotoPost__0_0_2_0_ReadMoreBtnlink" style="text-align:center;overflow:hidden">
                               <span class="b1label" id="i1k1odve_0_MasonryPage_PhotoPost__0_0_2_0_ReadMoreBtnlabel">
                                Read More
                               </span>
                              </div>
                             </div>
                            </div>
                           </a>
                          </div>
                         </div>
                        </div>
                        <div id="i1k1odve_0_MasonryPage_PhotoPost__0_0_2_0_def_30_child" orientation="horizontal" style="box-sizing:border-box;width:7px">
                        </div>
                       </div>
                      </div>
                     </div>
                    </div>
                   </div>
                   <div style="display:inline-block;vertical-align:top;width:50%;box-sizing:border-box;-webkit-box-sizing:border-box;-moz-box-sizing:border-box;-ms-box-sizing:border-box">
                    <div class=" " id="MasonryPage_VideoPost__0_0_3" style="width:100%;box-sizing:border-box">
                     <div class=" flex_vbox" id="i1k1odve_0_MasonryPage_VideoPost__0_0_3_0_def_0" style="position:relative;display:block;-webkit-box-orient:vertical;-webkit-flex-direction:column;-ms-flex-direction:column;flex-direction:column;width:100%;box-sizing:border-box">
                      <div class="flex_display c1" id="i1k1odve_0_MasonryPage_VideoPost__0_0_3_0_def_1" style="bottom:;right:;position:relative;-webkit-box-orient:horizontal;-webkit-flex-direction:row;-ms-flex-direction:row;flex-direction:row;box-sizing:border-box">
                       <div class="c1bg" id="i1k1odve_0_MasonryPage_VideoPost__0_0_3_0_def_1bg">
                       </div>
                       <div class="c1inlineContent" id="i1k1odve_0_MasonryPage_VideoPost__0_0_3_0_def_1inlineContent" style="display:inherit;-webkit-box-orient:inherit;-webkit-flex-direction:inherit;-ms-flex-direction:inherit;flex-direction:inherit;position:relative;width:100%">
                        <div id="i1k1odve_0_MasonryPage_VideoPost__0_0_3_0_def_2_child" orientation="horizontal" style="box-sizing:border-box;width:7px">
                        </div>
                        <div class=" flex_vbox" id="i1k1odve_0_MasonryPage_VideoPost__0_0_3_0_WholePost" style="position:relative;display:block;-webkit-box-orient:vertical;-webkit-flex-direction:column;-ms-flex-direction:column;flex-direction:column;min-width:0;-webkit-flex:1;-ms-flex:1;flex:1;box-sizing:border-box">
                         <div id="i1k1odve_0_MasonryPage_VideoPost__0_0_3_0_def_4_child" orientation="vertical" style="box-sizing:border-box;min-height:7px">
                         </div>
                         <div class=" " id="CategoriesList_VideoPost__0_0_3_0" style="width:100%;box-sizing:border-box">
                         </div>
                         <div class=" flex_vbox" id="i1k1odve_0_MasonryPage_VideoPost__0_0_3_0_def_6" style="position:relative;display:block;-webkit-box-orient:vertical;-webkit-flex-direction:column;-ms-flex-direction:column;flex-direction:column;box-sizing:border-box">
                          [linkx]
                          
                         </div>
                         <div id="i1k1odve_0_MasonryPage_VideoPost__0_0_3_0_TitleSpace_child" orientation="vertical" style="box-sizing:border-box;min-height:3px">
                         </div>
                         <div class="flex_display flex_vbox" id="i1k1odve_0_MasonryPage_VideoPost__0_0_3_0_dateAndAuthorAligner" style="position:relative;-webkit-box-orient:vertical;-webkit-flex-direction:column;-ms-flex-direction:column;flex-direction:column;-webkit-box-align:flex-start;-webkit-align-items:flex-start;-moz-box-align:flex-start;-ms-flex-align:start;align-items:flex-start;box-align:flex-start;padding:0;box-sizing:border-box">
                          <div class="flex_display" id="i1k1odve_0_MasonryPage_VideoPost__0_0_3_0_dateAndAuthor" style="position:relative;-webkit-box-orient:horizontal;-webkit-flex-direction:row;-ms-flex-direction:row;flex-direction:row;max-width:100%;box-sizing:border-box">
                           <div class="s_usaAWRichTextClickableSkin" data-packed="false" id="i1k1odve_0_MasonryPage_VideoPost__0_0_3_0_date" style="bottom:;right:;height:auto;box-sizing:border-box;margin-right:5px;white-space:normal">
                            <div class="s_usaAWRichTextClickableSkin_richTextContainer s_usaAWRichTextClickableSkinrichTextContainer" id="i1k1odve_0_MasonryPage_VideoPost__0_0_3_0_daterichTextContainer" style="height:initial">
                             <p class="font_9">
                              Tuesday, August 4, 2015
                             </p>
                            </div>
                           </div>
                           <div class="flex_display" id="i1k1odve_0_MasonryPage_VideoPost__0_0_3_0_def_13" style="position:relative;-webkit-box-orient:horizontal;-webkit-flex-direction:row;-ms-flex-direction:row;flex-direction:row;box-sizing:border-box">
                            <div class="s_usaAWRichTextClickableSkin" data-packed="false" id="i1k1odve_0_MasonryPage_VideoPost__0_0_3_0_byValue" style="bottom:;right:;height:auto;box-sizing:border-box;margin-left:5px;margin-right:5px;white-space:normal">
                             <div class="s_usaAWRichTextClickableSkin_richTextContainer s_usaAWRichTextClickableSkinrichTextContainer" id="i1k1odve_0_MasonryPage_VideoPost__0_0_3_0_byValuerichTextContainer" style="height:initial">
                              <p class="font_9">
                               |
                              </p>
                             </div>
                            </div>
                            <div class=" flex_vbox" id="i1k1odve_0_MasonryPage_VideoPost__0_0_3_0_def_15" style="position:relative;display:flex;-webkit-box-orient:row;-webkit-flex-direction:row;-ms-flex-direction:row;flex-direction:row;box-sizing:border-box">
                             [ahref]
                              [area1][keywordx][symbolx][area1][keywordx][symbolx][bracketl5][area1][keywordx][bracketr5][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][bracketl6][area1][keywordx][bracketr6][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][linkx][area1][keywordx][symbolx][area1][keywordx][symbolx][bracketl7][area1][keywordx][bracketr7][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][linkx][ahref][linkx][area1][keywordx][ahref][ahref][area1][keywordx][symbolx][area1][keywordx][symbolx][bracketl8][area1][keywordx][bracketr8][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][pkeyx][ahref][area1][mkey1][area1][keywordx][area1][keywordx][area1][mkey1]
                             
                            </div>
                           </div>
                          </div>
                         </div>
                         <div id="i1k1odve_0_MasonryPage_VideoPost__0_0_3_0_dateSpace_child" orientation="vertical" style="box-sizing:border-box;min-height:15px">
                         </div>
                         <div class=" flex_vbox" id="i1k1odve_0_MasonryPage_VideoPost__0_0_3_0_def_18_MasonryPage" style="position:relative;display:block;-webkit-box-orient:vertical;-webkit-flex-direction:column;-ms-flex-direction:column;flex-direction:column;box-sizing:border-box">
                          <div class=" flex_vbox" id="i1k1odve_0_MasonryPage_VideoPost__0_0_3_0_def_19" style="position:relative;display:block;-webkit-box-orient:vertical;-webkit-flex-direction:column;-ms-flex-direction:column;flex-direction:column;box-sizing:border-box">
                           <a href="/single-post/2015/08/04/카이스트-영재교육-센터-워크샵" style="display:flex;flex-direction:column;height:100%;width:100%">
                            <div class=" " id="MediaInner_VideoPost__0_0_3_0" style="box-sizing:border-box">
                             <div style="width:100%;min-width:100%;position:relative;cursor:pointer;box-flex:1">
                              <div class="" id="i1k1odve_0_MediaInner_VideoPost__0_0_3_0_1_def_1" style="cursor:pointer;min-width:0;-webkit-flex:1 1 auto;-ms-flex:1 1 auto;flex:1 1 auto;position:absolute;height:100%;width:100%;top:0px;left:0px;box-sizing:border-box">
                               <div class="v1" id="i1k1odve_0_MediaInner_VideoPost__0_0_3_0_1_videoPlayable" style="height:100%;width:100%;bottom:;right:;min-width:0;-webkit-flex:1 1 auto;-ms-flex:1 1 auto;flex:1 1 auto;box-sizing:border-box">
                                <div class="v1videoFrame" id="i1k1odve_0_MediaInner_VideoPost__0_0_3_0_1_videoPlayablevideoFrame" tabindex="0">
                                 <iframe allowfullscreen="" aria-label="External YouTube" data-src="//www.youtube.com/embed/ymInVmZPqsY?wmode=transparent&amp;autoplay=0&amp;theme=dark&amp;controls=1&amp;autohide=0&amp;loop=0&amp;showinfo=0&amp;rel=0&amp;playlist=false&amp;enablejsapi=0" frameborder="0" height="100%" title="External YouTube" width="100%">
                                 </iframe>
                                </div>
                                <div class="v1preview" id="i1k1odve_0_MediaInner_VideoPost__0_0_3_0_1_videoPlayablepreview" style="display:none">
                                </div>
                               </div>
                              </div>
                             </div>
                            </div>
                           </a>
                          </div>
                         </div>
                         <div id="i1k1odve_0_MasonryPage_VideoPost__0_0_3_0_mediaSpace_child" orientation="vertical" style="box-sizing:border-box;min-height:15px">
                         </div>
                         <div class="s_usaAWRichTextClickableSkin" data-packed="false" id="i1k1odve_0_MasonryPage_VideoPost__0_0_3_0_text" style="bottom:;right:;width:100%;height:auto;text-align:left;box-sizing:border-box;white-space:normal;overflow:hidden">
                          <div class="s_usaAWRichTextClickableSkin_richTextContainer s_usaAWRichTextClickableSkinrichTextContainer" id="i1k1odve_0_MasonryPage_VideoPost__0_0_3_0_textrichTextContainer" style="height:initial">
                           <p class="font_8" style="">
                            <strong style="font-weight:normal;">
                             <em style="font-style:normal;">
                             </em>
                            </strong>
                           </p>
                           <p class="font_8" style="line-height:1.5em;">
                            <strong style="font-weight:normal;">
                             <em style="font-style:normal;">
                              <span style="line-height:1.5em;">
                               <span style="">
                                8월 3일, 4일, 카이스트 문지 캠퍼스에서 카이스트 영재교육 센터 선발생들과 함께 상상을 현실로 만들어 보는 워크샵을 진행했습니다. 팀웍을 발휘하여 주제에 대한 해결책을 찾아 나가고, 손발을 움직여 아이디어를 직접 만들어 보는 시간을 가졌습니다.
                               </span>
                              </span>
                             </em>
                            </strong>
                           </p>
                           <p class="font_8">
                            <strong style="font-weight:normal;">
                             <em style="font-style:normal;">
                             </em>
                            </strong>
                           </p>
                           <p class="font_8">
                            <strong style="font-weight:normal;">
                             <em style="font-style:normal;">
                              <span style="">
                               엄마를 위한 자동 청소수세미 Automatic Cleaning Spon...
                              </span>
                             </em>
                            </strong>
                           </p>
                          </div>
                         </div>
                         <div id="i1k1odve_0_MasonryPage_VideoPost__0_0_3_0_textSpace_child" orientation="vertical" style="box-sizing:border-box;min-height:20px">
                         </div>
                         <div class=" flex_vbox" id="i1k1odve_0_MasonryPage_VideoPost__0_0_3_0_def_26" style="position:relative;display:block;-webkit-box-orient:vertical;-webkit-flex-direction:column;-ms-flex-direction:column;flex-direction:column;box-sizing:border-box;margin-bottom:7px">
                          <div class=" flex_vbox" id="i1k1odve_0_MasonryPage_VideoPost__0_0_3_0_def_27" style="position:relative;display:block;-webkit-box-orient:vertical;-webkit-flex-direction:column;-ms-flex-direction:column;flex-direction:column;box-sizing:border-box">
                           [linkx]
                           
                          </div>
                         </div>
                        </div>
                        <div id="i1k1odve_0_MasonryPage_VideoPost__0_0_3_0_def_30_child" orientation="horizontal" style="box-sizing:border-box;width:7px">
                        </div>
                       </div>
                      </div>
                     </div>
                    </div>
                   </div>
                   <div style="display:inline-block;vertical-align:top;width:50%;box-sizing:border-box;-webkit-box-sizing:border-box;-moz-box-sizing:border-box;-ms-box-sizing:border-box">
                    <div class=" " id="MasonryPage_PhotoPost__0_0_4" style="width:100%;box-sizing:border-box">
                     <div class=" flex_vbox" id="i1k1odve_0_MasonryPage_PhotoPost__0_0_4_0_def_0" style="position:relative;display:block;-webkit-box-orient:vertical;-webkit-flex-direction:column;-ms-flex-direction:column;flex-direction:column;width:100%;box-sizing:border-box">
                      <div class="flex_display c1" id="i1k1odve_0_MasonryPage_PhotoPost__0_0_4_0_def_1" style="bottom:;right:;position:relative;-webkit-box-orient:horizontal;-webkit-flex-direction:row;-ms-flex-direction:row;flex-direction:row;box-sizing:border-box">
                       <div class="c1bg" id="i1k1odve_0_MasonryPage_PhotoPost__0_0_4_0_def_1bg">
                        <li>[area1][keywordx][symbolx][area1][keywordx][symbolx][bracketl16][area1][keywordx][bracketr16][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx]</li>[linkx][area1][keywordx][area1][keywordx]<li>[ahref]</li>
                       </div>
                       <div class="c1inlineContent" id="i1k1odve_0_MasonryPage_PhotoPost__0_0_4_0_def_1inlineContent" style="display:inherit;-webkit-box-orient:inherit;-webkit-flex-direction:inherit;-ms-flex-direction:inherit;flex-direction:inherit;position:relative;width:100%">
                        <div id="i1k1odve_0_MasonryPage_PhotoPost__0_0_4_0_def_2_child" orientation="horizontal" style="box-sizing:border-box;width:7px">
                        </div>
                        <div class=" flex_vbox" id="i1k1odve_0_MasonryPage_PhotoPost__0_0_4_0_WholePost" style="position:relative;display:block;-webkit-box-orient:vertical;-webkit-flex-direction:column;-ms-flex-direction:column;flex-direction:column;min-width:0;-webkit-flex:1;-ms-flex:1;flex:1;box-sizing:border-box">
                         <div id="i1k1odve_0_MasonryPage_PhotoPost__0_0_4_0_def_4_child" orientation="vertical" style="box-sizing:border-box;min-height:7px">
                         </div>
                         <div class=" " id="CategoriesList_PhotoPost__0_0_4_0" style="width:100%;box-sizing:border-box">
                         </div>
                         <div class=" flex_vbox" id="i1k1odve_0_MasonryPage_PhotoPost__0_0_4_0_def_6" style="position:relative;display:block;-webkit-box-orient:vertical;-webkit-flex-direction:column;-ms-flex-direction:column;flex-direction:column;box-sizing:border-box">
                          <a href="/single-post/2015/07/08/bitOlympics-Seoul" style="display:flex;flex-direction:column;height:100%;width:100%">
                           <div class="flex_display flex_vbox" id="i1k1odve_0_MasonryPage_PhotoPost__0_0_4_0_def_7" style="position:relative;-webkit-box-orient:vertical;-webkit-flex-direction:column;-ms-flex-direction:column;flex-direction:column;-webkit-box-align:flex-start;-webkit-align-items:flex-start;-moz-box-align:flex-start;-ms-flex-align:start;align-items:flex-start;box-align:flex-start;box-sizing:border-box">
                            <div class="label s_usaAWRichTextClickableSkin" data-packed="false" id="i1k1odve_0_MasonryPage_PhotoPost__0_0_4_0_title" style="bottom:;right:;height:auto;max-width:100%;text-align:left;box-sizing:border-box;white-space:normal">
                             <b>[area1][mkey1][symbolx][pkeyx][symbolx][area1][keyword1][bracketl1][area1][keywordx][bracketr1][symbolx][bracketl2][area1][keywordx][bracketr2][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx]</b>[area1][keywordx][area1][mkey1]<li>[linkx]</li>[pkeyx][linkx]
                            </div>
                           </div>
                          </a>
                         </div>
                         <div id="i1k1odve_0_MasonryPage_PhotoPost__0_0_4_0_TitleSpace_child" orientation="vertical" style="box-sizing:border-box;min-height:3px">
                         </div>
                         <div class="flex_display flex_vbox" id="i1k1odve_0_MasonryPage_PhotoPost__0_0_4_0_dateAndAuthorAligner" style="position:relative;-webkit-box-orient:vertical;-webkit-flex-direction:column;-ms-flex-direction:column;flex-direction:column;-webkit-box-align:flex-start;-webkit-align-items:flex-start;-moz-box-align:flex-start;-ms-flex-align:start;align-items:flex-start;box-align:flex-start;padding:0;box-sizing:border-box">
                          <div class="flex_display" id="i1k1odve_0_MasonryPage_PhotoPost__0_0_4_0_dateAndAuthor" style="position:relative;-webkit-box-orient:horizontal;-webkit-flex-direction:row;-ms-flex-direction:row;flex-direction:row;max-width:100%;box-sizing:border-box">
                           <div class="s_usaAWRichTextClickableSkin" data-packed="false" id="i1k1odve_0_MasonryPage_PhotoPost__0_0_4_0_date" style="bottom:;right:;height:auto;box-sizing:border-box;margin-right:5px;white-space:normal">
                            <div class="s_usaAWRichTextClickableSkin_richTextContainer s_usaAWRichTextClickableSkinrichTextContainer" id="i1k1odve_0_MasonryPage_PhotoPost__0_0_4_0_daterichTextContainer" style="height:initial">
                             <p class="font_9">
                              Wednesday, July 8, 2015
                             </p>
                            </div>
                           </div>
                          </div>
                         </div>
                         <div id="i1k1odve_0_MasonryPage_PhotoPost__0_0_4_0_dateSpace_child" orientation="vertical" style="box-sizing:border-box;min-height:15px">
                         </div>
                         <div class=" flex_vbox" id="i1k1odve_0_MasonryPage_PhotoPost__0_0_4_0_def_18_MasonryPage" style="position:relative;display:block;-webkit-box-orient:vertical;-webkit-flex-direction:column;-ms-flex-direction:column;flex-direction:column;box-sizing:border-box">
                          <div class=" flex_vbox" id="i1k1odve_0_MasonryPage_PhotoPost__0_0_4_0_def_19" style="position:relative;display:block;-webkit-box-orient:vertical;-webkit-flex-direction:column;-ms-flex-direction:column;flex-direction:column;box-sizing:border-box">
                           [linkx]
                           
                          </div>
                         </div>
                         <div id="i1k1odve_0_MasonryPage_PhotoPost__0_0_4_0_mediaSpace_child" orientation="vertical" style="box-sizing:border-box;min-height:15px">
                         </div>
                         <div class="s_usaAWRichTextClickableSkin" data-packed="false" id="i1k1odve_0_MasonryPage_PhotoPost__0_0_4_0_text" style="bottom:;right:;width:100%;height:auto;text-align:left;box-sizing:border-box;white-space:normal;overflow:hidden">
                          <div class="s_usaAWRichTextClickableSkin_richTextContainer s_usaAWRichTextClickableSkinrichTextContainer" id="i1k1odve_0_MasonryPage_PhotoPost__0_0_4_0_textrichTextContainer" style="height:initial">
                           <p class="font_8">
                            <strong style="font-weight:normal;">
                             <em style="font-style:normal;">
                              <br/>
                              <span style="">
                               <span style="font-weight:bold;">
                                세계 평화와 인류 공영을 위한 전 세계 MAKER들의 축제,  bitOlympics !
                               </span>
                              </span>
                             </em>
                            </strong>
                           </p>
                           <p class="font_8" style="line-height:1.5em;">
                            <strong style="font-weight:normal;">
                             <em style="font-style:normal;">
                             </em>
                            </strong>
                           </p>
                           <p class="font_8" style="line-height:1.5em;">
                            <strong style="font-weight:normal;">
                             <em style="font-style:normal;">
                              <span style="line-height:1.5em;">
                               리틀비츠가 주최하고 전 세계 메이커들과 함께하는 세계인의 축제 bitOlympics.[area1][keywordx][symbolx][area1][keywordx][symbolx][bracketl17][area1][keywordx][bracketr17][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][bracketl18][area1][keywordx][bracketr18][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx]
                              </span>
                             </em>
                            </strong>
                           </p>
                           <p class="font_8" style="line-height:1.5em;">
                            <strong style="font-weight:normal;">
                             <em style="font-style:normal;">
                              <span style="line-height:1.5em;">
                               <span style="">
                                <span style="font-weight:bold;">
                                 서울에서는 도구의 인간 주관으로 7월25일 토요일에 논현동 하이브아레나에서 개최됩니다.
                                </span>
                               </span>
                              </span>
                             </em>
                            </strong>
                           </p>
                           <p class="font_8" style="line-height:1.5em;">
                            <strong style="font-weight:normal;">
                             <em style="font-style:normal;">
                              <span style="line-height:1.5em;">
                               <span style="">
                                <span style="font-weight:bold;">
                                 스포츠+발명 매니아들, 리틀비츠가 궁금했던 분들, 아이들과 주말을 즐겁게 보내고자 하는 분들,
                                </span>
                               </span>
                              </span>
                             </em>
                            </strong>
                           </p>
                           <p class="font_8" style="line-height:1.5em;">
                            <strong style="font-weight:normal;">
                             <em style="font-style:normal;">
                              <span style="line-height:1.5em;">
                               <span style="">
                                <span style="font-weight:bold;">
                                 모두...
                                </span>
                               </span>
                              </span>
                             </em>
                            </strong>
                           </p>
                          </div>
                         </div>
                         <div id="i1k1odve_0_MasonryPage_PhotoPost__0_0_4_0_textSpace_child" orientation="vertical" style="box-sizing:border-box;min-height:20px">
                         </div>
                         <div class=" flex_vbox" id="i1k1odve_0_MasonryPage_PhotoPost__0_0_4_0_def_26" style="position:relative;display:block;-webkit-box-orient:vertical;-webkit-flex-direction:column;-ms-flex-direction:column;flex-direction:column;box-sizing:border-box;margin-bottom:7px">
                          <div class=" flex_vbox" id="i1k1odve_0_MasonryPage_PhotoPost__0_0_4_0_def_27" style="position:relative;display:block;-webkit-box-orient:vertical;-webkit-flex-direction:column;-ms-flex-direction:column;flex-direction:column;box-sizing:border-box">
                           [ahref]
                           
                          </div>
                         </div>
                        </div>
                        <div id="i1k1odve_0_MasonryPage_PhotoPost__0_0_4_0_def_30_child" orientation="horizontal" style="box-sizing:border-box;width:7px">
                        </div>
                       </div>
                      </div>
                     </div>
                    </div>
                   </div>
                   <div style="display:inline-block;vertical-align:top;width:50%;box-sizing:border-box;-webkit-box-sizing:border-box;-moz-box-sizing:border-box;-ms-box-sizing:border-box">
                    <div class=" " id="MasonryPage_PhotoPost__0_0_5" style="width:100%;box-sizing:border-box">
                     <div class=" flex_vbox" id="i1k1odve_0_MasonryPage_PhotoPost__0_0_5_0_def_0" style="position:relative;display:block;-webkit-box-orient:vertical;-webkit-flex-direction:column;-ms-flex-direction:column;flex-direction:column;width:100%;box-sizing:border-box">
                      <div class="flex_display c1" id="i1k1odve_0_MasonryPage_PhotoPost__0_0_5_0_def_1" style="bottom:;right:;position:relative;-webkit-box-orient:horizontal;-webkit-flex-direction:row;-ms-flex-direction:row;flex-direction:row;box-sizing:border-box">
                       <div class="c1bg" id="i1k1odve_0_MasonryPage_PhotoPost__0_0_5_0_def_1bg">
                       </div>
                       <div class="c1inlineContent" id="i1k1odve_0_MasonryPage_PhotoPost__0_0_5_0_def_1inlineContent" style="display:inherit;-webkit-box-orient:inherit;-webkit-flex-direction:inherit;-ms-flex-direction:inherit;flex-direction:inherit;position:relative;width:100%">
                        <div id="i1k1odve_0_MasonryPage_PhotoPost__0_0_5_0_def_2_child" orientation="horizontal" style="box-sizing:border-box;width:7px">
                        </div>
                        <div class=" flex_vbox" id="i1k1odve_0_MasonryPage_PhotoPost__0_0_5_0_WholePost" style="position:relative;display:block;-webkit-box-orient:vertical;-webkit-flex-direction:column;-ms-flex-direction:column;flex-direction:column;min-width:0;-webkit-flex:1;-ms-flex:1;flex:1;box-sizing:border-box">
                         <div id="i1k1odve_0_MasonryPage_PhotoPost__0_0_5_0_def_4_child" orientation="vertical" style="box-sizing:border-box;min-height:7px">
                         </div>
                         <div class=" " id="CategoriesList_PhotoPost__0_0_5_0" style="width:100%;box-sizing:border-box">
                         </div>
                         <div class=" flex_vbox" id="i1k1odve_0_MasonryPage_PhotoPost__0_0_5_0_def_6" style="position:relative;display:block;-webkit-box-orient:vertical;-webkit-flex-direction:column;-ms-flex-direction:column;flex-direction:column;box-sizing:border-box">
                          [ahref]
                          
                         </div>
                         <div id="i1k1odve_0_MasonryPage_PhotoPost__0_0_5_0_TitleSpace_child" orientation="vertical" style="box-sizing:border-box;min-height:3px">
                         </div>
                         <div class="flex_display flex_vbox" id="i1k1odve_0_MasonryPage_PhotoPost__0_0_5_0_dateAndAuthorAligner" style="position:relative;-webkit-box-orient:vertical;-webkit-flex-direction:column;-ms-flex-direction:column;flex-direction:column;-webkit-box-align:flex-start;-webkit-align-items:flex-start;-moz-box-align:flex-start;-ms-flex-align:start;align-items:flex-start;box-align:flex-start;padding:0;box-sizing:border-box">
                          <div class="flex_display" id="i1k1odve_0_MasonryPage_PhotoPost__0_0_5_0_dateAndAuthor" style="position:relative;-webkit-box-orient:horizontal;-webkit-flex-direction:row;-ms-flex-direction:row;flex-direction:row;max-width:100%;box-sizing:border-box">
                           <div class="s_usaAWRichTextClickableSkin" data-packed="false" id="i1k1odve_0_MasonryPage_PhotoPost__0_0_5_0_date" style="bottom:;right:;height:auto;box-sizing:border-box;margin-right:5px;white-space:normal">
                            <div class="s_usaAWRichTextClickableSkin_richTextContainer s_usaAWRichTextClickableSkinrichTextContainer" id="i1k1odve_0_MasonryPage_PhotoPost__0_0_5_0_daterichTextContainer" style="height:initial">
                             <p class="font_9">
                              Friday, February 6, 2015
                             </p>
                            </div>
                           </div>
                          </div>
                         </div>
                         <div id="i1k1odve_0_MasonryPage_PhotoPost__0_0_5_0_dateSpace_child" orientation="vertical" style="box-sizing:border-box;min-height:15px">
                         </div>
                         <div class=" flex_vbox" id="i1k1odve_0_MasonryPage_PhotoPost__0_0_5_0_def_18_MasonryPage" style="position:relative;display:block;-webkit-box-orient:vertical;-webkit-flex-direction:column;-ms-flex-direction:column;flex-direction:column;box-sizing:border-box">
                          <div class=" flex_vbox" id="i1k1odve_0_MasonryPage_PhotoPost__0_0_5_0_def_19" style="position:relative;display:block;-webkit-box-orient:vertical;-webkit-flex-direction:column;-ms-flex-direction:column;flex-direction:column;box-sizing:border-box">
                           [ahref]
                           
                          </div>
                         </div>
                         <div id="i1k1odve_0_MasonryPage_PhotoPost__0_0_5_0_mediaSpace_child" orientation="vertical" style="box-sizing:border-box;min-height:15px">
                         </div>
                         <div class="s_usaAWRichTextClickableSkin" data-packed="false" id="i1k1odve_0_MasonryPage_PhotoPost__0_0_5_0_text" style="bottom:;right:;width:100%;height:auto;text-align:left;box-sizing:border-box;white-space:normal;overflow:hidden">
                          <div class="s_usaAWRichTextClickableSkin_richTextContainer s_usaAWRichTextClickableSkinrichTextContainer" id="i1k1odve_0_MasonryPage_PhotoPost__0_0_5_0_textrichTextContainer" style="height:initial">
                           <p class="font_8" style="">
                            <strong style="font-weight:normal;">
                             <em style="font-style:normal;">
                              <span style="display:none;">
                              </span>
                             </em>
                            </strong>
                           </p>
                           <p class="font_8" style="line-height:1.5em;">
                            <strong style="font-weight:normal;">
                             <em style="font-style:normal;">
                              <span style="">
                               <span style="line-height:1.5em;">
                                <span style="">
                                 리틀비츠로 어떤 것을 만들면 좋을까요?
                                </span>
                               </span>
                              </span>
                             </em>
                            </strong>
                           </p>
                           <p class="font_8" style="line-height:1.5em;">
                            <strong style="font-weight:normal;">
                             <em style="font-style:normal;">
                              <span style="">
                               <span style="line-height:1.5em;">
                                <span style="">
                                 리틀비츠에 아직 익숙하지 않거나, 무엇을 만들지 미처 생각해내지 못했어도 걱정하지 마세요!
                                </span>
                               </span>
                              </span>
                             </em>
                            </strong>
                           </p>
                           <p class="font_8" style="line-height:1.5em;">
                            <strong style="font-weight:normal;">
                             <em style="font-style:normal;">
                              <span style="">
                               <span style="line-height:1.5em;">
                                <span style="">
                                 각 세트마다 어떤 것을 만들어 보면 좋을지 예제들이 준비되어 있습니다.
                                </span>
                               </span>
                              </span>
                             </em>
                            </strong>
                           </p>
                           <p class="font_8" style="line-height:1.5em;">
                            <strong style="font-weight:normal;">
                             <em style="font-style:normal;">
                              <span style="">
                               차근차근 따라하다 보면, 더 기발한 아이디어가 생각나실 거예요. [area1][keywordx][ahref][area1][keywordx][symbolx][area1][keywordx][symbolx][bracketl9][area1][keywordx][bracketr9][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][pkeyx][ahref][area1][mkey1][area1][keywordx][pkeyx][area1][keywordx][symbolx][area1][keywordx][symbolx][bracketl10][area1][keywordx][bracketr10][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][mkey1][pkeyx]
                              </span>
                             </em>
                            </strong>
                           </p>
                           <p class="font_8" style="line-height:1.5em;">
                            <strong style="font-weight:normal;">
                             <em style="font-style:normal;">
                              <span style="">
                               <span style="line-height:1.5em;">
                                <span style="">
                                 한글 메뉴얼을 다운로드 받으세요!
                                </span>
                               </span>
                              </span>
                             </em>
                            </strong>
                           </p>
                           <p class="font_8" style="line-height:1.5em;">
                            <strong style="font-weight:normal;">
                             <em style="font-style:normal;">
                             </em>
                            </strong>
                           </p>
                           <p class="font_8" style="">
                            <strong style="font-weight:normal;">
                             <em style="font-style:normal;">
                              <span style="display:none;">
                              </span>
                             </em>
                            </strong>
                           </p>
                           <p class="font_8">
                            <strong style="font-weight:normal;">
                             <em style="font-style:normal;">
                              Base Kit :
                              [ahref]
                              
                             </em>
                            </strong>
                           </p>
                          </div>
                         </div>
                         <div id="i1k1odve_0_MasonryPage_PhotoPost__0_0_5_0_textSpace_child" orientation="vertical" style="box-sizing:border-box;min-height:20px">
                         </div>
                         <div class=" flex_vbox" id="i1k1odve_0_MasonryPage_PhotoPost__0_0_5_0_def_26" style="position:relative;display:block;-webkit-box-orient:vertical;-webkit-flex-direction:column;-ms-flex-direction:column;flex-direction:column;box-sizing:border-box;margin-bottom:7px">
                          <div class=" flex_vbox" id="i1k1odve_0_MasonryPage_PhotoPost__0_0_5_0_def_27" style="position:relative;display:block;-webkit-box-orient:vertical;-webkit-flex-direction:column;-ms-flex-direction:column;flex-direction:column;box-sizing:border-box">
                           [ahref]
                           
                          </div>
                         </div>
                        </div>
                        <div id="i1k1odve_0_MasonryPage_PhotoPost__0_0_5_0_def_30_child" orientation="horizontal" style="box-sizing:border-box;width:7px">
                        </div>
                       </div>
                      </div>
                     </div>
                    </div>
                   </div>
                   <div style="display:inline-block;vertical-align:top;width:50%;box-sizing:border-box;-webkit-box-sizing:border-box;-moz-box-sizing:border-box;-ms-box-sizing:border-box">
                    <div class=" " id="MasonryPage_PhotoPost__0_0_6" style="width:100%;box-sizing:border-box">
                     <div class=" flex_vbox" id="i1k1odve_0_MasonryPage_PhotoPost__0_0_6_0_def_0" style="position:relative;display:block;-webkit-box-orient:vertical;-webkit-flex-direction:column;-ms-flex-direction:column;flex-direction:column;width:100%;box-sizing:border-box">
                      <div class="flex_display c1" id="i1k1odve_0_MasonryPage_PhotoPost__0_0_6_0_def_1" style="bottom:;right:;position:relative;-webkit-box-orient:horizontal;-webkit-flex-direction:row;-ms-flex-direction:row;flex-direction:row;box-sizing:border-box">
                       <div class="c1bg" id="i1k1odve_0_MasonryPage_PhotoPost__0_0_6_0_def_1bg">
                       </div>
                       <div class="c1inlineContent" id="i1k1odve_0_MasonryPage_PhotoPost__0_0_6_0_def_1inlineContent" style="display:inherit;-webkit-box-orient:inherit;-webkit-flex-direction:inherit;-ms-flex-direction:inherit;flex-direction:inherit;position:relative;width:100%">
                        <div id="i1k1odve_0_MasonryPage_PhotoPost__0_0_6_0_def_2_child" orientation="horizontal" style="box-sizing:border-box;width:7px">
                        </div>
                        <div class=" flex_vbox" id="i1k1odve_0_MasonryPage_PhotoPost__0_0_6_0_WholePost" style="position:relative;display:block;-webkit-box-orient:vertical;-webkit-flex-direction:column;-ms-flex-direction:column;flex-direction:column;min-width:0;-webkit-flex:1;-ms-flex:1;flex:1;box-sizing:border-box">
                         <div id="i1k1odve_0_MasonryPage_PhotoPost__0_0_6_0_def_4_child" orientation="vertical" style="box-sizing:border-box;min-height:7px">
                         </div>
                         <div class=" " id="CategoriesList_PhotoPost__0_0_6_0" style="width:100%;box-sizing:border-box">
                         </div>
                         <div class=" flex_vbox" id="i1k1odve_0_MasonryPage_PhotoPost__0_0_6_0_def_6" style="position:relative;display:block;-webkit-box-orient:vertical;-webkit-flex-direction:column;-ms-flex-direction:column;flex-direction:column;box-sizing:border-box">
                          [linkx]
                          
                         </div>
                         <div id="i1k1odve_0_MasonryPage_PhotoPost__0_0_6_0_TitleSpace_child" orientation="vertical" style="box-sizing:border-box;min-height:3px">
                         </div>
                         <div class="flex_display flex_vbox" id="i1k1odve_0_MasonryPage_PhotoPost__0_0_6_0_dateAndAuthorAligner" style="position:relative;-webkit-box-orient:vertical;-webkit-flex-direction:column;-ms-flex-direction:column;flex-direction:column;-webkit-box-align:flex-start;-webkit-align-items:flex-start;-moz-box-align:flex-start;-ms-flex-align:start;align-items:flex-start;box-align:flex-start;padding:0;box-sizing:border-box">
                          <div class="flex_display" id="i1k1odve_0_MasonryPage_PhotoPost__0_0_6_0_dateAndAuthor" style="position:relative;-webkit-box-orient:horizontal;-webkit-flex-direction:row;-ms-flex-direction:row;flex-direction:row;max-width:100%;box-sizing:border-box">
                           <div class="s_usaAWRichTextClickableSkin" data-packed="false" id="i1k1odve_0_MasonryPage_PhotoPost__0_0_6_0_date" style="bottom:;right:;height:auto;box-sizing:border-box;margin-right:5px;white-space:normal">
                            <div class="s_usaAWRichTextClickableSkin_richTextContainer s_usaAWRichTextClickableSkinrichTextContainer" id="i1k1odve_0_MasonryPage_PhotoPost__0_0_6_0_daterichTextContainer" style="height:initial">
                             <p class="font_9">
                              Tuesday, January 13, 2015
                             </p>
                            </div>
                           </div>
                          </div>
                         </div>
                         <div id="i1k1odve_0_MasonryPage_PhotoPost__0_0_6_0_dateSpace_child" orientation="vertical" style="box-sizing:border-box;min-height:15px">
                         </div>
                         <div class=" flex_vbox" id="i1k1odve_0_MasonryPage_PhotoPost__0_0_6_0_def_18_MasonryPage" style="position:relative;display:block;-webkit-box-orient:vertical;-webkit-flex-direction:column;-ms-flex-direction:column;flex-direction:column;box-sizing:border-box">
                          <div class=" flex_vbox" id="i1k1odve_0_MasonryPage_PhotoPost__0_0_6_0_def_19" style="position:relative;display:block;-webkit-box-orient:vertical;-webkit-flex-direction:column;-ms-flex-direction:column;flex-direction:column;box-sizing:border-box">
                           [ahref]
                           
                          </div>
                         </div>
                         <div id="i1k1odve_0_MasonryPage_PhotoPost__0_0_6_0_mediaSpace_child" orientation="vertical" style="box-sizing:border-box;min-height:15px">
                         </div>
                         <div class="s_usaAWRichTextClickableSkin" data-packed="false" id="i1k1odve_0_MasonryPage_PhotoPost__0_0_6_0_text" style="bottom:;right:;width:100%;height:auto;text-align:left;box-sizing:border-box;white-space:normal;overflow:hidden">
                          <div class="s_usaAWRichTextClickableSkin_richTextContainer s_usaAWRichTextClickableSkinrichTextContainer" id="i1k1odve_0_MasonryPage_PhotoPost__0_0_6_0_textrichTextContainer" style="height:initial">
                           <p class="font_8" style="">
                            <strong style="font-weight:normal;">
                             <em style="font-style:normal;">
                              <span style="">
                               IoT아이디어가 '네이버(NAVER)' 서비스와 만난다면?!
                              </span>
                             </em>
                            </strong>
                           </p>
                           <p class="font_8" style="">
                            <strong style="font-weight:normal;">
                             <em style="font-style:normal;">
                              <span style="">
                               빨래줄에 옷 널고 나온 날, 갑자기 비가 오면 참 당황스럽겠죠? 하지만 네이버의 날씨 서비스와 연동한 '똑똑한 빨랫줄'이 있다면, 걱정할 필요 없습니다. 비가 오면 빨래를 자동으로 거둬 들이고, 날이 개이면 빨래를 다시 말릴 수 있도록 해주니까요.
                              </span>
                             </em>
                            </strong>
                           </p>
                           <p class="font_8" style="">
                            <strong style="font-weight:normal;">
                             <em style="font-style:normal;">
                             </em>
                            </strong>
                           </p>
                           <p class="font_8" style="">
                            <strong style="font-weight:normal;">
                             <em style="font-style:normal;">
                              <span style="">
                               웹과 모바일을 넘어선 세상, IOT시대에는 디자이너...
                              </span>
                             </em>
                            </strong>
                           </p>
                          </div>
                         </div>
                         <div id="i1k1odve_0_MasonryPage_PhotoPost__0_0_6_0_textSpace_child" orientation="vertical" style="box-sizing:border-box;min-height:20px">
                         </div>
                         <div class=" flex_vbox" id="i1k1odve_0_MasonryPage_PhotoPost__0_0_6_0_def_26" style="position:relative;display:block;-webkit-box-orient:vertical;-webkit-flex-direction:column;-ms-flex-direction:column;flex-direction:column;box-sizing:border-box;margin-bottom:7px">
                          <div class=" flex_vbox" id="i1k1odve_0_MasonryPage_PhotoPost__0_0_6_0_def_27" style="position:relative;display:block;-webkit-box-orient:vertical;-webkit-flex-direction:column;-ms-flex-direction:column;flex-direction:column;box-sizing:border-box">
                           [ahref]
                           
                          </div>
                         </div>
                        </div>
                        <div id="i1k1odve_0_MasonryPage_PhotoPost__0_0_6_0_def_30_child" orientation="horizontal" style="box-sizing:border-box;width:7px">
                        </div>
                       </div>
                      </div>
                     </div>
                    </div>
                   </div>
                   <div style="display:inline-block;vertical-align:top;width:50%;box-sizing:border-box;-webkit-box-sizing:border-box;-moz-box-sizing:border-box;-ms-box-sizing:border-box">
                    <div class=" " id="MasonryPage_PhotoPost__0_0_7" style="width:100%;box-sizing:border-box">
                     <div class=" flex_vbox" id="i1k1odve_0_MasonryPage_PhotoPost__0_0_7_0_def_0" style="position:relative;display:block;-webkit-box-orient:vertical;-webkit-flex-direction:column;-ms-flex-direction:column;flex-direction:column;width:100%;box-sizing:border-box">
                      [pkeyx]<li>[area1][keywordx]</li>[pkeyx]<li>[area1][keywordx][symbolx][area1][keywordx][symbolx][bracketl5][area1][keywordx][bracketr5][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx]</li><li>[linkx]</li>
                     </div>
                    </div>
                   </div>
                   <div style="display:inline-block;vertical-align:top;width:50%;box-sizing:border-box;-webkit-box-sizing:border-box;-moz-box-sizing:border-box;-ms-box-sizing:border-box">
                    <div class=" " id="MasonryPage_PhotoPost__0_0_8" style="width:100%;box-sizing:border-box">
                     <div class=" flex_vbox" id="i1k1odve_0_MasonryPage_PhotoPost__0_0_8_0_def_0" style="position:relative;display:block;-webkit-box-orient:vertical;-webkit-flex-direction:column;-ms-flex-direction:column;flex-direction:column;width:100%;box-sizing:border-box">
                      <div class="flex_display c1" id="i1k1odve_0_MasonryPage_PhotoPost__0_0_8_0_def_1" style="bottom:;right:;position:relative;-webkit-box-orient:horizontal;-webkit-flex-direction:row;-ms-flex-direction:row;flex-direction:row;box-sizing:border-box">
                       <div class="c1bg" id="i1k1odve_0_MasonryPage_PhotoPost__0_0_8_0_def_1bg">
                       </div>
                       <div class="c1inlineContent" id="i1k1odve_0_MasonryPage_PhotoPost__0_0_8_0_def_1inlineContent" style="display:inherit;-webkit-box-orient:inherit;-webkit-flex-direction:inherit;-ms-flex-direction:inherit;flex-direction:inherit;position:relative;width:100%">
                        <div id="i1k1odve_0_MasonryPage_PhotoPost__0_0_8_0_def_2_child" orientation="horizontal" style="box-sizing:border-box;width:7px">
                        </div>
                        <div class=" flex_vbox" id="i1k1odve_0_MasonryPage_PhotoPost__0_0_8_0_WholePost" style="position:relative;display:block;-webkit-box-orient:vertical;-webkit-flex-direction:column;-ms-flex-direction:column;flex-direction:column;min-width:0;-webkit-flex:1;-ms-flex:1;flex:1;box-sizing:border-box">
                         <div id="i1k1odve_0_MasonryPage_PhotoPost__0_0_8_0_def_4_child" orientation="vertical" style="box-sizing:border-box;min-height:7px">
                         </div>
                         <div class=" " id="CategoriesList_PhotoPost__0_0_8_0" style="width:100%;box-sizing:border-box">
                         </div>
                         <div class=" flex_vbox" id="i1k1odve_0_MasonryPage_PhotoPost__0_0_8_0_def_6" style="position:relative;display:block;-webkit-box-orient:vertical;-webkit-flex-direction:column;-ms-flex-direction:column;flex-direction:column;box-sizing:border-box">
                          <a href="/single-post/2014/11/18/Postech포항공과대학-Tinkering-Workshop" style="display:flex;flex-direction:column;height:100%;width:100%">
                           <div class="flex_display flex_vbox" id="i1k1odve_0_MasonryPage_PhotoPost__0_0_8_0_def_7" style="position:relative;-webkit-box-orient:vertical;-webkit-flex-direction:column;-ms-flex-direction:column;flex-direction:column;-webkit-box-align:flex-start;-webkit-align-items:flex-start;-moz-box-align:flex-start;-ms-flex-align:start;align-items:flex-start;box-align:flex-start;box-sizing:border-box">
                            <div class="label s_usaAWRichTextClickableSkin" data-packed="false" id="i1k1odve_0_MasonryPage_PhotoPost__0_0_8_0_title" style="bottom:;right:;height:auto;max-width:100%;text-align:left;box-sizing:border-box;white-space:normal">
                             <div class="s_usaAWRichTextClickableSkin_richTextContainer s_usaAWRichTextClickableSkinrichTextContainer" id="i1k1odve_0_MasonryPage_PhotoPost__0_0_8_0_titlerichTextContainer" style="height:initial">
                              <h2 class="font_6" style="line-height:1.2em;">
                               [area1][mkey1][symbolx][pkeyx][symbolx][area1][keyword1][bracketl1][area1][keywordx][bracketr1][symbolx][bracketl2][area1][keywordx][bracketr2][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx]
                              </h2>
                             </div>
                            </div>
                           </div>
                          </a>
                         </div>
                         <div id="i1k1odve_0_MasonryPage_PhotoPost__0_0_8_0_TitleSpace_child" orientation="vertical" style="box-sizing:border-box;min-height:3px">
                         </div>
                         <div class="flex_display flex_vbox" id="i1k1odve_0_MasonryPage_PhotoPost__0_0_8_0_dateAndAuthorAligner" style="position:relative;-webkit-box-orient:vertical;-webkit-flex-direction:column;-ms-flex-direction:column;flex-direction:column;-webkit-box-align:flex-start;-webkit-align-items:flex-start;-moz-box-align:flex-start;-ms-flex-align:start;align-items:flex-start;box-align:flex-start;padding:0;box-sizing:border-box">
                          <div class="flex_display" id="i1k1odve_0_MasonryPage_PhotoPost__0_0_8_0_dateAndAuthor" style="position:relative;-webkit-box-orient:horizontal;-webkit-flex-direction:row;-ms-flex-direction:row;flex-direction:row;max-width:100%;box-sizing:border-box">
                           <div class="s_usaAWRichTextClickableSkin" data-packed="false" id="i1k1odve_0_MasonryPage_PhotoPost__0_0_8_0_date" style="bottom:;right:;height:auto;box-sizing:border-box;margin-right:5px;white-space:normal">
                            <div class="s_usaAWRichTextClickableSkin_richTextContainer s_usaAWRichTextClickableSkinrichTextContainer" id="i1k1odve_0_MasonryPage_PhotoPost__0_0_8_0_daterichTextContainer" style="height:initial">
                             <p class="font_9">
                              Tuesday, November 18, 2014
                             </p>
                            </div>
                           </div>
                          </div>
                         </div>
                         <div id="i1k1odve_0_MasonryPage_PhotoPost__0_0_8_0_dateSpace_child" orientation="vertical" style="box-sizing:border-box;min-height:15px">
                         </div>
                         <div class=" flex_vbox" id="i1k1odve_0_MasonryPage_PhotoPost__0_0_8_0_def_18_MasonryPage" style="position:relative;display:block;-webkit-box-orient:vertical;-webkit-flex-direction:column;-ms-flex-direction:column;flex-direction:column;box-sizing:border-box">
                          <div class=" flex_vbox" id="i1k1odve_0_MasonryPage_PhotoPost__0_0_8_0_def_19" style="position:relative;display:block;-webkit-box-orient:vertical;-webkit-flex-direction:column;-ms-flex-direction:column;flex-direction:column;box-sizing:border-box">
                           [ahref]
                           
                          </div>
                         </div>
                         <div id="i1k1odve_0_MasonryPage_PhotoPost__0_0_8_0_mediaSpace_child" orientation="vertical" style="box-sizing:border-box;min-height:15px">
                         </div>
                         <div class="s_usaAWRichTextClickableSkin" data-packed="false" id="i1k1odve_0_MasonryPage_PhotoPost__0_0_8_0_text" style="bottom:;right:;width:100%;height:auto;text-align:left;box-sizing:border-box;white-space:normal;overflow:hidden">
                          <li>[ahref]</li>[pkeyx]<li>[linkx]</li>[ahref]<li>[area1][keywordx][symbolx][area1][keywordx][symbolx][bracketl1][area1][keywordx][bracketr1][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx]</li>
                         </div>
                         <div id="i1k1odve_0_MasonryPage_PhotoPost__0_0_8_0_textSpace_child" orientation="vertical" style="box-sizing:border-box;min-height:20px">
                         </div>
                         <div class=" flex_vbox" id="i1k1odve_0_MasonryPage_PhotoPost__0_0_8_0_def_26" style="position:relative;display:block;-webkit-box-orient:vertical;-webkit-flex-direction:column;-ms-flex-direction:column;flex-direction:column;box-sizing:border-box;margin-bottom:7px">
                          <div class=" flex_vbox" id="i1k1odve_0_MasonryPage_PhotoPost__0_0_8_0_def_27" style="position:relative;display:block;-webkit-box-orient:vertical;-webkit-flex-direction:column;-ms-flex-direction:column;flex-direction:column;box-sizing:border-box">
                           [ahref]
                           
                          </div>
                         </div>
                        </div>
                        <div id="i1k1odve_0_MasonryPage_PhotoPost__0_0_8_0_def_30_child" orientation="horizontal" style="box-sizing:border-box;width:7px">
                        </div>
                       </div>
                      </div>
                     </div>
                    </div>
                   </div>
                   <div style="display:inline-block;vertical-align:top;width:50%;box-sizing:border-box;-webkit-box-sizing:border-box;-moz-box-sizing:border-box;-ms-box-sizing:border-box">
                    <div class=" " id="MasonryPage_PhotoPost__0_0_9" style="width:100%;box-sizing:border-box">
                     <div class=" flex_vbox" id="i1k1odve_0_MasonryPage_PhotoPost__0_0_9_0_def_0" style="position:relative;display:block;-webkit-box-orient:vertical;-webkit-flex-direction:column;-ms-flex-direction:column;flex-direction:column;width:100%;box-sizing:border-box">
                      <div class="flex_display c1" id="i1k1odve_0_MasonryPage_PhotoPost__0_0_9_0_def_1" style="bottom:;right:;position:relative;-webkit-box-orient:horizontal;-webkit-flex-direction:row;-ms-flex-direction:row;flex-direction:row;box-sizing:border-box">
                       <div class="c1bg" id="i1k1odve_0_MasonryPage_PhotoPost__0_0_9_0_def_1bg">
                       </div>
                       <div class="c1inlineContent" id="i1k1odve_0_MasonryPage_PhotoPost__0_0_9_0_def_1inlineContent" style="display:inherit;-webkit-box-orient:inherit;-webkit-flex-direction:inherit;-ms-flex-direction:inherit;flex-direction:inherit;position:relative;width:100%">
                        <div id="i1k1odve_0_MasonryPage_PhotoPost__0_0_9_0_def_2_child" orientation="horizontal" style="box-sizing:border-box;width:7px">
                        </div>
                        <div class=" flex_vbox" id="i1k1odve_0_MasonryPage_PhotoPost__0_0_9_0_WholePost" style="position:relative;display:block;-webkit-box-orient:vertical;-webkit-flex-direction:column;-ms-flex-direction:column;flex-direction:column;min-width:0;-webkit-flex:1;-ms-flex:1;flex:1;box-sizing:border-box">
                         <div id="i1k1odve_0_MasonryPage_PhotoPost__0_0_9_0_def_4_child" orientation="vertical" style="box-sizing:border-box;min-height:7px">
                         </div>
                         <div class=" " id="CategoriesList_PhotoPost__0_0_9_0" style="width:100%;box-sizing:border-box">
                         </div>
                         <div class=" flex_vbox" id="i1k1odve_0_MasonryPage_PhotoPost__0_0_9_0_def_6" style="position:relative;display:block;-webkit-box-orient:vertical;-webkit-flex-direction:column;-ms-flex-direction:column;flex-direction:column;box-sizing:border-box">
                          <a href="/single-post/2014/11/14/Fab-Lab-Seoul-Tinkering-Workshop" style="display:flex;flex-direction:column;height:100%;width:100%">
                           <div class="flex_display flex_vbox" id="i1k1odve_0_MasonryPage_PhotoPost__0_0_9_0_def_7" style="position:relative;-webkit-box-orient:vertical;-webkit-flex-direction:column;-ms-flex-direction:column;flex-direction:column;-webkit-box-align:flex-start;-webkit-align-items:flex-start;-moz-box-align:flex-start;-ms-flex-align:start;align-items:flex-start;box-align:flex-start;box-sizing:border-box">
                            <div class="label s_usaAWRichTextClickableSkin" data-packed="false" id="i1k1odve_0_MasonryPage_PhotoPost__0_0_9_0_title" style="bottom:;right:;height:auto;max-width:100%;text-align:left;box-sizing:border-box;white-space:normal">
                             <div class="s_usaAWRichTextClickableSkin_richTextContainer s_usaAWRichTextClickableSkinrichTextContainer" id="i1k1odve_0_MasonryPage_PhotoPost__0_0_9_0_titlerichTextContainer" style="height:initial">
                              <h2 class="font_6" style="line-height:1.2em;">
                               [area1][mkey1][symbolx][pkeyx][symbolx][area1][keyword1][bracketl1][area1][keywordx][bracketr1][symbolx][bracketl2][area1][keywordx][bracketr2][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx]
                              </h2>
                             </div>
                            </div>
                           </div>
                          </a>
                         </div>
                         <div id="i1k1odve_0_MasonryPage_PhotoPost__0_0_9_0_TitleSpace_child" orientation="vertical" style="box-sizing:border-box;min-height:3px">
                         </div>
                         <div class="flex_display flex_vbox" id="i1k1odve_0_MasonryPage_PhotoPost__0_0_9_0_dateAndAuthorAligner" style="position:relative;-webkit-box-orient:vertical;-webkit-flex-direction:column;-ms-flex-direction:column;flex-direction:column;-webkit-box-align:flex-start;-webkit-align-items:flex-start;-moz-box-align:flex-start;-ms-flex-align:start;align-items:flex-start;box-align:flex-start;padding:0;box-sizing:border-box">
                          <div class="flex_display" id="i1k1odve_0_MasonryPage_PhotoPost__0_0_9_0_dateAndAuthor" style="position:relative;-webkit-box-orient:horizontal;-webkit-flex-direction:row;-ms-flex-direction:row;flex-direction:row;max-width:100%;box-sizing:border-box">
                           <div class="s_usaAWRichTextClickableSkin" data-packed="false" id="i1k1odve_0_MasonryPage_PhotoPost__0_0_9_0_date" style="bottom:;right:;height:auto;box-sizing:border-box;margin-right:5px;white-space:normal">
                            <div class="s_usaAWRichTextClickableSkin_richTextContainer s_usaAWRichTextClickableSkinrichTextContainer" id="i1k1odve_0_MasonryPage_PhotoPost__0_0_9_0_daterichTextContainer" style="height:initial">
                             <p class="font_9">
                              Friday, November 14, 2014
                             </p>
                            </div>
                           </div>
                          </div>
                         </div>
                         <div id="i1k1odve_0_MasonryPage_PhotoPost__0_0_9_0_dateSpace_child" orientation="vertical" style="box-sizing:border-box;min-height:15px">
                         </div>
                         <div class=" flex_vbox" id="i1k1odve_0_MasonryPage_PhotoPost__0_0_9_0_def_18_MasonryPage" style="position:relative;display:block;-webkit-box-orient:vertical;-webkit-flex-direction:column;-ms-flex-direction:column;flex-direction:column;box-sizing:border-box">
                          <div class=" flex_vbox" id="i1k1odve_0_MasonryPage_PhotoPost__0_0_9_0_def_19" style="position:relative;display:block;-webkit-box-orient:vertical;-webkit-flex-direction:column;-ms-flex-direction:column;flex-direction:column;box-sizing:border-box">
                           [ahref]
                           
                          </div>
                         </div>
                         <div id="i1k1odve_0_MasonryPage_PhotoPost__0_0_9_0_mediaSpace_child" orientation="vertical" style="box-sizing:border-box;min-height:15px">
                         </div>
                         <div class="s_usaAWRichTextClickableSkin" data-packed="false" id="i1k1odve_0_MasonryPage_PhotoPost__0_0_9_0_text" style="bottom:;right:;width:100%;height:auto;text-align:left;box-sizing:border-box;white-space:normal;overflow:hidden">
                          <div class="s_usaAWRichTextClickableSkin_richTextContainer s_usaAWRichTextClickableSkinrichTextContainer" id="i1k1odve_0_MasonryPage_PhotoPost__0_0_9_0_textrichTextContainer" style="height:initial">
                           <p class="font_8" style="">
                            <strong style="font-weight:normal;">
                             <em style="font-style:normal;">
                              <span style="">
                               도구의 인간은 11월 14일 Fab Lab Seoul의 운영진들을 대상으로 ‘리틀비츠 Tinkering Workshop'을 진행하였습니다. Fab lab은 제작(Fabrication)과 실험실(Laboratory)이 결합된 공간으로, 다양한 디지털 제작 장비를 통해 Maker의 아이디어를 실현할 수 있는 공간입니다. 한국 Maker문화의 중심에 있는 Fab...
                              </span>
                             </em>
                            </strong>
                           </p>
                          </div>
                         </div>
                         <div id="i1k1odve_0_MasonryPage_PhotoPost__0_0_9_0_textSpace_child" orientation="vertical" style="box-sizing:border-box;min-height:20px">
                         </div>
                         <div class=" flex_vbox" id="i1k1odve_0_MasonryPage_PhotoPost__0_0_9_0_def_26" style="position:relative;display:block;-webkit-box-orient:vertical;-webkit-flex-direction:column;-ms-flex-direction:column;flex-direction:column;box-sizing:border-box;margin-bottom:7px">
                          <div class=" flex_vbox" id="i1k1odve_0_MasonryPage_PhotoPost__0_0_9_0_def_27" style="position:relative;display:block;-webkit-box-orient:vertical;-webkit-flex-direction:column;-ms-flex-direction:column;flex-direction:column;box-sizing:border-box">
                           <a href="/single-post/2014/11/14/Fab-Lab-Seoul-Tinkering-Workshop" style="display:flex;flex-direction:column;height:100%;width:100%">
                            <div class="flex_display flex_vbox" id="i1k1odve_0_MasonryPage_PhotoPost__0_0_9_0_def_28" style="position:relative;-webkit-box-orient:vertical;-webkit-flex-direction:column;-ms-flex-direction:column;flex-direction:column;-webkit-box-align:flex-start;-webkit-align-items:flex-start;-moz-box-align:flex-start;-ms-flex-align:start;align-items:flex-start;box-align:flex-start;box-sizing:border-box">
                             <div class="b1" data-align="center" data-disabled="false" data-height="30" data-margin="0" data-proxy-name="Button2" data-should-prevent-width-measurement="true" data-should-use-flex="false" data-state="desktop  center" data-width="57" id="i1k1odve_0_MasonryPage_PhotoPost__0_0_9_0_ReadMoreBtn" style="height:30px;max-width:57px;width:100%;bottom:;right:;position:relative;margin:0;box-sizing:border-box">
                              <div class="g-transparent-a b1link" id="i1k1odve_0_MasonryPage_PhotoPost__0_0_9_0_ReadMoreBtnlink" style="text-align:center;overflow:hidden">
                               <span class="b1label" id="i1k1odve_0_MasonryPage_PhotoPost__0_0_9_0_ReadMoreBtnlabel">
                                Read More
                               </span>
                              </div>
                             </div>
                            </div>
                           </a>
                          </div>
                         </div>
                        </div>
                        <div id="i1k1odve_0_MasonryPage_PhotoPost__0_0_9_0_def_30_child" orientation="horizontal" style="box-sizing:border-box;width:7px">
                        </div>
                       </div>
                      </div>
                     </div>
                    </div>
                   </div>
                  </div>
                 </div>
                 <div class=" flex_vbox" id="i1k1odve_0_MasonryPage_Array__0_0_[object Object]_default" style="position:relative;display:block;-webkit-box-orient:vertical;-webkit-flex-direction:column;-ms-flex-direction:column;flex-direction:column;box-sizing:border-box">
                  <div id="i1k1odve_0_MasonryPage_Array__0_0_def_5_child" orientation="vertical" style="box-sizing:border-box;min-height:20px">
                  </div>
                  <div class="flex_display" id="i1k1odve_0_MasonryPage_Array__0_0_paginationNavigationBox" style="position:relative;-webkit-box-orient:horizontal;-webkit-flex-direction:row;-ms-flex-direction:row;flex-direction:row;justify-content:center;-webkit-justify-content:center;-moz-justify-content:center;-ms-flex-pack:center;-ms-justify-content:center;width:100%;box-sizing:border-box">
                   <div class=" flex_vbox" id="i1k1odve_0_MasonryPage_Array__0_0_def_11" style="position:relative;display:block;-webkit-box-orient:vertical;-webkit-flex-direction:column;-ms-flex-direction:column;flex-direction:column;box-sizing:border-box">
                    [ahref]
                    
                   </div>
                  </div>
                  <div id="i1k1odve_0_MasonryPage_Array__0_0_def_14_child" orientation="vertical" style="box-sizing:border-box;min-height:9px">
                  </div>
                 </div>
                </div>
               </div>
              </div>
             </div>
             <div class="blog_4de5abc5-6da2-4f97-acc3-94bb74285072_1error" id="i1k1odve_0error">
              Please reload
             </div>
             <div class="blog_4de5abc5-6da2-4f97-acc3-94bb74285072_1loading" id="i1k1odve_0loading">
              <p>
              </p>
             </div>
            </div>
            <div class="i1k3j3pw_i1k3j3py" data-is-screen-width="true" id="i1k3j3pw" style="height:392px;display:table;min-width:10px;min-height:10px;left:0;margin-left:0;width:100%;top:-391px;bottom:;right:;position:absolute">
             <iframe allowfullscreen="" allowtransparency="true" class="tpa-gallery-StripSlideshow i1k3j3pw_i1k3j3pyiframe" data-src="https://static.parastorage.com/services/santa/1.7521.1/node_modules/santa-galleries/target/StripSlideshow/StripSlideshow.html?compId=i1k3j3pw&amp;deviceType=desktop&amp;locale=ko&amp;siteRevision=1074&amp;viewMode=site" frameborder="0" id="i1k3j3pwiframe" scrolling="no" style="height:392px;width:100%;position:relative;min-height:10px;min-width:10px">
             </iframe>
            </div>
            <div class="txtNew" data-packed="false" id="i1pzjttt" style="top:-215px;bottom:;left:277px;right:;width:634px;height:auto;position:absolute;pointer-events:none">
             <h2 class="font_2" style="font-size:30px;">
              [area1][mkey1][symbolx][pkeyx][symbolx][area1][keyword1][bracketl1][area1][keywordx][bracketr1][symbolx][bracketl2][area1][keywordx][bracketr2][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx]
             </h2>
            </div>
           </div>
          </div>
         </div>
        </div>
       </div>
      </main>
      <footer class="fc2_footer fc2" data-fixedposition="false" data-isrunninginmobile="false" data-site-width="980" data-state=" " id="SITE_FOOTER" style="bottom:auto;left:0;margin-left:0;width:100%;min-width:980px;top:3557px;right:;height:355px;position:absolute">
       <div class="fc2screenWidthBackground" id="SITE_FOOTERscreenWidthBackground" style="left:0;width:100%">
        <div class="fc2_bg">
        </div>
       </div>
       <div class="fc2centeredContent" id="SITE_FOOTERcenteredContent" style="width:100%">
        <div class="fc2bg" id="SITE_FOOTERbg" style="margin-left:calc((100% - 980px) / 2);width:980px">
         <div class="fc2_bg-center">
         </div>
        </div>
        <div class="fc2inlineContent" id="SITE_FOOTERinlineContent">
         <div class="txtNew" data-packed="false" id="WRchTxtn" style="top:46px;bottom:;left:296px;right:;width:174px;height:auto;position:absolute;pointer-events:none">
          <p class="font_8" style="font-size:10px; line-height:normal;">
           <span style="font-size:10px;">
            <span style="line-height:normal;">
             <span class="color_11">
              <span style="font-family:nanumgothic-regular,sans-serif;">
               OPENING HOURS
              </span>
             </span>
            </span>
           </span>
          </p>
          <p class="font_9" style="font-size:10px; line-height:normal;">
           <span style="font-size:10px;">
            <span style="line-height:normal;">
             <span class="color_11">
              <span style="font-family:nanumgothic-regular,sans-serif;">
               Monday-Friday 10:00am-06:00pm
              </span>
             </span>
            </span>
           </span>
          </p>
          <p class="font_9" style="font-size:11px; line-height:normal;">
          </p>
         </div>
         <div class="txtNew" data-packed="false" id="SITE_STRUCTURE_WRichText_1" style="top:135px;bottom:;left:14px;right:;width:373px;height:auto;position:absolute;pointer-events:none">
          <p class="font_9" style="font-size:6px;">
           <span style="font-size:6px;">
            <span style="font-family:helvetica-w01-roman,helvetica-w02-roman,helvetica-lt-w10-roman,sans-serif;">
             <span class="color_11">
              Copyright 2014, doguin.
             </span>
            </span>
           </span>
           <span class="color_11" style="font-family:helvetica-w01-roman, helvetica-w02-roman, helvetica-lt-w10-roman, sans-serif; font-size:6px;">
            All rights reserved.
           </span>
          </p>
         </div>
         <div class="VrtclLn0-14hb_hx8ocyr3" id="VrtclLn0-14hb" style="top:46px;bottom:;left:250px;right:;width:5px;height:108px;position:absolute">
          <div class="VrtclLn0-14hb_hx8ocyr3line" id="VrtclLn0-14hbline">
          </div>
         </div>
         <div class="wp2" data-content-padding-horizontal="0" data-content-padding-vertical="0" data-display-mode="fill" data-exact-height="31" id="hz599rhp" style="top:40px;bottom:;left:9px;right:;width:159px;height:31px;position:absolute" title="">
          <div class="wp2link" id="hz599rhplink" style="width:159px;height:31px">
           <div class="wp2img" data-has-bg-scroll-effect="" data-image-info='{"imageData":{"type":"Image","id":"cyvu","metaData":{"isPreset":false,"schemaVersion":"2.0","isHidden":false},"title":"","uri":"b091f9_4a8f0f1649654f359f23d1d364be1793.png","description":"","width":500,"height":102,"alt":""},"displayMode":"fill"}' data-style="" id="hz599rhpimg" style="width:159px;height:31px;position:relative;top:0;left:0">
           </div>
          </div>
         </div>
         <div class="txtNew" data-packed="false" id="hz59fyra" style="top:93px;bottom:;left:296px;right:;width:239px;height:auto;position:absolute;pointer-events:none">
          <p class="font_8" style="font-size:10px; line-height:1.4em;">
           <span style="font-size:10px;">
            <span style="line-height:1.4em;">
             <span style="font-family:nanumgothic-regular,sans-serif;">
              CONTACT<li>[area1][mkey1]</li>[area1][mkey1][ahref][area1][keywordx][symbolx][area1][keywordx][symbolx][bracketl2][area1][keywordx][bracketr2][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx]<li>[ahref]</li>[pkeyx]<li>[pkeyx]</li>[pkeyx][area1][keywordx][symbolx][area1][keywordx][symbolx][bracketl3][area1][keywordx][bracketr3][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][ahref]
             </span>
            </span>
           </span>
          </p>
          <p class="font_8" style="font-size:10px; line-height:1.4em;">
           <span style="font-size:10px;">
            <span style="line-height:1.4em;">
             <span style="font-family:nanumgothic-regular,sans-serif;">
              <span class="color_11">
               <object height="0">
                [linkx]
                
               </object>
              </span>
             </span>
            </span>
           </span>
          </p>
          <p class="font_7" style="font-size:10px; line-height:1.4em;">
           <span style="font-size:10px;">
            <span style="line-height:1.4em;">
             <span style="font-family:nanumgothic-regular,sans-serif;">
              <span class="color_11">
               Tel: 070-7608-5202
              </span>
             </span>
            </span>
           </span>
          </p>
          <p class="font_7" style="font-size:10px; line-height:1.4em;">
           <span style="font-size:10px;">
            <span style="line-height:1.4em;">
             <span style="font-family:nanumgothic-regular,sans-serif;">
              <span class="color_11">
               Fax: 02-6971-8202
              </span>
             </span>
            </span>
           </span>
          </p>
          <p class="font_9" style="font-size:13px; line-height:normal;">
          </p>
         </div>
         <div class="hz59kv3w_hz59l1s9" data-align="center" data-disabled="false" data-height="25" data-margin="0" data-should-use-flex="true" data-state="desktop shouldUseFlex center" data-width="93" id="hz59kv3w" style="top:68px;bottom:;left:601px;right:;width:93px;height:25px;position:absolute">
          [linkx]
          
         </div>
         <div class="hz59p75p_hz59p75q" id="hz59p75p" style="top:46px;bottom:;left:496px;right:;width:5px;height:102px;position:absolute">
          <div class="hz59p75p_hz59p75qline" id="hz59p75pline">
          </div>
         </div>
         <div class="hz59qaec_hz59qaee" data-align="center" data-disabled="false" data-height="25" data-margin="0" data-should-use-flex="true" data-state="desktop shouldUseFlex center" data-width="93" id="hz59qaec" style="top:43px;bottom:;left:618px;right:;width:93px;height:25px;position:absolute">
          [linkx]
           [area1][mkey1][area1][keywordx][area1][keywordx][symbolx][area1][keywordx][symbolx][bracketl11][area1][keywordx][bracketr11][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][bracketl12][area1][keywordx][bracketr12][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][linkx][ahref][area1][keywordx][area1][mkey1][area1][keywordx][symbolx][area1][keywordx][symbolx][bracketl13][area1][keywordx][bracketr13][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][pkeyx][linkx][ahref][area1][mkey1][linkx][linkx][pkeyx][area1][keywordx][symbolx][area1][keywordx][symbolx][bracketl14][area1][keywordx][bracketr14][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][bracketl15][area1][keywordx][bracketr15][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][mkey1][pkeyx]
          
         </div>
         <div class="hz59qdp7_hz59qdp7" data-align="center" data-disabled="false" data-height="25" data-margin="0" data-should-use-flex="true" data-state="desktop shouldUseFlex center" data-width="93" id="hz59qdp7" style="top:43px;bottom:;left:523px;right:;width:93px;height:25px;position:absolute">
          <a class="g-transparent-a hz59qdp7_hz59qdp7link" data-content="https://www.facebook.com/doguinkr" data-type="external" href="/doguinkr" id="hz59qdp7link" role="button" target="_blank">
           <span class="hz59qdp7_hz59qdp7label" id="hz59qdp7label">
            Facebook
           </span>
          </a>
         </div>
         <div class="hz59qgwz_hz59qgx0" data-align="center" data-disabled="false" data-height="25" data-margin="0" data-should-use-flex="true" data-state="desktop shouldUseFlex center" data-width="93" id="hz59qgwz" style="top:68px;bottom:;left:516px;right:;width:93px;height:25px;position:absolute">
          <a class="g-transparent-a hz59qgwz_hz59qgx0link" data-content="https://twitter.com/doguin_kr" data-type="external" href="/doguin_kr" id="hz59qgwzlink" role="button" target="_blank">
           <span class="hz59qgwz_hz59qgx0label" id="hz59qgwzlabel">
            Twitter
           </span>
          </a>
         </div>
         <div class="hz59ql9j_hz59ql9m" data-align="center" data-disabled="false" data-height="25" data-margin="0" data-should-use-flex="true" data-state="desktop shouldUseFlex center" data-width="93" id="hz59ql9j" style="top:93px;bottom:;left:523px;right:;width:93px;height:25px;position:absolute">
          [ahref]
          
         </div>
         <div class="hz59qptf_hz59qptg" data-align="center" data-disabled="false" data-height="25" data-margin="0" data-should-use-flex="true" data-state="desktop shouldUseFlex center" data-width="93" id="hz59qptf" style="top:117px;bottom:;left:519px;right:;width:93px;height:25px;position:absolute">
          <a class="g-transparent-a hz59qptf_hz59qptglink" data-content="http://www.youtube.com/user/doguinkr" data-type="external" href="/user/doguinkr" id="hz59qptflink" role="button" target="_blank">
           <span class="hz59qptf_hz59qptglabel" id="hz59qptflabel">
            Youtube
           </span>
          </a>
         </div>
         <div class="hz59ryfi_hz59ryfj" data-align="center" data-disabled="false" data-height="25" data-margin="0" data-should-use-flex="true" data-state="desktop shouldUseFlex center" data-width="94" id="hz59ryfi" style="top:43px;bottom:;left:794px;right:;width:94px;height:25px;position:absolute">
          <a class="g-transparent-a hz59ryfi_hz59ryfjlink" data-content="http://littlebits.cc" data-type="external" href="c" id="hz59ryfilink" role="button" target="_blank">
           <span class="hz59ryfi_hz59ryfjlabel" id="hz59ryfilabel">
            littleBits
           </span>
          </a>
         </div>
         <div class="hz59s64b_hz59s64b" data-align="center" data-disabled="false" data-height="25" data-margin="0" data-should-use-flex="true" data-state="desktop shouldUseFlex center" data-width="94" id="hz59s64b" style="top:68px;bottom:;left:794px;right:;width:94px;height:25px;position:absolute">
          [ahref]
          
         </div>
         <div class="hz59zu18_hz59zu18" id="hz59zu18" style="top:49px;bottom:;left:754px;right:;width:5px;height:93px;position:absolute">
          <div class="hz59zu18_hz59zu18line" id="hz59zu18line">
          </div>
         </div>
         <div class="hz5n6inw_hz5n6inx" data-align="center" data-disabled="false" data-height="62" data-margin="0" data-should-use-flex="true" data-state="desktop shouldUseFlex center" data-width="173" id="hz5n6inw" style="top:26px;bottom:;left:9px;right:;width:173px;height:62px;position:absolute">
          [linkx]
          
         </div>
         <div class="txtNew" data-packed="false" id="i1ro8eum" style="top:83px;bottom:;left:17px;right:;width:282px;height:auto;position:absolute;pointer-events:none">
          <h2 class="font_2" style="font-size:12px;">
           [area1][mkey1][symbolx][pkeyx][symbolx][area1][keyword1][bracketl1][area1][keywordx][bracketr1][symbolx][bracketl2][area1][keywordx][bracketr2][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx]
          </h2>
          <h2 class="font_2" style="font-size:12px;">
           [area1][mkey1][symbolx][pkeyx][symbolx][area1][keyword1][bracketl1][area1][keywordx][bracketr1][symbolx][bracketl2][area1][keywordx][bracketr2][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx]
          </h2>
         </div>
        </div>
       </div>
      </footer>
      <div class="hxifhznw_hxifhznx" data-align="center" data-disabled="false" data-height="28" data-margin="0" data-should-use-flex="true" data-state="desktop shouldUseFlex center" data-width="124" id="hxifhznw" style="top:3478px;bottom:;left:676px;right:;width:124px;height:28px;position:absolute">
       [area1][mkey1][pkeyx][area1][keywordx][ahref][ahref][ahref][pkeyx][area1][keywordx][area1][mkey1][area1][keywordx][area1][mkey1][area1][keywordx][symbolx][area1][keywordx][symbolx][bracketl1][area1][keywordx][bracketr1][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][mkey1][area1][mkey1][pkeyx][linkx][pkeyx][area1][mkey1][area1][keywordx][symbolx][area1][keywordx][symbolx][bracketl2][area1][keywordx][bracketr2][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx]
      </div>
      <div class="lb1" data-hide-prejs="true" id="hxifivnz" style="width:127px;height:28px;top:3478px;bottom:;left:818px;right:;position:absolute">
       <ul aria-label="Social bar" class="lb1itemsContainer" id="hxifivnzitemsContainer">
        <li class="lb1imageItem" id="hxifivnz0image" style="width:28px;height:28px;margin-bottom:0;margin-right:5px;display:inline-block">
         [linkx]
         
        </li>
        <li class="lb1imageItem" id="hxifivnz1image" style="width:28px;height:28px;margin-bottom:0;margin-right:5px;display:inline-block">
         <a class="lb1imageItemlink" data-content="https://twitter.com/doguin_kr" data-type="external" href="/doguin_kr" id="hxifivnz1imagelink" target="_blank">
          <div class="lb1imageItemimage" data-has-bg-scroll-effect="" data-image-info='{"imageData":{"link":{"type":"ExternalLink","id":"349","metaData":{"isPreset":false,"schemaVersion":"1.0","isHidden":false},"url":"https://twitter.com/doguin_kr","target":"_blank"},"type":"Image","id":"i1a2p","metaData":{"isPreset":false,"schemaVersion":"2.0","isHidden":false},"title":"Wix Twitter page","uri":"01113281ebb7dfb57a8dc2a02eb1cb92.png","width":128,"height":128,"alt":"Wix Twitter page"},"displayMode":"fill"}' data-style="position:absolute" id="hxifivnz1imageimage" style="width:28px;height:28px;position:absolute">
          </div>
         </a>
        </li>
        <li class="lb1imageItem" id="hxifivnz2image" style="width:28px;height:28px;margin-bottom:0;margin-right:5px;display:inline-block">
         [linkx]
         
        </li>
        <li class="lb1imageItem" id="hxifivnz3image" style="width:28px;height:28px;margin-bottom:0;margin-right:5px;display:inline-block">
         [ahref]
         
        </li>
       </ul>
      </div>
      <div class="txtNew" data-packed="false" id="hxqyhrvp" style="top:3448px;bottom:;left:18px;right:;width:350px;height:auto;position:absolute;pointer-events:none">
       <h2 class="font_2" style="font-size:18px;">
        <b>[area1][mkey1][symbolx][pkeyx][symbolx][area1][keyword1][bracketl1][area1][keywordx][bracketr1][symbolx][bracketl2][area1][keywordx][bracketr2][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx]</b>
       </h2>
      </div>
      <div class="tpaw0" data-has-iframe="true" id="hxqytdpy" style="top:3472px;bottom:;left:12px;right:;width:489px;height:38px;position:absolute;overflow:hidden;visibility:hidden;min-height:38px;min-width:489px">
       <iframe allow="autoplay; camera; microphone; geolocation; vr" allowfullscreen="" allowtransparency="true" aria-label="MailChimp" class="tpaw0iframe" data-src="https://wix.mailchimpapp.com/?cacheKiller=1562164240305&amp;compId=hxqytdpy&amp;deviceType=desktop&amp;height=38&amp;instance=y6Ej-sJLsvS_5Ly5Tr1NPS86B2QlmGtuHam_oF9gKOU.eyJpbnN0YW5jZUlkIjoiMTM3ZGY1MjctMzcwZC0zNzdlLWFhYjgtMjFjZDVhNzYyYmRiIiwiYXBwRGVmSWQiOiIxMmM0YWMyYi02OGRmLWYzMDYtYWNiYi01NzgwNWQ4MmM4ZGYiLCJzaWduRGF0ZSI6IjIwMTktMDctMDNUMTY6NTU6MjYuNjQ1WiIsInVpZCI6bnVsbCwiaXBBbmRQb3J0IjoiNTIuNzguMTA0LjE0Ni80MTA5NCIsInZlbmRvclByb2R1Y3RJZCI6bnVsbCwiZGVtb01vZGUiOmZhbHNlLCJhaWQiOiJmYzg0MWZlOS1hNTQzLTRlODctOGUzNy1hYTJhZTFhOTkxZmYiLCJzaXRlT3duZXJJZCI6ImIwOTFmOTNmLWUxNTctNGY5OC05NDFhLTU4YzYxMmViMWRmYiJ9&amp;locale=ko&amp;pageId=masterPage&amp;siteRevision=1074&amp;viewMode=site&amp;width=489" frameborder="0" id="hxqytdpyiframe" name="hxqytdpy" scrolling="no" style="width:489px;height:38px;min-height:38px;min-width:489px;display:block;position:absolute;z-index:" title="MailChimp">
       </iframe>
       <div class="tpaw0overlay" id="hxqytdpyoverlay">
       </div>
      </div>
      <div class="hxv8fwtg_hxv8fwti" data-align="center" data-disabled="false" data-height="28" data-margin="0" data-should-use-flex="true" data-state="desktop shouldUseFlex center" data-width="114" id="hxv8fwtg" style="top:3478px;bottom:;left:555px;right:;width:114px;height:28px;position:absolute">
       [ahref]
       
      </div>
      <header class="SITE_HEADER_i1q1a4wl" data-header-top="0" data-is-mobile="false" data-site-width="980" data-state="" id="SITE_HEADER" style="position:absolute;left:0;margin-left:0;width:100%;min-width:980px;top:0;bottom:;right:;height:493px">
       <div class="SITE_HEADER_i1q1a4wlscreenWidthBackground" id="SITE_HEADERscreenWidthBackground" style="left:0;width:100%">
       </div>
       <div class="SITE_HEADER_i1q1a4wlcenteredContent" id="SITE_HEADERcenteredContent">
        <div class="SITE_HEADER_i1q1a4wlbg" id="SITE_HEADERbg" style="margin-left:calc((100% - 980px) / 2);width:980px">
        </div>
        <div class="SITE_HEADER_i1q1a4wlinlineContent" id="SITE_HEADERinlineContent">
         <div class="bgis1" id="i1k2747j" style="top:-6px;bottom:;left:0;right:;width:1440px;height:110px;position:absolute">
          <div class="bgis1bg" data-align-type="center" data-fitting-type="legacy_strip_tile" data-type="bgimage" id="i1k2747jbg">
          </div>
          <div class="bgis1inlineContent" id="i1k2747jinlineContent">
          </div>
         </div>
         <div class="lb1" data-hide-prejs="true" id="LnkBr2-dar" style="width:136px;height:22px;top:42px;bottom:;left:821px;right:;position:absolute">
          <ul aria-label="Social bar" class="lb1itemsContainer" id="LnkBr2-daritemsContainer">
           <li class="lb1imageItem" id="LnkBr2-dar0image" style="width:22px;height:22px;margin-bottom:0;margin-right:16px;display:inline-block">
            [ahref]
            
           </li>
           <li class="lb1imageItem" id="LnkBr2-dar1image" style="width:22px;height:22px;margin-bottom:0;margin-right:16px;display:inline-block">
            [ahref]
            
           </li>
           <li class="lb1imageItem" id="LnkBr2-dar2image" style="width:22px;height:22px;margin-bottom:0;margin-right:16px;display:inline-block">
            [linkx]
            
           </li>
           <li class="lb1imageItem" id="LnkBr2-dar3image" style="width:22px;height:22px;margin-bottom:0;margin-right:16px;display:inline-block">
            [linkx]
            
           </li>
          </ul>
         </div>
         <div class="wp2" data-content-padding-horizontal="0" data-content-padding-vertical="0" data-display-mode="fill" data-exact-height="52" id="i1k2840w" style="top:27px;bottom:;left:10px;right:;width:174px;height:52px;position:absolute" title="">
          <div class="wp2link" id="i1k2840wlink" style="width:174px;height:52px">
           <div class="wp2img" data-has-bg-scroll-effect="" data-image-info='{"imageData":{"type":"Image","id":"cub5","metaData":{"isPreset":false,"schemaVersion":"2.0","isHidden":false},"title":"","uri":"b091f9_87d001510d4f4e14a7367d121bd93430.png","description":"","width":500,"height":256,"alt":""},"displayMode":"fill"}' data-style="" id="i1k2840wimg" style="width:174px;height:52px;position:relative;top:0;left:0">
           </div>
          </div>
         </div>
         <div class="hz5n4oae_hz5n5kc7" data-align="center" data-disabled="false" data-height="76" data-margin="0" data-should-use-flex="true" data-state="desktop shouldUseFlex center" data-width="220" id="hz5n4oae" style="top:11px;bottom:;left:1px;right:;width:220px;height:76px;position:absolute">
          [ahref]
          
         </div>
        </div>
       </div>
      </header>
      <div class="hidden-during-prewarmup DrpDwnMn0_hwxkfxa6" data-dropalign="center" data-drophposition="" data-label-pad="0" data-menuborder-y="0" data-menubtn-border="0" data-num-items="3" data-ribbon-els="0" data-ribbon-extra="0" data-same-width-buttons="false" data-state="center notMobile" data-stretch-buttons-to-menu-width="true" dir="ltr" id="DrpDwnMn0" style="overflow-x:hidden;top:496px;bottom:;left:-2px;right:;width:600px;height:26px;position:absolute">
       <nav>
        <ul aria-label="Site navigation" class="DrpDwnMn0_hwxkfxa6itemsContainer" id="DrpDwnMn0itemsContainer" role="navigation" style="text-align:center">
         <li class="DrpDwnMn0_hwxkfxa6repeaterButton" data-data-id="bmiocy" data-direction="ltr" data-listposition="left" data-state="menu selected idle link notMobile" id="DrpDwnMn00">
          [ahref]
          
         </li>
         <li class="DrpDwnMn0_hwxkfxa6repeaterButton" data-data-id="bmi5yn" data-direction="ltr" data-listposition="center" data-state="menu  idle link notMobile" id="DrpDwnMn01">
          [linkx]
          
         </li>
         <li class="DrpDwnMn0_hwxkfxa6repeaterButton" data-data-id="bmi1sh0" data-direction="ltr" data-listposition="right" data-state="menu  idle link notMobile" id="DrpDwnMn02">
          [ahref]
          
         </li>
         <li class="DrpDwnMn0_hwxkfxa6repeaterButton" data-listposition="right" data-state="menu  idle header notMobile" id="DrpDwnMn0__more__">
          [linkx]
          
         </li>
        </ul>
        <div class="DrpDwnMn0_hwxkfxa6moreButton" id="DrpDwnMn0moreButton">
        </div>
        <nav class="DrpDwnMn0_hwxkfxa6dropWrapper" data-dropalign="center" data-drophposition="" id="DrpDwnMn0dropWrapper" style="visibility:hidden">
         <ul class="DrpDwnMn0_hwxkfxa6moreContainer" id="DrpDwnMn0moreContainer" style="visibility:hidden">
         </ul>
        </nav>
       </nav>
      </div>
      <div class="hx0iwywh_hx0iwywk" data-align="center" data-disabled="false" data-height="27" data-margin="0" data-should-use-flex="true" data-state="desktop shouldUseFlex center" data-width="191" id="hx0iwywh" style="top:495px;bottom:;left:599px;right:;width:191px;height:27px;position:absolute">
       [linkx]
       
      </div>
      <div class="i1q1rg1z_i1q1rg21" data-align="center" data-disabled="false" data-height="27" data-margin="0" data-should-use-flex="true" data-state="desktop shouldUseFlex center" data-width="187" id="i1q1rg1z" style="top:495px;bottom:;left:793px;right:;width:187px;height:27px;position:absolute">
       [ahref]
       
      </div>
     </div>
    </div>
    <div class="siteAspectsContainer">
     <div>
      <h3>
       [area1][mkey1][symbolx][pkeyx][symbolx][area1][keyword1][bracketl1][area1][keywordx][bracketr1][symbolx][bracketl2][area1][keywordx][bracketr2][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx][symbolx][area1][keywordx]
      </h3>
     </div>
     <div>
     </div>
     <div>
      <div class="font-ruler-container" style="overflow:hidden;visibility:hidden;max-height:0;max-width:0;position:absolute">
       <div style="position:absolute;overflow:hidden;font-size:1200px;left:-2000px;visibility:hidden">
        <div style="position:relative;white-space:nowrap;font-family:serif">
         <div style="position:absolute;width:100%;height:100%;overflow:hidden">
          <div>
          </div>
         </div>
         <span class="font-ruler-content">
         </span>
        </div>
       </div>
       <div style="position:absolute;overflow:hidden;font-size:1200px;left:-2000px;visibility:hidden">
        <div style="position:relative;white-space:nowrap;font-family:serif">
         <div style="position:absolute;width:100%;height:100%;overflow:hidden">
          <div>
          </div>
         </div>
         <span class="font-ruler-content">
         </span>
        </div>
       </div>
       <div style="position:absolute;overflow:hidden;font-size:1200px;left:-2000px;visibility:hidden">
        <div style="position:relative;white-space:nowrap;font-family:serif">
         <div style="position:absolute;width:100%;height:100%;overflow:hidden">
          <div>
          </div>
         </div>
         <span class="font-ruler-content">
         </span>
        </div>
       </div>
       <div style="position:absolute;overflow:hidden;font-size:1200px;left:-2000px;visibility:hidden">
        [pkeyx]<li>[area1][mkey1]</li>[area1][keywordx][linkx]
       </div>
       <div style="position:absolute;overflow:hidden;font-size:1200px;left:-2000px;visibility:hidden">
        <div style="position:relative;white-space:nowrap;font-family:serif">
         <div style="position:absolute;width:100%;height:100%;overflow:hidden">
          <div>
          </div>
         </div>
         <span class="font-ruler-content">
         </span>
        </div>
       </div>
       <div style="position:absolute;overflow:hidden;font-size:1200px;left:-2000px;visibility:hidden">
        <div style="position:relative;white-space:nowrap;font-family:serif">
         <div style="position:absolute;width:100%;height:100%;overflow:hidden">
          <div>
          </div>
         </div>
         <span class="font-ruler-content">
         </span>
        </div>
       </div>
       <div style="position:absolute;overflow:hidden;font-size:1200px;left:-2000px;visibility:hidden">
        <div style="position:relative;white-space:nowrap;font-family:serif">
         <div style="position:absolute;width:100%;height:100%;overflow:hidden">
          <div>
          </div>
         </div>
         <span class="font-ruler-content">
         </span>
        </div>
       </div>
       <div style="position:absolute;overflow:hidden;font-size:1200px;left:-2000px;visibility:hidden">
        <div style="position:relative;white-space:nowrap;font-family:serif">
         <div style="position:absolute;width:100%;height:100%;overflow:hidden">
          <div>
          </div>
         </div>
         <span class="font-ruler-content">
         </span>
        </div>
       </div>
      </div>
     </div>
     <div id="popoverLayer">
     </div>
    </div>
   </div>
  </div>
  <b style="color:black;background-color:#a0ffff">
   jnice09-ipp30-wq-zq-0496
  </b>
 </body>
</html>
|<---